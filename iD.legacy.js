(function() {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = function(target) {
    return __defProp(target, "__esModule", { value: true });
  };
  var __esm = function(fn, res) {
    return function __init() {
      return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
    };
  };
  var __commonJS = function(cb, mod) {
    return function __require() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
  };
  var __export = function(target, all) {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __reExport = function(target, module2, desc) {
    if (module2 && typeof module2 === "object" || typeof module2 === "function")
      for (var keys3 = __getOwnPropNames(module2), i2 = 0, n2 = keys3.length, key; i2 < n2; i2++) {
        key = keys3[i2];
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: function(k) {
            return module2[k];
          }.bind(null, key), enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
      }
    return target;
  };
  var __toModule = function(module2) {
    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: function() {
      return module2.default;
    }, enumerable: true } : { value: module2, enumerable: true })), module2);
  };

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  var init_typeof = __esm({
    "node_modules/@babel/runtime/helpers/esm/typeof.js": function() {
    }
  });

  // node_modules/aes-js/index.js
  var require_aes_js = __commonJS({
    "node_modules/aes-js/index.js": function(exports2, module2) {
      (function(root3) {
        "use strict";
        function checkInt(value2) {
          return parseInt(value2) === value2;
        }
        function checkInts(arrayish) {
          if (!checkInt(arrayish.length)) {
            return false;
          }
          for (var i2 = 0; i2 < arrayish.length; i2++) {
            if (!checkInt(arrayish[i2]) || arrayish[i2] < 0 || arrayish[i2] > 255) {
              return false;
            }
          }
          return true;
        }
        function coerceArray(arg, copy7) {
          if (arg.buffer && arg.name === "Uint8Array") {
            if (copy7) {
              if (arg.slice) {
                arg = arg.slice();
              } else {
                arg = Array.prototype.slice.call(arg);
              }
            }
            return arg;
          }
          if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
              throw new Error("Array contains invalid value: " + arg);
            }
            return new Uint8Array(arg);
          }
          if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
          }
          throw new Error("unsupported array-like object");
        }
        function createArray(length) {
          return new Uint8Array(length);
        }
        function copyArray2(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
          if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
              sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
              sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
          }
          targetArray.set(sourceArray, targetStart);
        }
        var convertUtf8 = function() {
          function toBytes(text) {
            var result6 = [], i2 = 0;
            text = encodeURI(text);
            while (i2 < text.length) {
              var c2 = text.charCodeAt(i2++);
              if (c2 === 37) {
                result6.push(parseInt(text.substr(i2, 2), 16));
                i2 += 2;
              } else {
                result6.push(c2);
              }
            }
            return coerceArray(result6);
          }
          function fromBytes(bytes) {
            var result6 = [], i2 = 0;
            while (i2 < bytes.length) {
              var c2 = bytes[i2];
              if (c2 < 128) {
                result6.push(String.fromCharCode(c2));
                i2++;
              } else if (c2 > 191 && c2 < 224) {
                result6.push(String.fromCharCode((c2 & 31) << 6 | bytes[i2 + 1] & 63));
                i2 += 2;
              } else {
                result6.push(String.fromCharCode((c2 & 15) << 12 | (bytes[i2 + 1] & 63) << 6 | bytes[i2 + 2] & 63));
                i2 += 3;
              }
            }
            return result6.join("");
          }
          return {
            toBytes: toBytes,
            fromBytes: fromBytes
          };
        }();
        var convertHex = function() {
          function toBytes(text) {
            var result6 = [];
            for (var i2 = 0; i2 < text.length; i2 += 2) {
              result6.push(parseInt(text.substr(i2, 2), 16));
            }
            return result6;
          }
          var Hex = "0123456789abcdef";
          function fromBytes(bytes) {
            var result6 = [];
            for (var i2 = 0; i2 < bytes.length; i2++) {
              var v = bytes[i2];
              result6.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
            }
            return result6.join("");
          }
          return {
            toBytes: toBytes,
            fromBytes: fromBytes
          };
        }();
        var numberOfRounds = {
          16: 10,
          24: 12,
          32: 14
        };
        var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
        var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
        var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
        var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
        var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
        var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
        var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
        var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
        var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
        var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
        var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
        var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
        var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
        var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
        var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
        function convertToInt32(bytes) {
          var result6 = [];
          for (var i2 = 0; i2 < bytes.length; i2 += 4) {
            result6.push(bytes[i2] << 24 | bytes[i2 + 1] << 16 | bytes[i2 + 2] << 8 | bytes[i2 + 3]);
          }
          return result6;
        }
        var AES = function AES2(key) {
          if (!(this instanceof AES2)) {
            throw Error("AES must be instanitated with `new`");
          }
          Object.defineProperty(this, "key", {
            value: coerceArray(key, true)
          });
          this._prepare();
        };
        AES.prototype._prepare = function() {
          var rounds = numberOfRounds[this.key.length];
          if (rounds == null) {
            throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
          }
          this._Ke = [];
          this._Kd = [];
          for (var i2 = 0; i2 <= rounds; i2++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
          }
          var roundKeyCount = (rounds + 1) * 4;
          var KC = this.key.length / 4;
          var tk = convertToInt32(this.key);
          var index;
          for (var i2 = 0; i2 < KC; i2++) {
            index = i2 >> 2;
            this._Ke[index][i2 % 4] = tk[i2];
            this._Kd[rounds - index][i2 % 4] = tk[i2];
          }
          var rconpointer = 0;
          var t = KC, tt;
          while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
            rconpointer += 1;
            if (KC != 8) {
              for (var i2 = 1; i2 < KC; i2++) {
                tk[i2] ^= tk[i2 - 1];
              }
            } else {
              for (var i2 = 1; i2 < KC / 2; i2++) {
                tk[i2] ^= tk[i2 - 1];
              }
              tt = tk[KC / 2 - 1];
              tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
              for (var i2 = KC / 2 + 1; i2 < KC; i2++) {
                tk[i2] ^= tk[i2 - 1];
              }
            }
            var i2 = 0, r, c2;
            while (i2 < KC && t < roundKeyCount) {
              r = t >> 2;
              c2 = t % 4;
              this._Ke[r][c2] = tk[i2];
              this._Kd[rounds - r][c2] = tk[i2++];
              t++;
            }
          }
          for (var r = 1; r < rounds; r++) {
            for (var c2 = 0; c2 < 4; c2++) {
              tt = this._Kd[r][c2];
              this._Kd[r][c2] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
            }
          }
        };
        AES.prototype.encrypt = function(plaintext) {
          if (plaintext.length != 16) {
            throw new Error("invalid plaintext size (must be 16 bytes)");
          }
          var rounds = this._Ke.length - 1;
          var a = [0, 0, 0, 0];
          var t = convertToInt32(plaintext);
          for (var i2 = 0; i2 < 4; i2++) {
            t[i2] ^= this._Ke[0][i2];
          }
          for (var r = 1; r < rounds; r++) {
            for (var i2 = 0; i2 < 4; i2++) {
              a[i2] = T1[t[i2] >> 24 & 255] ^ T2[t[(i2 + 1) % 4] >> 16 & 255] ^ T3[t[(i2 + 2) % 4] >> 8 & 255] ^ T4[t[(i2 + 3) % 4] & 255] ^ this._Ke[r][i2];
            }
            t = a.slice();
          }
          var result6 = createArray(16), tt;
          for (var i2 = 0; i2 < 4; i2++) {
            tt = this._Ke[rounds][i2];
            result6[4 * i2] = (S[t[i2] >> 24 & 255] ^ tt >> 24) & 255;
            result6[4 * i2 + 1] = (S[t[(i2 + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
            result6[4 * i2 + 2] = (S[t[(i2 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
            result6[4 * i2 + 3] = (S[t[(i2 + 3) % 4] & 255] ^ tt) & 255;
          }
          return result6;
        };
        AES.prototype.decrypt = function(ciphertext) {
          if (ciphertext.length != 16) {
            throw new Error("invalid ciphertext size (must be 16 bytes)");
          }
          var rounds = this._Kd.length - 1;
          var a = [0, 0, 0, 0];
          var t = convertToInt32(ciphertext);
          for (var i2 = 0; i2 < 4; i2++) {
            t[i2] ^= this._Kd[0][i2];
          }
          for (var r = 1; r < rounds; r++) {
            for (var i2 = 0; i2 < 4; i2++) {
              a[i2] = T5[t[i2] >> 24 & 255] ^ T6[t[(i2 + 3) % 4] >> 16 & 255] ^ T7[t[(i2 + 2) % 4] >> 8 & 255] ^ T8[t[(i2 + 1) % 4] & 255] ^ this._Kd[r][i2];
            }
            t = a.slice();
          }
          var result6 = createArray(16), tt;
          for (var i2 = 0; i2 < 4; i2++) {
            tt = this._Kd[rounds][i2];
            result6[4 * i2] = (Si[t[i2] >> 24 & 255] ^ tt >> 24) & 255;
            result6[4 * i2 + 1] = (Si[t[(i2 + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
            result6[4 * i2 + 2] = (Si[t[(i2 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
            result6[4 * i2 + 3] = (Si[t[(i2 + 1) % 4] & 255] ^ tt) & 255;
          }
          return result6;
        };
        var ModeOfOperationECB = function ModeOfOperationECB2(key) {
          if (!(this instanceof ModeOfOperationECB2)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Electronic Code Block";
          this.name = "ecb";
          this._aes = new AES(key);
        };
        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
          plaintext = coerceArray(plaintext);
          if (plaintext.length % 16 !== 0) {
            throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
          }
          var ciphertext = createArray(plaintext.length);
          var block = createArray(16);
          for (var i2 = 0; i2 < plaintext.length; i2 += 16) {
            copyArray2(plaintext, block, 0, i2, i2 + 16);
            block = this._aes.encrypt(block);
            copyArray2(block, ciphertext, i2);
          }
          return ciphertext;
        };
        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
          ciphertext = coerceArray(ciphertext);
          if (ciphertext.length % 16 !== 0) {
            throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
          }
          var plaintext = createArray(ciphertext.length);
          var block = createArray(16);
          for (var i2 = 0; i2 < ciphertext.length; i2 += 16) {
            copyArray2(ciphertext, block, 0, i2, i2 + 16);
            block = this._aes.decrypt(block);
            copyArray2(block, plaintext, i2);
          }
          return plaintext;
        };
        var ModeOfOperationCBC = function ModeOfOperationCBC2(key, iv) {
          if (!(this instanceof ModeOfOperationCBC2)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Cipher Block Chaining";
          this.name = "cbc";
          if (!iv) {
            iv = createArray(16);
          } else if (iv.length != 16) {
            throw new Error("invalid initialation vector size (must be 16 bytes)");
          }
          this._lastCipherblock = coerceArray(iv, true);
          this._aes = new AES(key);
        };
        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
          plaintext = coerceArray(plaintext);
          if (plaintext.length % 16 !== 0) {
            throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
          }
          var ciphertext = createArray(plaintext.length);
          var block = createArray(16);
          for (var i2 = 0; i2 < plaintext.length; i2 += 16) {
            copyArray2(plaintext, block, 0, i2, i2 + 16);
            for (var j = 0; j < 16; j++) {
              block[j] ^= this._lastCipherblock[j];
            }
            this._lastCipherblock = this._aes.encrypt(block);
            copyArray2(this._lastCipherblock, ciphertext, i2);
          }
          return ciphertext;
        };
        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
          ciphertext = coerceArray(ciphertext);
          if (ciphertext.length % 16 !== 0) {
            throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
          }
          var plaintext = createArray(ciphertext.length);
          var block = createArray(16);
          for (var i2 = 0; i2 < ciphertext.length; i2 += 16) {
            copyArray2(ciphertext, block, 0, i2, i2 + 16);
            block = this._aes.decrypt(block);
            for (var j = 0; j < 16; j++) {
              plaintext[i2 + j] = block[j] ^ this._lastCipherblock[j];
            }
            copyArray2(ciphertext, this._lastCipherblock, 0, i2, i2 + 16);
          }
          return plaintext;
        };
        var ModeOfOperationCFB = function ModeOfOperationCFB2(key, iv, segmentSize) {
          if (!(this instanceof ModeOfOperationCFB2)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Cipher Feedback";
          this.name = "cfb";
          if (!iv) {
            iv = createArray(16);
          } else if (iv.length != 16) {
            throw new Error("invalid initialation vector size (must be 16 size)");
          }
          if (!segmentSize) {
            segmentSize = 1;
          }
          this.segmentSize = segmentSize;
          this._shiftRegister = coerceArray(iv, true);
          this._aes = new AES(key);
        };
        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
          if (plaintext.length % this.segmentSize != 0) {
            throw new Error("invalid plaintext size (must be segmentSize bytes)");
          }
          var encrypted = coerceArray(plaintext, true);
          var xorSegment;
          for (var i2 = 0; i2 < encrypted.length; i2 += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
              encrypted[i2 + j] ^= xorSegment[j];
            }
            copyArray2(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray2(encrypted, this._shiftRegister, 16 - this.segmentSize, i2, i2 + this.segmentSize);
          }
          return encrypted;
        };
        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
          if (ciphertext.length % this.segmentSize != 0) {
            throw new Error("invalid ciphertext size (must be segmentSize bytes)");
          }
          var plaintext = coerceArray(ciphertext, true);
          var xorSegment;
          for (var i2 = 0; i2 < plaintext.length; i2 += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
              plaintext[i2 + j] ^= xorSegment[j];
            }
            copyArray2(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray2(ciphertext, this._shiftRegister, 16 - this.segmentSize, i2, i2 + this.segmentSize);
          }
          return plaintext;
        };
        var ModeOfOperationOFB = function ModeOfOperationOFB2(key, iv) {
          if (!(this instanceof ModeOfOperationOFB2)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Output Feedback";
          this.name = "ofb";
          if (!iv) {
            iv = createArray(16);
          } else if (iv.length != 16) {
            throw new Error("invalid initialation vector size (must be 16 bytes)");
          }
          this._lastPrecipher = coerceArray(iv, true);
          this._lastPrecipherIndex = 16;
          this._aes = new AES(key);
        };
        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
          var encrypted = coerceArray(plaintext, true);
          for (var i2 = 0; i2 < encrypted.length; i2++) {
            if (this._lastPrecipherIndex === 16) {
              this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
              this._lastPrecipherIndex = 0;
            }
            encrypted[i2] ^= this._lastPrecipher[this._lastPrecipherIndex++];
          }
          return encrypted;
        };
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
        var Counter = function Counter2(initialValue) {
          if (!(this instanceof Counter2)) {
            throw Error("Counter must be instanitated with `new`");
          }
          if (initialValue !== 0 && !initialValue) {
            initialValue = 1;
          }
          if (typeof initialValue === "number") {
            this._counter = createArray(16);
            this.setValue(initialValue);
          } else {
            this.setBytes(initialValue);
          }
        };
        Counter.prototype.setValue = function(value2) {
          if (typeof value2 !== "number" || parseInt(value2) != value2) {
            throw new Error("invalid counter value (must be an integer)");
          }
          if (value2 > Number.MAX_SAFE_INTEGER) {
            throw new Error("integer value out of safe range");
          }
          for (var index = 15; index >= 0; --index) {
            this._counter[index] = value2 % 256;
            value2 = parseInt(value2 / 256);
          }
        };
        Counter.prototype.setBytes = function(bytes) {
          bytes = coerceArray(bytes, true);
          if (bytes.length != 16) {
            throw new Error("invalid counter bytes size (must be 16 bytes)");
          }
          this._counter = bytes;
        };
        Counter.prototype.increment = function() {
          for (var i2 = 15; i2 >= 0; i2--) {
            if (this._counter[i2] === 255) {
              this._counter[i2] = 0;
            } else {
              this._counter[i2]++;
              break;
            }
          }
        };
        var ModeOfOperationCTR = function ModeOfOperationCTR2(key, counter) {
          if (!(this instanceof ModeOfOperationCTR2)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Counter";
          this.name = "ctr";
          if (!(counter instanceof Counter)) {
            counter = new Counter(counter);
          }
          this._counter = counter;
          this._remainingCounter = null;
          this._remainingCounterIndex = 16;
          this._aes = new AES(key);
        };
        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
          var encrypted = coerceArray(plaintext, true);
          for (var i2 = 0; i2 < encrypted.length; i2++) {
            if (this._remainingCounterIndex === 16) {
              this._remainingCounter = this._aes.encrypt(this._counter._counter);
              this._remainingCounterIndex = 0;
              this._counter.increment();
            }
            encrypted[i2] ^= this._remainingCounter[this._remainingCounterIndex++];
          }
          return encrypted;
        };
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
        function pkcs7pad(data2) {
          data2 = coerceArray(data2, true);
          var padder = 16 - data2.length % 16;
          var result6 = createArray(data2.length + padder);
          copyArray2(data2, result6);
          for (var i2 = data2.length; i2 < result6.length; i2++) {
            result6[i2] = padder;
          }
          return result6;
        }
        function pkcs7strip(data2) {
          data2 = coerceArray(data2, true);
          if (data2.length < 16) {
            throw new Error("PKCS#7 invalid length");
          }
          var padder = data2[data2.length - 1];
          if (padder > 16) {
            throw new Error("PKCS#7 padding byte out of range");
          }
          var length = data2.length - padder;
          for (var i2 = 0; i2 < padder; i2++) {
            if (data2[length + i2] !== padder) {
              throw new Error("PKCS#7 invalid padding byte");
            }
          }
          var result6 = createArray(length);
          copyArray2(data2, result6, 0, 0, length);
          return result6;
        }
        var aesjs2 = {
          AES: AES,
          Counter: Counter,
          ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
          },
          utils: {
            hex: convertHex,
            utf8: convertUtf8
          },
          padding: {
            pkcs7: {
              pad: pkcs7pad,
              strip: pkcs7strip
            }
          },
          _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray2
          }
        };
        if (typeof exports2 !== "undefined") {
          module2.exports = aesjs2;
        } else if (typeof define === "function" && define.amd) {
          define([], function() {
            return aesjs2;
          });
        } else {
          if (root3.aesjs) {
            aesjs2._aesjs = root3.aesjs;
          }
          root3.aesjs = aesjs2;
        }
      })(exports2);
    }
  });

  // node_modules/diacritics/index.js
  var require_diacritics = __commonJS({
    "node_modules/diacritics/index.js": function(exports2) {
      exports2.remove = removeDiacritics2;
      var replacementList = [{
        base: " ",
        chars: "\xA0"
      }, {
        base: "0",
        chars: "\u07C0"
      }, {
        base: "A",
        chars: "\u24B6\uFF21\xC0\xC1\xC2\u1EA6\u1EA4\u1EAA\u1EA8\xC3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\xC4\u01DE\u1EA2\xC5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
      }, {
        base: "AA",
        chars: "\uA732"
      }, {
        base: "AE",
        chars: "\xC6\u01FC\u01E2"
      }, {
        base: "AO",
        chars: "\uA734"
      }, {
        base: "AU",
        chars: "\uA736"
      }, {
        base: "AV",
        chars: "\uA738\uA73A"
      }, {
        base: "AY",
        chars: "\uA73C"
      }, {
        base: "B",
        chars: "\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0181"
      }, {
        base: "C",
        chars: "\u24B8\uFF23\uA73E\u1E08\u0106C\u0108\u010A\u010C\xC7\u0187\u023B"
      }, {
        base: "D",
        chars: "\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018A\u0189\u1D05\uA779"
      }, {
        base: "Dh",
        chars: "\xD0"
      }, {
        base: "DZ",
        chars: "\u01F1\u01C4"
      }, {
        base: "Dz",
        chars: "\u01F2\u01C5"
      }, {
        base: "E",
        chars: "\u025B\u24BA\uFF25\xC8\xC9\xCA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\xCB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E\u1D07"
      }, {
        base: "F",
        chars: "\uA77C\u24BB\uFF26\u1E1E\u0191\uA77B"
      }, {
        base: "G",
        chars: "\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E\u0262"
      }, {
        base: "H",
        chars: "\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
      }, {
        base: "I",
        chars: "\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
      }, {
        base: "J",
        chars: "\u24BF\uFF2A\u0134\u0248\u0237"
      }, {
        base: "K",
        chars: "\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
      }, {
        base: "L",
        chars: "\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
      }, {
        base: "LJ",
        chars: "\u01C7"
      }, {
        base: "Lj",
        chars: "\u01C8"
      }, {
        base: "M",
        chars: "\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C\u03FB"
      }, {
        base: "N",
        chars: "\uA7A4\u0220\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u019D\uA790\u1D0E"
      }, {
        base: "NJ",
        chars: "\u01CA"
      }, {
        base: "Nj",
        chars: "\u01CB"
      }, {
        base: "O",
        chars: "\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C"
      }, {
        base: "OE",
        chars: "\u0152"
      }, {
        base: "OI",
        chars: "\u01A2"
      }, {
        base: "OO",
        chars: "\uA74E"
      }, {
        base: "OU",
        chars: "\u0222"
      }, {
        base: "P",
        chars: "\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
      }, {
        base: "Q",
        chars: "\u24C6\uFF31\uA756\uA758\u024A"
      }, {
        base: "R",
        chars: "\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
      }, {
        base: "S",
        chars: "\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
      }, {
        base: "T",
        chars: "\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
      }, {
        base: "Th",
        chars: "\xDE"
      }, {
        base: "TZ",
        chars: "\uA728"
      }, {
        base: "U",
        chars: "\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
      }, {
        base: "V",
        chars: "\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245"
      }, {
        base: "VY",
        chars: "\uA760"
      }, {
        base: "W",
        chars: "\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
      }, {
        base: "X",
        chars: "\u24CD\uFF38\u1E8A\u1E8C"
      }, {
        base: "Y",
        chars: "\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
      }, {
        base: "Z",
        chars: "\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
      }, {
        base: "a",
        chars: "\u24D0\uFF41\u1E9A\xE0\xE1\xE2\u1EA7\u1EA5\u1EAB\u1EA9\xE3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\xE4\u01DF\u1EA3\xE5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250\u0251"
      }, {
        base: "aa",
        chars: "\uA733"
      }, {
        base: "ae",
        chars: "\xE6\u01FD\u01E3"
      }, {
        base: "ao",
        chars: "\uA735"
      }, {
        base: "au",
        chars: "\uA737"
      }, {
        base: "av",
        chars: "\uA739\uA73B"
      }, {
        base: "ay",
        chars: "\uA73D"
      }, {
        base: "b",
        chars: "\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253\u0182"
      }, {
        base: "c",
        chars: "\uFF43\u24D2\u0107\u0109\u010B\u010D\xE7\u1E09\u0188\u023C\uA73F\u2184"
      }, {
        base: "d",
        chars: "\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\u018B\u13E7\u0501\uA7AA"
      }, {
        base: "dh",
        chars: "\xF0"
      }, {
        base: "dz",
        chars: "\u01F3\u01C6"
      }, {
        base: "e",
        chars: "\u24D4\uFF45\xE8\xE9\xEA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\xEB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u01DD"
      }, {
        base: "f",
        chars: "\u24D5\uFF46\u1E1F\u0192"
      }, {
        base: "ff",
        chars: "\uFB00"
      }, {
        base: "fi",
        chars: "\uFB01"
      }, {
        base: "fl",
        chars: "\uFB02"
      }, {
        base: "ffi",
        chars: "\uFB03"
      }, {
        base: "ffl",
        chars: "\uFB04"
      }, {
        base: "g",
        chars: "\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\uA77F\u1D79"
      }, {
        base: "h",
        chars: "\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
      }, {
        base: "hv",
        chars: "\u0195"
      }, {
        base: "i",
        chars: "\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
      }, {
        base: "j",
        chars: "\u24D9\uFF4A\u0135\u01F0\u0249"
      }, {
        base: "k",
        chars: "\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
      }, {
        base: "l",
        chars: "\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747\u026D"
      }, {
        base: "lj",
        chars: "\u01C9"
      }, {
        base: "m",
        chars: "\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F"
      }, {
        base: "n",
        chars: "\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5\u043B\u0509"
      }, {
        base: "nj",
        chars: "\u01CC"
      }, {
        base: "o",
        chars: "\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\uA74B\uA74D\u0275\u0254\u1D11"
      }, {
        base: "oe",
        chars: "\u0153"
      }, {
        base: "oi",
        chars: "\u01A3"
      }, {
        base: "oo",
        chars: "\uA74F"
      }, {
        base: "ou",
        chars: "\u0223"
      }, {
        base: "p",
        chars: "\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755\u03C1"
      }, {
        base: "q",
        chars: "\u24E0\uFF51\u024B\uA757\uA759"
      }, {
        base: "r",
        chars: "\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
      }, {
        base: "s",
        chars: "\u24E2\uFF53\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B\u0282"
      }, {
        base: "ss",
        chars: "\xDF"
      }, {
        base: "t",
        chars: "\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
      }, {
        base: "th",
        chars: "\xFE"
      }, {
        base: "tz",
        chars: "\uA729"
      }, {
        base: "u",
        chars: "\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
      }, {
        base: "v",
        chars: "\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C"
      }, {
        base: "vy",
        chars: "\uA761"
      }, {
        base: "w",
        chars: "\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
      }, {
        base: "x",
        chars: "\u24E7\uFF58\u1E8B\u1E8D"
      }, {
        base: "y",
        chars: "\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
      }, {
        base: "z",
        chars: "\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
      }];
      var diacriticsMap = {};
      for (i2 = 0; i2 < replacementList.length; i2 += 1) {
        chars = replacementList[i2].chars;
        for (j = 0; j < chars.length; j += 1) {
          diacriticsMap[chars[j]] = replacementList[i2].base;
        }
      }
      var chars;
      var j;
      var i2;
      function removeDiacritics2(str) {
        return str.replace(/[^\u0000-\u007e]/g, function(c2) {
          return diacriticsMap[c2] || c2;
        });
      }
      exports2.replacementList = replacementList;
      exports2.diacriticsMap = diacriticsMap;
    }
  });

  // node_modules/regenerator-runtime/runtime.js
  var require_runtime = __commonJS({
    "node_modules/regenerator-runtime/runtime.js": function(exports2, module2) {
      init_typeof();
      var runtime = function(exports3) {
        "use strict";
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined2;
        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define2(obj, key, value2) {
          Object.defineProperty(obj, key, {
            value: value2,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }
        try {
          define2({}, "");
        } catch (err) {
          define2 = function define3(obj, key, value2) {
            return obj[key] = value2;
          };
        }
        function wrap2(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []);
          generator._invoke = makeInvokeMethod(innerFn, self2, context);
          return generator;
        }
        exports3.wrap = wrap2;
        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }
        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define2(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values2([])));
        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          IteratorPrototype = NativeIteratorPrototype;
        }
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = GeneratorFunctionPrototype;
        define2(Gp, "constructor", GeneratorFunctionPrototype);
        define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
        GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define2(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        exports3.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };
        exports3.mark = function(genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define2(genFun, toStringTagSymbol, "GeneratorFunction");
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };
        exports3.awrap = function(arg) {
          return {
            __await: arg
          };
        };
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result6 = record.arg;
              var value2 = result6.value;
              if (value2 && _typeof(value2) === "object" && hasOwn.call(value2, "__await")) {
                return PromiseImpl.resolve(value2.__await).then(function(value3) {
                  invoke("next", value3, resolve, reject);
                }, function(err) {
                  invoke("throw", err, resolve, reject);
                });
              }
              return PromiseImpl.resolve(value2).then(function(unwrapped) {
                result6.value = unwrapped;
                resolve(result6);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
          }
          var previousPromise;
          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
          this._invoke = enqueue;
        }
        defineIteratorMethods(AsyncIterator.prototype);
        define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        });
        exports3.AsyncIterator = AsyncIterator;
        exports3.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0)
            PromiseImpl = Promise;
          var iter = new AsyncIterator(wrap2(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports3.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result6) {
            return result6.done ? result6.value : iter.next();
          });
        };
        function makeInvokeMethod(innerFn, self2, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }
              return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while (true) {
              var delegate = context.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if (context.method === "next") {
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }
                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }
              state = GenStateExecuting;
              var record = tryCatch(innerFn, self2, context);
              if (record.type === "normal") {
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                if (record.arg === ContinueSentinel) {
                  continue;
                }
                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted;
                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];
          if (method === undefined2) {
            context.delegate = null;
            if (context.method === "throw") {
              if (delegate.iterator["return"]) {
                context.method = "return";
                context.arg = undefined2;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                  return ContinueSentinel;
                }
              }
              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
          }
          var record = tryCatch(method, delegate.iterator, context.arg);
          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }
          var info = record.arg;
          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined2;
            }
          } else {
            return info;
          }
          context.delegate = null;
          return ContinueSentinel;
        }
        defineIteratorMethods(Gp);
        define2(Gp, toStringTagSymbol, "Generator");
        define2(Gp, iteratorSymbol, function() {
          return this;
        });
        define2(Gp, "toString", function() {
          return "[object Generator]";
        });
        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{
            tryLoc: "root"
          }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }
        exports3.keys = function(object) {
          var keys3 = [];
          for (var key in object) {
            keys3.push(key);
          }
          keys3.reverse();
          return function next() {
            while (keys3.length) {
              var key2 = keys3.pop();
              if (key2 in object) {
                next.value = key2;
                next.done = false;
                return next;
              }
            }
            next.done = true;
            return next;
          };
        };
        function values2(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
              return iterable;
            }
            if (!isNaN(iterable.length)) {
              var i2 = -1, next = function next2() {
                while (++i2 < iterable.length) {
                  if (hasOwn.call(iterable, i2)) {
                    next2.value = iterable[i2];
                    next2.done = false;
                    return next2;
                  }
                }
                next2.value = undefined2;
                next2.done = true;
                return next2;
              };
              return next.next = next;
            }
          }
          return {
            next: doneResult
          };
        }
        exports3.values = values2;
        function doneResult() {
          return {
            value: undefined2,
            done: true
          };
        }
        Context.prototype = {
          constructor: Context,
          reset: function reset17(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = this._sent = undefined2;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined2;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
              for (var name in this) {
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined2;
                }
              }
            }
          },
          stop: function stop2() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }
            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done) {
              throw exception;
            }
            var context = this;
            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;
              if (caught) {
                context.method = "next";
                context.arg = undefined2;
              }
              return !!caught;
            }
            for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
              var entry = this.tryEntries[i2];
              var record = entry.completion;
              if (entry.tryLoc === "root") {
                return handle("end");
              }
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function abrupt(type3, arg) {
            for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
              var entry = this.tryEntries[i2];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            if (finallyEntry && (type3 === "break" || type3 === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type3;
            record.arg = arg;
            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }
            return this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
            return ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
              var entry = this.tryEntries[i2];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
              var entry = this.tryEntries[i2];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values2(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            };
            if (this.method === "next") {
              this.arg = undefined2;
            }
            return ContinueSentinel;
          }
        };
        return exports3;
      }((typeof module2 === "undefined" ? "undefined" : _typeof(module2)) === "object" ? module2.exports : {});
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
          globalThis.regeneratorRuntime = runtime;
        } else {
          Function("r", "regeneratorRuntime = r")(runtime);
        }
      }
    }
  });

  // node_modules/@babel/runtime/regenerator/index.js
  var require_regenerator = __commonJS({
    "node_modules/@babel/runtime/regenerator/index.js": function(exports2, module2) {
      module2.exports = require_runtime();
    }
  });

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray2(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  var init_arrayLikeToArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js": function() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray2(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray2(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray2(o2, minLen);
  }
  var init_unsupportedIterableToArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js": function() {
      init_arrayLikeToArray();
    }
  });

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var init_arrayWithHoles = __esm({
    "node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js": function() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(arr, i2) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  var init_iterableToArrayLimit = __esm({
    "node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js": function() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var init_nonIterableRest = __esm({
    "node_modules/@babel/runtime/helpers/esm/nonIterableRest.js": function() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest();
  }
  var init_slicedToArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/slicedToArray.js": function() {
      init_arrayWithHoles();
      init_iterableToArrayLimit();
      init_unsupportedIterableToArray();
      init_nonIterableRest();
    }
  });

  // node_modules/alif-toolkit/lib/isArabic.js
  var require_isArabic = __commonJS({
    "node_modules/alif-toolkit/lib/isArabic.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var arabicBlocks = [
        [1536, 1791],
        [1872, 1919],
        [2208, 2303],
        [64336, 65023],
        [65136, 65279],
        [69216, 69247],
        [126064, 126143],
        [126464, 126719]
      ];
      function isArabic(char) {
        if (char.length > 1) {
          throw new Error("isArabic works on only one-character strings");
        }
        var code = char.charCodeAt(0);
        for (var i2 = 0; i2 < arabicBlocks.length; i2++) {
          var block = arabicBlocks[i2];
          if (code >= block[0] && code <= block[1]) {
            return true;
          }
        }
        return false;
      }
      exports2.isArabic = isArabic;
      function isMath(char) {
        if (char.length > 2) {
          throw new Error("isMath works on only one-character strings");
        }
        var code = char.charCodeAt(0);
        return code >= 1632 && code <= 1644 || code >= 1776 && code <= 1785;
      }
      exports2.isMath = isMath;
    }
  });

  // node_modules/alif-toolkit/lib/unicode-arabic.js
  var require_unicode_arabic = __commonJS({
    "node_modules/alif-toolkit/lib/unicode-arabic.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var arabicReference = {
        "alef": {
          "normal": ["\u0627"],
          "madda_above": {
            "normal": ["\u0627\u0653", "\u0622"],
            "isolated": "\uFE81",
            "final": "\uFE82"
          },
          "hamza_above": {
            "normal": ["\u0627\u0654", "\u0623"],
            "isolated": "\uFE83",
            "final": "\uFE84"
          },
          "hamza_below": {
            "normal": ["\u0627\u0655", "\u0625"],
            "isolated": "\uFE87",
            "final": "\uFE88"
          },
          "wasla": {
            "normal": "\u0671",
            "isolated": "\uFB50",
            "final": "\uFB51"
          },
          "wavy_hamza_above": ["\u0672"],
          "wavy_hamza_below": ["\u0627\u065F", "\u0673"],
          "high_hamza": ["\u0675", "\u0627\u0674"],
          "indic_two_above": ["\u0773"],
          "indic_three_above": ["\u0774"],
          "fathatan": {
            "normal": ["\u0627\u064B"],
            "final": "\uFD3C",
            "isolated": "\uFD3D"
          },
          "isolated": "\uFE8D",
          "final": "\uFE8E"
        },
        "beh": {
          "normal": ["\u0628"],
          "dotless": ["\u066E"],
          "three_dots_horizontally_below": ["\u0750"],
          "dot_below_three_dots_above": ["\u0751"],
          "three_dots_pointing_upwards_below": ["\u0752"],
          "three_dots_pointing_upwards_below_two_dots_above": ["\u0753"],
          "two_dots_below_dot_above": ["\u0754"],
          "inverted_small_v_below": ["\u0755"],
          "small_v": ["\u0756"],
          "small_v_below": ["\u08A0"],
          "hamza_above": ["\u08A1"],
          "small_meem_above": ["\u08B6"],
          "isolated": "\uFE8F",
          "final": "\uFE90",
          "initial": "\uFE91",
          "medial": "\uFE92"
        },
        "teh marbuta": {
          "normal": ["\u0629"],
          "isolated": "\uFE93",
          "final": "\uFE94"
        },
        "teh": {
          "normal": ["\u062A"],
          "ring": ["\u067C"],
          "three_dots_above_downwards": ["\u067D"],
          "small_teh_above": ["\u08B8"],
          "isolated": "\uFE95",
          "final": "\uFE96",
          "initial": "\uFE97",
          "medial": "\uFE98"
        },
        "theh": {
          "normal": ["\u062B"],
          "isolated": "\uFE99",
          "final": "\uFE9A",
          "initial": "\uFE9B",
          "medial": "\uFE9C"
        },
        "jeem": {
          "normal": ["\u062C"],
          "two_dots_above": ["\u08A2"],
          "isolated": "\uFE9D",
          "final": "\uFE9E",
          "initial": "\uFE9F",
          "medial": "\uFEA0"
        },
        "hah": {
          "normal": ["\u062D"],
          "hamza_above": ["\u0681"],
          "two_dots_vertical_above": ["\u0682"],
          "three_dots_above": ["\u0685"],
          "two_dots_above": ["\u0757"],
          "three_dots_pointing_upwards_below": ["\u0758"],
          "small_tah_below": ["\u076E"],
          "small_tah_two_dots": ["\u076F"],
          "small_tah_above": ["\u0772"],
          "indic_four_below": ["\u077C"],
          "isolated": "\uFEA1",
          "final": "\uFEA2",
          "initial": "\uFEA3",
          "medial": "\uFEA4"
        },
        "khah": {
          "normal": ["\u062E"],
          "isolated": "\uFEA5",
          "final": "\uFEA6",
          "initial": "\uFEA7",
          "medial": "\uFEA8"
        },
        "dal": {
          "normal": ["\u062F"],
          "ring": ["\u0689"],
          "dot_below": ["\u068A"],
          "dot_below_small_tah": ["\u068B"],
          "three_dots_above_downwards": ["\u068F"],
          "four_dots_above": ["\u0690"],
          "inverted_v": ["\u06EE"],
          "two_dots_vertically_below_small_tah": ["\u0759"],
          "inverted_small_v_below": ["\u075A"],
          "three_dots_below": ["\u08AE"],
          "isolated": "\uFEA9",
          "final": "\uFEAA"
        },
        "thal": {
          "normal": ["\u0630"],
          "isolated": "\uFEAB",
          "final": "\uFEAC"
        },
        "reh": {
          "normal": ["\u0631"],
          "small_v": ["\u0692"],
          "ring": ["\u0693"],
          "dot_below": ["\u0694"],
          "small_v_below": ["\u0695"],
          "dot_below_dot_above": ["\u0696"],
          "two_dots_above": ["\u0697"],
          "four_dots_above": ["\u0699"],
          "inverted_v": ["\u06EF"],
          "stroke": ["\u075B"],
          "two_dots_vertically_above": ["\u076B"],
          "hamza_above": ["\u076C"],
          "small_tah_two_dots": ["\u0771"],
          "loop": ["\u08AA"],
          "small_noon_above": ["\u08B9"],
          "isolated": "\uFEAD",
          "final": "\uFEAE"
        },
        "zain": {
          "normal": ["\u0632"],
          "inverted_v_above": ["\u08B2"],
          "isolated": "\uFEAF",
          "final": "\uFEB0"
        },
        "seen": {
          "normal": ["\u0633"],
          "dot_below_dot_above": ["\u069A"],
          "three_dots_below": ["\u069B"],
          "three_dots_below_three_dots_above": ["\u069C"],
          "four_dots_above": ["\u075C"],
          "two_dots_vertically_above": ["\u076D"],
          "small_tah_two_dots": ["\u0770"],
          "indic_four_above": ["\u077D"],
          "inverted_v": ["\u077E"],
          "isolated": "\uFEB1",
          "final": "\uFEB2",
          "initial": "\uFEB3",
          "medial": "\uFEB4"
        },
        "sheen": {
          "normal": ["\u0634"],
          "dot_below": ["\u06FA"],
          "isolated": "\uFEB5",
          "final": "\uFEB6",
          "initial": "\uFEB7",
          "medial": "\uFEB8"
        },
        "sad": {
          "normal": ["\u0635"],
          "two_dots_below": ["\u069D"],
          "three_dots_above": ["\u069E"],
          "three_dots_below": ["\u08AF"],
          "isolated": "\uFEB9",
          "final": "\uFEBA",
          "initial": "\uFEBB",
          "medial": "\uFEBC"
        },
        "dad": {
          "normal": ["\u0636"],
          "dot_below": ["\u06FB"],
          "isolated": "\uFEBD",
          "final": "\uFEBE",
          "initial": "\uFEBF",
          "medial": "\uFEC0"
        },
        "tah": {
          "normal": ["\u0637"],
          "three_dots_above": ["\u069F"],
          "two_dots_above": ["\u08A3"],
          "isolated": "\uFEC1",
          "final": "\uFEC2",
          "initial": "\uFEC3",
          "medial": "\uFEC4"
        },
        "zah": {
          "normal": ["\u0638"],
          "isolated": "\uFEC5",
          "final": "\uFEC6",
          "initial": "\uFEC7",
          "medial": "\uFEC8"
        },
        "ain": {
          "normal": ["\u0639"],
          "three_dots_above": ["\u06A0"],
          "two_dots_above": ["\u075D"],
          "three_dots_pointing_downwards_above": ["\u075E"],
          "two_dots_vertically_above": ["\u075F"],
          "three_dots_below": ["\u08B3"],
          "isolated": "\uFEC9",
          "final": "\uFECA",
          "initial": "\uFECB",
          "medial": "\uFECC"
        },
        "ghain": {
          "normal": ["\u063A"],
          "dot_below": ["\u06FC"],
          "isolated": "\uFECD",
          "final": "\uFECE",
          "initial": "\uFECF",
          "medial": "\uFED0"
        },
        "feh": {
          "normal": ["\u0641"],
          "dotless": ["\u06A1"],
          "dot_moved_below": ["\u06A2"],
          "dot_below": ["\u06A3"],
          "three_dots_below": ["\u06A5"],
          "two_dots_below": ["\u0760"],
          "three_dots_pointing_upwards_below": ["\u0761"],
          "dot_below_three_dots_above": ["\u08A4"],
          "isolated": "\uFED1",
          "final": "\uFED2",
          "initial": "\uFED3",
          "medial": "\uFED4"
        },
        "qaf": {
          "normal": ["\u0642"],
          "dotless": ["\u066F"],
          "dot_above": ["\u06A7"],
          "three_dots_above": ["\u06A8"],
          "dot_below": ["\u08A5"],
          "isolated": "\uFED5",
          "final": "\uFED6",
          "initial": "\uFED7",
          "medial": "\uFED8"
        },
        "kaf": {
          "normal": ["\u0643"],
          "swash": ["\u06AA"],
          "ring": ["\u06AB"],
          "dot_above": ["\u06AC"],
          "three_dots_below": ["\u06AE"],
          "two_dots_above": ["\u077F"],
          "dot_below": ["\u08B4"],
          "isolated": "\uFED9",
          "final": "\uFEDA",
          "initial": "\uFEDB",
          "medial": "\uFEDC"
        },
        "lam": {
          "normal": ["\u0644"],
          "small_v": ["\u06B5"],
          "dot_above": ["\u06B6"],
          "three_dots_above": ["\u06B7"],
          "three_dots_below": ["\u06B8"],
          "bar": ["\u076A"],
          "double_bar": ["\u08A6"],
          "isolated": "\uFEDD",
          "final": "\uFEDE",
          "initial": "\uFEDF",
          "medial": "\uFEE0"
        },
        "meem": {
          "normal": ["\u0645"],
          "dot_above": ["\u0765"],
          "dot_below": ["\u0766"],
          "three_dots_above": ["\u08A7"],
          "isolated": "\uFEE1",
          "final": "\uFEE2",
          "initial": "\uFEE3",
          "medial": "\uFEE4"
        },
        "noon": {
          "normal": ["\u0646"],
          "dot_below": ["\u06B9"],
          "ring": ["\u06BC"],
          "three_dots_above": ["\u06BD"],
          "two_dots_below": ["\u0767"],
          "small_tah": ["\u0768"],
          "small_v": ["\u0769"],
          "isolated": "\uFEE5",
          "final": "\uFEE6",
          "initial": "\uFEE7",
          "medial": "\uFEE8"
        },
        "heh": {
          "normal": ["\u0647"],
          "isolated": "\uFEE9",
          "final": "\uFEEA",
          "initial": "\uFEEB",
          "medial": "\uFEEC"
        },
        "waw": {
          "normal": ["\u0648"],
          "hamza_above": {
            "normal": ["\u0624", "\u0648\u0654"],
            "isolated": "\uFE85",
            "final": "\uFE86"
          },
          "high_hamza": ["\u0676", "\u0648\u0674"],
          "ring": ["\u06C4"],
          "two_dots_above": ["\u06CA"],
          "dot_above": ["\u06CF"],
          "indic_two_above": ["\u0778"],
          "indic_three_above": ["\u0779"],
          "dot_within": ["\u08AB"],
          "isolated": "\uFEED",
          "final": "\uFEEE"
        },
        "alef_maksura": {
          "normal": ["\u0649"],
          "hamza_above": ["\u0626", "\u064A\u0654"],
          "initial": "\uFBE8",
          "medial": "\uFBE9",
          "isolated": "\uFEEF",
          "final": "\uFEF0"
        },
        "yeh": {
          "normal": ["\u064A"],
          "hamza_above": {
            "normal": ["\u0626", "\u0649\u0654"],
            "isolated": "\uFE89",
            "final": "\uFE8A",
            "initial": "\uFE8B",
            "medial": "\uFE8C"
          },
          "two_dots_below_hamza_above": ["\u08A8"],
          "high_hamza": ["\u0678", "\u064A\u0674"],
          "tail": ["\u06CD"],
          "small_v": ["\u06CE"],
          "three_dots_below": ["\u06D1"],
          "two_dots_below_dot_above": ["\u08A9"],
          "two_dots_below_small_noon_above": ["\u08BA"],
          "isolated": "\uFEF1",
          "final": "\uFEF2",
          "initial": "\uFEF3",
          "medial": "\uFEF4"
        },
        "tteh": {
          "normal": ["\u0679"],
          "isolated": "\uFB66",
          "final": "\uFB67",
          "initial": "\uFB68",
          "medial": "\uFB69"
        },
        "tteheh": {
          "normal": ["\u067A"],
          "isolated": "\uFB5E",
          "final": "\uFB5F",
          "initial": "\uFB60",
          "medial": "\uFB61"
        },
        "beeh": {
          "normal": ["\u067B"],
          "isolated": "\uFB52",
          "final": "\uFB53",
          "initial": "\uFB54",
          "medial": "\uFB55"
        },
        "peh": {
          "normal": ["\u067E"],
          "small_meem_above": ["\u08B7"],
          "isolated": "\uFB56",
          "final": "\uFB57",
          "initial": "\uFB58",
          "medial": "\uFB59"
        },
        "teheh": {
          "normal": ["\u067F"],
          "isolated": "\uFB62",
          "final": "\uFB63",
          "initial": "\uFB64",
          "medial": "\uFB65"
        },
        "beheh": {
          "normal": ["\u0680"],
          "isolated": "\uFB5A",
          "final": "\uFB5B",
          "initial": "\uFB5C",
          "medial": "\uFB5D"
        },
        "nyeh": {
          "normal": ["\u0683"],
          "isolated": "\uFB76",
          "final": "\uFB77",
          "initial": "\uFB78",
          "medial": "\uFB79"
        },
        "dyeh": {
          "normal": ["\u0684"],
          "isolated": "\uFB72",
          "final": "\uFB73",
          "initial": "\uFB74",
          "medial": "\uFB75"
        },
        "tcheh": {
          "normal": ["\u0686"],
          "dot_above": ["\u06BF"],
          "isolated": "\uFB7A",
          "final": "\uFB7B",
          "initial": "\uFB7C",
          "medial": "\uFB7D"
        },
        "tcheheh": {
          "normal": ["\u0687"],
          "isolated": "\uFB7E",
          "final": "\uFB7F",
          "initial": "\uFB80",
          "medial": "\uFB81"
        },
        "ddal": {
          "normal": ["\u0688"],
          "isolated": "\uFB88",
          "final": "\uFB89"
        },
        "dahal": {
          "normal": ["\u068C"],
          "isolated": "\uFB84",
          "final": "\uFB85"
        },
        "ddahal": {
          "normal": ["\u068D"],
          "isolated": "\uFB82",
          "final": "\uFB83"
        },
        "dul": {
          "normal": ["\u068F", "\u068E"],
          "isolated": "\uFB86",
          "final": "\uFB87"
        },
        "rreh": {
          "normal": ["\u0691"],
          "isolated": "\uFB8C",
          "final": "\uFB8D"
        },
        "jeh": {
          "normal": ["\u0698"],
          "isolated": "\uFB8A",
          "final": "\uFB8B"
        },
        "veh": {
          "normal": ["\u06A4"],
          "isolated": "\uFB6A",
          "final": "\uFB6B",
          "initial": "\uFB6C",
          "medial": "\uFB6D"
        },
        "peheh": {
          "normal": ["\u06A6"],
          "isolated": "\uFB6E",
          "final": "\uFB6F",
          "initial": "\uFB70",
          "medial": "\uFB71"
        },
        "keheh": {
          "normal": ["\u06A9"],
          "dot_above": ["\u0762"],
          "three_dots_above": ["\u0763"],
          "three_dots_pointing_upwards_below": ["\u0764"],
          "isolated": "\uFB8E",
          "final": "\uFB8F",
          "initial": "\uFB90",
          "medial": "\uFB91"
        },
        "ng": {
          "normal": ["\u06AD"],
          "isolated": "\uFBD3",
          "final": "\uFBD4",
          "initial": "\uFBD5",
          "medial": "\uFBD6"
        },
        "gaf": {
          "normal": ["\u06AF"],
          "ring": ["\u06B0"],
          "two_dots_below": ["\u06B2"],
          "three_dots_above": ["\u06B4"],
          "inverted_stroke": ["\u08B0"],
          "isolated": "\uFB92",
          "final": "\uFB93",
          "initial": "\uFB94",
          "medial": "\uFB95"
        },
        "ngoeh": {
          "normal": ["\u06B1"],
          "isolated": "\uFB9A",
          "final": "\uFB9B",
          "initial": "\uFB9C",
          "medial": "\uFB9D"
        },
        "gueh": {
          "normal": ["\u06B3"],
          "isolated": "\uFB96",
          "final": "\uFB97",
          "initial": "\uFB98",
          "medial": "\uFB99"
        },
        "noon ghunna": {
          "normal": ["\u06BA"],
          "isolated": "\uFB9E",
          "final": "\uFB9F"
        },
        "rnoon": {
          "normal": ["\u06BB"],
          "isolated": "\uFBA0",
          "final": "\uFBA1",
          "initial": "\uFBA2",
          "medial": "\uFBA3"
        },
        "heh doachashmee": {
          "normal": ["\u06BE"],
          "isolated": "\uFBAA",
          "final": "\uFBAB",
          "initial": "\uFBAC",
          "medial": "\uFBAD"
        },
        "heh goal": {
          "normal": ["\u06C1"],
          "hamza_above": ["\u06C1\u0654", "\u06C2"],
          "isolated": "\uFBA6",
          "final": "\uFBA7",
          "initial": "\uFBA8",
          "medial": "\uFBA9"
        },
        "teh marbuta goal": {
          "normal": ["\u06C3"]
        },
        "kirghiz oe": {
          "normal": ["\u06C5"],
          "isolated": "\uFBE0",
          "final": "\uFBE1"
        },
        "oe": {
          "normal": ["\u06C6"],
          "isolated": "\uFBD9",
          "final": "\uFBDA"
        },
        "u": {
          "normal": ["\u06C7"],
          "hamza_above": {
            "normal": ["\u0677", "\u06C7\u0674"],
            "isolated": "\uFBDD"
          },
          "isolated": "\uFBD7",
          "final": "\uFBD8"
        },
        "yu": {
          "normal": ["\u06C8"],
          "isolated": "\uFBDB",
          "final": "\uFBDC"
        },
        "kirghiz yu": {
          "normal": ["\u06C9"],
          "isolated": "\uFBE2",
          "final": "\uFBE3"
        },
        "ve": {
          "normal": ["\u06CB"],
          "isolated": "\uFBDE",
          "final": "\uFBDF"
        },
        "farsi yeh": {
          "normal": ["\u06CC"],
          "indic_two_above": ["\u0775"],
          "indic_three_above": ["\u0776"],
          "indic_four_above": ["\u0777"],
          "isolated": "\uFBFC",
          "final": "\uFBFD",
          "initial": "\uFBFE",
          "medial": "\uFBFF"
        },
        "e": {
          "normal": ["\u06D0"],
          "isolated": "\uFBE4",
          "final": "\uFBE5",
          "initial": "\uFBE6",
          "medial": "\uFBE7"
        },
        "yeh barree": {
          "normal": ["\u06D2"],
          "hamza_above": {
            "normal": ["\u06D2\u0654", "\u06D3"],
            "isolated": "\uFBB0",
            "final": "\uFBB1"
          },
          "indic_two_above": ["\u077A"],
          "indic_three_above": ["\u077B"],
          "isolated": "\uFBAE",
          "final": "\uFBAF"
        },
        "ae": {
          "normal": ["\u06D5"],
          "isolated": "\u06D5",
          "final": "\uFEEA",
          "yeh_above": {
            "normal": ["\u06C0", "\u06D5\u0654"],
            "isolated": "\uFBA4",
            "final": "\uFBA5"
          }
        },
        "rohingya yeh": {
          "normal": ["\u08AC"]
        },
        "low alef": {
          "normal": ["\u08AD"]
        },
        "straight waw": {
          "normal": ["\u08B1"]
        },
        "african feh": {
          "normal": ["\u08BB"]
        },
        "african qaf": {
          "normal": ["\u08BC"]
        },
        "african noon": {
          "normal": ["\u08BD"]
        }
      };
      exports2.default = arabicReference;
    }
  });

  // node_modules/alif-toolkit/lib/unicode-ligatures.js
  var require_unicode_ligatures = __commonJS({
    "node_modules/alif-toolkit/lib/unicode-ligatures.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var ligatureReference = {
        "\u0626\u0627": {
          "isolated": "\uFBEA",
          "final": "\uFBEB"
        },
        "\u0626\u06D5": {
          "isolated": "\uFBEC",
          "final": "\uFBED"
        },
        "\u0626\u0648": {
          "isolated": "\uFBEE",
          "final": "\uFBEF"
        },
        "\u0626\u06C7": {
          "isolated": "\uFBF0",
          "final": "\uFBF1"
        },
        "\u0626\u06C6": {
          "isolated": "\uFBF2",
          "final": "\uFBF3"
        },
        "\u0626\u06C8": {
          "isolated": "\uFBF4",
          "final": "\uFBF5"
        },
        "\u0626\u06D0": {
          "isolated": "\uFBF6",
          "final": "\uFBF7",
          "initial": "\uFBF8"
        },
        "\u0626\u0649": {
          "uighur_kirghiz": {
            "isolated": "\uFBF9",
            "final": "\uFBFA",
            "initial": "\uFBFB"
          },
          "isolated": "\uFC03",
          "final": "\uFC68"
        },
        "\u0626\u062C": {
          "isolated": "\uFC00",
          "initial": "\uFC97"
        },
        "\u0626\u062D": {
          "isolated": "\uFC01",
          "initial": "\uFC98"
        },
        "\u0626\u0645": {
          "isolated": "\uFC02",
          "final": "\uFC66",
          "initial": "\uFC9A",
          "medial": "\uFCDF"
        },
        "\u0626\u064A": {
          "isolated": "\uFC04",
          "final": "\uFC69"
        },
        "\u0628\u062C": {
          "isolated": "\uFC05",
          "initial": "\uFC9C"
        },
        "\u0628\u062D": {
          "isolated": "\uFC06",
          "initial": "\uFC9D"
        },
        "\u0628\u062E": {
          "isolated": "\uFC07",
          "initial": "\uFC9E"
        },
        "\u0628\u0645": {
          "isolated": "\uFC08",
          "final": "\uFC6C",
          "initial": "\uFC9F",
          "medial": "\uFCE1"
        },
        "\u0628\u0649": {
          "isolated": "\uFC09",
          "final": "\uFC6E"
        },
        "\u0628\u064A": {
          "isolated": "\uFC0A",
          "final": "\uFC6F"
        },
        "\u062A\u062C": {
          "isolated": "\uFC0B",
          "initial": "\uFCA1"
        },
        "\u062A\u062D": {
          "isolated": "\uFC0C",
          "initial": "\uFCA2"
        },
        "\u062A\u062E": {
          "isolated": "\uFC0D",
          "initial": "\uFCA3"
        },
        "\u062A\u0645": {
          "isolated": "\uFC0E",
          "final": "\uFC72",
          "initial": "\uFCA4",
          "medial": "\uFCE3"
        },
        "\u062A\u0649": {
          "isolated": "\uFC0F",
          "final": "\uFC74"
        },
        "\u062A\u064A": {
          "isolated": "\uFC10",
          "final": "\uFC75"
        },
        "\u062B\u062C": {
          "isolated": "\uFC11"
        },
        "\u062B\u0645": {
          "isolated": "\uFC12",
          "final": "\uFC78",
          "initial": "\uFCA6",
          "medial": "\uFCE5"
        },
        "\u062B\u0649": {
          "isolated": "\uFC13",
          "final": "\uFC7A"
        },
        "\u062B\u0648": {
          "isolated": "\uFC14"
        },
        "\u062C\u062D": {
          "isolated": "\uFC15",
          "initial": "\uFCA7"
        },
        "\u062C\u0645": {
          "isolated": "\uFC16",
          "initial": "\uFCA8"
        },
        "\u062D\u062C": {
          "isolated": "\uFC17",
          "initial": "\uFCA9"
        },
        "\u062D\u0645": {
          "isolated": "\uFC18",
          "initial": "\uFCAA"
        },
        "\u062E\u062C": {
          "isolated": "\uFC19",
          "initial": "\uFCAB"
        },
        "\u062E\u062D": {
          "isolated": "\uFC1A"
        },
        "\u062E\u0645": {
          "isolated": "\uFC1B",
          "initial": "\uFCAC"
        },
        "\u0633\u062C": {
          "isolated": "\uFC1C",
          "initial": "\uFCAD",
          "medial": "\uFD34"
        },
        "\u0633\u062D": {
          "isolated": "\uFC1D",
          "initial": "\uFCAE",
          "medial": "\uFD35"
        },
        "\u0633\u062E": {
          "isolated": "\uFC1E",
          "initial": "\uFCAF",
          "medial": "\uFD36"
        },
        "\u0633\u0645": {
          "isolated": "\uFC1F",
          "initial": "\uFCB0",
          "medial": "\uFCE7"
        },
        "\u0635\u062D": {
          "isolated": "\uFC20",
          "initial": "\uFCB1"
        },
        "\u0635\u0645": {
          "isolated": "\uFC21",
          "initial": "\uFCB3"
        },
        "\u0636\u062C": {
          "isolated": "\uFC22",
          "initial": "\uFCB4"
        },
        "\u0636\u062D": {
          "isolated": "\uFC23",
          "initial": "\uFCB5"
        },
        "\u0636\u062E": {
          "isolated": "\uFC24",
          "initial": "\uFCB6"
        },
        "\u0636\u0645": {
          "isolated": "\uFC25",
          "initial": "\uFCB7"
        },
        "\u0637\u062D": {
          "isolated": "\uFC26",
          "initial": "\uFCB8"
        },
        "\u0637\u0645": {
          "isolated": "\uFC27",
          "initial": "\uFD33",
          "medial": "\uFD3A"
        },
        "\u0638\u0645": {
          "isolated": "\uFC28",
          "initial": "\uFCB9",
          "medial": "\uFD3B"
        },
        "\u0639\u062C": {
          "isolated": "\uFC29",
          "initial": "\uFCBA"
        },
        "\u0639\u0645": {
          "isolated": "\uFC2A",
          "initial": "\uFCBB"
        },
        "\u063A\u062C": {
          "isolated": "\uFC2B",
          "initial": "\uFCBC"
        },
        "\u063A\u0645": {
          "isolated": "\uFC2C",
          "initial": "\uFCBD"
        },
        "\u0641\u062C": {
          "isolated": "\uFC2D",
          "initial": "\uFCBE"
        },
        "\u0641\u062D": {
          "isolated": "\uFC2E",
          "initial": "\uFCBF"
        },
        "\u0641\u062E": {
          "isolated": "\uFC2F",
          "initial": "\uFCC0"
        },
        "\u0641\u0645": {
          "isolated": "\uFC30",
          "initial": "\uFCC1"
        },
        "\u0641\u0649": {
          "isolated": "\uFC31",
          "final": "\uFC7C"
        },
        "\u0641\u064A": {
          "isolated": "\uFC32",
          "final": "\uFC7D"
        },
        "\u0642\u062D": {
          "isolated": "\uFC33",
          "initial": "\uFCC2"
        },
        "\u0642\u0645": {
          "isolated": "\uFC34",
          "initial": "\uFCC3"
        },
        "\u0642\u0649": {
          "isolated": "\uFC35",
          "final": "\uFC7E"
        },
        "\u0642\u064A": {
          "isolated": "\uFC36",
          "final": "\uFC7F"
        },
        "\u0643\u0627": {
          "isolated": "\uFC37",
          "final": "\uFC80"
        },
        "\u0643\u062C": {
          "isolated": "\uFC38",
          "initial": "\uFCC4"
        },
        "\u0643\u062D": {
          "isolated": "\uFC39",
          "initial": "\uFCC5"
        },
        "\u0643\u062E": {
          "isolated": "\uFC3A",
          "initial": "\uFCC6"
        },
        "\u0643\u0644": {
          "isolated": "\uFC3B",
          "final": "\uFC81",
          "initial": "\uFCC7",
          "medial": "\uFCEB"
        },
        "\u0643\u0645": {
          "isolated": "\uFC3C",
          "final": "\uFC82",
          "initial": "\uFCC8",
          "medial": "\uFCEC"
        },
        "\u0643\u0649": {
          "isolated": "\uFC3D",
          "final": "\uFC83"
        },
        "\u0643\u064A": {
          "isolated": "\uFC3E",
          "final": "\uFC84"
        },
        "\u0644\u062C": {
          "isolated": "\uFC3F",
          "initial": "\uFCC9"
        },
        "\u0644\u062D": {
          "isolated": "\uFC40",
          "initial": "\uFCCA"
        },
        "\u0644\u062E": {
          "isolated": "\uFC41",
          "initial": "\uFCCB"
        },
        "\u0644\u0645": {
          "isolated": "\uFC42",
          "final": "\uFC85",
          "initial": "\uFCCC",
          "medial": "\uFCED"
        },
        "\u0644\u0649": {
          "isolated": "\uFC43",
          "final": "\uFC86"
        },
        "\u0644\u064A": {
          "isolated": "\uFC44",
          "final": "\uFC87"
        },
        "\u0645\u062C": {
          "isolated": "\uFC45",
          "initial": "\uFCCE"
        },
        "\u0645\u062D": {
          "isolated": "\uFC46",
          "initial": "\uFCCF"
        },
        "\u0645\u062E": {
          "isolated": "\uFC47",
          "initial": "\uFCD0"
        },
        "\u0645\u0645": {
          "isolated": "\uFC48",
          "final": "\uFC89",
          "initial": "\uFCD1"
        },
        "\u0645\u0649": {
          "isolated": "\uFC49"
        },
        "\u0645\u064A": {
          "isolated": "\uFC4A"
        },
        "\u0646\u062C": {
          "isolated": "\uFC4B",
          "initial": "\uFCD2"
        },
        "\u0646\u062D": {
          "isolated": "\uFC4C",
          "initial": "\uFCD3"
        },
        "\u0646\u062E": {
          "isolated": "\uFC4D",
          "initial": "\uFCD4"
        },
        "\u0646\u0645": {
          "isolated": "\uFC4E",
          "final": "\uFC8C",
          "initial": "\uFCD5",
          "medial": "\uFCEE"
        },
        "\u0646\u0649": {
          "isolated": "\uFC4F",
          "final": "\uFC8E"
        },
        "\u0646\u064A": {
          "isolated": "\uFC50",
          "final": "\uFC8F"
        },
        "\u0647\u062C": {
          "isolated": "\uFC51",
          "initial": "\uFCD7"
        },
        "\u0647\u0645": {
          "isolated": "\uFC52",
          "initial": "\uFCD8"
        },
        "\u0647\u0649": {
          "isolated": "\uFC53"
        },
        "\u0647\u064A": {
          "isolated": "\uFC54"
        },
        "\u064A\u062C": {
          "isolated": "\uFC55",
          "initial": "\uFCDA"
        },
        "\u064A\u062D": {
          "isolated": "\uFC56",
          "initial": "\uFCDB"
        },
        "\u064A\u062E": {
          "isolated": "\uFC57",
          "initial": "\uFCDC"
        },
        "\u064A\u0645": {
          "isolated": "\uFC58",
          "final": "\uFC93",
          "initial": "\uFCDD",
          "medial": "\uFCF0"
        },
        "\u064A\u0649": {
          "isolated": "\uFC59",
          "final": "\uFC95"
        },
        "\u064A\u064A": {
          "isolated": "\uFC5A",
          "final": "\uFC96"
        },
        "\u0630\u0670": {
          "isolated": "\uFC5B"
        },
        "\u0631\u0670": {
          "isolated": "\uFC5C"
        },
        "\u0649\u0670": {
          "isolated": "\uFC5D",
          "final": "\uFC90"
        },
        "\u064C\u0651": {
          "isolated": "\uFC5E"
        },
        "\u064D\u0651": {
          "isolated": "\uFC5F"
        },
        "\u064E\u0651": {
          "isolated": "\uFC60"
        },
        "\u064F\u0651": {
          "isolated": "\uFC61"
        },
        "\u0650\u0651": {
          "isolated": "\uFC62"
        },
        "\u0651\u0670": {
          "isolated": "\uFC63"
        },
        "\u0626\u0631": {
          "final": "\uFC64"
        },
        "\u0626\u0632": {
          "final": "\uFC65"
        },
        "\u0626\u0646": {
          "final": "\uFC67"
        },
        "\u0628\u0631": {
          "final": "\uFC6A"
        },
        "\u0628\u0632": {
          "final": "\uFC6B"
        },
        "\u0628\u0646": {
          "final": "\uFC6D"
        },
        "\u062A\u0631": {
          "final": "\uFC70"
        },
        "\u062A\u0632": {
          "final": "\uFC71"
        },
        "\u062A\u0646": {
          "final": "\uFC73"
        },
        "\u062B\u0631": {
          "final": "\uFC76"
        },
        "\u062B\u0632": {
          "final": "\uFC77"
        },
        "\u062B\u0646": {
          "final": "\uFC79"
        },
        "\u062B\u064A": {
          "final": "\uFC7B"
        },
        "\u0645\u0627": {
          "final": "\uFC88"
        },
        "\u0646\u0631": {
          "final": "\uFC8A"
        },
        "\u0646\u0632": {
          "final": "\uFC8B"
        },
        "\u0646\u0646": {
          "final": "\uFC8D"
        },
        "\u064A\u0631": {
          "final": "\uFC91"
        },
        "\u064A\u0632": {
          "final": "\uFC92"
        },
        "\u064A\u0646": {
          "final": "\uFC94"
        },
        "\u0626\u062E": {
          "initial": "\uFC99"
        },
        "\u0626\u0647": {
          "initial": "\uFC9B",
          "medial": "\uFCE0"
        },
        "\u0628\u0647": {
          "initial": "\uFCA0",
          "medial": "\uFCE2"
        },
        "\u062A\u0647": {
          "initial": "\uFCA5",
          "medial": "\uFCE4"
        },
        "\u0635\u062E": {
          "initial": "\uFCB2"
        },
        "\u0644\u0647": {
          "initial": "\uFCCD"
        },
        "\u0646\u0647": {
          "initial": "\uFCD6",
          "medial": "\uFCEF"
        },
        "\u0647\u0670": {
          "initial": "\uFCD9"
        },
        "\u064A\u0647": {
          "initial": "\uFCDE",
          "medial": "\uFCF1"
        },
        "\u062B\u0647": {
          "medial": "\uFCE6"
        },
        "\u0633\u0647": {
          "medial": "\uFCE8",
          "initial": "\uFD31"
        },
        "\u0634\u0645": {
          "medial": "\uFCE9",
          "isolated": "\uFD0C",
          "final": "\uFD28",
          "initial": "\uFD30"
        },
        "\u0634\u0647": {
          "medial": "\uFCEA",
          "initial": "\uFD32"
        },
        "\u0640\u064E\u0651": {
          "medial": "\uFCF2"
        },
        "\u0640\u064F\u0651": {
          "medial": "\uFCF3"
        },
        "\u0640\u0650\u0651": {
          "medial": "\uFCF4"
        },
        "\u0637\u0649": {
          "isolated": "\uFCF5",
          "final": "\uFD11"
        },
        "\u0637\u064A": {
          "isolated": "\uFCF6",
          "final": "\uFD12"
        },
        "\u0639\u0649": {
          "isolated": "\uFCF7",
          "final": "\uFD13"
        },
        "\u0639\u064A": {
          "isolated": "\uFCF8",
          "final": "\uFD14"
        },
        "\u063A\u0649": {
          "isolated": "\uFCF9",
          "final": "\uFD15"
        },
        "\u063A\u064A": {
          "isolated": "\uFCFA",
          "final": "\uFD16"
        },
        "\u0633\u0649": {
          "isolated": "\uFCFB"
        },
        "\u0633\u064A": {
          "isolated": "\uFCFC",
          "final": "\uFD18"
        },
        "\u0634\u0649": {
          "isolated": "\uFCFD",
          "final": "\uFD19"
        },
        "\u0634\u064A": {
          "isolated": "\uFCFE",
          "final": "\uFD1A"
        },
        "\u062D\u0649": {
          "isolated": "\uFCFF",
          "final": "\uFD1B"
        },
        "\u062D\u064A": {
          "isolated": "\uFD00",
          "final": "\uFD1C"
        },
        "\u062C\u0649": {
          "isolated": "\uFD01",
          "final": "\uFD1D"
        },
        "\u062C\u064A": {
          "isolated": "\uFD02",
          "final": "\uFD1E"
        },
        "\u062E\u0649": {
          "isolated": "\uFD03",
          "final": "\uFD1F"
        },
        "\u062E\u064A": {
          "isolated": "\uFD04",
          "final": "\uFD20"
        },
        "\u0635\u0649": {
          "isolated": "\uFD05",
          "final": "\uFD21"
        },
        "\u0635\u064A": {
          "isolated": "\uFD06",
          "final": "\uFD22"
        },
        "\u0636\u0649": {
          "isolated": "\uFD07",
          "final": "\uFD23"
        },
        "\u0636\u064A": {
          "isolated": "\uFD08",
          "final": "\uFD24"
        },
        "\u0634\u062C": {
          "isolated": "\uFD09",
          "final": "\uFD25",
          "initial": "\uFD2D",
          "medial": "\uFD37"
        },
        "\u0634\u062D": {
          "isolated": "\uFD0A",
          "final": "\uFD26",
          "initial": "\uFD2E",
          "medial": "\uFD38"
        },
        "\u0634\u062E": {
          "isolated": "\uFD0B",
          "final": "\uFD27",
          "initial": "\uFD2F",
          "medial": "\uFD39"
        },
        "\u0634\u0631": {
          "isolated": "\uFD0D",
          "final": "\uFD29"
        },
        "\u0633\u0631": {
          "isolated": "\uFD0E",
          "final": "\uFD2A"
        },
        "\u0635\u0631": {
          "isolated": "\uFD0F",
          "final": "\uFD2B"
        },
        "\u0636\u0631": {
          "isolated": "\uFD10",
          "final": "\uFD2C"
        },
        "\u0633\u0639": {
          "final": "\uFD17"
        },
        "\u062A\u062C\u0645": {
          "initial": "\uFD50"
        },
        "\u062A\u062D\u062C": {
          "final": "\uFD51",
          "initial": "\uFD52"
        },
        "\u062A\u062D\u0645": {
          "initial": "\uFD53"
        },
        "\u062A\u062E\u0645": {
          "initial": "\uFD54"
        },
        "\u062A\u0645\u062C": {
          "initial": "\uFD55"
        },
        "\u062A\u0645\u062D": {
          "initial": "\uFD56"
        },
        "\u062A\u0645\u062E": {
          "initial": "\uFD57"
        },
        "\u062C\u0645\u062D": {
          "final": "\uFD58",
          "initial": "\uFD59"
        },
        "\u062D\u0645\u064A": {
          "final": "\uFD5A"
        },
        "\u062D\u0645\u0649": {
          "final": "\uFD5B"
        },
        "\u0633\u062D\u062C": {
          "initial": "\uFD5C"
        },
        "\u0633\u062C\u062D": {
          "initial": "\uFD5D"
        },
        "\u0633\u062C\u0649": {
          "final": "\uFD5E"
        },
        "\u0633\u0645\u062D": {
          "final": "\uFD5F",
          "initial": "\uFD60"
        },
        "\u0633\u0645\u062C": {
          "initial": "\uFD61"
        },
        "\u0633\u0645\u0645": {
          "final": "\uFD62",
          "initial": "\uFD63"
        },
        "\u0635\u062D\u062D": {
          "final": "\uFD64",
          "initial": "\uFD65"
        },
        "\u0635\u0645\u0645": {
          "final": "\uFD66",
          "initial": "\uFDC5"
        },
        "\u0634\u062D\u0645": {
          "final": "\uFD67",
          "initial": "\uFD68"
        },
        "\u0634\u062C\u064A": {
          "final": "\uFD69"
        },
        "\u0634\u0645\u062E": {
          "final": "\uFD6A",
          "initial": "\uFD6B"
        },
        "\u0634\u0645\u0645": {
          "final": "\uFD6C",
          "initial": "\uFD6D"
        },
        "\u0636\u062D\u0649": {
          "final": "\uFD6E"
        },
        "\u0636\u062E\u0645": {
          "final": "\uFD6F",
          "initial": "\uFD70"
        },
        "\u0636\u0645\u062D": {
          "final": "\uFD71"
        },
        "\u0637\u0645\u062D": {
          "initial": "\uFD72"
        },
        "\u0637\u0645\u0645": {
          "initial": "\uFD73"
        },
        "\u0637\u0645\u064A": {
          "final": "\uFD74"
        },
        "\u0639\u062C\u0645": {
          "final": "\uFD75",
          "initial": "\uFDC4"
        },
        "\u0639\u0645\u0645": {
          "final": "\uFD76",
          "initial": "\uFD77"
        },
        "\u0639\u0645\u0649": {
          "final": "\uFD78"
        },
        "\u063A\u0645\u0645": {
          "final": "\uFD79"
        },
        "\u063A\u0645\u064A": {
          "final": "\uFD7A"
        },
        "\u063A\u0645\u0649": {
          "final": "\uFD7B"
        },
        "\u0641\u062E\u0645": {
          "final": "\uFD7C",
          "initial": "\uFD7D"
        },
        "\u0642\u0645\u062D": {
          "final": "\uFD7E",
          "initial": "\uFDB4"
        },
        "\u0642\u0645\u0645": {
          "final": "\uFD7F"
        },
        "\u0644\u062D\u0645": {
          "final": "\uFD80",
          "initial": "\uFDB5"
        },
        "\u0644\u062D\u064A": {
          "final": "\uFD81"
        },
        "\u0644\u062D\u0649": {
          "final": "\uFD82"
        },
        "\u0644\u062C\u062C": {
          "initial": "\uFD83",
          "final": "\uFD84"
        },
        "\u0644\u062E\u0645": {
          "final": "\uFD85",
          "initial": "\uFD86"
        },
        "\u0644\u0645\u062D": {
          "final": "\uFD87",
          "initial": "\uFD88"
        },
        "\u0645\u062D\u062C": {
          "initial": "\uFD89"
        },
        "\u0645\u062D\u0645": {
          "initial": "\uFD8A"
        },
        "\u0645\u062D\u064A": {
          "final": "\uFD8B"
        },
        "\u0645\u062C\u062D": {
          "initial": "\uFD8C"
        },
        "\u0645\u062C\u0645": {
          "initial": "\uFD8D"
        },
        "\u0645\u062E\u062C": {
          "initial": "\uFD8E"
        },
        "\u0645\u062E\u0645": {
          "initial": "\uFD8F"
        },
        "\u0645\u062C\u062E": {
          "initial": "\uFD92"
        },
        "\u0647\u0645\u062C": {
          "initial": "\uFD93"
        },
        "\u0647\u0645\u0645": {
          "initial": "\uFD94"
        },
        "\u0646\u062D\u0645": {
          "initial": "\uFD95"
        },
        "\u0646\u062D\u0649": {
          "final": "\uFD96"
        },
        "\u0646\u062C\u0645": {
          "final": "\uFD97",
          "initial": "\uFD98"
        },
        "\u0646\u062C\u0649": {
          "final": "\uFD99"
        },
        "\u0646\u0645\u064A": {
          "final": "\uFD9A"
        },
        "\u0646\u0645\u0649": {
          "final": "\uFD9B"
        },
        "\u064A\u0645\u0645": {
          "final": "\uFD9C",
          "initial": "\uFD9D"
        },
        "\u0628\u062E\u064A": {
          "final": "\uFD9E"
        },
        "\u062A\u062C\u064A": {
          "final": "\uFD9F"
        },
        "\u062A\u062C\u0649": {
          "final": "\uFDA0"
        },
        "\u062A\u062E\u064A": {
          "final": "\uFDA1"
        },
        "\u062A\u062E\u0649": {
          "final": "\uFDA2"
        },
        "\u062A\u0645\u064A": {
          "final": "\uFDA3"
        },
        "\u062A\u0645\u0649": {
          "final": "\uFDA4"
        },
        "\u062C\u0645\u064A": {
          "final": "\uFDA5"
        },
        "\u062C\u062D\u0649": {
          "final": "\uFDA6"
        },
        "\u062C\u0645\u0649": {
          "final": "\uFDA7"
        },
        "\u0633\u062E\u0649": {
          "final": "\uFDA8"
        },
        "\u0635\u062D\u064A": {
          "final": "\uFDA9"
        },
        "\u0634\u062D\u064A": {
          "final": "\uFDAA"
        },
        "\u0636\u062D\u064A": {
          "final": "\uFDAB"
        },
        "\u0644\u062C\u064A": {
          "final": "\uFDAC"
        },
        "\u0644\u0645\u064A": {
          "final": "\uFDAD"
        },
        "\u064A\u062D\u064A": {
          "final": "\uFDAE"
        },
        "\u064A\u062C\u064A": {
          "final": "\uFDAF"
        },
        "\u064A\u0645\u064A": {
          "final": "\uFDB0"
        },
        "\u0645\u0645\u064A": {
          "final": "\uFDB1"
        },
        "\u0642\u0645\u064A": {
          "final": "\uFDB2"
        },
        "\u0646\u062D\u064A": {
          "final": "\uFDB3"
        },
        "\u0639\u0645\u064A": {
          "final": "\uFDB6"
        },
        "\u0643\u0645\u064A": {
          "final": "\uFDB7"
        },
        "\u0646\u062C\u062D": {
          "initial": "\uFDB8",
          "final": "\uFDBD"
        },
        "\u0645\u062E\u064A": {
          "final": "\uFDB9"
        },
        "\u0644\u062C\u0645": {
          "initial": "\uFDBA",
          "final": "\uFDBC"
        },
        "\u0643\u0645\u0645": {
          "final": "\uFDBB",
          "initial": "\uFDC3"
        },
        "\u062C\u062D\u064A": {
          "final": "\uFDBE"
        },
        "\u062D\u062C\u064A": {
          "final": "\uFDBF"
        },
        "\u0645\u062C\u064A": {
          "final": "\uFDC0"
        },
        "\u0641\u0645\u064A": {
          "final": "\uFDC1"
        },
        "\u0628\u062D\u064A": {
          "final": "\uFDC2"
        },
        "\u0633\u062E\u064A": {
          "final": "\uFDC6"
        },
        "\u0646\u062C\u064A": {
          "final": "\uFDC7"
        },
        "\u0644\u0622": {
          "isolated": "\uFEF5",
          "final": "\uFEF6"
        },
        "\u0644\u0623": {
          "isolated": "\uFEF7",
          "final": "\uFEF8"
        },
        "\u0644\u0625": {
          "isolated": "\uFEF9",
          "final": "\uFEFA"
        },
        "\u0644\u0627": {
          "isolated": "\uFEFB",
          "final": "\uFEFC"
        },
        "words": {
          "\u0635\u0644\u06D2": "\uFDF0",
          "\u0642\u0644\u06D2": "\uFDF1",
          "\u0627\u0644\u0644\u0647": "\uFDF2",
          "\u0627\u0643\u0628\u0631": "\uFDF3",
          "\u0645\u062D\u0645\u062F": "\uFDF4",
          "\u0635\u0644\u0639\u0645": "\uFDF5",
          "\u0631\u0633\u0648\u0644": "\uFDF6",
          "\u0639\u0644\u064A\u0647": "\uFDF7",
          "\u0648\u0633\u0644\u0645": "\uFDF8",
          "\u0635\u0644\u0649": "\uFDF9",
          "\u0635\u0644\u0649\u0627\u0644\u0644\u0647\u0639\u0644\u064A\u0647\u0648\u0633\u0644\u0645": "\uFDFA",
          "\u062C\u0644\u062C\u0644\u0627\u0644\u0647": "\uFDFB",
          "\u0631\u06CC\u0627\u0644": "\uFDFC"
        }
      };
      exports2.default = ligatureReference;
    }
  });

  // node_modules/alif-toolkit/lib/reference.js
  var require_reference = __commonJS({
    "node_modules/alif-toolkit/lib/reference.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var unicode_arabic_1 = require_unicode_arabic();
      var unicode_ligatures_1 = require_unicode_ligatures();
      var letterList = Object.keys(unicode_arabic_1.default);
      exports2.letterList = letterList;
      var ligatureList = Object.keys(unicode_ligatures_1.default);
      exports2.ligatureList = ligatureList;
      var ligatureWordList = Object.keys(unicode_ligatures_1.default.words);
      exports2.ligatureWordList = ligatureWordList;
      var lams = "\u0644\u06B5\u06B6\u06B7\u06B8";
      exports2.lams = lams;
      var alefs = "\u0627\u0622\u0623\u0625\u0671\u0672\u0673\u0675\u0773\u0774";
      exports2.alefs = alefs;
      var tashkeel = "\u0605\u0640\u0670\u0674\u06DF\u06E7\u06E8";
      exports2.tashkeel = tashkeel;
      function addToTashkeel(start2, finish) {
        for (var i2 = start2; i2 <= finish; i2++) {
          exports2.tashkeel = tashkeel += String.fromCharCode(i2);
        }
      }
      addToTashkeel(1552, 1562);
      addToTashkeel(1611, 1631);
      addToTashkeel(1750, 1756);
      addToTashkeel(1760, 1764);
      addToTashkeel(1770, 1773);
      addToTashkeel(2259, 2273);
      addToTashkeel(2275, 2303);
      addToTashkeel(65136, 65151);
      var lineBreakers = "\u0627\u0629\u0648\u06C0\u06CF\u06FD\u06FE\u076B\u076C\u0771\u0773\u0774\u0778\u0779\u08E2\u08B1\u08B2\u08B9";
      exports2.lineBreakers = lineBreakers;
      function addToLineBreakers(start2, finish) {
        for (var i2 = start2; i2 <= finish; i2++) {
          exports2.lineBreakers = lineBreakers += String.fromCharCode(i2);
        }
      }
      addToLineBreakers(1536, 1567);
      addToLineBreakers(1569, 1573);
      addToLineBreakers(1583, 1586);
      addToLineBreakers(1632, 1645);
      addToLineBreakers(1649, 1655);
      addToLineBreakers(1672, 1689);
      addToLineBreakers(1731, 1739);
      addToLineBreakers(1746, 1785);
      addToLineBreakers(1881, 1883);
      addToLineBreakers(2218, 2222);
      addToLineBreakers(64336, 65021);
      addToLineBreakers(65152, 65276);
      addToLineBreakers(69216, 69247);
      addToLineBreakers(126064, 126143);
      addToLineBreakers(126464, 126719);
    }
  });

  // node_modules/alif-toolkit/lib/GlyphSplitter.js
  var require_GlyphSplitter = __commonJS({
    "node_modules/alif-toolkit/lib/GlyphSplitter.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var isArabic_1 = require_isArabic();
      var reference_1 = require_reference();
      function GlyphSplitter(word) {
        var letters = [];
        var lastLetter = "";
        word.split("").forEach(function(letter) {
          if (isArabic_1.isArabic(letter)) {
            if (reference_1.tashkeel.indexOf(letter) > -1) {
              letters[letters.length - 1] += letter;
            } else if (lastLetter.length && (reference_1.lams.indexOf(lastLetter) === 0 && reference_1.alefs.indexOf(letter) > -1 || reference_1.lams.indexOf(lastLetter) > 0 && reference_1.alefs.indexOf(letter) === 0)) {
              letters[letters.length - 1] += letter;
            } else {
              letters.push(letter);
            }
          } else {
            letters.push(letter);
          }
          if (reference_1.tashkeel.indexOf(letter) === -1) {
            lastLetter = letter;
          }
        });
        return letters;
      }
      exports2.GlyphSplitter = GlyphSplitter;
    }
  });

  // node_modules/alif-toolkit/lib/BaselineSplitter.js
  var require_BaselineSplitter = __commonJS({
    "node_modules/alif-toolkit/lib/BaselineSplitter.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var isArabic_1 = require_isArabic();
      var reference_1 = require_reference();
      function BaselineSplitter(word) {
        var letters = [];
        var lastLetter = "";
        word.split("").forEach(function(letter) {
          if (isArabic_1.isArabic(letter) && isArabic_1.isArabic(lastLetter)) {
            if (lastLetter.length && reference_1.tashkeel.indexOf(letter) > -1) {
              letters[letters.length - 1] += letter;
            } else if (reference_1.lineBreakers.indexOf(lastLetter) > -1) {
              letters.push(letter);
            } else {
              letters[letters.length - 1] += letter;
            }
          } else {
            letters.push(letter);
          }
          if (reference_1.tashkeel.indexOf(letter) === -1) {
            lastLetter = letter;
          }
        });
        return letters;
      }
      exports2.BaselineSplitter = BaselineSplitter;
    }
  });

  // node_modules/alif-toolkit/lib/Normalization.js
  var require_Normalization = __commonJS({
    "node_modules/alif-toolkit/lib/Normalization.js": function(exports2) {
      init_typeof();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var unicode_arabic_1 = require_unicode_arabic();
      var unicode_ligatures_1 = require_unicode_ligatures();
      var isArabic_1 = require_isArabic();
      var reference_1 = require_reference();
      function Normal(word, breakPresentationForm) {
        if (typeof breakPresentationForm === "undefined") {
          breakPresentationForm = true;
        }
        var returnable = "";
        word.split("").forEach(function(letter) {
          if (!isArabic_1.isArabic(letter)) {
            returnable += letter;
            return;
          }
          for (var w = 0; w < reference_1.letterList.length; w++) {
            var letterForms = unicode_arabic_1.default[reference_1.letterList[w]];
            var versions = Object.keys(letterForms);
            for (var v = 0; v < versions.length; v++) {
              var localVersion = letterForms[versions[v]];
              if (_typeof(localVersion) === "object" && typeof localVersion.indexOf === "undefined") {
                var embeddedForms = Object.keys(localVersion);
                for (var ef = 0; ef < embeddedForms.length; ef++) {
                  var form = localVersion[embeddedForms[ef]];
                  if (form === letter || _typeof(form) === "object" && form.indexOf && form.indexOf(letter) > -1) {
                    if (form === letter) {
                      if (breakPresentationForm && localVersion["normal"] && ["isolated", "initial", "medial", "final"].indexOf(embeddedForms[ef]) > -1) {
                        if (_typeof(localVersion["normal"]) === "object") {
                          returnable += localVersion["normal"][0];
                        } else {
                          returnable += localVersion["normal"];
                        }
                        return;
                      }
                      returnable += letter;
                      return;
                    } else if (_typeof(form) === "object" && form.indexOf && form.indexOf(letter) > -1) {
                      returnable += form[0];
                      return;
                    }
                  }
                }
              } else if (localVersion === letter) {
                if (breakPresentationForm && letterForms["normal"] && ["isolated", "initial", "medial", "final"].indexOf(versions[v]) > -1) {
                  if (_typeof(letterForms["normal"]) === "object") {
                    returnable += letterForms["normal"][0];
                  } else {
                    returnable += letterForms["normal"];
                  }
                  return;
                }
                returnable += letter;
                return;
              } else if (_typeof(localVersion) === "object" && localVersion.indexOf && localVersion.indexOf(letter) > -1) {
                returnable += localVersion[0];
                return;
              }
            }
          }
          for (var v2 = 0; v2 < reference_1.ligatureList.length; v2++) {
            var normalForm = reference_1.ligatureList[v2];
            if (normalForm !== "words") {
              var ligForms = Object.keys(unicode_ligatures_1.default[normalForm]);
              for (var f2 = 0; f2 < ligForms.length; f2++) {
                if (unicode_ligatures_1.default[normalForm][ligForms[f2]] === letter) {
                  returnable += normalForm;
                  return;
                }
              }
            }
          }
          for (var v3 = 0; v3 < reference_1.ligatureWordList.length; v3++) {
            var _normalForm = reference_1.ligatureWordList[v3];
            if (unicode_ligatures_1.default.words[_normalForm] === letter) {
              returnable += _normalForm;
              return;
            }
          }
          returnable += letter;
        });
        return returnable;
      }
      exports2.Normal = Normal;
    }
  });

  // node_modules/alif-toolkit/lib/CharShaper.js
  var require_CharShaper = __commonJS({
    "node_modules/alif-toolkit/lib/CharShaper.js": function(exports2) {
      init_typeof();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var unicode_arabic_1 = require_unicode_arabic();
      var isArabic_1 = require_isArabic();
      var reference_1 = require_reference();
      function CharShaper(letter, form) {
        if (!isArabic_1.isArabic(letter)) {
          throw new Error("Not Arabic");
        }
        if (letter === "\u0621") {
          return "\u0621";
        }
        for (var w = 0; w < reference_1.letterList.length; w++) {
          var letterForms = unicode_arabic_1.default[reference_1.letterList[w]];
          var versions = Object.keys(letterForms);
          for (var v = 0; v < versions.length; v++) {
            var localVersion = letterForms[versions[v]];
            if (localVersion === letter || _typeof(localVersion) === "object" && localVersion.indexOf && localVersion.indexOf(letter) > -1) {
              if (versions.indexOf(form) > -1) {
                return letterForms[form];
              }
            } else if (_typeof(localVersion) === "object" && typeof localVersion.indexOf === "undefined") {
              var embeddedVersions = Object.keys(localVersion);
              for (var ev = 0; ev < embeddedVersions.length; ev++) {
                if (localVersion[embeddedVersions[ev]] === letter || _typeof(localVersion[embeddedVersions[ev]]) === "object" && localVersion[embeddedVersions[ev]].indexOf && localVersion[embeddedVersions[ev]].indexOf(letter) > -1) {
                  if (embeddedVersions.indexOf(form) > -1) {
                    return localVersion[form];
                  }
                }
              }
            }
          }
        }
      }
      exports2.CharShaper = CharShaper;
    }
  });

  // node_modules/alif-toolkit/lib/WordShaper.js
  var require_WordShaper = __commonJS({
    "node_modules/alif-toolkit/lib/WordShaper.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var isArabic_1 = require_isArabic();
      var reference_1 = require_reference();
      var CharShaper_1 = require_CharShaper();
      var unicode_ligatures_1 = require_unicode_ligatures();
      function WordShaper2(word) {
        var state = "initial";
        var output4 = "";
        for (var w = 0; w < word.length; w++) {
          var nextLetter = " ";
          for (var nxw = w + 1; nxw < word.length; nxw++) {
            if (!isArabic_1.isArabic(word[nxw])) {
              break;
            }
            if (reference_1.tashkeel.indexOf(word[nxw]) === -1) {
              nextLetter = word[nxw];
              break;
            }
          }
          if (!isArabic_1.isArabic(word[w]) || isArabic_1.isMath(word[w])) {
            output4 += word[w];
            state = "initial";
          } else if (reference_1.tashkeel.indexOf(word[w]) > -1) {
            output4 += word[w];
          } else if (nextLetter === " " || reference_1.lineBreakers.indexOf(word[w]) > -1) {
            output4 += CharShaper_1.CharShaper(word[w], state === "initial" ? "isolated" : "final");
            state = "initial";
          } else if (reference_1.lams.indexOf(word[w]) > -1 && reference_1.alefs.indexOf(nextLetter) > -1) {
            output4 += unicode_ligatures_1.default[word[w] + nextLetter][state === "initial" ? "isolated" : "final"];
            while (word[w] !== nextLetter) {
              w++;
            }
            state = "initial";
          } else {
            output4 += CharShaper_1.CharShaper(word[w], state);
            state = "medial";
          }
        }
        return output4;
      }
      exports2.WordShaper = WordShaper2;
    }
  });

  // node_modules/alif-toolkit/lib/ParentLetter.js
  var require_ParentLetter = __commonJS({
    "node_modules/alif-toolkit/lib/ParentLetter.js": function(exports2) {
      init_typeof();
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var unicode_arabic_1 = require_unicode_arabic();
      var isArabic_1 = require_isArabic();
      var reference_1 = require_reference();
      function ParentLetter(letter) {
        if (!isArabic_1.isArabic(letter)) {
          throw new Error("Not an Arabic letter");
        }
        for (var w = 0; w < reference_1.letterList.length; w++) {
          var letterForms = unicode_arabic_1.default[reference_1.letterList[w]];
          var versions = Object.keys(letterForms);
          for (var v = 0; v < versions.length; v++) {
            var localVersion = letterForms[versions[v]];
            if (_typeof(localVersion) === "object" && typeof localVersion.indexOf === "undefined") {
              var embeddedForms = Object.keys(localVersion);
              for (var ef = 0; ef < embeddedForms.length; ef++) {
                var form = localVersion[embeddedForms[ef]];
                if (form === letter || _typeof(form) === "object" && form.indexOf && form.indexOf(letter) > -1) {
                  return localVersion;
                }
              }
            } else if (localVersion === letter || _typeof(localVersion) === "object" && localVersion.indexOf && localVersion.indexOf(letter) > -1) {
              return letterForms;
            }
          }
          return null;
        }
      }
      exports2.ParentLetter = ParentLetter;
      function GrandparentLetter(letter) {
        if (!isArabic_1.isArabic(letter)) {
          throw new Error("Not an Arabic letter");
        }
        for (var w = 0; w < reference_1.letterList.length; w++) {
          var letterForms = unicode_arabic_1.default[reference_1.letterList[w]];
          var versions = Object.keys(letterForms);
          for (var v = 0; v < versions.length; v++) {
            var localVersion = letterForms[versions[v]];
            if (_typeof(localVersion) === "object" && typeof localVersion.indexOf === "undefined") {
              var embeddedForms = Object.keys(localVersion);
              for (var ef = 0; ef < embeddedForms.length; ef++) {
                var form = localVersion[embeddedForms[ef]];
                if (form === letter || _typeof(form) === "object" && form.indexOf && form.indexOf(letter) > -1) {
                  return letterForms;
                }
              }
            } else if (localVersion === letter || _typeof(localVersion) === "object" && localVersion.indexOf && localVersion.indexOf(letter) > -1) {
              return letterForms;
            }
          }
          return null;
        }
      }
      exports2.GrandparentLetter = GrandparentLetter;
    }
  });

  // node_modules/alif-toolkit/lib/index.js
  var require_lib = __commonJS({
    "node_modules/alif-toolkit/lib/index.js": function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var isArabic_1 = require_isArabic();
      exports2.isArabic = isArabic_1.isArabic;
      var GlyphSplitter_1 = require_GlyphSplitter();
      exports2.GlyphSplitter = GlyphSplitter_1.GlyphSplitter;
      var BaselineSplitter_1 = require_BaselineSplitter();
      exports2.BaselineSplitter = BaselineSplitter_1.BaselineSplitter;
      var Normalization_1 = require_Normalization();
      exports2.Normal = Normalization_1.Normal;
      var CharShaper_1 = require_CharShaper();
      exports2.CharShaper = CharShaper_1.CharShaper;
      var WordShaper_1 = require_WordShaper();
      exports2.WordShaper = WordShaper_1.WordShaper;
      var ParentLetter_1 = require_ParentLetter();
      exports2.ParentLetter = ParentLetter_1.ParentLetter;
      exports2.GrandparentLetter = ParentLetter_1.GrandparentLetter;
    }
  });

  // node_modules/which-polygon/node_modules/quickselect/quickselect.js
  var require_quickselect = __commonJS({
    "node_modules/which-polygon/node_modules/quickselect/quickselect.js": function(exports2, module2) {
      init_typeof();
      (function(global3, factory) {
        (typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global3.quickselect = factory();
      })(void 0, function() {
        "use strict";
        function quickselect2(arr, k, left, right, compare) {
          quickselectStep(arr, k, left || 0, right || arr.length - 1, compare || defaultCompare);
        }
        function quickselectStep(arr, k, left, right, compare) {
          while (right > left) {
            if (right - left > 600) {
              var n2 = right - left + 1;
              var m = k - left + 1;
              var z = Math.log(n2);
              var s = 0.5 * Math.exp(2 * z / 3);
              var sd = 0.5 * Math.sqrt(z * s * (n2 - s) / n2) * (m - n2 / 2 < 0 ? -1 : 1);
              var newLeft = Math.max(left, Math.floor(k - m * s / n2 + sd));
              var newRight = Math.min(right, Math.floor(k + (n2 - m) * s / n2 + sd));
              quickselectStep(arr, k, newLeft, newRight, compare);
            }
            var t = arr[k];
            var i2 = left;
            var j = right;
            swap2(arr, left, k);
            if (compare(arr[right], t) > 0)
              swap2(arr, left, right);
            while (i2 < j) {
              swap2(arr, i2, j);
              i2++;
              j--;
              while (compare(arr[i2], t) < 0) {
                i2++;
              }
              while (compare(arr[j], t) > 0) {
                j--;
              }
            }
            if (compare(arr[left], t) === 0)
              swap2(arr, left, j);
            else {
              j++;
              swap2(arr, j, right);
            }
            if (j <= k)
              left = j + 1;
            if (k <= j)
              right = j - 1;
          }
        }
        function swap2(arr, i2, j) {
          var tmp = arr[i2];
          arr[i2] = arr[j];
          arr[j] = tmp;
        }
        function defaultCompare(a, b2) {
          return a < b2 ? -1 : a > b2 ? 1 : 0;
        }
        return quickselect2;
      });
    }
  });

  // node_modules/which-polygon/node_modules/rbush/index.js
  var require_rbush = __commonJS({
    "node_modules/which-polygon/node_modules/rbush/index.js": function(exports2, module2) {
      "use strict";
      module2.exports = rbush;
      module2.exports.default = rbush;
      var quickselect2 = require_quickselect();
      function rbush(maxEntries, format2) {
        if (!(this instanceof rbush))
          return new rbush(maxEntries, format2);
        this._maxEntries = Math.max(4, maxEntries || 9);
        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
        if (format2) {
          this._initFormat(format2);
        }
        this.clear();
      }
      rbush.prototype = {
        all: function all() {
          return this._all(this.data, []);
        },
        search: function search3(bbox) {
          var node = this.data, result6 = [], toBBox = this.toBBox;
          if (!intersects4(bbox, node))
            return result6;
          var nodesToSearch = [], i2, len, child, childBBox;
          while (node) {
            for (i2 = 0, len = node.children.length; i2 < len; i2++) {
              child = node.children[i2];
              childBBox = node.leaf ? toBBox(child) : child;
              if (intersects4(bbox, childBBox)) {
                if (node.leaf)
                  result6.push(child);
                else if (contains3(bbox, childBBox))
                  this._all(child, result6);
                else
                  nodesToSearch.push(child);
              }
            }
            node = nodesToSearch.pop();
          }
          return result6;
        },
        collides: function collides(bbox) {
          var node = this.data, toBBox = this.toBBox;
          if (!intersects4(bbox, node))
            return false;
          var nodesToSearch = [], i2, len, child, childBBox;
          while (node) {
            for (i2 = 0, len = node.children.length; i2 < len; i2++) {
              child = node.children[i2];
              childBBox = node.leaf ? toBBox(child) : child;
              if (intersects4(bbox, childBBox)) {
                if (node.leaf || contains3(bbox, childBBox))
                  return true;
                nodesToSearch.push(child);
              }
            }
            node = nodesToSearch.pop();
          }
          return false;
        },
        load: function load2(data2) {
          if (!(data2 && data2.length))
            return this;
          if (data2.length < this._minEntries) {
            for (var i2 = 0, len = data2.length; i2 < len; i2++) {
              this.insert(data2[i2]);
            }
            return this;
          }
          var node = this._build(data2.slice(), 0, data2.length - 1, 0);
          if (!this.data.children.length) {
            this.data = node;
          } else if (this.data.height === node.height) {
            this._splitRoot(this.data, node);
          } else {
            if (this.data.height < node.height) {
              var tmpNode = this.data;
              this.data = node;
              node = tmpNode;
            }
            this._insert(node, this.data.height - node.height - 1, true);
          }
          return this;
        },
        insert: function insert(item) {
          if (item)
            this._insert(item, this.data.height - 1);
          return this;
        },
        clear: function clear() {
          this.data = createNode([]);
          return this;
        },
        remove: function remove4(item, equalsFn) {
          if (!item)
            return this;
          var node = this.data, bbox = this.toBBox(item), path = [], indexes = [], i2, parent2, index, goingUp;
          while (node || path.length) {
            if (!node) {
              node = path.pop();
              parent2 = path[path.length - 1];
              i2 = indexes.pop();
              goingUp = true;
            }
            if (node.leaf) {
              index = findItem(item, node.children, equalsFn);
              if (index !== -1) {
                node.children.splice(index, 1);
                path.push(node);
                this._condense(path);
                return this;
              }
            }
            if (!goingUp && !node.leaf && contains3(node, bbox)) {
              path.push(node);
              indexes.push(i2);
              i2 = 0;
              parent2 = node;
              node = node.children[0];
            } else if (parent2) {
              i2++;
              node = parent2.children[i2];
              goingUp = false;
            } else
              node = null;
          }
          return this;
        },
        toBBox: function toBBox(item) {
          return item;
        },
        compareMinX: compareNodeMinX,
        compareMinY: compareNodeMinY,
        toJSON: function toJSON() {
          return this.data;
        },
        fromJSON: function fromJSON(data2) {
          this.data = data2;
          return this;
        },
        _all: function _all(node, result6) {
          var nodesToSearch = [];
          while (node) {
            if (node.leaf)
              result6.push.apply(result6, node.children);
            else
              nodesToSearch.push.apply(nodesToSearch, node.children);
            node = nodesToSearch.pop();
          }
          return result6;
        },
        _build: function _build(items, left, right, height) {
          var N = right - left + 1, M = this._maxEntries, node;
          if (N <= M) {
            node = createNode(items.slice(left, right + 1));
            calcBBox(node, this.toBBox);
            return node;
          }
          if (!height) {
            height = Math.ceil(Math.log(N) / Math.log(M));
            M = Math.ceil(N / Math.pow(M, height - 1));
          }
          node = createNode([]);
          node.leaf = false;
          node.height = height;
          var N2 = Math.ceil(N / M), N1 = N2 * Math.ceil(Math.sqrt(M)), i2, j, right2, right3;
          multiSelect(items, left, right, N1, this.compareMinX);
          for (i2 = left; i2 <= right; i2 += N1) {
            right2 = Math.min(i2 + N1 - 1, right);
            multiSelect(items, i2, right2, N2, this.compareMinY);
            for (j = i2; j <= right2; j += N2) {
              right3 = Math.min(j + N2 - 1, right2);
              node.children.push(this._build(items, j, right3, height - 1));
            }
          }
          calcBBox(node, this.toBBox);
          return node;
        },
        _chooseSubtree: function _chooseSubtree(bbox, node, level, path) {
          var i2, len, child, targetNode, area3, enlargement, minArea, minEnlargement;
          while (true) {
            path.push(node);
            if (node.leaf || path.length - 1 === level)
              break;
            minArea = minEnlargement = Infinity;
            for (i2 = 0, len = node.children.length; i2 < len; i2++) {
              child = node.children[i2];
              area3 = bboxArea(child);
              enlargement = enlargedArea(bbox, child) - area3;
              if (enlargement < minEnlargement) {
                minEnlargement = enlargement;
                minArea = area3 < minArea ? area3 : minArea;
                targetNode = child;
              } else if (enlargement === minEnlargement) {
                if (area3 < minArea) {
                  minArea = area3;
                  targetNode = child;
                }
              }
            }
            node = targetNode || node.children[0];
          }
          return node;
        },
        _insert: function _insert(item, level, isNode) {
          var toBBox = this.toBBox, bbox = isNode ? item : toBBox(item), insertPath = [];
          var node = this._chooseSubtree(bbox, this.data, level, insertPath);
          node.children.push(item);
          extend2(node, bbox);
          while (level >= 0) {
            if (insertPath[level].children.length > this._maxEntries) {
              this._split(insertPath, level);
              level--;
            } else
              break;
          }
          this._adjustParentBBoxes(bbox, insertPath, level);
        },
        _split: function _split(insertPath, level) {
          var node = insertPath[level], M = node.children.length, m = this._minEntries;
          this._chooseSplitAxis(node, m, M);
          var splitIndex = this._chooseSplitIndex(node, m, M);
          var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;
          calcBBox(node, this.toBBox);
          calcBBox(newNode, this.toBBox);
          if (level)
            insertPath[level - 1].children.push(newNode);
          else
            this._splitRoot(node, newNode);
        },
        _splitRoot: function _splitRoot(node, newNode) {
          this.data = createNode([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox(this.data, this.toBBox);
        },
        _chooseSplitIndex: function _chooseSplitIndex(node, m, M) {
          var i2, bbox1, bbox2, overlap, area3, minOverlap, minArea, index;
          minOverlap = minArea = Infinity;
          for (i2 = m; i2 <= M - m; i2++) {
            bbox1 = distBBox(node, 0, i2, this.toBBox);
            bbox2 = distBBox(node, i2, M, this.toBBox);
            overlap = intersectionArea(bbox1, bbox2);
            area3 = bboxArea(bbox1) + bboxArea(bbox2);
            if (overlap < minOverlap) {
              minOverlap = overlap;
              index = i2;
              minArea = area3 < minArea ? area3 : minArea;
            } else if (overlap === minOverlap) {
              if (area3 < minArea) {
                minArea = area3;
                index = i2;
              }
            }
          }
          return index;
        },
        _chooseSplitAxis: function _chooseSplitAxis(node, m, M) {
          var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX, compareMinY = node.leaf ? this.compareMinY : compareNodeMinY, xMargin = this._allDistMargin(node, m, M, compareMinX), yMargin = this._allDistMargin(node, m, M, compareMinY);
          if (xMargin < yMargin)
            node.children.sort(compareMinX);
        },
        _allDistMargin: function _allDistMargin(node, m, M, compare) {
          node.children.sort(compare);
          var toBBox = this.toBBox, leftBBox = distBBox(node, 0, m, toBBox), rightBBox = distBBox(node, M - m, M, toBBox), margin = bboxMargin(leftBBox) + bboxMargin(rightBBox), i2, child;
          for (i2 = m; i2 < M - m; i2++) {
            child = node.children[i2];
            extend2(leftBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(leftBBox);
          }
          for (i2 = M - m - 1; i2 >= m; i2--) {
            child = node.children[i2];
            extend2(rightBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(rightBBox);
          }
          return margin;
        },
        _adjustParentBBoxes: function _adjustParentBBoxes(bbox, path, level) {
          for (var i2 = level; i2 >= 0; i2--) {
            extend2(path[i2], bbox);
          }
        },
        _condense: function _condense(path) {
          for (var i2 = path.length - 1, siblings; i2 >= 0; i2--) {
            if (path[i2].children.length === 0) {
              if (i2 > 0) {
                siblings = path[i2 - 1].children;
                siblings.splice(siblings.indexOf(path[i2]), 1);
              } else
                this.clear();
            } else
              calcBBox(path[i2], this.toBBox);
          }
        },
        _initFormat: function _initFormat(format2) {
          var compareArr = ["return a", " - b", ";"];
          this.compareMinX = new Function("a", "b", compareArr.join(format2[0]));
          this.compareMinY = new Function("a", "b", compareArr.join(format2[1]));
          this.toBBox = new Function("a", "return {minX: a" + format2[0] + ", minY: a" + format2[1] + ", maxX: a" + format2[2] + ", maxY: a" + format2[3] + "};");
        }
      };
      function findItem(item, items, equalsFn) {
        if (!equalsFn)
          return items.indexOf(item);
        for (var i2 = 0; i2 < items.length; i2++) {
          if (equalsFn(item, items[i2]))
            return i2;
        }
        return -1;
      }
      function calcBBox(node, toBBox) {
        distBBox(node, 0, node.children.length, toBBox, node);
      }
      function distBBox(node, k, p2, toBBox, destNode) {
        if (!destNode)
          destNode = createNode(null);
        destNode.minX = Infinity;
        destNode.minY = Infinity;
        destNode.maxX = -Infinity;
        destNode.maxY = -Infinity;
        for (var i2 = k, child; i2 < p2; i2++) {
          child = node.children[i2];
          extend2(destNode, node.leaf ? toBBox(child) : child);
        }
        return destNode;
      }
      function extend2(a, b2) {
        a.minX = Math.min(a.minX, b2.minX);
        a.minY = Math.min(a.minY, b2.minY);
        a.maxX = Math.max(a.maxX, b2.maxX);
        a.maxY = Math.max(a.maxY, b2.maxY);
        return a;
      }
      function compareNodeMinX(a, b2) {
        return a.minX - b2.minX;
      }
      function compareNodeMinY(a, b2) {
        return a.minY - b2.minY;
      }
      function bboxArea(a) {
        return (a.maxX - a.minX) * (a.maxY - a.minY);
      }
      function bboxMargin(a) {
        return a.maxX - a.minX + (a.maxY - a.minY);
      }
      function enlargedArea(a, b2) {
        return (Math.max(b2.maxX, a.maxX) - Math.min(b2.minX, a.minX)) * (Math.max(b2.maxY, a.maxY) - Math.min(b2.minY, a.minY));
      }
      function intersectionArea(a, b2) {
        var minX = Math.max(a.minX, b2.minX), minY = Math.max(a.minY, b2.minY), maxX = Math.min(a.maxX, b2.maxX), maxY = Math.min(a.maxY, b2.maxY);
        return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
      }
      function contains3(a, b2) {
        return a.minX <= b2.minX && a.minY <= b2.minY && b2.maxX <= a.maxX && b2.maxY <= a.maxY;
      }
      function intersects4(a, b2) {
        return b2.minX <= a.maxX && b2.minY <= a.maxY && b2.maxX >= a.minX && b2.maxY >= a.minY;
      }
      function createNode(children2) {
        return {
          children: children2,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
        };
      }
      function multiSelect(arr, left, right, n2, compare) {
        var stack = [left, right], mid;
        while (stack.length) {
          right = stack.pop();
          left = stack.pop();
          if (right - left <= n2)
            continue;
          mid = left + Math.ceil((right - left) / n2 / 2) * n2;
          quickselect2(arr, mid, left, right, compare);
          stack.push(left, mid, mid, right);
        }
      }
    }
  });

  // node_modules/lineclip/index.js
  var require_lineclip = __commonJS({
    "node_modules/lineclip/index.js": function(exports2, module2) {
      "use strict";
      module2.exports = lineclip2;
      lineclip2.polyline = lineclip2;
      lineclip2.polygon = polygonclip2;
      function lineclip2(points, bbox, result6) {
        var len = points.length, codeA = bitCode2(points[0], bbox), part = [], i2, a, b2, codeB, lastCode;
        if (!result6)
          result6 = [];
        for (i2 = 1; i2 < len; i2++) {
          a = points[i2 - 1];
          b2 = points[i2];
          codeB = lastCode = bitCode2(b2, bbox);
          while (true) {
            if (!(codeA | codeB)) {
              part.push(a);
              if (codeB !== lastCode) {
                part.push(b2);
                if (i2 < len - 1) {
                  result6.push(part);
                  part = [];
                }
              } else if (i2 === len - 1) {
                part.push(b2);
              }
              break;
            } else if (codeA & codeB) {
              break;
            } else if (codeA) {
              a = intersect2(a, b2, codeA, bbox);
              codeA = bitCode2(a, bbox);
            } else {
              b2 = intersect2(a, b2, codeB, bbox);
              codeB = bitCode2(b2, bbox);
            }
          }
          codeA = lastCode;
        }
        if (part.length)
          result6.push(part);
        return result6;
      }
      function polygonclip2(points, bbox) {
        var result6, edge, prev, prevInside, i2, p2, inside;
        for (edge = 1; edge <= 8; edge *= 2) {
          result6 = [];
          prev = points[points.length - 1];
          prevInside = !(bitCode2(prev, bbox) & edge);
          for (i2 = 0; i2 < points.length; i2++) {
            p2 = points[i2];
            inside = !(bitCode2(p2, bbox) & edge);
            if (inside !== prevInside)
              result6.push(intersect2(prev, p2, edge, bbox));
            if (inside)
              result6.push(p2);
            prev = p2;
            prevInside = inside;
          }
          points = result6;
          if (!points.length)
            break;
        }
        return result6;
      }
      function intersect2(a, b2, edge, bbox) {
        return edge & 8 ? [a[0] + (b2[0] - a[0]) * (bbox[3] - a[1]) / (b2[1] - a[1]), bbox[3]] : edge & 4 ? [a[0] + (b2[0] - a[0]) * (bbox[1] - a[1]) / (b2[1] - a[1]), bbox[1]] : edge & 2 ? [bbox[2], a[1] + (b2[1] - a[1]) * (bbox[2] - a[0]) / (b2[0] - a[0])] : edge & 1 ? [bbox[0], a[1] + (b2[1] - a[1]) * (bbox[0] - a[0]) / (b2[0] - a[0])] : null;
      }
      function bitCode2(p2, bbox) {
        var code = 0;
        if (p2[0] < bbox[0])
          code |= 1;
        else if (p2[0] > bbox[2])
          code |= 2;
        if (p2[1] < bbox[1])
          code |= 4;
        else if (p2[1] > bbox[3])
          code |= 8;
        return code;
      }
    }
  });

  // node_modules/which-polygon/index.js
  var require_which_polygon = __commonJS({
    "node_modules/which-polygon/index.js": function(exports2, module2) {
      "use strict";
      var rbush = require_rbush();
      var lineclip2 = require_lineclip();
      module2.exports = whichPolygon5;
      function whichPolygon5(data2) {
        var bboxes = [];
        for (var i2 = 0; i2 < data2.features.length; i2++) {
          var feature3 = data2.features[i2];
          var coords = feature3.geometry.coordinates;
          if (feature3.geometry.type === "Polygon") {
            bboxes.push(treeItem(coords, feature3.properties));
          } else if (feature3.geometry.type === "MultiPolygon") {
            for (var j = 0; j < coords.length; j++) {
              bboxes.push(treeItem(coords[j], feature3.properties));
            }
          }
        }
        var tree = rbush().load(bboxes);
        function query(p2, multi) {
          var output4 = [], result6 = tree.search({
            minX: p2[0],
            minY: p2[1],
            maxX: p2[0],
            maxY: p2[1]
          });
          for (var i3 = 0; i3 < result6.length; i3++) {
            if (insidePolygon(result6[i3].coords, p2)) {
              if (multi)
                output4.push(result6[i3].props);
              else
                return result6[i3].props;
            }
          }
          return multi && output4.length ? output4 : null;
        }
        query.tree = tree;
        query.bbox = function queryBBox(bbox) {
          var output4 = [];
          var result6 = tree.search({
            minX: bbox[0],
            minY: bbox[1],
            maxX: bbox[2],
            maxY: bbox[3]
          });
          for (var i3 = 0; i3 < result6.length; i3++) {
            if (polygonIntersectsBBox(result6[i3].coords, bbox)) {
              output4.push(result6[i3].props);
            }
          }
          return output4;
        };
        return query;
      }
      function polygonIntersectsBBox(polygon2, bbox) {
        var bboxCenter = [(bbox[0] + bbox[2]) / 2, (bbox[1] + bbox[3]) / 2];
        if (insidePolygon(polygon2, bboxCenter))
          return true;
        for (var i2 = 0; i2 < polygon2.length; i2++) {
          if (lineclip2(polygon2[i2], bbox).length > 0)
            return true;
        }
        return false;
      }
      function insidePolygon(rings, p2) {
        var inside = false;
        for (var i2 = 0, len = rings.length; i2 < len; i2++) {
          var ring = rings[i2];
          for (var j = 0, len2 = ring.length, k = len2 - 1; j < len2; k = j++) {
            if (rayIntersect(p2, ring[j], ring[k]))
              inside = !inside;
          }
        }
        return inside;
      }
      function rayIntersect(p2, p1, p22) {
        return p1[1] > p2[1] !== p22[1] > p2[1] && p2[0] < (p22[0] - p1[0]) * (p2[1] - p1[1]) / (p22[1] - p1[1]) + p1[0];
      }
      function treeItem(coords, props) {
        var item = {
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity,
          coords: coords,
          props: props
        };
        for (var i2 = 0; i2 < coords[0].length; i2++) {
          var p2 = coords[0][i2];
          item.minX = Math.min(item.minX, p2[0]);
          item.minY = Math.min(item.minY, p2[1]);
          item.maxX = Math.max(item.maxX, p2[0]);
          item.maxY = Math.max(item.maxY, p2[1]);
        }
        return item;
      }
    }
  });

  // node_modules/wgs84/index.js
  var require_wgs84 = __commonJS({
    "node_modules/wgs84/index.js": function(exports2, module2) {
      module2.exports.RADIUS = 6378137;
      module2.exports.FLATTENING = 1 / 298.257223563;
      module2.exports.POLAR_RADIUS = 63567523142e-4;
    }
  });

  // node_modules/@mapbox/geojson-area/index.js
  var require_geojson_area = __commonJS({
    "node_modules/@mapbox/geojson-area/index.js": function(exports2, module2) {
      var wgs84 = require_wgs84();
      module2.exports.geometry = geometry6;
      module2.exports.ring = ringArea;
      function geometry6(_2) {
        var area3 = 0, i2;
        switch (_2.type) {
          case "Polygon":
            return polygonArea(_2.coordinates);
          case "MultiPolygon":
            for (i2 = 0; i2 < _2.coordinates.length; i2++) {
              area3 += polygonArea(_2.coordinates[i2]);
            }
            return area3;
          case "Point":
          case "MultiPoint":
          case "LineString":
          case "MultiLineString":
            return 0;
          case "GeometryCollection":
            for (i2 = 0; i2 < _2.geometries.length; i2++) {
              area3 += geometry6(_2.geometries[i2]);
            }
            return area3;
        }
      }
      function polygonArea(coords) {
        var area3 = 0;
        if (coords && coords.length > 0) {
          area3 += Math.abs(ringArea(coords[0]));
          for (var i2 = 1; i2 < coords.length; i2++) {
            area3 -= Math.abs(ringArea(coords[i2]));
          }
        }
        return area3;
      }
      function ringArea(coords) {
        var p1, p2, p3, lowerIndex, middleIndex, upperIndex, i2, area3 = 0, coordsLength = coords.length;
        if (coordsLength > 2) {
          for (i2 = 0; i2 < coordsLength; i2++) {
            if (i2 === coordsLength - 2) {
              lowerIndex = coordsLength - 2;
              middleIndex = coordsLength - 1;
              upperIndex = 0;
            } else if (i2 === coordsLength - 1) {
              lowerIndex = coordsLength - 1;
              middleIndex = 0;
              upperIndex = 1;
            } else {
              lowerIndex = i2;
              middleIndex = i2 + 1;
              upperIndex = i2 + 2;
            }
            p1 = coords[lowerIndex];
            p2 = coords[middleIndex];
            p3 = coords[upperIndex];
            area3 += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));
          }
          area3 = area3 * wgs84.RADIUS * wgs84.RADIUS / 2;
        }
        return area3;
      }
      function rad(_2) {
        return _2 * Math.PI / 180;
      }
    }
  });

  // node_modules/circle-to-polygon/input-validation/validateCenter.js
  var require_validateCenter = __commonJS({
    "node_modules/circle-to-polygon/input-validation/validateCenter.js": function(exports2) {
      init_typeof();
      init_slicedToArray();
      exports2.validateCenter = function validateCenter(center) {
        var validCenterLengths = [2, 3];
        if (!Array.isArray(center) || !validCenterLengths.includes(center.length)) {
          throw new Error("ERROR! Center has to be an array of length two or three");
        }
        var _center = _slicedToArray(center, 2), lng = _center[0], lat = _center[1];
        if (typeof lng !== "number" || typeof lat !== "number") {
          throw new Error("ERROR! Longitude and Latitude has to be numbers but where ".concat(_typeof(lng), " and ").concat(_typeof(lat)));
        }
        if (lng > 180 || lng < -180) {
          throw new Error("ERROR! Longitude has to be between -180 and 180 but was ".concat(lng));
        }
        if (lat > 90 || lat < -90) {
          throw new Error("ERROR! Latitude has to be between -90 and 90 but was ".concat(lat));
        }
      };
    }
  });

  // node_modules/circle-to-polygon/input-validation/validateRadius.js
  var require_validateRadius = __commonJS({
    "node_modules/circle-to-polygon/input-validation/validateRadius.js": function(exports2) {
      init_typeof();
      exports2.validateRadius = function validateRadius(radius) {
        if (typeof radius !== "number") {
          throw new Error("ERROR! Radius has to be a positive number but was: ".concat(_typeof(radius)));
        }
        if (radius <= 0) {
          throw new Error("ERROR! Radius has to be a positive number but was: ".concat(radius));
        }
      };
    }
  });

  // node_modules/circle-to-polygon/input-validation/validateNumberOfEdges.js
  var require_validateNumberOfEdges = __commonJS({
    "node_modules/circle-to-polygon/input-validation/validateNumberOfEdges.js": function(exports2) {
      init_typeof();
      exports2.validateNumberOfEdges = function validateNumberOfEdges(numberOfEdges) {
        if (typeof numberOfEdges !== "number") {
          var ARGUMENT_TYPE = Array.isArray(numberOfEdges) ? "array" : _typeof(numberOfEdges);
          throw new Error("ERROR! Number of edges has to be a number but was: ".concat(ARGUMENT_TYPE));
        }
        if (numberOfEdges < 3) {
          throw new Error("ERROR! Number of edges has to be at least 3 but was: ".concat(numberOfEdges));
        }
      };
    }
  });

  // node_modules/circle-to-polygon/input-validation/validateEarthRadius.js
  var require_validateEarthRadius = __commonJS({
    "node_modules/circle-to-polygon/input-validation/validateEarthRadius.js": function(exports2) {
      init_typeof();
      exports2.validateEarthRadius = function validateEarthRadius(earthRadius2) {
        if (typeof earthRadius2 !== "number") {
          var ARGUMENT_TYPE = Array.isArray(earthRadius2) ? "array" : _typeof(earthRadius2);
          throw new Error("ERROR! Earth radius has to be a number but was: ".concat(ARGUMENT_TYPE));
        }
        if (earthRadius2 <= 0) {
          throw new Error("ERROR! Earth radius has to be a positive number but was: ".concat(earthRadius2));
        }
      };
    }
  });

  // node_modules/circle-to-polygon/input-validation/validateBearing.js
  var require_validateBearing = __commonJS({
    "node_modules/circle-to-polygon/input-validation/validateBearing.js": function(exports2) {
      init_typeof();
      exports2.validateBearing = function validateBearing(bearing) {
        if (typeof bearing !== "number") {
          var ARGUMENT_TYPE = Array.isArray(bearing) ? "array" : _typeof(bearing);
          throw new Error("ERROR! Bearing has to be a number but was: ".concat(ARGUMENT_TYPE));
        }
      };
    }
  });

  // node_modules/circle-to-polygon/input-validation/index.js
  var require_input_validation = __commonJS({
    "node_modules/circle-to-polygon/input-validation/index.js": function(exports2) {
      var validateCenter = require_validateCenter().validateCenter;
      var validateRadius = require_validateRadius().validateRadius;
      var validateNumberOfEdges = require_validateNumberOfEdges().validateNumberOfEdges;
      var validateEarthRadius = require_validateEarthRadius().validateEarthRadius;
      var validateBearing = require_validateBearing().validateBearing;
      function validateInput(_ref) {
        var center = _ref.center, radius = _ref.radius, numberOfEdges = _ref.numberOfEdges, earthRadius2 = _ref.earthRadius, bearing = _ref.bearing;
        validateCenter(center);
        validateRadius(radius);
        validateNumberOfEdges(numberOfEdges);
        validateEarthRadius(earthRadius2);
        validateBearing(bearing);
      }
      exports2.validateCenter = validateCenter;
      exports2.validateRadius = validateRadius;
      exports2.validateNumberOfEdges = validateNumberOfEdges;
      exports2.validateEarthRadius = validateEarthRadius;
      exports2.validateBearing = validateBearing;
      exports2.validateInput = validateInput;
    }
  });

  // node_modules/circle-to-polygon/index.js
  var require_circle_to_polygon = __commonJS({
    "node_modules/circle-to-polygon/index.js": function(exports2, module2) {
      init_typeof();
      "use strict";
      var _require = require_input_validation();
      var validateInput = _require.validateInput;
      var defaultEarthRadius = 6378137;
      function toRadians(angleInDegrees) {
        return angleInDegrees * Math.PI / 180;
      }
      function toDegrees(angleInRadians) {
        return angleInRadians * 180 / Math.PI;
      }
      function offset(c1, distance, earthRadius2, bearing) {
        var lat1 = toRadians(c1[1]);
        var lon1 = toRadians(c1[0]);
        var dByR = distance / earthRadius2;
        var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
        var lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
        return [toDegrees(lon), toDegrees(lat)];
      }
      module2.exports = function circleToPolygon2(center, radius, options) {
        var n2 = getNumberOfEdges(options);
        var earthRadius2 = getEarthRadius(options);
        var bearing = getBearing(options);
        var direction = getDirection(options);
        validateInput({
          center: center,
          radius: radius,
          numberOfEdges: n2,
          earthRadius: earthRadius2,
          bearing: bearing
        });
        var start2 = toRadians(bearing);
        var coordinates = [];
        for (var i2 = 0; i2 < n2; ++i2) {
          coordinates.push(offset(center, radius, earthRadius2, start2 + direction * 2 * Math.PI * -i2 / n2));
        }
        coordinates.push(coordinates[0]);
        return {
          type: "Polygon",
          coordinates: [coordinates]
        };
      };
      function getNumberOfEdges(options) {
        if (isUndefinedOrNull(options)) {
          return 32;
        } else if (isObjectNotArray(options)) {
          var numberOfEdges = options.numberOfEdges;
          return numberOfEdges === void 0 ? 32 : numberOfEdges;
        }
        return options;
      }
      function getEarthRadius(options) {
        if (isUndefinedOrNull(options)) {
          return defaultEarthRadius;
        } else if (isObjectNotArray(options)) {
          var earthRadius2 = options.earthRadius;
          return earthRadius2 === void 0 ? defaultEarthRadius : earthRadius2;
        }
        return defaultEarthRadius;
      }
      function getDirection(options) {
        if (isObjectNotArray(options) && options.rightHandRule) {
          return -1;
        }
        return 1;
      }
      function getBearing(options) {
        if (isUndefinedOrNull(options)) {
          return 0;
        } else if (isObjectNotArray(options)) {
          var bearing = options.bearing;
          return bearing === void 0 ? 0 : bearing;
        }
        return 0;
      }
      function isObjectNotArray(argument) {
        return argument !== null && _typeof(argument) === "object" && !Array.isArray(argument);
      }
      function isUndefinedOrNull(argument) {
        return argument === null || argument === void 0;
      }
    }
  });

  // node_modules/polygon-clipping/dist/polygon-clipping.umd.js
  var require_polygon_clipping_umd = __commonJS({
    "node_modules/polygon-clipping/dist/polygon-clipping.umd.js": function(exports2, module2) {
      init_typeof();
      (function(global3, factory) {
        (typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, global3.polygonClipping = factory());
      })(void 0, function() {
        "use strict";
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties2(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties2(Constructor, staticProps);
          return Constructor;
        }
        var Node = function() {
          function Node2(key, data2) {
            this.next = null;
            this.key = key;
            this.data = data2;
            this.left = null;
            this.right = null;
          }
          return Node2;
        }();
        function DEFAULT_COMPARE(a, b2) {
          return a > b2 ? 1 : a < b2 ? -1 : 0;
        }
        function splay(i2, t, comparator) {
          var N = new Node(null, null);
          var l = N;
          var r = N;
          while (true) {
            var cmp2 = comparator(i2, t.key);
            if (cmp2 < 0) {
              if (t.left === null)
                break;
              if (comparator(i2, t.left.key) < 0) {
                var y = t.left;
                t.left = y.right;
                y.right = t;
                t = y;
                if (t.left === null)
                  break;
              }
              r.left = t;
              r = t;
              t = t.left;
            } else if (cmp2 > 0) {
              if (t.right === null)
                break;
              if (comparator(i2, t.right.key) > 0) {
                var y = t.right;
                t.right = y.left;
                y.left = t;
                t = y;
                if (t.right === null)
                  break;
              }
              l.right = t;
              l = t;
              t = t.right;
            } else
              break;
          }
          l.right = t.left;
          r.left = t.right;
          t.left = N.right;
          t.right = N.left;
          return t;
        }
        function insert(i2, data2, t, comparator) {
          var node = new Node(i2, data2);
          if (t === null) {
            node.left = node.right = null;
            return node;
          }
          t = splay(i2, t, comparator);
          var cmp2 = comparator(i2, t.key);
          if (cmp2 < 0) {
            node.left = t.left;
            node.right = t;
            t.left = null;
          } else if (cmp2 >= 0) {
            node.right = t.right;
            node.left = t;
            t.right = null;
          }
          return node;
        }
        function split(key, v, comparator) {
          var left = null;
          var right = null;
          if (v) {
            v = splay(key, v, comparator);
            var cmp2 = comparator(v.key, key);
            if (cmp2 === 0) {
              left = v.left;
              right = v.right;
            } else if (cmp2 < 0) {
              right = v.right;
              v.right = null;
              left = v;
            } else {
              left = v.left;
              v.left = null;
              right = v;
            }
          }
          return {
            left: left,
            right: right
          };
        }
        function merge3(left, right, comparator) {
          if (right === null)
            return left;
          if (left === null)
            return right;
          right = splay(left.key, right, comparator);
          right.left = left;
          return right;
        }
        function printRow(root3, prefix, isTail, out, printNode) {
          if (root3) {
            out("" + prefix + (isTail ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ") + printNode(root3) + "\n");
            var indent = prefix + (isTail ? "    " : "\u2502   ");
            if (root3.left)
              printRow(root3.left, indent, false, out, printNode);
            if (root3.right)
              printRow(root3.right, indent, true, out, printNode);
          }
        }
        var Tree = function() {
          function Tree2(comparator) {
            if (comparator === void 0) {
              comparator = DEFAULT_COMPARE;
            }
            this._root = null;
            this._size = 0;
            this._comparator = comparator;
          }
          Tree2.prototype.insert = function(key, data2) {
            this._size++;
            return this._root = insert(key, data2, this._root, this._comparator);
          };
          Tree2.prototype.add = function(key, data2) {
            var node = new Node(key, data2);
            if (this._root === null) {
              node.left = node.right = null;
              this._size++;
              this._root = node;
            }
            var comparator = this._comparator;
            var t = splay(key, this._root, comparator);
            var cmp2 = comparator(key, t.key);
            if (cmp2 === 0)
              this._root = t;
            else {
              if (cmp2 < 0) {
                node.left = t.left;
                node.right = t;
                t.left = null;
              } else if (cmp2 > 0) {
                node.right = t.right;
                node.left = t;
                t.right = null;
              }
              this._size++;
              this._root = node;
            }
            return this._root;
          };
          Tree2.prototype.remove = function(key) {
            this._root = this._remove(key, this._root, this._comparator);
          };
          Tree2.prototype._remove = function(i2, t, comparator) {
            var x2;
            if (t === null)
              return null;
            t = splay(i2, t, comparator);
            var cmp2 = comparator(i2, t.key);
            if (cmp2 === 0) {
              if (t.left === null) {
                x2 = t.right;
              } else {
                x2 = splay(i2, t.left, comparator);
                x2.right = t.right;
              }
              this._size--;
              return x2;
            }
            return t;
          };
          Tree2.prototype.pop = function() {
            var node = this._root;
            if (node) {
              while (node.left) {
                node = node.left;
              }
              this._root = splay(node.key, this._root, this._comparator);
              this._root = this._remove(node.key, this._root, this._comparator);
              return {
                key: node.key,
                data: node.data
              };
            }
            return null;
          };
          Tree2.prototype.findStatic = function(key) {
            var current = this._root;
            var compare = this._comparator;
            while (current) {
              var cmp2 = compare(key, current.key);
              if (cmp2 === 0)
                return current;
              else if (cmp2 < 0)
                current = current.left;
              else
                current = current.right;
            }
            return null;
          };
          Tree2.prototype.find = function(key) {
            if (this._root) {
              this._root = splay(key, this._root, this._comparator);
              if (this._comparator(key, this._root.key) !== 0)
                return null;
            }
            return this._root;
          };
          Tree2.prototype.contains = function(key) {
            var current = this._root;
            var compare = this._comparator;
            while (current) {
              var cmp2 = compare(key, current.key);
              if (cmp2 === 0)
                return true;
              else if (cmp2 < 0)
                current = current.left;
              else
                current = current.right;
            }
            return false;
          };
          Tree2.prototype.forEach = function(visitor, ctx) {
            var current = this._root;
            var Q = [];
            var done = false;
            while (!done) {
              if (current !== null) {
                Q.push(current);
                current = current.left;
              } else {
                if (Q.length !== 0) {
                  current = Q.pop();
                  visitor.call(ctx, current);
                  current = current.right;
                } else
                  done = true;
              }
            }
            return this;
          };
          Tree2.prototype.range = function(low, high, fn, ctx) {
            var Q = [];
            var compare = this._comparator;
            var node = this._root;
            var cmp2;
            while (Q.length !== 0 || node) {
              if (node) {
                Q.push(node);
                node = node.left;
              } else {
                node = Q.pop();
                cmp2 = compare(node.key, high);
                if (cmp2 > 0) {
                  break;
                } else if (compare(node.key, low) >= 0) {
                  if (fn.call(ctx, node))
                    return this;
                }
                node = node.right;
              }
            }
            return this;
          };
          Tree2.prototype.keys = function() {
            var keys3 = [];
            this.forEach(function(_a) {
              var key = _a.key;
              return keys3.push(key);
            });
            return keys3;
          };
          Tree2.prototype.values = function() {
            var values2 = [];
            this.forEach(function(_a) {
              var data2 = _a.data;
              return values2.push(data2);
            });
            return values2;
          };
          Tree2.prototype.min = function() {
            if (this._root)
              return this.minNode(this._root).key;
            return null;
          };
          Tree2.prototype.max = function() {
            if (this._root)
              return this.maxNode(this._root).key;
            return null;
          };
          Tree2.prototype.minNode = function(t) {
            if (t === void 0) {
              t = this._root;
            }
            if (t)
              while (t.left) {
                t = t.left;
              }
            return t;
          };
          Tree2.prototype.maxNode = function(t) {
            if (t === void 0) {
              t = this._root;
            }
            if (t)
              while (t.right) {
                t = t.right;
              }
            return t;
          };
          Tree2.prototype.at = function(index2) {
            var current = this._root;
            var done = false;
            var i2 = 0;
            var Q = [];
            while (!done) {
              if (current) {
                Q.push(current);
                current = current.left;
              } else {
                if (Q.length > 0) {
                  current = Q.pop();
                  if (i2 === index2)
                    return current;
                  i2++;
                  current = current.right;
                } else
                  done = true;
              }
            }
            return null;
          };
          Tree2.prototype.next = function(d) {
            var root3 = this._root;
            var successor = null;
            if (d.right) {
              successor = d.right;
              while (successor.left) {
                successor = successor.left;
              }
              return successor;
            }
            var comparator = this._comparator;
            while (root3) {
              var cmp2 = comparator(d.key, root3.key);
              if (cmp2 === 0)
                break;
              else if (cmp2 < 0) {
                successor = root3;
                root3 = root3.left;
              } else
                root3 = root3.right;
            }
            return successor;
          };
          Tree2.prototype.prev = function(d) {
            var root3 = this._root;
            var predecessor = null;
            if (d.left !== null) {
              predecessor = d.left;
              while (predecessor.right) {
                predecessor = predecessor.right;
              }
              return predecessor;
            }
            var comparator = this._comparator;
            while (root3) {
              var cmp2 = comparator(d.key, root3.key);
              if (cmp2 === 0)
                break;
              else if (cmp2 < 0)
                root3 = root3.left;
              else {
                predecessor = root3;
                root3 = root3.right;
              }
            }
            return predecessor;
          };
          Tree2.prototype.clear = function() {
            this._root = null;
            this._size = 0;
            return this;
          };
          Tree2.prototype.toList = function() {
            return toList(this._root);
          };
          Tree2.prototype.load = function(keys3, values2, presort) {
            if (values2 === void 0) {
              values2 = [];
            }
            if (presort === void 0) {
              presort = false;
            }
            var size = keys3.length;
            var comparator = this._comparator;
            if (presort)
              sort(keys3, values2, 0, size - 1, comparator);
            if (this._root === null) {
              this._root = loadRecursive(keys3, values2, 0, size);
              this._size = size;
            } else {
              var mergedList = mergeLists(this.toList(), createList(keys3, values2), comparator);
              size = this._size + size;
              this._root = sortedListToBST({
                head: mergedList
              }, 0, size);
            }
            return this;
          };
          Tree2.prototype.isEmpty = function() {
            return this._root === null;
          };
          Object.defineProperty(Tree2.prototype, "size", {
            get: function get3() {
              return this._size;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Tree2.prototype, "root", {
            get: function get3() {
              return this._root;
            },
            enumerable: true,
            configurable: true
          });
          Tree2.prototype.toString = function(printNode) {
            if (printNode === void 0) {
              printNode = function printNode2(n2) {
                return String(n2.key);
              };
            }
            var out = [];
            printRow(this._root, "", true, function(v) {
              return out.push(v);
            }, printNode);
            return out.join("");
          };
          Tree2.prototype.update = function(key, newKey, newData) {
            var comparator = this._comparator;
            var _a = split(key, this._root, comparator), left = _a.left, right = _a.right;
            if (comparator(key, newKey) < 0) {
              right = insert(newKey, newData, right, comparator);
            } else {
              left = insert(newKey, newData, left, comparator);
            }
            this._root = merge3(left, right, comparator);
          };
          Tree2.prototype.split = function(key) {
            return split(key, this._root, this._comparator);
          };
          return Tree2;
        }();
        function loadRecursive(keys3, values2, start2, end) {
          var size = end - start2;
          if (size > 0) {
            var middle = start2 + Math.floor(size / 2);
            var key = keys3[middle];
            var data2 = values2[middle];
            var node = new Node(key, data2);
            node.left = loadRecursive(keys3, values2, start2, middle);
            node.right = loadRecursive(keys3, values2, middle + 1, end);
            return node;
          }
          return null;
        }
        function createList(keys3, values2) {
          var head = new Node(null, null);
          var p2 = head;
          for (var i2 = 0; i2 < keys3.length; i2++) {
            p2 = p2.next = new Node(keys3[i2], values2[i2]);
          }
          p2.next = null;
          return head.next;
        }
        function toList(root3) {
          var current = root3;
          var Q = [];
          var done = false;
          var head = new Node(null, null);
          var p2 = head;
          while (!done) {
            if (current) {
              Q.push(current);
              current = current.left;
            } else {
              if (Q.length > 0) {
                current = p2 = p2.next = Q.pop();
                current = current.right;
              } else
                done = true;
            }
          }
          p2.next = null;
          return head.next;
        }
        function sortedListToBST(list, start2, end) {
          var size = end - start2;
          if (size > 0) {
            var middle = start2 + Math.floor(size / 2);
            var left = sortedListToBST(list, start2, middle);
            var root3 = list.head;
            root3.left = left;
            list.head = list.head.next;
            root3.right = sortedListToBST(list, middle + 1, end);
            return root3;
          }
          return null;
        }
        function mergeLists(l1, l2, compare) {
          var head = new Node(null, null);
          var p2 = head;
          var p1 = l1;
          var p22 = l2;
          while (p1 !== null && p22 !== null) {
            if (compare(p1.key, p22.key) < 0) {
              p2.next = p1;
              p1 = p1.next;
            } else {
              p2.next = p22;
              p22 = p22.next;
            }
            p2 = p2.next;
          }
          if (p1 !== null) {
            p2.next = p1;
          } else if (p22 !== null) {
            p2.next = p22;
          }
          return head.next;
        }
        function sort(keys3, values2, left, right, compare) {
          if (left >= right)
            return;
          var pivot = keys3[left + right >> 1];
          var i2 = left - 1;
          var j = right + 1;
          while (true) {
            do {
              i2++;
            } while (compare(keys3[i2], pivot) < 0);
            do {
              j--;
            } while (compare(keys3[j], pivot) > 0);
            if (i2 >= j)
              break;
            var tmp = keys3[i2];
            keys3[i2] = keys3[j];
            keys3[j] = tmp;
            tmp = values2[i2];
            values2[i2] = values2[j];
            values2[j] = tmp;
          }
          sort(keys3, values2, left, j, compare);
          sort(keys3, values2, j + 1, right, compare);
        }
        var isInBbox = function isInBbox2(bbox, point5) {
          return bbox.ll.x <= point5.x && point5.x <= bbox.ur.x && bbox.ll.y <= point5.y && point5.y <= bbox.ur.y;
        };
        var getBboxOverlap = function getBboxOverlap2(b1, b2) {
          if (b2.ur.x < b1.ll.x || b1.ur.x < b2.ll.x || b2.ur.y < b1.ll.y || b1.ur.y < b2.ll.y)
            return null;
          var lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;
          var upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x;
          var lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;
          var upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y;
          return {
            ll: {
              x: lowerX,
              y: lowerY
            },
            ur: {
              x: upperX,
              y: upperY
            }
          };
        };
        var epsilon3 = Number.EPSILON;
        if (epsilon3 === void 0)
          epsilon3 = Math.pow(2, -52);
        var EPSILON_SQ = epsilon3 * epsilon3;
        var cmp = function cmp2(a, b2) {
          if (-epsilon3 < a && a < epsilon3) {
            if (-epsilon3 < b2 && b2 < epsilon3) {
              return 0;
            }
          }
          var ab = a - b2;
          if (ab * ab < EPSILON_SQ * a * b2) {
            return 0;
          }
          return a < b2 ? -1 : 1;
        };
        var PtRounder = /* @__PURE__ */ function() {
          function PtRounder2() {
            _classCallCheck2(this, PtRounder2);
            this.reset();
          }
          _createClass2(PtRounder2, [{
            key: "reset",
            value: function reset17() {
              this.xRounder = new CoordRounder();
              this.yRounder = new CoordRounder();
            }
          }, {
            key: "round",
            value: function round(x2, y) {
              return {
                x: this.xRounder.round(x2),
                y: this.yRounder.round(y)
              };
            }
          }]);
          return PtRounder2;
        }();
        var CoordRounder = /* @__PURE__ */ function() {
          function CoordRounder2() {
            _classCallCheck2(this, CoordRounder2);
            this.tree = new Tree();
            this.round(0);
          }
          _createClass2(CoordRounder2, [{
            key: "round",
            value: function round(coord) {
              var node = this.tree.add(coord);
              var prevNode = this.tree.prev(node);
              if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {
                this.tree.remove(coord);
                return prevNode.key;
              }
              var nextNode = this.tree.next(node);
              if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {
                this.tree.remove(coord);
                return nextNode.key;
              }
              return coord;
            }
          }]);
          return CoordRounder2;
        }();
        var rounder = new PtRounder();
        var crossProduct = function crossProduct2(a, b2) {
          return a.x * b2.y - a.y * b2.x;
        };
        var dotProduct = function dotProduct2(a, b2) {
          return a.x * b2.x + a.y * b2.y;
        };
        var compareVectorAngles = function compareVectorAngles2(basePt, endPt1, endPt2) {
          var v1 = {
            x: endPt1.x - basePt.x,
            y: endPt1.y - basePt.y
          };
          var v2 = {
            x: endPt2.x - basePt.x,
            y: endPt2.y - basePt.y
          };
          var kross = crossProduct(v1, v2);
          return cmp(kross, 0);
        };
        var length = function length2(v) {
          return Math.sqrt(dotProduct(v, v));
        };
        var sineOfAngle = function sineOfAngle2(pShared, pBase, pAngle) {
          var vBase = {
            x: pBase.x - pShared.x,
            y: pBase.y - pShared.y
          };
          var vAngle = {
            x: pAngle.x - pShared.x,
            y: pAngle.y - pShared.y
          };
          return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase);
        };
        var cosineOfAngle = function cosineOfAngle2(pShared, pBase, pAngle) {
          var vBase = {
            x: pBase.x - pShared.x,
            y: pBase.y - pShared.y
          };
          var vAngle = {
            x: pAngle.x - pShared.x,
            y: pAngle.y - pShared.y
          };
          return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase);
        };
        var horizontalIntersection = function horizontalIntersection2(pt, v, y) {
          if (v.y === 0)
            return null;
          return {
            x: pt.x + v.x / v.y * (y - pt.y),
            y: y
          };
        };
        var verticalIntersection = function verticalIntersection2(pt, v, x2) {
          if (v.x === 0)
            return null;
          return {
            x: x2,
            y: pt.y + v.y / v.x * (x2 - pt.x)
          };
        };
        var intersection = function intersection2(pt1, v1, pt2, v2) {
          if (v1.x === 0)
            return verticalIntersection(pt2, v2, pt1.x);
          if (v2.x === 0)
            return verticalIntersection(pt1, v1, pt2.x);
          if (v1.y === 0)
            return horizontalIntersection(pt2, v2, pt1.y);
          if (v2.y === 0)
            return horizontalIntersection(pt1, v1, pt2.y);
          var kross = crossProduct(v1, v2);
          if (kross == 0)
            return null;
          var ve = {
            x: pt2.x - pt1.x,
            y: pt2.y - pt1.y
          };
          var d1 = crossProduct(ve, v1) / kross;
          var d2 = crossProduct(ve, v2) / kross;
          var x12 = pt1.x + d2 * v1.x, x2 = pt2.x + d1 * v2.x;
          var y12 = pt1.y + d2 * v1.y, y2 = pt2.y + d1 * v2.y;
          var x3 = (x12 + x2) / 2;
          var y = (y12 + y2) / 2;
          return {
            x: x3,
            y: y
          };
        };
        var SweepEvent = /* @__PURE__ */ function() {
          _createClass2(SweepEvent2, null, [{
            key: "compare",
            value: function compare(a, b2) {
              var ptCmp = SweepEvent2.comparePoints(a.point, b2.point);
              if (ptCmp !== 0)
                return ptCmp;
              if (a.point !== b2.point)
                a.link(b2);
              if (a.isLeft !== b2.isLeft)
                return a.isLeft ? 1 : -1;
              return Segment.compare(a.segment, b2.segment);
            }
          }, {
            key: "comparePoints",
            value: function comparePoints(aPt, bPt) {
              if (aPt.x < bPt.x)
                return -1;
              if (aPt.x > bPt.x)
                return 1;
              if (aPt.y < bPt.y)
                return -1;
              if (aPt.y > bPt.y)
                return 1;
              return 0;
            }
          }]);
          function SweepEvent2(point5, isLeft) {
            _classCallCheck2(this, SweepEvent2);
            if (point5.events === void 0)
              point5.events = [this];
            else
              point5.events.push(this);
            this.point = point5;
            this.isLeft = isLeft;
          }
          _createClass2(SweepEvent2, [{
            key: "link",
            value: function link2(other) {
              if (other.point === this.point) {
                throw new Error("Tried to link already linked events");
              }
              var otherEvents = other.point.events;
              for (var i2 = 0, iMax = otherEvents.length; i2 < iMax; i2++) {
                var evt = otherEvents[i2];
                this.point.events.push(evt);
                evt.point = this.point;
              }
              this.checkForConsuming();
            }
          }, {
            key: "checkForConsuming",
            value: function checkForConsuming() {
              var numEvents = this.point.events.length;
              for (var i2 = 0; i2 < numEvents; i2++) {
                var evt1 = this.point.events[i2];
                if (evt1.segment.consumedBy !== void 0)
                  continue;
                for (var j = i2 + 1; j < numEvents; j++) {
                  var evt2 = this.point.events[j];
                  if (evt2.consumedBy !== void 0)
                    continue;
                  if (evt1.otherSE.point.events !== evt2.otherSE.point.events)
                    continue;
                  evt1.segment.consume(evt2.segment);
                }
              }
            }
          }, {
            key: "getAvailableLinkedEvents",
            value: function getAvailableLinkedEvents() {
              var events = [];
              for (var i2 = 0, iMax = this.point.events.length; i2 < iMax; i2++) {
                var evt = this.point.events[i2];
                if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {
                  events.push(evt);
                }
              }
              return events;
            }
          }, {
            key: "getLeftmostComparator",
            value: function getLeftmostComparator(baseEvent) {
              var _this = this;
              var cache7 = new Map();
              var fillCache = function fillCache2(linkedEvent) {
                var nextEvent = linkedEvent.otherSE;
                cache7.set(linkedEvent, {
                  sine: sineOfAngle(_this.point, baseEvent.point, nextEvent.point),
                  cosine: cosineOfAngle(_this.point, baseEvent.point, nextEvent.point)
                });
              };
              return function(a, b2) {
                if (!cache7.has(a))
                  fillCache(a);
                if (!cache7.has(b2))
                  fillCache(b2);
                var _cache$get = cache7.get(a), asine = _cache$get.sine, acosine = _cache$get.cosine;
                var _cache$get2 = cache7.get(b2), bsine = _cache$get2.sine, bcosine = _cache$get2.cosine;
                if (asine >= 0 && bsine >= 0) {
                  if (acosine < bcosine)
                    return 1;
                  if (acosine > bcosine)
                    return -1;
                  return 0;
                }
                if (asine < 0 && bsine < 0) {
                  if (acosine < bcosine)
                    return -1;
                  if (acosine > bcosine)
                    return 1;
                  return 0;
                }
                if (bsine < asine)
                  return -1;
                if (bsine > asine)
                  return 1;
                return 0;
              };
            }
          }]);
          return SweepEvent2;
        }();
        var segmentId = 0;
        var Segment = /* @__PURE__ */ function() {
          _createClass2(Segment2, null, [{
            key: "compare",
            value: function compare(a, b2) {
              var alx = a.leftSE.point.x;
              var blx = b2.leftSE.point.x;
              var arx = a.rightSE.point.x;
              var brx = b2.rightSE.point.x;
              if (brx < alx)
                return 1;
              if (arx < blx)
                return -1;
              var aly = a.leftSE.point.y;
              var bly = b2.leftSE.point.y;
              var ary = a.rightSE.point.y;
              var bry = b2.rightSE.point.y;
              if (alx < blx) {
                if (bly < aly && bly < ary)
                  return 1;
                if (bly > aly && bly > ary)
                  return -1;
                var aCmpBLeft = a.comparePoint(b2.leftSE.point);
                if (aCmpBLeft < 0)
                  return 1;
                if (aCmpBLeft > 0)
                  return -1;
                var bCmpARight = b2.comparePoint(a.rightSE.point);
                if (bCmpARight !== 0)
                  return bCmpARight;
                return -1;
              }
              if (alx > blx) {
                if (aly < bly && aly < bry)
                  return -1;
                if (aly > bly && aly > bry)
                  return 1;
                var bCmpALeft = b2.comparePoint(a.leftSE.point);
                if (bCmpALeft !== 0)
                  return bCmpALeft;
                var aCmpBRight = a.comparePoint(b2.rightSE.point);
                if (aCmpBRight < 0)
                  return 1;
                if (aCmpBRight > 0)
                  return -1;
                return 1;
              }
              if (aly < bly)
                return -1;
              if (aly > bly)
                return 1;
              if (arx < brx) {
                var _bCmpARight = b2.comparePoint(a.rightSE.point);
                if (_bCmpARight !== 0)
                  return _bCmpARight;
              }
              if (arx > brx) {
                var _aCmpBRight = a.comparePoint(b2.rightSE.point);
                if (_aCmpBRight < 0)
                  return 1;
                if (_aCmpBRight > 0)
                  return -1;
              }
              if (arx !== brx) {
                var ay = ary - aly;
                var ax = arx - alx;
                var by = bry - bly;
                var bx = brx - blx;
                if (ay > ax && by < bx)
                  return 1;
                if (ay < ax && by > bx)
                  return -1;
              }
              if (arx > brx)
                return 1;
              if (arx < brx)
                return -1;
              if (ary < bry)
                return -1;
              if (ary > bry)
                return 1;
              if (a.id < b2.id)
                return -1;
              if (a.id > b2.id)
                return 1;
              return 0;
            }
          }]);
          function Segment2(leftSE, rightSE, rings, windings) {
            _classCallCheck2(this, Segment2);
            this.id = ++segmentId;
            this.leftSE = leftSE;
            leftSE.segment = this;
            leftSE.otherSE = rightSE;
            this.rightSE = rightSE;
            rightSE.segment = this;
            rightSE.otherSE = leftSE;
            this.rings = rings;
            this.windings = windings;
          }
          _createClass2(Segment2, [{
            key: "replaceRightSE",
            value: function replaceRightSE(newRightSE) {
              this.rightSE = newRightSE;
              this.rightSE.segment = this;
              this.rightSE.otherSE = this.leftSE;
              this.leftSE.otherSE = this.rightSE;
            }
          }, {
            key: "bbox",
            value: function bbox() {
              var y12 = this.leftSE.point.y;
              var y2 = this.rightSE.point.y;
              return {
                ll: {
                  x: this.leftSE.point.x,
                  y: y12 < y2 ? y12 : y2
                },
                ur: {
                  x: this.rightSE.point.x,
                  y: y12 > y2 ? y12 : y2
                }
              };
            }
          }, {
            key: "vector",
            value: function vector() {
              return {
                x: this.rightSE.point.x - this.leftSE.point.x,
                y: this.rightSE.point.y - this.leftSE.point.y
              };
            }
          }, {
            key: "isAnEndpoint",
            value: function isAnEndpoint(pt) {
              return pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y || pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y;
            }
          }, {
            key: "comparePoint",
            value: function comparePoint(point5) {
              if (this.isAnEndpoint(point5))
                return 0;
              var lPt = this.leftSE.point;
              var rPt = this.rightSE.point;
              var v = this.vector();
              if (lPt.x === rPt.x) {
                if (point5.x === lPt.x)
                  return 0;
                return point5.x < lPt.x ? 1 : -1;
              }
              var yDist = (point5.y - lPt.y) / v.y;
              var xFromYDist = lPt.x + yDist * v.x;
              if (point5.x === xFromYDist)
                return 0;
              var xDist = (point5.x - lPt.x) / v.x;
              var yFromXDist = lPt.y + xDist * v.y;
              if (point5.y === yFromXDist)
                return 0;
              return point5.y < yFromXDist ? -1 : 1;
            }
          }, {
            key: "getIntersection",
            value: function getIntersection(other) {
              var tBbox = this.bbox();
              var oBbox = other.bbox();
              var bboxOverlap = getBboxOverlap(tBbox, oBbox);
              if (bboxOverlap === null)
                return null;
              var tlp = this.leftSE.point;
              var trp = this.rightSE.point;
              var olp = other.leftSE.point;
              var orp = other.rightSE.point;
              var touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0;
              var touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0;
              var touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0;
              var touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0;
              if (touchesThisLSE && touchesOtherLSE) {
                if (touchesThisRSE && !touchesOtherRSE)
                  return trp;
                if (!touchesThisRSE && touchesOtherRSE)
                  return orp;
                return null;
              }
              if (touchesThisLSE) {
                if (touchesOtherRSE) {
                  if (tlp.x === orp.x && tlp.y === orp.y)
                    return null;
                }
                return tlp;
              }
              if (touchesOtherLSE) {
                if (touchesThisRSE) {
                  if (trp.x === olp.x && trp.y === olp.y)
                    return null;
                }
                return olp;
              }
              if (touchesThisRSE && touchesOtherRSE)
                return null;
              if (touchesThisRSE)
                return trp;
              if (touchesOtherRSE)
                return orp;
              var pt = intersection(tlp, this.vector(), olp, other.vector());
              if (pt === null)
                return null;
              if (!isInBbox(bboxOverlap, pt))
                return null;
              return rounder.round(pt.x, pt.y);
            }
          }, {
            key: "split",
            value: function split2(point5) {
              var newEvents = [];
              var alreadyLinked = point5.events !== void 0;
              var newLeftSE = new SweepEvent(point5, true);
              var newRightSE = new SweepEvent(point5, false);
              var oldRightSE = this.rightSE;
              this.replaceRightSE(newRightSE);
              newEvents.push(newRightSE);
              newEvents.push(newLeftSE);
              var newSeg = new Segment2(newLeftSE, oldRightSE, this.rings.slice(), this.windings.slice());
              if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {
                newSeg.swapEvents();
              }
              if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {
                this.swapEvents();
              }
              if (alreadyLinked) {
                newLeftSE.checkForConsuming();
                newRightSE.checkForConsuming();
              }
              return newEvents;
            }
          }, {
            key: "swapEvents",
            value: function swapEvents() {
              var tmpEvt = this.rightSE;
              this.rightSE = this.leftSE;
              this.leftSE = tmpEvt;
              this.leftSE.isLeft = true;
              this.rightSE.isLeft = false;
              for (var i2 = 0, iMax = this.windings.length; i2 < iMax; i2++) {
                this.windings[i2] *= -1;
              }
            }
          }, {
            key: "consume",
            value: function consume(other) {
              var consumer = this;
              var consumee = other;
              while (consumer.consumedBy) {
                consumer = consumer.consumedBy;
              }
              while (consumee.consumedBy) {
                consumee = consumee.consumedBy;
              }
              var cmp2 = Segment2.compare(consumer, consumee);
              if (cmp2 === 0)
                return;
              if (cmp2 > 0) {
                var tmp = consumer;
                consumer = consumee;
                consumee = tmp;
              }
              if (consumer.prev === consumee) {
                var _tmp = consumer;
                consumer = consumee;
                consumee = _tmp;
              }
              for (var i2 = 0, iMax = consumee.rings.length; i2 < iMax; i2++) {
                var ring = consumee.rings[i2];
                var winding = consumee.windings[i2];
                var index2 = consumer.rings.indexOf(ring);
                if (index2 === -1) {
                  consumer.rings.push(ring);
                  consumer.windings.push(winding);
                } else
                  consumer.windings[index2] += winding;
              }
              consumee.rings = null;
              consumee.windings = null;
              consumee.consumedBy = consumer;
              consumee.leftSE.consumedBy = consumer.leftSE;
              consumee.rightSE.consumedBy = consumer.rightSE;
            }
          }, {
            key: "prevInResult",
            value: function prevInResult() {
              if (this._prevInResult !== void 0)
                return this._prevInResult;
              if (!this.prev)
                this._prevInResult = null;
              else if (this.prev.isInResult())
                this._prevInResult = this.prev;
              else
                this._prevInResult = this.prev.prevInResult();
              return this._prevInResult;
            }
          }, {
            key: "beforeState",
            value: function beforeState() {
              if (this._beforeState !== void 0)
                return this._beforeState;
              if (!this.prev)
                this._beforeState = {
                  rings: [],
                  windings: [],
                  multiPolys: []
                };
              else {
                var seg = this.prev.consumedBy || this.prev;
                this._beforeState = seg.afterState();
              }
              return this._beforeState;
            }
          }, {
            key: "afterState",
            value: function afterState() {
              if (this._afterState !== void 0)
                return this._afterState;
              var beforeState = this.beforeState();
              this._afterState = {
                rings: beforeState.rings.slice(0),
                windings: beforeState.windings.slice(0),
                multiPolys: []
              };
              var ringsAfter = this._afterState.rings;
              var windingsAfter = this._afterState.windings;
              var mpsAfter = this._afterState.multiPolys;
              for (var i2 = 0, iMax = this.rings.length; i2 < iMax; i2++) {
                var ring = this.rings[i2];
                var winding = this.windings[i2];
                var index2 = ringsAfter.indexOf(ring);
                if (index2 === -1) {
                  ringsAfter.push(ring);
                  windingsAfter.push(winding);
                } else
                  windingsAfter[index2] += winding;
              }
              var polysAfter = [];
              var polysExclude = [];
              for (var _i = 0, _iMax = ringsAfter.length; _i < _iMax; _i++) {
                if (windingsAfter[_i] === 0)
                  continue;
                var _ring = ringsAfter[_i];
                var poly = _ring.poly;
                if (polysExclude.indexOf(poly) !== -1)
                  continue;
                if (_ring.isExterior)
                  polysAfter.push(poly);
                else {
                  if (polysExclude.indexOf(poly) === -1)
                    polysExclude.push(poly);
                  var _index = polysAfter.indexOf(_ring.poly);
                  if (_index !== -1)
                    polysAfter.splice(_index, 1);
                }
              }
              for (var _i2 = 0, _iMax2 = polysAfter.length; _i2 < _iMax2; _i2++) {
                var mp = polysAfter[_i2].multiPoly;
                if (mpsAfter.indexOf(mp) === -1)
                  mpsAfter.push(mp);
              }
              return this._afterState;
            }
          }, {
            key: "isInResult",
            value: function isInResult() {
              if (this.consumedBy)
                return false;
              if (this._isInResult !== void 0)
                return this._isInResult;
              var mpsBefore = this.beforeState().multiPolys;
              var mpsAfter = this.afterState().multiPolys;
              switch (operation.type) {
                case "union": {
                  var noBefores = mpsBefore.length === 0;
                  var noAfters = mpsAfter.length === 0;
                  this._isInResult = noBefores !== noAfters;
                  break;
                }
                case "intersection": {
                  var least;
                  var most;
                  if (mpsBefore.length < mpsAfter.length) {
                    least = mpsBefore.length;
                    most = mpsAfter.length;
                  } else {
                    least = mpsAfter.length;
                    most = mpsBefore.length;
                  }
                  this._isInResult = most === operation.numMultiPolys && least < most;
                  break;
                }
                case "xor": {
                  var diff = Math.abs(mpsBefore.length - mpsAfter.length);
                  this._isInResult = diff % 2 === 1;
                  break;
                }
                case "difference": {
                  var isJustSubject = function isJustSubject2(mps) {
                    return mps.length === 1 && mps[0].isSubject;
                  };
                  this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);
                  break;
                }
                default:
                  throw new Error("Unrecognized operation type found ".concat(operation.type));
              }
              return this._isInResult;
            }
          }], [{
            key: "fromRing",
            value: function fromRing(pt1, pt2, ring) {
              var leftPt, rightPt, winding;
              var cmpPts = SweepEvent.comparePoints(pt1, pt2);
              if (cmpPts < 0) {
                leftPt = pt1;
                rightPt = pt2;
                winding = 1;
              } else if (cmpPts > 0) {
                leftPt = pt2;
                rightPt = pt1;
                winding = -1;
              } else
                throw new Error("Tried to create degenerate segment at [".concat(pt1.x, ", ").concat(pt1.y, "]"));
              var leftSE = new SweepEvent(leftPt, true);
              var rightSE = new SweepEvent(rightPt, false);
              return new Segment2(leftSE, rightSE, [ring], [winding]);
            }
          }]);
          return Segment2;
        }();
        var RingIn = /* @__PURE__ */ function() {
          function RingIn2(geomRing, poly, isExterior) {
            _classCallCheck2(this, RingIn2);
            if (!Array.isArray(geomRing) || geomRing.length === 0) {
              throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
            }
            this.poly = poly;
            this.isExterior = isExterior;
            this.segments = [];
            if (typeof geomRing[0][0] !== "number" || typeof geomRing[0][1] !== "number") {
              throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
            }
            var firstPoint = rounder.round(geomRing[0][0], geomRing[0][1]);
            this.bbox = {
              ll: {
                x: firstPoint.x,
                y: firstPoint.y
              },
              ur: {
                x: firstPoint.x,
                y: firstPoint.y
              }
            };
            var prevPoint = firstPoint;
            for (var i2 = 1, iMax = geomRing.length; i2 < iMax; i2++) {
              if (typeof geomRing[i2][0] !== "number" || typeof geomRing[i2][1] !== "number") {
                throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
              }
              var point5 = rounder.round(geomRing[i2][0], geomRing[i2][1]);
              if (point5.x === prevPoint.x && point5.y === prevPoint.y)
                continue;
              this.segments.push(Segment.fromRing(prevPoint, point5, this));
              if (point5.x < this.bbox.ll.x)
                this.bbox.ll.x = point5.x;
              if (point5.y < this.bbox.ll.y)
                this.bbox.ll.y = point5.y;
              if (point5.x > this.bbox.ur.x)
                this.bbox.ur.x = point5.x;
              if (point5.y > this.bbox.ur.y)
                this.bbox.ur.y = point5.y;
              prevPoint = point5;
            }
            if (firstPoint.x !== prevPoint.x || firstPoint.y !== prevPoint.y) {
              this.segments.push(Segment.fromRing(prevPoint, firstPoint, this));
            }
          }
          _createClass2(RingIn2, [{
            key: "getSweepEvents",
            value: function getSweepEvents() {
              var sweepEvents = [];
              for (var i2 = 0, iMax = this.segments.length; i2 < iMax; i2++) {
                var segment = this.segments[i2];
                sweepEvents.push(segment.leftSE);
                sweepEvents.push(segment.rightSE);
              }
              return sweepEvents;
            }
          }]);
          return RingIn2;
        }();
        var PolyIn = /* @__PURE__ */ function() {
          function PolyIn2(geomPoly, multiPoly) {
            _classCallCheck2(this, PolyIn2);
            if (!Array.isArray(geomPoly)) {
              throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
            }
            this.exteriorRing = new RingIn(geomPoly[0], this, true);
            this.bbox = {
              ll: {
                x: this.exteriorRing.bbox.ll.x,
                y: this.exteriorRing.bbox.ll.y
              },
              ur: {
                x: this.exteriorRing.bbox.ur.x,
                y: this.exteriorRing.bbox.ur.y
              }
            };
            this.interiorRings = [];
            for (var i2 = 1, iMax = geomPoly.length; i2 < iMax; i2++) {
              var ring = new RingIn(geomPoly[i2], this, false);
              if (ring.bbox.ll.x < this.bbox.ll.x)
                this.bbox.ll.x = ring.bbox.ll.x;
              if (ring.bbox.ll.y < this.bbox.ll.y)
                this.bbox.ll.y = ring.bbox.ll.y;
              if (ring.bbox.ur.x > this.bbox.ur.x)
                this.bbox.ur.x = ring.bbox.ur.x;
              if (ring.bbox.ur.y > this.bbox.ur.y)
                this.bbox.ur.y = ring.bbox.ur.y;
              this.interiorRings.push(ring);
            }
            this.multiPoly = multiPoly;
          }
          _createClass2(PolyIn2, [{
            key: "getSweepEvents",
            value: function getSweepEvents() {
              var sweepEvents = this.exteriorRing.getSweepEvents();
              for (var i2 = 0, iMax = this.interiorRings.length; i2 < iMax; i2++) {
                var ringSweepEvents = this.interiorRings[i2].getSweepEvents();
                for (var j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {
                  sweepEvents.push(ringSweepEvents[j]);
                }
              }
              return sweepEvents;
            }
          }]);
          return PolyIn2;
        }();
        var MultiPolyIn = /* @__PURE__ */ function() {
          function MultiPolyIn2(geom, isSubject) {
            _classCallCheck2(this, MultiPolyIn2);
            if (!Array.isArray(geom)) {
              throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
            }
            try {
              if (typeof geom[0][0][0] === "number")
                geom = [geom];
            } catch (ex) {
            }
            this.polys = [];
            this.bbox = {
              ll: {
                x: Number.POSITIVE_INFINITY,
                y: Number.POSITIVE_INFINITY
              },
              ur: {
                x: Number.NEGATIVE_INFINITY,
                y: Number.NEGATIVE_INFINITY
              }
            };
            for (var i2 = 0, iMax = geom.length; i2 < iMax; i2++) {
              var poly = new PolyIn(geom[i2], this);
              if (poly.bbox.ll.x < this.bbox.ll.x)
                this.bbox.ll.x = poly.bbox.ll.x;
              if (poly.bbox.ll.y < this.bbox.ll.y)
                this.bbox.ll.y = poly.bbox.ll.y;
              if (poly.bbox.ur.x > this.bbox.ur.x)
                this.bbox.ur.x = poly.bbox.ur.x;
              if (poly.bbox.ur.y > this.bbox.ur.y)
                this.bbox.ur.y = poly.bbox.ur.y;
              this.polys.push(poly);
            }
            this.isSubject = isSubject;
          }
          _createClass2(MultiPolyIn2, [{
            key: "getSweepEvents",
            value: function getSweepEvents() {
              var sweepEvents = [];
              for (var i2 = 0, iMax = this.polys.length; i2 < iMax; i2++) {
                var polySweepEvents = this.polys[i2].getSweepEvents();
                for (var j = 0, jMax = polySweepEvents.length; j < jMax; j++) {
                  sweepEvents.push(polySweepEvents[j]);
                }
              }
              return sweepEvents;
            }
          }]);
          return MultiPolyIn2;
        }();
        var RingOut = /* @__PURE__ */ function() {
          _createClass2(RingOut2, null, [{
            key: "factory",
            value: function factory(allSegments) {
              var ringsOut = [];
              for (var i2 = 0, iMax = allSegments.length; i2 < iMax; i2++) {
                var segment = allSegments[i2];
                if (!segment.isInResult() || segment.ringOut)
                  continue;
                var prevEvent = null;
                var event = segment.leftSE;
                var nextEvent = segment.rightSE;
                var events = [event];
                var startingPoint = event.point;
                var intersectionLEs = [];
                while (true) {
                  prevEvent = event;
                  event = nextEvent;
                  events.push(event);
                  if (event.point === startingPoint)
                    break;
                  while (true) {
                    var availableLEs = event.getAvailableLinkedEvents();
                    if (availableLEs.length === 0) {
                      var firstPt = events[0].point;
                      var lastPt = events[events.length - 1].point;
                      throw new Error("Unable to complete output ring starting at [".concat(firstPt.x, ",") + " ".concat(firstPt.y, "]. Last matching segment found ends at") + " [".concat(lastPt.x, ", ").concat(lastPt.y, "]."));
                    }
                    if (availableLEs.length === 1) {
                      nextEvent = availableLEs[0].otherSE;
                      break;
                    }
                    var indexLE = null;
                    for (var j = 0, jMax = intersectionLEs.length; j < jMax; j++) {
                      if (intersectionLEs[j].point === event.point) {
                        indexLE = j;
                        break;
                      }
                    }
                    if (indexLE !== null) {
                      var intersectionLE = intersectionLEs.splice(indexLE)[0];
                      var ringEvents = events.splice(intersectionLE.index);
                      ringEvents.unshift(ringEvents[0].otherSE);
                      ringsOut.push(new RingOut2(ringEvents.reverse()));
                      continue;
                    }
                    intersectionLEs.push({
                      index: events.length,
                      point: event.point
                    });
                    var comparator = event.getLeftmostComparator(prevEvent);
                    nextEvent = availableLEs.sort(comparator)[0].otherSE;
                    break;
                  }
                }
                ringsOut.push(new RingOut2(events));
              }
              return ringsOut;
            }
          }]);
          function RingOut2(events) {
            _classCallCheck2(this, RingOut2);
            this.events = events;
            for (var i2 = 0, iMax = events.length; i2 < iMax; i2++) {
              events[i2].segment.ringOut = this;
            }
            this.poly = null;
          }
          _createClass2(RingOut2, [{
            key: "getGeom",
            value: function getGeom2() {
              var prevPt = this.events[0].point;
              var points = [prevPt];
              for (var i2 = 1, iMax = this.events.length - 1; i2 < iMax; i2++) {
                var _pt = this.events[i2].point;
                var _nextPt = this.events[i2 + 1].point;
                if (compareVectorAngles(_pt, prevPt, _nextPt) === 0)
                  continue;
                points.push(_pt);
                prevPt = _pt;
              }
              if (points.length === 1)
                return null;
              var pt = points[0];
              var nextPt = points[1];
              if (compareVectorAngles(pt, prevPt, nextPt) === 0)
                points.shift();
              points.push(points[0]);
              var step = this.isExteriorRing() ? 1 : -1;
              var iStart = this.isExteriorRing() ? 0 : points.length - 1;
              var iEnd = this.isExteriorRing() ? points.length : -1;
              var orderedPoints = [];
              for (var _i = iStart; _i != iEnd; _i += step) {
                orderedPoints.push([points[_i].x, points[_i].y]);
              }
              return orderedPoints;
            }
          }, {
            key: "isExteriorRing",
            value: function isExteriorRing() {
              if (this._isExteriorRing === void 0) {
                var enclosing = this.enclosingRing();
                this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;
              }
              return this._isExteriorRing;
            }
          }, {
            key: "enclosingRing",
            value: function enclosingRing() {
              if (this._enclosingRing === void 0) {
                this._enclosingRing = this._calcEnclosingRing();
              }
              return this._enclosingRing;
            }
          }, {
            key: "_calcEnclosingRing",
            value: function _calcEnclosingRing() {
              var leftMostEvt = this.events[0];
              for (var i2 = 1, iMax = this.events.length; i2 < iMax; i2++) {
                var evt = this.events[i2];
                if (SweepEvent.compare(leftMostEvt, evt) > 0)
                  leftMostEvt = evt;
              }
              var prevSeg = leftMostEvt.segment.prevInResult();
              var prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;
              while (true) {
                if (!prevSeg)
                  return null;
                if (!prevPrevSeg)
                  return prevSeg.ringOut;
                if (prevPrevSeg.ringOut !== prevSeg.ringOut) {
                  if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {
                    return prevSeg.ringOut;
                  } else
                    return prevSeg.ringOut.enclosingRing();
                }
                prevSeg = prevPrevSeg.prevInResult();
                prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;
              }
            }
          }]);
          return RingOut2;
        }();
        var PolyOut = /* @__PURE__ */ function() {
          function PolyOut2(exteriorRing) {
            _classCallCheck2(this, PolyOut2);
            this.exteriorRing = exteriorRing;
            exteriorRing.poly = this;
            this.interiorRings = [];
          }
          _createClass2(PolyOut2, [{
            key: "addInterior",
            value: function addInterior(ring) {
              this.interiorRings.push(ring);
              ring.poly = this;
            }
          }, {
            key: "getGeom",
            value: function getGeom2() {
              var geom = [this.exteriorRing.getGeom()];
              if (geom[0] === null)
                return null;
              for (var i2 = 0, iMax = this.interiorRings.length; i2 < iMax; i2++) {
                var ringGeom = this.interiorRings[i2].getGeom();
                if (ringGeom === null)
                  continue;
                geom.push(ringGeom);
              }
              return geom;
            }
          }]);
          return PolyOut2;
        }();
        var MultiPolyOut = /* @__PURE__ */ function() {
          function MultiPolyOut2(rings) {
            _classCallCheck2(this, MultiPolyOut2);
            this.rings = rings;
            this.polys = this._composePolys(rings);
          }
          _createClass2(MultiPolyOut2, [{
            key: "getGeom",
            value: function getGeom2() {
              var geom = [];
              for (var i2 = 0, iMax = this.polys.length; i2 < iMax; i2++) {
                var polyGeom = this.polys[i2].getGeom();
                if (polyGeom === null)
                  continue;
                geom.push(polyGeom);
              }
              return geom;
            }
          }, {
            key: "_composePolys",
            value: function _composePolys(rings) {
              var polys = [];
              for (var i2 = 0, iMax = rings.length; i2 < iMax; i2++) {
                var ring = rings[i2];
                if (ring.poly)
                  continue;
                if (ring.isExteriorRing())
                  polys.push(new PolyOut(ring));
                else {
                  var enclosingRing = ring.enclosingRing();
                  if (!enclosingRing.poly)
                    polys.push(new PolyOut(enclosingRing));
                  enclosingRing.poly.addInterior(ring);
                }
              }
              return polys;
            }
          }]);
          return MultiPolyOut2;
        }();
        var SweepLine = /* @__PURE__ */ function() {
          function SweepLine2(queue) {
            var comparator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Segment.compare;
            _classCallCheck2(this, SweepLine2);
            this.queue = queue;
            this.tree = new Tree(comparator);
            this.segments = [];
          }
          _createClass2(SweepLine2, [{
            key: "process",
            value: function process2(event) {
              var segment = event.segment;
              var newEvents = [];
              if (event.consumedBy) {
                if (event.isLeft)
                  this.queue.remove(event.otherSE);
                else
                  this.tree.remove(segment);
                return newEvents;
              }
              var node = event.isLeft ? this.tree.insert(segment) : this.tree.find(segment);
              if (!node)
                throw new Error("Unable to find segment #".concat(segment.id, " ") + "[".concat(segment.leftSE.point.x, ", ").concat(segment.leftSE.point.y, "] -> ") + "[".concat(segment.rightSE.point.x, ", ").concat(segment.rightSE.point.y, "] ") + "in SweepLine tree. Please submit a bug report.");
              var prevNode = node;
              var nextNode = node;
              var prevSeg = void 0;
              var nextSeg = void 0;
              while (prevSeg === void 0) {
                prevNode = this.tree.prev(prevNode);
                if (prevNode === null)
                  prevSeg = null;
                else if (prevNode.key.consumedBy === void 0)
                  prevSeg = prevNode.key;
              }
              while (nextSeg === void 0) {
                nextNode = this.tree.next(nextNode);
                if (nextNode === null)
                  nextSeg = null;
                else if (nextNode.key.consumedBy === void 0)
                  nextSeg = nextNode.key;
              }
              if (event.isLeft) {
                var prevMySplitter = null;
                if (prevSeg) {
                  var prevInter = prevSeg.getIntersection(segment);
                  if (prevInter !== null) {
                    if (!segment.isAnEndpoint(prevInter))
                      prevMySplitter = prevInter;
                    if (!prevSeg.isAnEndpoint(prevInter)) {
                      var newEventsFromSplit = this._splitSafely(prevSeg, prevInter);
                      for (var i2 = 0, iMax = newEventsFromSplit.length; i2 < iMax; i2++) {
                        newEvents.push(newEventsFromSplit[i2]);
                      }
                    }
                  }
                }
                var nextMySplitter = null;
                if (nextSeg) {
                  var nextInter = nextSeg.getIntersection(segment);
                  if (nextInter !== null) {
                    if (!segment.isAnEndpoint(nextInter))
                      nextMySplitter = nextInter;
                    if (!nextSeg.isAnEndpoint(nextInter)) {
                      var _newEventsFromSplit = this._splitSafely(nextSeg, nextInter);
                      for (var _i = 0, _iMax = _newEventsFromSplit.length; _i < _iMax; _i++) {
                        newEvents.push(_newEventsFromSplit[_i]);
                      }
                    }
                  }
                }
                if (prevMySplitter !== null || nextMySplitter !== null) {
                  var mySplitter = null;
                  if (prevMySplitter === null)
                    mySplitter = nextMySplitter;
                  else if (nextMySplitter === null)
                    mySplitter = prevMySplitter;
                  else {
                    var cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);
                    mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter;
                  }
                  this.queue.remove(segment.rightSE);
                  newEvents.push(segment.rightSE);
                  var _newEventsFromSplit2 = segment.split(mySplitter);
                  for (var _i2 = 0, _iMax2 = _newEventsFromSplit2.length; _i2 < _iMax2; _i2++) {
                    newEvents.push(_newEventsFromSplit2[_i2]);
                  }
                }
                if (newEvents.length > 0) {
                  this.tree.remove(segment);
                  newEvents.push(event);
                } else {
                  this.segments.push(segment);
                  segment.prev = prevSeg;
                }
              } else {
                if (prevSeg && nextSeg) {
                  var inter = prevSeg.getIntersection(nextSeg);
                  if (inter !== null) {
                    if (!prevSeg.isAnEndpoint(inter)) {
                      var _newEventsFromSplit3 = this._splitSafely(prevSeg, inter);
                      for (var _i3 = 0, _iMax3 = _newEventsFromSplit3.length; _i3 < _iMax3; _i3++) {
                        newEvents.push(_newEventsFromSplit3[_i3]);
                      }
                    }
                    if (!nextSeg.isAnEndpoint(inter)) {
                      var _newEventsFromSplit4 = this._splitSafely(nextSeg, inter);
                      for (var _i4 = 0, _iMax4 = _newEventsFromSplit4.length; _i4 < _iMax4; _i4++) {
                        newEvents.push(_newEventsFromSplit4[_i4]);
                      }
                    }
                  }
                }
                this.tree.remove(segment);
              }
              return newEvents;
            }
          }, {
            key: "_splitSafely",
            value: function _splitSafely(seg, pt) {
              this.tree.remove(seg);
              var rightSE = seg.rightSE;
              this.queue.remove(rightSE);
              var newEvents = seg.split(pt);
              newEvents.push(rightSE);
              if (seg.consumedBy === void 0)
                this.tree.insert(seg);
              return newEvents;
            }
          }]);
          return SweepLine2;
        }();
        var POLYGON_CLIPPING_MAX_QUEUE_SIZE = typeof process !== "undefined" && process.env.POLYGON_CLIPPING_MAX_QUEUE_SIZE || 1e6;
        var POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS = typeof process !== "undefined" && process.env.POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS || 1e6;
        var Operation = /* @__PURE__ */ function() {
          function Operation2() {
            _classCallCheck2(this, Operation2);
          }
          _createClass2(Operation2, [{
            key: "run",
            value: function run(type3, geom, moreGeoms) {
              operation.type = type3;
              rounder.reset();
              var multipolys = [new MultiPolyIn(geom, true)];
              for (var i2 = 0, iMax = moreGeoms.length; i2 < iMax; i2++) {
                multipolys.push(new MultiPolyIn(moreGeoms[i2], false));
              }
              operation.numMultiPolys = multipolys.length;
              if (operation.type === "difference") {
                var subject = multipolys[0];
                var _i = 1;
                while (_i < multipolys.length) {
                  if (getBboxOverlap(multipolys[_i].bbox, subject.bbox) !== null)
                    _i++;
                  else
                    multipolys.splice(_i, 1);
                }
              }
              if (operation.type === "intersection") {
                for (var _i2 = 0, _iMax = multipolys.length; _i2 < _iMax; _i2++) {
                  var mpA = multipolys[_i2];
                  for (var j = _i2 + 1, jMax = multipolys.length; j < jMax; j++) {
                    if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null)
                      return [];
                  }
                }
              }
              var queue = new Tree(SweepEvent.compare);
              for (var _i3 = 0, _iMax2 = multipolys.length; _i3 < _iMax2; _i3++) {
                var sweepEvents = multipolys[_i3].getSweepEvents();
                for (var _j = 0, _jMax = sweepEvents.length; _j < _jMax; _j++) {
                  queue.insert(sweepEvents[_j]);
                  if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {
                    throw new Error("Infinite loop when putting segment endpoints in a priority queue (queue size too big). Please file a bug report.");
                  }
                }
              }
              var sweepLine = new SweepLine(queue);
              var prevQueueSize = queue.size;
              var node = queue.pop();
              while (node) {
                var evt = node.key;
                if (queue.size === prevQueueSize) {
                  var seg = evt.segment;
                  throw new Error("Unable to pop() ".concat(evt.isLeft ? "left" : "right", " SweepEvent ") + "[".concat(evt.point.x, ", ").concat(evt.point.y, "] from segment #").concat(seg.id, " ") + "[".concat(seg.leftSE.point.x, ", ").concat(seg.leftSE.point.y, "] -> ") + "[".concat(seg.rightSE.point.x, ", ").concat(seg.rightSE.point.y, "] from queue. ") + "Please file a bug report.");
                }
                if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {
                  throw new Error("Infinite loop when passing sweep line over endpoints (queue size too big). Please file a bug report.");
                }
                if (sweepLine.segments.length > POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) {
                  throw new Error("Infinite loop when passing sweep line over endpoints (too many sweep line segments). Please file a bug report.");
                }
                var newEvents = sweepLine.process(evt);
                for (var _i4 = 0, _iMax3 = newEvents.length; _i4 < _iMax3; _i4++) {
                  var _evt = newEvents[_i4];
                  if (_evt.consumedBy === void 0)
                    queue.insert(_evt);
                }
                prevQueueSize = queue.size;
                node = queue.pop();
              }
              rounder.reset();
              var ringsOut = RingOut.factory(sweepLine.segments);
              var result6 = new MultiPolyOut(ringsOut);
              return result6.getGeom();
            }
          }]);
          return Operation2;
        }();
        var operation = new Operation();
        var union = function union2(geom) {
          for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            moreGeoms[_key - 1] = arguments[_key];
          }
          return operation.run("union", geom, moreGeoms);
        };
        var intersection$1 = function intersection2(geom) {
          for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            moreGeoms[_key2 - 1] = arguments[_key2];
          }
          return operation.run("intersection", geom, moreGeoms);
        };
        var xor = function xor2(geom) {
          for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            moreGeoms[_key3 - 1] = arguments[_key3];
          }
          return operation.run("xor", geom, moreGeoms);
        };
        var difference = function difference2(subjectGeom) {
          for (var _len4 = arguments.length, clippingGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            clippingGeoms[_key4 - 1] = arguments[_key4];
          }
          return operation.run("difference", subjectGeom, clippingGeoms);
        };
        var index = {
          union: union,
          intersection: intersection$1,
          xor: xor,
          difference: difference
        };
        return index;
      });
    }
  });

  // node_modules/geojson-precision/index.js
  var require_geojson_precision = __commonJS({
    "node_modules/geojson-precision/index.js": function(exports2, module2) {
      (function() {
        function parse(t, coordinatePrecision, extrasPrecision) {
          function point5(p2) {
            return p2.map(function(e3, index) {
              if (index < 2) {
                return 1 * e3.toFixed(coordinatePrecision);
              } else {
                return 1 * e3.toFixed(extrasPrecision);
              }
            });
          }
          function multi(l) {
            return l.map(point5);
          }
          function poly(p2) {
            return p2.map(multi);
          }
          function multiPoly(m) {
            return m.map(poly);
          }
          function geometry6(obj) {
            if (!obj) {
              return {};
            }
            switch (obj.type) {
              case "Point":
                obj.coordinates = point5(obj.coordinates);
                return obj;
              case "LineString":
              case "MultiPoint":
                obj.coordinates = multi(obj.coordinates);
                return obj;
              case "Polygon":
              case "MultiLineString":
                obj.coordinates = poly(obj.coordinates);
                return obj;
              case "MultiPolygon":
                obj.coordinates = multiPoly(obj.coordinates);
                return obj;
              case "GeometryCollection":
                obj.geometries = obj.geometries.map(geometry6);
                return obj;
              default:
                return {};
            }
          }
          function feature3(obj) {
            obj.geometry = geometry6(obj.geometry);
            return obj;
          }
          function featureCollection(f2) {
            f2.features = f2.features.map(feature3);
            return f2;
          }
          function geometryCollection(g2) {
            g2.geometries = g2.geometries.map(geometry6);
            return g2;
          }
          if (!t) {
            return t;
          }
          switch (t.type) {
            case "Feature":
              return feature3(t);
            case "GeometryCollection":
              return geometryCollection(t);
            case "FeatureCollection":
              return featureCollection(t);
            case "Point":
            case "LineString":
            case "Polygon":
            case "MultiPoint":
            case "MultiPolygon":
            case "MultiLineString":
              return geometry6(t);
            default:
              return t;
          }
        }
        module2.exports = parse;
        module2.exports.parse = parse;
      })();
    }
  });

  // node_modules/@aitodotai/json-stringify-pretty-compact/index.js
  var require_json_stringify_pretty_compact = __commonJS({
    "node_modules/@aitodotai/json-stringify-pretty-compact/index.js": function(exports2, module2) {
      init_typeof();
      function isObject2(obj) {
        return _typeof(obj) === "object" && obj !== null;
      }
      function forEach(obj, cb) {
        if (Array.isArray(obj)) {
          obj.forEach(cb);
        } else if (isObject2(obj)) {
          Object.keys(obj).forEach(function(key) {
            var val = obj[key];
            cb(val, key);
          });
        }
      }
      function getTreeDepth(obj) {
        var depth = 0;
        if (Array.isArray(obj) || isObject2(obj)) {
          forEach(obj, function(val) {
            if (Array.isArray(val) || isObject2(val)) {
              var tmpDepth = getTreeDepth(val);
              if (tmpDepth > depth) {
                depth = tmpDepth;
              }
            }
          });
          return depth + 1;
        }
        return depth;
      }
      function stringify3(obj, options) {
        options = options || {};
        var indent = JSON.stringify([1], null, get3(options, "indent", 2)).slice(2, -3);
        var addMargin = get3(options, "margins", false);
        var addArrayMargin = get3(options, "arrayMargins", false);
        var addObjectMargin = get3(options, "objectMargins", false);
        var maxLength = indent === "" ? Infinity : get3(options, "maxLength", 80);
        var maxNesting = get3(options, "maxNesting", Infinity);
        return function _stringify(obj2, currentIndent, reserved) {
          if (obj2 && typeof obj2.toJSON === "function") {
            obj2 = obj2.toJSON();
          }
          var string = JSON.stringify(obj2);
          if (string === void 0) {
            return string;
          }
          var length = maxLength - currentIndent.length - reserved;
          var treeDepth = getTreeDepth(obj2);
          if (treeDepth <= maxNesting && string.length <= length) {
            var prettified = prettify(string, {
              addMargin: addMargin,
              addArrayMargin: addArrayMargin,
              addObjectMargin: addObjectMargin
            });
            if (prettified.length <= length) {
              return prettified;
            }
          }
          if (isObject2(obj2)) {
            var nextIndent = currentIndent + indent;
            var items = [];
            var delimiters;
            var comma = function comma2(array2, index2) {
              return index2 === array2.length - 1 ? 0 : 1;
            };
            if (Array.isArray(obj2)) {
              for (var index = 0; index < obj2.length; index++) {
                items.push(_stringify(obj2[index], nextIndent, comma(obj2, index)) || "null");
              }
              delimiters = "[]";
            } else {
              Object.keys(obj2).forEach(function(key, index2, array2) {
                var keyPart = JSON.stringify(key) + ": ";
                var value2 = _stringify(obj2[key], nextIndent, keyPart.length + comma(array2, index2));
                if (value2 !== void 0) {
                  items.push(keyPart + value2);
                }
              });
              delimiters = "{}";
            }
            if (items.length > 0) {
              return [delimiters[0], indent + items.join(",\n" + nextIndent), delimiters[1]].join("\n" + currentIndent);
            }
          }
          return string;
        }(obj, "", 0);
      }
      var stringOrChar = /("(?:[^\\"]|\\.)*")|[:,\][}{]/g;
      function prettify(string, options) {
        options = options || {};
        var tokens = {
          "{": "{",
          "}": "}",
          "[": "[",
          "]": "]",
          ",": ", ",
          ":": ": "
        };
        if (options.addMargin || options.addObjectMargin) {
          tokens["{"] = "{ ";
          tokens["}"] = " }";
        }
        if (options.addMargin || options.addArrayMargin) {
          tokens["["] = "[ ";
          tokens["]"] = " ]";
        }
        return string.replace(stringOrChar, function(match, string2) {
          return string2 ? match : tokens[match];
        });
      }
      function get3(options, name, defaultValue) {
        return name in options ? options[name] : defaultValue;
      }
      module2.exports = stringify3;
    }
  });

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js": function(exports2, module2) {
      init_typeof();
      "use strict";
      module2.exports = function equal(a, b2) {
        if (a === b2)
          return true;
        if (a && b2 && _typeof(a) == "object" && _typeof(b2) == "object") {
          if (a.constructor !== b2.constructor)
            return false;
          var length, i2, keys3;
          if (Array.isArray(a)) {
            length = a.length;
            if (length != b2.length)
              return false;
            for (i2 = length; i2-- !== 0; ) {
              if (!equal(a[i2], b2[i2]))
                return false;
            }
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b2.source && a.flags === b2.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b2.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b2.toString();
          keys3 = Object.keys(a);
          length = keys3.length;
          if (length !== Object.keys(b2).length)
            return false;
          for (i2 = length; i2-- !== 0; ) {
            if (!Object.prototype.hasOwnProperty.call(b2, keys3[i2]))
              return false;
          }
          for (i2 = length; i2-- !== 0; ) {
            var key = keys3[i2];
            if (!equal(a[key], b2[key]))
              return false;
          }
          return true;
        }
        return a !== a && b2 !== b2;
      };
    }
  });

  // node_modules/@tmcw/togeojson/dist/togeojson.umd.js
  var require_togeojson_umd = __commonJS({
    "node_modules/@tmcw/togeojson/dist/togeojson.umd.js": function(exports2, module2) {
      init_slicedToArray();
      init_typeof();
      var import_regenerator4 = __toModule(require_regenerator());
      function _createForOfIteratorHelper7(o2, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
        if (!it) {
          if (Array.isArray(o2) || (it = _unsupportedIterableToArray8(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
            if (it)
              o2 = it;
            var i2 = 0;
            var F = function F2() {
            };
            return { s: F, n: function n2() {
              if (i2 >= o2.length)
                return { done: true };
              return { done: false, value: o2[i2++] };
            }, e: function e3(_e29) {
              throw _e29;
            }, f: F };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function s() {
          it = it.call(o2);
        }, n: function n2() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        }, e: function e3(_e30) {
          didErr = true;
          err = _e30;
        }, f: function f2() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray8(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray8(o2, minLen);
        var n2 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n2 === "Object" && o2.constructor)
          n2 = o2.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o2);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray8(o2, minLen);
      }
      function _arrayLikeToArray8(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
          arr2[i2] = arr[i2];
        }
        return arr2;
      }
      !function(e3, t) {
        (typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) == "object" && typeof module2 != "undefined" ? t(exports2) : typeof define == "function" && define.amd ? define(["exports"], t) : t((e3 = typeof globalThis != "undefined" ? globalThis : e3 || self).toGeoJSON = {});
      }(void 0, function(e3) {
        "use strict";
        var _marked4 = /* @__PURE__ */ import_regenerator4.default.mark(g2), _marked22 = /* @__PURE__ */ import_regenerator4.default.mark(y), _marked32 = /* @__PURE__ */ import_regenerator4.default.mark(M);
        function t(e4) {
          return e4 && e4.normalize && e4.normalize(), e4 && e4.textContent || "";
        }
        function n2(e4, t2) {
          var n3 = e4.getElementsByTagName(t2);
          return n3.length ? n3[0] : null;
        }
        function o2(e4) {
          var o3 = {};
          if (e4) {
            var _s = n2(e4, "line");
            if (_s) {
              var _e = t(n2(_s, "color")), _r = parseFloat(t(n2(_s, "opacity"))), _i = parseFloat(t(n2(_s, "width")));
              _e && (o3.stroke = _e), isNaN(_r) || (o3["stroke-opacity"] = _r), isNaN(_i) || (o3["stroke-width"] = 96 * _i / 25.4);
            }
          }
          return o3;
        }
        function s(e4, o3) {
          var s2 = {};
          var r2, i3;
          for (i3 = 0; i3 < o3.length; i3++) {
            r2 = n2(e4, o3[i3]), r2 && (s2[o3[i3]] = t(r2));
          }
          return s2;
        }
        function r(e4) {
          var n3 = s(e4, ["name", "cmt", "desc", "type", "time", "keywords"]), o3 = e4.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/GpxExtensions/v3", "*");
          for (var _s2 = 0; _s2 < o3.length; _s2++) {
            var _r2 = o3[_s2];
            _r2.parentNode.parentNode === e4 && (n3[_r2.tagName.replace(":", "_")] = t(_r2));
          }
          var r2 = e4.getElementsByTagName("link");
          r2.length && (n3.links = []);
          for (var _e2 = 0; _e2 < r2.length; _e2++) {
            n3.links.push(Object.assign({
              href: r2[_e2].getAttribute("href")
            }, s(r2[_e2], ["text", "type"])));
          }
          return n3;
        }
        function i2(e4) {
          var o3 = [parseFloat(e4.getAttribute("lon")), parseFloat(e4.getAttribute("lat"))], s2 = n2(e4, "ele"), r2 = n2(e4, "gpxtpx:hr") || n2(e4, "hr"), i3 = n2(e4, "time");
          var l2;
          s2 && (l2 = parseFloat(t(s2)), isNaN(l2) || o3.push(l2));
          var a2 = {
            coordinates: o3,
            time: i3 ? t(i3) : null,
            extendedValues: []
          };
          r2 && a2.extendedValues.push(["heart", parseFloat(t(r2))]);
          var c3 = n2(e4, "extensions");
          if (c3 !== null)
            for (var _i2 = 0, _arr = ["speed", "course", "hAcc", "vAcc"]; _i2 < _arr.length; _i2++) {
              var _e3 = _arr[_i2];
              var _o = parseFloat(t(n2(c3, _e3)));
              isNaN(_o) || a2.extendedValues.push([_e3, _o]);
            }
          return a2;
        }
        function l(e4) {
          var t2 = a(e4, "rtept");
          if (t2)
            return {
              type: "Feature",
              properties: Object.assign(r(e4), o2(n2(e4, "extensions")), {
                _gpxType: "rte"
              }),
              geometry: {
                type: "LineString",
                coordinates: t2.line
              }
            };
        }
        function a(e4, t2) {
          var n3 = e4.getElementsByTagName(t2);
          if (n3.length < 2)
            return;
          var o3 = [], s2 = [], r2 = {};
          for (var _e4 = 0; _e4 < n3.length; _e4++) {
            var _t2 = i2(n3[_e4]);
            o3.push(_t2.coordinates), _t2.time && s2.push(_t2.time);
            for (var _o2 = 0; _o2 < _t2.extendedValues.length; _o2++) {
              var _t$extendedValues$_o = _slicedToArray(_t2.extendedValues[_o2], 2), _s3 = _t$extendedValues$_o[0], _i3 = _t$extendedValues$_o[1], _l = _s3 === "heart" ? _s3 : _s3 + "s";
              r2[_l] || (r2[_l] = Array(n3.length).fill(null)), r2[_l][_e4] = _i3;
            }
          }
          return {
            line: o3,
            times: s2,
            extendedValues: r2
          };
        }
        function c2(e4) {
          var t2 = e4.getElementsByTagName("trkseg"), s2 = [], i3 = [], l2 = [];
          for (var _e5 = 0; _e5 < t2.length; _e5++) {
            var _n = a(t2[_e5], "trkpt");
            _n && (l2.push(_n), _n.times && _n.times.length && i3.push(_n.times));
          }
          if (l2.length === 0)
            return;
          var c3 = l2.length > 1, g3 = Object.assign(r(e4), o2(n2(e4, "extensions")), {
            _gpxType: "trk"
          }, i3.length ? {
            coordinateProperties: {
              times: c3 ? i3 : i3[0]
            }
          } : {});
          for (var _e6 = 0; _e6 < l2.length; _e6++) {
            var _t2 = l2[_e6];
            s2.push(_t2.line);
            for (var _i4 = 0, _Object$entries = Object.entries(_t2.extendedValues); _i4 < _Object$entries.length; _i4++) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2), _n2 = _Object$entries$_i[0], _o3 = _Object$entries$_i[1];
              var _t3 = g3;
              _n2 === "heart" && (g3.coordinateProperties || (g3.coordinateProperties = {}), _t3 = g3.coordinateProperties), c3 ? (_t3[_n2] || (_t3[_n2] = l2.map(function(e6) {
                return new Array(e6.line.length).fill(null);
              })), _t3[_n2][_e6] = _o3) : _t3[_n2] = _o3;
            }
          }
          return {
            type: "Feature",
            properties: g3,
            geometry: c3 ? {
              type: "MultiLineString",
              coordinates: s2
            } : {
              type: "LineString",
              coordinates: s2[0]
            }
          };
        }
        function g2(e4) {
          var t2, n3, o3, _e7, _n3, _e8, _t4, _e9, a2;
          return import_regenerator4.default.wrap(function g$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  t2 = e4.getElementsByTagName("trk"), n3 = e4.getElementsByTagName("rte"), o3 = e4.getElementsByTagName("wpt");
                  _e7 = 0;
                case 2:
                  if (!(_e7 < t2.length)) {
                    _context.next = 11;
                    break;
                  }
                  _n3 = c2(t2[_e7]);
                  _context.t0 = _n3;
                  if (!_context.t0) {
                    _context.next = 8;
                    break;
                  }
                  _context.next = 8;
                  return _n3;
                case 8:
                  _e7++;
                  _context.next = 2;
                  break;
                case 11:
                  _e8 = 0;
                case 12:
                  if (!(_e8 < n3.length)) {
                    _context.next = 21;
                    break;
                  }
                  _t4 = l(n3[_e8]);
                  _context.t1 = _t4;
                  if (!_context.t1) {
                    _context.next = 18;
                    break;
                  }
                  _context.next = 18;
                  return _t4;
                case 18:
                  _e8++;
                  _context.next = 12;
                  break;
                case 21:
                  _e9 = 0;
                case 22:
                  if (!(_e9 < o3.length)) {
                    _context.next = 28;
                    break;
                  }
                  _context.next = 25;
                  return a2 = o3[_e9], {
                    type: "Feature",
                    properties: Object.assign(r(a2), s(a2, ["sym"])),
                    geometry: {
                      type: "Point",
                      coordinates: i2(a2).coordinates
                    }
                  };
                case 25:
                  _e9++;
                  _context.next = 22;
                  break;
                case 28:
                case "end":
                  return _context.stop();
              }
            }
          }, _marked4);
        }
        var u = [["heartRate", "heartRates"], ["Cadence", "cadences"], ["Speed", "speeds"], ["Watts", "watts"]], m = [["TotalTimeSeconds", "totalTimeSeconds"], ["DistanceMeters", "distanceMeters"], ["MaximumSpeed", "maxSpeed"], ["AverageHeartRateBpm", "avgHeartRate"], ["MaximumHeartRateBpm", "maxHeartRate"], ["AvgSpeed", "avgSpeed"], ["AvgWatts", "avgWatts"], ["MaxWatts", "maxWatts"]];
        function p2(e4, o3) {
          var s2 = [];
          var _iterator = _createForOfIteratorHelper7(o3), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 2), _r3 = _step$value[0], _i5 = _step$value[1];
              var _o4 = n2(e4, _r3);
              if (!_o4) {
                var _t5 = e4.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/ActivityExtension/v2", _r3);
                _t5.length && (_o4 = _t5[0]);
              }
              var _l2 = parseFloat(t(_o4));
              isNaN(_l2) || s2.push([_i5, _l2]);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return s2;
        }
        function h(e4) {
          var o3 = t(n2(e4, "LongitudeDegrees")), s2 = t(n2(e4, "LatitudeDegrees"));
          if (!o3.length || !s2.length)
            return null;
          var r2 = [parseFloat(o3), parseFloat(s2)], i3 = n2(e4, "AltitudeMeters"), l2 = n2(e4, "HeartRateBpm"), a2 = n2(e4, "Time");
          var c3;
          return i3 && (c3 = parseFloat(t(i3)), isNaN(c3) || r2.push(c3)), {
            coordinates: r2,
            time: a2 ? t(a2) : null,
            heartRate: l2 ? parseFloat(t(l2)) : null,
            extensions: p2(e4, u)
          };
        }
        function f2(e4, t2) {
          var n3 = e4.getElementsByTagName(t2), o3 = [], s2 = [], r2 = [];
          if (n3.length < 2)
            return null;
          var i3 = {
            extendedProperties: {}
          };
          for (var _e10 = 0; _e10 < n3.length; _e10++) {
            var _t6 = h(n3[_e10]);
            if (_t6 !== null) {
              o3.push(_t6.coordinates), _t6.time && s2.push(_t6.time), _t6.heartRate && r2.push(_t6.heartRate);
              var _iterator2 = _createForOfIteratorHelper7(_t6.extensions), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var _step2$value = _slicedToArray(_step2.value, 2), _o5 = _step2$value[0], _s4 = _step2$value[1];
                  i3.extendedProperties[_o5] || (i3.extendedProperties[_o5] = Array(n3.length).fill(null)), i3.extendedProperties[_o5][_e10] = _s4;
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
          }
          return Object.assign(i3, {
            line: o3,
            times: s2,
            heartRates: r2
          });
        }
        function d(e4) {
          var o3 = e4.getElementsByTagName("Track"), s2 = [], r2 = [], i3 = [], l2 = [];
          var a2;
          var c3 = function(e6) {
            var t2 = {};
            var _iterator3 = _createForOfIteratorHelper7(e6), _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                var _step3$value = _slicedToArray(_step3.value, 2), _n4 = _step3$value[0], _o6 = _step3$value[1];
                t2[_n4] = _o6;
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
            return t2;
          }(p2(e4, m)), g3 = n2(e4, "Name");
          g3 && (c3.name = t(g3));
          for (var _e11 = 0; _e11 < o3.length; _e11++) {
            a2 = f2(o3[_e11], "Trackpoint"), a2 && (s2.push(a2.line), a2.times.length && r2.push(a2.times), a2.heartRates.length && i3.push(a2.heartRates), l2.push(a2.extendedProperties));
          }
          for (var _e12 = 0; _e12 < l2.length; _e12++) {
            var _t7 = l2[_e12];
            for (var _n5 in _t7) {
              o3.length === 1 ? c3[_n5] = a2.extendedProperties[_n5] : (c3[_n5] || (c3[_n5] = s2.map(function(e6) {
                return Array(e6.length).fill(null);
              })), c3[_n5][_e12] = _t7[_n5]);
            }
          }
          if (s2.length !== 0)
            return (r2.length || i3.length) && (c3.coordinateProperties = Object.assign(r2.length ? {
              times: s2.length === 1 ? r2[0] : r2
            } : {}, i3.length ? {
              heart: s2.length === 1 ? i3[0] : i3
            } : {})), {
              type: "Feature",
              properties: c3,
              geometry: {
                type: s2.length === 1 ? "LineString" : "MultiLineString",
                coordinates: s2.length === 1 ? s2[0] : s2
              }
            };
        }
        function y(e4) {
          var t2, _e13, _n6, n3, _e14, _t8;
          return import_regenerator4.default.wrap(function y$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  t2 = e4.getElementsByTagName("Lap");
                  _e13 = 0;
                case 2:
                  if (!(_e13 < t2.length)) {
                    _context2.next = 11;
                    break;
                  }
                  _n6 = d(t2[_e13]);
                  _context2.t0 = _n6;
                  if (!_context2.t0) {
                    _context2.next = 8;
                    break;
                  }
                  _context2.next = 8;
                  return _n6;
                case 8:
                  _e13++;
                  _context2.next = 2;
                  break;
                case 11:
                  n3 = e4.getElementsByTagName("Courses");
                  _e14 = 0;
                case 13:
                  if (!(_e14 < n3.length)) {
                    _context2.next = 22;
                    break;
                  }
                  _t8 = d(n3[_e14]);
                  _context2.t1 = _t8;
                  if (!_context2.t1) {
                    _context2.next = 19;
                    break;
                  }
                  _context2.next = 19;
                  return _t8;
                case 19:
                  _e14++;
                  _context2.next = 13;
                  break;
                case 22:
                case "end":
                  return _context2.stop();
              }
            }
          }, _marked22);
        }
        var N = /\s*/g, x2 = /^\s*|\s*$/g, T = /\s+/;
        function b2(e4) {
          if (!e4 || !e4.length)
            return 0;
          var t2 = 0;
          for (var _n7 = 0; _n7 < e4.length; _n7++) {
            t2 = (t2 << 5) - t2 + e4.charCodeAt(_n7) | 0;
          }
          return t2;
        }
        function S(e4) {
          return e4.replace(N, "").split(",").map(parseFloat);
        }
        function k(e4) {
          return e4.replace(x2, "").split(T).map(S);
        }
        function A(e4) {
          if (e4.xml !== void 0)
            return e4.xml;
          if (e4.tagName) {
            var _t9 = e4.tagName;
            for (var _n8 = 0; _n8 < e4.attributes.length; _n8++) {
              _t9 += e4.attributes[_n8].name + e4.attributes[_n8].value;
            }
            for (var _n9 = 0; _n9 < e4.childNodes.length; _n9++) {
              _t9 += A(e4.childNodes[_n9]);
            }
            return _t9;
          }
          return e4.nodeName === "#text" ? (e4.nodeValue || e4.value || "").trim() : e4.nodeName === "#cdata-section" ? e4.nodeValue : "";
        }
        var B = ["Polygon", "LineString", "Point", "Track", "gx:Track"];
        function E(e4, o3, s2) {
          var r2 = t(n2(o3, "color")) || "";
          var i3 = s2 == "stroke" || s2 === "fill" ? s2 : s2 + "-color";
          r2.substr(0, 1) === "#" && (r2 = r2.substr(1)), r2.length === 6 || r2.length === 3 ? e4[i3] = r2 : r2.length === 8 && (e4[s2 + "-opacity"] = parseInt(r2.substr(0, 2), 16) / 255, e4[i3] = "#" + r2.substr(6, 2) + r2.substr(4, 2) + r2.substr(2, 2));
        }
        function F(e4, o3, s2, r2) {
          var i3 = parseFloat(t(n2(o3, s2)));
          isNaN(i3) || (e4[r2] = i3);
        }
        function P(e4) {
          var n3 = e4.getElementsByTagName("coord");
          var o3 = [], s2 = [];
          n3.length === 0 && (n3 = e4.getElementsByTagName("gx:coord"));
          for (var _e15 = 0; _e15 < n3.length; _e15++) {
            o3.push(t(n3[_e15]).split(" ").map(parseFloat));
          }
          var r2 = e4.getElementsByTagName("when");
          for (var _e16 = 0; _e16 < r2.length; _e16++) {
            s2.push(t(r2[_e16]));
          }
          return {
            coords: o3,
            times: s2
          };
        }
        function v(e4) {
          var o3, s2, r2, i3, l2;
          var a2 = [], c3 = [];
          if (n2(e4, "MultiGeometry"))
            return v(n2(e4, "MultiGeometry"));
          if (n2(e4, "MultiTrack"))
            return v(n2(e4, "MultiTrack"));
          if (n2(e4, "gx:MultiTrack"))
            return v(n2(e4, "gx:MultiTrack"));
          for (r2 = 0; r2 < B.length; r2++) {
            if (s2 = e4.getElementsByTagName(B[r2]), s2)
              for (i3 = 0; i3 < s2.length; i3++) {
                if (o3 = s2[i3], B[r2] === "Point")
                  a2.push({
                    type: "Point",
                    coordinates: S(t(n2(o3, "coordinates")))
                  });
                else if (B[r2] === "LineString")
                  a2.push({
                    type: "LineString",
                    coordinates: k(t(n2(o3, "coordinates")))
                  });
                else if (B[r2] === "Polygon") {
                  var _e17 = o3.getElementsByTagName("LinearRing"), _s5 = [];
                  for (l2 = 0; l2 < _e17.length; l2++) {
                    _s5.push(k(t(n2(_e17[l2], "coordinates"))));
                  }
                  a2.push({
                    type: "Polygon",
                    coordinates: _s5
                  });
                } else if (B[r2] === "Track" || B[r2] === "gx:Track") {
                  var _e18 = P(o3);
                  a2.push({
                    type: "LineString",
                    coordinates: _e18.coords
                  }), _e18.times.length && c3.push(_e18.times);
                }
              }
          }
          return {
            geoms: a2,
            coordTimes: c3
          };
        }
        function L(e4, o3, s2, r2) {
          var i3 = v(e4);
          var l2;
          var a2 = {}, c3 = t(n2(e4, "name")), g3 = t(n2(e4, "address"));
          var u2 = t(n2(e4, "styleUrl"));
          var m2 = t(n2(e4, "description")), p3 = n2(e4, "TimeSpan"), h2 = n2(e4, "TimeStamp"), f3 = n2(e4, "ExtendedData");
          var d2 = n2(e4, "IconStyle"), y2 = n2(e4, "LabelStyle"), N2 = n2(e4, "LineStyle"), x3 = n2(e4, "PolyStyle");
          var T2 = n2(e4, "visibility");
          if (c3 && (a2.name = c3), g3 && (a2.address = g3), u2) {
            u2[0] !== "#" && (u2 = "#" + u2), a2.styleUrl = u2, o3[u2] && (a2.styleHash = o3[u2]), s2[u2] && (a2.styleMapHash = s2[u2], a2.styleHash = o3[s2[u2].normal]);
            var _e19 = r2[a2.styleHash];
            _e19 && (d2 || (d2 = n2(_e19, "IconStyle")), y2 || (y2 = n2(_e19, "LabelStyle")), N2 || (N2 = n2(_e19, "LineStyle")), x3 || (x3 = n2(_e19, "PolyStyle")));
          }
          if (m2 && (a2.description = m2), p3) {
            var _e20 = t(n2(p3, "begin")), _o7 = t(n2(p3, "end"));
            a2.timespan = {
              begin: _e20,
              end: _o7
            };
          }
          if (h2 && (a2.timestamp = t(n2(h2, "when"))), d2) {
            E(a2, d2, "icon"), F(a2, d2, "scale", "icon-scale"), F(a2, d2, "heading", "icon-heading");
            var _e21 = n2(d2, "hotSpot");
            if (_e21) {
              var _t10 = parseFloat(_e21.getAttribute("x")), _n10 = parseFloat(_e21.getAttribute("y"));
              isNaN(_t10) || isNaN(_n10) || (a2["icon-offset"] = [_t10, _n10]);
            }
            var _o8 = n2(d2, "Icon");
            if (_o8) {
              var _e22 = t(n2(_o8, "href"));
              _e22 && (a2.icon = _e22);
            }
          }
          if (y2 && (E(a2, y2, "label"), F(a2, y2, "scale", "label-scale")), N2 && (E(a2, N2, "stroke"), F(a2, N2, "width", "stroke-width")), x3) {
            E(a2, x3, "fill");
            var _e23 = t(n2(x3, "fill")), _o9 = t(n2(x3, "outline"));
            _e23 && (a2["fill-opacity"] = _e23 === "1" ? a2["fill-opacity"] || 1 : 0), _o9 && (a2["stroke-opacity"] = _o9 === "1" ? a2["stroke-opacity"] || 1 : 0);
          }
          if (f3) {
            var _e24 = f3.getElementsByTagName("Data"), _o10 = f3.getElementsByTagName("SimpleData");
            for (l2 = 0; l2 < _e24.length; l2++) {
              a2[_e24[l2].getAttribute("name")] = t(n2(_e24[l2], "value"));
            }
            for (l2 = 0; l2 < _o10.length; l2++) {
              a2[_o10[l2].getAttribute("name")] = t(_o10[l2]);
            }
          }
          T2 && (a2.visibility = t(T2)), i3.coordTimes.length && (a2.coordinateProperties = {
            times: i3.coordTimes.length === 1 ? i3.coordTimes[0] : i3.coordTimes
          });
          var b3 = {
            type: "Feature",
            geometry: i3.geoms.length === 0 ? null : i3.geoms.length === 1 ? i3.geoms[0] : {
              type: "GeometryCollection",
              geometries: i3.geoms
            },
            properties: a2
          };
          return e4.getAttribute("id") && (b3.id = e4.getAttribute("id")), b3;
        }
        function M(e4) {
          var o3, s2, r2, i3, l2, a2, _e25, _t11, _e26, _s6, _i6, _e27, _e28, _t12;
          return import_regenerator4.default.wrap(function M$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  o3 = {}, s2 = {}, r2 = {}, i3 = e4.getElementsByTagName("Placemark"), l2 = e4.getElementsByTagName("Style"), a2 = e4.getElementsByTagName("StyleMap");
                  for (_e25 = 0; _e25 < l2.length; _e25++) {
                    _t11 = b2(A(l2[_e25])).toString(16);
                    o3["#" + l2[_e25].getAttribute("id")] = _t11, s2[_t11] = l2[_e25];
                  }
                  for (_e26 = 0; _e26 < a2.length; _e26++) {
                    o3["#" + a2[_e26].getAttribute("id")] = b2(A(a2[_e26])).toString(16);
                    _s6 = a2[_e26].getElementsByTagName("Pair"), _i6 = {};
                    for (_e27 = 0; _e27 < _s6.length; _e27++) {
                      _i6[t(n2(_s6[_e27], "key"))] = t(n2(_s6[_e27], "styleUrl"));
                    }
                    r2["#" + a2[_e26].getAttribute("id")] = _i6;
                  }
                  _e28 = 0;
                case 4:
                  if (!(_e28 < i3.length)) {
                    _context3.next = 13;
                    break;
                  }
                  _t12 = L(i3[_e28], o3, r2, s2);
                  _context3.t0 = _t12;
                  if (!_context3.t0) {
                    _context3.next = 10;
                    break;
                  }
                  _context3.next = 10;
                  return _t12;
                case 10:
                  _e28++;
                  _context3.next = 4;
                  break;
                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _marked32);
        }
        e3.gpx = function(e4) {
          return {
            type: "FeatureCollection",
            features: Array.from(g2(e4))
          };
        }, e3.gpxGen = g2, e3.kml = function(e4) {
          return {
            type: "FeatureCollection",
            features: Array.from(M(e4))
          };
        }, e3.kmlGen = M, e3.tcx = function(e4) {
          return {
            type: "FeatureCollection",
            features: Array.from(y(e4))
          };
        }, e3.tcxGen = y, Object.defineProperty(e3, "__esModule", {
          value: true
        });
      });
    }
  });

  // node_modules/rbush/rbush.min.js
  var require_rbush_min = __commonJS({
    "node_modules/rbush/rbush.min.js": function(exports2, module2) {
      init_typeof();
      !function(t, i2) {
        (typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) == "object" && typeof module2 != "undefined" ? module2.exports = i2() : typeof define == "function" && define.amd ? define(i2) : (t = t || self).RBush = i2();
      }(void 0, function() {
        "use strict";
        function t(t2, r2, e4, a2, h2) {
          !function t3(n3, r3, e6, a3, h3) {
            for (; a3 > e6; ) {
              if (a3 - e6 > 600) {
                var o3 = a3 - e6 + 1, s2 = r3 - e6 + 1, l2 = Math.log(o3), f3 = 0.5 * Math.exp(2 * l2 / 3), u2 = 0.5 * Math.sqrt(l2 * f3 * (o3 - f3) / o3) * (s2 - o3 / 2 < 0 ? -1 : 1), m2 = Math.max(e6, Math.floor(r3 - s2 * f3 / o3 + u2)), c3 = Math.min(a3, Math.floor(r3 + (o3 - s2) * f3 / o3 + u2));
                t3(n3, r3, m2, c3, h3);
              }
              var p3 = n3[r3], d2 = e6, x2 = a3;
              for (i2(n3, e6, r3), h3(n3[a3], p3) > 0 && i2(n3, e6, a3); d2 < x2; ) {
                for (i2(n3, d2, x2), d2++, x2--; h3(n3[d2], p3) < 0; ) {
                  d2++;
                }
                for (; h3(n3[x2], p3) > 0; ) {
                  x2--;
                }
              }
              h3(n3[e6], p3) === 0 ? i2(n3, e6, x2) : i2(n3, ++x2, a3), x2 <= r3 && (e6 = x2 + 1), r3 <= x2 && (a3 = x2 - 1);
            }
          }(t2, r2, e4 || 0, a2 || t2.length - 1, h2 || n2);
        }
        function i2(t2, i3, n3) {
          var r2 = t2[i3];
          t2[i3] = t2[n3], t2[n3] = r2;
        }
        function n2(t2, i3) {
          return t2 < i3 ? -1 : t2 > i3 ? 1 : 0;
        }
        var r = function r2(t2) {
          t2 === void 0 && (t2 = 9), this._maxEntries = Math.max(4, t2), this._minEntries = Math.max(2, Math.ceil(0.4 * this._maxEntries)), this.clear();
        };
        function e3(t2, i3, n3) {
          if (!n3)
            return i3.indexOf(t2);
          for (var r2 = 0; r2 < i3.length; r2++) {
            if (n3(t2, i3[r2]))
              return r2;
          }
          return -1;
        }
        function a(t2, i3) {
          h(t2, 0, t2.children.length, i3, t2);
        }
        function h(t2, i3, n3, r2, e4) {
          e4 || (e4 = p2(null)), e4.minX = 1 / 0, e4.minY = 1 / 0, e4.maxX = -1 / 0, e4.maxY = -1 / 0;
          for (var a2 = i3; a2 < n3; a2++) {
            var h2 = t2.children[a2];
            o2(e4, t2.leaf ? r2(h2) : h2);
          }
          return e4;
        }
        function o2(t2, i3) {
          return t2.minX = Math.min(t2.minX, i3.minX), t2.minY = Math.min(t2.minY, i3.minY), t2.maxX = Math.max(t2.maxX, i3.maxX), t2.maxY = Math.max(t2.maxY, i3.maxY), t2;
        }
        function s(t2, i3) {
          return t2.minX - i3.minX;
        }
        function l(t2, i3) {
          return t2.minY - i3.minY;
        }
        function f2(t2) {
          return (t2.maxX - t2.minX) * (t2.maxY - t2.minY);
        }
        function u(t2) {
          return t2.maxX - t2.minX + (t2.maxY - t2.minY);
        }
        function m(t2, i3) {
          return t2.minX <= i3.minX && t2.minY <= i3.minY && i3.maxX <= t2.maxX && i3.maxY <= t2.maxY;
        }
        function c2(t2, i3) {
          return i3.minX <= t2.maxX && i3.minY <= t2.maxY && i3.maxX >= t2.minX && i3.maxY >= t2.minY;
        }
        function p2(t2) {
          return {
            children: t2,
            height: 1,
            leaf: true,
            minX: 1 / 0,
            minY: 1 / 0,
            maxX: -1 / 0,
            maxY: -1 / 0
          };
        }
        function d(i3, n3, r2, e4, a2) {
          for (var h2 = [n3, r2]; h2.length; ) {
            if (!((r2 = h2.pop()) - (n3 = h2.pop()) <= e4)) {
              var o3 = n3 + Math.ceil((r2 - n3) / e4 / 2) * e4;
              t(i3, o3, n3, r2, a2), h2.push(n3, o3, o3, r2);
            }
          }
        }
        return r.prototype.all = function() {
          return this._all(this.data, []);
        }, r.prototype.search = function(t2) {
          var i3 = this.data, n3 = [];
          if (!c2(t2, i3))
            return n3;
          for (var r2 = this.toBBox, e4 = []; i3; ) {
            for (var a2 = 0; a2 < i3.children.length; a2++) {
              var h2 = i3.children[a2], o3 = i3.leaf ? r2(h2) : h2;
              c2(t2, o3) && (i3.leaf ? n3.push(h2) : m(t2, o3) ? this._all(h2, n3) : e4.push(h2));
            }
            i3 = e4.pop();
          }
          return n3;
        }, r.prototype.collides = function(t2) {
          var i3 = this.data;
          if (!c2(t2, i3))
            return false;
          for (var n3 = []; i3; ) {
            for (var r2 = 0; r2 < i3.children.length; r2++) {
              var e4 = i3.children[r2], a2 = i3.leaf ? this.toBBox(e4) : e4;
              if (c2(t2, a2)) {
                if (i3.leaf || m(t2, a2))
                  return true;
                n3.push(e4);
              }
            }
            i3 = n3.pop();
          }
          return false;
        }, r.prototype.load = function(t2) {
          if (!t2 || !t2.length)
            return this;
          if (t2.length < this._minEntries) {
            for (var i3 = 0; i3 < t2.length; i3++) {
              this.insert(t2[i3]);
            }
            return this;
          }
          var n3 = this._build(t2.slice(), 0, t2.length - 1, 0);
          if (this.data.children.length) {
            if (this.data.height === n3.height)
              this._splitRoot(this.data, n3);
            else {
              if (this.data.height < n3.height) {
                var r2 = this.data;
                this.data = n3, n3 = r2;
              }
              this._insert(n3, this.data.height - n3.height - 1, true);
            }
          } else
            this.data = n3;
          return this;
        }, r.prototype.insert = function(t2) {
          return t2 && this._insert(t2, this.data.height - 1), this;
        }, r.prototype.clear = function() {
          return this.data = p2([]), this;
        }, r.prototype.remove = function(t2, i3) {
          if (!t2)
            return this;
          for (var n3, r2, a2, h2 = this.data, o3 = this.toBBox(t2), s2 = [], l2 = []; h2 || s2.length; ) {
            if (h2 || (h2 = s2.pop(), r2 = s2[s2.length - 1], n3 = l2.pop(), a2 = true), h2.leaf) {
              var f3 = e3(t2, h2.children, i3);
              if (f3 !== -1)
                return h2.children.splice(f3, 1), s2.push(h2), this._condense(s2), this;
            }
            a2 || h2.leaf || !m(h2, o3) ? r2 ? (n3++, h2 = r2.children[n3], a2 = false) : h2 = null : (s2.push(h2), l2.push(n3), n3 = 0, r2 = h2, h2 = h2.children[0]);
          }
          return this;
        }, r.prototype.toBBox = function(t2) {
          return t2;
        }, r.prototype.compareMinX = function(t2, i3) {
          return t2.minX - i3.minX;
        }, r.prototype.compareMinY = function(t2, i3) {
          return t2.minY - i3.minY;
        }, r.prototype.toJSON = function() {
          return this.data;
        }, r.prototype.fromJSON = function(t2) {
          return this.data = t2, this;
        }, r.prototype._all = function(t2, i3) {
          for (var n3 = []; t2; ) {
            t2.leaf ? i3.push.apply(i3, t2.children) : n3.push.apply(n3, t2.children), t2 = n3.pop();
          }
          return i3;
        }, r.prototype._build = function(t2, i3, n3, r2) {
          var e4, h2 = n3 - i3 + 1, o3 = this._maxEntries;
          if (h2 <= o3)
            return a(e4 = p2(t2.slice(i3, n3 + 1)), this.toBBox), e4;
          r2 || (r2 = Math.ceil(Math.log(h2) / Math.log(o3)), o3 = Math.ceil(h2 / Math.pow(o3, r2 - 1))), (e4 = p2([])).leaf = false, e4.height = r2;
          var s2 = Math.ceil(h2 / o3), l2 = s2 * Math.ceil(Math.sqrt(o3));
          d(t2, i3, n3, l2, this.compareMinX);
          for (var f3 = i3; f3 <= n3; f3 += l2) {
            var u2 = Math.min(f3 + l2 - 1, n3);
            d(t2, f3, u2, s2, this.compareMinY);
            for (var m2 = f3; m2 <= u2; m2 += s2) {
              var c3 = Math.min(m2 + s2 - 1, u2);
              e4.children.push(this._build(t2, m2, c3, r2 - 1));
            }
          }
          return a(e4, this.toBBox), e4;
        }, r.prototype._chooseSubtree = function(t2, i3, n3, r2) {
          for (; r2.push(i3), !i3.leaf && r2.length - 1 !== n3; ) {
            for (var e4 = 1 / 0, a2 = 1 / 0, h2 = void 0, o3 = 0; o3 < i3.children.length; o3++) {
              var s2 = i3.children[o3], l2 = f2(s2), u2 = (m2 = t2, c3 = s2, (Math.max(c3.maxX, m2.maxX) - Math.min(c3.minX, m2.minX)) * (Math.max(c3.maxY, m2.maxY) - Math.min(c3.minY, m2.minY)) - l2);
              u2 < a2 ? (a2 = u2, e4 = l2 < e4 ? l2 : e4, h2 = s2) : u2 === a2 && l2 < e4 && (e4 = l2, h2 = s2);
            }
            i3 = h2 || i3.children[0];
          }
          var m2, c3;
          return i3;
        }, r.prototype._insert = function(t2, i3, n3) {
          var r2 = n3 ? t2 : this.toBBox(t2), e4 = [], a2 = this._chooseSubtree(r2, this.data, i3, e4);
          for (a2.children.push(t2), o2(a2, r2); i3 >= 0 && e4[i3].children.length > this._maxEntries; ) {
            this._split(e4, i3), i3--;
          }
          this._adjustParentBBoxes(r2, e4, i3);
        }, r.prototype._split = function(t2, i3) {
          var n3 = t2[i3], r2 = n3.children.length, e4 = this._minEntries;
          this._chooseSplitAxis(n3, e4, r2);
          var h2 = this._chooseSplitIndex(n3, e4, r2), o3 = p2(n3.children.splice(h2, n3.children.length - h2));
          o3.height = n3.height, o3.leaf = n3.leaf, a(n3, this.toBBox), a(o3, this.toBBox), i3 ? t2[i3 - 1].children.push(o3) : this._splitRoot(n3, o3);
        }, r.prototype._splitRoot = function(t2, i3) {
          this.data = p2([t2, i3]), this.data.height = t2.height + 1, this.data.leaf = false, a(this.data, this.toBBox);
        }, r.prototype._chooseSplitIndex = function(t2, i3, n3) {
          for (var r2, e4, a2, o3, s2, l2, u2, m2 = 1 / 0, c3 = 1 / 0, p3 = i3; p3 <= n3 - i3; p3++) {
            var d2 = h(t2, 0, p3, this.toBBox), x2 = h(t2, p3, n3, this.toBBox), v = (e4 = d2, a2 = x2, o3 = void 0, s2 = void 0, l2 = void 0, u2 = void 0, o3 = Math.max(e4.minX, a2.minX), s2 = Math.max(e4.minY, a2.minY), l2 = Math.min(e4.maxX, a2.maxX), u2 = Math.min(e4.maxY, a2.maxY), Math.max(0, l2 - o3) * Math.max(0, u2 - s2)), M = f2(d2) + f2(x2);
            v < m2 ? (m2 = v, r2 = p3, c3 = M < c3 ? M : c3) : v === m2 && M < c3 && (c3 = M, r2 = p3);
          }
          return r2 || n3 - i3;
        }, r.prototype._chooseSplitAxis = function(t2, i3, n3) {
          var r2 = t2.leaf ? this.compareMinX : s, e4 = t2.leaf ? this.compareMinY : l;
          this._allDistMargin(t2, i3, n3, r2) < this._allDistMargin(t2, i3, n3, e4) && t2.children.sort(r2);
        }, r.prototype._allDistMargin = function(t2, i3, n3, r2) {
          t2.children.sort(r2);
          for (var e4 = this.toBBox, a2 = h(t2, 0, i3, e4), s2 = h(t2, n3 - i3, n3, e4), l2 = u(a2) + u(s2), f3 = i3; f3 < n3 - i3; f3++) {
            var m2 = t2.children[f3];
            o2(a2, t2.leaf ? e4(m2) : m2), l2 += u(a2);
          }
          for (var c3 = n3 - i3 - 1; c3 >= i3; c3--) {
            var p3 = t2.children[c3];
            o2(s2, t2.leaf ? e4(p3) : p3), l2 += u(s2);
          }
          return l2;
        }, r.prototype._adjustParentBBoxes = function(t2, i3, n3) {
          for (var r2 = n3; r2 >= 0; r2--) {
            o2(i3[r2], t2);
          }
        }, r.prototype._condense = function(t2) {
          for (var i3 = t2.length - 1, n3 = void 0; i3 >= 0; i3--) {
            t2[i3].children.length === 0 ? i3 > 0 ? (n3 = t2[i3 - 1].children).splice(n3.indexOf(t2[i3]), 1) : this.clear() : a(t2[i3], this.toBBox);
          }
        }, r;
      });
    }
  });

  // node_modules/fast-json-stable-stringify/index.js
  var require_fast_json_stable_stringify = __commonJS({
    "node_modules/fast-json-stable-stringify/index.js": function(exports2, module2) {
      init_typeof();
      "use strict";
      module2.exports = function(data2, opts) {
        if (!opts)
          opts = {};
        if (typeof opts === "function")
          opts = {
            cmp: opts
          };
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
        var cmp = opts.cmp && function(f2) {
          return function(node) {
            return function(a, b2) {
              var aobj = {
                key: a,
                value: node[a]
              };
              var bobj = {
                key: b2,
                value: node[b2]
              };
              return f2(aobj, bobj);
            };
          };
        }(opts.cmp);
        var seen = [];
        return function stringify3(node) {
          if (node && node.toJSON && typeof node.toJSON === "function") {
            node = node.toJSON();
          }
          if (node === void 0)
            return;
          if (typeof node == "number")
            return isFinite(node) ? "" + node : "null";
          if (_typeof(node) !== "object")
            return JSON.stringify(node);
          var i2, out;
          if (Array.isArray(node)) {
            out = "[";
            for (i2 = 0; i2 < node.length; i2++) {
              if (i2)
                out += ",";
              out += stringify3(node[i2]) || "null";
            }
            return out + "]";
          }
          if (node === null)
            return "null";
          if (seen.indexOf(node) !== -1) {
            if (cycles)
              return JSON.stringify("__cycle__");
            throw new TypeError("Converting circular structure to JSON");
          }
          var seenIndex = seen.push(node) - 1;
          var keys3 = Object.keys(node).sort(cmp && cmp(node));
          out = "";
          for (i2 = 0; i2 < keys3.length; i2++) {
            var key = keys3[i2];
            var value2 = stringify3(node[key]);
            if (!value2)
              continue;
            if (out)
              out += ",";
            out += JSON.stringify(key) + ":" + value2;
          }
          seen.splice(seenIndex, 1);
          return "{" + out + "}";
        }(data2);
      };
    }
  });

  // node_modules/marked/lib/marked.js
  var require_marked = __commonJS({
    "node_modules/marked/lib/marked.js": function(exports2, module2) {
      init_typeof();
      (function(global3, factory) {
        (typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, global3.marked = factory());
      })(void 0, function() {
        "use strict";
        function _defineProperties2(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties2(Constructor, staticProps);
          return Constructor;
        }
        function _unsupportedIterableToArray8(o2, minLen) {
          if (!o2)
            return;
          if (typeof o2 === "string")
            return _arrayLikeToArray8(o2, minLen);
          var n2 = Object.prototype.toString.call(o2).slice(8, -1);
          if (n2 === "Object" && o2.constructor)
            n2 = o2.constructor.name;
          if (n2 === "Map" || n2 === "Set")
            return Array.from(o2);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return _arrayLikeToArray8(o2, minLen);
        }
        function _arrayLikeToArray8(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
            arr2[i2] = arr[i2];
          }
          return arr2;
        }
        function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
          var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
          if (it)
            return (it = it.call(o2)).next.bind(it);
          if (Array.isArray(o2) || (it = _unsupportedIterableToArray8(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
            if (it)
              o2 = it;
            var i2 = 0;
            return function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var defaults$5 = {
          exports: {}
        };
        function getDefaults$1() {
          return {
            baseUrl: null,
            breaks: false,
            extensions: null,
            gfm: true,
            headerIds: true,
            headerPrefix: "",
            highlight: null,
            langPrefix: "language-",
            mangle: true,
            pedantic: false,
            renderer: null,
            sanitize: false,
            sanitizer: null,
            silent: false,
            smartLists: false,
            smartypants: false,
            tokenizer: null,
            walkTokens: null,
            xhtml: false
          };
        }
        function changeDefaults$1(newDefaults) {
          defaults$5.exports.defaults = newDefaults;
        }
        defaults$5.exports = {
          defaults: getDefaults$1(),
          getDefaults: getDefaults$1,
          changeDefaults: changeDefaults$1
        };
        var escapeTest = /[&<>"']/;
        var escapeReplace = /[&<>"']/g;
        var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
        var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
        var escapeReplacements = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var getEscapeReplacement = function getEscapeReplacement2(ch) {
          return escapeReplacements[ch];
        };
        function escape$2(html2, encode) {
          if (encode) {
            if (escapeTest.test(html2)) {
              return html2.replace(escapeReplace, getEscapeReplacement);
            }
          } else {
            if (escapeTestNoEncode.test(html2)) {
              return html2.replace(escapeReplaceNoEncode, getEscapeReplacement);
            }
          }
          return html2;
        }
        var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
        function unescape$1(html2) {
          return html2.replace(unescapeTest, function(_2, n2) {
            n2 = n2.toLowerCase();
            if (n2 === "colon")
              return ":";
            if (n2.charAt(0) === "#") {
              return n2.charAt(1) === "x" ? String.fromCharCode(parseInt(n2.substring(2), 16)) : String.fromCharCode(+n2.substring(1));
            }
            return "";
          });
        }
        var caret = /(^|[^\[])\^/g;
        function edit$1(regex, opt) {
          regex = regex.source || regex;
          opt = opt || "";
          var obj = {
            replace: function replace2(name, val) {
              val = val.source || val;
              val = val.replace(caret, "$1");
              regex = regex.replace(name, val);
              return obj;
            },
            getRegex: function getRegex() {
              return new RegExp(regex, opt);
            }
          };
          return obj;
        }
        var nonWordAndColonTest = /[^\w:]/g;
        var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
        function cleanUrl$1(sanitize, base2, href) {
          if (sanitize) {
            var prot;
            try {
              prot = decodeURIComponent(unescape$1(href)).replace(nonWordAndColonTest, "").toLowerCase();
            } catch (e3) {
              return null;
            }
            if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
              return null;
            }
          }
          if (base2 && !originIndependentUrl.test(href)) {
            href = resolveUrl(base2, href);
          }
          try {
            href = encodeURI(href).replace(/%25/g, "%");
          } catch (e3) {
            return null;
          }
          return href;
        }
        var baseUrls = {};
        var justDomain = /^[^:]+:\/*[^/]*$/;
        var protocol = /^([^:]+:)[\s\S]*$/;
        var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
        function resolveUrl(base2, href) {
          if (!baseUrls[" " + base2]) {
            if (justDomain.test(base2)) {
              baseUrls[" " + base2] = base2 + "/";
            } else {
              baseUrls[" " + base2] = rtrim$1(base2, "/", true);
            }
          }
          base2 = baseUrls[" " + base2];
          var relativeBase = base2.indexOf(":") === -1;
          if (href.substring(0, 2) === "//") {
            if (relativeBase) {
              return href;
            }
            return base2.replace(protocol, "$1") + href;
          } else if (href.charAt(0) === "/") {
            if (relativeBase) {
              return href;
            }
            return base2.replace(domain, "$1") + href;
          } else {
            return base2 + href;
          }
        }
        var noopTest$1 = {
          exec: function noopTest2() {
          }
        };
        function merge$2(obj) {
          var i2 = 1, target, key;
          for (; i2 < arguments.length; i2++) {
            target = arguments[i2];
            for (key in target) {
              if (Object.prototype.hasOwnProperty.call(target, key)) {
                obj[key] = target[key];
              }
            }
          }
          return obj;
        }
        function splitCells$1(tableRow, count) {
          var row = tableRow.replace(/\|/g, function(match, offset, str) {
            var escaped = false, curr = offset;
            while (--curr >= 0 && str[curr] === "\\") {
              escaped = !escaped;
            }
            if (escaped) {
              return "|";
            } else {
              return " |";
            }
          }), cells = row.split(/ \|/);
          var i2 = 0;
          if (!cells[0].trim()) {
            cells.shift();
          }
          if (!cells[cells.length - 1].trim()) {
            cells.pop();
          }
          if (cells.length > count) {
            cells.splice(count);
          } else {
            while (cells.length < count) {
              cells.push("");
            }
          }
          for (; i2 < cells.length; i2++) {
            cells[i2] = cells[i2].trim().replace(/\\\|/g, "|");
          }
          return cells;
        }
        function rtrim$1(str, c2, invert2) {
          var l = str.length;
          if (l === 0) {
            return "";
          }
          var suffLen = 0;
          while (suffLen < l) {
            var currChar = str.charAt(l - suffLen - 1);
            if (currChar === c2 && !invert2) {
              suffLen++;
            } else if (currChar !== c2 && invert2) {
              suffLen++;
            } else {
              break;
            }
          }
          return str.substr(0, l - suffLen);
        }
        function findClosingBracket$1(str, b2) {
          if (str.indexOf(b2[1]) === -1) {
            return -1;
          }
          var l = str.length;
          var level = 0, i2 = 0;
          for (; i2 < l; i2++) {
            if (str[i2] === "\\") {
              i2++;
            } else if (str[i2] === b2[0]) {
              level++;
            } else if (str[i2] === b2[1]) {
              level--;
              if (level < 0) {
                return i2;
              }
            }
          }
          return -1;
        }
        function checkSanitizeDeprecation$1(opt) {
          if (opt && opt.sanitize && !opt.silent) {
            console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
          }
        }
        function repeatString$1(pattern, count) {
          if (count < 1) {
            return "";
          }
          var result6 = "";
          while (count > 1) {
            if (count & 1) {
              result6 += pattern;
            }
            count >>= 1;
            pattern += pattern;
          }
          return result6 + pattern;
        }
        var helpers = {
          escape: escape$2,
          unescape: unescape$1,
          edit: edit$1,
          cleanUrl: cleanUrl$1,
          resolveUrl: resolveUrl,
          noopTest: noopTest$1,
          merge: merge$2,
          splitCells: splitCells$1,
          rtrim: rtrim$1,
          findClosingBracket: findClosingBracket$1,
          checkSanitizeDeprecation: checkSanitizeDeprecation$1,
          repeatString: repeatString$1
        };
        var defaults$4 = defaults$5.exports.defaults;
        var rtrim = helpers.rtrim, splitCells = helpers.splitCells, _escape = helpers.escape, findClosingBracket = helpers.findClosingBracket;
        function outputLink(cap, link2, raw, lexer) {
          var href = link2.href;
          var title = link2.title ? _escape(link2.title) : null;
          var text = cap[1].replace(/\\([\[\]])/g, "$1");
          if (cap[0].charAt(0) !== "!") {
            lexer.state.inLink = true;
            var token = {
              type: "link",
              raw: raw,
              href: href,
              title: title,
              text: text,
              tokens: lexer.inlineTokens(text, [])
            };
            lexer.state.inLink = false;
            return token;
          } else {
            return {
              type: "image",
              raw: raw,
              href: href,
              title: title,
              text: _escape(text)
            };
          }
        }
        function indentCodeCompensation(raw, text) {
          var matchIndentToCode = raw.match(/^(\s+)(?:```)/);
          if (matchIndentToCode === null) {
            return text;
          }
          var indentToCode = matchIndentToCode[1];
          return text.split("\n").map(function(node) {
            var matchIndentInNode = node.match(/^\s+/);
            if (matchIndentInNode === null) {
              return node;
            }
            var indentInNode = matchIndentInNode[0];
            if (indentInNode.length >= indentToCode.length) {
              return node.slice(indentToCode.length);
            }
            return node;
          }).join("\n");
        }
        var Tokenizer_1 = /* @__PURE__ */ function() {
          function Tokenizer2(options) {
            this.options = options || defaults$4;
          }
          var _proto = Tokenizer2.prototype;
          _proto.space = function space(src) {
            var cap = this.rules.block.newline.exec(src);
            if (cap) {
              if (cap[0].length > 1) {
                return {
                  type: "space",
                  raw: cap[0]
                };
              }
              return {
                raw: "\n"
              };
            }
          };
          _proto.code = function code(src) {
            var cap = this.rules.block.code.exec(src);
            if (cap) {
              var text = cap[0].replace(/^ {1,4}/gm, "");
              return {
                type: "code",
                raw: cap[0],
                codeBlockStyle: "indented",
                text: !this.options.pedantic ? rtrim(text, "\n") : text
              };
            }
          };
          _proto.fences = function fences(src) {
            var cap = this.rules.block.fences.exec(src);
            if (cap) {
              var raw = cap[0];
              var text = indentCodeCompensation(raw, cap[3] || "");
              return {
                type: "code",
                raw: raw,
                lang: cap[2] ? cap[2].trim() : cap[2],
                text: text
              };
            }
          };
          _proto.heading = function heading(src) {
            var cap = this.rules.block.heading.exec(src);
            if (cap) {
              var text = cap[2].trim();
              if (/#$/.test(text)) {
                var trimmed = rtrim(text, "#");
                if (this.options.pedantic) {
                  text = trimmed.trim();
                } else if (!trimmed || / $/.test(trimmed)) {
                  text = trimmed.trim();
                }
              }
              var token = {
                type: "heading",
                raw: cap[0],
                depth: cap[1].length,
                text: text,
                tokens: []
              };
              this.lexer.inline(token.text, token.tokens);
              return token;
            }
          };
          _proto.hr = function hr(src) {
            var cap = this.rules.block.hr.exec(src);
            if (cap) {
              return {
                type: "hr",
                raw: cap[0]
              };
            }
          };
          _proto.blockquote = function blockquote(src) {
            var cap = this.rules.block.blockquote.exec(src);
            if (cap) {
              var text = cap[0].replace(/^ *> ?/gm, "");
              return {
                type: "blockquote",
                raw: cap[0],
                tokens: this.lexer.blockTokens(text, []),
                text: text
              };
            }
          };
          _proto.list = function list(src) {
            var cap = this.rules.block.list.exec(src);
            if (cap) {
              var raw, istask, ischecked, indent, i2, blankLine, endsWithBlankLine, line, lines, itemContents;
              var bull = cap[1].trim();
              var isordered = bull.length > 1;
              var list2 = {
                type: "list",
                raw: "",
                ordered: isordered,
                start: isordered ? +bull.slice(0, -1) : "",
                loose: false,
                items: []
              };
              bull = isordered ? "\\d{1,9}\\" + bull.slice(-1) : "\\" + bull;
              if (this.options.pedantic) {
                bull = isordered ? bull : "[*+-]";
              }
              var itemRegex = new RegExp("^( {0,3}" + bull + ")((?: [^\\n]*| *)(?:\\n[^\\n]*)*(?:\\n|$))");
              while (src) {
                if (this.rules.block.hr.test(src)) {
                  break;
                }
                if (!(cap = itemRegex.exec(src))) {
                  break;
                }
                lines = cap[2].split("\n");
                if (this.options.pedantic) {
                  indent = 2;
                  itemContents = lines[0].trimLeft();
                } else {
                  indent = cap[2].search(/[^ ]/);
                  indent = cap[1].length + (indent > 4 ? 1 : indent);
                  itemContents = lines[0].slice(indent - cap[1].length);
                }
                blankLine = false;
                raw = cap[0];
                if (!lines[0] && /^ *$/.test(lines[1])) {
                  raw = cap[1] + lines.slice(0, 2).join("\n") + "\n";
                  list2.loose = true;
                  lines = [];
                }
                var nextBulletRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d{1,9}[.)])");
                for (i2 = 1; i2 < lines.length; i2++) {
                  line = lines[i2];
                  if (this.options.pedantic) {
                    line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
                  }
                  if (nextBulletRegex.test(line)) {
                    raw = cap[1] + lines.slice(0, i2).join("\n") + "\n";
                    break;
                  }
                  if (!blankLine) {
                    if (!line.trim()) {
                      blankLine = true;
                    }
                    if (line.search(/[^ ]/) >= indent) {
                      itemContents += "\n" + line.slice(indent);
                    } else {
                      itemContents += "\n" + line;
                    }
                    continue;
                  }
                  if (line.search(/[^ ]/) >= indent || !line.trim()) {
                    itemContents += "\n" + line.slice(indent);
                    continue;
                  } else {
                    raw = cap[1] + lines.slice(0, i2).join("\n") + "\n";
                    break;
                  }
                }
                if (!list2.loose) {
                  if (endsWithBlankLine) {
                    list2.loose = true;
                  } else if (/\n *\n *$/.test(raw)) {
                    endsWithBlankLine = true;
                  }
                }
                if (this.options.gfm) {
                  istask = /^\[[ xX]\] /.exec(itemContents);
                  if (istask) {
                    ischecked = istask[0] !== "[ ] ";
                    itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
                  }
                }
                list2.items.push({
                  type: "list_item",
                  raw: raw,
                  task: !!istask,
                  checked: ischecked,
                  loose: false,
                  text: itemContents
                });
                list2.raw += raw;
                src = src.slice(raw.length);
              }
              list2.items[list2.items.length - 1].raw = raw.trimRight();
              list2.items[list2.items.length - 1].text = itemContents.trimRight();
              list2.raw = list2.raw.trimRight();
              var l = list2.items.length;
              for (i2 = 0; i2 < l; i2++) {
                this.lexer.state.top = false;
                list2.items[i2].tokens = this.lexer.blockTokens(list2.items[i2].text, []);
                if (list2.items[i2].tokens.some(function(t) {
                  return t.type === "space";
                })) {
                  list2.loose = true;
                  list2.items[i2].loose = true;
                }
              }
              return list2;
            }
          };
          _proto.html = function html2(src) {
            var cap = this.rules.block.html.exec(src);
            if (cap) {
              var token = {
                type: "html",
                raw: cap[0],
                pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
                text: cap[0]
              };
              if (this.options.sanitize) {
                token.type = "paragraph";
                token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);
                token.tokens = [];
                this.lexer.inline(token.text, token.tokens);
              }
              return token;
            }
          };
          _proto.def = function def(src) {
            var cap = this.rules.block.def.exec(src);
            if (cap) {
              if (cap[3])
                cap[3] = cap[3].substring(1, cap[3].length - 1);
              var tag = cap[1].toLowerCase().replace(/\s+/g, " ");
              return {
                type: "def",
                tag: tag,
                raw: cap[0],
                href: cap[2],
                title: cap[3]
              };
            }
          };
          _proto.table = function table(src) {
            var cap = this.rules.block.table.exec(src);
            if (cap) {
              var item = {
                type: "table",
                header: splitCells(cap[1]).map(function(c2) {
                  return {
                    text: c2
                  };
                }),
                align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
                rows: cap[3] ? cap[3].replace(/\n$/, "").split("\n") : []
              };
              if (item.header.length === item.align.length) {
                item.raw = cap[0];
                var l = item.align.length;
                var i2, j, k, row;
                for (i2 = 0; i2 < l; i2++) {
                  if (/^ *-+: *$/.test(item.align[i2])) {
                    item.align[i2] = "right";
                  } else if (/^ *:-+: *$/.test(item.align[i2])) {
                    item.align[i2] = "center";
                  } else if (/^ *:-+ *$/.test(item.align[i2])) {
                    item.align[i2] = "left";
                  } else {
                    item.align[i2] = null;
                  }
                }
                l = item.rows.length;
                for (i2 = 0; i2 < l; i2++) {
                  item.rows[i2] = splitCells(item.rows[i2], item.header.length).map(function(c2) {
                    return {
                      text: c2
                    };
                  });
                }
                l = item.header.length;
                for (j = 0; j < l; j++) {
                  item.header[j].tokens = [];
                  this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
                }
                l = item.rows.length;
                for (j = 0; j < l; j++) {
                  row = item.rows[j];
                  for (k = 0; k < row.length; k++) {
                    row[k].tokens = [];
                    this.lexer.inlineTokens(row[k].text, row[k].tokens);
                  }
                }
                return item;
              }
            }
          };
          _proto.lheading = function lheading(src) {
            var cap = this.rules.block.lheading.exec(src);
            if (cap) {
              var token = {
                type: "heading",
                raw: cap[0],
                depth: cap[2].charAt(0) === "=" ? 1 : 2,
                text: cap[1],
                tokens: []
              };
              this.lexer.inline(token.text, token.tokens);
              return token;
            }
          };
          _proto.paragraph = function paragraph(src) {
            var cap = this.rules.block.paragraph.exec(src);
            if (cap) {
              var token = {
                type: "paragraph",
                raw: cap[0],
                text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
                tokens: []
              };
              this.lexer.inline(token.text, token.tokens);
              return token;
            }
          };
          _proto.text = function text(src) {
            var cap = this.rules.block.text.exec(src);
            if (cap) {
              var token = {
                type: "text",
                raw: cap[0],
                text: cap[0],
                tokens: []
              };
              this.lexer.inline(token.text, token.tokens);
              return token;
            }
          };
          _proto.escape = function escape2(src) {
            var cap = this.rules.inline.escape.exec(src);
            if (cap) {
              return {
                type: "escape",
                raw: cap[0],
                text: _escape(cap[1])
              };
            }
          };
          _proto.tag = function tag(src) {
            var cap = this.rules.inline.tag.exec(src);
            if (cap) {
              if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
                this.lexer.state.inLink = true;
              } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
                this.lexer.state.inLink = false;
              }
              if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
                this.lexer.state.inRawBlock = true;
              } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
                this.lexer.state.inRawBlock = false;
              }
              return {
                type: this.options.sanitize ? "text" : "html",
                raw: cap[0],
                inLink: this.lexer.state.inLink,
                inRawBlock: this.lexer.state.inRawBlock,
                text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
              };
            }
          };
          _proto.link = function link2(src) {
            var cap = this.rules.inline.link.exec(src);
            if (cap) {
              var trimmedUrl = cap[2].trim();
              if (!this.options.pedantic && /^</.test(trimmedUrl)) {
                if (!/>$/.test(trimmedUrl)) {
                  return;
                }
                var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
                  return;
                }
              } else {
                var lastParenIndex = findClosingBracket(cap[2], "()");
                if (lastParenIndex > -1) {
                  var start2 = cap[0].indexOf("!") === 0 ? 5 : 4;
                  var linkLen = start2 + cap[1].length + lastParenIndex;
                  cap[2] = cap[2].substring(0, lastParenIndex);
                  cap[0] = cap[0].substring(0, linkLen).trim();
                  cap[3] = "";
                }
              }
              var href = cap[2];
              var title = "";
              if (this.options.pedantic) {
                var link3 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
                if (link3) {
                  href = link3[1];
                  title = link3[3];
                }
              } else {
                title = cap[3] ? cap[3].slice(1, -1) : "";
              }
              href = href.trim();
              if (/^</.test(href)) {
                if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
                  href = href.slice(1);
                } else {
                  href = href.slice(1, -1);
                }
              }
              return outputLink(cap, {
                href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
                title: title ? title.replace(this.rules.inline._escapes, "$1") : title
              }, cap[0], this.lexer);
            }
          };
          _proto.reflink = function reflink(src, links) {
            var cap;
            if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
              var link2 = (cap[2] || cap[1]).replace(/\s+/g, " ");
              link2 = links[link2.toLowerCase()];
              if (!link2 || !link2.href) {
                var text = cap[0].charAt(0);
                return {
                  type: "text",
                  raw: text,
                  text: text
                };
              }
              return outputLink(cap, link2, cap[0], this.lexer);
            }
          };
          _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
            if (prevChar === void 0) {
              prevChar = "";
            }
            var match = this.rules.inline.emStrong.lDelim.exec(src);
            if (!match)
              return;
            if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/))
              return;
            var nextChar = match[1] || match[2] || "";
            if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
              var lLength = match[0].length - 1;
              var rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
              var endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
              endReg.lastIndex = 0;
              maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
              while ((match = endReg.exec(maskedSrc)) != null) {
                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
                if (!rDelim)
                  continue;
                rLength = rDelim.length;
                if (match[3] || match[4]) {
                  delimTotal += rLength;
                  continue;
                } else if (match[5] || match[6]) {
                  if (lLength % 3 && !((lLength + rLength) % 3)) {
                    midDelimTotal += rLength;
                    continue;
                  }
                }
                delimTotal -= rLength;
                if (delimTotal > 0)
                  continue;
                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
                if (Math.min(lLength, rLength) % 2) {
                  var _text = src.slice(1, lLength + match.index + rLength);
                  return {
                    type: "em",
                    raw: src.slice(0, lLength + match.index + rLength + 1),
                    text: _text,
                    tokens: this.lexer.inlineTokens(_text, [])
                  };
                }
                var text = src.slice(2, lLength + match.index + rLength - 1);
                return {
                  type: "strong",
                  raw: src.slice(0, lLength + match.index + rLength + 1),
                  text: text,
                  tokens: this.lexer.inlineTokens(text, [])
                };
              }
            }
          };
          _proto.codespan = function codespan(src) {
            var cap = this.rules.inline.code.exec(src);
            if (cap) {
              var text = cap[2].replace(/\n/g, " ");
              var hasNonSpaceChars = /[^ ]/.test(text);
              var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
              if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
                text = text.substring(1, text.length - 1);
              }
              text = _escape(text, true);
              return {
                type: "codespan",
                raw: cap[0],
                text: text
              };
            }
          };
          _proto.br = function br(src) {
            var cap = this.rules.inline.br.exec(src);
            if (cap) {
              return {
                type: "br",
                raw: cap[0]
              };
            }
          };
          _proto.del = function del(src) {
            var cap = this.rules.inline.del.exec(src);
            if (cap) {
              return {
                type: "del",
                raw: cap[0],
                text: cap[2],
                tokens: this.lexer.inlineTokens(cap[2], [])
              };
            }
          };
          _proto.autolink = function autolink(src, mangle2) {
            var cap = this.rules.inline.autolink.exec(src);
            if (cap) {
              var text, href;
              if (cap[2] === "@") {
                text = _escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);
                href = "mailto:" + text;
              } else {
                text = _escape(cap[1]);
                href = text;
              }
              return {
                type: "link",
                raw: cap[0],
                text: text,
                href: href,
                tokens: [{
                  type: "text",
                  raw: text,
                  text: text
                }]
              };
            }
          };
          _proto.url = function url(src, mangle2) {
            var cap;
            if (cap = this.rules.inline.url.exec(src)) {
              var text, href;
              if (cap[2] === "@") {
                text = _escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);
                href = "mailto:" + text;
              } else {
                var prevCapZero;
                do {
                  prevCapZero = cap[0];
                  cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
                } while (prevCapZero !== cap[0]);
                text = _escape(cap[0]);
                if (cap[1] === "www.") {
                  href = "http://" + text;
                } else {
                  href = text;
                }
              }
              return {
                type: "link",
                raw: cap[0],
                text: text,
                href: href,
                tokens: [{
                  type: "text",
                  raw: text,
                  text: text
                }]
              };
            }
          };
          _proto.inlineText = function inlineText(src, smartypants2) {
            var cap = this.rules.inline.text.exec(src);
            if (cap) {
              var text;
              if (this.lexer.state.inRawBlock) {
                text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
              } else {
                text = _escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
              }
              return {
                type: "text",
                raw: cap[0],
                text: text
              };
            }
          };
          return Tokenizer2;
        }();
        var noopTest = helpers.noopTest, edit = helpers.edit, merge$1 = helpers.merge;
        var block$1 = {
          newline: /^(?: *(?:\n|$))+/,
          code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
          fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
          hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
          heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
          blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
          list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
          html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
          def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
          table: noopTest,
          lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
          _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
          text: /^[^\n]+/
        };
        block$1._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
        block$1._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
        block$1.def = edit(block$1.def).replace("label", block$1._label).replace("title", block$1._title).getRegex();
        block$1.bullet = /(?:[*+-]|\d{1,9}[.)])/;
        block$1.listItemStart = edit(/^( *)(bull) */).replace("bull", block$1.bullet).getRegex();
        block$1.list = edit(block$1.list).replace(/bull/g, block$1.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block$1.def.source + ")").getRegex();
        block$1._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
        block$1._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
        block$1.html = edit(block$1.html, "i").replace("comment", block$1._comment).replace("tag", block$1._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
        block$1.paragraph = edit(block$1._paragraph).replace("hr", block$1.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block$1._tag).getRegex();
        block$1.blockquote = edit(block$1.blockquote).replace("paragraph", block$1.paragraph).getRegex();
        block$1.normal = merge$1({}, block$1);
        block$1.gfm = merge$1({}, block$1.normal, {
          table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
        });
        block$1.gfm.table = edit(block$1.gfm.table).replace("hr", block$1.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block$1._tag).getRegex();
        block$1.pedantic = merge$1({}, block$1.normal, {
          html: edit("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment", block$1._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
          def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
          heading: /^(#{1,6})(.*)(?:\n+|$)/,
          fences: noopTest,
          paragraph: edit(block$1.normal._paragraph).replace("hr", block$1.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block$1.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
        });
        var inline$1 = {
          escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
          autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
          url: noopTest,
          tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
          link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
          reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
          nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
          reflinkSearch: "reflink|nolink(?!\\()",
          emStrong: {
            lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
            rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
            rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
          },
          code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
          br: /^( {2,}|\\)\n(?!\s*$)/,
          del: noopTest,
          text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
          punctuation: /^([\spunctuation])/
        };
        inline$1._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
        inline$1.punctuation = edit(inline$1.punctuation).replace(/punctuation/g, inline$1._punctuation).getRegex();
        inline$1.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
        inline$1.escapedEmSt = /\\\*|\\_/g;
        inline$1._comment = edit(block$1._comment).replace("(?:-->|$)", "-->").getRegex();
        inline$1.emStrong.lDelim = edit(inline$1.emStrong.lDelim).replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1.emStrong.rDelimAst = edit(inline$1.emStrong.rDelimAst, "g").replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1.emStrong.rDelimUnd = edit(inline$1.emStrong.rDelimUnd, "g").replace(/punct/g, inline$1._punctuation).getRegex();
        inline$1._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
        inline$1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
        inline$1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
        inline$1.autolink = edit(inline$1.autolink).replace("scheme", inline$1._scheme).replace("email", inline$1._email).getRegex();
        inline$1._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
        inline$1.tag = edit(inline$1.tag).replace("comment", inline$1._comment).replace("attribute", inline$1._attribute).getRegex();
        inline$1._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
        inline$1._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
        inline$1._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
        inline$1.link = edit(inline$1.link).replace("label", inline$1._label).replace("href", inline$1._href).replace("title", inline$1._title).getRegex();
        inline$1.reflink = edit(inline$1.reflink).replace("label", inline$1._label).getRegex();
        inline$1.reflinkSearch = edit(inline$1.reflinkSearch, "g").replace("reflink", inline$1.reflink).replace("nolink", inline$1.nolink).getRegex();
        inline$1.normal = merge$1({}, inline$1);
        inline$1.pedantic = merge$1({}, inline$1.normal, {
          strong: {
            start: /^__|\*\*/,
            middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
            endAst: /\*\*(?!\*)/g,
            endUnd: /__(?!_)/g
          },
          em: {
            start: /^_|\*/,
            middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
            endAst: /\*(?!\*)/g,
            endUnd: /_(?!_)/g
          },
          link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline$1._label).getRegex(),
          reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline$1._label).getRegex()
        });
        inline$1.gfm = merge$1({}, inline$1.normal, {
          escape: edit(inline$1.escape).replace("])", "~|])").getRegex(),
          _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
          url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
          _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
          del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
          text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
        });
        inline$1.gfm.url = edit(inline$1.gfm.url, "i").replace("email", inline$1.gfm._extended_email).getRegex();
        inline$1.breaks = merge$1({}, inline$1.gfm, {
          br: edit(inline$1.br).replace("{2,}", "*").getRegex(),
          text: edit(inline$1.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
        });
        var rules = {
          block: block$1,
          inline: inline$1
        };
        var Tokenizer$1 = Tokenizer_1;
        var defaults$3 = defaults$5.exports.defaults;
        var block = rules.block, inline = rules.inline;
        var repeatString = helpers.repeatString;
        function smartypants(text) {
          return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
        }
        function mangle(text) {
          var out = "", i2, ch;
          var l = text.length;
          for (i2 = 0; i2 < l; i2++) {
            ch = text.charCodeAt(i2);
            if (Math.random() > 0.5) {
              ch = "x" + ch.toString(16);
            }
            out += "&#" + ch + ";";
          }
          return out;
        }
        var Lexer_1 = /* @__PURE__ */ function() {
          function Lexer2(options) {
            this.tokens = [];
            this.tokens.links = Object.create(null);
            this.options = options || defaults$3;
            this.options.tokenizer = this.options.tokenizer || new Tokenizer$1();
            this.tokenizer = this.options.tokenizer;
            this.tokenizer.options = this.options;
            this.tokenizer.lexer = this;
            this.inlineQueue = [];
            this.state = {
              inLink: false,
              inRawBlock: false,
              top: true
            };
            var rules2 = {
              block: block.normal,
              inline: inline.normal
            };
            if (this.options.pedantic) {
              rules2.block = block.pedantic;
              rules2.inline = inline.pedantic;
            } else if (this.options.gfm) {
              rules2.block = block.gfm;
              if (this.options.breaks) {
                rules2.inline = inline.breaks;
              } else {
                rules2.inline = inline.gfm;
              }
            }
            this.tokenizer.rules = rules2;
          }
          Lexer2.lex = function lex(src, options) {
            var lexer = new Lexer2(options);
            return lexer.lex(src);
          };
          Lexer2.lexInline = function lexInline(src, options) {
            var lexer = new Lexer2(options);
            return lexer.inlineTokens(src);
          };
          var _proto = Lexer2.prototype;
          _proto.lex = function lex(src) {
            src = src.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
            this.blockTokens(src, this.tokens);
            var next;
            while (next = this.inlineQueue.shift()) {
              this.inlineTokens(next.src, next.tokens);
            }
            return this.tokens;
          };
          _proto.blockTokens = function blockTokens(src, tokens) {
            var _this = this;
            if (tokens === void 0) {
              tokens = [];
            }
            if (this.options.pedantic) {
              src = src.replace(/^ +$/gm, "");
            }
            var token, lastToken, cutSrc, lastParagraphClipped;
            while (src) {
              if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function(extTokenizer) {
                if (token = extTokenizer.call({
                  lexer: _this
                }, src, tokens)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  return true;
                }
                return false;
              })) {
                continue;
              }
              if (token = this.tokenizer.space(src)) {
                src = src.substring(token.raw.length);
                if (token.type) {
                  tokens.push(token);
                }
                continue;
              }
              if (token = this.tokenizer.code(src)) {
                src = src.substring(token.raw.length);
                lastToken = tokens[tokens.length - 1];
                if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
                  lastToken.raw += "\n" + token.raw;
                  lastToken.text += "\n" + token.text;
                  this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                } else {
                  tokens.push(token);
                }
                continue;
              }
              if (token = this.tokenizer.fences(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.heading(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.hr(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.blockquote(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.list(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.html(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.def(src)) {
                src = src.substring(token.raw.length);
                lastToken = tokens[tokens.length - 1];
                if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
                  lastToken.raw += "\n" + token.raw;
                  lastToken.text += "\n" + token.raw;
                  this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                } else if (!this.tokens.links[token.tag]) {
                  this.tokens.links[token.tag] = {
                    href: token.href,
                    title: token.title
                  };
                }
                continue;
              }
              if (token = this.tokenizer.table(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.lheading(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              cutSrc = src;
              if (this.options.extensions && this.options.extensions.startBlock) {
                (function() {
                  var startIndex = Infinity;
                  var tempSrc = src.slice(1);
                  var tempStart = void 0;
                  _this.options.extensions.startBlock.forEach(function(getStartIndex) {
                    tempStart = getStartIndex.call({
                      lexer: this
                    }, tempSrc);
                    if (typeof tempStart === "number" && tempStart >= 0) {
                      startIndex = Math.min(startIndex, tempStart);
                    }
                  });
                  if (startIndex < Infinity && startIndex >= 0) {
                    cutSrc = src.substring(0, startIndex + 1);
                  }
                })();
              }
              if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
                lastToken = tokens[tokens.length - 1];
                if (lastParagraphClipped && lastToken.type === "paragraph") {
                  lastToken.raw += "\n" + token.raw;
                  lastToken.text += "\n" + token.text;
                  this.inlineQueue.pop();
                  this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                } else {
                  tokens.push(token);
                }
                lastParagraphClipped = cutSrc.length !== src.length;
                src = src.substring(token.raw.length);
                continue;
              }
              if (token = this.tokenizer.text(src)) {
                src = src.substring(token.raw.length);
                lastToken = tokens[tokens.length - 1];
                if (lastToken && lastToken.type === "text") {
                  lastToken.raw += "\n" + token.raw;
                  lastToken.text += "\n" + token.text;
                  this.inlineQueue.pop();
                  this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                } else {
                  tokens.push(token);
                }
                continue;
              }
              if (src) {
                var errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
                if (this.options.silent) {
                  console.error(errMsg);
                  break;
                } else {
                  throw new Error(errMsg);
                }
              }
            }
            this.state.top = true;
            return tokens;
          };
          _proto.inline = function inline2(src, tokens) {
            this.inlineQueue.push({
              src: src,
              tokens: tokens
            });
          };
          _proto.inlineTokens = function inlineTokens(src, tokens) {
            var _this2 = this;
            if (tokens === void 0) {
              tokens = [];
            }
            var token, lastToken, cutSrc;
            var maskedSrc = src;
            var match;
            var keepPrevChar, prevChar;
            if (this.tokens.links) {
              var links = Object.keys(this.tokens.links);
              if (links.length > 0) {
                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
                  if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
                    maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                  }
                }
              }
            }
            while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
              maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
            }
            while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
              maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
            }
            while (src) {
              if (!keepPrevChar) {
                prevChar = "";
              }
              keepPrevChar = false;
              if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function(extTokenizer) {
                if (token = extTokenizer.call({
                  lexer: _this2
                }, src, tokens)) {
                  src = src.substring(token.raw.length);
                  tokens.push(token);
                  return true;
                }
                return false;
              })) {
                continue;
              }
              if (token = this.tokenizer.escape(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.tag(src)) {
                src = src.substring(token.raw.length);
                lastToken = tokens[tokens.length - 1];
                if (lastToken && token.type === "text" && lastToken.type === "text") {
                  lastToken.raw += token.raw;
                  lastToken.text += token.text;
                } else {
                  tokens.push(token);
                }
                continue;
              }
              if (token = this.tokenizer.link(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.reflink(src, this.tokens.links)) {
                src = src.substring(token.raw.length);
                lastToken = tokens[tokens.length - 1];
                if (lastToken && token.type === "text" && lastToken.type === "text") {
                  lastToken.raw += token.raw;
                  lastToken.text += token.text;
                } else {
                  tokens.push(token);
                }
                continue;
              }
              if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.codespan(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.br(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.del(src)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (token = this.tokenizer.autolink(src, mangle)) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
                src = src.substring(token.raw.length);
                tokens.push(token);
                continue;
              }
              cutSrc = src;
              if (this.options.extensions && this.options.extensions.startInline) {
                (function() {
                  var startIndex = Infinity;
                  var tempSrc = src.slice(1);
                  var tempStart = void 0;
                  _this2.options.extensions.startInline.forEach(function(getStartIndex) {
                    tempStart = getStartIndex.call({
                      lexer: this
                    }, tempSrc);
                    if (typeof tempStart === "number" && tempStart >= 0) {
                      startIndex = Math.min(startIndex, tempStart);
                    }
                  });
                  if (startIndex < Infinity && startIndex >= 0) {
                    cutSrc = src.substring(0, startIndex + 1);
                  }
                })();
              }
              if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
                src = src.substring(token.raw.length);
                if (token.raw.slice(-1) !== "_") {
                  prevChar = token.raw.slice(-1);
                }
                keepPrevChar = true;
                lastToken = tokens[tokens.length - 1];
                if (lastToken && lastToken.type === "text") {
                  lastToken.raw += token.raw;
                  lastToken.text += token.text;
                } else {
                  tokens.push(token);
                }
                continue;
              }
              if (src) {
                var errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
                if (this.options.silent) {
                  console.error(errMsg);
                  break;
                } else {
                  throw new Error(errMsg);
                }
              }
            }
            return tokens;
          };
          _createClass2(Lexer2, null, [{
            key: "rules",
            get: function get3() {
              return {
                block: block,
                inline: inline
              };
            }
          }]);
          return Lexer2;
        }();
        var defaults$2 = defaults$5.exports.defaults;
        var cleanUrl = helpers.cleanUrl, escape$1 = helpers.escape;
        var Renderer_1 = /* @__PURE__ */ function() {
          function Renderer2(options) {
            this.options = options || defaults$2;
          }
          var _proto = Renderer2.prototype;
          _proto.code = function code(_code, infostring, escaped) {
            var lang = (infostring || "").match(/\S*/)[0];
            if (this.options.highlight) {
              var out = this.options.highlight(_code, lang);
              if (out != null && out !== _code) {
                escaped = true;
                _code = out;
              }
            }
            _code = _code.replace(/\n$/, "") + "\n";
            if (!lang) {
              return "<pre><code>" + (escaped ? _code : escape$1(_code, true)) + "</code></pre>\n";
            }
            return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + "</code></pre>\n";
          };
          _proto.blockquote = function blockquote(quote) {
            return "<blockquote>\n" + quote + "</blockquote>\n";
          };
          _proto.html = function html2(_html) {
            return _html;
          };
          _proto.heading = function heading(text, level, raw, slugger) {
            if (this.options.headerIds) {
              return "<h" + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + "</h" + level + ">\n";
            }
            return "<h" + level + ">" + text + "</h" + level + ">\n";
          };
          _proto.hr = function hr() {
            return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
          };
          _proto.list = function list(body, ordered, start2) {
            var type3 = ordered ? "ol" : "ul", startatt = ordered && start2 !== 1 ? ' start="' + start2 + '"' : "";
            return "<" + type3 + startatt + ">\n" + body + "</" + type3 + ">\n";
          };
          _proto.listitem = function listitem(text) {
            return "<li>" + text + "</li>\n";
          };
          _proto.checkbox = function checkbox(checked) {
            return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
          };
          _proto.paragraph = function paragraph(text) {
            return "<p>" + text + "</p>\n";
          };
          _proto.table = function table(header, body) {
            if (body)
              body = "<tbody>" + body + "</tbody>";
            return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
          };
          _proto.tablerow = function tablerow(content) {
            return "<tr>\n" + content + "</tr>\n";
          };
          _proto.tablecell = function tablecell(content, flags) {
            var type3 = flags.header ? "th" : "td";
            var tag = flags.align ? "<" + type3 + ' align="' + flags.align + '">' : "<" + type3 + ">";
            return tag + content + "</" + type3 + ">\n";
          };
          _proto.strong = function strong(text) {
            return "<strong>" + text + "</strong>";
          };
          _proto.em = function em(text) {
            return "<em>" + text + "</em>";
          };
          _proto.codespan = function codespan(text) {
            return "<code>" + text + "</code>";
          };
          _proto.br = function br() {
            return this.options.xhtml ? "<br/>" : "<br>";
          };
          _proto.del = function del(text) {
            return "<del>" + text + "</del>";
          };
          _proto.link = function link2(href, title, text) {
            href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
            if (href === null) {
              return text;
            }
            var out = '<a href="' + escape$1(href) + '"';
            if (title) {
              out += ' title="' + title + '"';
            }
            out += ">" + text + "</a>";
            return out;
          };
          _proto.image = function image(href, title, text) {
            href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
            if (href === null) {
              return text;
            }
            var out = '<img src="' + href + '" alt="' + text + '"';
            if (title) {
              out += ' title="' + title + '"';
            }
            out += this.options.xhtml ? "/>" : ">";
            return out;
          };
          _proto.text = function text(_text) {
            return _text;
          };
          return Renderer2;
        }();
        var TextRenderer_1 = /* @__PURE__ */ function() {
          function TextRenderer2() {
          }
          var _proto = TextRenderer2.prototype;
          _proto.strong = function strong(text) {
            return text;
          };
          _proto.em = function em(text) {
            return text;
          };
          _proto.codespan = function codespan(text) {
            return text;
          };
          _proto.del = function del(text) {
            return text;
          };
          _proto.html = function html2(text) {
            return text;
          };
          _proto.text = function text(_text) {
            return _text;
          };
          _proto.link = function link2(href, title, text) {
            return "" + text;
          };
          _proto.image = function image(href, title, text) {
            return "" + text;
          };
          _proto.br = function br() {
            return "";
          };
          return TextRenderer2;
        }();
        var Slugger_1 = /* @__PURE__ */ function() {
          function Slugger2() {
            this.seen = {};
          }
          var _proto = Slugger2.prototype;
          _proto.serialize = function serialize(value2) {
            return value2.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
          };
          _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
            var slug = originalSlug;
            var occurenceAccumulator = 0;
            if (this.seen.hasOwnProperty(slug)) {
              occurenceAccumulator = this.seen[originalSlug];
              do {
                occurenceAccumulator++;
                slug = originalSlug + "-" + occurenceAccumulator;
              } while (this.seen.hasOwnProperty(slug));
            }
            if (!isDryRun) {
              this.seen[originalSlug] = occurenceAccumulator;
              this.seen[slug] = 0;
            }
            return slug;
          };
          _proto.slug = function slug(value2, options) {
            if (options === void 0) {
              options = {};
            }
            var slug2 = this.serialize(value2);
            return this.getNextSafeSlug(slug2, options.dryrun);
          };
          return Slugger2;
        }();
        var Renderer$1 = Renderer_1;
        var TextRenderer$1 = TextRenderer_1;
        var Slugger$1 = Slugger_1;
        var defaults$1 = defaults$5.exports.defaults;
        var unescape = helpers.unescape;
        var Parser_1 = /* @__PURE__ */ function() {
          function Parser2(options) {
            this.options = options || defaults$1;
            this.options.renderer = this.options.renderer || new Renderer$1();
            this.renderer = this.options.renderer;
            this.renderer.options = this.options;
            this.textRenderer = new TextRenderer$1();
            this.slugger = new Slugger$1();
          }
          Parser2.parse = function parse(tokens, options) {
            var parser2 = new Parser2(options);
            return parser2.parse(tokens);
          };
          Parser2.parseInline = function parseInline(tokens, options) {
            var parser2 = new Parser2(options);
            return parser2.parseInline(tokens);
          };
          var _proto = Parser2.prototype;
          _proto.parse = function parse(tokens, top) {
            if (top === void 0) {
              top = true;
            }
            var out = "", i2, j, k, l2, l3, row, cell, header, body, token, ordered, start2, loose, itemBody, item, checked, task, checkbox, ret;
            var l = tokens.length;
            for (i2 = 0; i2 < l; i2++) {
              token = tokens[i2];
              if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                ret = this.options.extensions.renderers[token.type].call({
                  parser: this
                }, token);
                if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
                  out += ret || "";
                  continue;
                }
              }
              switch (token.type) {
                case "space": {
                  continue;
                }
                case "hr": {
                  out += this.renderer.hr();
                  continue;
                }
                case "heading": {
                  out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
                  continue;
                }
                case "code": {
                  out += this.renderer.code(token.text, token.lang, token.escaped);
                  continue;
                }
                case "table": {
                  header = "";
                  cell = "";
                  l2 = token.header.length;
                  for (j = 0; j < l2; j++) {
                    cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {
                      header: true,
                      align: token.align[j]
                    });
                  }
                  header += this.renderer.tablerow(cell);
                  body = "";
                  l2 = token.rows.length;
                  for (j = 0; j < l2; j++) {
                    row = token.rows[j];
                    cell = "";
                    l3 = row.length;
                    for (k = 0; k < l3; k++) {
                      cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {
                        header: false,
                        align: token.align[k]
                      });
                    }
                    body += this.renderer.tablerow(cell);
                  }
                  out += this.renderer.table(header, body);
                  continue;
                }
                case "blockquote": {
                  body = this.parse(token.tokens);
                  out += this.renderer.blockquote(body);
                  continue;
                }
                case "list": {
                  ordered = token.ordered;
                  start2 = token.start;
                  loose = token.loose;
                  l2 = token.items.length;
                  body = "";
                  for (j = 0; j < l2; j++) {
                    item = token.items[j];
                    checked = item.checked;
                    task = item.task;
                    itemBody = "";
                    if (item.task) {
                      checkbox = this.renderer.checkbox(checked);
                      if (loose) {
                        if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                          item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                            item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                          }
                        } else {
                          item.tokens.unshift({
                            type: "text",
                            text: checkbox
                          });
                        }
                      } else {
                        itemBody += checkbox;
                      }
                    }
                    itemBody += this.parse(item.tokens, loose);
                    body += this.renderer.listitem(itemBody, task, checked);
                  }
                  out += this.renderer.list(body, ordered, start2);
                  continue;
                }
                case "html": {
                  out += this.renderer.html(token.text);
                  continue;
                }
                case "paragraph": {
                  out += this.renderer.paragraph(this.parseInline(token.tokens));
                  continue;
                }
                case "text": {
                  body = token.tokens ? this.parseInline(token.tokens) : token.text;
                  while (i2 + 1 < l && tokens[i2 + 1].type === "text") {
                    token = tokens[++i2];
                    body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
                  }
                  out += top ? this.renderer.paragraph(body) : body;
                  continue;
                }
                default: {
                  var errMsg = 'Token with "' + token.type + '" type was not found.';
                  if (this.options.silent) {
                    console.error(errMsg);
                    return;
                  } else {
                    throw new Error(errMsg);
                  }
                }
              }
            }
            return out;
          };
          _proto.parseInline = function parseInline(tokens, renderer) {
            renderer = renderer || this.renderer;
            var out = "", i2, token, ret;
            var l = tokens.length;
            for (i2 = 0; i2 < l; i2++) {
              token = tokens[i2];
              if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                ret = this.options.extensions.renderers[token.type].call({
                  parser: this
                }, token);
                if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
                  out += ret || "";
                  continue;
                }
              }
              switch (token.type) {
                case "escape": {
                  out += renderer.text(token.text);
                  break;
                }
                case "html": {
                  out += renderer.html(token.text);
                  break;
                }
                case "link": {
                  out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
                  break;
                }
                case "image": {
                  out += renderer.image(token.href, token.title, token.text);
                  break;
                }
                case "strong": {
                  out += renderer.strong(this.parseInline(token.tokens, renderer));
                  break;
                }
                case "em": {
                  out += renderer.em(this.parseInline(token.tokens, renderer));
                  break;
                }
                case "codespan": {
                  out += renderer.codespan(token.text);
                  break;
                }
                case "br": {
                  out += renderer.br();
                  break;
                }
                case "del": {
                  out += renderer.del(this.parseInline(token.tokens, renderer));
                  break;
                }
                case "text": {
                  out += renderer.text(token.text);
                  break;
                }
                default: {
                  var errMsg = 'Token with "' + token.type + '" type was not found.';
                  if (this.options.silent) {
                    console.error(errMsg);
                    return;
                  } else {
                    throw new Error(errMsg);
                  }
                }
              }
            }
            return out;
          };
          return Parser2;
        }();
        var Lexer = Lexer_1;
        var Parser = Parser_1;
        var Tokenizer = Tokenizer_1;
        var Renderer = Renderer_1;
        var TextRenderer = TextRenderer_1;
        var Slugger = Slugger_1;
        var merge3 = helpers.merge, checkSanitizeDeprecation = helpers.checkSanitizeDeprecation, escape = helpers.escape;
        var getDefaults = defaults$5.exports.getDefaults, changeDefaults = defaults$5.exports.changeDefaults, defaults = defaults$5.exports.defaults;
        function marked10(src, opt, callback) {
          if (typeof src === "undefined" || src === null) {
            throw new Error("marked(): input parameter is undefined or null");
          }
          if (typeof src !== "string") {
            throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
          }
          if (typeof opt === "function") {
            callback = opt;
            opt = null;
          }
          opt = merge3({}, marked10.defaults, opt || {});
          checkSanitizeDeprecation(opt);
          if (callback) {
            var highlight = opt.highlight;
            var tokens;
            try {
              tokens = Lexer.lex(src, opt);
            } catch (e3) {
              return callback(e3);
            }
            var done = function done2(err) {
              var out;
              if (!err) {
                try {
                  if (opt.walkTokens) {
                    marked10.walkTokens(tokens, opt.walkTokens);
                  }
                  out = Parser.parse(tokens, opt);
                } catch (e3) {
                  err = e3;
                }
              }
              opt.highlight = highlight;
              return err ? callback(err) : callback(null, out);
            };
            if (!highlight || highlight.length < 3) {
              return done();
            }
            delete opt.highlight;
            if (!tokens.length)
              return done();
            var pending = 0;
            marked10.walkTokens(tokens, function(token) {
              if (token.type === "code") {
                pending++;
                setTimeout(function() {
                  highlight(token.text, token.lang, function(err, code) {
                    if (err) {
                      return done(err);
                    }
                    if (code != null && code !== token.text) {
                      token.text = code;
                      token.escaped = true;
                    }
                    pending--;
                    if (pending === 0) {
                      done();
                    }
                  });
                }, 0);
              }
            });
            if (pending === 0) {
              done();
            }
            return;
          }
          try {
            var _tokens = Lexer.lex(src, opt);
            if (opt.walkTokens) {
              marked10.walkTokens(_tokens, opt.walkTokens);
            }
            return Parser.parse(_tokens, opt);
          } catch (e3) {
            e3.message += "\nPlease report this to https://github.com/markedjs/marked.";
            if (opt.silent) {
              return "<p>An error occurred:</p><pre>" + escape(e3.message + "", true) + "</pre>";
            }
            throw e3;
          }
        }
        marked10.options = marked10.setOptions = function(opt) {
          merge3(marked10.defaults, opt);
          changeDefaults(marked10.defaults);
          return marked10;
        };
        marked10.getDefaults = getDefaults;
        marked10.defaults = defaults;
        marked10.use = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var opts = merge3.apply(void 0, [{}].concat(args));
          var extensions = marked10.defaults.extensions || {
            renderers: {},
            childTokens: {}
          };
          var hasExtensions;
          args.forEach(function(pack) {
            if (pack.extensions) {
              hasExtensions = true;
              pack.extensions.forEach(function(ext) {
                if (!ext.name) {
                  throw new Error("extension name required");
                }
                if (ext.renderer) {
                  var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
                  if (prevRenderer) {
                    extensions.renderers[ext.name] = function() {
                      for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args2[_key2] = arguments[_key2];
                      }
                      var ret = ext.renderer.apply(this, args2);
                      if (ret === false) {
                        ret = prevRenderer.apply(this, args2);
                      }
                      return ret;
                    };
                  } else {
                    extensions.renderers[ext.name] = ext.renderer;
                  }
                }
                if (ext.tokenizer) {
                  if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
                    throw new Error("extension level must be 'block' or 'inline'");
                  }
                  if (extensions[ext.level]) {
                    extensions[ext.level].unshift(ext.tokenizer);
                  } else {
                    extensions[ext.level] = [ext.tokenizer];
                  }
                  if (ext.start) {
                    if (ext.level === "block") {
                      if (extensions.startBlock) {
                        extensions.startBlock.push(ext.start);
                      } else {
                        extensions.startBlock = [ext.start];
                      }
                    } else if (ext.level === "inline") {
                      if (extensions.startInline) {
                        extensions.startInline.push(ext.start);
                      } else {
                        extensions.startInline = [ext.start];
                      }
                    }
                  }
                }
                if (ext.childTokens) {
                  extensions.childTokens[ext.name] = ext.childTokens;
                }
              });
            }
            if (pack.renderer) {
              (function() {
                var renderer = marked10.defaults.renderer || new Renderer();
                var _loop = function _loop2(prop2) {
                  var prevRenderer = renderer[prop2];
                  renderer[prop2] = function() {
                    for (var _len3 = arguments.length, args2 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                      args2[_key3] = arguments[_key3];
                    }
                    var ret = pack.renderer[prop2].apply(renderer, args2);
                    if (ret === false) {
                      ret = prevRenderer.apply(renderer, args2);
                    }
                    return ret;
                  };
                };
                for (var prop in pack.renderer) {
                  _loop(prop);
                }
                opts.renderer = renderer;
              })();
            }
            if (pack.tokenizer) {
              (function() {
                var tokenizer = marked10.defaults.tokenizer || new Tokenizer();
                var _loop2 = function _loop22(prop2) {
                  var prevTokenizer = tokenizer[prop2];
                  tokenizer[prop2] = function() {
                    for (var _len4 = arguments.length, args2 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                      args2[_key4] = arguments[_key4];
                    }
                    var ret = pack.tokenizer[prop2].apply(tokenizer, args2);
                    if (ret === false) {
                      ret = prevTokenizer.apply(tokenizer, args2);
                    }
                    return ret;
                  };
                };
                for (var prop in pack.tokenizer) {
                  _loop2(prop);
                }
                opts.tokenizer = tokenizer;
              })();
            }
            if (pack.walkTokens) {
              var walkTokens = marked10.defaults.walkTokens;
              opts.walkTokens = function(token) {
                pack.walkTokens.call(this, token);
                if (walkTokens) {
                  walkTokens.call(this, token);
                }
              };
            }
            if (hasExtensions) {
              opts.extensions = extensions;
            }
            marked10.setOptions(opts);
          });
        };
        marked10.walkTokens = function(tokens, callback) {
          var _loop3 = function _loop32() {
            var token = _step.value;
            callback.call(marked10, token);
            switch (token.type) {
              case "table": {
                for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done; ) {
                  var cell = _step2.value;
                  marked10.walkTokens(cell.tokens, callback);
                }
                for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done; ) {
                  var row = _step3.value;
                  for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done; ) {
                    var _cell = _step4.value;
                    marked10.walkTokens(_cell.tokens, callback);
                  }
                }
                break;
              }
              case "list": {
                marked10.walkTokens(token.items, callback);
                break;
              }
              default: {
                if (marked10.defaults.extensions && marked10.defaults.extensions.childTokens && marked10.defaults.extensions.childTokens[token.type]) {
                  marked10.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
                    marked10.walkTokens(token[childTokens], callback);
                  });
                } else if (token.tokens) {
                  marked10.walkTokens(token.tokens, callback);
                }
              }
            }
          };
          for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done; ) {
            _loop3();
          }
        };
        marked10.parseInline = function(src, opt) {
          if (typeof src === "undefined" || src === null) {
            throw new Error("marked.parseInline(): input parameter is undefined or null");
          }
          if (typeof src !== "string") {
            throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
          }
          opt = merge3({}, marked10.defaults, opt || {});
          checkSanitizeDeprecation(opt);
          try {
            var tokens = Lexer.lexInline(src, opt);
            if (opt.walkTokens) {
              marked10.walkTokens(tokens, opt.walkTokens);
            }
            return Parser.parseInline(tokens, opt);
          } catch (e3) {
            e3.message += "\nPlease report this to https://github.com/markedjs/marked.";
            if (opt.silent) {
              return "<p>An error occurred:</p><pre>" + escape(e3.message + "", true) + "</pre>";
            }
            throw e3;
          }
        };
        marked10.Parser = Parser;
        marked10.parser = Parser.parse;
        marked10.Renderer = Renderer;
        marked10.TextRenderer = TextRenderer;
        marked10.Lexer = Lexer;
        marked10.lexer = Lexer.lex;
        marked10.Tokenizer = Tokenizer;
        marked10.Slugger = Slugger;
        marked10.parse = marked10;
        var marked_1 = marked10;
        return marked_1;
      });
    }
  });

  // node_modules/@mapbox/sexagesimal/index.js
  var require_sexagesimal = __commonJS({
    "node_modules/@mapbox/sexagesimal/index.js": function(exports2, module2) {
      module2.exports = element;
      module2.exports.pair = pair2;
      module2.exports.format = format2;
      module2.exports.formatPair = formatPair;
      module2.exports.coordToDMS = coordToDMS;
      function element(input4, dims) {
        var result6 = search3(input4, dims);
        return result6 === null ? null : result6.val;
      }
      function formatPair(input4) {
        return format2(input4.lat, "lat") + " " + format2(input4.lon, "lon");
      }
      function format2(input4, dim) {
        var dms = coordToDMS(input4, dim);
        return dms.whole + "\xB0 " + (dms.minutes ? dms.minutes + "' " : "") + (dms.seconds ? dms.seconds + '" ' : "") + dms.dir;
      }
      function coordToDMS(input4, dim) {
        var dirs = {
          lat: ["N", "S"],
          lon: ["E", "W"]
        }[dim] || "";
        var dir = dirs[input4 >= 0 ? 0 : 1];
        var abs2 = Math.abs(input4);
        var whole = Math.floor(abs2);
        var fraction = abs2 - whole;
        var fractionMinutes = fraction * 60;
        var minutes = Math.floor(fractionMinutes);
        var seconds = Math.floor((fractionMinutes - minutes) * 60);
        return {
          whole: whole,
          minutes: minutes,
          seconds: seconds,
          dir: dir
        };
      }
      function search3(input4, dims) {
        if (!dims)
          dims = "NSEW";
        if (typeof input4 !== "string")
          return null;
        input4 = input4.toUpperCase();
        var regex = /^[\s\,]*([NSEW])?\s*([\-|\—|\―]?[0-9.]+)[°º˚]?\s*(?:([0-9.]+)['’′‘]\s*)?(?:([0-9.]+)(?:''|"|”|″)\s*)?([NSEW])?/;
        var m = input4.match(regex);
        if (!m)
          return null;
        var matched = m[0];
        var dim;
        if (m[1] && m[5]) {
          dim = m[1];
          matched = matched.slice(0, -1);
        } else {
          dim = m[1] || m[5];
        }
        if (dim && dims.indexOf(dim) === -1)
          return null;
        var deg = m[2] ? parseFloat(m[2]) : 0;
        var min2 = m[3] ? parseFloat(m[3]) / 60 : 0;
        var sec = m[4] ? parseFloat(m[4]) / 3600 : 0;
        var sign2 = deg < 0 ? -1 : 1;
        if (dim === "S" || dim === "W")
          sign2 *= -1;
        return {
          val: (Math.abs(deg) + min2 + sec) * sign2,
          dim: dim,
          matched: matched,
          remain: input4.slice(matched.length)
        };
      }
      function pair2(input4, dims) {
        input4 = input4.trim();
        var one2 = search3(input4, dims);
        if (!one2)
          return null;
        input4 = one2.remain.trim();
        var two = search3(input4, dims);
        if (!two || two.remain)
          return null;
        if (one2.dim) {
          return swapdim(one2.val, two.val, one2.dim);
        } else {
          return [one2.val, two.val];
        }
      }
      function swapdim(a, b2, dim) {
        if (dim === "N" || dim === "S")
          return [a, b2];
        if (dim === "W" || dim === "E")
          return [b2, a];
      }
    }
  });

  // node_modules/@mapbox/point-geometry/index.js
  var require_point_geometry = __commonJS({
    "node_modules/@mapbox/point-geometry/index.js": function(exports2, module2) {
      "use strict";
      module2.exports = Point2;
      function Point2(x2, y) {
        this.x = x2;
        this.y = y;
      }
      Point2.prototype = {
        clone: function clone() {
          return new Point2(this.x, this.y);
        },
        add: function add2(p2) {
          return this.clone()._add(p2);
        },
        sub: function sub(p2) {
          return this.clone()._sub(p2);
        },
        multByPoint: function multByPoint(p2) {
          return this.clone()._multByPoint(p2);
        },
        divByPoint: function divByPoint(p2) {
          return this.clone()._divByPoint(p2);
        },
        mult: function mult(k) {
          return this.clone()._mult(k);
        },
        div: function div(k) {
          return this.clone()._div(k);
        },
        rotate: function rotate(a) {
          return this.clone()._rotate(a);
        },
        rotateAround: function rotateAround(a, p2) {
          return this.clone()._rotateAround(a, p2);
        },
        matMult: function matMult(m) {
          return this.clone()._matMult(m);
        },
        unit: function unit2() {
          return this.clone()._unit();
        },
        perp: function perp() {
          return this.clone()._perp();
        },
        round: function round() {
          return this.clone()._round();
        },
        mag: function mag() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        equals: function equals(other) {
          return this.x === other.x && this.y === other.y;
        },
        dist: function dist(p2) {
          return Math.sqrt(this.distSqr(p2));
        },
        distSqr: function distSqr(p2) {
          var dx = p2.x - this.x, dy = p2.y - this.y;
          return dx * dx + dy * dy;
        },
        angle: function angle2() {
          return Math.atan2(this.y, this.x);
        },
        angleTo: function angleTo(b2) {
          return Math.atan2(this.y - b2.y, this.x - b2.x);
        },
        angleWith: function angleWith(b2) {
          return this.angleWithSep(b2.x, b2.y);
        },
        angleWithSep: function angleWithSep(x2, y) {
          return Math.atan2(this.x * y - this.y * x2, this.x * x2 + this.y * y);
        },
        _matMult: function _matMult(m) {
          var x2 = m[0] * this.x + m[1] * this.y, y = m[2] * this.x + m[3] * this.y;
          this.x = x2;
          this.y = y;
          return this;
        },
        _add: function _add(p2) {
          this.x += p2.x;
          this.y += p2.y;
          return this;
        },
        _sub: function _sub(p2) {
          this.x -= p2.x;
          this.y -= p2.y;
          return this;
        },
        _mult: function _mult(k) {
          this.x *= k;
          this.y *= k;
          return this;
        },
        _div: function _div(k) {
          this.x /= k;
          this.y /= k;
          return this;
        },
        _multByPoint: function _multByPoint(p2) {
          this.x *= p2.x;
          this.y *= p2.y;
          return this;
        },
        _divByPoint: function _divByPoint(p2) {
          this.x /= p2.x;
          this.y /= p2.y;
          return this;
        },
        _unit: function _unit() {
          this._div(this.mag());
          return this;
        },
        _perp: function _perp() {
          var y = this.y;
          this.y = this.x;
          this.x = -y;
          return this;
        },
        _rotate: function _rotate(angle2) {
          var cos3 = Math.cos(angle2), sin3 = Math.sin(angle2), x2 = cos3 * this.x - sin3 * this.y, y = sin3 * this.x + cos3 * this.y;
          this.x = x2;
          this.y = y;
          return this;
        },
        _rotateAround: function _rotateAround(angle2, p2) {
          var cos3 = Math.cos(angle2), sin3 = Math.sin(angle2), x2 = p2.x + cos3 * (this.x - p2.x) - sin3 * (this.y - p2.y), y = p2.y + sin3 * (this.x - p2.x) + cos3 * (this.y - p2.y);
          this.x = x2;
          this.y = y;
          return this;
        },
        _round: function _round() {
          this.x = Math.round(this.x);
          this.y = Math.round(this.y);
          return this;
        }
      };
      Point2.convert = function(a) {
        if (a instanceof Point2) {
          return a;
        }
        if (Array.isArray(a)) {
          return new Point2(a[0], a[1]);
        }
        return a;
      };
    }
  });

  // node_modules/@mapbox/vector-tile/lib/vectortilefeature.js
  var require_vectortilefeature = __commonJS({
    "node_modules/@mapbox/vector-tile/lib/vectortilefeature.js": function(exports2, module2) {
      "use strict";
      var Point2 = require_point_geometry();
      module2.exports = VectorTileFeature;
      function VectorTileFeature(pbf, end, extent6, keys3, values2) {
        this.properties = {};
        this.extent = extent6;
        this.type = 0;
        this._pbf = pbf;
        this._geometry = -1;
        this._keys = keys3;
        this._values = values2;
        pbf.readFields(readFeature, this, end);
      }
      function readFeature(tag, feature3, pbf) {
        if (tag == 1)
          feature3.id = pbf.readVarint();
        else if (tag == 2)
          readTag(pbf, feature3);
        else if (tag == 3)
          feature3.type = pbf.readVarint();
        else if (tag == 4)
          feature3._geometry = pbf.pos;
      }
      function readTag(pbf, feature3) {
        var end = pbf.readVarint() + pbf.pos;
        while (pbf.pos < end) {
          var key = feature3._keys[pbf.readVarint()], value2 = feature3._values[pbf.readVarint()];
          feature3.properties[key] = value2;
        }
      }
      VectorTileFeature.types = ["Unknown", "Point", "LineString", "Polygon"];
      VectorTileFeature.prototype.loadGeometry = function() {
        var pbf = this._pbf;
        pbf.pos = this._geometry;
        var end = pbf.readVarint() + pbf.pos, cmd = 1, length = 0, x2 = 0, y = 0, lines = [], line;
        while (pbf.pos < end) {
          if (length <= 0) {
            var cmdLen = pbf.readVarint();
            cmd = cmdLen & 7;
            length = cmdLen >> 3;
          }
          length--;
          if (cmd === 1 || cmd === 2) {
            x2 += pbf.readSVarint();
            y += pbf.readSVarint();
            if (cmd === 1) {
              if (line)
                lines.push(line);
              line = [];
            }
            line.push(new Point2(x2, y));
          } else if (cmd === 7) {
            if (line) {
              line.push(line[0].clone());
            }
          } else {
            throw new Error("unknown command " + cmd);
          }
        }
        if (line)
          lines.push(line);
        return lines;
      };
      VectorTileFeature.prototype.bbox = function() {
        var pbf = this._pbf;
        pbf.pos = this._geometry;
        var end = pbf.readVarint() + pbf.pos, cmd = 1, length = 0, x2 = 0, y = 0, x12 = Infinity, x22 = -Infinity, y12 = Infinity, y2 = -Infinity;
        while (pbf.pos < end) {
          if (length <= 0) {
            var cmdLen = pbf.readVarint();
            cmd = cmdLen & 7;
            length = cmdLen >> 3;
          }
          length--;
          if (cmd === 1 || cmd === 2) {
            x2 += pbf.readSVarint();
            y += pbf.readSVarint();
            if (x2 < x12)
              x12 = x2;
            if (x2 > x22)
              x22 = x2;
            if (y < y12)
              y12 = y;
            if (y > y2)
              y2 = y;
          } else if (cmd !== 7) {
            throw new Error("unknown command " + cmd);
          }
        }
        return [x12, y12, x22, y2];
      };
      VectorTileFeature.prototype.toGeoJSON = function(x2, y, z) {
        var size = this.extent * Math.pow(2, z), x05 = this.extent * x2, y05 = this.extent * y, coords = this.loadGeometry(), type3 = VectorTileFeature.types[this.type], i2, j;
        function project(line) {
          for (var j2 = 0; j2 < line.length; j2++) {
            var p2 = line[j2], y2 = 180 - (p2.y + y05) * 360 / size;
            line[j2] = [(p2.x + x05) * 360 / size - 180, 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90];
          }
        }
        switch (this.type) {
          case 1:
            var points = [];
            for (i2 = 0; i2 < coords.length; i2++) {
              points[i2] = coords[i2][0];
            }
            coords = points;
            project(coords);
            break;
          case 2:
            for (i2 = 0; i2 < coords.length; i2++) {
              project(coords[i2]);
            }
            break;
          case 3:
            coords = classifyRings(coords);
            for (i2 = 0; i2 < coords.length; i2++) {
              for (j = 0; j < coords[i2].length; j++) {
                project(coords[i2][j]);
              }
            }
            break;
        }
        if (coords.length === 1) {
          coords = coords[0];
        } else {
          type3 = "Multi" + type3;
        }
        var result6 = {
          type: "Feature",
          geometry: {
            type: type3,
            coordinates: coords
          },
          properties: this.properties
        };
        if ("id" in this) {
          result6.id = this.id;
        }
        return result6;
      };
      function classifyRings(rings) {
        var len = rings.length;
        if (len <= 1)
          return [rings];
        var polygons = [], polygon2, ccw;
        for (var i2 = 0; i2 < len; i2++) {
          var area3 = signedArea(rings[i2]);
          if (area3 === 0)
            continue;
          if (ccw === void 0)
            ccw = area3 < 0;
          if (ccw === area3 < 0) {
            if (polygon2)
              polygons.push(polygon2);
            polygon2 = [rings[i2]];
          } else {
            polygon2.push(rings[i2]);
          }
        }
        if (polygon2)
          polygons.push(polygon2);
        return polygons;
      }
      function signedArea(ring) {
        var sum = 0;
        for (var i2 = 0, len = ring.length, j = len - 1, p1, p2; i2 < len; j = i2++) {
          p1 = ring[i2];
          p2 = ring[j];
          sum += (p2.x - p1.x) * (p1.y + p2.y);
        }
        return sum;
      }
    }
  });

  // node_modules/@mapbox/vector-tile/lib/vectortilelayer.js
  var require_vectortilelayer = __commonJS({
    "node_modules/@mapbox/vector-tile/lib/vectortilelayer.js": function(exports2, module2) {
      "use strict";
      var VectorTileFeature = require_vectortilefeature();
      module2.exports = VectorTileLayer;
      function VectorTileLayer(pbf, end) {
        this.version = 1;
        this.name = null;
        this.extent = 4096;
        this.length = 0;
        this._pbf = pbf;
        this._keys = [];
        this._values = [];
        this._features = [];
        pbf.readFields(readLayer, this, end);
        this.length = this._features.length;
      }
      function readLayer(tag, layer2, pbf) {
        if (tag === 15)
          layer2.version = pbf.readVarint();
        else if (tag === 1)
          layer2.name = pbf.readString();
        else if (tag === 5)
          layer2.extent = pbf.readVarint();
        else if (tag === 2)
          layer2._features.push(pbf.pos);
        else if (tag === 3)
          layer2._keys.push(pbf.readString());
        else if (tag === 4)
          layer2._values.push(readValueMessage(pbf));
      }
      function readValueMessage(pbf) {
        var value2 = null, end = pbf.readVarint() + pbf.pos;
        while (pbf.pos < end) {
          var tag = pbf.readVarint() >> 3;
          value2 = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;
        }
        return value2;
      }
      VectorTileLayer.prototype.feature = function(i2) {
        if (i2 < 0 || i2 >= this._features.length)
          throw new Error("feature index out of bounds");
        this._pbf.pos = this._features[i2];
        var end = this._pbf.readVarint() + this._pbf.pos;
        return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);
      };
    }
  });

  // node_modules/@mapbox/vector-tile/lib/vectortile.js
  var require_vectortile = __commonJS({
    "node_modules/@mapbox/vector-tile/lib/vectortile.js": function(exports2, module2) {
      "use strict";
      var VectorTileLayer = require_vectortilelayer();
      module2.exports = VectorTile2;
      function VectorTile2(pbf, end) {
        this.layers = pbf.readFields(readTile, {}, end);
      }
      function readTile(tag, layers, pbf) {
        if (tag === 3) {
          var layer2 = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);
          if (layer2.length)
            layers[layer2.name] = layer2;
        }
      }
    }
  });

  // node_modules/@mapbox/vector-tile/index.js
  var require_vector_tile = __commonJS({
    "node_modules/@mapbox/vector-tile/index.js": function(exports2, module2) {
      module2.exports.VectorTile = require_vectortile();
      module2.exports.VectorTileFeature = require_vectortilefeature();
      module2.exports.VectorTileLayer = require_vectortilelayer();
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js": function(exports2) {
      exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e3, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i2 = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i2];
        i2 += d;
        e3 = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e3 = e3 * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
        }
        m = e3 & (1 << -nBits) - 1;
        e3 >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
        }
        if (e3 === 0) {
          e3 = 1 - eBias;
        } else if (e3 === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e3 = e3 - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e3 - mLen);
      };
      exports2.write = function(buffer, value2, offset, isLE, mLen, nBytes) {
        var e3, m, c2;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i2 = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value2 < 0 || value2 === 0 && 1 / value2 < 0 ? 1 : 0;
        value2 = Math.abs(value2);
        if (isNaN(value2) || value2 === Infinity) {
          m = isNaN(value2) ? 1 : 0;
          e3 = eMax;
        } else {
          e3 = Math.floor(Math.log(value2) / Math.LN2);
          if (value2 * (c2 = Math.pow(2, -e3)) < 1) {
            e3--;
            c2 *= 2;
          }
          if (e3 + eBias >= 1) {
            value2 += rt / c2;
          } else {
            value2 += rt * Math.pow(2, 1 - eBias);
          }
          if (value2 * c2 >= 2) {
            e3++;
            c2 /= 2;
          }
          if (e3 + eBias >= eMax) {
            m = 0;
            e3 = eMax;
          } else if (e3 + eBias >= 1) {
            m = (value2 * c2 - 1) * Math.pow(2, mLen);
            e3 = e3 + eBias;
          } else {
            m = value2 * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e3 = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
        }
        e3 = e3 << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i2] = e3 & 255, i2 += d, e3 /= 256, eLen -= 8) {
        }
        buffer[offset + i2 - d] |= s * 128;
      };
    }
  });

  // node_modules/pbf/index.js
  var require_pbf = __commonJS({
    "node_modules/pbf/index.js": function(exports2, module2) {
      "use strict";
      module2.exports = Pbf;
      var ieee754 = require_ieee754();
      function Pbf(buf) {
        this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
        this.pos = 0;
        this.type = 0;
        this.length = this.buf.length;
      }
      Pbf.Varint = 0;
      Pbf.Fixed64 = 1;
      Pbf.Bytes = 2;
      Pbf.Fixed32 = 5;
      var SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
      var SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
      var TEXT_DECODER_MIN_LENGTH = 12;
      var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf8");
      Pbf.prototype = {
        destroy: function destroy() {
          this.buf = null;
        },
        readFields: function readFields(readField, result6, end) {
          end = end || this.length;
          while (this.pos < end) {
            var val = this.readVarint(), tag = val >> 3, startPos = this.pos;
            this.type = val & 7;
            readField(tag, result6, this);
            if (this.pos === startPos)
              this.skip(val);
          }
          return result6;
        },
        readMessage: function readMessage(readField, result6) {
          return this.readFields(readField, result6, this.readVarint() + this.pos);
        },
        readFixed32: function readFixed32() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
        },
        readSFixed32: function readSFixed32() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
        },
        readFixed64: function readFixed64() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
        },
        readSFixed64: function readSFixed64() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
        },
        readFloat: function readFloat() {
          var val = ieee754.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
        },
        readDouble: function readDouble() {
          var val = ieee754.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
        },
        readVarint: function readVarint(isSigned) {
          var buf = this.buf, val, b2;
          b2 = buf[this.pos++];
          val = b2 & 127;
          if (b2 < 128)
            return val;
          b2 = buf[this.pos++];
          val |= (b2 & 127) << 7;
          if (b2 < 128)
            return val;
          b2 = buf[this.pos++];
          val |= (b2 & 127) << 14;
          if (b2 < 128)
            return val;
          b2 = buf[this.pos++];
          val |= (b2 & 127) << 21;
          if (b2 < 128)
            return val;
          b2 = buf[this.pos];
          val |= (b2 & 15) << 28;
          return readVarintRemainder(val, isSigned, this);
        },
        readVarint64: function readVarint64() {
          return this.readVarint(true);
        },
        readSVarint: function readSVarint() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2;
        },
        readBoolean: function readBoolean() {
          return Boolean(this.readVarint());
        },
        readString: function readString() {
          var end = this.readVarint() + this.pos;
          var pos = this.pos;
          this.pos = end;
          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
            return readUtf8TextDecoder(this.buf, pos, end);
          }
          return readUtf8(this.buf, pos, end);
        },
        readBytes: function readBytes() {
          var end = this.readVarint() + this.pos, buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
        },
        readPackedVarint: function readPackedVarint(arr, isSigned) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readVarint(isSigned));
          }
          return arr;
        },
        readPackedSVarint: function readPackedSVarint(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readSVarint());
          }
          return arr;
        },
        readPackedBoolean: function readPackedBoolean(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readBoolean());
          }
          return arr;
        },
        readPackedFloat: function readPackedFloat(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readFloat());
          }
          return arr;
        },
        readPackedDouble: function readPackedDouble(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readDouble());
          }
          return arr;
        },
        readPackedFixed32: function readPackedFixed32(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readFixed32());
          }
          return arr;
        },
        readPackedSFixed32: function readPackedSFixed32(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readSFixed32());
          }
          return arr;
        },
        readPackedFixed64: function readPackedFixed64(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readFixed64());
          }
          return arr;
        },
        readPackedSFixed64: function readPackedSFixed64(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) {
            arr.push(this.readSFixed64());
          }
          return arr;
        },
        skip: function skip(val) {
          var type3 = val & 7;
          if (type3 === Pbf.Varint)
            while (this.buf[this.pos++] > 127) {
            }
          else if (type3 === Pbf.Bytes)
            this.pos = this.readVarint() + this.pos;
          else if (type3 === Pbf.Fixed32)
            this.pos += 4;
          else if (type3 === Pbf.Fixed64)
            this.pos += 8;
          else
            throw new Error("Unimplemented type: " + type3);
        },
        writeTag: function writeTag(tag, type3) {
          this.writeVarint(tag << 3 | type3);
        },
        realloc: function realloc(min2) {
          var length = this.length || 16;
          while (length < this.pos + min2) {
            length *= 2;
          }
          if (length !== this.length) {
            var buf = new Uint8Array(length);
            buf.set(this.buf);
            this.buf = buf;
            this.length = length;
          }
        },
        finish: function finish() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
        },
        writeFixed32: function writeFixed32(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
        },
        writeSFixed32: function writeSFixed32(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
        },
        writeFixed64: function writeFixed64(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
        },
        writeSFixed64: function writeSFixed64(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
        },
        writeVarint: function writeVarint(val) {
          val = +val || 0;
          if (val > 268435455 || val < 0) {
            writeBigVarint(val, this);
            return;
          }
          this.realloc(4);
          this.buf[this.pos++] = val & 127 | (val > 127 ? 128 : 0);
          if (val <= 127)
            return;
          this.buf[this.pos++] = (val >>>= 7) & 127 | (val > 127 ? 128 : 0);
          if (val <= 127)
            return;
          this.buf[this.pos++] = (val >>>= 7) & 127 | (val > 127 ? 128 : 0);
          if (val <= 127)
            return;
          this.buf[this.pos++] = val >>> 7 & 127;
        },
        writeSVarint: function writeSVarint(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
        },
        writeBoolean: function writeBoolean(val) {
          this.writeVarint(Boolean(val));
        },
        writeString: function writeString(str) {
          str = String(str);
          this.realloc(str.length * 4);
          this.pos++;
          var startPos = this.pos;
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;
          if (len >= 128)
            makeRoomForExtraLength(startPos, len, this);
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
        },
        writeFloat: function writeFloat(val) {
          this.realloc(4);
          ieee754.write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
        },
        writeDouble: function writeDouble(val) {
          this.realloc(8);
          ieee754.write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
        },
        writeBytes: function writeBytes(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i2 = 0; i2 < len; i2++) {
            this.buf[this.pos++] = buffer[i2];
          }
        },
        writeRawMessage: function writeRawMessage(fn, obj) {
          this.pos++;
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;
          if (len >= 128)
            makeRoomForExtraLength(startPos, len, this);
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
        },
        writeMessage: function writeMessage(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
        },
        writePackedVarint: function writePackedVarint(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedVarint, arr);
        },
        writePackedSVarint: function writePackedSVarint(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedSVarint, arr);
        },
        writePackedBoolean: function writePackedBoolean(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedBoolean, arr);
        },
        writePackedFloat: function writePackedFloat(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedFloat, arr);
        },
        writePackedDouble: function writePackedDouble(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedDouble, arr);
        },
        writePackedFixed32: function writePackedFixed32(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedFixed, arr);
        },
        writePackedSFixed32: function writePackedSFixed32(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedSFixed, arr);
        },
        writePackedFixed64: function writePackedFixed64(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedFixed2, arr);
        },
        writePackedSFixed64: function writePackedSFixed64(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, _writePackedSFixed2, arr);
        },
        writeBytesField: function writeBytesField(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
        },
        writeFixed32Field: function writeFixed32Field(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
        },
        writeSFixed32Field: function writeSFixed32Field(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
        },
        writeFixed64Field: function writeFixed64Field(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
        },
        writeSFixed64Field: function writeSFixed64Field(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
        },
        writeVarintField: function writeVarintField(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
        },
        writeSVarintField: function writeSVarintField(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
        },
        writeStringField: function writeStringField(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
        },
        writeFloatField: function writeFloatField(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
        },
        writeDoubleField: function writeDoubleField(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
        },
        writeBooleanField: function writeBooleanField(tag, val) {
          this.writeVarintField(tag, Boolean(val));
        }
      };
      function readVarintRemainder(l, s, p2) {
        var buf = p2.buf, h, b2;
        b2 = buf[p2.pos++];
        h = (b2 & 112) >> 4;
        if (b2 < 128)
          return toNum(l, h, s);
        b2 = buf[p2.pos++];
        h |= (b2 & 127) << 3;
        if (b2 < 128)
          return toNum(l, h, s);
        b2 = buf[p2.pos++];
        h |= (b2 & 127) << 10;
        if (b2 < 128)
          return toNum(l, h, s);
        b2 = buf[p2.pos++];
        h |= (b2 & 127) << 17;
        if (b2 < 128)
          return toNum(l, h, s);
        b2 = buf[p2.pos++];
        h |= (b2 & 127) << 24;
        if (b2 < 128)
          return toNum(l, h, s);
        b2 = buf[p2.pos++];
        h |= (b2 & 1) << 31;
        if (b2 < 128)
          return toNum(l, h, s);
        throw new Error("Expected varint not more than 10 bytes");
      }
      function readPackedEnd(pbf) {
        return pbf.type === Pbf.Bytes ? pbf.readVarint() + pbf.pos : pbf.pos + 1;
      }
      function toNum(low, high, isSigned) {
        if (isSigned) {
          return high * 4294967296 + (low >>> 0);
        }
        return (high >>> 0) * 4294967296 + (low >>> 0);
      }
      function writeBigVarint(val, pbf) {
        var low, high;
        if (val >= 0) {
          low = val % 4294967296 | 0;
          high = val / 4294967296 | 0;
        } else {
          low = ~(-val % 4294967296);
          high = ~(-val / 4294967296);
          if (low ^ 4294967295) {
            low = low + 1 | 0;
          } else {
            low = 0;
            high = high + 1 | 0;
          }
        }
        if (val >= 18446744073709552e3 || val < -18446744073709552e3) {
          throw new Error("Given varint doesn't fit into 10 bytes");
        }
        pbf.realloc(10);
        writeBigVarintLow(low, high, pbf);
        writeBigVarintHigh(high, pbf);
      }
      function writeBigVarintLow(low, high, pbf) {
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos] = low & 127;
      }
      function writeBigVarintHigh(high, pbf) {
        var lsb = (high & 7) << 4;
        pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127;
      }
      function makeRoomForExtraLength(startPos, len, pbf) {
        var extraLen = len <= 16383 ? 1 : len <= 2097151 ? 2 : len <= 268435455 ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));
        pbf.realloc(extraLen);
        for (var i2 = pbf.pos - 1; i2 >= startPos; i2--) {
          pbf.buf[i2 + extraLen] = pbf.buf[i2];
        }
      }
      function _writePackedVarint(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeVarint(arr[i2]);
        }
      }
      function _writePackedSVarint(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeSVarint(arr[i2]);
        }
      }
      function _writePackedFloat(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeFloat(arr[i2]);
        }
      }
      function _writePackedDouble(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeDouble(arr[i2]);
        }
      }
      function _writePackedBoolean(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeBoolean(arr[i2]);
        }
      }
      function _writePackedFixed(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeFixed32(arr[i2]);
        }
      }
      function _writePackedSFixed(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeSFixed32(arr[i2]);
        }
      }
      function _writePackedFixed2(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeFixed64(arr[i2]);
        }
      }
      function _writePackedSFixed2(arr, pbf) {
        for (var i2 = 0; i2 < arr.length; i2++) {
          pbf.writeSFixed64(arr[i2]);
        }
      }
      function readUInt32(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + buf[pos + 3] * 16777216;
      }
      function writeInt32(buf, val, pos) {
        buf[pos] = val;
        buf[pos + 1] = val >>> 8;
        buf[pos + 2] = val >>> 16;
        buf[pos + 3] = val >>> 24;
      }
      function readInt32(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + (buf[pos + 3] << 24);
      }
      function readUtf8(buf, pos, end) {
        var str = "";
        var i2 = pos;
        while (i2 < end) {
          var b0 = buf[i2];
          var c2 = null;
          var bytesPerSequence = b0 > 239 ? 4 : b0 > 223 ? 3 : b0 > 191 ? 2 : 1;
          if (i2 + bytesPerSequence > end)
            break;
          var b1, b2, b3;
          if (bytesPerSequence === 1) {
            if (b0 < 128) {
              c2 = b0;
            }
          } else if (bytesPerSequence === 2) {
            b1 = buf[i2 + 1];
            if ((b1 & 192) === 128) {
              c2 = (b0 & 31) << 6 | b1 & 63;
              if (c2 <= 127) {
                c2 = null;
              }
            }
          } else if (bytesPerSequence === 3) {
            b1 = buf[i2 + 1];
            b2 = buf[i2 + 2];
            if ((b1 & 192) === 128 && (b2 & 192) === 128) {
              c2 = (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
              if (c2 <= 2047 || c2 >= 55296 && c2 <= 57343) {
                c2 = null;
              }
            }
          } else if (bytesPerSequence === 4) {
            b1 = buf[i2 + 1];
            b2 = buf[i2 + 2];
            b3 = buf[i2 + 3];
            if ((b1 & 192) === 128 && (b2 & 192) === 128 && (b3 & 192) === 128) {
              c2 = (b0 & 15) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
              if (c2 <= 65535 || c2 >= 1114112) {
                c2 = null;
              }
            }
          }
          if (c2 === null) {
            c2 = 65533;
            bytesPerSequence = 1;
          } else if (c2 > 65535) {
            c2 -= 65536;
            str += String.fromCharCode(c2 >>> 10 & 1023 | 55296);
            c2 = 56320 | c2 & 1023;
          }
          str += String.fromCharCode(c2);
          i2 += bytesPerSequence;
        }
        return str;
      }
      function readUtf8TextDecoder(buf, pos, end) {
        return utf8TextDecoder.decode(buf.subarray(pos, end));
      }
      function writeUtf8(buf, str, pos) {
        for (var i2 = 0, c2, lead; i2 < str.length; i2++) {
          c2 = str.charCodeAt(i2);
          if (c2 > 55295 && c2 < 57344) {
            if (lead) {
              if (c2 < 56320) {
                buf[pos++] = 239;
                buf[pos++] = 191;
                buf[pos++] = 189;
                lead = c2;
                continue;
              } else {
                c2 = lead - 55296 << 10 | c2 - 56320 | 65536;
                lead = null;
              }
            } else {
              if (c2 > 56319 || i2 + 1 === str.length) {
                buf[pos++] = 239;
                buf[pos++] = 191;
                buf[pos++] = 189;
              } else {
                lead = c2;
              }
              continue;
            }
          } else if (lead) {
            buf[pos++] = 239;
            buf[pos++] = 191;
            buf[pos++] = 189;
            lead = null;
          }
          if (c2 < 128) {
            buf[pos++] = c2;
          } else {
            if (c2 < 2048) {
              buf[pos++] = c2 >> 6 | 192;
            } else {
              if (c2 < 65536) {
                buf[pos++] = c2 >> 12 | 224;
              } else {
                buf[pos++] = c2 >> 18 | 240;
                buf[pos++] = c2 >> 12 & 63 | 128;
              }
              buf[pos++] = c2 >> 6 & 63 | 128;
            }
            buf[pos++] = c2 & 63 | 128;
          }
        }
        return pos;
      }
    }
  });

  // node_modules/whatwg-fetch/fetch.js
  init_typeof();
  var global2 = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global2 !== "undefined" && global2;
  var support = {
    searchParams: "URLSearchParams" in global2,
    iterable: "Symbol" in global2 && "iterator" in Symbol,
    blob: "FileReader" in global2 && "Blob" in global2 && function() {
      try {
        new Blob();
        return true;
      } catch (e3) {
        return false;
      }
    }(),
    formData: "FormData" in global2,
    arrayBuffer: "ArrayBuffer" in global2
  };
  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj);
  }
  if (support.arrayBuffer) {
    viewClasses = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"];
    isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }
  var viewClasses;
  var isArrayBufferView;
  function normalizeName(name) {
    if (typeof name !== "string") {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
      throw new TypeError('Invalid character in header field name: "' + name + '"');
    }
    return name.toLowerCase();
  }
  function normalizeValue(value2) {
    if (typeof value2 !== "string") {
      value2 = String(value2);
    }
    return value2;
  }
  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value2 = items.shift();
        return {
          done: value2 === void 0,
          value: value2
        };
      }
    };
    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator;
      };
    }
    return iterator;
  }
  function Headers(headers) {
    this.map = {};
    if (headers instanceof Headers) {
      headers.forEach(function(value2, name) {
        this.append(name, value2);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }
  Headers.prototype.append = function(name, value2) {
    name = normalizeName(name);
    value2 = normalizeValue(value2);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ", " + value2 : value2;
  };
  Headers.prototype["delete"] = function(name) {
    delete this.map[normalizeName(name)];
  };
  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null;
  };
  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };
  Headers.prototype.set = function(name, value2) {
    this.map[normalizeName(name)] = normalizeValue(value2);
  };
  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };
  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value2, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };
  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value2) {
      items.push(value2);
    });
    return iteratorFor(items);
  };
  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value2, name) {
      items.push([name, value2]);
    });
    return iteratorFor(items);
  };
  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }
  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError("Already read"));
    }
    body.bodyUsed = true;
  }
  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    });
  }
  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }
  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }
  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);
    for (var i2 = 0; i2 < view.length; i2++) {
      chars[i2] = String.fromCharCode(view[i2]);
    }
    return chars.join("");
  }
  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }
  function Body() {
    this.bodyUsed = false;
    this._initBody = function(body) {
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._bodyText = "";
      } else if (typeof body === "string") {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }
      if (!this.headers.get("content-type")) {
        if (typeof body === "string") {
          this.headers.set("content-type", "text/plain;charset=UTF-8");
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set("content-type", this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
        }
      }
    };
    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }
        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error("could not read FormData body as blob");
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };
      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed;
          }
          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
          } else {
            return Promise.resolve(this._bodyArrayBuffer);
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }
    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }
      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as text");
      } else {
        return Promise.resolve(this._bodyText);
      }
    };
    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode);
      };
    }
    this.json = function() {
      return this.text().then(JSON.parse);
    };
    return this;
  }
  var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }
  function Request(input4, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    }
    options = options || {};
    var body = options.body;
    if (input4 instanceof Request) {
      if (input4.bodyUsed) {
        throw new TypeError("Already read");
      }
      this.url = input4.url;
      this.credentials = input4.credentials;
      if (!options.headers) {
        this.headers = new Headers(input4.headers);
      }
      this.method = input4.method;
      this.mode = input4.mode;
      this.signal = input4.signal;
      if (!body && input4._bodyInit != null) {
        body = input4._bodyInit;
        input4.bodyUsed = true;
      }
    } else {
      this.url = String(input4);
    }
    this.credentials = options.credentials || this.credentials || "same-origin";
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || "GET");
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;
    if ((this.method === "GET" || this.method === "HEAD") && body) {
      throw new TypeError("Body not allowed for GET or HEAD requests");
    }
    this._initBody(body);
    if (this.method === "GET" || this.method === "HEAD") {
      if (options.cache === "no-store" || options.cache === "no-cache") {
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
        } else {
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
        }
      }
    }
  }
  Request.prototype.clone = function() {
    return new Request(this, {
      body: this._bodyInit
    });
  };
  function decode(body) {
    var form = new FormData();
    body.trim().split("&").forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split("=");
        var name = split.shift().replace(/\+/g, " ");
        var value2 = split.join("=").replace(/\+/g, " ");
        form.append(decodeURIComponent(name), decodeURIComponent(value2));
      }
    });
    return form;
  }
  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
    preProcessedHeaders.split("\r").map(function(header) {
      return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
    }).forEach(function(line) {
      var parts = line.split(":");
      var key = parts.shift().trim();
      if (key) {
        var value2 = parts.join(":").trim();
        headers.append(key, value2);
      }
    });
    return headers;
  }
  Body.call(Request.prototype);
  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    }
    if (!options) {
      options = {};
    }
    this.type = "default";
    this.status = options.status === void 0 ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || "";
    this._initBody(bodyInit);
  }
  Body.call(Response.prototype);
  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };
  Response.error = function() {
    var response = new Response(null, {
      status: 0,
      statusText: ""
    });
    response.type = "error";
    return response;
  };
  var redirectStatuses = [301, 302, 303, 307, 308];
  Response.redirect = function(url, status3) {
    if (redirectStatuses.indexOf(status3) === -1) {
      throw new RangeError("Invalid status code");
    }
    return new Response(null, {
      status: status3,
      headers: {
        location: url
      }
    });
  };
  var DOMException2 = global2.DOMException;
  try {
    new DOMException2();
  } catch (err) {
    DOMException2 = function DOMException3(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException2.prototype = Object.create(Error.prototype);
    DOMException2.prototype.constructor = DOMException2;
  }
  function fetch2(input4, init19) {
    return new Promise(function(resolve, reject) {
      var request3 = new Request(input4, init19);
      if (request3.signal && request3.signal.aborted) {
        return reject(new DOMException2("Aborted", "AbortError"));
      }
      var xhr = new XMLHttpRequest();
      function abortXhr() {
        xhr.abort();
      }
      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || "")
        };
        options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
        var body = "response" in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };
      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError("Network request failed"));
        }, 0);
      };
      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError("Network request failed"));
        }, 0);
      };
      xhr.onabort = function() {
        setTimeout(function() {
          reject(new DOMException2("Aborted", "AbortError"));
        }, 0);
      };
      function fixUrl(url) {
        try {
          return url === "" && global2.location.href ? global2.location.href : url;
        } catch (e3) {
          return url;
        }
      }
      xhr.open(request3.method, fixUrl(request3.url), true);
      if (request3.credentials === "include") {
        xhr.withCredentials = true;
      } else if (request3.credentials === "omit") {
        xhr.withCredentials = false;
      }
      if ("responseType" in xhr) {
        if (support.blob) {
          xhr.responseType = "blob";
        } else if (support.arrayBuffer && request3.headers.get("Content-Type") && request3.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
          xhr.responseType = "arraybuffer";
        }
      }
      if (init19 && _typeof(init19.headers) === "object" && !(init19.headers instanceof Headers)) {
        Object.getOwnPropertyNames(init19.headers).forEach(function(name) {
          xhr.setRequestHeader(name, normalizeValue(init19.headers[name]));
        });
      } else {
        request3.headers.forEach(function(value2, name) {
          xhr.setRequestHeader(name, value2);
        });
      }
      if (request3.signal) {
        request3.signal.addEventListener("abort", abortXhr);
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            request3.signal.removeEventListener("abort", abortXhr);
          }
        };
      }
      xhr.send(typeof request3._bodyInit === "undefined" ? null : request3._bodyInit);
    });
  }
  fetch2.polyfill = true;
  if (!global2.fetch) {
    global2.fetch = fetch2;
    global2.Headers = Headers;
    global2.Request = Request;
    global2.Response = Response;
  }

  // node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js
  init_typeof();
  (function(factory) {
    typeof define === "function" && define.amd ? define(factory) : factory();
  })(function() {
    "use strict";
    function _classCallCheck2(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties2(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties2(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties2(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf(o2);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _possibleConstructorReturn(self2, call2) {
      if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
      }
      return _assertThisInitialized(self2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result6;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result6 = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result6 = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result6);
      };
    }
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    function _get(target, property, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
      } else {
        _get = function _get2(target2, property2, receiver2) {
          var base2 = _superPropBase(target2, property2);
          if (!base2)
            return;
          var desc = Object.getOwnPropertyDescriptor(base2, property2);
          if (desc.get) {
            return desc.get.call(receiver2);
          }
          return desc.value;
        };
      }
      return _get(target, property, receiver || target);
    }
    var Emitter = /* @__PURE__ */ function() {
      function Emitter2() {
        _classCallCheck2(this, Emitter2);
        Object.defineProperty(this, "listeners", {
          value: {},
          writable: true,
          configurable: true
        });
      }
      _createClass2(Emitter2, [{
        key: "addEventListener",
        value: function addEventListener(type3, callback, options) {
          if (!(type3 in this.listeners)) {
            this.listeners[type3] = [];
          }
          this.listeners[type3].push({
            callback: callback,
            options: options
          });
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener(type3, callback) {
          if (!(type3 in this.listeners)) {
            return;
          }
          var stack = this.listeners[type3];
          for (var i2 = 0, l = stack.length; i2 < l; i2++) {
            if (stack[i2].callback === callback) {
              stack.splice(i2, 1);
              return;
            }
          }
        }
      }, {
        key: "dispatchEvent",
        value: function dispatchEvent2(event) {
          if (!(event.type in this.listeners)) {
            return;
          }
          var stack = this.listeners[event.type];
          var stackToCall = stack.slice();
          for (var i2 = 0, l = stackToCall.length; i2 < l; i2++) {
            var listener = stackToCall[i2];
            try {
              listener.callback.call(this, event);
            } catch (e3) {
              Promise.resolve().then(function() {
                throw e3;
              });
            }
            if (listener.options && listener.options.once) {
              this.removeEventListener(event.type, listener.callback);
            }
          }
          return !event.defaultPrevented;
        }
      }]);
      return Emitter2;
    }();
    var AbortSignal = /* @__PURE__ */ function(_Emitter) {
      _inherits(AbortSignal2, _Emitter);
      var _super = _createSuper(AbortSignal2);
      function AbortSignal2() {
        var _this;
        _classCallCheck2(this, AbortSignal2);
        _this = _super.call(this);
        if (!_this.listeners) {
          Emitter.call(_assertThisInitialized(_this));
        }
        Object.defineProperty(_assertThisInitialized(_this), "aborted", {
          value: false,
          writable: true,
          configurable: true
        });
        Object.defineProperty(_assertThisInitialized(_this), "onabort", {
          value: null,
          writable: true,
          configurable: true
        });
        return _this;
      }
      _createClass2(AbortSignal2, [{
        key: "toString",
        value: function toString3() {
          return "[object AbortSignal]";
        }
      }, {
        key: "dispatchEvent",
        value: function dispatchEvent2(event) {
          if (event.type === "abort") {
            this.aborted = true;
            if (typeof this.onabort === "function") {
              this.onabort.call(this, event);
            }
          }
          _get(_getPrototypeOf(AbortSignal2.prototype), "dispatchEvent", this).call(this, event);
        }
      }]);
      return AbortSignal2;
    }(Emitter);
    var AbortController2 = /* @__PURE__ */ function() {
      function AbortController3() {
        _classCallCheck2(this, AbortController3);
        Object.defineProperty(this, "signal", {
          value: new AbortSignal(),
          writable: true,
          configurable: true
        });
      }
      _createClass2(AbortController3, [{
        key: "abort",
        value: function abort() {
          var event;
          try {
            event = new Event("abort");
          } catch (e3) {
            if (typeof document !== "undefined") {
              if (!document.createEvent) {
                event = document.createEventObject();
                event.type = "abort";
              } else {
                event = document.createEvent("Event");
                event.initEvent("abort", false, false);
              }
            } else {
              event = {
                type: "abort",
                bubbles: false,
                cancelable: false
              };
            }
          }
          this.signal.dispatchEvent(event);
        }
      }, {
        key: "toString",
        value: function toString3() {
          return "[object AbortController]";
        }
      }]);
      return AbortController3;
    }();
    if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      AbortController2.prototype[Symbol.toStringTag] = "AbortController";
      AbortSignal.prototype[Symbol.toStringTag] = "AbortSignal";
    }
    function polyfillNeeded(self2) {
      if (self2.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
        console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill");
        return true;
      }
      return typeof self2.Request === "function" && !self2.Request.prototype.hasOwnProperty("signal") || !self2.AbortController;
    }
    function abortableFetchDecorator(patchTargets) {
      if (typeof patchTargets === "function") {
        patchTargets = {
          fetch: patchTargets
        };
      }
      var _patchTargets = patchTargets, fetch3 = _patchTargets.fetch, _patchTargets$Request = _patchTargets.Request, NativeRequest = _patchTargets$Request === void 0 ? fetch3.Request : _patchTargets$Request, NativeAbortController = _patchTargets.AbortController, _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL, __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;
      if (!polyfillNeeded({
        fetch: fetch3,
        Request: NativeRequest,
        AbortController: NativeAbortController,
        __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
      })) {
        return {
          fetch: fetch3,
          Request: Request2
        };
      }
      var Request2 = NativeRequest;
      if (Request2 && !Request2.prototype.hasOwnProperty("signal") || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
        Request2 = function Request3(input4, init19) {
          var signal;
          if (init19 && init19.signal) {
            signal = init19.signal;
            delete init19.signal;
          }
          var request3 = new NativeRequest(input4, init19);
          if (signal) {
            Object.defineProperty(request3, "signal", {
              writable: false,
              enumerable: false,
              configurable: true,
              value: signal
            });
          }
          return request3;
        };
        Request2.prototype = NativeRequest.prototype;
      }
      var realFetch = fetch3;
      var abortableFetch = function abortableFetch2(input4, init19) {
        var signal = Request2 && Request2.prototype.isPrototypeOf(input4) ? input4.signal : init19 ? init19.signal : void 0;
        if (signal) {
          var abortError;
          try {
            abortError = new DOMException("Aborted", "AbortError");
          } catch (err) {
            abortError = new Error("Aborted");
            abortError.name = "AbortError";
          }
          if (signal.aborted) {
            return Promise.reject(abortError);
          }
          var cancellation = new Promise(function(_2, reject) {
            signal.addEventListener("abort", function() {
              return reject(abortError);
            }, {
              once: true
            });
          });
          if (init19 && init19.signal) {
            delete init19.signal;
          }
          return Promise.race([cancellation, realFetch(input4, init19)]);
        }
        return realFetch(input4, init19);
      };
      return {
        fetch: abortableFetch,
        Request: Request2
      };
    }
    (function(self2) {
      if (!polyfillNeeded(self2)) {
        return;
      }
      if (!self2.fetch) {
        console.warn("fetch() is not available, cannot install abortcontroller-polyfill");
        return;
      }
      var _abortableFetch = abortableFetchDecorator(self2), fetch3 = _abortableFetch.fetch, Request2 = _abortableFetch.Request;
      self2.fetch = fetch3;
      self2.Request = Request2;
      Object.defineProperty(self2, "AbortController", {
        writable: true,
        enumerable: false,
        configurable: true,
        value: AbortController2
      });
      Object.defineProperty(self2, "AbortSignal", {
        writable: true,
        enumerable: false,
        configurable: true,
        value: AbortSignal
      });
    })(typeof self !== "undefined" ? self : global);
  });

  // modules/index.js
  var modules_exports = {};
  __export(modules_exports, {
    QAItem: function() {
      return QAItem;
    },
    actionAddEntity: function() {
      return actionAddEntity;
    },
    actionAddMember: function() {
      return actionAddMember;
    },
    actionAddMidpoint: function() {
      return actionAddMidpoint;
    },
    actionAddVertex: function() {
      return actionAddVertex;
    },
    actionChangeMember: function() {
      return actionChangeMember;
    },
    actionChangePreset: function() {
      return actionChangePreset;
    },
    actionChangeTags: function() {
      return actionChangeTags;
    },
    actionCircularize: function() {
      return actionCircularize;
    },
    actionConnect: function() {
      return actionConnect;
    },
    actionCopyEntities: function() {
      return actionCopyEntities;
    },
    actionDeleteMember: function() {
      return actionDeleteMember;
    },
    actionDeleteMultiple: function() {
      return actionDeleteMultiple;
    },
    actionDeleteNode: function() {
      return actionDeleteNode;
    },
    actionDeleteRelation: function() {
      return actionDeleteRelation;
    },
    actionDeleteWay: function() {
      return actionDeleteWay;
    },
    actionDiscardTags: function() {
      return actionDiscardTags;
    },
    actionDisconnect: function() {
      return actionDisconnect;
    },
    actionExtract: function() {
      return actionExtract;
    },
    actionJoin: function() {
      return actionJoin;
    },
    actionMerge: function() {
      return actionMerge;
    },
    actionMergeNodes: function() {
      return actionMergeNodes;
    },
    actionMergePolygon: function() {
      return actionMergePolygon;
    },
    actionMergeRemoteChanges: function() {
      return actionMergeRemoteChanges;
    },
    actionMove: function() {
      return actionMove;
    },
    actionMoveMember: function() {
      return actionMoveMember;
    },
    actionMoveNode: function() {
      return actionMoveNode;
    },
    actionNoop: function() {
      return actionNoop;
    },
    actionOrthogonalize: function() {
      return actionOrthogonalize;
    },
    actionRapidAcceptFeature: function() {
      return actionRapidAcceptFeature;
    },
    actionReflect: function() {
      return actionReflect;
    },
    actionRestrictTurn: function() {
      return actionRestrictTurn;
    },
    actionReverse: function() {
      return actionReverse;
    },
    actionRevert: function() {
      return actionRevert;
    },
    actionRotate: function() {
      return actionRotate;
    },
    actionScale: function() {
      return actionScale;
    },
    actionSplit: function() {
      return actionSplit;
    },
    actionStraightenNodes: function() {
      return actionStraightenNodes;
    },
    actionStraightenWay: function() {
      return actionStraightenWay;
    },
    actionUnrestrictTurn: function() {
      return actionUnrestrictTurn;
    },
    actionUpgradeTags: function() {
      return actionUpgradeTags;
    },
    behaviorAddWay: function() {
      return behaviorAddWay;
    },
    behaviorBreathe: function() {
      return behaviorBreathe;
    },
    behaviorDrag: function() {
      return behaviorDrag;
    },
    behaviorDraw: function() {
      return behaviorDraw;
    },
    behaviorDrawWay: function() {
      return behaviorDrawWay;
    },
    behaviorEdit: function() {
      return behaviorEdit;
    },
    behaviorHash: function() {
      return behaviorHash;
    },
    behaviorHover: function() {
      return behaviorHover;
    },
    behaviorLasso: function() {
      return behaviorLasso;
    },
    behaviorOperation: function() {
      return behaviorOperation;
    },
    behaviorPaste: function() {
      return behaviorPaste;
    },
    behaviorSelect: function() {
      return behaviorSelect;
    },
    coreContext: function() {
      return coreContext;
    },
    coreDifference: function() {
      return coreDifference;
    },
    coreFileFetcher: function() {
      return coreFileFetcher;
    },
    coreGraph: function() {
      return coreGraph;
    },
    coreHistory: function() {
      return coreHistory;
    },
    coreLocalizer: function() {
      return coreLocalizer;
    },
    coreLocations: function() {
      return coreLocations;
    },
    coreRapidContext: function() {
      return coreRapidContext;
    },
    coreTree: function() {
      return coreTree;
    },
    coreUploader: function() {
      return coreUploader;
    },
    coreValidator: function() {
      return coreValidator;
    },
    d3: function() {
      return d3;
    },
    debug: function() {
      return debug;
    },
    fileFetcher: function() {
      return _mainFileFetcher;
    },
    geoChooseEdge: function() {
      return geoChooseEdge;
    },
    geoHasLineIntersections: function() {
      return geoHasLineIntersections;
    },
    geoHasSelfIntersections: function() {
      return geoHasSelfIntersections;
    },
    geoOrthoCalcScore: function() {
      return geoOrthoCalcScore;
    },
    geoOrthoCanOrthogonalize: function() {
      return geoOrthoCanOrthogonalize;
    },
    geoOrthoMaxOffsetAngle: function() {
      return geoOrthoMaxOffsetAngle;
    },
    geoOrthoNormalizedDotProduct: function() {
      return geoOrthoNormalizedDotProduct;
    },
    geoRawMercator: function() {
      return geoRawMercator;
    },
    localizer: function() {
      return _mainLocalizer;
    },
    locationManager: function() {
      return _mainLocations;
    },
    modeAddArea: function() {
      return modeAddArea;
    },
    modeAddLine: function() {
      return modeAddLine;
    },
    modeAddNote: function() {
      return modeAddNote;
    },
    modeAddPoint: function() {
      return modeAddPoint;
    },
    modeBrowse: function() {
      return modeBrowse;
    },
    modeDragNode: function() {
      return modeDragNode;
    },
    modeDragNote: function() {
      return modeDragNote;
    },
    modeDrawArea: function() {
      return modeDrawArea;
    },
    modeDrawLine: function() {
      return modeDrawLine;
    },
    modeMove: function() {
      return modeMove;
    },
    modeRapidSelectFeatures: function() {
      return modeRapidSelectFeatures;
    },
    modeRotate: function() {
      return modeRotate;
    },
    modeSave: function() {
      return modeSave;
    },
    modeSelect: function() {
      return modeSelect;
    },
    modeSelectData: function() {
      return modeSelectData;
    },
    modeSelectError: function() {
      return modeSelectError;
    },
    modeSelectNote: function() {
      return modeSelectNote;
    },
    operationCircularize: function() {
      return operationCircularize;
    },
    operationContinue: function() {
      return operationContinue;
    },
    operationCopy: function() {
      return operationCopy;
    },
    operationCycleHighwayTag: function() {
      return operationCycleHighwayTag;
    },
    operationDelete: function() {
      return operationDelete;
    },
    operationDisconnect: function() {
      return operationDisconnect;
    },
    operationDowngrade: function() {
      return operationDowngrade;
    },
    operationExtract: function() {
      return operationExtract;
    },
    operationMerge: function() {
      return operationMerge;
    },
    operationMove: function() {
      return operationMove;
    },
    operationOrthogonalize: function() {
      return operationOrthogonalize;
    },
    operationPaste: function() {
      return operationPaste;
    },
    operationReflectLong: function() {
      return operationReflectLong;
    },
    operationReflectShort: function() {
      return operationReflectShort;
    },
    operationReverse: function() {
      return operationReverse;
    },
    operationRotate: function() {
      return operationRotate;
    },
    operationSplit: function() {
      return operationSplit;
    },
    operationStraighten: function() {
      return operationStraighten;
    },
    osmAreaKeys: function() {
      return osmAreaKeys;
    },
    osmChangeset: function() {
      return osmChangeset;
    },
    osmEntity: function() {
      return osmEntity;
    },
    osmFlowingWaterwayTagValues: function() {
      return osmFlowingWaterwayTagValues;
    },
    osmInferRestriction: function() {
      return osmInferRestriction;
    },
    osmIntersection: function() {
      return osmIntersection;
    },
    osmIsInterestingTag: function() {
      return osmIsInterestingTag;
    },
    osmIsOldMultipolygonOuterMember: function() {
      return osmIsOldMultipolygonOuterMember;
    },
    osmJoinWays: function() {
      return osmJoinWays;
    },
    osmLanes: function() {
      return osmLanes;
    },
    osmNode: function() {
      return osmNode;
    },
    osmNodeGeometriesForTags: function() {
      return osmNodeGeometriesForTags;
    },
    osmNote: function() {
      return osmNote;
    },
    osmOldMultipolygonOuterMember: function() {
      return osmOldMultipolygonOuterMember;
    },
    osmOldMultipolygonOuterMemberOfRelation: function() {
      return osmOldMultipolygonOuterMemberOfRelation;
    },
    osmOneWayTags: function() {
      return osmOneWayTags;
    },
    osmPavedTags: function() {
      return osmPavedTags;
    },
    osmPointTags: function() {
      return osmPointTags;
    },
    osmRailwayTrackTagValues: function() {
      return osmRailwayTrackTagValues;
    },
    osmRelation: function() {
      return osmRelation;
    },
    osmRoutableHighwayTagValues: function() {
      return osmRoutableHighwayTagValues;
    },
    osmSetAreaKeys: function() {
      return osmSetAreaKeys;
    },
    osmSetPointTags: function() {
      return osmSetPointTags;
    },
    osmSetVertexTags: function() {
      return osmSetVertexTags;
    },
    osmTagSuggestingArea: function() {
      return osmTagSuggestingArea;
    },
    osmTurn: function() {
      return osmTurn;
    },
    osmVertexTags: function() {
      return osmVertexTags;
    },
    osmWay: function() {
      return osmWay;
    },
    prefs: function() {
      return corePreferences;
    },
    presetCategory: function() {
      return presetCategory;
    },
    presetCollection: function() {
      return presetCollection;
    },
    presetField: function() {
      return presetField;
    },
    presetIndex: function() {
      return presetIndex;
    },
    presetManager: function() {
      return _mainPresetIndex;
    },
    presetPreset: function() {
      return presetPreset;
    },
    rendererBackground: function() {
      return rendererBackground;
    },
    rendererBackgroundSource: function() {
      return rendererBackgroundSource;
    },
    rendererFeatures: function() {
      return rendererFeatures;
    },
    rendererMap: function() {
      return rendererMap;
    },
    rendererPhotos: function() {
      return rendererPhotos;
    },
    rendererTileLayer: function() {
      return rendererTileLayer;
    },
    sdk: function() {
      return sdk;
    },
    serviceEsriData: function() {
      return esri_data_default;
    },
    serviceFbAIFeatures: function() {
      return fb_ai_features_default;
    },
    serviceImproveOSM: function() {
      return improveOSM_default;
    },
    serviceKeepRight: function() {
      return keepRight_default;
    },
    serviceMapRules: function() {
      return maprules_default;
    },
    serviceMapillary: function() {
      return mapillary_default;
    },
    serviceNominatim: function() {
      return nominatim_default;
    },
    serviceNsi: function() {
      return nsi_default;
    },
    serviceOpenstreetcam: function() {
      return openstreetcam_default;
    },
    serviceOsm: function() {
      return osm_default;
    },
    serviceOsmWikibase: function() {
      return osm_wikibase_default;
    },
    serviceOsmose: function() {
      return osmose_default;
    },
    serviceStreetside: function() {
      return streetside_default;
    },
    serviceTaginfo: function() {
      return taginfo_default;
    },
    serviceVectorTile: function() {
      return vector_tile_default;
    },
    serviceWikidata: function() {
      return wikidata_default;
    },
    serviceWikipedia: function() {
      return wikipedia_default;
    },
    services: function() {
      return services;
    },
    svgAreas: function() {
      return svgAreas;
    },
    svgData: function() {
      return svgData;
    },
    svgDebug: function() {
      return svgDebug;
    },
    svgDefs: function() {
      return svgDefs;
    },
    svgGeolocate: function() {
      return svgGeolocate;
    },
    svgIcon: function() {
      return svgIcon;
    },
    svgKeepRight: function() {
      return svgKeepRight;
    },
    svgLabels: function() {
      return svgLabels;
    },
    svgLayers: function() {
      return svgLayers;
    },
    svgLines: function() {
      return svgLines;
    },
    svgMapillaryImages: function() {
      return svgMapillaryImages;
    },
    svgMapillarySigns: function() {
      return svgMapillarySigns;
    },
    svgMarkerSegments: function() {
      return svgMarkerSegments;
    },
    svgMidpoints: function() {
      return svgMidpoints;
    },
    svgNotes: function() {
      return svgNotes;
    },
    svgOpenstreetcamImages: function() {
      return svgOpenstreetcamImages;
    },
    svgOsm: function() {
      return svgOsm;
    },
    svgPassiveVertex: function() {
      return svgPassiveVertex;
    },
    svgPath: function() {
      return svgPath;
    },
    svgPointTransform: function() {
      return svgPointTransform;
    },
    svgPoints: function() {
      return svgPoints;
    },
    svgRapidFeatures: function() {
      return svgRapidFeatures;
    },
    svgRelationMemberTags: function() {
      return svgRelationMemberTags;
    },
    svgSegmentWay: function() {
      return svgSegmentWay;
    },
    svgStreetside: function() {
      return svgStreetside;
    },
    svgTagClasses: function() {
      return svgTagClasses;
    },
    svgTagPattern: function() {
      return svgTagPattern;
    },
    svgTouch: function() {
      return svgTouch;
    },
    svgTurns: function() {
      return svgTurns;
    },
    svgVertices: function() {
      return svgVertices;
    },
    t: function() {
      return _t;
    },
    uiAccount: function() {
      return uiAccount;
    },
    uiAttribution: function() {
      return uiAttribution;
    },
    uiChangesetEditor: function() {
      return uiChangesetEditor;
    },
    uiCmd: function() {
      return uiCmd;
    },
    uiCombobox: function() {
      return uiCombobox;
    },
    uiCommit: function() {
      return uiCommit;
    },
    uiCommitWarnings: function() {
      return uiCommitWarnings;
    },
    uiConfirm: function() {
      return uiConfirm;
    },
    uiConflicts: function() {
      return uiConflicts;
    },
    uiContributors: function() {
      return uiContributors;
    },
    uiCurtain: function() {
      return uiCurtain;
    },
    uiDataEditor: function() {
      return uiDataEditor;
    },
    uiDataHeader: function() {
      return uiDataHeader;
    },
    uiDisclosure: function() {
      return uiDisclosure;
    },
    uiEditMenu: function() {
      return uiEditMenu;
    },
    uiEntityEditor: function() {
      return uiEntityEditor;
    },
    uiFeatureInfo: function() {
      return uiFeatureInfo;
    },
    uiFeatureList: function() {
      return uiFeatureList;
    },
    uiField: function() {
      return uiField;
    },
    uiFieldAccess: function() {
      return uiFieldAccess;
    },
    uiFieldAddress: function() {
      return uiFieldAddress;
    },
    uiFieldCheck: function() {
      return uiFieldCheck;
    },
    uiFieldCombo: function() {
      return uiFieldCombo;
    },
    uiFieldCycleway: function() {
      return uiFieldCycleway;
    },
    uiFieldDefaultCheck: function() {
      return uiFieldCheck;
    },
    uiFieldEmail: function() {
      return uiFieldText;
    },
    uiFieldHelp: function() {
      return uiFieldHelp;
    },
    uiFieldIdentifier: function() {
      return uiFieldText;
    },
    uiFieldLanes: function() {
      return uiFieldLanes;
    },
    uiFieldLocalized: function() {
      return uiFieldLocalized;
    },
    uiFieldManyCombo: function() {
      return uiFieldCombo;
    },
    uiFieldMultiCombo: function() {
      return uiFieldCombo;
    },
    uiFieldNetworkCombo: function() {
      return uiFieldCombo;
    },
    uiFieldNumber: function() {
      return uiFieldText;
    },
    uiFieldOnewayCheck: function() {
      return uiFieldCheck;
    },
    uiFieldRadio: function() {
      return uiFieldRadio;
    },
    uiFieldRestrictions: function() {
      return uiFieldRestrictions;
    },
    uiFieldRoadspeed: function() {
      return uiFieldRoadspeed;
    },
    uiFieldSemiCombo: function() {
      return uiFieldCombo;
    },
    uiFieldStructureRadio: function() {
      return uiFieldRadio;
    },
    uiFieldTel: function() {
      return uiFieldText;
    },
    uiFieldText: function() {
      return uiFieldText;
    },
    uiFieldTextarea: function() {
      return uiFieldTextarea;
    },
    uiFieldTypeCombo: function() {
      return uiFieldCombo;
    },
    uiFieldUrl: function() {
      return uiFieldText;
    },
    uiFieldWikidata: function() {
      return uiFieldWikidata;
    },
    uiFieldWikipedia: function() {
      return uiFieldWikipedia;
    },
    uiFields: function() {
      return uiFields;
    },
    uiFlash: function() {
      return uiFlash;
    },
    uiFormFields: function() {
      return uiFormFields;
    },
    uiFullScreen: function() {
      return uiFullScreen;
    },
    uiGeolocate: function() {
      return uiGeolocate;
    },
    uiImproveOsmComments: function() {
      return uiImproveOsmComments;
    },
    uiImproveOsmDetails: function() {
      return uiImproveOsmDetails;
    },
    uiImproveOsmEditor: function() {
      return uiImproveOsmEditor;
    },
    uiImproveOsmHeader: function() {
      return uiImproveOsmHeader;
    },
    uiInfo: function() {
      return uiInfo;
    },
    uiInfoPanels: function() {
      return uiInfoPanels;
    },
    uiInit: function() {
      return uiInit;
    },
    uiInspector: function() {
      return uiInspector;
    },
    uiIntro: function() {
      return uiIntro;
    },
    uiIssuesInfo: function() {
      return uiIssuesInfo;
    },
    uiKeepRightDetails: function() {
      return uiKeepRightDetails;
    },
    uiKeepRightEditor: function() {
      return uiKeepRightEditor;
    },
    uiKeepRightHeader: function() {
      return uiKeepRightHeader;
    },
    uiLasso: function() {
      return uiLasso;
    },
    uiLoading: function() {
      return uiLoading;
    },
    uiMapInMap: function() {
      return uiMapInMap;
    },
    uiModal: function() {
      return uiModal;
    },
    uiNoteComments: function() {
      return uiNoteComments;
    },
    uiNoteEditor: function() {
      return uiNoteEditor;
    },
    uiNoteHeader: function() {
      return uiNoteHeader;
    },
    uiNoteReport: function() {
      return uiNoteReport;
    },
    uiNotice: function() {
      return uiNotice;
    },
    uiPaneBackground: function() {
      return uiPaneBackground;
    },
    uiPaneHelp: function() {
      return uiPaneHelp;
    },
    uiPaneIssues: function() {
      return uiPaneIssues;
    },
    uiPaneMapData: function() {
      return uiPaneMapData;
    },
    uiPanePreferences: function() {
      return uiPanePreferences;
    },
    uiPanelBackground: function() {
      return uiPanelBackground;
    },
    uiPanelHistory: function() {
      return uiPanelHistory;
    },
    uiPanelLocation: function() {
      return uiPanelLocation;
    },
    uiPanelMeasurement: function() {
      return uiPanelMeasurement;
    },
    uiPopover: function() {
      return uiPopover;
    },
    uiPresetIcon: function() {
      return uiPresetIcon;
    },
    uiPresetList: function() {
      return uiPresetList;
    },
    uiRapidColorpicker: function() {
      return uiRapidColorpicker;
    },
    uiRapidFeatureInspector: function() {
      return uiRapidFeatureInspector;
    },
    uiRapidFeatureToggleDialog: function() {
      return uiRapidFeatureToggleDialog;
    },
    uiRapidFirstEditDialog: function() {
      return uiRapidFirstEditDialog;
    },
    uiRapidPowerUserFeaturesDialog: function() {
      return uiRapidPowerUserFeaturesDialog;
    },
    uiRapidServiceLicense: function() {
      return uiRapidServiceLicense;
    },
    uiRapidSplash: function() {
      return uiRapidSplash;
    },
    uiRapidViewManageDatasets: function() {
      return uiRapidViewManageDatasets;
    },
    uiRapidWhatsNew: function() {
      return uiRapidWhatsNew;
    },
    uiRestore: function() {
      return uiRestore;
    },
    uiScale: function() {
      return uiScale;
    },
    uiSectionBackgroundDisplayOptions: function() {
      return uiSectionBackgroundDisplayOptions;
    },
    uiSectionBackgroundList: function() {
      return uiSectionBackgroundList;
    },
    uiSectionBackgroundOffset: function() {
      return uiSectionBackgroundOffset;
    },
    uiSectionChanges: function() {
      return uiSectionChanges;
    },
    uiSectionDataLayers: function() {
      return uiSectionDataLayers;
    },
    uiSectionEntityIssues: function() {
      return uiSectionEntityIssues;
    },
    uiSectionFeatureType: function() {
      return uiSectionFeatureType;
    },
    uiSectionMapFeatures: function() {
      return uiSectionMapFeatures;
    },
    uiSectionMapStyleOptions: function() {
      return uiSectionMapStyleOptions;
    },
    uiSectionOverlayList: function() {
      return uiSectionOverlayList;
    },
    uiSectionPhotoOverlays: function() {
      return uiSectionPhotoOverlays;
    },
    uiSectionPresetFields: function() {
      return uiSectionPresetFields;
    },
    uiSectionPrivacy: function() {
      return uiSectionPrivacy;
    },
    uiSectionRawMemberEditor: function() {
      return uiSectionRawMemberEditor;
    },
    uiSectionRawMembershipEditor: function() {
      return uiSectionRawMembershipEditor;
    },
    uiSectionRawTagEditor: function() {
      return uiSectionRawTagEditor;
    },
    uiSectionSelectionList: function() {
      return uiSectionSelectionList;
    },
    uiSectionValidationIssues: function() {
      return uiSectionValidationIssues;
    },
    uiSectionValidationOptions: function() {
      return uiSectionValidationOptions;
    },
    uiSectionValidationRules: function() {
      return uiSectionValidationRules;
    },
    uiSectionValidationStatus: function() {
      return uiSectionValidationStatus;
    },
    uiSettingsCustomBackground: function() {
      return uiSettingsCustomBackground;
    },
    uiSettingsCustomData: function() {
      return uiSettingsCustomData;
    },
    uiSidebar: function() {
      return uiSidebar;
    },
    uiSourceSwitch: function() {
      return uiSourceSwitch;
    },
    uiSpinner: function() {
      return uiSpinner;
    },
    uiSplash: function() {
      return uiSplash;
    },
    uiStatus: function() {
      return uiStatus;
    },
    uiSuccess: function() {
      return uiSuccess;
    },
    uiTagReference: function() {
      return uiTagReference;
    },
    uiToggle: function() {
      return uiToggle;
    },
    uiTooltip: function() {
      return uiTooltip;
    },
    uiVersion: function() {
      return uiVersion;
    },
    uiViewOnKeepRight: function() {
      return uiViewOnKeepRight;
    },
    uiViewOnOSM: function() {
      return uiViewOnOSM;
    },
    uiZoom: function() {
      return uiZoom;
    },
    utilAsyncMap: function() {
      return utilAsyncMap;
    },
    utilDetect: function() {
      return utilDetect;
    },
    utilDisplayLabel: function() {
      return utilDisplayLabel;
    },
    utilDisplayName: function() {
      return utilDisplayName;
    },
    utilDisplayNameForPath: function() {
      return utilDisplayNameForPath;
    },
    utilDisplayType: function() {
      return utilDisplayType;
    },
    utilFastMouse: function() {
      return utilFastMouse;
    },
    utilFunctor: function() {
      return utilFunctor;
    },
    utilGetSetValue: function() {
      return utilGetSetValue;
    },
    utilHighlightEntities: function() {
      return utilHighlightEntities;
    },
    utilKeybinding: function() {
      return utilKeybinding;
    },
    utilNoAuto: function() {
      return utilNoAuto;
    },
    utilPrefixCSSProperty: function() {
      return utilPrefixCSSProperty;
    },
    utilPrefixDOMProperty: function() {
      return utilPrefixDOMProperty;
    },
    utilRebind: function() {
      return utilRebind;
    },
    utilSetTransform: function() {
      return utilSetTransform;
    },
    utilTotalExtent: function() {
      return utilTotalExtent;
    },
    utilTriggerEvent: function() {
      return utilTriggerEvent;
    },
    utilWrap: function() {
      return utilWrap;
    },
    validationAlmostJunction: function() {
      return validationAlmostJunction;
    },
    validationCloseNodes: function() {
      return validationCloseNodes;
    },
    validationCrossingWays: function() {
      return validationCrossingWays;
    },
    validationDisconnectedWay: function() {
      return validationDisconnectedWay;
    },
    validationDuplicateWaySegments: function() {
      return validationDuplicateWaySegments;
    },
    validationFormatting: function() {
      return validationFormatting;
    },
    validationHelpRequest: function() {
      return validationHelpRequest;
    },
    validationImpossibleOneway: function() {
      return validationImpossibleOneway;
    },
    validationIncompatibleSource: function() {
      return validationIncompatibleSource;
    },
    validationMaprules: function() {
      return validationMaprules;
    },
    validationMismatchedGeometry: function() {
      return validationMismatchedGeometry;
    },
    validationMissingRole: function() {
      return validationMissingRole;
    },
    validationMissingTag: function() {
      return validationMissingTag;
    },
    validationOutdatedTags: function() {
      return validationOutdatedTags;
    },
    validationPrivateData: function() {
      return validationPrivateData;
    },
    validationSuspiciousName: function() {
      return validationSuspiciousName;
    },
    validationUnsquareWay: function() {
      return validationUnsquareWay;
    },
    validationYShapedConnection: function() {
      return validationYShapedConnection;
    }
  });

  // modules/actions/add_entity.js
  function actionAddEntity(way) {
    return function(graph3) {
      return graph3.replace(way);
    };
  }

  // node_modules/@id-sdk/util/built/util.mjs
  var import_aes_js = __toModule(require_aes_js());
  var import_diacritics = __toModule(require_diacritics());
  var DEFAULT_128 = [250, 157, 60, 79, 142, 134, 229, 129, 138, 126, 210, 129, 29, 71, 160, 208];
  function utilAesDecrypt(encryptedHex, key) {
    key = key || DEFAULT_128;
    var encryptedBytes = import_aes_js.default.utils.hex.toBytes(encryptedHex);
    var aesCtr = new import_aes_js.default.ModeOfOperation.ctr(key);
    var decryptedBytes = aesCtr.decrypt(encryptedBytes);
    var text = import_aes_js.default.utils.utf8.fromBytes(decryptedBytes);
    return text;
  }
  function utilArrayIdentical(a, b2) {
    if (a === b2)
      return true;
    var i2 = a.length;
    if (i2 !== b2.length)
      return false;
    while (i2--) {
      if (a[i2] !== b2[i2])
        return false;
    }
    return true;
  }
  function utilArrayDifference(a, b2) {
    var other = new Set(b2);
    return Array.from(new Set(a)).filter(function(val) {
      return !other.has(val);
    });
  }
  function utilArrayIntersection(a, b2) {
    var other = new Set(b2);
    return Array.from(new Set(a)).filter(function(val) {
      return other.has(val);
    });
  }
  function utilArrayUnion(a, b2) {
    var result6 = new Set(a);
    b2.forEach(function(val) {
      return result6.add(val);
    });
    return Array.from(result6);
  }
  function utilArrayUniq(a) {
    return Array.from(new Set(a));
  }
  function utilArrayChunk(a, chunkSize) {
    if (!chunkSize || chunkSize < 0)
      return [a.slice()];
    var result6 = new Array(Math.ceil(a.length / chunkSize));
    return Array.from(result6, function(item, i2) {
      return a.slice(i2 * chunkSize, i2 * chunkSize + chunkSize);
    });
  }
  function utilArrayFlatten(a) {
    return a.reduce(function(acc, val) {
      return acc.concat(val);
    }, []);
  }
  function utilArrayGroupBy(a, key) {
    return a.reduce(function(acc, item) {
      var group = typeof key === "function" ? key(item) : item[key];
      (acc[group] = acc[group] || []).push(item);
      return acc;
    }, {});
  }
  function utilArrayUniqBy(a, key) {
    var seen = new Set();
    return a.reduce(function(acc, item) {
      var val = typeof key === "function" ? key(item) : item[key];
      if (val && !seen.has(val)) {
        seen.add(val);
        acc.push(item);
      }
      return acc;
    }, []);
  }
  function utilObjectOmit(obj, omitKeys) {
    return Object.keys(obj).reduce(function(result6, key) {
      if (omitKeys.indexOf(key) === -1) {
        result6[key] = obj[key];
      }
      return result6;
    }, {});
  }
  function utilCleanTags(tags) {
    var out = {};
    for (var k in tags) {
      if (!k)
        continue;
      var v = tags[k];
      if (v !== void 0) {
        out[k] = cleanValue(k, v);
      }
    }
    return out;
    function cleanValue(k2, v2) {
      function keepSpaces(k22) {
        return /_hours|_times|:conditional$/.test(k22);
      }
      function skip(k22) {
        return /^(description|note|fixme)$/.test(k22);
      }
      if (skip(k2))
        return v2;
      var cleaned = v2.split(";").map(function(str) {
        return str.trim();
      }).join(keepSpaces(k2) ? "; " : ";");
      if (k2.indexOf("website") !== -1 || k2.indexOf("email") !== -1 || cleaned.indexOf("http") === 0) {
        cleaned = cleaned.replace(/[\u200B-\u200F\uFEFF]/g, "");
      }
      return cleaned;
    }
  }
  function utilDeepMemberSelector(ids, graph3, skipMultipolgonMembers) {
    var idsSet = new Set(ids);
    var seen = new Set();
    var returners = new Set();
    ids.forEach(collectDeepDescendants);
    return utilEntitySelector(Array.from(returners));
    function collectDeepDescendants(id2) {
      if (seen.has(id2))
        return;
      seen.add(id2);
      if (!idsSet.has(id2)) {
        returners.add(id2);
      }
      var entity2 = graph3.hasEntity(id2);
      if (!entity2 || entity2.type !== "relation")
        return;
      if (skipMultipolgonMembers && entity2.isMultipolygon())
        return;
      (entity2.members || []).forEach(function(member) {
        return collectDeepDescendants(member.id);
      });
    }
  }
  function utilEntityAndDeepMemberIDs(ids, graph3) {
    var seen = new Set();
    ids.forEach(collectDeepDescendants);
    return Array.from(seen);
    function collectDeepDescendants(id2) {
      if (seen.has(id2))
        return;
      seen.add(id2);
      var entity2 = graph3.hasEntity(id2);
      if (!entity2 || entity2.type !== "relation")
        return;
      (entity2.members || []).forEach(function(member) {
        return collectDeepDescendants(member.id);
      });
    }
  }
  function utilEntityOrMemberSelector(ids, graph3) {
    var seen = new Set(ids);
    ids.forEach(collectShallowDescendants);
    return utilEntitySelector(Array.from(seen));
    function collectShallowDescendants(id2) {
      var entity2 = graph3.hasEntity(id2);
      if (!entity2 || entity2.type !== "relation")
        return;
      (entity2.members || []).forEach(function(member) {
        return seen.add(member.id);
      });
    }
  }
  function utilEntityOrDeepMemberSelector(ids, graph3) {
    return utilEntitySelector(utilEntityAndDeepMemberIDs(ids, graph3));
  }
  function utilEntitySelector(ids) {
    return ids.length ? "." + ids.join(",.") : "nothing";
  }
  function utilGetAllNodes(ids, graph3) {
    var seen = new Set();
    var nodes = new Set();
    ids.forEach(collectNodes);
    return Array.from(nodes);
    function collectNodes(id2) {
      if (seen.has(id2))
        return;
      seen.add(id2);
      var entity2 = graph3.hasEntity(id2);
      if (!entity2)
        return;
      if (entity2.type === "node") {
        nodes.add(entity2);
      } else if (entity2.type === "way") {
        (entity2.nodes || []).forEach(collectNodes);
      } else {
        (entity2.members || []).forEach(function(member) {
          return collectNodes(member.id);
        });
      }
    }
  }
  function utilTagDiff(oldTags, newTags) {
    var tagDiff = [];
    var keys3 = utilArrayUnion(Object.keys(oldTags), Object.keys(newTags)).sort();
    keys3.forEach(function(k) {
      var oldVal = oldTags[k];
      var newVal = newTags[k];
      if ((oldVal || oldVal === "") && (newVal === void 0 || newVal !== oldVal)) {
        tagDiff.push({
          type: "-",
          key: k,
          oldVal: oldVal,
          newVal: newVal,
          display: "- ".concat(k, "=").concat(oldVal)
        });
      }
      if ((newVal || newVal === "") && (oldVal === void 0 || newVal !== oldVal)) {
        tagDiff.push({
          type: "+",
          key: k,
          oldVal: oldVal,
          newVal: newVal,
          display: "+ ".concat(k, "=").concat(newVal)
        });
      }
    });
    return tagDiff;
  }
  function utilTagText(entity2) {
    var obj = entity2 && entity2.tags || {};
    return Object.keys(obj).map(function(k) {
      return "".concat(k, "=").concat(obj[k]);
    }).join(", ");
  }
  function utilSessionMutex(name) {
    var _intervalID;
    function renew() {
      var expires = new Date();
      expires.setSeconds(expires.getSeconds() + 5);
      document.cookie = name + "=1; expires=" + expires.toUTCString() + "; sameSite=strict";
    }
    var _mutex = {
      lock: function lock() {
        if (_intervalID)
          return true;
        var cookie = document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + name + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1");
        if (cookie)
          return false;
        renew();
        _intervalID = window.setInterval(renew, 4e3);
        return true;
      },
      unlock: function unlock() {
        if (!_intervalID)
          return;
        document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; sameSite=strict";
        clearInterval(_intervalID);
        _intervalID = null;
      },
      locked: function locked() {
        return !!_intervalID;
      }
    };
    return _mutex;
  }
  function utilEditDistance(a, b2) {
    a = (0, import_diacritics.remove)(a.toLowerCase());
    b2 = (0, import_diacritics.remove)(b2.toLowerCase());
    if (a.length === 0)
      return b2.length;
    if (b2.length === 0)
      return a.length;
    var matrix = [];
    for (var i2 = 0; i2 <= b2.length; i2++) {
      matrix[i2] = [i2];
    }
    for (var j = 0; j <= a.length; j++) {
      matrix[0][j] = j;
    }
    for (var _i = 1; _i <= b2.length; _i++) {
      for (var _j = 1; _j <= a.length; _j++) {
        if (b2.charAt(_i - 1) === a.charAt(_j - 1)) {
          matrix[_i][_j] = matrix[_i - 1][_j - 1];
        } else {
          matrix[_i][_j] = Math.min(matrix[_i - 1][_j - 1] + 1, Math.min(matrix[_i][_j - 1] + 1, matrix[_i - 1][_j] + 1));
        }
      }
    }
    return matrix[b2.length][a.length];
  }
  function utilHashcode(str) {
    var hash = 0;
    if (str.length === 0)
      return hash;
    for (var i2 = 0; i2 < str.length; i2++) {
      var char = str.charCodeAt(i2);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return hash;
  }
  function utilQsString(obj, noencode) {
    function softEncode(s) {
      return encodeURIComponent(s).replace(/(%2F|%3A|%2C|%7B|%7D)/g, decodeURIComponent);
    }
    return Object.keys(obj).sort().map(function(key) {
      return encodeURIComponent(key) + "=" + (noencode ? softEncode(obj[key]) : encodeURIComponent(obj[key]));
    }).join("&");
  }
  function utilStringQs(str) {
    var i2 = 0;
    while (i2 < str.length && (str[i2] === "?" || str[i2] === "#")) {
      i2++;
    }
    str = str.slice(i2);
    return str.split("&").reduce(function(obj, pair2) {
      var parts = pair2.split("=");
      if (parts.length === 2) {
        obj[parts[0]] = decodeURIComponent(parts[1]);
      }
      return obj;
    }, {});
  }
  function utilUnicodeCharsCount(str) {
    return Array.from(str).length;
  }
  function utilUnicodeCharsTruncated(str, limit) {
    return Array.from(str).slice(0, limit).join("");
  }
  function utilSafeString(str) {
    return str.toLowerCase().replace(/[^a-z0-9]+/g, "_");
  }
  function utilUniqueString(val) {
    return "ideditor-" + utilSafeString(val.toString()) + "-" + new Date().getTime().toString();
  }

  // modules/actions/reverse.js
  function actionReverse(entityID, options) {
    var ignoreKey = /^.*(_|:)?(description|name|note|website|ref|source|comment|watch|attribution)(_|:)?/;
    var numeric = /^([+\-]?)(?=[\d.])/;
    var directionKey = /direction$/;
    var turn_lanes = /^turn:lanes:?/;
    var keyReplacements = [[/:right$/, ":left"], [/:left$/, ":right"], [/:forward$/, ":backward"], [/:backward$/, ":forward"], [/:right:/, ":left:"], [/:left:/, ":right:"], [/:forward:/, ":backward:"], [/:backward:/, ":forward:"]];
    var valueReplacements = {
      left: "right",
      right: "left",
      up: "down",
      down: "up",
      forward: "backward",
      backward: "forward",
      forwards: "backward",
      backwards: "forward"
    };
    var roleReplacements = {
      forward: "backward",
      backward: "forward",
      forwards: "backward",
      backwards: "forward"
    };
    var onewayReplacements = {
      yes: "-1",
      "1": "-1",
      "-1": "yes"
    };
    var compassReplacements = {
      N: "S",
      NNE: "SSW",
      NE: "SW",
      ENE: "WSW",
      E: "W",
      ESE: "WNW",
      SE: "NW",
      SSE: "NNW",
      S: "N",
      SSW: "NNE",
      SW: "NE",
      WSW: "ENE",
      W: "E",
      WNW: "ESE",
      NW: "SE",
      NNW: "SSE"
    };
    function reverseKey(key) {
      for (var i2 = 0; i2 < keyReplacements.length; ++i2) {
        var replacement = keyReplacements[i2];
        if (replacement[0].test(key)) {
          return key.replace(replacement[0], replacement[1]);
        }
      }
      return key;
    }
    function reverseValue(key, value2, includeAbsolute) {
      if (ignoreKey.test(key))
        return value2;
      if (turn_lanes.test(key)) {
        return value2;
      } else if (key === "incline" && numeric.test(value2)) {
        return value2.replace(numeric, function(_2, sign2) {
          return sign2 === "-" ? "" : "-";
        });
      } else if (options && options.reverseOneway && key === "oneway") {
        return onewayReplacements[value2] || value2;
      } else if (includeAbsolute && directionKey.test(key)) {
        if (compassReplacements[value2])
          return compassReplacements[value2];
        var degrees3 = parseFloat(value2);
        if (typeof degrees3 === "number" && !isNaN(degrees3)) {
          if (degrees3 < 180) {
            degrees3 += 180;
          } else {
            degrees3 -= 180;
          }
          return degrees3.toString();
        }
      }
      return valueReplacements[value2] || value2;
    }
    function reverseNodeTags(graph3, nodeIDs) {
      for (var i2 = 0; i2 < nodeIDs.length; i2++) {
        var node = graph3.hasEntity(nodeIDs[i2]);
        if (!node || !Object.keys(node.tags).length)
          continue;
        var tags = {};
        for (var key in node.tags) {
          tags[reverseKey(key)] = reverseValue(key, node.tags[key], node.id === entityID);
        }
        graph3 = graph3.replace(node.update({
          tags: tags
        }));
      }
      return graph3;
    }
    function reverseWay(graph3, way) {
      var nodes = way.nodes.slice().reverse();
      var tags = {};
      var role;
      for (var key in way.tags) {
        tags[reverseKey(key)] = reverseValue(key, way.tags[key]);
      }
      graph3.parentRelations(way).forEach(function(relation) {
        relation.members.forEach(function(member, index) {
          if (member.id === way.id && (role = roleReplacements[member.role])) {
            relation = relation.updateMember({
              role: role
            }, index);
            graph3 = graph3.replace(relation);
          }
        });
      });
      return reverseNodeTags(graph3, nodes).replace(way.update({
        nodes: nodes,
        tags: tags
      }));
    }
    var action = function action2(graph3) {
      var entity2 = graph3.entity(entityID);
      if (entity2.type === "way") {
        return reverseWay(graph3, entity2);
      }
      return reverseNodeTags(graph3, [entityID]);
    };
    action.disabled = function(graph3) {
      var entity2 = graph3.hasEntity(entityID);
      if (!entity2 || entity2.type === "way")
        return false;
      for (var key in entity2.tags) {
        var value2 = entity2.tags[key];
        if (reverseKey(key) !== key || reverseValue(key, value2, true) !== value2) {
          return false;
        }
      }
      return "nondirectional_node";
    };
    action.entityID = function() {
      return entityID;
    };
    return action;
  }

  // modules/osm/tags.js
  function osmIsInterestingTag(key) {
    return key !== "attribution" && key !== "created_by" && key !== "source" && key !== "odbl" && key.indexOf("source:") !== 0 && key.indexOf("source_ref") !== 0 && !key.startsWith("ref:") && key.indexOf("tiger:") !== 0;
  }
  var osmAreaKeys = {};
  function osmSetAreaKeys(value2) {
    osmAreaKeys = value2;
  }
  function osmTagSuggestingArea(tags) {
    if (tags.area === "yes")
      return {
        area: "yes"
      };
    if (tags.area === "no")
      return null;
    if (tags.__action === "edit" || tags.__action === "delete")
      return true;
    var lineKeys = {
      highway: {
        rest_area: true,
        services: true
      },
      railway: {
        roundhouse: true,
        station: true,
        traverser: true,
        turntable: true,
        wash: true
      }
    };
    var returnTags = {};
    for (var key in tags) {
      if (key in osmAreaKeys && !(tags[key] in osmAreaKeys[key])) {
        returnTags[key] = tags[key];
        return returnTags;
      }
      if (key in lineKeys && tags[key] in lineKeys[key]) {
        returnTags[key] = tags[key];
        return returnTags;
      }
    }
    return null;
  }
  var osmPointTags = {};
  function osmSetPointTags(value2) {
    osmPointTags = value2;
  }
  var osmVertexTags = {};
  function osmSetVertexTags(value2) {
    osmVertexTags = value2;
  }
  function osmNodeGeometriesForTags(nodeTags) {
    var geometries = {};
    for (var key in nodeTags) {
      if (osmPointTags[key] && (osmPointTags[key]["*"] || osmPointTags[key][nodeTags[key]])) {
        geometries.point = true;
      }
      if (osmVertexTags[key] && (osmVertexTags[key]["*"] || osmVertexTags[key][nodeTags[key]])) {
        geometries.vertex = true;
      }
      if (geometries.point && geometries.vertex)
        break;
    }
    return geometries;
  }
  var osmOneWayTags = {
    "aerialway": {
      "chair_lift": true,
      "drag_lift": true,
      "j-bar": true,
      "magic_carpet": true,
      "mixed_lift": true,
      "platter": true,
      "rope_tow": true,
      "t-bar": true,
      "zip_line": true
    },
    "highway": {
      "motorway": true
    },
    "junction": {
      "circular": true,
      "roundabout": true
    },
    "man_made": {
      "goods_conveyor": true,
      "piste:halfpipe": true
    },
    "piste:type": {
      "downhill": true,
      "sled": true,
      "yes": true
    },
    "waterway": {
      "canal": true,
      "ditch": true,
      "drain": true,
      "fish_pass": true,
      "river": true,
      "stream": true,
      "tidal_channel": true
    },
    "seamark:type": {
      "separation_lane": true
    }
  };
  var osmPavedTags = {
    "surface": {
      "paved": true,
      "asphalt": true,
      "concrete": true,
      "concrete:lanes": true,
      "concrete:plates": true
    },
    "tracktype": {
      "grade1": true
    }
  };
  var osmSemipavedTags = {
    "surface": {
      "cobblestone": true,
      "cobblestone:flattened": true,
      "unhewn_cobblestone": true,
      "sett": true,
      "paving_stones": true,
      "metal": true,
      "wood": true
    }
  };
  var osmRightSideIsInsideTags = {
    "natural": {
      "cliff": true,
      "coastline": "coastline"
    },
    "barrier": {
      "retaining_wall": true,
      "kerb": true,
      "guard_rail": true,
      "city_wall": true
    },
    "man_made": {
      "video_wall": true,
      "embankment": true
    },
    "waterway": {
      "weir": true
    }
  };
  var osmRoutableHighwayTagValues = {
    motorway: true,
    trunk: true,
    primary: true,
    secondary: true,
    tertiary: true,
    residential: true,
    motorway_link: true,
    trunk_link: true,
    primary_link: true,
    secondary_link: true,
    tertiary_link: true,
    unclassified: true,
    road: true,
    service: true,
    track: true,
    living_street: true,
    bus_guideway: true,
    path: true,
    footway: true,
    cycleway: true,
    bridleway: true,
    pedestrian: true,
    corridor: true,
    steps: true
  };
  var osmPathHighwayTagValues = {
    path: true,
    footway: true,
    cycleway: true,
    bridleway: true,
    pedestrian: true,
    corridor: true,
    steps: true
  };
  var osmRailwayTrackTagValues = {
    rail: true,
    light_rail: true,
    tram: true,
    subway: true,
    monorail: true,
    funicular: true,
    miniature: true,
    narrow_gauge: true,
    disused: true,
    preserved: true
  };
  var osmFlowingWaterwayTagValues = {
    canal: true,
    ditch: true,
    drain: true,
    fish_pass: true,
    river: true,
    stream: true,
    tidal_channel: true
  };

  // node_modules/d3-array/src/ascending.js
  function ascending(a, b2) {
    return a == null || b2 == null ? NaN : a < b2 ? -1 : a > b2 ? 1 : a >= b2 ? 0 : NaN;
  }

  // node_modules/d3-array/src/bisector.js
  function bisector(f2) {
    var delta = f2;
    var compare1 = f2;
    var compare2 = f2;
    if (f2.length !== 2) {
      delta = function delta2(d, x2) {
        return f2(d) - x2;
      };
      compare1 = ascending;
      compare2 = function compare22(d, x2) {
        return ascending(f2(d), x2);
      };
    }
    function left(a, x2) {
      var lo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var hi = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : a.length;
      if (lo < hi) {
        if (compare1(x2, x2) !== 0)
          return hi;
        do {
          var mid = lo + hi >>> 1;
          if (compare2(a[mid], x2) < 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a, x2) {
      var lo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var hi = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : a.length;
      if (lo < hi) {
        if (compare1(x2, x2) !== 0)
          return hi;
        do {
          var mid = lo + hi >>> 1;
          if (compare2(a[mid], x2) <= 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a, x2) {
      var lo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var hi = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : a.length;
      var i2 = left(a, x2, lo, hi - 1);
      return i2 > lo && delta(a[i2 - 1], x2) > -delta(a[i2], x2) ? i2 - 1 : i2;
    }
    return {
      left: left,
      center: center,
      right: right
    };
  }

  // node_modules/d3-array/src/number.js
  var import_regenerator = __toModule(require_regenerator());
  var _marked = /* @__PURE__ */ import_regenerator.default.mark(numbers);
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length)
            return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e3(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e3(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function number(x2) {
    return x2 === null ? NaN : +x2;
  }
  function numbers(values2, valueof) {
    var _iterator, _step, value2, index, _iterator2, _step2, _value;
    return import_regenerator.default.wrap(function numbers$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(valueof === void 0)) {
              _context.next = 21;
              break;
            }
            _iterator = _createForOfIteratorHelper(values2);
            _context.prev = 2;
            _iterator.s();
          case 4:
            if ((_step = _iterator.n()).done) {
              _context.next = 11;
              break;
            }
            value2 = _step.value;
            if (!(value2 != null && (value2 = +value2) >= value2)) {
              _context.next = 9;
              break;
            }
            _context.next = 9;
            return value2;
          case 9:
            _context.next = 4;
            break;
          case 11:
            _context.next = 16;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](2);
            _iterator.e(_context.t0);
          case 16:
            _context.prev = 16;
            _iterator.f();
            return _context.finish(16);
          case 19:
            _context.next = 40;
            break;
          case 21:
            index = -1;
            _iterator2 = _createForOfIteratorHelper(values2);
            _context.prev = 23;
            _iterator2.s();
          case 25:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 32;
              break;
            }
            _value = _step2.value;
            if (!((_value = valueof(_value, ++index, values2)) != null && (_value = +_value) >= _value)) {
              _context.next = 30;
              break;
            }
            _context.next = 30;
            return _value;
          case 30:
            _context.next = 25;
            break;
          case 32:
            _context.next = 37;
            break;
          case 34:
            _context.prev = 34;
            _context.t1 = _context["catch"](23);
            _iterator2.e(_context.t1);
          case 37:
            _context.prev = 37;
            _iterator2.f();
            return _context.finish(37);
          case 40:
          case "end":
            return _context.stop();
        }
      }
    }, _marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
  }

  // node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number).center;
  var bisect_default = bisectRight;

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  init_arrayLikeToArray();
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray2(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  init_unsupportedIterableToArray();

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
  }

  // node_modules/d3-array/src/descending.js
  function descending(a, b2) {
    return a == null || b2 == null ? NaN : b2 < a ? -1 : b2 > a ? 1 : b2 >= a ? 0 : NaN;
  }

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/d3-array/src/fsum.js
  var Adder = /* @__PURE__ */ function() {
    function Adder2() {
      _classCallCheck(this, Adder2);
      this._partials = new Float64Array(32);
      this._n = 0;
    }
    _createClass(Adder2, [{
      key: "add",
      value: function add2(x2) {
        var p2 = this._partials;
        var i2 = 0;
        for (var j = 0; j < this._n && j < 32; j++) {
          var y = p2[j], hi = x2 + y, lo = Math.abs(x2) < Math.abs(y) ? x2 - (hi - y) : y - (hi - x2);
          if (lo)
            p2[i2++] = lo;
          x2 = hi;
        }
        p2[i2] = x2;
        this._n = i2 + 1;
        return this;
      }
    }, {
      key: "valueOf",
      value: function valueOf() {
        var p2 = this._partials;
        var n2 = this._n, x2, y, lo, hi = 0;
        if (n2 > 0) {
          hi = p2[--n2];
          while (n2 > 0) {
            x2 = hi;
            y = p2[--n2];
            hi = x2 + y;
            lo = y - (hi - x2);
            if (lo)
              break;
          }
          if (n2 > 0 && (lo < 0 && p2[n2 - 1] < 0 || lo > 0 && p2[n2 - 1] > 0)) {
            y = lo * 2;
            x2 = hi + y;
            if (y == x2 - hi)
              hi = x2;
          }
        }
        return hi;
      }
    }]);
    return Adder2;
  }();

  // node_modules/d3-array/src/sort.js
  init_slicedToArray();
  function compareDefined() {
    var compare = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ascending;
    if (compare === ascending)
      return ascendingDefined;
    if (typeof compare !== "function")
      throw new TypeError("compare is not a function");
    return function(a, b2) {
      var x2 = compare(a, b2);
      if (x2 || x2 === 0)
        return x2;
      return (compare(b2, b2) === 0) - (compare(a, a) === 0);
    };
  }
  function ascendingDefined(a, b2) {
    return (a == null || !(a >= a)) - (b2 == null || !(b2 >= b2)) || (a < b2 ? -1 : a > b2 ? 1 : 0);
  }

  // node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e2 = Math.sqrt(2);
  function ticks(start2, stop2, count) {
    var reverse2, i2 = -1, n2, ticks2, step;
    stop2 = +stop2, start2 = +start2, count = +count;
    if (start2 === stop2 && count > 0)
      return [start2];
    if (reverse2 = stop2 < start2)
      n2 = start2, start2 = stop2, stop2 = n2;
    if ((step = tickIncrement(start2, stop2, count)) === 0 || !isFinite(step))
      return [];
    if (step > 0) {
      var r0 = Math.round(start2 / step), r1 = Math.round(stop2 / step);
      if (r0 * step < start2)
        ++r0;
      if (r1 * step > stop2)
        --r1;
      ticks2 = new Array(n2 = r1 - r0 + 1);
      while (++i2 < n2) {
        ticks2[i2] = (r0 + i2) * step;
      }
    } else {
      step = -step;
      var _r = Math.round(start2 * step), _r2 = Math.round(stop2 * step);
      if (_r / step < start2)
        ++_r;
      if (_r2 / step > stop2)
        --_r2;
      ticks2 = new Array(n2 = _r2 - _r + 1);
      while (++i2 < n2) {
        ticks2[i2] = (_r + i2) / step;
      }
    }
    if (reverse2)
      ticks2.reverse();
    return ticks2;
  }
  function tickIncrement(start2, stop2, count) {
    var step = (stop2 - start2) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  }
  function tickStep(start2, stop2, count) {
    var step0 = Math.abs(stop2 - start2) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e10)
      step1 *= 10;
    else if (error >= e5)
      step1 *= 5;
    else if (error >= e2)
      step1 *= 2;
    return stop2 < start2 ? -step1 : step1;
  }

  // node_modules/d3-array/src/max.js
  function _createForOfIteratorHelper2(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray3(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length)
            return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e3(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e3(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray3(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray3(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray3(o2, minLen);
  }
  function _arrayLikeToArray3(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function max(values2, valueof) {
    var max2;
    if (valueof === void 0) {
      var _iterator = _createForOfIteratorHelper2(values2), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var value2 = _step.value;
          if (value2 != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
            max2 = value2;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;
      var _iterator2 = _createForOfIteratorHelper2(values2), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var _value = _step2.value;
          if ((_value = valueof(_value, ++index, values2)) != null && (max2 < _value || max2 === void 0 && _value >= _value)) {
            max2 = _value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    return max2;
  }

  // node_modules/d3-array/src/min.js
  function _createForOfIteratorHelper3(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray4(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length)
            return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e3(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e3(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray4(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray4(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray4(o2, minLen);
  }
  function _arrayLikeToArray4(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function min(values2, valueof) {
    var min2;
    if (valueof === void 0) {
      var _iterator = _createForOfIteratorHelper3(values2), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var value2 = _step.value;
          if (value2 != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
            min2 = value2;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;
      var _iterator2 = _createForOfIteratorHelper3(values2), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var _value = _step2.value;
          if ((_value = valueof(_value, ++index, values2)) != null && (min2 > _value || min2 === void 0 && _value >= _value)) {
            min2 = _value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    return min2;
  }

  // node_modules/d3-array/src/quickselect.js
  function quickselect(array2, k) {
    var left = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var right = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : array2.length - 1;
    var compare = arguments.length > 4 ? arguments[4] : void 0;
    compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
    while (right > left) {
      if (right - left > 600) {
        var n2 = right - left + 1;
        var m = k - left + 1;
        var z = Math.log(n2);
        var s = 0.5 * Math.exp(2 * z / 3);
        var sd = 0.5 * Math.sqrt(z * s * (n2 - s) / n2) * (m - n2 / 2 < 0 ? -1 : 1);
        var newLeft = Math.max(left, Math.floor(k - m * s / n2 + sd));
        var newRight = Math.min(right, Math.floor(k + (n2 - m) * s / n2 + sd));
        quickselect(array2, k, newLeft, newRight, compare);
      }
      var t = array2[k];
      var i2 = left;
      var j = right;
      swap(array2, left, k);
      if (compare(array2[right], t) > 0)
        swap(array2, left, right);
      while (i2 < j) {
        swap(array2, i2, j), ++i2, --j;
        while (compare(array2[i2], t) < 0) {
          ++i2;
        }
        while (compare(array2[j], t) > 0) {
          --j;
        }
      }
      if (compare(array2[left], t) === 0)
        swap(array2, left, j);
      else
        ++j, swap(array2, j, right);
      if (j <= k)
        left = j + 1;
      if (k <= j)
        right = j - 1;
    }
    return array2;
  }
  function swap(array2, i2, j) {
    var t = array2[i2];
    array2[i2] = array2[j];
    array2[j] = t;
  }

  // node_modules/d3-array/src/quantile.js
  function quantile(values2, p2, valueof) {
    values2 = Float64Array.from(numbers(values2, valueof));
    if (!(n2 = values2.length))
      return;
    if ((p2 = +p2) <= 0 || n2 < 2)
      return min(values2);
    if (p2 >= 1)
      return max(values2);
    var n2, i2 = (n2 - 1) * p2, i0 = Math.floor(i2), value0 = max(quickselect(values2, i0).subarray(0, i0 + 1)), value1 = min(values2.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i2 - i0);
  }

  // node_modules/d3-array/src/median.js
  function median(values2, valueof) {
    return quantile(values2, 0.5, valueof);
  }

  // node_modules/d3-array/src/merge.js
  var import_regenerator2 = __toModule(require_regenerator());
  var _marked2 = /* @__PURE__ */ import_regenerator2.default.mark(flatten);
  function _createForOfIteratorHelper4(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray5(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length)
            return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e3(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e3(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray5(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray5(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray5(o2, minLen);
  }
  function _arrayLikeToArray5(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function flatten(arrays) {
    var _iterator, _step, array2;
    return import_regenerator2.default.wrap(function flatten$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iterator = _createForOfIteratorHelper4(arrays);
            _context.prev = 1;
            _iterator.s();
          case 3:
            if ((_step = _iterator.n()).done) {
              _context.next = 8;
              break;
            }
            array2 = _step.value;
            return _context.delegateYield(array2, "t0", 6);
          case 6:
            _context.next = 3;
            break;
          case 8:
            _context.next = 13;
            break;
          case 10:
            _context.prev = 10;
            _context.t1 = _context["catch"](1);
            _iterator.e(_context.t1);
          case 13:
            _context.prev = 13;
            _iterator.f();
            return _context.finish(13);
          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _marked2, null, [[1, 10, 13, 16]]);
  }
  function merge(arrays) {
    return Array.from(flatten(arrays));
  }

  // node_modules/d3-array/src/range.js
  function range(start2, stop2, step) {
    start2 = +start2, stop2 = +stop2, step = (n2 = arguments.length) < 2 ? (stop2 = start2, start2 = 0, 1) : n2 < 3 ? 1 : +step;
    var i2 = -1, n2 = Math.max(0, Math.ceil((stop2 - start2) / step)) | 0, range4 = new Array(n2);
    while (++i2 < n2) {
      range4[i2] = start2 + i2 * step;
    }
    return range4;
  }

  // node_modules/d3-geo/src/math.js
  var epsilon = 1e-6;
  var epsilon2 = 1e-12;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var quarterPi = pi / 4;
  var tau = pi * 2;
  var degrees = 180 / pi;
  var radians = pi / 180;
  var abs = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var exp = Math.exp;
  var log = Math.log;
  var sin = Math.sin;
  var sign = Math.sign || function(x2) {
    return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
  };
  var sqrt = Math.sqrt;
  var tan = Math.tan;
  function acos(x2) {
    return x2 > 1 ? 0 : x2 < -1 ? pi : Math.acos(x2);
  }
  function asin(x2) {
    return x2 > 1 ? halfPi : x2 < -1 ? -halfPi : Math.asin(x2);
  }

  // node_modules/d3-geo/src/noop.js
  function noop() {
  }

  // node_modules/d3-geo/src/stream.js
  function streamGeometry(geometry6, stream) {
    if (geometry6 && streamGeometryType.hasOwnProperty(geometry6.type)) {
      streamGeometryType[geometry6.type](geometry6, stream);
    }
  }
  var streamObjectType = {
    Feature: function Feature(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function FeatureCollection(object, stream) {
      var features2 = object.features, i2 = -1, n2 = features2.length;
      while (++i2 < n2) {
        streamGeometry(features2[i2].geometry, stream);
      }
    }
  };
  var streamGeometryType = {
    Sphere: function Sphere(object, stream) {
      stream.sphere();
    },
    Point: function Point(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function MultiPoint(object, stream) {
      var coordinates = object.coordinates, i2 = -1, n2 = coordinates.length;
      while (++i2 < n2) {
        object = coordinates[i2], stream.point(object[0], object[1], object[2]);
      }
    },
    LineString: function LineString(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function MultiLineString(object, stream) {
      var coordinates = object.coordinates, i2 = -1, n2 = coordinates.length;
      while (++i2 < n2) {
        streamLine(coordinates[i2], stream, 0);
      }
    },
    Polygon: function Polygon(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function MultiPolygon(object, stream) {
      var coordinates = object.coordinates, i2 = -1, n2 = coordinates.length;
      while (++i2 < n2) {
        streamPolygon(coordinates[i2], stream);
      }
    },
    GeometryCollection: function GeometryCollection(object, stream) {
      var geometries = object.geometries, i2 = -1, n2 = geometries.length;
      while (++i2 < n2) {
        streamGeometry(geometries[i2], stream);
      }
    }
  };
  function streamLine(coordinates, stream, closed) {
    var i2 = -1, n2 = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i2 < n2) {
      coordinate = coordinates[i2], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    }
    stream.lineEnd();
  }
  function streamPolygon(coordinates, stream) {
    var i2 = -1, n2 = coordinates.length;
    stream.polygonStart();
    while (++i2 < n2) {
      streamLine(coordinates[i2], stream, 1);
    }
    stream.polygonEnd();
  }
  function stream_default(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  // node_modules/d3-geo/src/area.js
  var areaRingSum = new Adder();
  var areaSum = new Adder();
  var lambda00;
  var phi00;
  var lambda0;
  var cosPhi0;
  var sinPhi0;
  var areaStream = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function polygonStart() {
      areaRingSum = new Adder();
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function polygonEnd() {
      var areaRing = +areaRingSum;
      areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
      this.lineStart = this.lineEnd = this.point = noop;
    },
    sphere: function sphere() {
      areaSum.add(tau);
    }
  };
  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }
  function areaRingEnd() {
    areaPoint(lambda00, phi00);
  }
  function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    lambda00 = lambda, phi00 = phi;
    lambda *= radians, phi *= radians;
    lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
  }
  function areaPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    phi = phi / 2 + quarterPi;
    var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos(adLambda), v = k * sdLambda * sin(adLambda);
    areaRingSum.add(atan2(v, u));
    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
  }
  function area_default(object) {
    areaSum = new Adder();
    stream_default(object, areaStream);
    return areaSum * 2;
  }

  // node_modules/d3-geo/src/cartesian.js
  function spherical(cartesian2) {
    return [atan2(cartesian2[1], cartesian2[0]), asin(cartesian2[2])];
  }
  function cartesian(spherical2) {
    var lambda = spherical2[0], phi = spherical2[1], cosPhi = cos(phi);
    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
  }
  function cartesianDot(a, b2) {
    return a[0] * b2[0] + a[1] * b2[1] + a[2] * b2[2];
  }
  function cartesianCross(a, b2) {
    return [a[1] * b2[2] - a[2] * b2[1], a[2] * b2[0] - a[0] * b2[2], a[0] * b2[1] - a[1] * b2[0]];
  }
  function cartesianAddInPlace(a, b2) {
    a[0] += b2[0], a[1] += b2[1], a[2] += b2[2];
  }
  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  }
  function cartesianNormalizeInPlace(d) {
    var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
  }

  // node_modules/d3-geo/src/bounds.js
  var lambda02;
  var phi0;
  var lambda1;
  var phi1;
  var lambda2;
  var lambda002;
  var phi002;
  var p0;
  var deltaSum;
  var ranges;
  var range2;
  var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function polygonStart2() {
      boundsStream.point = boundsRingPoint;
      boundsStream.lineStart = boundsRingStart;
      boundsStream.lineEnd = boundsRingEnd;
      deltaSum = new Adder();
      areaStream.polygonStart();
    },
    polygonEnd: function polygonEnd2() {
      areaStream.polygonEnd();
      boundsStream.point = boundsPoint;
      boundsStream.lineStart = boundsLineStart;
      boundsStream.lineEnd = boundsLineEnd;
      if (areaRingSum < 0)
        lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      else if (deltaSum > epsilon)
        phi1 = 90;
      else if (deltaSum < -epsilon)
        phi0 = -90;
      range2[0] = lambda02, range2[1] = lambda1;
    },
    sphere: function sphere2() {
      lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    }
  };
  function boundsPoint(lambda, phi) {
    ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
    if (phi < phi0)
      phi0 = phi;
    if (phi > phi1)
      phi1 = phi;
  }
  function linePoint(lambda, phi) {
    var p2 = cartesian([lambda * radians, phi * radians]);
    if (p0) {
      var normal = cartesianCross(p0, p2), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
      cartesianNormalizeInPlace(inflection);
      inflection = spherical(inflection);
      var delta = lambda - lambda2, sign2 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees * sign2, phii, antimeridian = abs(delta) > 180;
      if (antimeridian ^ (sign2 * lambda2 < lambdai && lambdai < sign2 * lambda)) {
        phii = inflection[1] * degrees;
        if (phii > phi1)
          phi1 = phii;
      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign2 * lambda2 < lambdai && lambdai < sign2 * lambda)) {
        phii = -inflection[1] * degrees;
        if (phii < phi0)
          phi0 = phii;
      } else {
        if (phi < phi0)
          phi0 = phi;
        if (phi > phi1)
          phi1 = phi;
      }
      if (antimeridian) {
        if (lambda < lambda2) {
          if (angle(lambda02, lambda) > angle(lambda02, lambda1))
            lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda02, lambda1))
            lambda02 = lambda;
        }
      } else {
        if (lambda1 >= lambda02) {
          if (lambda < lambda02)
            lambda02 = lambda;
          if (lambda > lambda1)
            lambda1 = lambda;
        } else {
          if (lambda > lambda2) {
            if (angle(lambda02, lambda) > angle(lambda02, lambda1))
              lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda02, lambda1))
              lambda02 = lambda;
          }
        }
      }
    } else {
      ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
    }
    if (phi < phi0)
      phi0 = phi;
    if (phi > phi1)
      phi1 = phi;
    p0 = p2, lambda2 = lambda;
  }
  function boundsLineStart() {
    boundsStream.point = linePoint;
  }
  function boundsLineEnd() {
    range2[0] = lambda02, range2[1] = lambda1;
    boundsStream.point = boundsPoint;
    p0 = null;
  }
  function boundsRingPoint(lambda, phi) {
    if (p0) {
      var delta = lambda - lambda2;
      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else {
      lambda002 = lambda, phi002 = phi;
    }
    areaStream.point(lambda, phi);
    linePoint(lambda, phi);
  }
  function boundsRingStart() {
    areaStream.lineStart();
  }
  function boundsRingEnd() {
    boundsRingPoint(lambda002, phi002);
    areaStream.lineEnd();
    if (abs(deltaSum) > epsilon)
      lambda02 = -(lambda1 = 180);
    range2[0] = lambda02, range2[1] = lambda1;
    p0 = null;
  }
  function angle(lambda04, lambda12) {
    return (lambda12 -= lambda04) < 0 ? lambda12 + 360 : lambda12;
  }
  function rangeCompare(a, b2) {
    return a[0] - b2[0];
  }
  function rangeContains(range4, x2) {
    return range4[0] <= range4[1] ? range4[0] <= x2 && x2 <= range4[1] : x2 < range4[0] || range4[1] < x2;
  }
  function bounds_default(feature3) {
    var i2, n2, a, b2, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda02 = phi0 = Infinity);
    ranges = [];
    stream_default(feature3, boundsStream);
    if (n2 = ranges.length) {
      ranges.sort(rangeCompare);
      for (i2 = 1, a = ranges[0], merged = [a]; i2 < n2; ++i2) {
        b2 = ranges[i2];
        if (rangeContains(a, b2[0]) || rangeContains(a, b2[1])) {
          if (angle(a[0], b2[1]) > angle(a[0], a[1]))
            a[1] = b2[1];
          if (angle(b2[0], a[1]) > angle(a[0], a[1]))
            a[0] = b2[0];
        } else {
          merged.push(a = b2);
        }
      }
      for (deltaMax = -Infinity, n2 = merged.length - 1, i2 = 0, a = merged[n2]; i2 <= n2; a = b2, ++i2) {
        b2 = merged[i2];
        if ((delta = angle(a[1], b2[0])) > deltaMax)
          deltaMax = delta, lambda02 = b2[0], lambda1 = a[1];
      }
    }
    ranges = range2 = null;
    return lambda02 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda02, phi0], [lambda1, phi1]];
  }

  // node_modules/d3-geo/src/compose.js
  function compose_default(a, b2) {
    function compose(x2, y) {
      return x2 = a(x2, y), b2(x2[0], x2[1]);
    }
    if (a.invert && b2.invert)
      compose.invert = function(x2, y) {
        return x2 = b2.invert(x2, y), x2 && a.invert(x2[0], x2[1]);
      };
    return compose;
  }

  // node_modules/d3-geo/src/rotation.js
  function rotationIdentity(lambda, phi) {
    return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
  }
  rotationIdentity.invert = rotationIdentity;
  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
  }
  function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
      return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
    };
  }
  function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
  }
  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
    function rotation(lambda, phi) {
      var cosPhi = cos(phi), x2 = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaPhi + x2 * sinDeltaPhi;
      return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x2 * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];
    }
    rotation.invert = function(lambda, phi) {
      var cosPhi = cos(phi), x2 = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
      return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x2 * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x2 * sinDeltaPhi)];
    };
    return rotation;
  }
  function rotation_default(rotate) {
    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
    };
    return forward;
  }

  // node_modules/d3-geo/src/circle.js
  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta)
      return;
    var cosRadius = cos(radius), sinRadius = sin(radius), step = direction * delta;
    if (t0 == null) {
      t0 = radius + direction * tau;
      t1 = radius - step / 2;
    } else {
      t0 = circleRadius(cosRadius, t0);
      t1 = circleRadius(cosRadius, t1);
      if (direction > 0 ? t0 < t1 : t0 > t1)
        t0 += direction * tau;
    }
    for (var point5, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point5 = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
      stream.point(point5[0], point5[1]);
    }
  }
  function circleRadius(cosRadius, point5) {
    point5 = cartesian(point5), point5[0] -= cosRadius;
    cartesianNormalizeInPlace(point5);
    var radius = acos(-point5[1]);
    return ((-point5[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
  }

  // node_modules/d3-geo/src/clip/buffer.js
  function buffer_default() {
    var lines = [], line;
    return {
      point: function point5(x2, y, m) {
        line.push([x2, y, m]);
      },
      lineStart: function lineStart5() {
        lines.push(line = []);
      },
      lineEnd: noop,
      rejoin: function rejoin() {
        if (lines.length > 1)
          lines.push(lines.pop().concat(lines.shift()));
      },
      result: function result6() {
        var result7 = lines;
        lines = [];
        line = null;
        return result7;
      }
    };
  }

  // node_modules/d3-geo/src/pointEqual.js
  function pointEqual_default(a, b2) {
    return abs(a[0] - b2[0]) < epsilon && abs(a[1] - b2[1]) < epsilon;
  }

  // node_modules/d3-geo/src/clip/rejoin.js
  function Intersection(point5, points, other, entry) {
    this.x = point5;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function rejoin_default(segments2, compareIntersection2, startInside, interpolate, stream) {
    var subject = [], clip = [], i2, n2;
    segments2.forEach(function(segment) {
      if ((n3 = segment.length - 1) <= 0)
        return;
      var n3, p02 = segment[0], p1 = segment[n3], x2;
      if (pointEqual_default(p02, p1)) {
        if (!p02[2] && !p1[2]) {
          stream.lineStart();
          for (i2 = 0; i2 < n3; ++i2) {
            stream.point((p02 = segment[i2])[0], p02[1]);
          }
          stream.lineEnd();
          return;
        }
        p1[0] += 2 * epsilon;
      }
      subject.push(x2 = new Intersection(p02, segment, null, true));
      clip.push(x2.o = new Intersection(p02, null, x2, false));
      subject.push(x2 = new Intersection(p1, segment, null, false));
      clip.push(x2.o = new Intersection(p1, null, x2, true));
    });
    if (!subject.length)
      return;
    clip.sort(compareIntersection2);
    link(subject);
    link(clip);
    for (i2 = 0, n2 = clip.length; i2 < n2; ++i2) {
      clip[i2].e = startInside = !startInside;
    }
    var start2 = subject[0], points, point5;
    while (1) {
      var current = start2, isSubject = true;
      while (current.v) {
        if ((current = current.n) === start2)
          return;
      }
      points = current.z;
      stream.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (i2 = 0, n2 = points.length; i2 < n2; ++i2) {
              stream.point((point5 = points[i2])[0], point5[1]);
            }
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (i2 = points.length - 1; i2 >= 0; --i2) {
              stream.point((point5 = points[i2])[0], point5[1]);
            }
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      stream.lineEnd();
    }
  }
  function link(array2) {
    if (!(n2 = array2.length))
      return;
    var n2, i2 = 0, a = array2[0], b2;
    while (++i2 < n2) {
      a.n = b2 = array2[i2];
      b2.p = a;
      a = b2;
    }
    a.n = b2 = array2[0];
    b2.p = a;
  }

  // node_modules/d3-geo/src/polygonContains.js
  function longitude(point5) {
    return abs(point5[0]) <= pi ? point5[0] : sign(point5[0]) * ((abs(point5[0]) + pi) % tau - pi);
  }
  function polygonContains_default(polygon2, point5) {
    var lambda = longitude(point5), phi = point5[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle2 = 0, winding = 0;
    var sum = new Adder();
    if (sinPhi === 1)
      phi = halfPi + epsilon;
    else if (sinPhi === -1)
      phi = -halfPi - epsilon;
    for (var i2 = 0, n2 = polygon2.length; i2 < n2; ++i2) {
      if (!(m = (ring = polygon2[i2]).length))
        continue;
      var ring, m, point0 = ring[m - 1], lambda04 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi03 = sin(phi02), cosPhi03 = cos(phi02);
      for (var j = 0; j < m; ++j, lambda04 = lambda12, sinPhi03 = sinPhi1, cosPhi03 = cosPhi1, point0 = point1) {
        var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi12), cosPhi1 = cos(phi12), delta = lambda12 - lambda04, sign2 = delta >= 0 ? 1 : -1, absDelta = sign2 * delta, antimeridian = absDelta > pi, k = sinPhi03 * sinPhi1;
        sum.add(atan2(k * sign2 * sin(absDelta), cosPhi03 * cosPhi1 + k * cos(absDelta)));
        angle2 += antimeridian ? delta + sign2 * tau : delta;
        if (antimeridian ^ lambda04 >= lambda ^ lambda12 >= lambda) {
          var arc = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc);
          var intersection = cartesianCross(normal, arc);
          cartesianNormalizeInPlace(intersection);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    }
    return (angle2 < -epsilon || angle2 < epsilon && sum < -epsilon2) ^ winding & 1;
  }

  // node_modules/d3-geo/src/clip/index.js
  function clip_default(pointVisible, clipLine, interpolate, start2) {
    return function(sink) {
      var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon2, segments2, ring;
      var clip = {
        point: point5,
        lineStart: lineStart5,
        lineEnd: lineEnd5,
        polygonStart: function polygonStart9() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments2 = [];
          polygon2 = [];
        },
        polygonEnd: function polygonEnd9() {
          clip.point = point5;
          clip.lineStart = lineStart5;
          clip.lineEnd = lineEnd5;
          segments2 = merge(segments2);
          var startInside = polygonContains_default(polygon2, start2);
          if (segments2.length) {
            if (!polygonStarted)
              sink.polygonStart(), polygonStarted = true;
            rejoin_default(segments2, compareIntersection, startInside, interpolate, sink);
          } else if (startInside) {
            if (!polygonStarted)
              sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
          }
          if (polygonStarted)
            sink.polygonEnd(), polygonStarted = false;
          segments2 = polygon2 = null;
        },
        sphere: function sphere4() {
          sink.polygonStart();
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };
      function point5(lambda, phi) {
        if (pointVisible(lambda, phi))
          sink.point(lambda, phi);
      }
      function pointLine(lambda, phi) {
        line.point(lambda, phi);
      }
      function lineStart5() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd5() {
        clip.point = point5;
        line.lineEnd();
      }
      function pointRing(lambda, phi) {
        ring.push([lambda, phi]);
        ringSink.point(lambda, phi);
      }
      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();
        var clean2 = ringSink.clean(), ringSegments = ringBuffer.result(), i2, n2 = ringSegments.length, m, segment, point6;
        ring.pop();
        polygon2.push(ring);
        ring = null;
        if (!n2)
          return;
        if (clean2 & 1) {
          segment = ringSegments[0];
          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted)
              sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            for (i2 = 0; i2 < m; ++i2) {
              sink.point((point6 = segment[i2])[0], point6[1]);
            }
            sink.lineEnd();
          }
          return;
        }
        if (n2 > 1 && clean2 & 2)
          ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments2.push(ringSegments.filter(validSegment));
      }
      return clip;
    };
  }
  function validSegment(segment) {
    return segment.length > 1;
  }
  function compareIntersection(a, b2) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b2 = b2.x)[0] < 0 ? b2[1] - halfPi - epsilon : halfPi - b2[1]);
  }

  // node_modules/d3-geo/src/clip/antimeridian.js
  var antimeridian_default = clip_default(function() {
    return true;
  }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]);
  function clipAntimeridianLine(stream) {
    var lambda04 = NaN, phi02 = NaN, sign0 = NaN, _clean;
    return {
      lineStart: function lineStart5() {
        stream.lineStart();
        _clean = 1;
      },
      point: function point5(lambda12, phi12) {
        var sign1 = lambda12 > 0 ? pi : -pi, delta = abs(lambda12 - lambda04);
        if (abs(delta - pi) < epsilon) {
          stream.point(lambda04, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi : -halfPi);
          stream.point(sign0, phi02);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi02);
          stream.point(lambda12, phi02);
          _clean = 0;
        } else if (sign0 !== sign1 && delta >= pi) {
          if (abs(lambda04 - sign0) < epsilon)
            lambda04 -= sign0 * epsilon;
          if (abs(lambda12 - sign1) < epsilon)
            lambda12 -= sign1 * epsilon;
          phi02 = clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12);
          stream.point(sign0, phi02);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi02);
          _clean = 0;
        }
        stream.point(lambda04 = lambda12, phi02 = phi12);
        sign0 = sign1;
      },
      lineEnd: function lineEnd5() {
        stream.lineEnd();
        lambda04 = phi02 = NaN;
      },
      clean: function clean2() {
        return 2 - _clean;
      }
    };
  }
  function clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12) {
    var cosPhi03, cosPhi1, sinLambda0Lambda1 = sin(lambda04 - lambda12);
    return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi02) * (cosPhi1 = cos(phi12)) * sin(lambda12) - sin(phi12) * (cosPhi03 = cos(phi02)) * sin(lambda04)) / (cosPhi03 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
  }
  function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
      phi = direction * halfPi;
      stream.point(-pi, phi);
      stream.point(0, phi);
      stream.point(pi, phi);
      stream.point(pi, 0);
      stream.point(pi, -phi);
      stream.point(0, -phi);
      stream.point(-pi, -phi);
      stream.point(-pi, 0);
      stream.point(-pi, phi);
    } else if (abs(from[0] - to[0]) > epsilon) {
      var lambda = from[0] < to[0] ? pi : -pi;
      phi = direction * lambda / 2;
      stream.point(-lambda, phi);
      stream.point(0, phi);
      stream.point(lambda, phi);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  // node_modules/d3-geo/src/clip/circle.js
  function circle_default(radius) {
    var cr = cos(radius), delta = 6 * radians, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon;
    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to);
    }
    function visible(lambda, phi) {
      return cos(lambda) * cos(phi) > cr;
    }
    function clipLine(stream) {
      var point0, c0, v0, v00, _clean;
      return {
        lineStart: function lineStart5() {
          v00 = v0 = false;
          _clean = 1;
        },
        point: function point5(lambda, phi) {
          var point1 = [lambda, phi], point22, v = visible(lambda, phi), c2 = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
          if (!point0 && (v00 = v0 = v))
            stream.lineStart();
          if (v !== v0) {
            point22 = intersect2(point0, point1);
            if (!point22 || pointEqual_default(point0, point22) || pointEqual_default(point1, point22))
              point1[2] = 1;
          }
          if (v !== v0) {
            _clean = 0;
            if (v) {
              stream.lineStart();
              point22 = intersect2(point1, point0);
              stream.point(point22[0], point22[1]);
            } else {
              point22 = intersect2(point0, point1);
              stream.point(point22[0], point22[1], 2);
              stream.lineEnd();
            }
            point0 = point22;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c2 & c0) && (t = intersect2(point1, point0, true))) {
              _clean = 0;
              if (smallRadius) {
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
              } else {
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
                stream.lineStart();
                stream.point(t[0][0], t[0][1], 3);
              }
            }
          }
          if (v && (!point0 || !pointEqual_default(point0, point1))) {
            stream.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c2;
        },
        lineEnd: function lineEnd5() {
          if (v0)
            stream.lineEnd();
          point0 = null;
        },
        clean: function clean2() {
          return _clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect2(a, b2, two) {
      var pa = cartesian(a), pb = cartesian(b2);
      var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant)
        return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
      cartesianAddInPlace(A, B);
      var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
      if (t2 < 0)
        return;
      var t = sqrt(t2), q2 = cartesianScale(u, (-w - t) / uu);
      cartesianAddInPlace(q2, A);
      q2 = spherical(q2);
      if (!two)
        return q2;
      var lambda04 = a[0], lambda12 = b2[0], phi02 = a[1], phi12 = b2[1], z;
      if (lambda12 < lambda04)
        z = lambda04, lambda04 = lambda12, lambda12 = z;
      var delta2 = lambda12 - lambda04, polar = abs(delta2 - pi) < epsilon, meridian = polar || delta2 < epsilon;
      if (!polar && phi12 < phi02)
        z = phi02, phi02 = phi12, phi12 = z;
      if (meridian ? polar ? phi02 + phi12 > 0 ^ q2[1] < (abs(q2[0] - lambda04) < epsilon ? phi02 : phi12) : phi02 <= q2[1] && q2[1] <= phi12 : delta2 > pi ^ (lambda04 <= q2[0] && q2[0] <= lambda12)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [q2, spherical(q1)];
      }
    }
    function code(lambda, phi) {
      var r = smallRadius ? radius : pi - radius, code2 = 0;
      if (lambda < -r)
        code2 |= 1;
      else if (lambda > r)
        code2 |= 2;
      if (phi < -r)
        code2 |= 4;
      else if (phi > r)
        code2 |= 8;
      return code2;
    }
    return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
  }

  // node_modules/d3-geo/src/clip/line.js
  function line_default(a, b2, x05, y05, x12, y12) {
    var ax = a[0], ay = a[1], bx = b2[0], by = b2[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x05 - ax;
    if (!dx && r > 0)
      return;
    r /= dx;
    if (dx < 0) {
      if (r < t0)
        return;
      if (r < t1)
        t1 = r;
    } else if (dx > 0) {
      if (r > t1)
        return;
      if (r > t0)
        t0 = r;
    }
    r = x12 - ax;
    if (!dx && r < 0)
      return;
    r /= dx;
    if (dx < 0) {
      if (r > t1)
        return;
      if (r > t0)
        t0 = r;
    } else if (dx > 0) {
      if (r < t0)
        return;
      if (r < t1)
        t1 = r;
    }
    r = y05 - ay;
    if (!dy && r > 0)
      return;
    r /= dy;
    if (dy < 0) {
      if (r < t0)
        return;
      if (r < t1)
        t1 = r;
    } else if (dy > 0) {
      if (r > t1)
        return;
      if (r > t0)
        t0 = r;
    }
    r = y12 - ay;
    if (!dy && r < 0)
      return;
    r /= dy;
    if (dy < 0) {
      if (r > t1)
        return;
      if (r > t0)
        t0 = r;
    } else if (dy > 0) {
      if (r < t0)
        return;
      if (r < t1)
        t1 = r;
    }
    if (t0 > 0)
      a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1)
      b2[0] = ax + t1 * dx, b2[1] = ay + t1 * dy;
    return true;
  }

  // node_modules/d3-geo/src/clip/rectangle.js
  var clipMax = 1e9;
  var clipMin = -clipMax;
  function clipRectangle(x05, y05, x12, y12) {
    function visible(x2, y) {
      return x05 <= x2 && x2 <= x12 && y05 <= y && y <= y12;
    }
    function interpolate(from, to, direction, stream) {
      var a = 0, a1 = 0;
      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do {
          stream.point(a === 0 || a === 3 ? x05 : x12, a > 1 ? y12 : y05);
        } while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }
    function corner(p2, direction) {
      return abs(p2[0] - x05) < epsilon ? direction > 0 ? 0 : 3 : abs(p2[0] - x12) < epsilon ? direction > 0 ? 2 : 1 : abs(p2[1] - y05) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compareIntersection2(a, b2) {
      return comparePoint(a.x, b2.x);
    }
    function comparePoint(a, b2) {
      var ca = corner(a, 1), cb = corner(b2, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b2[1] - a[1] : ca === 1 ? a[0] - b2[0] : ca === 2 ? a[1] - b2[1] : b2[0] - a[0];
    }
    return function(stream) {
      var activeStream = stream, bufferStream = buffer_default(), segments2, polygon2, ring, x__, y__, v__, x_, y_, v_, first2, clean2;
      var clipStream = {
        point: point5,
        lineStart: lineStart5,
        lineEnd: lineEnd5,
        polygonStart: polygonStart9,
        polygonEnd: polygonEnd9
      };
      function point5(x2, y) {
        if (visible(x2, y))
          activeStream.point(x2, y);
      }
      function polygonInside() {
        var winding = 0;
        for (var i2 = 0, n2 = polygon2.length; i2 < n2; ++i2) {
          for (var ring2 = polygon2[i2], j = 1, m = ring2.length, point6 = ring2[0], a0, a1, b0 = point6[0], b1 = point6[1]; j < m; ++j) {
            a0 = b0, a1 = b1, point6 = ring2[j], b0 = point6[0], b1 = point6[1];
            if (a1 <= y12) {
              if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x05 - a0))
                ++winding;
            } else {
              if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x05 - a0))
                --winding;
            }
          }
        }
        return winding;
      }
      function polygonStart9() {
        activeStream = bufferStream, segments2 = [], polygon2 = [], clean2 = true;
      }
      function polygonEnd9() {
        var startInside = polygonInside(), cleanInside = clean2 && startInside, visible2 = (segments2 = merge(segments2)).length;
        if (cleanInside || visible2) {
          stream.polygonStart();
          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }
          if (visible2) {
            rejoin_default(segments2, compareIntersection2, startInside, interpolate, stream);
          }
          stream.polygonEnd();
        }
        activeStream = stream, segments2 = polygon2 = ring = null;
      }
      function lineStart5() {
        clipStream.point = linePoint2;
        if (polygon2)
          polygon2.push(ring = []);
        first2 = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd5() {
        if (segments2) {
          linePoint2(x__, y__);
          if (v__ && v_)
            bufferStream.rejoin();
          segments2.push(bufferStream.result());
        }
        clipStream.point = point5;
        if (v_)
          activeStream.lineEnd();
      }
      function linePoint2(x2, y) {
        var v = visible(x2, y);
        if (polygon2)
          ring.push([x2, y]);
        if (first2) {
          x__ = x2, y__ = y, v__ = v;
          first2 = false;
          if (v) {
            activeStream.lineStart();
            activeStream.point(x2, y);
          }
        } else {
          if (v && v_)
            activeStream.point(x2, y);
          else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b2 = [x2 = Math.max(clipMin, Math.min(clipMax, x2)), y = Math.max(clipMin, Math.min(clipMax, y))];
            if (line_default(a, b2, x05, y05, x12, y12)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }
              activeStream.point(b2[0], b2[1]);
              if (!v)
                activeStream.lineEnd();
              clean2 = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x2, y);
              clean2 = false;
            }
          }
        }
        x_ = x2, y_ = y, v_ = v;
      }
      return clipStream;
    };
  }

  // node_modules/d3-geo/src/length.js
  var lengthSum;
  var lambda03;
  var sinPhi02;
  var cosPhi02;
  var lengthStream = {
    sphere: noop,
    point: noop,
    lineStart: lengthLineStart,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop
  };
  function lengthLineStart() {
    lengthStream.point = lengthPointFirst;
    lengthStream.lineEnd = lengthLineEnd;
  }
  function lengthLineEnd() {
    lengthStream.point = lengthStream.lineEnd = noop;
  }
  function lengthPointFirst(lambda, phi) {
    lambda *= radians, phi *= radians;
    lambda03 = lambda, sinPhi02 = sin(phi), cosPhi02 = cos(phi);
    lengthStream.point = lengthPoint;
  }
  function lengthPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda03), cosDelta = cos(delta), sinDelta = sin(delta), x2 = cosPhi * sinDelta, y = cosPhi02 * sinPhi - sinPhi02 * cosPhi * cosDelta, z = sinPhi02 * sinPhi + cosPhi02 * cosPhi * cosDelta;
    lengthSum.add(atan2(sqrt(x2 * x2 + y * y), z));
    lambda03 = lambda, sinPhi02 = sinPhi, cosPhi02 = cosPhi;
  }
  function length_default(object) {
    lengthSum = new Adder();
    stream_default(object, lengthStream);
    return +lengthSum;
  }

  // node_modules/d3-geo/src/identity.js
  var identity_default = function(x2) {
    return x2;
  };

  // node_modules/d3-geo/src/path/area.js
  var areaSum2 = new Adder();
  var areaRingSum2 = new Adder();
  var x00;
  var y00;
  var x0;
  var y0;
  var areaStream2 = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function polygonStart3() {
      areaStream2.lineStart = areaRingStart2;
      areaStream2.lineEnd = areaRingEnd2;
    },
    polygonEnd: function polygonEnd3() {
      areaStream2.lineStart = areaStream2.lineEnd = areaStream2.point = noop;
      areaSum2.add(abs(areaRingSum2));
      areaRingSum2 = new Adder();
    },
    result: function result() {
      var area3 = areaSum2 / 2;
      areaSum2 = new Adder();
      return area3;
    }
  };
  function areaRingStart2() {
    areaStream2.point = areaPointFirst2;
  }
  function areaPointFirst2(x2, y) {
    areaStream2.point = areaPoint2;
    x00 = x0 = x2, y00 = y0 = y;
  }
  function areaPoint2(x2, y) {
    areaRingSum2.add(y0 * x2 - x0 * y);
    x0 = x2, y0 = y;
  }
  function areaRingEnd2() {
    areaPoint2(x00, y00);
  }
  var area_default2 = areaStream2;

  // node_modules/d3-geo/src/path/bounds.js
  var x02 = Infinity;
  var y02 = x02;
  var x1 = -x02;
  var y1 = x1;
  var boundsStream2 = {
    point: boundsPoint2,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function result2() {
      var bounds = [[x02, y02], [x1, y1]];
      x1 = y1 = -(y02 = x02 = Infinity);
      return bounds;
    }
  };
  function boundsPoint2(x2, y) {
    if (x2 < x02)
      x02 = x2;
    if (x2 > x1)
      x1 = x2;
    if (y < y02)
      y02 = y;
    if (y > y1)
      y1 = y;
  }
  var bounds_default2 = boundsStream2;

  // node_modules/d3-geo/src/path/centroid.js
  var X0 = 0;
  var Y0 = 0;
  var Z0 = 0;
  var X1 = 0;
  var Y1 = 0;
  var Z1 = 0;
  var X2 = 0;
  var Y2 = 0;
  var Z2 = 0;
  var x002;
  var y002;
  var x03;
  var y03;
  var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function polygonStart4() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function polygonEnd4() {
      centroidStream.point = centroidPoint;
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    },
    result: function result3() {
      var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
      X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
      return centroid;
    }
  };
  function centroidPoint(x2, y) {
    X0 += x2;
    Y0 += y;
    ++Z0;
  }
  function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
  }
  function centroidPointFirstLine(x2, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x03 = x2, y03 = y);
  }
  function centroidPointLine(x2, y) {
    var dx = x2 - x03, dy = y - y03, z = sqrt(dx * dx + dy * dy);
    X1 += z * (x03 + x2) / 2;
    Y1 += z * (y03 + y) / 2;
    Z1 += z;
    centroidPoint(x03 = x2, y03 = y);
  }
  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }
  function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
  }
  function centroidRingEnd() {
    centroidPointRing(x002, y002);
  }
  function centroidPointFirstRing(x2, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x002 = x03 = x2, y002 = y03 = y);
  }
  function centroidPointRing(x2, y) {
    var dx = x2 - x03, dy = y - y03, z = sqrt(dx * dx + dy * dy);
    X1 += z * (x03 + x2) / 2;
    Y1 += z * (y03 + y) / 2;
    Z1 += z;
    z = y03 * x2 - x03 * y;
    X2 += z * (x03 + x2);
    Y2 += z * (y03 + y);
    Z2 += z * 3;
    centroidPoint(x03 = x2, y03 = y);
  }
  var centroid_default = centroidStream;

  // node_modules/d3-geo/src/path/context.js
  function PathContext(context) {
    this._context = context;
  }
  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function pointRadius(_2) {
      return this._radius = _2, this;
    },
    polygonStart: function polygonStart5() {
      this._line = 0;
    },
    polygonEnd: function polygonEnd5() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line === 0)
        this._context.closePath();
      this._point = NaN;
    },
    point: function point(x2, y) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(x2, y);
          this._point = 1;
          break;
        }
        case 1: {
          this._context.lineTo(x2, y);
          break;
        }
        default: {
          this._context.moveTo(x2 + this._radius, y);
          this._context.arc(x2, y, this._radius, 0, tau);
          break;
        }
      }
    },
    result: noop
  };

  // node_modules/d3-geo/src/path/measure.js
  var lengthSum2 = new Adder();
  var lengthRing;
  var x003;
  var y003;
  var x04;
  var y04;
  var lengthStream2 = {
    point: noop,
    lineStart: function lineStart2() {
      lengthStream2.point = lengthPointFirst2;
    },
    lineEnd: function lineEnd2() {
      if (lengthRing)
        lengthPoint2(x003, y003);
      lengthStream2.point = noop;
    },
    polygonStart: function polygonStart6() {
      lengthRing = true;
    },
    polygonEnd: function polygonEnd6() {
      lengthRing = null;
    },
    result: function result4() {
      var length = +lengthSum2;
      lengthSum2 = new Adder();
      return length;
    }
  };
  function lengthPointFirst2(x2, y) {
    lengthStream2.point = lengthPoint2;
    x003 = x04 = x2, y003 = y04 = y;
  }
  function lengthPoint2(x2, y) {
    x04 -= x2, y04 -= y;
    lengthSum2.add(sqrt(x04 * x04 + y04 * y04));
    x04 = x2, y04 = y;
  }
  var measure_default = lengthStream2;

  // node_modules/d3-geo/src/path/string.js
  function PathString() {
    this._string = [];
  }
  PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function pointRadius2(_2) {
      if ((_2 = +_2) !== this._radius)
        this._radius = _2, this._circle = null;
      return this;
    },
    polygonStart: function polygonStart7() {
      this._line = 0;
    },
    polygonEnd: function polygonEnd7() {
      this._line = NaN;
    },
    lineStart: function lineStart3() {
      this._point = 0;
    },
    lineEnd: function lineEnd3() {
      if (this._line === 0)
        this._string.push("Z");
      this._point = NaN;
    },
    point: function point2(x2, y) {
      switch (this._point) {
        case 0: {
          this._string.push("M", x2, ",", y);
          this._point = 1;
          break;
        }
        case 1: {
          this._string.push("L", x2, ",", y);
          break;
        }
        default: {
          if (this._circle == null)
            this._circle = circle(this._radius);
          this._string.push("M", x2, ",", y, this._circle);
          break;
        }
      }
    },
    result: function result5() {
      if (this._string.length) {
        var result6 = this._string.join("");
        this._string = [];
        return result6;
      } else {
        return null;
      }
    }
  };
  function circle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }

  // node_modules/d3-geo/src/path/index.js
  function path_default(projection2, context) {
    var pointRadius3 = 4.5, projectionStream, contextStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius3 === "function")
          contextStream.pointRadius(+pointRadius3.apply(this, arguments));
        stream_default(object, projectionStream(contextStream));
      }
      return contextStream.result();
    }
    path.area = function(object) {
      stream_default(object, projectionStream(area_default2));
      return area_default2.result();
    };
    path.measure = function(object) {
      stream_default(object, projectionStream(measure_default));
      return measure_default.result();
    };
    path.bounds = function(object) {
      stream_default(object, projectionStream(bounds_default2));
      return bounds_default2.result();
    };
    path.centroid = function(object) {
      stream_default(object, projectionStream(centroid_default));
      return centroid_default.result();
    };
    path.projection = function(_2) {
      return arguments.length ? (projectionStream = _2 == null ? (projection2 = null, identity_default) : (projection2 = _2).stream, path) : projection2;
    };
    path.context = function(_2) {
      if (!arguments.length)
        return context;
      contextStream = _2 == null ? (context = null, new PathString()) : new PathContext(context = _2);
      if (typeof pointRadius3 !== "function")
        contextStream.pointRadius(pointRadius3);
      return path;
    };
    path.pointRadius = function(_2) {
      if (!arguments.length)
        return pointRadius3;
      pointRadius3 = typeof _2 === "function" ? _2 : (contextStream.pointRadius(+_2), +_2);
      return path;
    };
    return path.projection(projection2).context(context);
  }

  // node_modules/d3-geo/src/transform.js
  function transform_default(methods2) {
    return {
      stream: transformer(methods2)
    };
  }
  function transformer(methods2) {
    return function(stream) {
      var s = new TransformStream();
      for (var key in methods2) {
        s[key] = methods2[key];
      }
      s.stream = stream;
      return s;
    };
  }
  function TransformStream() {
  }
  TransformStream.prototype = {
    constructor: TransformStream,
    point: function point3(x2, y) {
      this.stream.point(x2, y);
    },
    sphere: function sphere3() {
      this.stream.sphere();
    },
    lineStart: function lineStart4() {
      this.stream.lineStart();
    },
    lineEnd: function lineEnd4() {
      this.stream.lineEnd();
    },
    polygonStart: function polygonStart8() {
      this.stream.polygonStart();
    },
    polygonEnd: function polygonEnd8() {
      this.stream.polygonEnd();
    }
  };

  // node_modules/d3-geo/src/projection/fit.js
  function fit(projection2, fitBounds, object) {
    var clip = projection2.clipExtent && projection2.clipExtent();
    projection2.scale(150).translate([0, 0]);
    if (clip != null)
      projection2.clipExtent(null);
    stream_default(object, projection2.stream(bounds_default2));
    fitBounds(bounds_default2.result());
    if (clip != null)
      projection2.clipExtent(clip);
    return projection2;
  }
  function fitExtent(projection2, extent6, object) {
    return fit(projection2, function(b2) {
      var w = extent6[1][0] - extent6[0][0], h = extent6[1][1] - extent6[0][1], k = Math.min(w / (b2[1][0] - b2[0][0]), h / (b2[1][1] - b2[0][1])), x2 = +extent6[0][0] + (w - k * (b2[1][0] + b2[0][0])) / 2, y = +extent6[0][1] + (h - k * (b2[1][1] + b2[0][1])) / 2;
      projection2.scale(150 * k).translate([x2, y]);
    }, object);
  }
  function fitSize(projection2, size, object) {
    return fitExtent(projection2, [[0, 0], size], object);
  }
  function fitWidth(projection2, width, object) {
    return fit(projection2, function(b2) {
      var w = +width, k = w / (b2[1][0] - b2[0][0]), x2 = (w - k * (b2[1][0] + b2[0][0])) / 2, y = -k * b2[0][1];
      projection2.scale(150 * k).translate([x2, y]);
    }, object);
  }
  function fitHeight(projection2, height, object) {
    return fit(projection2, function(b2) {
      var h = +height, k = h / (b2[1][1] - b2[0][1]), x2 = -k * b2[0][0], y = (h - k * (b2[1][1] + b2[0][1])) / 2;
      projection2.scale(150 * k).translate([x2, y]);
    }, object);
  }

  // node_modules/d3-geo/src/projection/resample.js
  var maxDepth = 16;
  var cosMinDistance = cos(30 * radians);
  function resample_default(project, delta2) {
    return +delta2 ? resample(project, delta2) : resampleNone(project);
  }
  function resampleNone(project) {
    return transformer({
      point: function point5(x2, y) {
        x2 = project(x2, y);
        this.stream.point(x2[0], x2[1]);
      }
    });
  }
  function resample(project, delta2) {
    function resampleLineTo(x05, y05, lambda04, a0, b0, c0, x12, y12, lambda12, a1, b1, c1, depth, stream) {
      var dx = x12 - x05, dy = y12 - y05, d2 = dx * dx + dy * dy;
      if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1, b2 = b0 + b1, c2 = c0 + c1, m = sqrt(a * a + b2 * b2 + c2 * c2), phi2 = asin(c2 /= m), lambda22 = abs(abs(c2) - 1) < epsilon || abs(lambda04 - lambda12) < epsilon ? (lambda04 + lambda12) / 2 : atan2(b2, a), p2 = project(lambda22, phi2), x2 = p2[0], y2 = p2[1], dx2 = x2 - x05, dy2 = y2 - y05, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x05, y05, lambda04, a0, b0, c0, x2, y2, lambda22, a /= m, b2 /= m, c2, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, lambda22, a, b2, c2, x12, y12, lambda12, a1, b1, c1, depth, stream);
        }
      }
    }
    return function(stream) {
      var lambda003, x004, y004, a00, b00, c00, lambda04, x05, y05, a0, b0, c0;
      var resampleStream = {
        point: point5,
        lineStart: lineStart5,
        lineEnd: lineEnd5,
        polygonStart: function polygonStart9() {
          stream.polygonStart();
          resampleStream.lineStart = ringStart;
        },
        polygonEnd: function polygonEnd9() {
          stream.polygonEnd();
          resampleStream.lineStart = lineStart5;
        }
      };
      function point5(x2, y) {
        x2 = project(x2, y);
        stream.point(x2[0], x2[1]);
      }
      function lineStart5() {
        x05 = NaN;
        resampleStream.point = linePoint2;
        stream.lineStart();
      }
      function linePoint2(lambda, phi) {
        var c2 = cartesian([lambda, phi]), p2 = project(lambda, phi);
        resampleLineTo(x05, y05, lambda04, a0, b0, c0, x05 = p2[0], y05 = p2[1], lambda04 = lambda, a0 = c2[0], b0 = c2[1], c0 = c2[2], maxDepth, stream);
        stream.point(x05, y05);
      }
      function lineEnd5() {
        resampleStream.point = point5;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart5();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }
      function ringPoint(lambda, phi) {
        linePoint2(lambda003 = lambda, phi), x004 = x05, y004 = y05, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint2;
      }
      function ringEnd() {
        resampleLineTo(x05, y05, lambda04, a0, b0, c0, x004, y004, lambda003, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd5;
        lineEnd5();
      }
      return resampleStream;
    };
  }

  // node_modules/d3-geo/src/projection/index.js
  var transformRadians = transformer({
    point: function point4(x2, y) {
      this.stream.point(x2 * radians, y * radians);
    }
  });
  function transformRotate(rotate) {
    return transformer({
      point: function point5(x2, y) {
        var r = rotate(x2, y);
        return this.stream.point(r[0], r[1]);
      }
    });
  }
  function scaleTranslate(k, dx, dy, sx, sy) {
    function transform2(x2, y) {
      x2 *= sx;
      y *= sy;
      return [dx + k * x2, dy - k * y];
    }
    transform2.invert = function(x2, y) {
      return [(x2 - dx) / k * sx, (dy - y) / k * sy];
    };
    return transform2;
  }
  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha)
      return scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a = cosAlpha * k, b2 = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform2(x2, y) {
      x2 *= sx;
      y *= sy;
      return [a * x2 - b2 * y + dx, dy - b2 * x2 - a * y];
    }
    transform2.invert = function(x2, y) {
      return [sx * (ai * x2 - bi * y + ci), sy * (fi - bi * x2 - ai * y)];
    };
    return transform2;
  }
  function projection(project) {
    return projectionMutator(function() {
      return project;
    })();
  }
  function projectionMutator(projectAt) {
    var project, k = 150, x2 = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x05 = null, y05, x12, y12, postclip = identity_default, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache7, cacheStream;
    function projection2(point5) {
      return projectRotateTransform(point5[0] * radians, point5[1] * radians);
    }
    function invert2(point5) {
      point5 = projectRotateTransform.invert(point5[0], point5[1]);
      return point5 && [point5[0] * degrees, point5[1] * degrees];
    }
    projection2.stream = function(stream) {
      return cache7 && cacheStream === stream ? cache7 : cache7 = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };
    projection2.preclip = function(_2) {
      return arguments.length ? (preclip = _2, theta = void 0, reset17()) : preclip;
    };
    projection2.postclip = function(_2) {
      return arguments.length ? (postclip = _2, x05 = y05 = x12 = y12 = null, reset17()) : postclip;
    };
    projection2.clipAngle = function(_2) {
      return arguments.length ? (preclip = +_2 ? circle_default(theta = _2 * radians) : (theta = null, antimeridian_default), reset17()) : theta * degrees;
    };
    projection2.clipExtent = function(_2) {
      return arguments.length ? (postclip = _2 == null ? (x05 = y05 = x12 = y12 = null, identity_default) : clipRectangle(x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset17()) : x05 == null ? null : [[x05, y05], [x12, y12]];
    };
    projection2.scale = function(_2) {
      return arguments.length ? (k = +_2, recenter()) : k;
    };
    projection2.translate = function(_2) {
      return arguments.length ? (x2 = +_2[0], y = +_2[1], recenter()) : [x2, y];
    };
    projection2.center = function(_2) {
      return arguments.length ? (lambda = _2[0] % 360 * radians, phi = _2[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
    };
    projection2.rotate = function(_2) {
      return arguments.length ? (deltaLambda = _2[0] % 360 * radians, deltaPhi = _2[1] % 360 * radians, deltaGamma = _2.length > 2 ? _2[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
    };
    projection2.angle = function(_2) {
      return arguments.length ? (alpha = _2 % 360 * radians, recenter()) : alpha * degrees;
    };
    projection2.reflectX = function(_2) {
      return arguments.length ? (sx = _2 ? -1 : 1, recenter()) : sx < 0;
    };
    projection2.reflectY = function(_2) {
      return arguments.length ? (sy = _2 ? -1 : 1, recenter()) : sy < 0;
    };
    projection2.precision = function(_2) {
      return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _2 * _2), reset17()) : sqrt(delta2);
    };
    projection2.fitExtent = function(extent6, object) {
      return fitExtent(projection2, extent6, object);
    };
    projection2.fitSize = function(size, object) {
      return fitSize(projection2, size, object);
    };
    projection2.fitWidth = function(width, object) {
      return fitWidth(projection2, width, object);
    };
    projection2.fitHeight = function(height, object) {
      return fitHeight(projection2, height, object);
    };
    function recenter() {
      var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform2 = scaleTranslateRotate(k, x2 - center[0], y - center[1], sx, sy, alpha);
      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
      projectTransform = compose_default(project, transform2);
      projectRotateTransform = compose_default(rotate, projectTransform);
      projectResample = resample_default(projectTransform, delta2);
      return reset17();
    }
    function reset17() {
      cache7 = cacheStream = null;
      return projection2;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection2.invert = project.invert && invert2;
      return recenter();
    };
  }

  // node_modules/d3-geo/src/projection/mercator.js
  function mercatorRaw(lambda, phi) {
    return [lambda, log(tan((halfPi + phi) / 2))];
  }
  mercatorRaw.invert = function(x2, y) {
    return [x2, 2 * atan(exp(y)) - halfPi];
  };
  function mercator_default() {
    return mercatorProjection(mercatorRaw).scale(961 / tau);
  }
  function mercatorProjection(project) {
    var m = projection(project), center = m.center, scale2 = m.scale, translate2 = m.translate, clipExtent = m.clipExtent, x05 = null, y05, x12, y12;
    m.scale = function(_2) {
      return arguments.length ? (scale2(_2), reclip()) : scale2();
    };
    m.translate = function(_2) {
      return arguments.length ? (translate2(_2), reclip()) : translate2();
    };
    m.center = function(_2) {
      return arguments.length ? (center(_2), reclip()) : center();
    };
    m.clipExtent = function(_2) {
      return arguments.length ? (_2 == null ? x05 = y05 = x12 = y12 = null : (x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reclip()) : x05 == null ? null : [[x05, y05], [x12, y12]];
    };
    function reclip() {
      var k = pi * scale2(), t = m(rotation_default(m.rotate()).invert([0, 0]));
      return clipExtent(x05 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x05), y05], [Math.min(t[0] + k, x12), y12]] : [[x05, Math.max(t[1] - k, y05)], [x12, Math.min(t[1] + k, y12)]]);
    }
    return reclip();
  }

  // node_modules/d3-geo/src/projection/identity.js
  function identity_default2() {
    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x05 = null, y05, x12, y12, kx = 1, ky = 1, transform2 = transformer({
      point: function point5(x2, y) {
        var p2 = projection2([x2, y]);
        this.stream.point(p2[0], p2[1]);
      }
    }), postclip = identity_default, cache7, cacheStream;
    function reset17() {
      kx = k * sx;
      ky = k * sy;
      cache7 = cacheStream = null;
      return projection2;
    }
    function projection2(p2) {
      var x2 = p2[0] * kx, y = p2[1] * ky;
      if (alpha) {
        var t = y * ca - x2 * sa;
        x2 = x2 * ca + y * sa;
        y = t;
      }
      return [x2 + tx, y + ty];
    }
    projection2.invert = function(p2) {
      var x2 = p2[0] - tx, y = p2[1] - ty;
      if (alpha) {
        var t = y * ca + x2 * sa;
        x2 = x2 * ca - y * sa;
        y = t;
      }
      return [x2 / kx, y / ky];
    };
    projection2.stream = function(stream) {
      return cache7 && cacheStream === stream ? cache7 : cache7 = transform2(postclip(cacheStream = stream));
    };
    projection2.postclip = function(_2) {
      return arguments.length ? (postclip = _2, x05 = y05 = x12 = y12 = null, reset17()) : postclip;
    };
    projection2.clipExtent = function(_2) {
      return arguments.length ? (postclip = _2 == null ? (x05 = y05 = x12 = y12 = null, identity_default) : clipRectangle(x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset17()) : x05 == null ? null : [[x05, y05], [x12, y12]];
    };
    projection2.scale = function(_2) {
      return arguments.length ? (k = +_2, reset17()) : k;
    };
    projection2.translate = function(_2) {
      return arguments.length ? (tx = +_2[0], ty = +_2[1], reset17()) : [tx, ty];
    };
    projection2.angle = function(_2) {
      return arguments.length ? (alpha = _2 % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset17()) : alpha * degrees;
    };
    projection2.reflectX = function(_2) {
      return arguments.length ? (sx = _2 ? -1 : 1, reset17()) : sx < 0;
    };
    projection2.reflectY = function(_2) {
      return arguments.length ? (sy = _2 ? -1 : 1, reset17()) : sy < 0;
    };
    projection2.fitExtent = function(extent6, object) {
      return fitExtent(projection2, extent6, object);
    };
    projection2.fitSize = function(size, object) {
      return fitSize(projection2, size, object);
    };
    projection2.fitWidth = function(width, object) {
      return fitWidth(projection2, width, object);
    };
    projection2.fitHeight = function(height, object) {
      return fitHeight(projection2, height, object);
    };
    return projection2;
  }

  // node_modules/@id-sdk/geo/built/geo.mjs
  var TAU = 2 * Math.PI;
  var EQUATORIAL_RADIUS = 6356752314245179e-9;
  var POLAR_RADIUS = 6378137;
  function geoLatToMeters(dLat) {
    return dLat * (TAU * POLAR_RADIUS / 360);
  }
  function geoLonToMeters(dLon, atLat) {
    return Math.abs(atLat) >= 90 ? 0 : dLon * (TAU * EQUATORIAL_RADIUS / 360) * Math.abs(Math.cos(atLat * (Math.PI / 180)));
  }
  function geoMetersToLat(m) {
    return m / (TAU * POLAR_RADIUS / 360);
  }
  function geoMetersToLon(m, atLat) {
    return Math.abs(atLat) >= 90 ? 0 : m / (TAU * EQUATORIAL_RADIUS / 360) / Math.abs(Math.cos(atLat * (Math.PI / 180)));
  }
  function geoMetersToOffset(m, tileSize) {
    tileSize = tileSize || 256;
    return [m[0] * tileSize / (TAU * EQUATORIAL_RADIUS), -m[1] * tileSize / (TAU * POLAR_RADIUS)];
  }
  function geoOffsetToMeters(offset, tileSize) {
    tileSize = tileSize || 256;
    return [offset[0] * TAU * EQUATORIAL_RADIUS / tileSize, -offset[1] * TAU * POLAR_RADIUS / tileSize];
  }
  function geoSphericalDistance(a, b2) {
    var x2 = geoLonToMeters(a[0] - b2[0], (a[1] + b2[1]) / 2);
    var y = geoLatToMeters(a[1] - b2[1]);
    return Math.sqrt(x2 * x2 + y * y);
  }
  function geoScaleToZoom(k, tileSize) {
    tileSize = tileSize || 256;
    var log2ts = Math.log(tileSize) * Math.LOG2E;
    return Math.log(k * TAU) / Math.LN2 - log2ts;
  }
  function geoZoomToScale(z, tileSize) {
    tileSize = tileSize || 256;
    return tileSize * Math.pow(2, z) / TAU;
  }
  function geoSphericalClosestPoint(points, a) {
    var minDistance = Infinity;
    var idx;
    for (var i2 = 0; i2 < points.length; i2++) {
      var distance = geoSphericalDistance(points[i2], a);
      if (distance < minDistance) {
        minDistance = distance;
        idx = i2;
      }
    }
    if (idx !== void 0) {
      return {
        index: idx,
        distance: minDistance,
        point: points[idx]
      };
    } else {
      return null;
    }
  }

  // node_modules/@id-sdk/extent/built/extent.mjs
  var Extent = /* @__PURE__ */ function() {
    function Extent2(other, max2) {
      _classCallCheck(this, Extent2);
      this.min = [Infinity, Infinity];
      this.max = [-Infinity, -Infinity];
      var min2;
      if (other instanceof Extent2) {
        min2 = other.min;
        max2 = other.max;
      } else {
        min2 = other;
      }
      if (min2 && min2.length === 2) {
        this.min[0] = min2[0];
        this.min[1] = min2[1];
        if (!max2)
          max2 = min2;
      }
      if (max2 && max2.length === 2) {
        this.max[0] = max2[0];
        this.max[1] = max2[1];
      }
    }
    _createClass(Extent2, [{
      key: "equals",
      value: function equals(other) {
        return this.min[0] === other.min[0] && this.min[1] === other.min[1] && this.max[0] === other.max[0] && this.max[1] === other.max[1];
      }
    }, {
      key: "area",
      value: function area3() {
        return Math.abs((this.max[0] - this.min[0]) * (this.max[1] - this.min[1]));
      }
    }, {
      key: "center",
      value: function center() {
        return [(this.min[0] + this.max[0]) / 2, (this.min[1] + this.max[1]) / 2];
      }
    }, {
      key: "rectangle",
      value: function rectangle() {
        return [this.min[0], this.min[1], this.max[0], this.max[1]];
      }
    }, {
      key: "toParam",
      value: function toParam() {
        return this.rectangle().join(",");
      }
    }, {
      key: "bbox",
      value: function bbox() {
        return {
          minX: this.min[0],
          minY: this.min[1],
          maxX: this.max[0],
          maxY: this.max[1]
        };
      }
    }, {
      key: "polygon",
      value: function polygon2() {
        return [[this.min[0], this.min[1]], [this.min[0], this.max[1]], [this.max[0], this.max[1]], [this.max[0], this.min[1]], [this.min[0], this.min[1]]];
      }
    }, {
      key: "contains",
      value: function contains3(other) {
        return other.min[0] >= this.min[0] && other.min[1] >= this.min[1] && other.max[0] <= this.max[0] && other.max[1] <= this.max[1];
      }
    }, {
      key: "intersects",
      value: function intersects4(other) {
        return other.min[0] <= this.max[0] && other.min[1] <= this.max[1] && other.max[0] >= this.min[0] && other.max[1] >= this.min[1];
      }
    }, {
      key: "intersection",
      value: function intersection(other) {
        if (!this.intersects(other))
          return new Extent2();
        return new Extent2([Math.max(other.min[0], this.min[0]), Math.max(other.min[1], this.min[1])], [Math.min(other.max[0], this.max[0]), Math.min(other.max[1], this.max[1])]);
      }
    }, {
      key: "percentContainedIn",
      value: function percentContainedIn(other) {
        var a1 = this.intersection(other).area();
        var a2 = this.area();
        if (a1 === Infinity || a2 === Infinity) {
          return 0;
        } else if (a1 === 0 || a2 === 0) {
          return other.contains(this) ? 1 : 0;
        } else {
          return a1 / a2;
        }
      }
    }, {
      key: "extend",
      value: function extend2(other) {
        return new Extent2([Math.min(other.min[0], this.min[0]), Math.min(other.min[1], this.min[1])], [Math.max(other.max[0], this.max[0]), Math.max(other.max[1], this.max[1])]);
      }
    }, {
      key: "padByMeters",
      value: function padByMeters(meters) {
        var dLat = geoMetersToLat(meters);
        var dLon = geoMetersToLon(meters, this.center()[1]);
        return new Extent2([this.min[0] - dLon, this.min[1] - dLat], [this.max[0] + dLon, this.max[1] + dLat]);
      }
    }]);
    return Extent2;
  }();

  // node_modules/d3-polygon/src/area.js
  function area_default3(polygon2) {
    var i2 = -1, n2 = polygon2.length, a, b2 = polygon2[n2 - 1], area3 = 0;
    while (++i2 < n2) {
      a = b2;
      b2 = polygon2[i2];
      area3 += a[1] * b2[0] - a[0] * b2[1];
    }
    return area3 / 2;
  }

  // node_modules/d3-polygon/src/centroid.js
  function centroid_default2(polygon2) {
    var i2 = -1, n2 = polygon2.length, x2 = 0, y = 0, a, b2 = polygon2[n2 - 1], c2, k = 0;
    while (++i2 < n2) {
      a = b2;
      b2 = polygon2[i2];
      k += c2 = a[0] * b2[1] - b2[0] * a[1];
      x2 += (a[0] + b2[0]) * c2;
      y += (a[1] + b2[1]) * c2;
    }
    return k *= 3, [x2 / k, y / k];
  }

  // node_modules/d3-polygon/src/cross.js
  function cross_default(a, b2, c2) {
    return (b2[0] - a[0]) * (c2[1] - a[1]) - (b2[1] - a[1]) * (c2[0] - a[0]);
  }

  // node_modules/d3-polygon/src/hull.js
  function lexicographicOrder(a, b2) {
    return a[0] - b2[0] || a[1] - b2[1];
  }
  function computeUpperHullIndexes(points) {
    var n2 = points.length, indexes = [0, 1];
    var size = 2, i2;
    for (i2 = 2; i2 < n2; ++i2) {
      while (size > 1 && cross_default(points[indexes[size - 2]], points[indexes[size - 1]], points[i2]) <= 0) {
        --size;
      }
      indexes[size++] = i2;
    }
    return indexes.slice(0, size);
  }
  function hull_default(points) {
    if ((n2 = points.length) < 3)
      return null;
    var i2, n2, sortedPoints = new Array(n2), flippedPoints = new Array(n2);
    for (i2 = 0; i2 < n2; ++i2) {
      sortedPoints[i2] = [+points[i2][0], +points[i2][1], i2];
    }
    sortedPoints.sort(lexicographicOrder);
    for (i2 = 0; i2 < n2; ++i2) {
      flippedPoints[i2] = [sortedPoints[i2][0], -sortedPoints[i2][1]];
    }
    var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
    var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
    for (i2 = upperIndexes.length - 1; i2 >= 0; --i2) {
      hull.push(points[sortedPoints[upperIndexes[i2]][2]]);
    }
    for (i2 = +skipLeft; i2 < lowerIndexes.length - skipRight; ++i2) {
      hull.push(points[sortedPoints[lowerIndexes[i2]][2]]);
    }
    return hull;
  }

  // node_modules/@id-sdk/vector/built/vector.mjs
  function vecEqual(a, b2, epsilon3) {
    if (epsilon3) {
      return Math.abs(a[0] - b2[0]) <= epsilon3 && Math.abs(a[1] - b2[1]) <= epsilon3;
    } else {
      return a[0] === b2[0] && a[1] === b2[1];
    }
  }
  function vecAdd(a, b2) {
    return [a[0] + b2[0], a[1] + b2[1]];
  }
  function vecSubtract(a, b2) {
    return [a[0] - b2[0], a[1] - b2[1]];
  }
  function vecScale(a, n2) {
    return [a[0] * n2, a[1] * n2];
  }
  function vecInterp(a, b2, t) {
    return [a[0] + (b2[0] - a[0]) * t, a[1] + (b2[1] - a[1]) * t];
  }
  function vecLength(a, b2) {
    b2 = b2 || [0, 0];
    var x2 = a[0] - b2[0];
    var y = a[1] - b2[1];
    return Math.sqrt(x2 * x2 + y * y);
  }
  function vecLengthSquare(a) {
    var b2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [0, 0];
    return Math.pow(a[0] - b2[0], 2) + Math.pow(a[1] - b2[1], 2);
  }
  function vecNormalize(a) {
    var length = Math.sqrt(a[0] * a[0] + a[1] * a[1]);
    if (length !== 0) {
      return vecScale(a, 1 / length);
    }
    return [0, 0];
  }
  function vecAngle(a, b2) {
    return Math.atan2(b2[1] - a[1], b2[0] - a[0]);
  }
  function vecDot(a, b2, origin) {
    origin = origin || [0, 0];
    var p2 = vecSubtract(a, origin);
    var q2 = vecSubtract(b2, origin);
    return p2[0] * q2[0] + p2[1] * q2[1];
  }
  function vecNormalizedDot(a, b2, origin) {
    origin = origin || [0, 0];
    var p2 = vecNormalize(vecSubtract(a, origin));
    var q2 = vecNormalize(vecSubtract(b2, origin));
    return vecDot(p2, q2);
  }
  function vecCross(a, b2, origin) {
    origin = origin || [0, 0];
    var p2 = vecSubtract(a, origin);
    var q2 = vecSubtract(b2, origin);
    return p2[0] * q2[1] - p2[1] * q2[0];
  }
  function vecProject(a, points) {
    var min2 = Infinity;
    var idx;
    var target;
    for (var i2 = 0; i2 < points.length - 1; i2++) {
      var o2 = points[i2];
      var s = vecSubtract(points[i2 + 1], o2);
      var v = vecSubtract(a, o2);
      var proj = vecDot(v, s) / vecDot(s, s);
      var p2 = void 0;
      if (proj < 0) {
        p2 = o2;
      } else if (proj > 1) {
        p2 = points[i2 + 1];
      } else {
        p2 = [o2[0] + proj * s[0], o2[1] + proj * s[1]];
      }
      var dist = vecLength(p2, a);
      if (dist < min2) {
        min2 = dist;
        idx = i2 + 1;
        target = p2;
      }
    }
    if (idx !== void 0 && target !== void 0) {
      return {
        index: idx,
        distance: min2,
        target: target
      };
    } else {
      return null;
    }
  }

  // node_modules/@id-sdk/geom/built/geom.mjs
  function geomEdgeEqual(a, b2) {
    return a[0] === b2[0] && a[1] === b2[1] || a[0] === b2[1] && a[1] === b2[0];
  }
  function geomRotatePoints(points, angle2, around) {
    return points.map(function(point5) {
      var radial = vecSubtract(point5, around);
      return [radial[0] * Math.cos(angle2) - radial[1] * Math.sin(angle2) + around[0], radial[0] * Math.sin(angle2) + radial[1] * Math.cos(angle2) + around[1]];
    });
  }
  function geomLineIntersection(a, b2) {
    if (a.length !== 2 || b2.length !== 2)
      return null;
    var p2 = [a[0][0], a[0][1]];
    var p22 = [a[1][0], a[1][1]];
    var q2 = [b2[0][0], b2[0][1]];
    var q22 = [b2[1][0], b2[1][1]];
    var r = vecSubtract(p22, p2);
    var s = vecSubtract(q22, q2);
    var uNumerator = vecCross(vecSubtract(q2, p2), r);
    var denominator = vecCross(r, s);
    if (uNumerator && denominator) {
      var u = uNumerator / denominator;
      var t = vecCross(vecSubtract(q2, p2), s) / denominator;
      if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {
        return vecInterp(p2, p22, t);
      }
    }
    return null;
  }
  function geomPathIntersections(path1, path2) {
    var intersections = [];
    for (var i2 = 0; i2 < path1.length - 1; i2++) {
      for (var j = 0; j < path2.length - 1; j++) {
        var a = [path1[i2], path1[i2 + 1]];
        var b2 = [path2[j], path2[j + 1]];
        var hit = geomLineIntersection(a, b2);
        if (hit) {
          intersections.push(hit);
        }
      }
    }
    return intersections;
  }
  function geomPathHasIntersections(path1, path2) {
    for (var i2 = 0; i2 < path1.length - 1; i2++) {
      for (var j = 0; j < path2.length - 1; j++) {
        var a = [path1[i2], path1[i2 + 1]];
        var b2 = [path2[j], path2[j + 1]];
        var hit = geomLineIntersection(a, b2);
        if (hit) {
          return true;
        }
      }
    }
    return false;
  }
  function geomPointInPolygon(point5, polygon2) {
    var x2 = point5[0];
    var y = point5[1];
    var inside = false;
    for (var i2 = 0, j = polygon2.length - 1; i2 < polygon2.length; j = i2++) {
      var xi = polygon2[i2][0];
      var yi = polygon2[i2][1];
      var xj = polygon2[j][0];
      var yj = polygon2[j][1];
      var intersect2 = yi > y !== yj > y && x2 < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect2)
        inside = !inside;
    }
    return inside;
  }
  function geomPolygonContainsPolygon(outer, inner) {
    return inner.every(function(point5) {
      return geomPointInPolygon(point5, outer);
    });
  }
  function geomPolygonIntersectsPolygon(outer, inner, checkSegments) {
    function testPoints(outer2, inner2) {
      return inner2.some(function(point5) {
        return geomPointInPolygon(point5, outer2);
      });
    }
    return testPoints(outer, inner) || !!checkSegments && geomPathHasIntersections(outer, inner);
  }
  function geomGetSmallestSurroundingRectangle(points) {
    var hull = hull_default(points);
    if (!hull)
      return null;
    var centroid = centroid_default2(hull);
    var minArea = Infinity;
    var ssrExtent = new Extent();
    var ssrAngle = 0;
    var c1 = hull[0];
    for (var i2 = 0; i2 <= hull.length - 1; i2++) {
      var c2 = i2 === hull.length - 1 ? hull[0] : hull[i2 + 1];
      var angle2 = Math.atan2(c2[1] - c1[1], c2[0] - c1[0]);
      var poly = geomRotatePoints(hull, -angle2, centroid);
      var extent6 = poly.reduce(function(acc, point5) {
        acc.min[0] = Math.min(acc.min[0], point5[0]);
        acc.min[1] = Math.min(acc.min[1], point5[1]);
        acc.max[0] = Math.max(acc.max[0], point5[0]);
        acc.max[1] = Math.max(acc.max[1], point5[1]);
        return acc;
      }, new Extent());
      var area3 = extent6.area();
      if (area3 < minArea) {
        minArea = area3;
        ssrExtent = extent6;
        ssrAngle = angle2;
      }
      c1 = c2;
    }
    return {
      poly: geomRotatePoints(ssrExtent.polygon(), ssrAngle, centroid),
      angle: ssrAngle
    };
  }
  function geomPathLength(path) {
    var length = 0;
    for (var i2 = 0; i2 < path.length - 1; i2++) {
      length += vecLength(path[i2], path[i2 + 1]);
    }
    return length;
  }
  function geomViewportNudge(point5, dimensions) {
    var pad2 = [80, 20, 50, 20];
    var x2 = 0;
    var y = 0;
    if (point5[0] > dimensions[0] - pad2[1])
      x2 = -10;
    if (point5[0] < pad2[3])
      x2 = 10;
    if (point5[1] > dimensions[1] - pad2[2])
      y = -10;
    if (point5[1] < pad2[0])
      y = 10;
    if (x2 || y) {
      return [x2, y];
    } else {
      return null;
    }
  }

  // node_modules/d3-dispatch/src/dispatch.js
  var noop2 = {
    value: function value() {
    }
  };
  function dispatch() {
    for (var i2 = 0, n2 = arguments.length, _2 = {}, t; i2 < n2; ++i2) {
      if (!(t = arguments[i2] + "") || t in _2 || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _2[t] = [];
    }
    return new Dispatch(_2);
  }
  function Dispatch(_2) {
    this._ = _2;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i2 = t.indexOf(".");
      if (i2 >= 0)
        name = t.slice(i2 + 1), t = t.slice(0, i2);
      if (t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return {
        type: t,
        name: name
      };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function on(typename, callback) {
      var _2 = this._, T = parseTypenames(typename + "", _2), t, i2 = -1, n2 = T.length;
      if (arguments.length < 2) {
        while (++i2 < n2) {
          if ((t = (typename = T[i2]).type) && (t = get(_2[t], typename.name)))
            return t;
        }
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i2 < n2) {
        if (t = (typename = T[i2]).type)
          _2[t] = set(_2[t], typename.name, callback);
        else if (callback == null)
          for (t in _2) {
            _2[t] = set(_2[t], typename.name, null);
          }
      }
      return this;
    },
    copy: function copy() {
      var copy7 = {}, _2 = this._;
      for (var t in _2) {
        copy7[t] = _2[t].slice();
      }
      return new Dispatch(copy7);
    },
    call: function call(type3, that) {
      if ((n2 = arguments.length - 2) > 0)
        for (var args = new Array(n2), i2 = 0, n2, t; i2 < n2; ++i2) {
          args[i2] = arguments[i2 + 2];
        }
      if (!this._.hasOwnProperty(type3))
        throw new Error("unknown type: " + type3);
      for (t = this._[type3], i2 = 0, n2 = t.length; i2 < n2; ++i2) {
        t[i2].value.apply(that, args);
      }
    },
    apply: function apply(type3, that, args) {
      if (!this._.hasOwnProperty(type3))
        throw new Error("unknown type: " + type3);
      for (var t = this._[type3], i2 = 0, n2 = t.length; i2 < n2; ++i2) {
        t[i2].value.apply(that, args);
      }
    }
  };
  function get(type3, name) {
    for (var i2 = 0, n2 = type3.length, c2; i2 < n2; ++i2) {
      if ((c2 = type3[i2]).name === name) {
        return c2.value;
      }
    }
  }
  function set(type3, name, callback) {
    for (var i2 = 0, n2 = type3.length; i2 < n2; ++i2) {
      if (type3[i2].name === name) {
        type3[i2] = noop2, type3 = type3.slice(0, i2).concat(type3.slice(i2 + 1));
        break;
      }
    }
    if (callback != null)
      type3.push({
        name: name,
        value: callback
      });
    return type3;
  }
  var dispatch_default = dispatch;

  // node_modules/d3-selection/src/namespaces.js
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // node_modules/d3-selection/src/namespace.js
  function namespace_default(name) {
    var prefix = name += "", i2 = prefix.indexOf(":");
    if (i2 >= 0 && (prefix = name.slice(0, i2)) !== "xmlns")
      name = name.slice(i2 + 1);
    return namespaces_default.hasOwnProperty(prefix) ? {
      space: namespaces_default[prefix],
      local: name
    } : name;
  }

  // node_modules/d3-selection/src/creator.js
  function creatorInherit(name) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name) {
    var fullname = namespace_default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value2) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value2,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value2;
    }
    return obj;
  }

  // node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }

  // node_modules/d3-selection/src/selection/select.js
  function select_default(select) {
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, subgroup = subgroups[j] = new Array(n2), node, subnode, i2 = 0; i2 < n2; ++i2) {
        if ((node = group[i2]) && (subnode = select.call(node, node.__data__, i2, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i2] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/d3-selection/src/array.js
  function array(x2) {
    return x2 == null ? [] : Array.isArray(x2) ? x2 : Array.from(x2);
  }

  // node_modules/d3-selection/src/selectorAll.js
  function empty() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }

  // node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select) {
    return function() {
      return array(select.apply(this, arguments));
    };
  }
  function selectAll_default(select) {
    if (typeof select === "function")
      select = arrayAll(select);
    else
      select = selectorAll_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, node, i2 = 0; i2 < n2; ++i2) {
        if (node = group[i2]) {
          subgroups.push(select.call(node, node.__data__, i2, group));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  }

  // node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }

  // node_modules/d3-selection/src/selection/selectChild.js
  var find = Array.prototype.find;
  function childFind(match) {
    return function() {
      return find.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }

  // node_modules/d3-selection/src/selection/selectChildren.js
  var filter = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }

  // node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, subgroup = subgroups[j] = [], node, i2 = 0; i2 < n2; ++i2) {
        if ((node = group[i2]) && match.call(node, node.__data__, i2, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/d3-selection/src/selection/data.js
  init_typeof();

  // node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update4) {
    return new Array(update4.length);
  }

  // node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent2, datum2) {
    this.ownerDocument = parent2.ownerDocument;
    this.namespaceURI = parent2.namespaceURI;
    this._next = null;
    this._parent = parent2;
    this.__data__ = datum2;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function appendChild(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function insertBefore(child, next) {
      return this._parent.insertBefore(child, next);
    },
    querySelector: function querySelector(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function querySelectorAll(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };

  // node_modules/d3-selection/src/constant.js
  function constant_default(x2) {
    return function() {
      return x2;
    };
  }

  // node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent2, group, enter, update4, exit, data2) {
    var i2 = 0, node, groupLength = group.length, dataLength = data2.length;
    for (; i2 < dataLength; ++i2) {
      if (node = group[i2]) {
        node.__data__ = data2[i2];
        update4[i2] = node;
      } else {
        enter[i2] = new EnterNode(parent2, data2[i2]);
      }
    }
    for (; i2 < groupLength; ++i2) {
      if (node = group[i2]) {
        exit[i2] = node;
      }
    }
  }
  function bindKey(parent2, group, enter, update4, exit, data2, key) {
    var i2, node, nodeByKeyValue = new Map(), groupLength = group.length, dataLength = data2.length, keyValues = new Array(groupLength), keyValue;
    for (i2 = 0; i2 < groupLength; ++i2) {
      if (node = group[i2]) {
        keyValues[i2] = keyValue = key.call(node, node.__data__, i2, group) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i2] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i2 = 0; i2 < dataLength; ++i2) {
      keyValue = key.call(parent2, data2[i2], i2, data2) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update4[i2] = node;
        node.__data__ = data2[i2];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i2] = new EnterNode(parent2, data2[i2]);
      }
    }
    for (i2 = 0; i2 < groupLength; ++i2) {
      if ((node = group[i2]) && nodeByKeyValue.get(keyValues[i2]) === node) {
        exit[i2] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value2, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value2 !== "function")
      value2 = constant_default(value2);
    for (var m = groups.length, update4 = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      var parent2 = parents[j], group = groups[j], groupLength = group.length, data2 = arraylike(value2.call(parent2, parent2 && parent2.__data__, j, parents)), dataLength = data2.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update4[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind(parent2, group, enterGroup, updateGroup, exitGroup, data2, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength) {
            ;
          }
          previous._next = next || null;
        }
      }
    }
    update4 = new Selection(update4, parents);
    update4._enter = enter;
    update4._exit = exit;
    return update4;
  }
  function arraylike(data2) {
    return _typeof(data2) === "object" && "length" in data2 ? data2 : Array.from(data2);
  }

  // node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }

  // node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update4 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update4 = onupdate(update4);
      if (update4)
        update4 = update4.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update4 ? enter.merge(update4).order() : update4;
  }

  // node_modules/d3-selection/src/selection/merge.js
  function merge_default(context) {
    var selection2 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n2 = group0.length, merge3 = merges[j] = new Array(n2), node, i2 = 0; i2 < n2; ++i2) {
        if (node = group0[i2] || group1[i2]) {
          merge3[i2] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Selection(merges, this._parents);
  }

  // node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
      for (var group = groups[j], i2 = group.length - 1, next = group[i2], node; --i2 >= 0; ) {
        if (node = group[i2]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare) {
    if (!compare)
      compare = ascending2;
    function compareNode(a, b2) {
      return a && b2 ? compare(a.__data__, b2.__data__) : !a - !b2;
    }
    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, sortgroup = sortgroups[j] = new Array(n2), node, i2 = 0; i2 < n2; ++i2) {
        if (node = group[i2]) {
          sortgroup[i2] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending2(a, b2) {
    return a < b2 ? -1 : a > b2 ? 1 : a >= b2 ? 0 : NaN;
  }

  // node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  // node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }

  // node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i2 = 0, n2 = group.length; i2 < n2; ++i2) {
        var node = group[i2];
        if (node)
          return node;
      }
    }
    return null;
  }

  // node_modules/d3-selection/src/selection/size.js
  function _createForOfIteratorHelper5(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray6(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length)
            return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e3(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e3(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray6(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray6(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray6(o2, minLen);
  }
  function _arrayLikeToArray6(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function size_default() {
    var size = 0;
    var _iterator = _createForOfIteratorHelper5(this), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var node = _step.value;
        ++size;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return size;
  }

  // node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }

  // node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i2 = 0, n2 = group.length, node; i2 < n2; ++i2) {
        if (node = group[i2])
          callback.call(node, node.__data__, i2, group);
      }
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name, value2) {
    return function() {
      this.setAttribute(name, value2);
    };
  }
  function attrConstantNS(fullname, value2) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value2);
    };
  }
  function attrFunction(name, value2) {
    return function() {
      var v = value2.apply(this, arguments);
      if (v == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, v);
    };
  }
  function attrFunctionNS(fullname, value2) {
    return function() {
      var v = value2.apply(this, arguments);
      if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default(name, value2) {
    var fullname = namespace_default(name);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value2 == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value2 === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value2));
  }

  // node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }

  // node_modules/d3-selection/src/selection/style.js
  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant(name, value2, priority) {
    return function() {
      this.style.setProperty(name, value2, priority);
    };
  }
  function styleFunction(name, value2, priority) {
    return function() {
      var v = value2.apply(this, arguments);
      if (v == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, v, priority);
    };
  }
  function style_default(name, value2, priority) {
    return arguments.length > 1 ? this.each((value2 == null ? styleRemove : typeof value2 === "function" ? styleFunction : styleConstant)(name, value2, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
  }

  // node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }
  function propertyConstant(name, value2) {
    return function() {
      this[name] = value2;
    };
  }
  function propertyFunction(name, value2) {
    return function() {
      var v = value2.apply(this, arguments);
      if (v == null)
        delete this[name];
      else
        this[name] = v;
    };
  }
  function property_default(name, value2) {
    return arguments.length > 1 ? this.each((value2 == null ? propertyRemove : typeof value2 === "function" ? propertyFunction : propertyConstant)(name, value2)) : this.node()[name];
  }

  // node_modules/d3-selection/src/selection/classed.js
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function add(name) {
      var i2 = this._names.indexOf(name);
      if (i2 < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function remove(name) {
      var i2 = this._names.indexOf(name);
      if (i2 >= 0) {
        this._names.splice(i2, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function contains(name) {
      return this._names.indexOf(name) >= 0;
    }
  };
  function classedAdd(node, names) {
    var list = classList(node), i2 = -1, n2 = names.length;
    while (++i2 < n2) {
      list.add(names[i2]);
    }
  }
  function classedRemove(node, names) {
    var list = classList(node), i2 = -1, n2 = names.length;
    while (++i2 < n2) {
      list.remove(names[i2]);
    }
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value2) {
    return function() {
      (value2.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name, value2) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i2 = -1, n2 = names.length;
      while (++i2 < n2) {
        if (!list.contains(names[i2]))
          return false;
      }
      return true;
    }
    return this.each((typeof value2 === "function" ? classedFunction : value2 ? classedTrue : classedFalse)(names, value2));
  }

  // node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value2) {
    return function() {
      this.textContent = value2;
    };
  }
  function textFunction(value2) {
    return function() {
      var v = value2.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }
  function text_default(value2) {
    return arguments.length ? this.each(value2 == null ? textRemove : (typeof value2 === "function" ? textFunction : textConstant)(value2)) : this.node().textContent;
  }

  // node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value2) {
    return function() {
      this.innerHTML = value2;
    };
  }
  function htmlFunction(value2) {
    return function() {
      var v = value2.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }
  function html_default(value2) {
    return arguments.length ? this.each(value2 == null ? htmlRemove : (typeof value2 === "function" ? htmlFunction : htmlConstant)(value2)) : this.node().innerHTML;
  }

  // node_modules/d3-selection/src/selection/raise.js
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }

  // node_modules/d3-selection/src/selection/lower.js
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }

  // node_modules/d3-selection/src/selection/append.js
  function append_default(name) {
    var create2 = typeof name === "function" ? name : creator_default(name);
    return this.select(function() {
      return this.appendChild(create2.apply(this, arguments));
    });
  }

  // node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name, before) {
    var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }

  // node_modules/d3-selection/src/selection/remove.js
  function remove2() {
    var parent2 = this.parentNode;
    if (parent2)
      parent2.removeChild(this);
  }
  function remove_default() {
    return this.each(remove2);
  }

  // node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  // node_modules/d3-selection/src/selection/datum.js
  function datum_default(value2) {
    return arguments.length ? this.property("__data__", value2) : this.node().__data__;
  }

  // node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i2 = t.indexOf(".");
      if (i2 >= 0)
        name = t.slice(i2 + 1), t = t.slice(0, i2);
      return {
        type: t,
        name: name
      };
    });
  }
  function onRemove(typename) {
    return function() {
      var on2 = this.__on;
      if (!on2)
        return;
      for (var j = 0, i2 = -1, m = on2.length, o2; j < m; ++j) {
        if (o2 = on2[j], (!typename.type || o2.type === typename.type) && o2.name === typename.name) {
          this.removeEventListener(o2.type, o2.listener, o2.options);
        } else {
          on2[++i2] = o2;
        }
      }
      if (++i2)
        on2.length = i2;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value2, options) {
    return function() {
      var on2 = this.__on, o2, listener = contextListener(value2);
      if (on2)
        for (var j = 0, m = on2.length; j < m; ++j) {
          if ((o2 = on2[j]).type === typename.type && o2.name === typename.name) {
            this.removeEventListener(o2.type, o2.listener, o2.options);
            this.addEventListener(o2.type, o2.listener = listener, o2.options = options);
            o2.value = value2;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o2 = {
        type: typename.type,
        name: typename.name,
        value: value2,
        listener: listener,
        options: options
      };
      if (!on2)
        this.__on = [o2];
      else
        on2.push(o2);
    };
  }
  function on_default(typename, value2, options) {
    var typenames = parseTypenames2(typename + ""), i2, n2 = typenames.length, t;
    if (arguments.length < 2) {
      var on2 = this.node().__on;
      if (on2)
        for (var j = 0, m = on2.length, o2; j < m; ++j) {
          for (i2 = 0, o2 = on2[j]; i2 < n2; ++i2) {
            if ((t = typenames[i2]).type === o2.type && t.name === o2.name) {
              return o2.value;
            }
          }
        }
      return;
    }
    on2 = value2 ? onAdd : onRemove;
    for (i2 = 0; i2 < n2; ++i2) {
      this.each(on2(typenames[i2], value2, options));
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type3, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type3, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type3, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type3, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type3, params) {
    return function() {
      return dispatchEvent(this, type3, params);
    };
  }
  function dispatchFunction(type3, params) {
    return function() {
      return dispatchEvent(this, type3, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type3, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type3, params));
  }

  // node_modules/d3-selection/src/selection/iterator.js
  var import_regenerator3 = __toModule(require_regenerator());
  var _marked3 = /* @__PURE__ */ import_regenerator3.default.mark(_callee);
  function _callee() {
    var groups, j, m, group, i2, n2, node;
    return import_regenerator3.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            groups = this._groups, j = 0, m = groups.length;
          case 1:
            if (!(j < m)) {
              _context.next = 13;
              break;
            }
            group = groups[j], i2 = 0, n2 = group.length;
          case 3:
            if (!(i2 < n2)) {
              _context.next = 10;
              break;
            }
            if (!(node = group[i2])) {
              _context.next = 7;
              break;
            }
            _context.next = 7;
            return node;
          case 7:
            ++i2;
            _context.next = 3;
            break;
          case 10:
            ++j;
            _context.next = 1;
            break;
          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _marked3, this);
  }

  // node_modules/d3-selection/src/selection/index.js
  var root = [null];
  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = _defineProperty({
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2
  }, Symbol.iterator, _callee);
  var selection_default = selection;

  // node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }

  // node_modules/d3-selection/src/sourceEvent.js
  function sourceEvent_default(event) {
    var sourceEvent;
    while (sourceEvent = event.sourceEvent) {
      event = sourceEvent;
    }
    return event;
  }

  // node_modules/d3-selection/src/pointer.js
  function pointer_default(event, node) {
    event = sourceEvent_default(event);
    if (node === void 0)
      node = event.currentTarget;
    if (node) {
      var svg2 = node.ownerSVGElement || node;
      if (svg2.createSVGPoint) {
        var point5 = svg2.createSVGPoint();
        point5.x = event.clientX, point5.y = event.clientY;
        point5 = point5.matrixTransform(node.getScreenCTM().inverse());
        return [point5.x, point5.y];
      }
      if (node.getBoundingClientRect) {
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
      }
    }
    return [event.pageX, event.pageY];
  }

  // node_modules/d3-selection/src/selectAll.js
  function selectAll_default2(selector) {
    return typeof selector === "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([array(selector)], root);
  }

  // node_modules/d3-drag/src/noevent.js
  var nonpassive = {
    passive: false
  };
  var nonpassivecapture = {
    capture: true,
    passive: false
  };
  function nopropagation(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  // node_modules/d3-drag/src/nodrag.js
  function nodrag_default(view) {
    var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
    if ("onselectstart" in root3) {
      selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
    } else {
      root3.__noselect = root3.style.MozUserSelect;
      root3.style.MozUserSelect = "none";
    }
  }
  function yesdrag(view, noclick) {
    var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
    if (noclick) {
      selection2.on("click.drag", noevent_default, nonpassivecapture);
      setTimeout(function() {
        selection2.on("click.drag", null);
      }, 0);
    }
    if ("onselectstart" in root3) {
      selection2.on("selectstart.drag", null);
    } else {
      root3.style.MozUserSelect = root3.__noselect;
      delete root3.__noselect;
    }
  }

  // node_modules/d3-drag/src/constant.js
  var constant_default2 = function(x2) {
    return function() {
      return x2;
    };
  };

  // node_modules/d3-drag/src/event.js
  function DragEvent(type3, _ref) {
    var sourceEvent = _ref.sourceEvent, subject = _ref.subject, target = _ref.target, identifier = _ref.identifier, active = _ref.active, x2 = _ref.x, y = _ref.y, dx = _ref.dx, dy = _ref.dy, dispatch12 = _ref.dispatch;
    Object.defineProperties(this, {
      type: {
        value: type3,
        enumerable: true,
        configurable: true
      },
      sourceEvent: {
        value: sourceEvent,
        enumerable: true,
        configurable: true
      },
      subject: {
        value: subject,
        enumerable: true,
        configurable: true
      },
      target: {
        value: target,
        enumerable: true,
        configurable: true
      },
      identifier: {
        value: identifier,
        enumerable: true,
        configurable: true
      },
      active: {
        value: active,
        enumerable: true,
        configurable: true
      },
      x: {
        value: x2,
        enumerable: true,
        configurable: true
      },
      y: {
        value: y,
        enumerable: true,
        configurable: true
      },
      dx: {
        value: dx,
        enumerable: true,
        configurable: true
      },
      dy: {
        value: dy,
        enumerable: true,
        configurable: true
      },
      _: {
        value: dispatch12
      }
    });
  }
  DragEvent.prototype.on = function() {
    var value2 = this._.on.apply(this._, arguments);
    return value2 === this._ ? this : value2;
  };

  // node_modules/d3-drag/src/drag.js
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(event, d) {
    return d == null ? {
      x: event.x,
      y: event.y
    } : d;
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag_default() {
    var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection2) {
      selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d) {
      if (touchending || !filter2.call(this, event, d))
        return;
      var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
      if (!gesture)
        return;
      select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
      nodrag_default(event.view);
      nopropagation(event);
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start", event);
    }
    function mousemoved(event) {
      noevent_default(event);
      if (!mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag", event);
    }
    function mouseupped(event) {
      select_default2(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent_default(event);
      gestures.mouse("end", event);
    }
    function touchstarted(event, d) {
      if (!filter2.call(this, event, d))
        return;
      var touches = event.changedTouches, c2 = container.call(this, event, d), n2 = touches.length, i2, gesture;
      for (i2 = 0; i2 < n2; ++i2) {
        if (gesture = beforestart(this, c2, event, d, touches[i2].identifier, touches[i2])) {
          nopropagation(event);
          gesture("start", event, touches[i2]);
        }
      }
    }
    function touchmoved(event) {
      var touches = event.changedTouches, n2 = touches.length, i2, gesture;
      for (i2 = 0; i2 < n2; ++i2) {
        if (gesture = gestures[touches[i2].identifier]) {
          noevent_default(event);
          gesture("drag", event, touches[i2]);
        }
      }
    }
    function touchended(event) {
      var touches = event.changedTouches, n2 = touches.length, i2, gesture;
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, 500);
      for (i2 = 0; i2 < n2; ++i2) {
        if (gesture = gestures[touches[i2].identifier]) {
          nopropagation(event);
          gesture("end", event, touches[i2]);
        }
      }
    }
    function beforestart(that, container2, event, d, identifier, touch) {
      var dispatch12 = listeners.copy(), p2 = pointer_default(touch || event, container2), dx, dy, s;
      if ((s = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier: identifier,
        active: active,
        x: p2[0],
        y: p2[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch12
      }), d)) == null)
        return;
      dx = s.x - p2[0] || 0;
      dy = s.y - p2[1] || 0;
      return function gesture(type3, event2, touch2) {
        var p02 = p2, n2;
        switch (type3) {
          case "start":
            gestures[identifier] = gesture, n2 = active++;
            break;
          case "end":
            delete gestures[identifier], --active;
          case "drag":
            p2 = pointer_default(touch2 || event2, container2), n2 = active;
            break;
        }
        dispatch12.call(type3, that, new DragEvent(type3, {
          sourceEvent: event2,
          subject: s,
          target: drag,
          identifier: identifier,
          active: n2,
          x: p2[0] + dx,
          y: p2[1] + dy,
          dx: p2[0] - p02[0],
          dy: p2[1] - p02[1],
          dispatch: dispatch12
        }), d);
      };
    }
    drag.filter = function(_2) {
      return arguments.length ? (filter2 = typeof _2 === "function" ? _2 : constant_default2(!!_2), drag) : filter2;
    };
    drag.container = function(_2) {
      return arguments.length ? (container = typeof _2 === "function" ? _2 : constant_default2(_2), drag) : container;
    };
    drag.subject = function(_2) {
      return arguments.length ? (subject = typeof _2 === "function" ? _2 : constant_default2(_2), drag) : subject;
    };
    drag.touchable = function(_2) {
      return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default2(!!_2), drag) : touchable;
    };
    drag.on = function() {
      var value2 = listeners.on.apply(listeners, arguments);
      return value2 === listeners ? drag : value2;
    };
    drag.clickDistance = function(_2) {
      return arguments.length ? (clickDistance2 = (_2 = +_2) * _2, drag) : Math.sqrt(clickDistance2);
    };
    return drag;
  }

  // node_modules/d3-interpolate/src/value.js
  init_typeof();

  // node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent2, definition) {
    var prototype = Object.create(parent2.prototype);
    for (var key in definition) {
      prototype[key] = definition[key];
    }
    return prototype;
  }

  // node_modules/d3-color/src/color.js
  function Color() {
  }
  var _darker = 0.7;
  var _brighter = 1 / _darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
  var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
  var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
  var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
  var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
  var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy: function copy2(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable: function displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format2) {
    var m, l;
    format2 = (format2 + "").trim().toLowerCase();
    return (m = reHex.exec(format2)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format2)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format2)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format2)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format2)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n2) {
    return new Rgb(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
  }
  function rgba(r, g2, b2, a) {
    if (a <= 0)
      r = g2 = b2 = NaN;
    return new Rgb(r, g2, b2, a);
  }
  function rgbConvert(o2) {
    if (!(o2 instanceof Color))
      o2 = color(o2);
    if (!o2)
      return new Rgb();
    o2 = o2.rgb();
    return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
  }
  function rgb(r, g2, b2, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g2, b2, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g2, b2, opacity) {
    this.r = +r;
    this.g = +g2;
    this.b = +b2;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter: function brighter(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function darker(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function rgb2() {
      return this;
    },
    displayable: function displayable2() {
      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }
  function rgb_formatRgb() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }
  function hex(value2) {
    value2 = Math.max(0, Math.min(255, Math.round(value2) || 0));
    return (value2 < 16 ? "0" : "") + value2.toString(16);
  }
  function hsla(h, s, l, a) {
    if (a <= 0)
      h = s = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s = NaN;
    else if (s <= 0)
      h = NaN;
    return new Hsl(h, s, l, a);
  }
  function hslConvert(o2) {
    if (o2 instanceof Hsl)
      return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
    if (!(o2 instanceof Color))
      o2 = color(o2);
    if (!o2)
      return new Hsl();
    if (o2 instanceof Hsl)
      return o2;
    o2 = o2.rgb();
    var r = o2.r / 255, g2 = o2.g / 255, b2 = o2.b / 255, min2 = Math.min(r, g2, b2), max2 = Math.max(r, g2, b2), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
    if (s) {
      if (r === max2)
        h = (g2 - b2) / s + (g2 < b2) * 6;
      else if (g2 === max2)
        h = (b2 - r) / s + 2;
      else
        h = (r - g2) / s + 4;
      s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o2.opacity);
  }
  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter: function brighter2(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function darker2(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function rgb3() {
      var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function displayable3() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl: function formatHsl() {
      var a = this.opacity;
      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
    }
  }));
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/d3-interpolate/src/basis.js
  function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default(values2) {
    var n2 = values2.length - 1;
    return function(t) {
      var i2 = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n2 - 1) : Math.floor(t * n2), v1 = values2[i2], v2 = values2[i2 + 1], v0 = i2 > 0 ? values2[i2 - 1] : 2 * v1 - v2, v3 = i2 < n2 - 1 ? values2[i2 + 2] : 2 * v2 - v1;
      return basis((t - i2 / n2) * n2, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values2) {
    var n2 = values2.length;
    return function(t) {
      var i2 = Math.floor(((t %= 1) < 0 ? ++t : t) * n2), v0 = values2[(i2 + n2 - 1) % n2], v1 = values2[i2 % n2], v2 = values2[(i2 + 1) % n2], v3 = values2[(i2 + 2) % n2];
      return basis((t - i2 / n2) * n2, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/constant.js
  var constant_default3 = function(x2) {
    return function() {
      return x2;
    };
  };

  // node_modules/d3-interpolate/src/color.js
  function linear(a, d) {
    return function(t) {
      return a + t * d;
    };
  }
  function exponential(a, b2, y) {
    return a = Math.pow(a, y), b2 = Math.pow(b2, y) - a, y = 1 / y, function(t) {
      return Math.pow(a + t * b2, y);
    };
  }
  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b2) {
      return b2 - a ? exponential(a, b2, y) : constant_default3(isNaN(a) ? b2 : a);
    };
  }
  function nogamma(a, b2) {
    var d = b2 - a;
    return d ? linear(a, d) : constant_default3(isNaN(a) ? b2 : a);
  }

  // node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y) {
    var color2 = gamma(y);
    function rgb4(start2, end) {
      var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g2 = color2(start2.g, end.g), b2 = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
      return function(t) {
        start2.r = r(t);
        start2.g = g2(t);
        start2.b = b2(t);
        start2.opacity = opacity(t);
        return start2 + "";
      };
    }
    rgb4.gamma = rgbGamma;
    return rgb4;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n2 = colors.length, r = new Array(n2), g2 = new Array(n2), b2 = new Array(n2), i2, color2;
      for (i2 = 0; i2 < n2; ++i2) {
        color2 = rgb(colors[i2]);
        r[i2] = color2.r || 0;
        g2[i2] = color2.g || 0;
        b2[i2] = color2.b || 0;
      }
      r = spline(r);
      g2 = spline(g2);
      b2 = spline(b2);
      color2.opacity = 1;
      return function(t) {
        color2.r = r(t);
        color2.g = g2(t);
        color2.b = b2(t);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a, b2) {
    if (!b2)
      b2 = [];
    var n2 = a ? Math.min(b2.length, a.length) : 0, c2 = b2.slice(), i2;
    return function(t) {
      for (i2 = 0; i2 < n2; ++i2) {
        c2[i2] = a[i2] * (1 - t) + b2[i2] * t;
      }
      return c2;
    };
  }
  function isNumberArray(x2) {
    return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
  }

  // node_modules/d3-interpolate/src/array.js
  function genericArray(a, b2) {
    var nb = b2 ? b2.length : 0, na = a ? Math.min(nb, a.length) : 0, x2 = new Array(na), c2 = new Array(nb), i2;
    for (i2 = 0; i2 < na; ++i2) {
      x2[i2] = value_default(a[i2], b2[i2]);
    }
    for (; i2 < nb; ++i2) {
      c2[i2] = b2[i2];
    }
    return function(t) {
      for (i2 = 0; i2 < na; ++i2) {
        c2[i2] = x2[i2](t);
      }
      return c2;
    };
  }

  // node_modules/d3-interpolate/src/date.js
  function date_default(a, b2) {
    var d = new Date();
    return a = +a, b2 = +b2, function(t) {
      return d.setTime(a * (1 - t) + b2 * t), d;
    };
  }

  // node_modules/d3-interpolate/src/number.js
  function number_default(a, b2) {
    return a = +a, b2 = +b2, function(t) {
      return a * (1 - t) + b2 * t;
    };
  }

  // node_modules/d3-interpolate/src/object.js
  init_typeof();
  function object_default(a, b2) {
    var i2 = {}, c2 = {}, k;
    if (a === null || _typeof(a) !== "object")
      a = {};
    if (b2 === null || _typeof(b2) !== "object")
      b2 = {};
    for (k in b2) {
      if (k in a) {
        i2[k] = value_default(a[k], b2[k]);
      } else {
        c2[k] = b2[k];
      }
    }
    return function(t) {
      for (k in i2) {
        c2[k] = i2[k](t);
      }
      return c2;
    };
  }

  // node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero(b2) {
    return function() {
      return b2;
    };
  }
  function one(b2) {
    return function(t) {
      return b2(t) + "";
    };
  }
  function string_default(a, b2) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s = [], q2 = [];
    a = a + "", b2 = b2 + "";
    while ((am = reA.exec(a)) && (bm = reB.exec(b2))) {
      if ((bs = bm.index) > bi) {
        bs = b2.slice(bi, bs);
        if (s[i2])
          s[i2] += bs;
        else
          s[++i2] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i2])
          s[i2] += bm;
        else
          s[++i2] = bm;
      } else {
        s[++i2] = null;
        q2.push({
          i: i2,
          x: number_default(am, bm)
        });
      }
      bi = reB.lastIndex;
    }
    if (bi < b2.length) {
      bs = b2.slice(bi);
      if (s[i2])
        s[i2] += bs;
      else
        s[++i2] = bs;
    }
    return s.length < 2 ? q2[0] ? one(q2[0].x) : zero(b2) : (b2 = q2.length, function(t) {
      for (var i3 = 0, o2; i3 < b2; ++i3) {
        s[(o2 = q2[i3]).i] = o2.x(t);
      }
      return s.join("");
    });
  }

  // node_modules/d3-interpolate/src/value.js
  function value_default(a, b2) {
    var t = _typeof(b2), c2;
    return b2 == null || t === "boolean" ? constant_default3(b2) : (t === "number" ? number_default : t === "string" ? (c2 = color(b2)) ? (b2 = c2, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a, b2);
  }

  // node_modules/d3-interpolate/src/round.js
  function round_default(a, b2) {
    return a = +a, b2 = +b2, function(t) {
      return Math.round(a * (1 - t) + b2 * t);
    };
  }

  // node_modules/d3-interpolate/src/transform/decompose.js
  var degrees2 = 180 / Math.PI;
  var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a, b2, c2, d, e3, f2) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b2 * b2))
      a /= scaleX, b2 /= scaleX;
    if (skewX = a * c2 + b2 * d)
      c2 -= a * skewX, d -= b2 * skewX;
    if (scaleY = Math.sqrt(c2 * c2 + d * d))
      c2 /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b2 * c2)
      a = -a, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e3,
      translateY: f2,
      rotate: Math.atan2(b2, a) * degrees2,
      skewX: Math.atan(skewX) * degrees2,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }

  // node_modules/d3-interpolate/src/transform/parse.js
  var svgNode;
  function parseCss(value2) {
    var m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value2 + "");
    return m.isIdentity ? identity : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  function parseSvg(value2) {
    if (value2 == null)
      return identity;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value2);
    if (!(value2 = svgNode.transform.baseVal.consolidate()))
      return identity;
    value2 = value2.matrix;
    return decompose_default(value2.a, value2.b, value2.c, value2.d, value2.e, value2.f);
  }

  // node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }
    function translate2(xa, ya, xb, yb, s, q2) {
      if (xa !== xb || ya !== yb) {
        var i2 = s.push("translate(", null, pxComma, null, pxParen);
        q2.push({
          i: i2 - 4,
          x: number_default(xa, xb)
        }, {
          i: i2 - 2,
          x: number_default(ya, yb)
        });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a, b2, s, q2) {
      if (a !== b2) {
        if (a - b2 > 180)
          b2 += 360;
        else if (b2 - a > 180)
          a += 360;
        q2.push({
          i: s.push(pop(s) + "rotate(", null, degParen) - 2,
          x: number_default(a, b2)
        });
      } else if (b2) {
        s.push(pop(s) + "rotate(" + b2 + degParen);
      }
    }
    function skewX(a, b2, s, q2) {
      if (a !== b2) {
        q2.push({
          i: s.push(pop(s) + "skewX(", null, degParen) - 2,
          x: number_default(a, b2)
        });
      } else if (b2) {
        s.push(pop(s) + "skewX(" + b2 + degParen);
      }
    }
    function scale2(xa, ya, xb, yb, s, q2) {
      if (xa !== xb || ya !== yb) {
        var i2 = s.push(pop(s) + "scale(", null, ",", null, ")");
        q2.push({
          i: i2 - 4,
          x: number_default(xa, xb)
        }, {
          i: i2 - 2,
          x: number_default(ya, yb)
        });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a, b2) {
      var s = [], q2 = [];
      a = parse(a), b2 = parse(b2);
      translate2(a.translateX, a.translateY, b2.translateX, b2.translateY, s, q2);
      rotate(a.rotate, b2.rotate, s, q2);
      skewX(a.skewX, b2.skewX, s, q2);
      scale2(a.scaleX, a.scaleY, b2.scaleX, b2.scaleY, s, q2);
      a = b2 = null;
      return function(t) {
        var i2 = -1, n2 = q2.length, o2;
        while (++i2 < n2) {
          s[(o2 = q2[i2]).i] = o2.x(t);
        }
        return s.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  // node_modules/d3-interpolate/src/zoom.js
  var epsilon22 = 1e-12;
  function cosh(x2) {
    return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
  }
  function sinh(x2) {
    return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
  }
  function tanh(x2) {
    return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
  }
  var zoom_default = function zoomRho(rho, rho2, rho4) {
    function zoom(p02, p1) {
      var ux0 = p02[0], uy0 = p02[1], w0 = p02[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i2, S;
      if (d2 < epsilon22) {
        S = Math.log(w1 / w0) / rho;
        i2 = function i3(t) {
          return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
        };
      } else {
        var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i2 = function i3(t) {
          var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
        };
      }
      i2.duration = S * 1e3 * rho / Math.SQRT2;
      return i2;
    }
    zoom.rho = function(_2) {
      var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
      return zoomRho(_1, _22, _4);
    };
    return zoom;
  }(Math.SQRT2, 2, 4);

  // node_modules/d3-interpolate/src/quantize.js
  function quantize_default(interpolator, n2) {
    var samples = new Array(n2);
    for (var i2 = 0; i2 < n2; ++i2) {
      samples[i2] = interpolator(i2 / (n2 - 1));
    }
    return samples;
  }

  // node_modules/d3-timer/src/timer.js
  init_typeof();
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date;
  var setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f2) {
    setTimeout(f2, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function restart(callback, delay, time) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function stop() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e3;
    while (t) {
      if ((e3 = clockNow - t._time) >= 0)
        t._call.call(void 0, e3);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now4 = clock.now(), delay = now4 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now4;
  }
  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart(function(elapsed) {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }

  // node_modules/d3-transition/src/transition/schedule.js
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node, name, id2, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id2 in schedules)
      return;
    create(node, id2, {
      name: name,
      index: index,
      group: group,
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id2) {
    var schedule = get2(node, id2);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set2(node, id2) {
    var schedule = get2(node, id2);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get2(node, id2) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id2]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node, id2, self2) {
    var schedules = node.__transition, tween;
    schedules[id2] = self2;
    self2.timer = timer(schedule, 0, self2.time);
    function schedule(elapsed) {
      self2.state = SCHEDULED;
      self2.timer.restart(start2, self2.delay, self2.time);
      if (self2.delay <= elapsed)
        start2(elapsed - self2.delay);
    }
    function start2(elapsed) {
      var i2, j, n2, o2;
      if (self2.state !== SCHEDULED)
        return stop2();
      for (i2 in schedules) {
        o2 = schedules[i2];
        if (o2.name !== self2.name)
          continue;
        if (o2.state === STARTED)
          return timeout_default(start2);
        if (o2.state === RUNNING) {
          o2.state = ENDED;
          o2.timer.stop();
          o2.on.call("interrupt", node, node.__data__, o2.index, o2.group);
          delete schedules[i2];
        } else if (+i2 < id2) {
          o2.state = ENDED;
          o2.timer.stop();
          o2.on.call("cancel", node, node.__data__, o2.index, o2.group);
          delete schedules[i2];
        }
      }
      timeout_default(function() {
        if (self2.state === STARTED) {
          self2.state = RUNNING;
          self2.timer.restart(tick, self2.delay, self2.time);
          tick(elapsed);
        }
      });
      self2.state = STARTING;
      self2.on.call("start", node, node.__data__, self2.index, self2.group);
      if (self2.state !== STARTING)
        return;
      self2.state = STARTED;
      tween = new Array(n2 = self2.tween.length);
      for (i2 = 0, j = -1; i2 < n2; ++i2) {
        if (o2 = self2.tween[i2].value.call(node, node.__data__, self2.index, self2.group)) {
          tween[++j] = o2;
        }
      }
      tween.length = j + 1;
    }
    function tick(elapsed) {
      var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop2), self2.state = ENDING, 1), i2 = -1, n2 = tween.length;
      while (++i2 < n2) {
        tween[i2].call(node, t);
      }
      if (self2.state === ENDING) {
        self2.on.call("end", node, node.__data__, self2.index, self2.group);
        stop2();
      }
    }
    function stop2() {
      self2.state = ENDED;
      self2.timer.stop();
      delete schedules[id2];
      for (var i2 in schedules) {
        return;
      }
      delete node.__transition;
    }
  }

  // node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name) {
    var schedules = node.__transition, schedule, active, empty2 = true, i2;
    if (!schedules)
      return;
    name = name == null ? null : name + "";
    for (i2 in schedules) {
      if ((schedule = schedules[i2]).name !== name) {
        empty2 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i2];
    }
    if (empty2)
      delete node.__transition;
  }

  // node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name) {
    return this.each(function() {
      interrupt_default(this, name);
    });
  }

  // node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id2, name) {
    var tween0, tween1;
    return function() {
      var schedule = set2(this, id2), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i2 = 0, n2 = tween1.length; i2 < n2; ++i2) {
          if (tween1[i2].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i2, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id2, name, value2) {
    var tween0, tween1;
    if (typeof value2 !== "function")
      throw new Error();
    return function() {
      var schedule = set2(this, id2), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = {
          name: name,
          value: value2
        }, i2 = 0, n2 = tween1.length; i2 < n2; ++i2) {
          if (tween1[i2].name === name) {
            tween1[i2] = t;
            break;
          }
        }
        if (i2 === n2)
          tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name, value2) {
    var id2 = this._id;
    name += "";
    if (arguments.length < 2) {
      var tween = get2(this.node(), id2).tween;
      for (var i2 = 0, n2 = tween.length, t; i2 < n2; ++i2) {
        if ((t = tween[i2]).name === name) {
          return t.value;
        }
      }
      return null;
    }
    return this.each((value2 == null ? tweenRemove : tweenFunction)(id2, name, value2));
  }
  function tweenValue(transition2, name, value2) {
    var id2 = transition2._id;
    transition2.each(function() {
      var schedule = set2(this, id2);
      (schedule.value || (schedule.value = {}))[name] = value2.apply(this, arguments);
    });
    return function(node) {
      return get2(node, id2).value[name];
    };
  }

  // node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a, b2) {
    var c2;
    return (typeof b2 === "number" ? number_default : b2 instanceof color ? rgb_default : (c2 = color(b2)) ? (b2 = c2, rgb_default) : string_default)(a, b2);
  }

  // node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name, interpolate, value2) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value2(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value2) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value2(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name, value2) {
    var fullname = namespace_default(name), i2 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name, typeof value2 === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i2, tweenValue(this, "attr." + name, value2)) : value2 == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i2, value2));
  }

  // node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name, i2) {
    return function(t) {
      this.setAttribute(name, i2.call(this, t));
    };
  }
  function attrInterpolateNS(fullname, i2) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i2.call(this, t));
    };
  }
  function attrTweenNS(fullname, value2) {
    var t0, i0;
    function tween() {
      var i2 = value2.apply(this, arguments);
      if (i2 !== i0)
        t0 = (i0 = i2) && attrInterpolateNS(fullname, i2);
      return t0;
    }
    tween._value = value2;
    return tween;
  }
  function attrTween(name, value2) {
    var t0, i0;
    function tween() {
      var i2 = value2.apply(this, arguments);
      if (i2 !== i0)
        t0 = (i0 = i2) && attrInterpolate(name, i2);
      return t0;
    }
    tween._value = value2;
    return tween;
  }
  function attrTween_default(name, value2) {
    var key = "attr." + name;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value2 == null)
      return this.tween(key, null);
    if (typeof value2 !== "function")
      throw new Error();
    var fullname = namespace_default(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value2));
  }

  // node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id2, value2) {
    return function() {
      init(this, id2).delay = +value2.apply(this, arguments);
    };
  }
  function delayConstant(id2, value2) {
    return value2 = +value2, function() {
      init(this, id2).delay = value2;
    };
  }
  function delay_default(value2) {
    var id2 = this._id;
    return arguments.length ? this.each((typeof value2 === "function" ? delayFunction : delayConstant)(id2, value2)) : get2(this.node(), id2).delay;
  }

  // node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id2, value2) {
    return function() {
      set2(this, id2).duration = +value2.apply(this, arguments);
    };
  }
  function durationConstant(id2, value2) {
    return value2 = +value2, function() {
      set2(this, id2).duration = value2;
    };
  }
  function duration_default(value2) {
    var id2 = this._id;
    return arguments.length ? this.each((typeof value2 === "function" ? durationFunction : durationConstant)(id2, value2)) : get2(this.node(), id2).duration;
  }

  // node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id2, value2) {
    if (typeof value2 !== "function")
      throw new Error();
    return function() {
      set2(this, id2).ease = value2;
    };
  }
  function ease_default(value2) {
    var id2 = this._id;
    return arguments.length ? this.each(easeConstant(id2, value2)) : get2(this.node(), id2).ease;
  }

  // node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id2, value2) {
    return function() {
      var v = value2.apply(this, arguments);
      if (typeof v !== "function")
        throw new Error();
      set2(this, id2).ease = v;
    };
  }
  function easeVarying_default(value2) {
    if (typeof value2 !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value2));
  }

  // node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, subgroup = subgroups[j] = [], node, i2 = 0; i2 < n2; ++i2) {
        if ((node = group[i2]) && match.call(node, node.__data__, i2, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  // node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n2 = group0.length, merge3 = merges[j] = new Array(n2), node, i2 = 0; i2 < n2; ++i2) {
        if (node = group0[i2] || group1[i2]) {
          merge3[i2] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }

  // node_modules/d3-transition/src/transition/on.js
  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
      var i2 = t.indexOf(".");
      if (i2 >= 0)
        t = t.slice(0, i2);
      return !t || t === "start";
    });
  }
  function onFunction(id2, name, listener) {
    var on0, on1, sit = start(name) ? init : set2;
    return function() {
      var schedule = sit(this, id2), on2 = schedule.on;
      if (on2 !== on0)
        (on1 = (on0 = on2).copy()).on(name, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name, listener) {
    var id2 = this._id;
    return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
  }

  // node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id2) {
    return function() {
      var parent2 = this.parentNode;
      for (var i2 in this.__transition) {
        if (+i2 !== id2)
          return;
      }
      if (parent2)
        parent2.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }

  // node_modules/d3-transition/src/transition/select.js
  function select_default3(select) {
    var name = this._name, id2 = this._id;
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, subgroup = subgroups[j] = new Array(n2), node, subnode, i2 = 0; i2 < n2; ++i2) {
        if ((node = group[i2]) && (subnode = select.call(node, node.__data__, i2, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i2] = subnode;
          schedule_default(subgroup[i2], name, id2, i2, subgroup, get2(node, id2));
        }
      }
    }
    return new Transition(subgroups, this._parents, name, id2);
  }

  // node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default3(select) {
    var name = this._name, id2 = this._id;
    if (typeof select !== "function")
      select = selectorAll_default(select);
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, node, i2 = 0; i2 < n2; ++i2) {
        if (node = group[i2]) {
          for (var children2 = select.call(node, node.__data__, i2, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
            if (child = children2[k]) {
              schedule_default(child, name, id2, k, children2, inherit2);
            }
          }
          subgroups.push(children2);
          parents.push(node);
        }
      }
    }
    return new Transition(subgroups, parents, name, id2);
  }

  // node_modules/d3-transition/src/transition/selection.js
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }

  // node_modules/d3-transition/src/transition/style.js
  function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name, interpolate, value2) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), value1 = value2(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id2, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove4;
    return function() {
      var schedule = set2(this, id2), on2 = schedule.on, listener = schedule.value[key] == null ? remove4 || (remove4 = styleRemove2(name)) : void 0;
      if (on2 !== on0 || listener0 !== listener)
        (on1 = (on0 = on2).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name, value2, priority) {
    var i2 = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value2 == null ? this.styleTween(name, styleNull(name, i2)).on("end.style." + name, styleRemove2(name)) : typeof value2 === "function" ? this.styleTween(name, styleFunction2(name, i2, tweenValue(this, "style." + name, value2))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i2, value2), priority).on("end.style." + name, null);
  }

  // node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name, i2, priority) {
    return function(t) {
      this.style.setProperty(name, i2.call(this, t), priority);
    };
  }
  function styleTween(name, value2, priority) {
    var t, i0;
    function tween() {
      var i2 = value2.apply(this, arguments);
      if (i2 !== i0)
        t = (i0 = i2) && styleInterpolate(name, i2, priority);
      return t;
    }
    tween._value = value2;
    return tween;
  }
  function styleTween_default(name, value2, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value2 == null)
      return this.tween(key, null);
    if (typeof value2 !== "function")
      throw new Error();
    return this.tween(key, styleTween(name, value2, priority == null ? "" : priority));
  }

  // node_modules/d3-transition/src/transition/text.js
  function textConstant2(value2) {
    return function() {
      this.textContent = value2;
    };
  }
  function textFunction2(value2) {
    return function() {
      var value1 = value2(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value2) {
    return this.tween("text", typeof value2 === "function" ? textFunction2(tweenValue(this, "text", value2)) : textConstant2(value2 == null ? "" : value2 + ""));
  }

  // node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i2) {
    return function(t) {
      this.textContent = i2.call(this, t);
    };
  }
  function textTween(value2) {
    var t0, i0;
    function tween() {
      var i2 = value2.apply(this, arguments);
      if (i2 !== i0)
        t0 = (i0 = i2) && textInterpolate(i2);
      return t0;
    }
    tween._value = value2;
    return tween;
  }
  function textTween_default(value2) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value2 == null)
      return this.tween(key, null);
    if (typeof value2 !== "function")
      throw new Error();
    return this.tween(key, textTween(value2));
  }

  // node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, node, i2 = 0; i2 < n2; ++i2) {
        if (node = group[i2]) {
          var inherit2 = get2(node, id0);
          schedule_default(node, name, id1, i2, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
      }
    }
    return new Transition(groups, this._parents, name, id1);
  }

  // node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id2 = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = {
        value: reject
      }, end = {
        value: function value2() {
          if (--size === 0)
            resolve();
        }
      };
      that.each(function() {
        var schedule = set2(this, id2), on2 = schedule.on;
        if (on2 !== on0) {
          on1 = (on0 = on2).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size === 0)
        resolve();
    });
  }

  // node_modules/d3-transition/src/transition/index.js
  var id = 0;
  function Transition(groups, parents, name, id2) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id2;
  }
  function transition(name) {
    return selection_default().transition(name);
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition.prototype = _defineProperty({
    constructor: Transition,
    select: select_default3,
    selectAll: selectAll_default3,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default
  }, Symbol.iterator, selection_prototype[Symbol.iterator]);

  // node_modules/d3-ease/src/linear.js
  var linear2 = function linear3(t) {
    return +t;
  };

  // node_modules/d3-ease/src/cubic.js
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }

  // node_modules/d3-transition/src/selection/transition.js
  var defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node, id2) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id2])) {
      if (!(node = node.parentNode)) {
        throw new Error("transition ".concat(id2, " not found"));
      }
    }
    return timing;
  }
  function transition_default2(name) {
    var id2, timing;
    if (name instanceof Transition) {
      id2 = name._id, name = name._name;
    } else {
      id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n2 = group.length, node, i2 = 0; i2 < n2; ++i2) {
        if (node = group[i2]) {
          schedule_default(node, name, id2, i2, group, timing || inherit(node, id2));
        }
      }
    }
    return new Transition(groups, this._parents, name, id2);
  }

  // node_modules/d3-transition/src/selection/index.js
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;

  // node_modules/d3-zoom/src/constant.js
  var constant_default4 = function(x2) {
    return function() {
      return x2;
    };
  };

  // node_modules/d3-zoom/src/event.js
  function ZoomEvent(type3, _ref) {
    var sourceEvent = _ref.sourceEvent, target = _ref.target, transform2 = _ref.transform, dispatch12 = _ref.dispatch;
    Object.defineProperties(this, {
      type: {
        value: type3,
        enumerable: true,
        configurable: true
      },
      sourceEvent: {
        value: sourceEvent,
        enumerable: true,
        configurable: true
      },
      target: {
        value: target,
        enumerable: true,
        configurable: true
      },
      transform: {
        value: transform2,
        enumerable: true,
        configurable: true
      },
      _: {
        value: dispatch12
      }
    });
  }

  // node_modules/d3-zoom/src/transform.js
  function Transform(k, x2, y) {
    this.k = k;
    this.x = x2;
    this.y = y;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function scale(k) {
      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
    },
    translate: function translate(x2, y) {
      return x2 === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x2, this.y + this.k * y);
    },
    apply: function apply2(point5) {
      return [point5[0] * this.k + this.x, point5[1] * this.k + this.y];
    },
    applyX: function applyX(x2) {
      return x2 * this.k + this.x;
    },
    applyY: function applyY(y) {
      return y * this.k + this.y;
    },
    invert: function invert(location2) {
      return [(location2[0] - this.x) / this.k, (location2[1] - this.y) / this.k];
    },
    invertX: function invertX(x2) {
      return (x2 - this.x) / this.k;
    },
    invertY: function invertY(y) {
      return (y - this.y) / this.k;
    },
    rescaleX: function rescaleX(x2) {
      return x2.copy().domain(x2.range().map(this.invertX, this).map(x2.invert, x2));
    },
    rescaleY: function rescaleY(y) {
      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
    },
    toString: function toString() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity2 = new Transform(1, 0, 0);
  transform.prototype = Transform.prototype;
  function transform(node) {
    while (!node.__zoom) {
      if (!(node = node.parentNode))
        return identity2;
    }
    return node.__zoom;
  }

  // node_modules/d3-zoom/src/noevent.js
  function nopropagation2(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }

  // node_modules/d3-zoom/src/zoom.js
  function defaultFilter2(event) {
    return (!event.ctrlKey || event.type === "wheel") && !event.button;
  }
  function defaultExtent() {
    var e3 = this;
    if (e3 instanceof SVGElement) {
      e3 = e3.ownerSVGElement || e3;
      if (e3.hasAttribute("viewBox")) {
        e3 = e3.viewBox.baseVal;
        return [[e3.x, e3.y], [e3.x + e3.width, e3.y + e3.height]];
      }
      return [[0, 0], [e3.width.baseVal.value, e3.height.baseVal.value]];
    }
    return [[0, 0], [e3.clientWidth, e3.clientHeight]];
  }
  function defaultTransform() {
    return this.__zoom || identity2;
  }
  function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
  }
  function defaultTouchable2() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function defaultConstrain(transform2, extent6, translateExtent) {
    var dx0 = transform2.invertX(extent6[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent6[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent6[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent6[1][1]) - translateExtent[1][1];
    return transform2.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
  }
  function zoom_default2() {
    var filter2 = defaultFilter2, extent6 = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
    function zoom(selection2) {
      selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, {
        passive: false
      }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    zoom.transform = function(collection, transform2, point5, event) {
      var selection2 = collection.selection ? collection.selection() : collection;
      selection2.property("__zoom", defaultTransform);
      if (collection !== selection2) {
        schedule(collection, transform2, point5, event);
      } else {
        selection2.interrupt().each(function() {
          gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
        });
      }
    };
    zoom.scaleBy = function(selection2, k, p2, event) {
      zoom.scaleTo(selection2, function() {
        var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return k0 * k1;
      }, p2, event);
    };
    zoom.scaleTo = function(selection2, k, p2, event) {
      zoom.transform(selection2, function() {
        var e3 = extent6.apply(this, arguments), t0 = this.__zoom, p02 = p2 == null ? centroid(e3) : typeof p2 === "function" ? p2.apply(this, arguments) : p2, p1 = t0.invert(p02), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return constrain(translate2(scale2(t0, k1), p02, p1), e3, translateExtent);
      }, p2, event);
    };
    zoom.translateBy = function(selection2, x2, y, event) {
      zoom.transform(selection2, function() {
        return constrain(this.__zoom.translate(typeof x2 === "function" ? x2.apply(this, arguments) : x2, typeof y === "function" ? y.apply(this, arguments) : y), extent6.apply(this, arguments), translateExtent);
      }, null, event);
    };
    zoom.translateTo = function(selection2, x2, y, p2, event) {
      zoom.transform(selection2, function() {
        var e3 = extent6.apply(this, arguments), t = this.__zoom, p02 = p2 == null ? centroid(e3) : typeof p2 === "function" ? p2.apply(this, arguments) : p2;
        return constrain(identity2.translate(p02[0], p02[1]).scale(t.k).translate(typeof x2 === "function" ? -x2.apply(this, arguments) : -x2, typeof y === "function" ? -y.apply(this, arguments) : -y), e3, translateExtent);
      }, p2, event);
    };
    function scale2(transform2, k) {
      k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
      return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
    }
    function translate2(transform2, p02, p1) {
      var x2 = p02[0] - p1[0] * transform2.k, y = p02[1] - p1[1] * transform2.k;
      return x2 === transform2.x && y === transform2.y ? transform2 : new Transform(transform2.k, x2, y);
    }
    function centroid(extent7) {
      return [(+extent7[0][0] + +extent7[1][0]) / 2, (+extent7[0][1] + +extent7[1][1]) / 2];
    }
    function schedule(transition2, transform2, point5, event) {
      transition2.on("start.zoom", function() {
        gesture(this, arguments).event(event).start();
      }).on("interrupt.zoom end.zoom", function() {
        gesture(this, arguments).event(event).end();
      }).tween("zoom", function() {
        var that = this, args = arguments, g2 = gesture(that, args).event(event), e3 = extent6.apply(that, args), p2 = point5 == null ? centroid(e3) : typeof point5 === "function" ? point5.apply(that, args) : point5, w = Math.max(e3[1][0] - e3[0][0], e3[1][1] - e3[0][1]), a = that.__zoom, b2 = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i2 = interpolate(a.invert(p2).concat(w / a.k), b2.invert(p2).concat(w / b2.k));
        return function(t) {
          if (t === 1)
            t = b2;
          else {
            var l = i2(t), k = w / l[2];
            t = new Transform(k, p2[0] - l[0] * k, p2[1] - l[1] * k);
          }
          g2.zoom(null, t);
        };
      });
    }
    function gesture(that, args, clean2) {
      return !clean2 && that.__zooming || new Gesture(that, args);
    }
    function Gesture(that, args) {
      this.that = that;
      this.args = args;
      this.active = 0;
      this.sourceEvent = null;
      this.extent = extent6.apply(that, args);
      this.taps = 0;
    }
    Gesture.prototype = {
      event: function event(_event) {
        if (_event)
          this.sourceEvent = _event;
        return this;
      },
      start: function start2() {
        if (++this.active === 1) {
          this.that.__zooming = this;
          this.emit("start");
        }
        return this;
      },
      zoom: function zoom2(key, transform2) {
        if (this.mouse && key !== "mouse")
          this.mouse[1] = transform2.invert(this.mouse[0]);
        if (this.touch0 && key !== "touch")
          this.touch0[1] = transform2.invert(this.touch0[0]);
        if (this.touch1 && key !== "touch")
          this.touch1[1] = transform2.invert(this.touch1[0]);
        this.that.__zoom = transform2;
        this.emit("zoom");
        return this;
      },
      end: function end() {
        if (--this.active === 0) {
          delete this.that.__zooming;
          this.emit("end");
        }
        return this;
      },
      emit: function emit(type3) {
        var d = select_default2(this.that).datum();
        listeners.call(type3, this.that, new ZoomEvent(type3, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type3,
          transform: this.that.__zoom,
          dispatch: listeners
        }), d);
      }
    };
    function wheeled(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (!filter2.apply(this, arguments))
        return;
      var g2 = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p2 = pointer_default(event);
      if (g2.wheel) {
        if (g2.mouse[0][0] !== p2[0] || g2.mouse[0][1] !== p2[1]) {
          g2.mouse[1] = t.invert(g2.mouse[0] = p2);
        }
        clearTimeout(g2.wheel);
      } else if (t.k === k)
        return;
      else {
        g2.mouse = [p2, t.invert(p2)];
        interrupt_default(this);
        g2.start();
      }
      noevent_default2(event);
      g2.wheel = setTimeout(wheelidled, wheelDelay);
      g2.zoom("mouse", constrain(translate2(scale2(t, k), g2.mouse[0], g2.mouse[1]), g2.extent, translateExtent));
      function wheelidled() {
        g2.wheel = null;
        g2.end();
      }
    }
    function mousedowned(event) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      if (touchending || !filter2.apply(this, arguments))
        return;
      var currentTarget = event.currentTarget, g2 = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p2 = pointer_default(event, currentTarget), x05 = event.clientX, y05 = event.clientY;
      nodrag_default(event.view);
      nopropagation2(event);
      g2.mouse = [p2, this.__zoom.invert(p2)];
      interrupt_default(this);
      g2.start();
      function mousemoved(event2) {
        noevent_default2(event2);
        if (!g2.moved) {
          var dx = event2.clientX - x05, dy = event2.clientY - y05;
          g2.moved = dx * dx + dy * dy > clickDistance2;
        }
        g2.event(event2).zoom("mouse", constrain(translate2(g2.that.__zoom, g2.mouse[0] = pointer_default(event2, currentTarget), g2.mouse[1]), g2.extent, translateExtent));
      }
      function mouseupped(event2) {
        v.on("mousemove.zoom mouseup.zoom", null);
        yesdrag(event2.view, g2.moved);
        noevent_default2(event2);
        g2.event(event2).end();
      }
    }
    function dblclicked(event) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      if (!filter2.apply(this, arguments))
        return;
      var t0 = this.__zoom, p02 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p02), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate2(scale2(t0, k1), p02, p1), extent6.apply(this, args), translateExtent);
      noevent_default2(event);
      if (duration > 0)
        select_default2(this).transition().duration(duration).call(schedule, t1, p02, event);
      else
        select_default2(this).call(zoom.transform, t1, p02, event);
    }
    function touchstarted(event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      if (!filter2.apply(this, arguments))
        return;
      var touches = event.touches, n2 = touches.length, g2 = gesture(this, args, event.changedTouches.length === n2).event(event), started, i2, t, p2;
      nopropagation2(event);
      for (i2 = 0; i2 < n2; ++i2) {
        t = touches[i2], p2 = pointer_default(t, this);
        p2 = [p2, this.__zoom.invert(p2), t.identifier];
        if (!g2.touch0)
          g2.touch0 = p2, started = true, g2.taps = 1 + !!touchstarting;
        else if (!g2.touch1 && g2.touch0[2] !== p2[2])
          g2.touch1 = p2, g2.taps = 0;
      }
      if (touchstarting)
        touchstarting = clearTimeout(touchstarting);
      if (started) {
        if (g2.taps < 2)
          touchfirst = p2[0], touchstarting = setTimeout(function() {
            touchstarting = null;
          }, touchDelay);
        interrupt_default(this);
        g2.start();
      }
    }
    function touchmoved(event) {
      if (!this.__zooming)
        return;
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      var g2 = gesture(this, args).event(event), touches = event.changedTouches, n2 = touches.length, i2, t, p2, l;
      noevent_default2(event);
      for (i2 = 0; i2 < n2; ++i2) {
        t = touches[i2], p2 = pointer_default(t, this);
        if (g2.touch0 && g2.touch0[2] === t.identifier)
          g2.touch0[0] = p2;
        else if (g2.touch1 && g2.touch1[2] === t.identifier)
          g2.touch1[0] = p2;
      }
      t = g2.that.__zoom;
      if (g2.touch1) {
        var p02 = g2.touch0[0], l0 = g2.touch0[1], p1 = g2.touch1[0], l1 = g2.touch1[1], dp = (dp = p1[0] - p02[0]) * dp + (dp = p1[1] - p02[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t = scale2(t, Math.sqrt(dp / dl));
        p2 = [(p02[0] + p1[0]) / 2, (p02[1] + p1[1]) / 2];
        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
      } else if (g2.touch0)
        p2 = g2.touch0[0], l = g2.touch0[1];
      else
        return;
      g2.zoom("touch", constrain(translate2(t, p2, l), g2.extent, translateExtent));
    }
    function touchended(event) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }
      if (!this.__zooming)
        return;
      var g2 = gesture(this, args).event(event), touches = event.changedTouches, n2 = touches.length, i2, t;
      nopropagation2(event);
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, touchDelay);
      for (i2 = 0; i2 < n2; ++i2) {
        t = touches[i2];
        if (g2.touch0 && g2.touch0[2] === t.identifier)
          delete g2.touch0;
        else if (g2.touch1 && g2.touch1[2] === t.identifier)
          delete g2.touch1;
      }
      if (g2.touch1 && !g2.touch0)
        g2.touch0 = g2.touch1, delete g2.touch1;
      if (g2.touch0)
        g2.touch0[1] = this.__zoom.invert(g2.touch0[0]);
      else {
        g2.end();
        if (g2.taps === 2) {
          t = pointer_default(t, this);
          if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
            var p2 = select_default2(this).on("dblclick.zoom");
            if (p2)
              p2.apply(this, arguments);
          }
        }
      }
    }
    zoom.wheelDelta = function(_2) {
      return arguments.length ? (wheelDelta = typeof _2 === "function" ? _2 : constant_default4(+_2), zoom) : wheelDelta;
    };
    zoom.filter = function(_2) {
      return arguments.length ? (filter2 = typeof _2 === "function" ? _2 : constant_default4(!!_2), zoom) : filter2;
    };
    zoom.touchable = function(_2) {
      return arguments.length ? (touchable = typeof _2 === "function" ? _2 : constant_default4(!!_2), zoom) : touchable;
    };
    zoom.extent = function(_2) {
      return arguments.length ? (extent6 = typeof _2 === "function" ? _2 : constant_default4([[+_2[0][0], +_2[0][1]], [+_2[1][0], +_2[1][1]]]), zoom) : extent6;
    };
    zoom.scaleExtent = function(_2) {
      return arguments.length ? (scaleExtent[0] = +_2[0], scaleExtent[1] = +_2[1], zoom) : [scaleExtent[0], scaleExtent[1]];
    };
    zoom.translateExtent = function(_2) {
      return arguments.length ? (translateExtent[0][0] = +_2[0][0], translateExtent[1][0] = +_2[1][0], translateExtent[0][1] = +_2[0][1], translateExtent[1][1] = +_2[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
    };
    zoom.constrain = function(_2) {
      return arguments.length ? (constrain = _2, zoom) : constrain;
    };
    zoom.duration = function(_2) {
      return arguments.length ? (duration = +_2, zoom) : duration;
    };
    zoom.interpolate = function(_2) {
      return arguments.length ? (interpolate = _2, zoom) : interpolate;
    };
    zoom.on = function() {
      var value2 = listeners.on.apply(listeners, arguments);
      return value2 === listeners ? zoom : value2;
    };
    zoom.clickDistance = function(_2) {
      return arguments.length ? (clickDistance2 = (_2 = +_2) * _2, zoom) : Math.sqrt(clickDistance2);
    };
    zoom.tapDistance = function(_2) {
      return arguments.length ? (tapDistance = +_2, zoom) : tapDistance;
    };
    return zoom;
  }

  // node_modules/@id-sdk/projection/built/projection.mjs
  var Projection = /* @__PURE__ */ function() {
    function Projection2(x2, y, k) {
      _classCallCheck(this, Projection2);
      this._proj = mercatorRaw;
      this._dimensions = [[0, 0], [0, 0]];
      this._x = x2 || 0;
      this._y = y || 0;
      this._k = k || 256 / Math.PI;
    }
    _createClass(Projection2, [{
      key: "project",
      value: function project(p2) {
        p2 = this._proj(p2[0] * Math.PI / 180, p2[1] * Math.PI / 180);
        return [p2[0] * this._k + this._x, this._y - p2[1] * this._k];
      }
    }, {
      key: "invert",
      value: function invert2(p2) {
        p2 = this._proj.invert((p2[0] - this._x) / this._k, (this._y - p2[1]) / this._k);
        return [p2[0] * 180 / Math.PI, p2[1] * 180 / Math.PI];
      }
    }, {
      key: "scale",
      value: function scale2(val) {
        if (val === void 0)
          return this._k;
        this._k = +val;
        return this;
      }
    }, {
      key: "translate",
      value: function translate2(val) {
        if (val === void 0)
          return [this._x, this._y];
        this._x = +val[0];
        this._y = +val[1];
        return this;
      }
    }, {
      key: "dimensions",
      value: function dimensions(val) {
        if (val === void 0)
          return this._dimensions;
        this._dimensions = val;
        return this;
      }
    }, {
      key: "transform",
      value: function transform2(obj) {
        if (obj === void 0)
          return identity2.translate(this._x, this._y).scale(this._k);
        this._x = +obj.x;
        this._y = +obj.y;
        this._k = +obj.k;
        return this;
      }
    }, {
      key: "getStream",
      value: function getStream() {
        var thiz = this;
        return transform_default({
          point: function point5(x2, y) {
            var p2 = thiz.project([x2, y]);
            this.stream.point(p2[0], p2[1]);
          }
        }).stream;
      }
    }]);
    return Projection2;
  }();

  // node_modules/@id-sdk/tiler/built/tiler.mjs
  function clamp(num, min2, max2) {
    return Math.max(min2, Math.min(num, max2));
  }
  function range3(start2, end) {
    return Array.from(Array(1 + end - start2).keys()).map(function(v) {
      return start2 + v;
    });
  }
  var Tiler = /* @__PURE__ */ function() {
    function Tiler2() {
      _classCallCheck(this, Tiler2);
      this._tileSize = 256;
      this._zoomRange = [0, 24];
      this._margin = 0;
      this._skipNullIsland = false;
    }
    _createClass(Tiler2, [{
      key: "getTiles",
      value: function getTiles(projection2) {
        var dimensions = projection2.dimensions();
        var translate2 = projection2.translate();
        var scale2 = projection2.scale();
        var zFrac = geoScaleToZoom(scale2, this._tileSize);
        var z = clamp(Math.round(zFrac), this._zoomRange[0], this._zoomRange[1]);
        var minTile = 0;
        var maxTile = Math.pow(2, z) - 1;
        var log2ts = Math.log(this._tileSize) * Math.LOG2E;
        var k = Math.pow(2, zFrac - z + log2ts);
        var origin = [scale2 * Math.PI - translate2[0], scale2 * Math.PI - translate2[1]];
        var viewMin = [origin[0] + dimensions[0][0], origin[1] + dimensions[0][1]];
        var viewMax = [origin[0] + dimensions[1][0], origin[1] + dimensions[1][1]];
        var viewExtent = new Extent(viewMin, viewMax);
        var worldOrigin = Math.pow(2, z) / 2 * this._tileSize;
        var worldScale = geoZoomToScale(z, this._tileSize);
        var worldProjection = new Projection(worldOrigin, worldOrigin, worldScale);
        var cols = range3(clamp(Math.floor(viewMin[0] / k) - this._margin, minTile, maxTile), clamp(Math.floor(viewMax[0] / k) + this._margin, minTile, maxTile));
        var rows = range3(clamp(Math.floor(viewMin[1] / k) - this._margin, minTile, maxTile), clamp(Math.floor(viewMax[1] / k) + this._margin, minTile, maxTile));
        var tiles = [];
        for (var i2 = 0; i2 < rows.length; i2++) {
          var y = rows[i2];
          for (var j = 0; j < cols.length; j++) {
            var x2 = cols[j];
            var xyz = [x2, y, z];
            if (this._skipNullIsland && Tiler2.isNearNullIsland(x2, y, z))
              continue;
            var tileMin = [x2 * this._tileSize, y * this._tileSize];
            var tileMax = [(x2 + 1) * this._tileSize, (y + 1) * this._tileSize];
            var tileExtent = new Extent(tileMin, tileMax);
            var isVisible = viewExtent.intersects(tileExtent);
            var wgs84Min = worldProjection.invert([tileMin[0], tileMax[1]]);
            var wgs84Max = worldProjection.invert([tileMax[0], tileMin[1]]);
            var tile = {
              id: xyz.toString(),
              xyz: xyz,
              pxExtent: new Extent(tileMin, tileMax),
              wgs84Extent: new Extent(wgs84Min, wgs84Max),
              isVisible: isVisible
            };
            if (isVisible) {
              tiles.unshift(tile);
            } else {
              tiles.push(tile);
            }
          }
        }
        return {
          tiles: tiles
        };
      }
    }, {
      key: "getGeoJSON",
      value: function getGeoJSON(tileResult) {
        var features2 = tileResult.tiles.map(function(tile) {
          return {
            type: "Feature",
            properties: {
              id: tile.id,
              name: tile.id
            },
            geometry: {
              type: "Polygon",
              coordinates: [tile.wgs84Extent.polygon()]
            }
          };
        });
        return {
          type: "FeatureCollection",
          features: features2
        };
      }
    }, {
      key: "tileSize",
      value: function tileSize(val) {
        if (val === void 0)
          return this._tileSize;
        this._tileSize = val;
        return this;
      }
    }, {
      key: "zoomRange",
      value: function zoomRange(min2, max2) {
        if (min2 === void 0)
          return this._zoomRange;
        if (max2 === void 0)
          max2 = min2;
        this._zoomRange = [min2, max2];
        return this;
      }
    }, {
      key: "margin",
      value: function margin(val) {
        if (val === void 0)
          return this._margin;
        this._margin = +val;
        return this;
      }
    }, {
      key: "skipNullIsland",
      value: function skipNullIsland(val) {
        if (val === void 0)
          return this._skipNullIsland;
        this._skipNullIsland = val;
        return this;
      }
    }], [{
      key: "isNearNullIsland",
      value: function isNearNullIsland(x2, y, z) {
        if (z >= 7) {
          var center = Math.pow(2, z - 1);
          var width = Math.pow(2, z - 6);
          var min2 = center - width / 2;
          var max2 = center + width / 2 - 1;
          return x2 >= min2 && x2 <= max2 && y >= min2 && y <= max2;
        }
        return false;
      }
    }]);
    return Tiler2;
  }();

  // modules/osm/entity.js
  function osmEntity(attrs) {
    if (this instanceof osmEntity)
      return;
    if (attrs && attrs.type) {
      return osmEntity[attrs.type].apply(this, arguments);
    } else if (attrs && attrs.id) {
      return osmEntity[osmEntity.id.type(attrs.id)].apply(this, arguments);
    }
    return new osmEntity().initialize(arguments);
  }
  osmEntity.id = function(type3) {
    return osmEntity.id.fromOSM(type3, osmEntity.id.next[type3]--);
  };
  osmEntity.id.next = {
    changeset: -1,
    node: -1,
    way: -1,
    relation: -1
  };
  osmEntity.id.fromOSM = function(type3, id2) {
    return type3[0] + id2;
  };
  osmEntity.id.toOSM = function(id2) {
    return id2.slice(1);
  };
  osmEntity.id.type = function(id2) {
    return {
      "c": "changeset",
      "n": "node",
      "w": "way",
      "r": "relation"
    }[id2[0]];
  };
  osmEntity.key = function(entity2) {
    return entity2.id + "v" + (entity2.v || 0);
  };
  var _deprecatedTagValuesByKey;
  osmEntity.deprecatedTagValuesByKey = function(dataDeprecated) {
    if (!_deprecatedTagValuesByKey) {
      _deprecatedTagValuesByKey = {};
      dataDeprecated.forEach(function(d) {
        var oldKeys = Object.keys(d.old);
        if (oldKeys.length === 1) {
          var oldKey = oldKeys[0];
          var oldValue = d.old[oldKey];
          if (oldValue !== "*") {
            if (!_deprecatedTagValuesByKey[oldKey]) {
              _deprecatedTagValuesByKey[oldKey] = [oldValue];
            } else {
              _deprecatedTagValuesByKey[oldKey].push(oldValue);
            }
          }
        }
      });
    }
    return _deprecatedTagValuesByKey;
  };
  osmEntity.prototype = {
    tags: {},
    initialize: function initialize(sources) {
      for (var i2 = 0; i2 < sources.length; ++i2) {
        var source = sources[i2];
        for (var prop in source) {
          if (Object.prototype.hasOwnProperty.call(source, prop)) {
            if (source[prop] === void 0) {
              delete this[prop];
            } else {
              this[prop] = source[prop];
            }
          }
        }
      }
      if (!this.id && this.type) {
        this.id = osmEntity.id(this.type);
      }
      if (!this.hasOwnProperty("visible")) {
        this.visible = true;
      }
      if (debug) {
        Object.freeze(this);
        Object.freeze(this.tags);
        if (this.loc)
          Object.freeze(this.loc);
        if (this.nodes)
          Object.freeze(this.nodes);
        if (this.members)
          Object.freeze(this.members);
      }
      return this;
    },
    copy: function copy3(resolver, copies) {
      if (copies[this.id])
        return copies[this.id];
      var copy7 = osmEntity(this, {
        id: void 0,
        user: void 0,
        version: void 0
      });
      copies[this.id] = copy7;
      return copy7;
    },
    osmId: function osmId() {
      return osmEntity.id.toOSM(this.id);
    },
    isNew: function isNew() {
      return this.osmId() < 0;
    },
    update: function update(attrs) {
      return osmEntity(this, attrs, {
        v: 1 + (this.v || 0)
      });
    },
    mergeTags: function mergeTags(tags) {
      var merged = Object.assign({}, this.tags);
      var changed = false;
      for (var k in tags) {
        var t1 = merged[k];
        var t2 = tags[k];
        if (!t1) {
          changed = true;
          merged[k] = t2;
        } else if (k === "building") {
          if (t2 === "yes") {
            continue;
          } else if (t1 === "yes") {
            changed = true;
            merged[k] = t2;
          }
        } else if (t1 !== t2) {
          changed = true;
          if (t1 === "yes" || t2 === "yes") {
            merged[k] = t1 === "yes" ? t2 : t1;
          } else if (k === "seamark:type") {
            if (t2 && (t1 === "topmark" || t1 === "light_minor"))
              merged[k] = t2;
            if (t1 && (t2 === "topmark" || t2 === "light_minor"))
              merged[k] = t1;
          } else if (k === "man_made" && [t1, t2].sort().join("-") === "mast-tower") {
            merged.man_made = "tower";
          } else {
            merged[k] = utilUnicodeCharsTruncated(utilArrayUnion(t1.split(/;\s*/), t2.split(/;\s*/)).join(";"), 255);
          }
        }
      }
      return changed ? this.update({
        tags: merged
      }) : this;
    },
    intersects: function intersects(extent6, resolver) {
      return this.extent(resolver).intersects(extent6);
    },
    hasNonGeometryTags: function hasNonGeometryTags() {
      return Object.keys(this.tags).some(function(k) {
        return k !== "area";
      });
    },
    hasParentRelations: function hasParentRelations(resolver) {
      return resolver.parentRelations(this).length > 0;
    },
    hasInterestingTags: function hasInterestingTags() {
      return Object.keys(this.tags).some(osmIsInterestingTag);
    },
    isHighwayIntersection: function isHighwayIntersection() {
      return false;
    },
    isDegenerate: function isDegenerate() {
      return true;
    },
    deprecatedTags: function deprecatedTags(dataDeprecated) {
      var tags = this.tags;
      if (Object.keys(tags).length === 0)
        return [];
      var deprecated2 = [];
      dataDeprecated.forEach(function(d) {
        var oldKeys = Object.keys(d.old);
        if (d.replace) {
          var hasExistingValues = Object.keys(d.replace).some(function(replaceKey) {
            if (!tags[replaceKey] || d.old[replaceKey])
              return false;
            var replaceValue = d.replace[replaceKey];
            if (replaceValue === "*")
              return false;
            if (replaceValue === tags[replaceKey])
              return false;
            return true;
          });
          if (hasExistingValues)
            return;
        }
        var matchesDeprecatedTags = oldKeys.every(function(oldKey) {
          if (!tags[oldKey])
            return false;
          if (d.old[oldKey] === "*")
            return true;
          if (d.old[oldKey] === tags[oldKey])
            return true;
          var vals = tags[oldKey].split(";").filter(Boolean);
          if (vals.length === 0) {
            return false;
          } else if (vals.length > 1) {
            return vals.indexOf(d.old[oldKey]) !== -1;
          } else {
            if (tags[oldKey] === d.old[oldKey]) {
              if (d.replace && d.old[oldKey] === d.replace[oldKey]) {
                var replaceKeys = Object.keys(d.replace);
                return !replaceKeys.every(function(replaceKey) {
                  return tags[replaceKey] === d.replace[replaceKey];
                });
              } else {
                return true;
              }
            }
          }
          return false;
        });
        if (matchesDeprecatedTags) {
          deprecated2.push(d);
        }
      });
      return deprecated2;
    }
  };

  // modules/osm/lanes.js
  function osmLanes(entity2) {
    if (entity2.type !== "way")
      return null;
    if (!entity2.tags.highway)
      return null;
    var tags = entity2.tags;
    var isOneWay2 = entity2.isOneWay();
    var laneCount = getLaneCount(tags, isOneWay2);
    var maxspeed = parseMaxspeed(tags);
    var laneDirections = parseLaneDirections(tags, isOneWay2, laneCount);
    var forward = laneDirections.forward;
    var backward = laneDirections.backward;
    var bothways = laneDirections.bothways;
    var turnLanes = {};
    turnLanes.unspecified = parseTurnLanes(tags["turn:lanes"]);
    turnLanes.forward = parseTurnLanes(tags["turn:lanes:forward"]);
    turnLanes.backward = parseTurnLanes(tags["turn:lanes:backward"]);
    var maxspeedLanes = {};
    maxspeedLanes.unspecified = parseMaxspeedLanes(tags["maxspeed:lanes"], maxspeed);
    maxspeedLanes.forward = parseMaxspeedLanes(tags["maxspeed:lanes:forward"], maxspeed);
    maxspeedLanes.backward = parseMaxspeedLanes(tags["maxspeed:lanes:backward"], maxspeed);
    var psvLanes = {};
    psvLanes.unspecified = parseMiscLanes(tags["psv:lanes"]);
    psvLanes.forward = parseMiscLanes(tags["psv:lanes:forward"]);
    psvLanes.backward = parseMiscLanes(tags["psv:lanes:backward"]);
    var busLanes = {};
    busLanes.unspecified = parseMiscLanes(tags["bus:lanes"]);
    busLanes.forward = parseMiscLanes(tags["bus:lanes:forward"]);
    busLanes.backward = parseMiscLanes(tags["bus:lanes:backward"]);
    var taxiLanes = {};
    taxiLanes.unspecified = parseMiscLanes(tags["taxi:lanes"]);
    taxiLanes.forward = parseMiscLanes(tags["taxi:lanes:forward"]);
    taxiLanes.backward = parseMiscLanes(tags["taxi:lanes:backward"]);
    var hovLanes = {};
    hovLanes.unspecified = parseMiscLanes(tags["hov:lanes"]);
    hovLanes.forward = parseMiscLanes(tags["hov:lanes:forward"]);
    hovLanes.backward = parseMiscLanes(tags["hov:lanes:backward"]);
    var hgvLanes = {};
    hgvLanes.unspecified = parseMiscLanes(tags["hgv:lanes"]);
    hgvLanes.forward = parseMiscLanes(tags["hgv:lanes:forward"]);
    hgvLanes.backward = parseMiscLanes(tags["hgv:lanes:backward"]);
    var bicyclewayLanes = {};
    bicyclewayLanes.unspecified = parseBicycleWay(tags["bicycleway:lanes"]);
    bicyclewayLanes.forward = parseBicycleWay(tags["bicycleway:lanes:forward"]);
    bicyclewayLanes.backward = parseBicycleWay(tags["bicycleway:lanes:backward"]);
    var lanesObj = {
      forward: [],
      backward: [],
      unspecified: []
    };
    mapToLanesObj(lanesObj, turnLanes, "turnLane");
    mapToLanesObj(lanesObj, maxspeedLanes, "maxspeed");
    mapToLanesObj(lanesObj, psvLanes, "psv");
    mapToLanesObj(lanesObj, busLanes, "bus");
    mapToLanesObj(lanesObj, taxiLanes, "taxi");
    mapToLanesObj(lanesObj, hovLanes, "hov");
    mapToLanesObj(lanesObj, hgvLanes, "hgv");
    mapToLanesObj(lanesObj, bicyclewayLanes, "bicycleway");
    return {
      metadata: {
        count: laneCount,
        oneway: isOneWay2,
        forward: forward,
        backward: backward,
        bothways: bothways,
        turnLanes: turnLanes,
        maxspeed: maxspeed,
        maxspeedLanes: maxspeedLanes,
        psvLanes: psvLanes,
        busLanes: busLanes,
        taxiLanes: taxiLanes,
        hovLanes: hovLanes,
        hgvLanes: hgvLanes,
        bicyclewayLanes: bicyclewayLanes
      },
      lanes: lanesObj
    };
  }
  function getLaneCount(tags, isOneWay2) {
    var count;
    if (tags.lanes) {
      count = parseInt(tags.lanes, 10);
      if (count > 0) {
        return count;
      }
    }
    switch (tags.highway) {
      case "trunk":
      case "motorway":
        count = isOneWay2 ? 2 : 4;
        break;
      default:
        count = isOneWay2 ? 1 : 2;
        break;
    }
    return count;
  }
  function parseMaxspeed(tags) {
    var maxspeed = tags.maxspeed;
    if (!maxspeed)
      return;
    var maxspeedRegex = /^([0-9][\.0-9]+?)(?:[ ]?(?:km\/h|kmh|kph|mph|knots))?$/;
    if (!maxspeedRegex.test(maxspeed))
      return;
    return parseInt(maxspeed, 10);
  }
  function parseLaneDirections(tags, isOneWay2, laneCount) {
    var forward = parseInt(tags["lanes:forward"], 10);
    var backward = parseInt(tags["lanes:backward"], 10);
    var bothways = parseInt(tags["lanes:both_ways"], 10) > 0 ? 1 : 0;
    if (parseInt(tags.oneway, 10) === -1) {
      forward = 0;
      bothways = 0;
      backward = laneCount;
    } else if (isOneWay2) {
      forward = laneCount;
      bothways = 0;
      backward = 0;
    } else if (isNaN(forward) && isNaN(backward)) {
      backward = Math.floor((laneCount - bothways) / 2);
      forward = laneCount - bothways - backward;
    } else if (isNaN(forward)) {
      if (backward > laneCount - bothways) {
        backward = laneCount - bothways;
      }
      forward = laneCount - bothways - backward;
    } else if (isNaN(backward)) {
      if (forward > laneCount - bothways) {
        forward = laneCount - bothways;
      }
      backward = laneCount - bothways - forward;
    }
    return {
      forward: forward,
      backward: backward,
      bothways: bothways
    };
  }
  function parseTurnLanes(tag) {
    if (!tag)
      return;
    var validValues = ["left", "slight_left", "sharp_left", "through", "right", "slight_right", "sharp_right", "reverse", "merge_to_left", "merge_to_right", "none"];
    return tag.split("|").map(function(s) {
      if (s === "")
        s = "none";
      return s.split(";").map(function(d) {
        return validValues.indexOf(d) === -1 ? "unknown" : d;
      });
    });
  }
  function parseMaxspeedLanes(tag, maxspeed) {
    if (!tag)
      return;
    return tag.split("|").map(function(s) {
      if (s === "none")
        return s;
      var m = parseInt(s, 10);
      if (s === "" || m === maxspeed)
        return null;
      return isNaN(m) ? "unknown" : m;
    });
  }
  function parseMiscLanes(tag) {
    if (!tag)
      return;
    var validValues = ["yes", "no", "designated"];
    return tag.split("|").map(function(s) {
      if (s === "")
        s = "no";
      return validValues.indexOf(s) === -1 ? "unknown" : s;
    });
  }
  function parseBicycleWay(tag) {
    if (!tag)
      return;
    var validValues = ["yes", "no", "designated", "lane"];
    return tag.split("|").map(function(s) {
      if (s === "")
        s = "no";
      return validValues.indexOf(s) === -1 ? "unknown" : s;
    });
  }
  function mapToLanesObj(lanesObj, data2, key) {
    if (data2.forward) {
      data2.forward.forEach(function(l, i2) {
        if (!lanesObj.forward[i2])
          lanesObj.forward[i2] = {};
        lanesObj.forward[i2][key] = l;
      });
    }
    if (data2.backward) {
      data2.backward.forEach(function(l, i2) {
        if (!lanesObj.backward[i2])
          lanesObj.backward[i2] = {};
        lanesObj.backward[i2][key] = l;
      });
    }
    if (data2.unspecified) {
      data2.unspecified.forEach(function(l, i2) {
        if (!lanesObj.unspecified[i2])
          lanesObj.unspecified[i2] = {};
        lanesObj.unspecified[i2][key] = l;
      });
    }
  }

  // modules/util/svg_paths_rtl_fix.js
  var import_alif_toolkit = __toModule(require_lib());
  var rtlRegex = /[\u0590-\u05FF\u0600-\u06FF\u0750-\u07BF\u08A0–\u08BF]/;
  function fixRTLTextForSvg(inputText) {
    var ret = "", rtlBuffer = [];
    var arabicRegex = /[\u0600-\u06FF]/g;
    var arabicDiacritics = /[\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06ED]/g;
    var arabicMath = /[\u0660-\u066C\u06F0-\u06F9]+/g;
    var thaanaVowel = /[\u07A6-\u07B0]/;
    var hebrewSign = /[\u0591-\u05bd\u05bf\u05c1-\u05c5\u05c7]/;
    if (arabicRegex.test(inputText)) {
      inputText = (0, import_alif_toolkit.WordShaper)(inputText);
    }
    for (var n2 = 0; n2 < inputText.length; n2++) {
      var c2 = inputText[n2];
      if (arabicMath.test(c2)) {
        ret += rtlBuffer.reverse().join("");
        rtlBuffer = [c2];
      } else {
        if (rtlBuffer.length && arabicMath.test(rtlBuffer[rtlBuffer.length - 1])) {
          ret += rtlBuffer.reverse().join("");
          rtlBuffer = [];
        }
        if ((thaanaVowel.test(c2) || hebrewSign.test(c2) || arabicDiacritics.test(c2)) && rtlBuffer.length) {
          rtlBuffer[rtlBuffer.length - 1] += c2;
        } else if (rtlRegex.test(c2) || c2.charCodeAt(0) >= 64336 && c2.charCodeAt(0) <= 65023 || c2.charCodeAt(0) >= 65136 && c2.charCodeAt(0) <= 65279) {
          rtlBuffer.push(c2);
        } else if (c2 === " " && rtlBuffer.length) {
          rtlBuffer = [rtlBuffer.reverse().join("") + " "];
        } else {
          ret += rtlBuffer.reverse().join("") + c2;
          rtlBuffer = [];
        }
      }
    }
    ret += rtlBuffer.reverse().join("");
    return ret;
  }

  // modules/core/preferences.js
  var _storage;
  try {
    _storage = localStorage;
  } catch (e3) {
  }
  _storage = _storage || function() {
    var s = {};
    return {
      getItem: function getItem(k) {
        return s[k];
      },
      setItem: function setItem(k, v) {
        return s[k] = v;
      },
      removeItem: function removeItem4(k) {
        return delete s[k];
      }
    };
  }();
  function corePreferences(k, v) {
    try {
      if (arguments.length === 1)
        return _storage.getItem(k);
      else if (v === null)
        _storage.removeItem(k);
      else
        _storage.setItem(k, v);
      return true;
    } catch (e3) {
      if (typeof console !== "undefined") {
        console.error("localStorage quota exceeded");
      }
      return false;
    }
  }

  // modules/core/custom/index.js
  var deprecated = [{
    old: {
      man_made: "dolphin"
    },
    replace: {
      man_made: "dolphin",
      "seamark:type": "mooring",
      "seamark:mooring:category": "dolphin"
    }
  }, {
    old: {
      emergency: "lifeboat_station"
    },
    replace: {
      emergency: "lifeboat_station",
      "seamark:type": "rescue_station"
    }
  }, {
    old: {
      landuse: "aquaculture"
    },
    replace: {
      landuse: "aquaculture",
      "seamark:type": "marine_farm"
    }
  }];
  var discarded = {
    "linz2osm:objectid": true,
    "LINZ2OSM:dataset": true,
    "LINZ2OSM:source_version": true,
    "LINZ2OSM:layer": true,
    "LINZ:layer": true,
    "LINZ:source_version": true,
    "LINZ:dataset": true,
    "linz:garmin_type": true,
    "linz:garmin_road_class": true,
    "linz:sufi": true,
    "linz:RoadID": true,
    womo: true,
    "womo:capacity": true,
    "womo:fee": true,
    "womo:name": true,
    "womo:nz:nr": true
  };
  var preset_presets = {
    "amenity/marae": {
      icon: "maki-town-hall",
      fields: ["name", "operator", "address", "website"],
      moreFields: ["email", "phone", "wheelchair"],
      geometry: ["point", "area"],
      tags: {
        amenity: "marae"
      },
      name: "Marae"
    },
    "natural/fumarole": {
      icon: "maki-water",
      fields: ["name"],
      geometry: ["point"],
      tags: {
        natural: "fumarole"
      },
      terms: ["fumarole", "erupting spring", "geiser", "gieser", "guyser", "hot water", "hydrogeology", "hydrothermal explosion", "steam"],
      name: "Fumarole"
    },
    "natural/sinkhole": {
      icon: "temaki-trench",
      fields: ["name"],
      geometry: ["point", "vertex"],
      tags: {
        natural: "sinkhole"
      },
      terms: ["sinkhole", "hole"],
      name: "Sinkhole"
    },
    "man_made/offshore_platform": {
      icon: "temaki-oil_well",
      fields: ["name", "seamark/platform/category", "seamark/platform/product"],
      moreFields: [],
      geometry: ["point", "vertex", "area"],
      tags: {
        "seamark:type": "platform"
      },
      addTags: {
        "seamark:type": "platform",
        man_made: "offshore_platform"
      },
      terms: ["oil rig", "offshore platform", "platform", "drilling rig", "bore", "drilling rig", "oil derrick", "oil drill", "oil horse", "oil rig", "oil pump", "petroleum well", "pumpjack"],
      name: "Offshore Platform"
    },
    "emergency/lifeboat_station": {
      icon: "temaki-boat_tour",
      fields: ["name", "operator", "seamark/rescue_station/category", "address", "building_area", "phone", "website"],
      moreFields: ["email", "fax", "gnis/feature_id", "wheelchair"],
      geometry: ["point", "area"],
      terms: ["boat rescue", "lifeboat", "rescue", "search and rescue", "life saving"],
      tags: {
        emergency: "lifeboat_station",
        "seamark:type": "rescue_station"
      },
      name: "Lifeboat Station"
    },
    "waterway/soakhole": {
      icon: "maki-circle-stroked",
      fields: ["name"],
      geometry: ["point", "vertex"],
      tags: {
        waterway: "soakhole"
      },
      terms: ["soakhole", "hole"],
      name: "Soakhole"
    },
    "waterway/sluice_gate": {
      icon: "maki-dam",
      fields: ["name"],
      geometry: ["point", "vertex"],
      tags: {
        waterway: "sluice_gate"
      },
      terms: ["sluice gate", "gate", "floodgate", "flood gate"],
      name: "Sluice Gate"
    },
    "seamark/ski_access_lane_marker": {
      icon: "temaki-silo",
      geometry: ["point", "vertex"],
      terms: ["ski lane", "Ski Access Lane", "access lane", "speed", "jetski"],
      fields: ["seamark/beacon_special_purpose/category", "seamark/beacon_special_purpose/colour", "seamark/beacon_special_purpose/colour_pattern", "seamark/beacon_special_purpose/shape", "seamark/topmark/shape", "seamark/topmark/colour"],
      tags: {
        "seamark:type": "beacon_special_purpose",
        "seamark:beacon_special_purpose:category": "recreation_zone",
        "seamark:beacon_special_purpose:colour_pattern": "horizontal",
        "seamark:beacon_special_purpose:shape": "pile"
      },
      addTags: {
        "seamark:beacon_special_purpose:colour": "black;orange;black;orange"
      },
      name: "Ski Access Lane Marker"
    },
    "seamark/ski_access_lane": {
      icon: "temaki-boat",
      geometry: ["area"],
      terms: ["ski lane", "Ski Access Lane", "access lane", "speed", "jetski"],
      tags: {
        "seamark:restricted_area:category": "water_skiing",
        "seamark:type": "restricted_area"
      },
      name: "Ski Access Lane"
    },
    "seamark/seaplane_landing_area": {
      icon: "maki-airport",
      fields: ["ref", "operator"],
      geometry: ["point", "area"],
      terms: ["seaplane", "seaplane landing", "seaport", "airport", "water runway"],
      tags: {
        "seamark:type": "seaplane_landing_area"
      },
      name: "Seaplane Landing Area"
    },
    "seamark/rocks": {
      icon: "temaki-boulder2",
      fields: ["name", "seamark/rock/water_level"],
      geometry: ["point", "area"],
      terms: ["boulder", "stone", "rock"],
      tags: {
        "seamark:type": "rock"
      },
      name: "Marine Rock"
    },
    "seamark/recommended_track": {
      icon: "temaki-ferry",
      fields: ["seamark/recommended_track/category", "seamark/recommended_track/traffic_flow"],
      geometry: ["line"],
      terms: ["navigation line", "line", "marine", "route", "boat"],
      tags: {
        "seamark:type": "recommended_track"
      },
      name: "Recommended Maritime Track"
    },
    "seamark/pile": {
      icon: "temaki-silo",
      fields: ["seamark/pile/category"],
      geometry: ["point", "vertex"],
      terms: ["pile"],
      tags: {
        "seamark:type": "pile"
      },
      name: "Pile"
    },
    "seamark/obstruction": {
      icon: "maki-roadblock",
      fields: ["seamark/obstruction/category", "seamark/obstruction/water_level"],
      moreFields: ["seamark/obstruction/surface", "depth", "depth/exposition", "depth/source_quality", "depth/technique", "depth/accuracy"],
      geometry: ["point", "area"],
      terms: ["obstruction", "obstacle", "hazard", "block", "barrier"],
      tags: {
        "seamark:type": "obstruction"
      },
      name: "Marine Obstruction"
    },
    "seamark/navigation_line": {
      icon: "maki-lighthouse",
      fields: ["seamark/navigation_line/category"],
      geometry: ["line"],
      terms: ["navigation line", "line", "marine", "route", "boat"],
      tags: {
        "seamark:type": "navigation_line"
      },
      name: "Maritime Navigation Line"
    },
    "seamark/mooring_dolphin": {
      icon: "temaki-horn_cleat",
      fields: ["ref", "operator", "seamark/mooring/category"],
      moreFields: ["seamark/mooring/shape", "seamark/mooring/colour"],
      geometry: ["point", "vertex"],
      terms: ["dolphin", "pile", "bollard", "buoy", "post"],
      tags: {
        "seamark:type": "mooring",
        "seamark:mooring:category": "dolphin"
      },
      addTags: {
        man_made: "dolphin"
      },
      name: "Mooring Dolphin"
    },
    "seamark/buoy_special_purpose": {
      icon: "temaki-buoy",
      fields: ["seamark/buoy_special_purpose/category", "seamark/buoy_special_purpose/colour", "seamark/buoy_special_purpose/colour_pattern", "seamark/buoy_special_purpose/shape", "seamark/topmark/shape", "seamark/topmark/colour"],
      geometry: ["point", "vertex"],
      terms: ["buoy", "special buoy", "danger buoy"],
      tags: {
        "seamark:type": "buoy_special_purpose"
      },
      name: "Special Purpose Buoy"
    },
    "seamark/buoy_isolated_danger": {
      icon: "temaki-buoy",
      fields: ["seamark/buoy_isolated_danger/colour", "seamark/buoy_isolated_danger/colour_pattern", "seamark/buoy_isolated_danger/shape", "seamark/topmark/shape", "seamark/topmark/colour"],
      geometry: ["point", "vertex"],
      terms: ["buoy", "danger buoy"],
      tags: {
        "seamark:type": "buoy_isolated_danger"
      },
      name: "Danger Buoy"
    },
    "seamark/beacon_special_purpose": {
      icon: "maki-communications-tower",
      fields: ["seamark/beacon_special_purpose/category", "seamark/beacon_special_purpose/colour", "seamark/beacon_special_purpose/colour_pattern", "seamark/beacon_special_purpose/shape", "seamark/topmark/shape", "seamark/topmark/colour"],
      geometry: ["point", "vertex"],
      terms: ["beacon", "special beacon", "danger beacon", "channel marker"],
      tags: {
        "seamark:type": "beacon_special_purpose"
      },
      name: "Generic Nautical Marker"
    },
    "seamark/anchorage": {
      icon: "maki-harbor",
      fields: ["seamark/anchorage/category", "seamark/anchorage/status"],
      moreFields: ["seamark/anchorage/period_start", "seamark/anchorage/period_end"],
      geometry: ["point", "area"],
      terms: ["dolphin", "pile", "bollard", "buoy", "post"],
      tags: {
        "seamark:type": "anchorage"
      },
      name: "Anchorage Area"
    }
  };
  var preset_fields = {
    "NZGB Place ID": {
      key: "ref:linz:place_id",
      type: "identifier",
      label: "NZGB Place ID",
      urlFormat: "http://gazetteer.linz.govt.nz/place/{value}",
      pattern: "^[0-9;]{1,}$",
      universal: true
    },
    "seamark/topmark/colour": {
      key: "seamark:topmark:colour",
      type: "combo",
      label: "Topmark Colour",
      strings: {
        options: {
          white: "White",
          black: "Black",
          red: "Red",
          green: "Green",
          blue: "Blue",
          yellow: "Yellow",
          grey: "Grey",
          brown: "Brown",
          amber: "Amber",
          violet: "Violet",
          orange: "Orange",
          magenta: "Magenta",
          pink: "Pink"
        }
      }
    },
    "seamark/topmark/shape": {
      key: "seamark:topmark:shape",
      type: "combo",
      label: "Topmark Shape",
      strings: {
        options: {
          "cone, point up": "Cone, point up",
          "cone, point down": "Cone, point down",
          sphere: "Sphere",
          "2 spheres": "2 spheres",
          cylinder: "Cylinder (can)",
          board: "Board",
          "x-shape": "X-shape (St. Andrew's cross)",
          cross: "Upright cross (St George's cross)",
          "cube, point up": "Cube, point up",
          "2 cones point together": "2 cones, point to point",
          "2 cones base together": "2 cones, base to base",
          rhombus: "Rhombus (diamond)",
          "2 cones up": "2 cones (points upward)",
          "2 cones down": "2 cones (points downward)",
          "besom, point up": "Besom, point up (broom or perch)",
          "besom, point down": "Besom, point down (broom or perch)",
          flag: "Flag",
          "sphere over rhombus": "Sphere over rhombus",
          square: "Square",
          "rectangle, horizontal": "Rectangle, horizontal",
          "rectangle, vertical": "Rectangle, vertical",
          "trapezium, up": "Trapezium, up",
          "trapezium, down": "Trapezium, down",
          "triangle, point up": "Triangle, point up",
          "triangle, point down": "Triangle, point down",
          circle: "Circle",
          "2 upright crosses": "Two upright crosses (one over the other)",
          "t-shape": "T-shape",
          "triangle, point up over circle": "Triangle pointing up over a circle",
          "upright cross over circle": "Upright cross over a circle",
          "rhombus over circle": "Rhombus over a circle",
          "circle over triangle, point up	": "Circle over a triangle pointing up",
          other: "Other shape (see INFORM)"
        }
      }
    },
    "historic/wreck/type": {
      key: "wreck:type",
      type: "combo",
      label: "Wreck Type"
    },
    "seamark/anchorage/category": {
      key: "seamark:anchorage:category",
      type: "combo",
      label: "Category",
      strings: {
        options: {
          unrestricted: "Unrestricted anchorage",
          deep_water: "Deep water anchorage",
          tanker: "Tanker anchorage",
          explosives: "Explosives anchorage",
          quarantine: "Quarantine anchorage",
          seaplane: "Sea-plane anchorage",
          small_craft: "Small craft anchorage",
          small_craft_mooring: "Small craft mooring area",
          "24_hour": "Anchorage for periods up to 24 hours",
          limited_period: "Anchorage for a limited period of time",
          pushing: "Anchorage for pushing-navigation vessels",
          non_pushing: "Anchorage for other vessels than pushing-navigation vessels",
          dry_cargo: "Anchorage for dry cargo vessels",
          raft: "Anchorage for rafts"
        }
      }
    },
    "seamark/anchorage/period_end": {
      key: "seamark:anchorage:period_end",
      type: "text",
      label: "Active Period End",
      placeholder: "YYYY-MM-DD"
    },
    "seamark/anchorage/period_start": {
      key: "seamark:anchorage:period_start",
      type: "text",
      label: "Active Period Start",
      placeholder: "YYYY-MM-DD"
    },
    "seamark/anchorage/status": {
      key: "seamark:anchorage:status",
      type: "combo",
      label: "Status",
      strings: {
        options: {
          permanent: "Permanent",
          occasional: "Occasional",
          recommended: "Recommended",
          not_in_use: "Not in use",
          intermittent: "Periodic/intermittent",
          reserved: "Reserved",
          temporary: "Temporary",
          "private": "Private",
          mandatory: "Mandatory",
          destroyed: "Destroyed/ruined",
          extinguished: "Extinguished",
          illuminated: "Illuminated",
          historic: "Historic",
          "public": "Public",
          synchronized: "Synchronized",
          watched: "Watched",
          unwatched: "Un-watched",
          existence_doubtful: "Existence doubtful",
          on_request: " on request",
          drop_away: "Drop away",
          rising: "Rising",
          increasing: "Increasing",
          decreasing: "Decreasing",
          strong: "Strong",
          good: "Good",
          moderate: "Moderate",
          poor: "Poor"
        }
      }
    },
    "depth/accuracy": {
      key: "depth:accuracy",
      type: "number",
      label: "Depth Accuracy (Meters)"
    },
    "depth/exposition": {
      key: "depth:exposition",
      type: "combo",
      label: "Depth Exposition",
      strings: {
        options: {
          within_range: "Within the range of depth of the surrounding depth area",
          shoaler: "Shoaler than the range of depth of the surrounding depth area",
          deeper: "Deeper than the range of depth of the surrounding depth area"
        }
      }
    },
    "depth/source_quality": {
      key: "depth:source_quality",
      type: "combo",
      label: "Depth Quality",
      strings: {
        options: {
          known: "Depth known",
          unknown: "Depth unknown",
          doubtful: "Doubtful sounding",
          unreliable: "Unreliable sounding",
          no_bottom: "No bottom found at value shown",
          least_depth_known: "Least depth known",
          least_depth_unknown: "Least depth unknown, safe clearance at value shown",
          not_surveyed: "Value reported (not surveyed)",
          not_confirmed: "Value reported (not confirmed)",
          maintained: "Maintained depth",
          not_maintained: "Not regularly maintained"
        }
      }
    },
    "depth/technique": {
      key: "depth:technique",
      type: "combo",
      label: "Depth Sounding Technique",
      strings: {
        options: {
          echo: "Found by echo- sounder",
          sonar: "Swept by side-scan sonar",
          "multi-beam": "Found by multi-beam",
          diver: "Found by diver",
          "lead-line": "Found by lead-line",
          "wire-drag": "Swept by wire-drag",
          laser: "Found by laser",
          acoustic: "Swept by vertical acoustic system",
          electromagnetic: "Found by electromagnetic sensor",
          photogrammetry: "Photogrammetry",
          satellite_imagery: "Satellite imagery",
          levelling: "Found by levelling",
          computer_generated: "Computer generated"
        }
      }
    },
    "seamark/beacon_special_purpose/category": {
      key: "seamark:beacon_special_purpose:category",
      type: "combo",
      label: "Mark Category",
      strings: {
        options: {
          firing_danger_area: "Firing danger mark",
          target: "Target mark",
          marker_ship: "Marker ship mark",
          degaussing_range: "Degaussing range mark",
          barge: "Barge mark",
          cable: "Cable mark",
          spoil_ground: "Spoil ground mark",
          outfall: "Outfall mark",
          odas: "ODAS",
          recording: "Recording mark",
          seaplane_anchorage: "Seaplane anchorage mark",
          recreation_zone: "Recreation zone mark",
          "private": "Private mark",
          mooring: "Mooring mark",
          lanby: "LANBY",
          leading: "Leading mark",
          measured_distance: "Measured distance mark",
          notice: "Notice mark",
          tss: "TSS mark",
          no_anchoring: "Anchoring prohibited mark",
          no_berthing: "Berthing prohibited mark",
          no_overtaking: "Overtaking prohibited mark",
          "no_two-way_traffic": "Two-way traffic prohibited mark",
          reduced_wake: "Reduced wake mark",
          speed_limit: "Speed limit mark",
          stop: "Stop mark",
          warning: "General warning mark",
          sound_ship_siren: "Sound ships siren mark",
          restricted_vertical_clearance: "Restricted vertical clearance mark",
          maximum_vessel_draught: "Maximum vessel's draught mark",
          restricted_horizontal_clearance: "Restricted horizontal clearance mark",
          strong_current: "Strong current warning mark",
          berthing: "Berthing permitted mark",
          overhead_power_cable: "Overhead power cable mark",
          channel_edge_gradient: "Channel edge gradient mark",
          telephone: "Telephone mark",
          ferry_crossing: "Ferry crossing mark",
          marine_traffic_lights: "Marine traffic lights",
          pipeline: "Pipeline mark",
          anchorage: "Anchorage mark",
          clearing: "Clearing mark",
          control: "Control mark",
          diving: "Diving mark",
          refuge_beacon: "Refuge beacon",
          foul_ground: "Foul ground mark",
          yachting: "Yachting mark",
          heliport: "Heliport mark",
          gps: "GPS mark",
          seaplane_landing: "Seaplane landing mark",
          no_entry: "Entry prohibited mark",
          work_in_progress: "Work in progress mark",
          unknown_purpose: "Mark with unknown purpose",
          wellhead: "Wellhead mark",
          channel_separation: "Channel separation mark",
          marine_farm: "Marine farm mark",
          artificial_reef: "Artificial reef mark",
          ice: "Ice Mark",
          nature_reserve: "Nature Reserve Mark",
          fish_aggregator: "Fish Aggregating Device",
          wreck: "Wreck mark",
          customs: "Customs Mark",
          causeway: "Causeway Mark",
          wave_recorder: "Wave Recorder",
          no_jetski: "Jetski Prohibited"
        }
      }
    },
    "seamark/beacon_special_purpose/colour_pattern": {
      key: "seamark:beacon_special_purpose:colour_pattern",
      type: "combo",
      label: "Marker Colour Pattern",
      strings: {
        options: {
          horizontal: "Horizontal stripes",
          vertical: "Vertical stripes",
          diagonal: "Diagonal stripes",
          squared: "Squared",
          stripes: "Stripes (direction unknown)",
          border: "Border stripe",
          cross: "Vertical cross",
          saltire: "Diagonal cross"
        }
      }
    },
    "seamark/beacon_special_purpose/colour": {
      key: "seamark:beacon_special_purpose:colour",
      type: "semiCombo",
      label: "Marker Colour",
      strings: {
        options: {
          white: "White",
          black: "Black",
          red: "Red",
          green: "Green",
          blue: "Blue",
          yellow: "Yellow",
          grey: "Grey",
          brown: "Brown",
          amber: "Amber",
          violet: "Violet",
          orange: "Orange",
          magenta: "Magenta",
          pink: "Pink"
        }
      }
    },
    "seamark/beacon_special_purpose/shape": {
      key: "seamark:beacon_special_purpose:shape",
      type: "combo",
      label: "Structure",
      strings: {
        options: {
          pole: "Pole",
          withy: "Withy",
          tower: "Beacon tower",
          lattice: "Lattice beacon",
          pile: "Pile beacon",
          cairn: "Cairn",
          buoyant: "Buoyant beacon"
        }
      }
    },
    "seamark/buoy_isolated_danger/colour_pattern": {
      key: "seamark:buoy_isolated_danger:colour_pattern",
      type: "combo",
      label: "Buoy Colour Pattern",
      strings: {
        options: {
          horizontal: "Horizontal stripes",
          vertical: "Vertical stripes",
          diagonal: "Diagonal stripes",
          squared: "Squared",
          stripes: "Stripes (direction unknown)",
          border: "Border stripe",
          cross: "Vertical cross",
          saltire: "Diagonal cross"
        }
      }
    },
    "seamark/buoy_isolated_danger/colour": {
      key: "seamark:buoy_isolated_danger:colour",
      type: "semiCombo",
      label: "Buoy Colour",
      strings: {
        options: {
          white: "White",
          black: "Black",
          red: "Red",
          green: "Green",
          blue: "Blue",
          yellow: "Yellow",
          grey: "Grey",
          brown: "Brown",
          amber: "Amber",
          violet: "Violet",
          orange: "Orange",
          magenta: "Magenta",
          pink: "Pink"
        }
      }
    },
    "seamark/buoy_isolated_danger/shape": {
      key: "seamark:buoy_isolated_danger:shape",
      type: "combo",
      label: "Buoy Shape",
      strings: {
        options: {
          conical: "Conical (nun, ogival)",
          can: "Can (cylindrical)",
          spherical: "Spherical",
          pillar: "Pillar",
          spar: "Spar (spindle)",
          barrel: "Barrel (tun)",
          "super-buoy": "Super-buoy",
          ice_buoy: "Ice buoy"
        }
      }
    },
    "seamark/buoy_special_purpose/category": {
      key: "seamark:buoy_special_purpose:category",
      type: "combo",
      label: "Buoy Category",
      strings: {
        options: {
          firing_danger_area: "Firing danger mark",
          target: "Target mark",
          marker_ship: "Marker ship mark",
          degaussing_range: "Degaussing range mark",
          barge: "Barge mark",
          cable: "Cable mark",
          spoil_ground: "Spoil ground mark",
          outfall: "Outfall mark",
          odas: "ODAS",
          recording: "Recording mark",
          seaplane_anchorage: "Seaplane anchorage mark",
          recreation_zone: "Recreation zone mark",
          "private": "Private mark",
          mooring: "Mooring mark",
          lanby: "LANBY",
          leading: "Leading mark",
          measured_distance: "Measured distance mark",
          notice: "Notice mark",
          tss: "TSS mark",
          no_anchoring: "Anchoring prohibited mark",
          no_berthing: "Berthing prohibited mark",
          no_overtaking: "Overtaking prohibited mark",
          "no_two-way_traffic": "Two-way traffic prohibited mark",
          reduced_wake: "Reduced wake mark",
          speed_limit: "Speed limit mark",
          stop: "Stop mark",
          warning: "General warning mark",
          sound_ship_siren: "Sound ships siren mark",
          restricted_vertical_clearance: "Restricted vertical clearance mark",
          maximum_vessel_draught: "Maximum vessel's draught mark",
          restricted_horizontal_clearance: "Restricted horizontal clearance mark",
          strong_current: "Strong current warning mark",
          berthing: "Berthing permitted mark",
          overhead_power_cable: "Overhead power cable mark",
          channel_edge_gradient: "Channel edge gradient mark",
          telephone: "Telephone mark",
          ferry_crossing: "Ferry crossing mark",
          marine_traffic_lights: "Marine traffic lights",
          pipeline: "Pipeline mark",
          anchorage: "Anchorage mark",
          clearing: "Clearing mark",
          control: "Control mark",
          diving: "Diving mark",
          refuge_beacon: "Refuge beacon",
          foul_ground: "Foul ground mark",
          yachting: "Yachting mark",
          heliport: "Heliport mark",
          gps: "GPS mark",
          seaplane_landing: "Seaplane landing mark",
          no_entry: "Entry prohibited mark",
          work_in_progress: "Work in progress mark",
          unknown_purpose: "Mark with unknown purpose",
          wellhead: "Wellhead mark",
          channel_separation: "Channel separation mark",
          marine_farm: "Marine farm mark",
          artificial_reef: "Artificial reef mark",
          ice: "Ice Mark",
          nature_reserve: "Nature Reserve Mark",
          fish_aggregator: "Fish Aggregating Device",
          wreck: "Wreck mark",
          customs: "Customs Mark",
          causeway: "Causeway Mark",
          wave_recorder: "Wave Recorder",
          no_jetski: "Jetski Prohibited"
        }
      }
    },
    "seamark/buoy_special_purpose/colour_pattern": {
      key: "seamark:buoy_special_purpose:colour_pattern",
      type: "combo",
      label: "Buoy Colour Pattern",
      strings: {
        options: {
          horizontal: "Horizontal stripes",
          vertical: "Vertical stripes",
          diagonal: "Diagonal stripes",
          squared: "Squared",
          stripes: "Stripes (direction unknown)",
          border: "Border stripe",
          cross: "Vertical cross",
          saltire: "Diagonal cross"
        }
      }
    },
    "seamark/buoy_special_purpose/colour": {
      key: "seamark:buoy_special_purpose:colour",
      type: "semiCombo",
      label: "Buoy Colour",
      strings: {
        options: {
          white: "White",
          black: "Black",
          red: "Red",
          green: "Green",
          blue: "Blue",
          yellow: "Yellow",
          grey: "Grey",
          brown: "Brown",
          amber: "Amber",
          violet: "Violet",
          orange: "Orange",
          magenta: "Magenta",
          pink: "Pink"
        }
      }
    },
    "seamark/buoy_special_purpose/shape": {
      key: "seamark:buoy_special_purpose:shape",
      type: "combo",
      label: "Buoy Shape",
      strings: {
        options: {
          conical: "Conical (nun, ogival)",
          can: "Can (cylindrical)",
          spherical: "Spherical",
          pillar: "Pillar",
          spar: "Spar (spindle)",
          barrel: "Barrel (tun)",
          "super-buoy": "Super-buoy",
          ice_buoy: "Ice buoy"
        }
      }
    },
    "seamark/mooring/colour": {
      key: "seamark:mooring:colour",
      type: "combo",
      label: "Colour",
      strings: {
        options: {
          white: "White",
          black: "Black",
          red: "Red",
          green: "Green",
          blue: "Blue",
          yellow: "Yellow",
          grey: "Grey",
          brown: "Brown",
          amber: "Amber",
          violet: "Violet",
          orange: "Orange",
          magenta: "Magenta",
          pink: "Pink"
        }
      }
    },
    "seamark/mooring/shape": {
      key: "seamark:mooring:shape",
      type: "combo",
      label: "Shape",
      strings: {
        options: {
          conical: "Conical (nun, ogival)",
          can: "Can (cylindrical)",
          spherical: "Spherical",
          pillar: "Pillar",
          spar: "Spar (spindle)",
          barrel: "Barrel (tun)",
          "super-buoy": "Super-buoy",
          ice_buoy: "Ice buoy"
        }
      }
    },
    "seamark/navigation_line/category": {
      key: "seamark:navigation_line:category",
      type: "combo",
      label: "Category",
      strings: {
        options: {
          clearing: "Clearing line",
          transit: "Transit line",
          leading: "Leading line bearing a recommended track"
        }
      }
    },
    "seamark/obstruction/category": {
      key: "seamark:obstruction:category",
      type: "combo",
      label: "Category",
      strings: {
        options: {
          stump: "Snag/stump",
          wellhead: "Wellhead",
          diffuser: "Diffuser",
          crib: "Crib",
          fish_haven: "Fish haven",
          foul_area: "Foul area",
          foul_ground: "Foul ground",
          ice_boom: "Ice boom",
          ground_tackle: "Ground tackle",
          boom: "Boom"
        }
      }
    },
    "seamark/obstruction/surface": {
      key: "seamark:obstruction:surface",
      type: "combo",
      label: "Obstruction Surface",
      strings: {
        options: {
          mud: "Mud",
          clay: "Clay",
          silt: "Silt",
          sand: "Sand",
          stone: "Stone",
          gravel: "Gravel",
          pebbles: "Pebbles",
          cobbles: "Cobbles",
          rock: "Rock",
          marsh: "Marsh",
          lava: "Lava",
          snow: "Snow",
          ice: "Ice",
          coral: "Coral",
          swamp: "Swamp",
          bog: "Bog/moor",
          shells: "Shells",
          boulder: "Boulder"
        }
      }
    },
    "seamark/obstruction/water_level": {
      key: "seamark:obstruction:water_level",
      type: "combo",
      label: "Water Level",
      strings: {
        options: {
          "part-submerged": "Partly submerged at high water",
          dry: "Always dry",
          submerged: "Always under water/submerged",
          covers: "Covers and uncovers",
          awash: "Awash",
          floods: "Subject to inundation or flooding",
          floating: "Floating",
          above_mwl: "Above mean water level",
          below_mwl: "Below mean water level"
        }
      }
    },
    "seamark/pile/category": {
      key: "seamark:pile:category",
      type: "combo",
      label: "Category",
      strings: {
        options: {
          stake: "Stake",
          snag: "Snag",
          post: "Post",
          tripodal: "Tripodal"
        }
      }
    },
    "seamark/platform/category": {
      key: "seamark:platform:category",
      type: "combo",
      label: "Category",
      strings: {
        options: {
          oil: "Oil derrick/rig",
          production: "Production platform",
          observation: "Observation/research platform",
          alp: "Articulated loading platform (alp)",
          salm: "Single anchor leg mooring (salm)",
          mooring: "Mooring tower",
          artificial_island: "Artificial island",
          fpso: "FPSO: floating production, storage and off-loading vessel",
          accommodation: "Accommodation platform",
          nccb: "NCCB: navigation, communication and control buoy"
        }
      }
    },
    "seamark/platform/product": {
      key: "seamark:platform:product",
      type: "semiCombo",
      label: "Product",
      strings: {
        options: {
          oil: "Oil",
          gas: "Gas",
          water: "Water",
          stone: "Stone",
          coal: "Coal",
          ore: "Ore",
          chemicals: "Chemicals",
          drinking_water: "Drinking water",
          milk: "Milk",
          bauxite: "Bauxite",
          coke: "Coke",
          iron_ingots: "Iron ingots",
          salt: "Salt",
          sand: "Sand",
          timber: "Timber",
          sawdust: "Sawdust/wood chips",
          "scrap metal": "Scrap metal",
          lng: "Liquified natural gas (LNG)",
          lpg: "Liquified petroleum gas (LPG)",
          wine: "Wine",
          cement: "Cement",
          grain: "Grain"
        }
      }
    },
    "seamark/recommended_track/category": {
      key: "seamark:recommended_track:category",
      type: "combo",
      label: "Category",
      strings: {
        options: {
          fixed_marks: "Based on a system of fixed marks",
          no_fixed_marks: "Not based on a system of fixed marks"
        }
      }
    },
    "seamark/recommended_track/traffic_flow": {
      key: "seamark:recommended_track:traffic_flow",
      type: "combo",
      label: "Traffic Flow",
      strings: {
        options: {
          inbound: "Inbound",
          outbound: "Outbound",
          "one-way": "One-way",
          "two-way": "Two-way"
        }
      }
    },
    "seamark/rescue_station/category": {
      key: "seamark:rescue_station:category",
      type: "semiCombo",
      label: "Amenities",
      strings: {
        options: {
          lifeboat: "Lifeboat (on Land)",
          lifeboat_on_mooring: "Lifeboat (at a Mooring)",
          radio: "Radio",
          first_aid: "First aid",
          seaplane: "Seaplane",
          aircraft: "Aircraft",
          hovercraft: "Hovercraft",
          refuge_shipwrecked: "Shipwreck Refuge",
          refuge_intertidal: " Intertidal Refuge",
          tug: "Salvage tug"
        }
      }
    },
    "seamark/rock/water_level": {
      key: "seamark:rock:water_level",
      type: "combo",
      label: "Water Level",
      strings: {
        options: {
          "part-submerged": "Partly submerged at high water",
          dry: "Always dry",
          submerged: "Always under water/submerged",
          covers: "Covers and uncovers",
          awash: "Awash",
          floods: "Subject to inundation or flooding",
          floating: "Floating",
          above_mwl: "Above mean water level",
          below_mwl: "Below mean water level"
        }
      }
    }
  };
  var customData = {
    deprecated: deprecated,
    discarded: discarded,
    preset_presets: preset_presets,
    preset_fields: preset_fields
  };

  // modules/core/file_fetcher.js
  var _mainFileFetcher = coreFileFetcher();
  function coreFileFetcher() {
    var _this = {};
    var _inflight4 = {};
    var _fileMap = {
      "address_formats": "data/address_formats.min.json",
      "deprecated": "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/deprecated.min.json",
      "discarded": "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/discarded.min.json",
      "imagery": "data/imagery.min.json",
      "intro_graph": "data/intro_graph.min.json",
      "intro_rapid_graph": "data/intro_rapid_graph.min.json",
      "keepRight": "data/keepRight.min.json",
      "languages": "data/languages.min.json",
      "locales": "locales/index.min.json",
      "oci_defaults": "https://cdn.jsdelivr.net/npm/osm-community-index@5.1/dist/defaults.min.json",
      "oci_features": "https://cdn.jsdelivr.net/npm/osm-community-index@5.1/dist/featureCollection.min.json",
      "oci_resources": "https://cdn.jsdelivr.net/npm/osm-community-index@5.1/dist/resources.min.json",
      "preset_categories": "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/preset_categories.min.json",
      "preset_defaults": "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/preset_defaults.min.json",
      "preset_fields": "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/fields.min.json",
      "preset_presets": "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/presets.min.json",
      "phone_formats": "data/phone_formats.min.json",
      "qa_data": "data/qa_data.min.json",
      "shortcuts": "data/shortcuts.min.json",
      "territory_languages": "data/territory_languages.min.json",
      "wmf_sitematrix": "https://cdn.jsdelivr.net/npm/wmf-sitematrix@0.1/wikipedia.min.json"
    };
    var _cachedData = {};
    _this.cache = function() {
      return _cachedData;
    };
    _this.get = function(which) {
      if (_cachedData[which]) {
        return Promise.resolve(_cachedData[which]);
      }
      var file = _fileMap[which];
      var url = file && _this.asset(file);
      if (!url) {
        return Promise.reject('Unknown data file for "'.concat(which, '"'));
      }
      var prom = _inflight4[url];
      if (!prom) {
        _inflight4[url] = prom = fetch(url).then(function(response) {
          if (!response.ok && response.status !== 0 || !response.json) {
            throw new Error(response.status + " " + response.statusText);
          }
          if (response.status === 204 || response.status === 205)
            return;
          return response.json();
        }).then(function(original) {
          var custom = customData[which];
          if (!custom)
            return original;
          if (Array.isArray(original)) {
            return [].concat(_toConsumableArray(original), _toConsumableArray(custom));
          } else {
            return Object.assign({}, original, custom);
          }
        }).then(function(result6) {
          delete _inflight4[url];
          if (!result6) {
            throw new Error('No data loaded for "'.concat(which, '"'));
          }
          _cachedData[which] = result6;
          return result6;
        }).catch(function(err) {
          delete _inflight4[url];
          throw err;
        });
      }
      return prom;
    };
    _this.fileMap = function(val) {
      if (!arguments.length)
        return _fileMap;
      _fileMap = val;
      return _this;
    };
    var _assetPath = "";
    _this.assetPath = function(val) {
      if (!arguments.length)
        return _assetPath;
      _assetPath = val;
      return _this;
    };
    var _assetMap = {};
    _this.assetMap = function(val) {
      if (!arguments.length)
        return _assetMap;
      _assetMap = val;
      return _this;
    };
    _this.asset = function(val) {
      if (/^http(s)?:\/\//i.test(val))
        return val;
      var filename = _assetPath + val;
      return _assetMap[filename] || filename;
    };
    return _this;
  }

  // node_modules/@ideditor/country-coder/dist/country-coder.mjs
  init_typeof();
  var import_which_polygon = __toModule(require_which_polygon());
  var type = "FeatureCollection";
  var features = [{
    type: "Feature",
    properties: {
      wikidata: "Q21",
      nameEn: "England",
      aliases: ["GB-ENG"],
      country: "GB",
      groups: ["Q23666", "Q3336843", "154", "150", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-6.03913, 51.13217], [-7.74976, 48.64773], [1.17405, 50.74239], [2.18458, 51.52087], [2.56575, 51.85301], [0.792, 57.56437], [-2.30613, 55.62698], [-2.17058, 55.45916], [-2.6095, 55.28488], [-2.63532, 55.19452], [-3.02906, 55.04606], [-3.09361, 54.94924], [-3.38407, 54.94278], [-4.1819, 54.57861], [-3.5082, 53.54318], [-3.08228, 53.25526], [-3.03675, 53.25092], [-2.92329, 53.19383], [-2.92022, 53.17685], [-2.98598, 53.15589], [-2.90649, 53.10964], [-2.87469, 53.12337], [-2.89131, 53.09374], [-2.83133, 52.99184], [-2.7251, 52.98389], [-2.72221, 52.92969], [-2.80549, 52.89428], [-2.85897, 52.94487], [-2.92401, 52.93836], [-2.97243, 52.9651], [-3.13576, 52.895], [-3.15744, 52.84947], [-3.16105, 52.79599], [-3.08734, 52.77504], [-3.01001, 52.76636], [-2.95581, 52.71794], [-3.01724, 52.72083], [-3.04398, 52.65435], [-3.13648, 52.58208], [-3.12926, 52.5286], [-3.09746, 52.53077], [-3.08662, 52.54811], [-3.00929, 52.57774], [-2.99701, 52.551], [-3.03603, 52.49969], [-3.13359, 52.49174], [-3.22971, 52.45344], [-3.22754, 52.42526], [-3.04687, 52.34504], [-2.95364, 52.3501], [-2.99701, 52.323], [-3.00785, 52.2753], [-3.09289, 52.20546], [-3.12638, 52.08114], [-2.97111, 51.90456], [-2.8818, 51.93196], [-2.78742, 51.88833], [-2.74277, 51.84367], [-2.66234, 51.83555], [-2.66336, 51.59504], [-3.20563, 51.31615], [-6.03913, 51.13217]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q22",
      nameEn: "Scotland",
      aliases: ["GB-SCT"],
      country: "GB",
      groups: ["Q23666", "Q3336843", "154", "150", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[0.792, 57.56437], [-0.3751, 61.32236], [-14.78497, 57.60709], [-6.82333, 55.83103], [-4.69044, 54.3629], [-3.38407, 54.94278], [-3.09361, 54.94924], [-3.02906, 55.04606], [-2.63532, 55.19452], [-2.6095, 55.28488], [-2.17058, 55.45916], [-2.30613, 55.62698], [0.792, 57.56437]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q25",
      nameEn: "Wales",
      aliases: ["GB-WLS"],
      country: "GB",
      groups: ["Q23666", "Q3336843", "154", "150", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-3.5082, 53.54318], [-5.37267, 53.63269], [-6.03913, 51.13217], [-3.20563, 51.31615], [-2.66336, 51.59504], [-2.66234, 51.83555], [-2.74277, 51.84367], [-2.78742, 51.88833], [-2.8818, 51.93196], [-2.97111, 51.90456], [-3.12638, 52.08114], [-3.09289, 52.20546], [-3.00785, 52.2753], [-2.99701, 52.323], [-2.95364, 52.3501], [-3.04687, 52.34504], [-3.22754, 52.42526], [-3.22971, 52.45344], [-3.13359, 52.49174], [-3.03603, 52.49969], [-2.99701, 52.551], [-3.00929, 52.57774], [-3.08662, 52.54811], [-3.09746, 52.53077], [-3.12926, 52.5286], [-3.13648, 52.58208], [-3.04398, 52.65435], [-3.01724, 52.72083], [-2.95581, 52.71794], [-3.01001, 52.76636], [-3.08734, 52.77504], [-3.16105, 52.79599], [-3.15744, 52.84947], [-3.13576, 52.895], [-2.97243, 52.9651], [-2.92401, 52.93836], [-2.85897, 52.94487], [-2.80549, 52.89428], [-2.72221, 52.92969], [-2.7251, 52.98389], [-2.83133, 52.99184], [-2.89131, 53.09374], [-2.87469, 53.12337], [-2.90649, 53.10964], [-2.98598, 53.15589], [-2.92022, 53.17685], [-2.92329, 53.19383], [-3.03675, 53.25092], [-3.08228, 53.25526], [-3.5082, 53.54318]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q26",
      nameEn: "Northern Ireland",
      aliases: ["GB-NIR"],
      country: "GB",
      groups: ["Q22890", "Q3336843", "154", "150", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-6.34755, 55.49206], [-7.2471, 55.06933], [-7.34464, 55.04688], [-7.4033, 55.00391], [-7.40004, 54.94498], [-7.44404, 54.9403], [-7.4473, 54.87003], [-7.47626, 54.83084], [-7.54508, 54.79401], [-7.54671, 54.74606], [-7.64449, 54.75265], [-7.75041, 54.7103], [-7.83352, 54.73854], [-7.93293, 54.66603], [-7.70315, 54.62077], [-7.8596, 54.53671], [-7.99812, 54.54427], [-8.04538, 54.48941], [-8.179, 54.46763], [-8.04555, 54.36292], [-7.87101, 54.29299], [-7.8596, 54.21779], [-7.81397, 54.20159], [-7.69501, 54.20731], [-7.55812, 54.12239], [-7.4799, 54.12239], [-7.44567, 54.1539], [-7.32834, 54.11475], [-7.30553, 54.11869], [-7.34005, 54.14698], [-7.29157, 54.17191], [-7.28017, 54.16714], [-7.29687, 54.1354], [-7.29493, 54.12013], [-7.26316, 54.13863], [-7.25012, 54.20063], [-7.14908, 54.22732], [-7.19145, 54.31296], [-7.02034, 54.4212], [-6.87775, 54.34682], [-6.85179, 54.29176], [-6.81583, 54.22791], [-6.74575, 54.18788], [-6.70175, 54.20218], [-6.6382, 54.17071], [-6.66264, 54.0666], [-6.62842, 54.03503], [-6.47849, 54.06947], [-6.36605, 54.07234], [-6.36279, 54.11248], [-6.32694, 54.09337], [-6.29003, 54.11278], [-6.26218, 54.09785], [-5.83481, 53.87749], [-4.69044, 54.3629], [-6.34755, 55.49206]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q35",
      nameEn: "Denmark",
      country: "DK",
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["45"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[12.16597, 56.60205], [10.40861, 58.38489], [7.28637, 57.35913], [8.02459, 55.09613], [8.45719, 55.06747], [8.55769, 54.91837], [8.63979, 54.91069], [8.76387, 54.8948], [8.81178, 54.90518], [8.92795, 54.90452], [9.04629, 54.87249], [9.14275, 54.87421], [9.20571, 54.85841], [9.24631, 54.84726], [9.23445, 54.83432], [9.2474, 54.8112], [9.32771, 54.80602], [9.33849, 54.80233], [9.36496, 54.81749], [9.38532, 54.83968], [9.41213, 54.84254], [9.43155, 54.82586], [9.4659, 54.83131], [9.58937, 54.88785], [9.62734, 54.88057], [9.61187, 54.85548], [9.73563, 54.8247], [9.89314, 54.84171], [10.16755, 54.73883], [10.31111, 54.65968], [11.00303, 54.63689], [11.90309, 54.38543], [12.85844, 54.82438], [13.93395, 54.84044], [15.36991, 54.73263], [15.79951, 55.54655], [14.89259, 55.5623], [14.28399, 55.1553], [12.84405, 55.13257], [12.60345, 55.42675], [12.88472, 55.63369], [12.6372, 55.91371], [12.65312, 56.04345], [12.07466, 56.29488], [12.16597, 56.60205]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q55",
      nameEn: "Netherlands",
      country: "NL",
      groups: ["EU", "155", "150", "UN"],
      callingCodes: ["31"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[5.45168, 54.20039], [2.56575, 51.85301], [3.36263, 51.37112], [3.38696, 51.33436], [3.35847, 51.31572], [3.38289, 51.27331], [3.41704, 51.25933], [3.43488, 51.24135], [3.52698, 51.2458], [3.51502, 51.28697], [3.58939, 51.30064], [3.78999, 51.25766], [3.78783, 51.2151], [3.90125, 51.20371], [3.97889, 51.22537], [4.01957, 51.24504], [4.05165, 51.24171], [4.16721, 51.29348], [4.24024, 51.35371], [4.21923, 51.37443], [4.33265, 51.37687], [4.34086, 51.35738], [4.39292, 51.35547], [4.43777, 51.36989], [4.38064, 51.41965], [4.39747, 51.43316], [4.38122, 51.44905], [4.47736, 51.4778], [4.5388, 51.48184], [4.54675, 51.47265], [4.52846, 51.45002], [4.53521, 51.4243], [4.57489, 51.4324], [4.65442, 51.42352], [4.72935, 51.48424], [4.74578, 51.48937], [4.77321, 51.50529], [4.78803, 51.50284], [4.84139, 51.4799], [4.82409, 51.44736], [4.82946, 51.4213], [4.78314, 51.43319], [4.76577, 51.43046], [4.77229, 51.41337], [4.78941, 51.41102], [4.84988, 51.41502], [4.90016, 51.41404], [4.92152, 51.39487], [5.00393, 51.44406], [5.0106, 51.47167], [5.03281, 51.48679], [5.04774, 51.47022], [5.07891, 51.4715], [5.10456, 51.43163], [5.07102, 51.39469], [5.13105, 51.34791], [5.13377, 51.31592], [5.16222, 51.31035], [5.2002, 51.32243], [5.24244, 51.30495], [5.22542, 51.26888], [5.23814, 51.26064], [5.26461, 51.26693], [5.29716, 51.26104], [5.33886, 51.26314], [5.347, 51.27502], [5.41672, 51.26248], [5.4407, 51.28169], [5.46519, 51.2849], [5.48476, 51.30053], [5.515, 51.29462], [5.5569, 51.26544], [5.5603, 51.22249], [5.65145, 51.19788], [5.65528, 51.18736], [5.70344, 51.1829], [5.74617, 51.18928], [5.77735, 51.17845], [5.77697, 51.1522], [5.82564, 51.16753], [5.85508, 51.14445], [5.80798, 51.11661], [5.8109, 51.10861], [5.83226, 51.10585], [5.82921, 51.09328], [5.79903, 51.09371], [5.79835, 51.05834], [5.77258, 51.06196], [5.75961, 51.03113], [5.77688, 51.02483], [5.76242, 50.99703], [5.71864, 50.96092], [5.72875, 50.95428], [5.74752, 50.96202], [5.75927, 50.95601], [5.74644, 50.94723], [5.72545, 50.92312], [5.72644, 50.91167], [5.71626, 50.90796], [5.69858, 50.91046], [5.67886, 50.88142], [5.64504, 50.87107], [5.64009, 50.84742], [5.65259, 50.82309], [5.70118, 50.80764], [5.68995, 50.79641], [5.70107, 50.7827], [5.68091, 50.75804], [5.69469, 50.75529], [5.72216, 50.76398], [5.73904, 50.75674], [5.74356, 50.7691], [5.76533, 50.78159], [5.77513, 50.78308], [5.80673, 50.7558], [5.84548, 50.76542], [5.84888, 50.75448], [5.88734, 50.77092], [5.89129, 50.75125], [5.89132, 50.75124], [5.95942, 50.7622], [5.97545, 50.75441], [6.01976, 50.75398], [6.02624, 50.77453], [5.97497, 50.79992], [5.98404, 50.80988], [6.00462, 50.80065], [6.02328, 50.81694], [6.01921, 50.84435], [6.05623, 50.8572], [6.05702, 50.85179], [6.07431, 50.84674], [6.07693, 50.86025], [6.08805, 50.87223], [6.07486, 50.89307], [6.09297, 50.92066], [6.01615, 50.93367], [6.02697, 50.98303], [5.95282, 50.98728], [5.90296, 50.97356], [5.90493, 51.00198], [5.87849, 51.01969], [5.86735, 51.05182], [5.9134, 51.06736], [5.9541, 51.03496], [5.98292, 51.07469], [6.16706, 51.15677], [6.17384, 51.19589], [6.07889, 51.17038], [6.07889, 51.24432], [6.16977, 51.33169], [6.22674, 51.36135], [6.22641, 51.39948], [6.20654, 51.40049], [6.21724, 51.48568], [6.18017, 51.54096], [6.09055, 51.60564], [6.11759, 51.65609], [6.02767, 51.6742], [6.04091, 51.71821], [5.95003, 51.7493], [5.98665, 51.76944], [5.94568, 51.82786], [5.99848, 51.83195], [6.06705, 51.86136], [6.10337, 51.84829], [6.16902, 51.84094], [6.11551, 51.89769], [6.15349, 51.90439], [6.21443, 51.86801], [6.29872, 51.86801], [6.30593, 51.84998], [6.40704, 51.82771], [6.38815, 51.87257], [6.47179, 51.85395], [6.50231, 51.86313], [6.58556, 51.89386], [6.68386, 51.91861], [6.72319, 51.89518], [6.82357, 51.96711], [6.83035, 51.9905], [6.68128, 52.05052], [6.76117, 52.11895], [6.83984, 52.11728], [6.97189, 52.20329], [6.9897, 52.2271], [7.03729, 52.22695], [7.06365, 52.23789], [7.02703, 52.27941], [7.07044, 52.37805], [7.03417, 52.40237], [6.99041, 52.47235], [6.94293, 52.43597], [6.69507, 52.488], [6.71641, 52.62905], [6.77307, 52.65375], [7.04557, 52.63318], [7.07253, 52.81083], [7.21694, 53.00742], [7.17898, 53.13817], [7.22681, 53.18165], [7.21679, 53.20058], [7.19052, 53.31866], [7.00198, 53.32672], [6.91025, 53.44221], [5.45168, 54.20039]], [[4.93295, 51.44945], [4.95244, 51.45207], [4.9524, 51.45014], [4.93909, 51.44632], [4.93295, 51.44945]], [[4.91493, 51.4353], [4.91935, 51.43634], [4.92227, 51.44252], [4.91811, 51.44621], [4.92287, 51.44741], [4.92811, 51.4437], [4.92566, 51.44273], [4.92815, 51.43856], [4.92879, 51.44161], [4.93544, 51.44634], [4.94025, 51.44193], [4.93416, 51.44185], [4.93471, 51.43861], [4.94265, 51.44003], [4.93986, 51.43064], [4.92952, 51.42984], [4.92652, 51.43329], [4.91493, 51.4353]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q782",
      nameEn: "Hawaii",
      aliases: ["US-HI"],
      country: "US",
      groups: ["Q35657", "061", "009", "UN"],
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-177.8563, 29.18961], [-179.49839, 27.86265], [-151.6784, 9.55515], [-154.05867, 45.51124], [-177.5224, 27.7635], [-177.8563, 29.18961]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q797",
      nameEn: "Alaska",
      aliases: ["US-AK"],
      country: "US",
      groups: ["Q35657", "021", "003", "019", "UN"],
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[169.34848, 52.47228], [180, 51.0171], [179.84401, 55.10087], [169.34848, 52.47228]]], [[[-168.95635, 65.98512], [-169.03888, 65.48473], [-172.76104, 63.77445], [-179.55295, 57.62081], [-179.55295, 50.81807], [-133.92876, 54.62289], [-130.61931, 54.70835], [-130.64499, 54.76912], [-130.44184, 54.85377], [-130.27203, 54.97174], [-130.18765, 55.07744], [-130.08035, 55.21556], [-129.97513, 55.28029], [-130.15373, 55.74895], [-130.00857, 55.91344], [-130.00093, 56.00325], [-130.10173, 56.12178], [-130.33965, 56.10849], [-130.77769, 56.36185], [-131.8271, 56.62247], [-133.38523, 58.42773], [-133.84645, 58.73543], [-134.27175, 58.8634], [-134.48059, 59.13231], [-134.55699, 59.1297], [-134.7047, 59.2458], [-135.00267, 59.28745], [-135.03069, 59.56208], [-135.48007, 59.79937], [-136.31566, 59.59083], [-136.22381, 59.55526], [-136.33727, 59.44466], [-136.47323, 59.46617], [-136.52365, 59.16752], [-136.82619, 59.16198], [-137.4925, 58.89415], [-137.60623, 59.24465], [-138.62145, 59.76431], [-138.71149, 59.90728], [-139.05365, 59.99655], [-139.20603, 60.08896], [-139.05831, 60.35205], [-139.68991, 60.33693], [-139.98024, 60.18027], [-140.45648, 60.30919], [-140.5227, 60.22077], [-141.00116, 60.30648], [-140.97446, 84.39275], [-168.25765, 71.99091], [-168.95635, 65.98512]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3492",
      nameEn: "Sumatra",
      aliases: ["ID-SM"],
      country: "ID",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[109.82788, 2.86812], [110.90339, 7.52694], [105.01437, 3.24936], [104.56723, 1.44271], [104.34728, 1.33529], [104.12282, 1.27714], [104.03085, 1.26954], [103.74084, 1.12902], [103.66049, 1.18825], [103.56591, 1.19719], [103.03657, 1.30383], [96.11174, 6.69841], [74.28481, -3.17525], [102.92489, -8.17146], [106.32259, -5.50116], [106.38511, -5.16715], [109.17017, -4.07401], [109.3962, -2.07276], [108.50935, -2.01066], [107.94791, 1.06924], [109.82788, 2.86812]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3757",
      nameEn: "Java",
      aliases: ["ID-JW"],
      country: "ID",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[109.17017, -4.07401], [106.38511, -5.16715], [106.32259, -5.50116], [102.92489, -8.17146], [116.22542, -10.49172], [114.39575, -8.2889], [114.42235, -8.09762], [114.92859, -7.49253], [116.33992, -7.56171], [116.58433, -5.30385], [109.17017, -4.07401]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3795",
      nameEn: "Kalimantan",
      aliases: ["ID-KA"],
      country: "ID",
      groups: ["Q36117", "035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[120.02464, 2.83703], [118.06469, 4.16638], [117.67641, 4.16535], [117.47313, 4.18857], [117.25801, 4.35108], [115.90217, 4.37708], [115.58276, 3.93499], [115.53713, 3.14776], [115.11343, 2.82879], [115.1721, 2.49671], [114.80706, 2.21665], [114.80706, 1.92351], [114.57892, 1.5], [114.03788, 1.44787], [113.64677, 1.23933], [113.01448, 1.42832], [113.021, 1.57819], [112.48648, 1.56516], [112.2127, 1.44135], [112.15679, 1.17004], [111.94553, 1.12016], [111.82846, 0.99349], [111.55434, 0.97864], [111.22979, 1.08326], [110.62374, 0.873], [110.49182, 0.88088], [110.35354, 0.98869], [109.66397, 1.60425], [109.66397, 1.79972], [109.57923, 1.80624], [109.53794, 1.91771], [109.62558, 1.99182], [109.82788, 2.86812], [107.94791, 1.06924], [108.50935, -2.01066], [109.3962, -2.07276], [109.17017, -4.07401], [116.58433, -5.30385], [120.02464, 2.83703]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3803",
      nameEn: "Lesser Sunda Islands",
      aliases: ["ID-NU"],
      country: "ID",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[116.96967, -8.01483], [114.92859, -7.49253], [114.42235, -8.09762], [114.39575, -8.2889], [116.22542, -10.49172], [122.14954, -11.52517], [125.68138, -9.85176], [125.09025, -9.46406], [124.97892, -9.19281], [125.04044, -9.17093], [125.09434, -9.19669], [125.18907, -9.16434], [125.18632, -9.03142], [125.11764, -8.96359], [124.97742, -9.08128], [124.94011, -8.85617], [124.46701, -9.13002], [124.45971, -9.30263], [124.38554, -9.3582], [124.35258, -9.43002], [124.3535, -9.48493], [124.28115, -9.50453], [124.28115, -9.42189], [124.21247, -9.36904], [124.14517, -9.42324], [124.10539, -9.41206], [124.04286, -9.34243], [124.04628, -9.22671], [124.33472, -9.11416], [124.92337, -8.75859], [125.87688, -7.49892], [116.96967, -8.01483]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3812",
      nameEn: "Sulawesi",
      aliases: ["ID-SL"],
      country: "ID",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[128.34321, 3.90322], [126.69413, 6.02692], [119.56457, 0.90759], [116.58433, -5.30385], [116.33992, -7.56171], [116.96967, -8.01483], [125.87688, -7.49892], [123.78965, -0.86805], [128.34321, 3.90322]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3827",
      nameEn: "Maluku Islands",
      aliases: ["ID-ML"],
      country: "ID",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[129.63187, 2.21409], [128.34321, 3.90322], [123.78965, -0.86805], [125.87688, -7.49892], [125.58506, -7.95311], [125.87691, -8.31789], [127.42116, -8.22471], [127.55165, -9.05052], [135.49042, -9.2276], [135.35517, -5.01442], [132.8312, -4.70282], [130.8468, -2.61103], [128.40647, -2.30349], [129.71519, -0.24692], [129.63187, 2.21409]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3845",
      nameEn: "Western New Guinea",
      aliases: ["ID-PP"],
      country: "ID",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["62"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[135.49042, -9.2276], [141.01842, -9.35091], [141.01763, -6.90181], [140.90448, -6.85033], [140.85295, -6.72996], [140.99813, -6.3233], [141.02352, 0.08993], [129.63187, 2.21409], [129.71519, -0.24692], [128.40647, -2.30349], [130.8468, -2.61103], [132.8312, -4.70282], [135.35517, -5.01442], [135.49042, -9.2276]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q5765",
      nameEn: "Balearic Islands",
      aliases: ["ES-IB"],
      country: "ES",
      groups: ["EU", "039", "150", "UN"],
      callingCodes: ["34 971"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.27707, 35.35051], [5.10072, 39.89531], [3.75438, 42.33445], [-2.27707, 35.35051]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q5823",
      nameEn: "Ceuta",
      aliases: ["ES-CE"],
      country: "ES",
      groups: ["EA", "EU", "015", "002", "UN"],
      level: "subterritory",
      callingCodes: ["34"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-5.38491, 35.92591], [-5.37338, 35.88417], [-5.35844, 35.87375], [-5.34379, 35.8711], [-5.21179, 35.90091], [-5.38491, 35.92591]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q5831",
      nameEn: "Melilla",
      aliases: ["ES-ML"],
      country: "ES",
      groups: ["EA", "EU", "015", "002", "UN"],
      level: "subterritory",
      callingCodes: ["34"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.91909, 35.33927], [-2.96038, 35.31609], [-2.96648, 35.30475], [-2.96978, 35.29459], [-2.97035, 35.28852], [-2.96507, 35.28801], [-2.96826, 35.28296], [-2.96516, 35.27967], [-2.95431, 35.2728], [-2.95065, 35.26576], [-2.93893, 35.26737], [-2.92272, 35.27509], [-2.91909, 35.33927]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q7835",
      nameEn: "Crimea",
      country: "RU",
      groups: ["151", "150", "UN"],
      level: "subterritory",
      callingCodes: ["7"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.5, 44], [36.4883, 45.0488], [36.475, 45.2411], [36.5049, 45.3136], [36.6545, 45.3417], [36.6645, 45.4514], [35.0498, 45.7683], [34.9601, 45.7563], [34.7991, 45.8101], [34.8015, 45.9005], [34.7548, 45.907], [34.6668, 45.9714], [34.6086, 45.9935], [34.5589, 45.9935], [34.5201, 45.951], [34.4873, 45.9427], [34.4415, 45.9599], [34.4122, 46.0025], [34.3391, 46.0611], [34.2511, 46.0532], [34.181, 46.068], [34.1293, 46.1049], [34.0731, 46.1177], [34.0527, 46.1084], [33.9155, 46.1594], [33.8523, 46.1986], [33.7972, 46.2048], [33.7405, 46.1855], [33.646, 46.2303], [33.6152, 46.2261], [33.6385, 46.1415], [33.6147, 46.1356], [33.5732, 46.1032], [33.5909, 46.0601], [33.5597, 46.0307], [31.5, 45.5], [33.5, 44]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q12837",
      nameEn: "Iberia",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q14056",
      nameEn: "Jan Mayen",
      aliases: ["NO-22"],
      country: "NO",
      groups: ["SJ", "154", "150", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-9.18243, 72.23144], [-10.71459, 70.09565], [-5.93364, 70.76368], [-9.18243, 72.23144]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q19188",
      nameEn: "Mainland China",
      country: "CN",
      groups: ["030", "142", "UN"],
      callingCodes: ["86"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[125.6131, 53.07229], [125.17522, 53.20225], [124.46078, 53.21881], [123.86158, 53.49391], [123.26989, 53.54843], [122.85966, 53.47395], [122.35063, 53.49565], [121.39213, 53.31888], [120.85633, 53.28499], [120.0451, 52.7359], [120.04049, 52.58773], [120.46454, 52.63811], [120.71673, 52.54099], [120.61346, 52.32447], [120.77337, 52.20805], [120.65907, 51.93544], [120.10963, 51.671], [119.13553, 50.37412], [119.38598, 50.35162], [119.27996, 50.13348], [119.11003, 50.00276], [118.61623, 49.93809], [117.82343, 49.52696], [117.48208, 49.62324], [117.27597, 49.62544], [116.71193, 49.83813], [116.03781, 48.87014], [116.06565, 48.81716], [115.78876, 48.51781], [115.811, 48.25699], [115.52082, 48.15367], [115.57128, 47.91988], [115.94296, 47.67741], [116.21879, 47.88505], [116.4465, 47.83662], [116.67405, 47.89039], [116.9723, 47.87285], [117.37875, 47.63627], [117.50181, 47.77216], [117.80196, 48.01661], [118.03676, 48.00982], [118.11009, 48.04], [118.22677, 48.03853], [118.29654, 48.00246], [118.55766, 47.99277], [118.7564, 47.76947], [119.12343, 47.66458], [119.13995, 47.53997], [119.35892, 47.48104], [119.31964, 47.42617], [119.54918, 47.29505], [119.56019, 47.24874], [119.62403, 47.24575], [119.71209, 47.19192], [119.85518, 46.92196], [119.91242, 46.90091], [119.89261, 46.66423], [119.80455, 46.67631], [119.77373, 46.62947], [119.68127, 46.59015], [119.65265, 46.62342], [119.42827, 46.63783], [119.32827, 46.61433], [119.24978, 46.64761], [119.10448, 46.65516], [119.00541, 46.74273], [118.92616, 46.72765], [118.89974, 46.77139], [118.8337, 46.77742], [118.78747, 46.68689], [118.30534, 46.73519], [117.69554, 46.50991], [117.60748, 46.59771], [117.41782, 46.57862], [117.36609, 46.36335], [116.83166, 46.38637], [116.75551, 46.33083], [116.58612, 46.30211], [116.26678, 45.96479], [116.24012, 45.8778], [116.27366, 45.78637], [116.16989, 45.68603], [115.60329, 45.44717], [114.94546, 45.37377], [114.74612, 45.43585], [114.54801, 45.38337], [114.5166, 45.27189], [113.70918, 44.72891], [112.74662, 44.86297], [112.4164, 45.06858], [111.98695, 45.09074], [111.76275, 44.98032], [111.40498, 44.3461], [111.96289, 43.81596], [111.93776, 43.68709], [111.79758, 43.6637], [111.59087, 43.51207], [111.0149, 43.3289], [110.4327, 42.78293], [110.08401, 42.6411], [109.89402, 42.63111], [109.452, 42.44842], [109.00679, 42.45302], [108.84489, 42.40246], [107.57258, 42.40898], [107.49681, 42.46221], [107.29755, 42.41395], [107.24774, 42.36107], [106.76517, 42.28741], [105.0123, 41.63188], [104.51667, 41.66113], [104.52258, 41.8706], [103.92804, 41.78246], [102.72403, 42.14675], [102.07645, 42.22519], [101.80515, 42.50074], [100.84979, 42.67087], [100.33297, 42.68231], [99.50671, 42.56535], [97.1777, 42.7964], [96.37926, 42.72055], [96.35658, 42.90363], [95.89543, 43.2528], [95.52594, 43.99353], [95.32891, 44.02407], [95.39772, 44.2805], [95.01191, 44.25274], [94.71959, 44.35284], [94.10003, 44.71016], [93.51161, 44.95964], [91.64048, 45.07408], [90.89169, 45.19667], [90.65114, 45.49314], [90.70907, 45.73437], [91.03026, 46.04194], [90.99672, 46.14207], [90.89639, 46.30711], [91.07696, 46.57315], [91.0147, 46.58171], [91.03649, 46.72916], [90.84035, 46.99525], [90.76108, 46.99399], [90.48542, 47.30438], [90.48854, 47.41826], [90.33598, 47.68303], [90.10871, 47.7375], [90.06512, 47.88177], [89.76624, 47.82745], [89.55453, 48.0423], [89.0711, 47.98528], [88.93186, 48.10263], [88.8011, 48.11302], [88.58316, 48.21893], [88.58939, 48.34531], [87.96361, 48.58478], [88.0788, 48.71436], [87.73822, 48.89582], [87.88171, 48.95853], [87.81333, 49.17354], [87.48983, 49.13794], [87.478, 49.07403], [87.28386, 49.11626], [86.87238, 49.12432], [86.73568, 48.99918], [86.75343, 48.70331], [86.38069, 48.46064], [85.73581, 48.3939], [85.5169, 48.05493], [85.61067, 47.49753], [85.69696, 47.2898], [85.54294, 47.06171], [85.22443, 47.04816], [84.93995, 46.87399], [84.73077, 47.01394], [83.92184, 46.98912], [83.04622, 47.19053], [82.21792, 45.56619], [82.58474, 45.40027], [82.51374, 45.1755], [81.73278, 45.3504], [80.11169, 45.03352], [79.8987, 44.89957], [80.38384, 44.63073], [80.40229, 44.23319], [80.40031, 44.10986], [80.75156, 43.44948], [80.69718, 43.32589], [80.77771, 43.30065], [80.78817, 43.14235], [80.62913, 43.141], [80.3735, 43.01557], [80.58999, 42.9011], [80.38169, 42.83142], [80.26886, 42.8366], [80.16892, 42.61137], [80.26841, 42.23797], [80.17807, 42.21166], [80.17842, 42.03211], [79.92977, 42.04113], [78.3732, 41.39603], [78.15757, 41.38565], [78.12873, 41.23091], [77.81287, 41.14307], [77.76206, 41.01574], [77.52723, 41.00227], [77.3693, 41.0375], [77.28004, 41.0033], [76.99302, 41.0696], [76.75681, 40.95354], [76.5261, 40.46114], [76.33659, 40.3482], [75.96168, 40.38064], [75.91361, 40.2948], [75.69663, 40.28642], [75.5854, 40.66874], [75.22834, 40.45382], [75.08243, 40.43945], [74.82013, 40.52197], [74.78168, 40.44886], [74.85996, 40.32857], [74.69875, 40.34668], [74.35063, 40.09742], [74.25533, 40.13191], [73.97049, 40.04378], [73.83006, 39.76136], [73.9051, 39.75073], [73.92354, 39.69565], [73.94683, 39.60733], [73.87018, 39.47879], [73.59831, 39.46425], [73.59241, 39.40843], [73.5004, 39.38402], [73.55396, 39.3543], [73.54572, 39.27567], [73.60638, 39.24534], [73.75823, 39.023], [73.81728, 39.04007], [73.82964, 38.91517], [73.7445, 38.93867], [73.7033, 38.84782], [73.80656, 38.66449], [73.79806, 38.61106], [73.97933, 38.52945], [74.17022, 38.65504], [74.51217, 38.47034], [74.69619, 38.42947], [74.69894, 38.22155], [74.80331, 38.19889], [74.82665, 38.07359], [74.9063, 38.03033], [74.92416, 37.83428], [75.00935, 37.77486], [74.8912, 37.67576], [74.94338, 37.55501], [75.06011, 37.52779], [75.15899, 37.41443], [75.09719, 37.37297], [75.12328, 37.31839], [74.88887, 37.23275], [74.80605, 37.21565], [74.49981, 37.24518], [74.56453, 37.03023], [75.13839, 37.02622], [75.40481, 36.95382], [75.45562, 36.71971], [75.72737, 36.7529], [75.92391, 36.56986], [76.0324, 36.41198], [76.00906, 36.17511], [75.93028, 36.13136], [76.15325, 35.9264], [76.14913, 35.82848], [76.33453, 35.84296], [76.50961, 35.8908], [76.77323, 35.66062], [76.84539, 35.67356], [76.96624, 35.5932], [77.44277, 35.46132], [77.70232, 35.46244], [77.80532, 35.52058], [78.11664, 35.48022], [78.03466, 35.3785], [78.00033, 35.23954], [78.22692, 34.88771], [78.18435, 34.7998], [78.27781, 34.61484], [78.54964, 34.57283], [78.56475, 34.50835], [78.74465, 34.45174], [79.05364, 34.32482], [78.99802, 34.3027], [78.91769, 34.15452], [78.66225, 34.08858], [78.65657, 34.03195], [78.73367, 34.01121], [78.77349, 33.73871], [78.67599, 33.66445], [78.73636, 33.56521], [79.15252, 33.17156], [79.14016, 33.02545], [79.46562, 32.69668], [79.26768, 32.53277], [79.13174, 32.47766], [79.0979, 32.38051], [78.99322, 32.37948], [78.96713, 32.33655], [78.7831, 32.46873], [78.73916, 32.69438], [78.38897, 32.53938], [78.4645, 32.45367], [78.49609, 32.2762], [78.68754, 32.10256], [78.74404, 32.00384], [78.78036, 31.99478], [78.69933, 31.78723], [78.84516, 31.60631], [78.71032, 31.50197], [78.77898, 31.31209], [78.89344, 31.30481], [79.01931, 31.42817], [79.14016, 31.43403], [79.30694, 31.17357], [79.59884, 30.93943], [79.93255, 30.88288], [80.20721, 30.58541], [80.54504, 30.44936], [80.83343, 30.32023], [81.03953, 30.20059], [81.12842, 30.01395], [81.24362, 30.0126], [81.29032, 30.08806], [81.2623, 30.14596], [81.33355, 30.15303], [81.39928, 30.21862], [81.41018, 30.42153], [81.5459, 30.37688], [81.62033, 30.44703], [81.99082, 30.33423], [82.10135, 30.35439], [82.10757, 30.23745], [82.19475, 30.16884], [82.16984, 30.0692], [82.38622, 30.02608], [82.5341, 29.9735], [82.73024, 29.81695], [83.07116, 29.61957], [83.28131, 29.56813], [83.44787, 29.30513], [83.63156, 29.16249], [83.82303, 29.30513], [83.97559, 29.33091], [84.18107, 29.23451], [84.24801, 29.02783], [84.2231, 28.89571], [84.47528, 28.74023], [84.62317, 28.73887], [84.85511, 28.58041], [85.06059, 28.68562], [85.19135, 28.62825], [85.18668, 28.54076], [85.10729, 28.34092], [85.38127, 28.28336], [85.4233, 28.32996], [85.59765, 28.30529], [85.60854, 28.25045], [85.69105, 28.38475], [85.71907, 28.38064], [85.74864, 28.23126], [85.84672, 28.18187], [85.90743, 28.05144], [85.97813, 27.99023], [85.94946, 27.9401], [86.06309, 27.90021], [86.12069, 27.93047], [86.08333, 28.02121], [86.088, 28.09264], [86.18607, 28.17364], [86.22966, 27.9786], [86.42736, 27.91122], [86.51609, 27.96623], [86.56265, 28.09569], [86.74181, 28.10638], [86.75582, 28.04182], [87.03757, 27.94835], [87.11696, 27.84104], [87.56996, 27.84517], [87.72718, 27.80938], [87.82681, 27.95248], [88.13378, 27.88015], [88.1278, 27.95417], [88.25332, 27.9478], [88.54858, 28.06057], [88.63235, 28.12356], [88.83559, 28.01936], [88.88091, 27.85192], [88.77517, 27.45415], [88.82981, 27.38814], [88.91901, 27.32483], [88.93678, 27.33777], [88.96947, 27.30319], [89.00216, 27.32532], [88.95355, 27.4106], [88.97213, 27.51671], [89.0582, 27.60985], [89.12825, 27.62502], [89.59525, 28.16433], [89.79762, 28.23979], [90.13387, 28.19178], [90.58842, 28.02838], [90.69894, 28.07784], [91.20019, 27.98715], [91.25779, 28.07509], [91.46327, 28.0064], [91.48973, 27.93903], [91.5629, 27.84823], [91.6469, 27.76358], [91.84722, 27.76325], [91.87057, 27.7195], [92.27432, 27.89077], [92.32101, 27.79363], [92.42538, 27.80092], [92.7275, 27.98662], [92.73025, 28.05814], [92.65472, 28.07632], [92.67486, 28.15018], [92.93075, 28.25671], [93.14635, 28.37035], [93.18069, 28.50319], [93.44621, 28.67189], [93.72797, 28.68821], [94.35897, 29.01965], [94.2752, 29.11687], [94.69318, 29.31739], [94.81353, 29.17804], [95.0978, 29.14446], [95.11291, 29.09527], [95.2214, 29.10727], [95.26122, 29.07727], [95.3038, 29.13847], [95.41091, 29.13007], [95.50842, 29.13487], [95.72086, 29.20797], [95.75149, 29.32063], [95.84899, 29.31464], [96.05361, 29.38167], [96.31316, 29.18643], [96.18682, 29.11087], [96.20467, 29.02325], [96.3626, 29.10607], [96.61391, 28.72742], [96.40929, 28.51526], [96.48895, 28.42955], [96.6455, 28.61657], [96.85561, 28.4875], [96.88445, 28.39452], [96.98882, 28.32564], [97.1289, 28.3619], [97.34547, 28.21385], [97.41729, 28.29783], [97.47085, 28.2688], [97.50518, 28.49716], [97.56835, 28.55628], [97.70705, 28.5056], [97.79632, 28.33168], [97.90069, 28.3776], [98.15337, 28.12114], [98.13964, 27.9478], [98.32641, 27.51385], [98.42529, 27.55404], [98.43353, 27.67086], [98.69582, 27.56499], [98.7333, 26.85615], [98.77547, 26.61994], [98.72741, 26.36183], [98.67797, 26.24487], [98.7329, 26.17218], [98.66884, 26.09165], [98.63128, 26.15492], [98.57085, 26.11547], [98.60763, 26.01512], [98.70818, 25.86241], [98.63128, 25.79937], [98.54064, 25.85129], [98.40606, 25.61129], [98.31268, 25.55307], [98.25774, 25.6051], [98.16848, 25.62739], [98.18084, 25.56298], [98.12591, 25.50722], [98.14925, 25.41547], [97.92541, 25.20815], [97.83614, 25.2715], [97.77023, 25.11492], [97.72216, 25.08508], [97.72903, 24.91332], [97.79949, 24.85655], [97.76481, 24.8289], [97.73127, 24.83015], [97.70181, 24.84557], [97.64354, 24.79171], [97.56648, 24.76475], [97.56383, 24.75535], [97.5542, 24.74943], [97.54675, 24.74202], [97.56525, 24.72838], [97.56286, 24.54535], [97.52757, 24.43748], [97.60029, 24.4401], [97.66998, 24.45288], [97.7098, 24.35658], [97.65624, 24.33781], [97.66723, 24.30027], [97.71941, 24.29652], [97.76799, 24.26365], [97.72998, 24.2302], [97.72799, 24.18883], [97.75305, 24.16902], [97.72903, 24.12606], [97.62363, 24.00506], [97.5247, 23.94032], [97.64667, 23.84574], [97.72302, 23.89288], [97.79456, 23.94836], [97.79416, 23.95663], [97.84328, 23.97603], [97.86545, 23.97723], [97.88811, 23.97446], [97.8955, 23.97758], [97.89676, 23.97931], [97.89683, 23.98389], [97.88814, 23.98605], [97.88414, 23.99405], [97.88616, 24.00463], [97.90998, 24.02094], [97.93951, 24.01953], [97.98691, 24.03897], [97.99583, 24.04932], [98.04709, 24.07616], [98.05302, 24.07408], [98.05671, 24.07961], [98.0607, 24.07812], [98.06703, 24.08028], [98.07806, 24.07988], [98.20666, 24.11406], [98.54476, 24.13119], [98.59256, 24.08371], [98.85319, 24.13042], [98.87998, 24.15624], [98.89632, 24.10612], [98.67797, 23.9644], [98.68209, 23.80492], [98.79607, 23.77947], [98.82933, 23.72921], [98.81775, 23.694], [98.88396, 23.59555], [98.80294, 23.5345], [98.82877, 23.47908], [98.87683, 23.48995], [98.92104, 23.36946], [98.87573, 23.33038], [98.93958, 23.31414], [98.92515, 23.29535], [98.88597, 23.18656], [99.05975, 23.16382], [99.04601, 23.12215], [99.25741, 23.09025], [99.34127, 23.13099], [99.52214, 23.08218], [99.54218, 22.90014], [99.43537, 22.94086], [99.45654, 22.85726], [99.31243, 22.73893], [99.38247, 22.57544], [99.37972, 22.50188], [99.28771, 22.4105], [99.17318, 22.18025], [99.19176, 22.16983], [99.1552, 22.15874], [99.33166, 22.09656], [99.47585, 22.13345], [99.85351, 22.04183], [99.96612, 22.05965], [99.99084, 21.97053], [99.94003, 21.82782], [99.98654, 21.71064], [100.04956, 21.66843], [100.12679, 21.70539], [100.17486, 21.65306], [100.10757, 21.59945], [100.12542, 21.50365], [100.1625, 21.48704], [100.18447, 21.51898], [100.25863, 21.47043], [100.35201, 21.53176], [100.42892, 21.54325], [100.4811, 21.46148], [100.57861, 21.45637], [100.72143, 21.51898], [100.87265, 21.67396], [101.11744, 21.77659], [101.15156, 21.56129], [101.2124, 21.56422], [101.19349, 21.41959], [101.26912, 21.36482], [101.2229, 21.23271], [101.29326, 21.17254], [101.54563, 21.25668], [101.6068, 21.23329], [101.59491, 21.18621], [101.60886, 21.17947], [101.66977, 21.20004], [101.70548, 21.14911], [101.7622, 21.14813], [101.79266, 21.19025], [101.76745, 21.21571], [101.83887, 21.20983], [101.84412, 21.25291], [101.74014, 21.30967], [101.74224, 21.48276], [101.7727, 21.51794], [101.7475, 21.5873], [101.80001, 21.57461], [101.83257, 21.61562], [101.74555, 21.72852], [101.7791, 21.83019], [101.62566, 21.96574], [101.57525, 22.13026], [101.60675, 22.13513], [101.53638, 22.24794], [101.56789, 22.28876], [101.61306, 22.27515], [101.68973, 22.46843], [101.7685, 22.50337], [101.86828, 22.38397], [101.90714, 22.38688], [101.91344, 22.44417], [101.98487, 22.42766], [102.03633, 22.46164], [102.1245, 22.43372], [102.14099, 22.40092], [102.16621, 22.43336], [102.26428, 22.41321], [102.25339, 22.4607], [102.41061, 22.64184], [102.38415, 22.67919], [102.42618, 22.69212], [102.46665, 22.77108], [102.51802, 22.77969], [102.57095, 22.7036], [102.60675, 22.73376], [102.8636, 22.60735], [102.9321, 22.48659], [103.0722, 22.44775], [103.07843, 22.50097], [103.17961, 22.55705], [103.15782, 22.59873], [103.18895, 22.64471], [103.28079, 22.68063], [103.32282, 22.8127], [103.43179, 22.75816], [103.43646, 22.70648], [103.52675, 22.59155], [103.57812, 22.65764], [103.56255, 22.69499], [103.64506, 22.79979], [103.87904, 22.56683], [103.93286, 22.52703], [103.94513, 22.52553], [103.95191, 22.5134], [103.96352, 22.50584], [103.96783, 22.51173], [103.97384, 22.50634], [103.99247, 22.51958], [104.01088, 22.51823], [104.03734, 22.72945], [104.11384, 22.80363], [104.27084, 22.8457], [104.25683, 22.76534], [104.35593, 22.69353], [104.47225, 22.75813], [104.58122, 22.85571], [104.60457, 22.81841], [104.65283, 22.83419], [104.72755, 22.81984], [104.77114, 22.90017], [104.84942, 22.93631], [104.86765, 22.95178], [104.8334, 23.01484], [104.79478, 23.12934], [104.87382, 23.12854], [104.87992, 23.17141], [104.91435, 23.18666], [104.9486, 23.17235], [104.96532, 23.20463], [104.98712, 23.19176], [105.07002, 23.26248], [105.11672, 23.25247], [105.17276, 23.28679], [105.22569, 23.27249], [105.32376, 23.39684], [105.40782, 23.28107], [105.42805, 23.30824], [105.49966, 23.20669], [105.56037, 23.16806], [105.57594, 23.075], [105.72382, 23.06641], [105.8726, 22.92756], [105.90119, 22.94168], [105.99568, 22.94178], [106.00179, 22.99049], [106.19705, 22.98475], [106.27022, 22.87722], [106.34961, 22.86718], [106.49749, 22.91164], [106.51306, 22.94891], [106.55976, 22.92311], [106.60179, 22.92884], [106.6516, 22.86862], [106.6734, 22.89587], [106.71387, 22.88296], [106.71128, 22.85982], [106.78422, 22.81532], [106.81271, 22.8226], [106.83685, 22.8098], [106.82404, 22.7881], [106.76293, 22.73491], [106.72321, 22.63606], [106.71698, 22.58432], [106.65316, 22.5757], [106.61269, 22.60301], [106.58395, 22.474], [106.55665, 22.46498], [106.57221, 22.37], [106.55976, 22.34841], [106.6516, 22.33977], [106.69986, 22.22309], [106.67495, 22.1885], [106.6983, 22.15102], [106.70142, 22.02409], [106.68274, 21.99811], [106.69276, 21.96013], [106.72551, 21.97923], [106.74345, 22.00965], [106.81038, 21.97934], [106.9178, 21.97357], [106.92714, 21.93459], [106.97228, 21.92592], [106.99252, 21.95191], [107.05634, 21.92303], [107.06101, 21.88982], [107.00964, 21.85948], [107.02615, 21.81981], [107.10771, 21.79879], [107.20734, 21.71493], [107.24625, 21.7077], [107.29296, 21.74674], [107.35834, 21.6672], [107.35989, 21.60063], [107.38636, 21.59774], [107.41593, 21.64839], [107.47197, 21.6672], [107.49532, 21.62958], [107.49065, 21.59774], [107.54047, 21.5934], [107.56537, 21.61945], [107.66967, 21.60787], [107.80355, 21.66141], [107.86114, 21.65128], [107.90006, 21.5905], [107.92652, 21.58906], [107.95232, 21.5388], [107.96774, 21.53601], [107.97074, 21.54072], [107.97383, 21.53961], [107.97932, 21.54503], [108.02926, 21.54997], [108.0569, 21.53604], [108.10003, 21.47338], [108.00365, 17.98159], [111.60491, 13.57105], [118.41371, 24.06775], [118.11703, 24.39734], [118.28244, 24.51231], [118.35291, 24.51645], [118.42453, 24.54644], [118.56434, 24.49266], [120.49232, 25.22863], [121.03532, 26.8787], [123.5458, 31.01942], [122.29378, 31.76513], [122.80525, 33.30571], [123.85601, 37.49093], [123.90497, 38.79949], [124.17532, 39.8232], [124.23201, 39.9248], [124.35029, 39.95639], [124.37089, 40.03004], [124.3322, 40.05573], [124.38556, 40.11047], [124.40719, 40.13655], [124.86913, 40.45387], [125.71172, 40.85223], [125.76869, 40.87908], [126.00335, 40.92835], [126.242, 41.15454], [126.53189, 41.35206], [126.60631, 41.65565], [126.90729, 41.79955], [127.17841, 41.59714], [127.29712, 41.49473], [127.92943, 41.44291], [128.02633, 41.42103], [128.03311, 41.39232], [128.12967, 41.37931], [128.18546, 41.41279], [128.20061, 41.40895], [128.30716, 41.60322], [128.15119, 41.74568], [128.04487, 42.01769], [128.94007, 42.03537], [128.96068, 42.06657], [129.15178, 42.17224], [129.22285, 42.26491], [129.22423, 42.3553], [129.28541, 42.41574], [129.42882, 42.44702], [129.54701, 42.37254], [129.60482, 42.44461], [129.72541, 42.43739], [129.75294, 42.59409], [129.77183, 42.69435], [129.7835, 42.76521], [129.80719, 42.79218], [129.83277, 42.86746], [129.85261, 42.96494], [129.8865, 43.00395], [129.95082, 43.01051], [129.96409, 42.97306], [130.12957, 42.98361], [130.09764, 42.91425], [130.26095, 42.9027], [130.23068, 42.80125], [130.2385, 42.71127], [130.41826, 42.6011], [130.44361, 42.54849], [130.50123, 42.61636], [130.55143, 42.52158], [130.62107, 42.58413], [130.56576, 42.68925], [130.40213, 42.70788], [130.44361, 42.76205], [130.66524, 42.84753], [131.02438, 42.86518], [131.02668, 42.91246], [131.135, 42.94114], [131.10274, 43.04734], [131.20414, 43.13654], [131.19031, 43.21385], [131.30324, 43.39498], [131.29402, 43.46695], [131.19492, 43.53047], [131.21105, 43.82383], [131.26176, 43.94011], [131.23583, 43.96085], [131.25484, 44.03131], [131.30365, 44.04262], [131.1108, 44.70266], [130.95639, 44.85154], [131.48415, 44.99513], [131.68466, 45.12374], [131.66852, 45.2196], [131.76532, 45.22609], [131.86903, 45.33636], [131.99417, 45.2567], [132.83978, 45.05916], [132.96373, 45.0212], [133.12293, 45.1332], [133.09279, 45.25693], [133.19419, 45.51913], [133.41083, 45.57723], [133.48457, 45.86203], [133.60442, 45.90053], [133.67569, 45.9759], [133.72695, 46.05576], [133.68047, 46.14697], [133.88097, 46.25066], [133.91496, 46.4274], [133.84104, 46.46681], [134.03538, 46.75668], [134.20016, 47.33458], [134.50898, 47.4812], [134.7671, 47.72051], [134.55508, 47.98651], [134.67098, 48.1564], [134.75328, 48.36763], [134.49516, 48.42884], [132.66989, 47.96491], [132.57309, 47.71741], [131.90448, 47.68011], [131.2635, 47.73325], [131.09871, 47.6852], [130.95985, 47.6957], [130.90915, 47.90623], [130.65103, 48.10052], [130.84462, 48.30942], [130.52147, 48.61745], [130.66946, 48.88251], [130.43232, 48.90844], [130.2355, 48.86741], [129.85416, 49.11067], [129.67598, 49.29596], [129.50685, 49.42398], [129.40398, 49.44194], [129.35317, 49.3481], [129.23232, 49.40353], [129.11153, 49.36813], [128.72896, 49.58676], [127.83476, 49.5748], [127.53516, 49.84306], [127.49299, 50.01251], [127.60515, 50.23503], [127.37384, 50.28393], [127.36009, 50.43787], [127.28765, 50.46585], [127.36335, 50.58306], [127.28165, 50.72075], [127.14586, 50.91152], [126.93135, 51.0841], [126.90369, 51.3238], [126.68349, 51.70607], [126.44606, 51.98254], [126.558, 52.13738], [125.6131, 53.07229]], [[113.56865, 22.20973], [113.57123, 22.20416], [113.60504, 22.20464], [113.63011, 22.10782], [113.57191, 22.07696], [113.54839, 22.10909], [113.54942, 22.14519], [113.54093, 22.15497], [113.52659, 22.18271], [113.53552, 22.20607], [113.53301, 22.21235], [113.53591, 22.21369], [113.54093, 22.21314], [113.54333, 22.21688], [113.5508, 22.21672], [113.56865, 22.20973]], [[114.50148, 22.15017], [113.92195, 22.13873], [113.83338, 22.1826], [113.81621, 22.2163], [113.86771, 22.42972], [114.03113, 22.5065], [114.05438, 22.5026], [114.05729, 22.51104], [114.06272, 22.51617], [114.07267, 22.51855], [114.07817, 22.52997], [114.08606, 22.53276], [114.09048, 22.53716], [114.09692, 22.53435], [114.1034, 22.5352], [114.11181, 22.52878], [114.11656, 22.53415], [114.12665, 22.54003], [114.13823, 22.54319], [114.1482, 22.54091], [114.15123, 22.55163], [114.1597, 22.56041], [114.17247, 22.55944], [114.18338, 22.55444], [114.20655, 22.55706], [114.22185, 22.55343], [114.22888, 22.5436], [114.25154, 22.55977], [114.44998, 22.55977], [114.50148, 22.15017]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q22890",
      nameEn: "Ireland",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q23666",
      nameEn: "Great Britain",
      country: "GB",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q23681",
      nameEn: "Northern Cyprus",
      groups: ["Q644636", "145", "142"],
      driveSide: "left",
      callingCodes: ["90 392"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.67678, 35.03866], [33.67742, 35.05963], [33.68474, 35.06602], [33.69095, 35.06237], [33.70861, 35.07644], [33.7161, 35.07279], [33.70209, 35.04882], [33.71482, 35.03722], [33.73824, 35.05321], [33.76106, 35.04253], [33.78581, 35.05104], [33.82067, 35.07826], [33.84168, 35.06823], [33.8541, 35.07201], [33.87479, 35.08881], [33.87097, 35.09389], [33.87622, 35.10457], [33.87224, 35.12293], [33.88561, 35.12449], [33.88943, 35.12007], [33.88737, 35.11408], [33.89853, 35.11377], [33.91789, 35.08688], [33.91299, 35.07579], [33.90247, 35.07686], [33.89485, 35.06873], [33.88367, 35.07877], [33.85261, 35.0574], [33.8355, 35.05777], [33.82051, 35.0667], [33.8012, 35.04786], [33.81524, 35.04192], [33.83055, 35.02865], [33.82875, 35.01685], [33.84045, 35.00616], [33.85216, 35.00579], [33.85891, 35.001], [33.85621, 34.98956], [33.83505, 34.98108], [33.84811, 34.97075], [33.86432, 34.97592], [33.90075, 34.96623], [33.98684, 34.76642], [35.48515, 34.70851], [35.51152, 36.10954], [32.82353, 35.70297], [32.46489, 35.48584], [32.60361, 35.16647], [32.64864, 35.19967], [32.70947, 35.18328], [32.70779, 35.14127], [32.85733, 35.07742], [32.86406, 35.1043], [32.94471, 35.09422], [33.01192, 35.15639], [33.08249, 35.17319], [33.11105, 35.15639], [33.15138, 35.19504], [33.27068, 35.16815], [33.3072, 35.16816], [33.31955, 35.18096], [33.35056, 35.18328], [33.34964, 35.17803], [33.35596, 35.17942], [33.35612, 35.17402], [33.36569, 35.17479], [33.3717, 35.1788], [33.37248, 35.18698], [33.38575, 35.2018], [33.4076, 35.20062], [33.41675, 35.16325], [33.46813, 35.10564], [33.48136, 35.0636], [33.47825, 35.04103], [33.45178, 35.02078], [33.45256, 35.00288], [33.47666, 35.00701], [33.48915, 35.06594], [33.53975, 35.08151], [33.57478, 35.06049], [33.567, 35.04803], [33.59658, 35.03635], [33.61215, 35.0527], [33.63765, 35.03869], [33.67678, 35.03866]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q25231",
      nameEn: "Svalbard",
      aliases: ["NO-21"],
      country: "NO",
      groups: ["SJ", "154", "150", "UN"],
      level: "subterritory",
      callingCodes: ["47 79"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-7.49892, 77.24208], [32.07813, 72.01005], [36.85549, 84.09565], [-7.49892, 77.24208]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q25263",
      nameEn: "Azores",
      aliases: ["PT-20"],
      country: "PT",
      groups: ["Q3320166", "Q2914565", "Q105472", "EU", "039", "150", "UN"],
      callingCodes: ["351"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-23.12984, 40.26428], [-36.43765, 41.39418], [-22.54767, 33.34416], [-23.12984, 40.26428]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q25359",
      nameEn: "Navassa Island",
      aliases: ["UM-76"],
      country: "US",
      groups: ["UM", "Q1352230", "029", "003", "419", "019", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-74.7289, 18.71009], [-75.71816, 18.46438], [-74.76465, 18.06252], [-74.7289, 18.71009]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q25396",
      nameEn: "Bonaire",
      aliases: ["BQ-BO", "NL-BQ1"],
      country: "NL",
      groups: ["Q1451600", "BQ", "029", "003", "419", "019", "UN"],
      level: "subterritory",
      callingCodes: ["599 7"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-67.89186, 12.4116], [-68.90012, 12.62309], [-68.33524, 11.78151], [-68.01417, 11.77722], [-67.89186, 12.4116]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q25528",
      nameEn: "Saba",
      aliases: ["BQ-SA", "NL-BQ2"],
      country: "NL",
      groups: ["Q1451600", "BQ", "029", "003", "419", "019", "UN"],
      level: "subterritory",
      callingCodes: ["599 4"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.07669, 17.79659], [-63.81314, 17.95045], [-63.22932, 17.32592], [-63.07669, 17.79659]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q26180",
      nameEn: "Sint Eustatius",
      aliases: ["BQ-SE", "NL-BQ3"],
      country: "NL",
      groups: ["Q1451600", "BQ", "029", "003", "419", "019", "UN"],
      level: "subterritory",
      callingCodes: ["599 3"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.07669, 17.79659], [-63.34999, 16.94218], [-62.76692, 17.64353], [-63.07669, 17.79659]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q26253",
      nameEn: "Madeira",
      aliases: ["PT-30"],
      country: "PT",
      groups: ["Q3320166", "Q2914565", "Q105472", "EU", "039", "150", "UN"],
      callingCodes: ["351"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-19.30302, 33.65304], [-16.04789, 29.65076], [-11.68307, 33.12333], [-19.30302, 33.65304]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q26927",
      nameEn: "Lakshadweep",
      aliases: ["IN-LD"],
      country: "IN",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["91"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[67.64074, 11.57295], [76.59015, 5.591], [72.67494, 13.58102], [67.64074, 11.57295]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q27329",
      nameEn: "Asian Russia",
      country: "RU",
      groups: ["142", "UN"],
      callingCodes: ["7"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-179.99933, 64.74703], [-172.76104, 63.77445], [-169.03888, 65.48473], [-168.95635, 65.98512], [-168.25765, 71.99091], [-179.9843, 71.90735], [-179.99933, 64.74703]]], [[[59.99809, 51.98263], [60.19925, 51.99173], [60.48915, 52.15175], [60.72581, 52.15538], [60.78201, 52.22067], [61.05417, 52.35096], [60.98021, 52.50068], [60.84709, 52.52228], [60.84118, 52.63912], [60.71693, 52.66245], [60.71989, 52.75923], [61.05842, 52.92217], [61.23462, 53.03227], [62.0422, 52.96105], [62.12799, 52.99133], [62.14574, 53.09626], [61.19024, 53.30536], [61.14291, 53.41481], [61.29082, 53.50992], [61.37957, 53.45887], [61.57185, 53.50112], [61.55706, 53.57144], [60.90626, 53.62937], [61.22574, 53.80268], [61.14283, 53.90063], [60.99796, 53.93699], [61.26863, 53.92797], [61.3706, 54.08464], [61.47603, 54.08048], [61.56941, 53.95703], [61.65318, 54.02445], [62.03913, 53.94768], [62.00966, 54.04134], [62.38535, 54.03961], [62.45931, 53.90737], [62.56876, 53.94047], [62.58651, 54.05871], [63.80604, 54.27079], [63.91224, 54.20013], [64.02715, 54.22679], [63.97686, 54.29763], [64.97216, 54.4212], [65.11033, 54.33028], [65.24663, 54.35721], [65.20174, 54.55216], [68.21308, 54.98645], [68.26661, 55.09226], [68.19206, 55.18823], [68.90865, 55.38148], [69.34224, 55.36344], [69.74917, 55.35545], [70.19179, 55.1476], [70.76493, 55.3027], [70.96009, 55.10558], [71.08288, 54.71253], [71.24185, 54.64965], [71.08706, 54.33376], [71.10379, 54.13326], [71.96141, 54.17736], [72.17477, 54.36303], [72.43415, 53.92685], [72.71026, 54.1161], [73.37963, 53.96132], [73.74778, 54.07194], [73.68921, 53.86522], [73.25412, 53.61532], [73.39218, 53.44623], [75.07405, 53.80831], [75.43398, 53.98652], [75.3668, 54.07439], [76.91052, 54.4677], [76.82266, 54.1798], [76.44076, 54.16017], [76.54243, 53.99329], [77.90383, 53.29807], [79.11255, 52.01171], [80.08138, 50.77658], [80.4127, 50.95581], [80.44819, 51.20855], [80.80318, 51.28262], [81.16999, 51.15662], [81.06091, 50.94833], [81.41248, 50.97524], [81.46581, 50.77658], [81.94999, 50.79307], [82.55443, 50.75412], [83.14607, 51.00796], [83.8442, 50.87375], [84.29385, 50.27257], [84.99198, 50.06793], [85.24047, 49.60239], [86.18709, 49.50259], [86.63674, 49.80136], [86.79056, 49.74787], [86.61307, 49.60239], [86.82606, 49.51796], [87.03071, 49.25142], [87.31465, 49.23603], [87.28386, 49.11626], [87.478, 49.07403], [87.48983, 49.13794], [87.81333, 49.17354], [87.98977, 49.18147], [88.15543, 49.30314], [88.17223, 49.46934], [88.42449, 49.48821], [88.82499, 49.44808], [89.70687, 49.72535], [89.59711, 49.90851], [91.86048, 50.73734], [92.07173, 50.69585], [92.44714, 50.78762], [93.01109, 50.79001], [92.99595, 50.63183], [94.30823, 50.57498], [94.39258, 50.22193], [94.49477, 50.17832], [94.6121, 50.04239], [94.97166, 50.04725], [95.02465, 49.96941], [95.74757, 49.97915], [95.80056, 50.04239], [96.97388, 49.88413], [97.24639, 49.74737], [97.56811, 49.84265], [97.56432, 49.92801], [97.76871, 49.99861], [97.85197, 49.91339], [98.29481, 50.33561], [98.31373, 50.4996], [98.06393, 50.61262], [97.9693, 50.78044], [98.01472, 50.86652], [97.83305, 51.00248], [98.05257, 51.46696], [98.22053, 51.46579], [98.33222, 51.71832], [98.74142, 51.8637], [98.87768, 52.14563], [99.27888, 51.96876], [99.75578, 51.90108], [99.89203, 51.74903], [100.61116, 51.73028], [101.39085, 51.45753], [101.5044, 51.50467], [102.14032, 51.35566], [102.32194, 50.67982], [102.71178, 50.38873], [103.70343, 50.13952], [105.32528, 50.4648], [106.05562, 50.40582], [106.07865, 50.33474], [106.47156, 50.31909], [106.49628, 50.32436], [106.51122, 50.34408], [106.58373, 50.34044], [106.80326, 50.30177], [107.00007, 50.1977], [107.1174, 50.04239], [107.36407, 49.97612], [107.96116, 49.93191], [107.95387, 49.66659], [108.27937, 49.53167], [108.53969, 49.32325], [109.18017, 49.34709], [109.51325, 49.22859], [110.24373, 49.16676], [110.39891, 49.25083], [110.64493, 49.1816], [113.02647, 49.60772], [113.20216, 49.83356], [114.325, 50.28098], [114.9703, 50.19254], [115.26068, 49.97367], [115.73602, 49.87688], [116.22402, 50.04477], [116.62502, 49.92919], [116.71193, 49.83813], [117.27597, 49.62544], [117.48208, 49.62324], [117.82343, 49.52696], [118.61623, 49.93809], [119.11003, 50.00276], [119.27996, 50.13348], [119.38598, 50.35162], [119.13553, 50.37412], [120.10963, 51.671], [120.65907, 51.93544], [120.77337, 52.20805], [120.61346, 52.32447], [120.71673, 52.54099], [120.46454, 52.63811], [120.04049, 52.58773], [120.0451, 52.7359], [120.85633, 53.28499], [121.39213, 53.31888], [122.35063, 53.49565], [122.85966, 53.47395], [123.26989, 53.54843], [123.86158, 53.49391], [124.46078, 53.21881], [125.17522, 53.20225], [125.6131, 53.07229], [126.558, 52.13738], [126.44606, 51.98254], [126.68349, 51.70607], [126.90369, 51.3238], [126.93135, 51.0841], [127.14586, 50.91152], [127.28165, 50.72075], [127.36335, 50.58306], [127.28765, 50.46585], [127.36009, 50.43787], [127.37384, 50.28393], [127.60515, 50.23503], [127.49299, 50.01251], [127.53516, 49.84306], [127.83476, 49.5748], [128.72896, 49.58676], [129.11153, 49.36813], [129.23232, 49.40353], [129.35317, 49.3481], [129.40398, 49.44194], [129.50685, 49.42398], [129.67598, 49.29596], [129.85416, 49.11067], [130.2355, 48.86741], [130.43232, 48.90844], [130.66946, 48.88251], [130.52147, 48.61745], [130.84462, 48.30942], [130.65103, 48.10052], [130.90915, 47.90623], [130.95985, 47.6957], [131.09871, 47.6852], [131.2635, 47.73325], [131.90448, 47.68011], [132.57309, 47.71741], [132.66989, 47.96491], [134.49516, 48.42884], [134.75328, 48.36763], [134.67098, 48.1564], [134.55508, 47.98651], [134.7671, 47.72051], [134.50898, 47.4812], [134.20016, 47.33458], [134.03538, 46.75668], [133.84104, 46.46681], [133.91496, 46.4274], [133.88097, 46.25066], [133.68047, 46.14697], [133.72695, 46.05576], [133.67569, 45.9759], [133.60442, 45.90053], [133.48457, 45.86203], [133.41083, 45.57723], [133.19419, 45.51913], [133.09279, 45.25693], [133.12293, 45.1332], [132.96373, 45.0212], [132.83978, 45.05916], [131.99417, 45.2567], [131.86903, 45.33636], [131.76532, 45.22609], [131.66852, 45.2196], [131.68466, 45.12374], [131.48415, 44.99513], [130.95639, 44.85154], [131.1108, 44.70266], [131.30365, 44.04262], [131.25484, 44.03131], [131.23583, 43.96085], [131.26176, 43.94011], [131.21105, 43.82383], [131.19492, 43.53047], [131.29402, 43.46695], [131.30324, 43.39498], [131.19031, 43.21385], [131.20414, 43.13654], [131.10274, 43.04734], [131.135, 42.94114], [131.02668, 42.91246], [131.02438, 42.86518], [130.66524, 42.84753], [130.44361, 42.76205], [130.40213, 42.70788], [130.56576, 42.68925], [130.62107, 42.58413], [130.55143, 42.52158], [130.56835, 42.43281], [130.60805, 42.4317], [130.64181, 42.41422], [130.66367, 42.38024], [130.65022, 42.32281], [131.95041, 41.5445], [140.9182, 45.92937], [145.82343, 44.571], [145.23667, 43.76813], [153.94307, 38.42848], [180, 62.52334], [180, 71.53642], [155.31937, 81.93282], [76.13964, 83.37843], [64.18965, 69.94255], [66.1708, 67.61252], [61.98014, 65.72191], [60.74386, 64.95767], [59.63945, 64.78384], [59.80579, 64.13948], [59.24834, 63.01859], [59.61398, 62.44915], [59.36223, 61.3882], [59.50685, 60.91162], [58.3853, 59.487], [59.15636, 59.14682], [59.40376, 58.45822], [58.71104, 58.07475], [58.81412, 57.71602], [58.13789, 57.68097], [58.07604, 57.08308], [57.28024, 56.87898], [57.51527, 56.08729], [59.28419, 56.15739], [59.49035, 55.60486], [58.81825, 55.03378], [57.25137, 55.26262], [57.14829, 54.84204], [57.95234, 54.39672], [59.95217, 54.85853], [59.70487, 54.14846], [58.94336, 53.953], [58.79644, 52.43392], [59.22409, 52.28437], [59.25033, 52.46803], [60.17516, 52.39457], [60.17253, 52.25814], [59.91279, 52.06924], [59.99809, 51.98263]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q34366",
      nameEn: "Tasmania",
      aliases: ["AU-TAS"],
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["61"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[123.64533, -39.13605], [159.69067, -56.28945], [159.74028, -39.1978], [123.64533, -39.13605]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q34497",
      nameEn: "Saint Helena",
      aliases: ["SH-HL"],
      country: "GB",
      groups: ["SH", "BOTS", "011", "202", "002", "UN"],
      level: "subterritory",
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["290"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-8.3824, -13.9131], [-6.17428, -19.07236], [-3.29308, -15.22647], [-8.3824, -13.9131]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q35657",
      nameEn: "US States",
      country: "US",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q36117",
      nameEn: "Borneo",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q36678",
      nameEn: "West Bank",
      country: "PS",
      groups: ["145", "142"],
      callingCodes: ["970"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[35.47672, 31.49578], [35.55941, 31.76535], [35.52758, 31.9131], [35.54375, 31.96587], [35.52012, 32.04076], [35.57111, 32.21877], [35.55807, 32.38674], [35.42078, 32.41562], [35.41048, 32.43706], [35.41598, 32.45593], [35.42034, 32.46009], [35.40224, 32.50136], [35.35212, 32.52047], [35.30685, 32.51024], [35.29306, 32.50947], [35.25049, 32.52453], [35.2244, 32.55289], [35.15937, 32.50466], [35.10882, 32.4757], [35.10024, 32.47856], [35.09236, 32.47614], [35.08564, 32.46948], [35.07059, 32.4585], [35.05423, 32.41754], [35.05311, 32.4024], [35.0421, 32.38242], [35.05142, 32.3667], [35.04243, 32.35008], [35.01772, 32.33863], [35.01119, 32.28684], [35.02939, 32.2671], [35.01841, 32.23981], [34.98885, 32.20758], [34.95703, 32.19522], [34.96009, 32.17503], [34.99039, 32.14626], [34.98507, 32.12606], [34.99437, 32.10962], [34.9863, 32.09551], [35.00261, 32.027], [34.98682, 31.96935], [35.00124, 31.93264], [35.03489, 31.92448], [35.03978, 31.89276], [35.03489, 31.85919], [34.99712, 31.85569], [34.9724, 31.83352], [35.01978, 31.82944], [35.05617, 31.85685], [35.07677, 31.85627], [35.14174, 31.81325], [35.18603, 31.80901], [35.18169, 31.82542], [35.19461, 31.82687], [35.21469, 31.81835], [35.216, 31.83894], [35.21128, 31.863], [35.20381, 31.86716], [35.20673, 31.88151], [35.20791, 31.8821], [35.20945, 31.8815], [35.21016, 31.88237], [35.21276, 31.88153], [35.2136, 31.88241], [35.22014, 31.88264], [35.22294, 31.87889], [35.22567, 31.86745], [35.22817, 31.8638], [35.2249, 31.85433], [35.2304, 31.84222], [35.24816, 31.8458], [35.25753, 31.8387], [35.251, 31.83085], [35.26404, 31.82567], [35.25573, 31.81362], [35.26058, 31.79064], [35.25225, 31.7678], [35.26319, 31.74846], [35.25182, 31.73945], [35.24981, 31.72543], [35.2438, 31.7201], [35.24315, 31.71244], [35.23972, 31.70896], [35.22392, 31.71899], [35.21937, 31.71578], [35.20538, 31.72388], [35.18023, 31.72067], [35.16478, 31.73242], [35.15474, 31.73352], [35.15119, 31.73634], [35.13931, 31.73012], [35.12933, 31.7325], [35.11895, 31.71454], [35.10782, 31.71594], [35.08226, 31.69107], [35.00879, 31.65426], [34.95249, 31.59813], [34.9415, 31.55601], [34.94356, 31.50743], [34.93258, 31.47816], [34.89756, 31.43891], [34.87833, 31.39321], [34.88932, 31.37093], [34.92571, 31.34337], [35.02459, 31.35979], [35.13033, 31.3551], [35.22921, 31.37445], [35.39675, 31.49572], [35.47672, 31.49578]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q37362",
      nameEn: "Akrotiri and Dhekelia",
      aliases: ["SBA"],
      country: "GB"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q38095",
      nameEn: "Gal\xE1pagos Islands",
      aliases: ["EC-W"],
      country: "EC",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["593"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-93.12365, 2.64343], [-92.46744, -2.52874], [-87.07749, -0.8849], [-93.12365, 2.64343]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q39760",
      nameEn: "Gaza Strip",
      country: "PS",
      groups: ["145", "142"],
      callingCodes: ["970"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[34.052, 31.46619], [34.21853, 31.32363], [34.23572, 31.2966], [34.24012, 31.29591], [34.26742, 31.21998], [34.29417, 31.24194], [34.36523, 31.28963], [34.37381, 31.30598], [34.36505, 31.36404], [34.40077, 31.40926], [34.48892, 31.48365], [34.56797, 31.54197], [34.48681, 31.59711], [34.29262, 31.70393], [34.052, 31.46619]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q40888",
      nameEn: "Andaman and Nicobar Islands",
      aliases: ["IN-AN"],
      country: "IN",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["91"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[94.42132, 5.96581], [94.6371, 13.81803], [86.7822, 13.41052], [94.42132, 5.96581]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q41684",
      nameEn: "Stewart Island",
      country: "NZ",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["64"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[166.59185, -47.61313], [169.70504, -47.56021], [167.52103, -46.41337], [166.59185, -47.61313]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q43296",
      nameEn: "Wake Island",
      aliases: ["WK", "WAK", "WKUM", "872", "UM-79"],
      country: "US",
      groups: ["UM", "Q1352230", "057", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[167.34779, 18.97692], [166.67967, 20.14834], [165.82549, 18.97692], [167.34779, 18.97692]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q46275",
      nameEn: "New Zealand Subantarctic Islands",
      country: "NZ",
      groups: ["Q851132", "053", "009", "UN"],
      driveSide: "left"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[164.30551, -47.88072], [161.96603, -56.07661], [179.49541, -50.04657], [179.49541, -47.2902], [169.91032, -47.66283], [164.30551, -47.88072]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q46395",
      nameEn: "British Overseas Territories",
      aliases: ["BOTS", "UKOTS"],
      country: "GB",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q46772",
      nameEn: "Kerguelen Islands",
      country: "FR",
      groups: ["TF", "Q1451600", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[61.9216, -49.39746], [70.67507, -51.14192], [74.25129, -45.45074], [61.9216, -49.39746]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q46879",
      nameEn: "Baker Island",
      aliases: ["UM-81"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-175.33482, -1.40631], [-175.31323, 0.5442], [-177.91421, 0.39582], [-175.33482, -1.40631]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q47863",
      nameEn: "Midway Atoll",
      aliases: ["MI", "MID", "MIUM", "488", "UM-71"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-176.29741, 29.09786], [-177.77531, 29.29793], [-177.5224, 27.7635], [-176.29741, 29.09786]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q62218",
      nameEn: "Jarvis Island",
      aliases: ["UM-86"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-160.42921, -1.4364], [-159.12443, 0.19975], [-160.38779, 0.30331], [-160.42921, -1.4364]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q105472",
      nameEn: "Macaronesia",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q114935",
      nameEn: "Kermadec Islands",
      country: "NZ",
      groups: ["Q851132", "053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["64"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-174.40891, -29.09438], [-180, -24.21376], [-179.96512, -35.00791], [-174.40891, -29.09438]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q115459",
      nameEn: "Chatham Islands",
      aliases: ["NZ-CIT"],
      country: "NZ",
      groups: ["Q851132", "053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["64"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-179.93224, -45.18423], [-172.47015, -45.17912], [-176.30998, -41.38382], [-179.93224, -45.18423]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q118863",
      nameEn: "North Island",
      country: "NZ",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["64"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[179.49541, -47.2902], [179.49541, -36.79303], [174.17679, -32.62487], [170.27492, -36.38133], [174.58663, -40.80446], [174.46634, -41.55028], [179.49541, -47.2902]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q120755",
      nameEn: "South Island",
      country: "NZ",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["64"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[169.70504, -47.56021], [179.49541, -47.2902], [174.46634, -41.55028], [174.58663, -40.80446], [170.27492, -36.38133], [166.56976, -39.94841], [164.8365, -46.0205], [167.52103, -46.41337], [169.70504, -47.56021]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q123076",
      nameEn: "Palmyra Atoll",
      aliases: ["UM-95"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-161.06795, 5.2462], [-161.0731, 7.1291], [-163.24478, 5.24198], [-161.06795, 5.2462]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q130574",
      nameEn: "Chafarinas Islands",
      country: "ES",
      groups: ["EU", "Q191011", "015", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.40316, 35.16893], [-2.43262, 35.20652], [-2.45965, 35.16527], [-2.40316, 35.16893]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q130895",
      nameEn: "Kingman Reef",
      aliases: ["UM-89"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-161.0731, 7.1291], [-163.16627, 7.15036], [-163.24478, 5.24198], [-161.0731, 7.1291]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q131008",
      nameEn: "Johnston Atoll",
      aliases: ["JT", "JTN", "JTUM", "396", "UM-67"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-170.65691, 16.57199], [-168.87689, 16.01159], [-169.2329, 17.4933], [-170.65691, 16.57199]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q131305",
      nameEn: "Howland Island",
      aliases: ["UM-84"],
      country: "US",
      groups: ["UM", "Q1352230", "061", "009", "UN"],
      level: "subterritory",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-177.91421, 0.39582], [-175.31323, 0.5442], [-176.74464, 2.28109], [-177.91421, 0.39582]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q133888",
      nameEn: "Ashmore and Cartier Islands",
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["61"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[123.7463, -11.1783], [120.6877, -13.59408], [125.29076, -12.33139], [123.7463, -11.1783]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q153732",
      nameEn: "Mariana Islands",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q172216",
      nameEn: "Coral Sea Islands",
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["61"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[159.77159, -28.41151], [156.73836, -14.50464], [145.2855, -9.62524], [147.69992, -17.5933], [152.93188, -20.92631], [154.02855, -24.43238], [159.77159, -28.41151]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q179313",
      nameEn: "Alderney",
      country: "GB",
      groups: ["GG", "830", "Q185086", "154", "150", "UN"],
      level: "subterritory",
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44 01481"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.36485, 49.48223], [-2.09454, 49.46288], [-2.02963, 49.91866], [-2.49556, 49.79012], [-2.36485, 49.48223]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q185086",
      nameEn: "Crown Dependencies",
      country: "GB",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q190571",
      nameEn: "Scattered Islands",
      country: "FR",
      groups: ["TF", "Q1451600", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[53.53458, -16.36909], [54.96649, -16.28353], [54.61476, -15.02273], [53.53458, -16.36909]]], [[[38.55969, -20.75596], [40.68027, -23.38889], [43.52893, -15.62903], [38.55969, -20.75596]]], [[[47.03092, -11.05648], [47.11593, -12.08552], [47.96702, -11.46447], [47.03092, -11.05648]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q191011",
      nameEn: "Plazas de soberan\xEDa",
      country: "ES"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q191146",
      nameEn: "Pe\xF1\xF3n de V\xE9lez de la Gomera",
      country: "ES",
      groups: ["EU", "Q191011", "015", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-4.30191, 35.17419], [-4.30112, 35.17058], [-4.29436, 35.17149], [-4.30191, 35.17419]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q201698",
      nameEn: "Crozet Islands",
      country: "FR",
      groups: ["TF", "Q1451600", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[55.03425, -43.65017], [46.31615, -46.28749], [54.5587, -47.93013], [55.03425, -43.65017]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q578170",
      nameEn: "Contiguous United States",
      aliases: ["CONUS"],
      country: "US",
      groups: ["Q35657", "021", "003", "019", "UN"],
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-97.13927, 25.96583], [-96.92418, 25.97377], [-80.57035, 24.0565], [-78.91214, 27.76553], [-61.98255, 37.34815], [-67.16117, 44.20069], [-66.93432, 44.82597], [-66.96824, 44.83078], [-66.98249, 44.87071], [-66.96824, 44.90965], [-67.0216, 44.95333], [-67.11316, 45.11176], [-67.15965, 45.16179], [-67.19603, 45.16771], [-67.20349, 45.1722], [-67.22751, 45.16344], [-67.27039, 45.1934], [-67.29748, 45.18173], [-67.29754, 45.14865], [-67.34927, 45.122], [-67.48201, 45.27351], [-67.42394, 45.37969], [-67.50578, 45.48971], [-67.42144, 45.50584], [-67.43815, 45.59162], [-67.6049, 45.60725], [-67.80705, 45.69528], [-67.80653, 45.80022], [-67.75654, 45.82324], [-67.80961, 45.87531], [-67.75196, 45.91814], [-67.78111, 45.9392], [-67.78578, 47.06473], [-67.87993, 47.10377], [-67.94843, 47.1925], [-68.23244, 47.35712], [-68.37458, 47.35851], [-68.38332, 47.28723], [-68.57914, 47.28431], [-68.60575, 47.24659], [-68.70125, 47.24399], [-68.89222, 47.1807], [-69.05039, 47.2456], [-69.05073, 47.30076], [-69.05148, 47.42012], [-69.22119, 47.46461], [-69.99966, 46.69543], [-70.05812, 46.41768], [-70.18547, 46.35357], [-70.29078, 46.18832], [-70.23855, 46.1453], [-70.31025, 45.96424], [-70.24694, 45.95138], [-70.25976, 45.89675], [-70.41523, 45.79497], [-70.38934, 45.73215], [-70.54019, 45.67291], [-70.68516, 45.56964], [-70.72651, 45.49771], [-70.62518, 45.42286], [-70.65383, 45.37592], [-70.78372, 45.43269], [-70.82638, 45.39828], [-70.80236, 45.37444], [-70.84816, 45.22698], [-70.89864, 45.2398], [-70.91169, 45.29849], [-70.95193, 45.33895], [-71.0107, 45.34819], [-71.01866, 45.31573], [-71.08364, 45.30623], [-71.14568, 45.24128], [-71.19723, 45.25438], [-71.22338, 45.25184], [-71.29371, 45.29996], [-71.37133, 45.24624], [-71.44252, 45.2361], [-71.40364, 45.21382], [-71.42778, 45.12624], [-71.48735, 45.07784], [-71.50067, 45.01357], [-73.35025, 45.00942], [-74.32699, 44.99029], [-74.66689, 45.00646], [-74.8447, 45.00606], [-74.99101, 44.98051], [-75.01363, 44.95608], [-75.2193, 44.87821], [-75.41441, 44.76614], [-75.76813, 44.51537], [-75.8217, 44.43176], [-75.95947, 44.34463], [-76.00018, 44.34896], [-76.16285, 44.28262], [-76.1664, 44.23051], [-76.244, 44.19643], [-76.31222, 44.19894], [-76.35324, 44.13493], [-76.43859, 44.09393], [-76.79706, 43.63099], [-79.25796, 43.54052], [-79.06921, 43.26183], [-79.05512, 43.25375], [-79.05544, 43.21224], [-79.05002, 43.20133], [-79.05384, 43.17418], [-79.04652, 43.16396], [-79.0427, 43.13934], [-79.06881, 43.12029], [-79.05671, 43.10937], [-79.07486, 43.07845], [-79.01055, 43.06659], [-78.99941, 43.05612], [-79.02424, 43.01983], [-79.02074, 42.98444], [-78.98126, 42.97], [-78.96312, 42.95509], [-78.93224, 42.95229], [-78.90905, 42.93022], [-78.90712, 42.89733], [-78.93684, 42.82887], [-82.67862, 41.67615], [-83.11184, 41.95671], [-83.14962, 42.04089], [-83.12724, 42.2376], [-83.09837, 42.28877], [-83.07837, 42.30978], [-83.02253, 42.33045], [-82.82964, 42.37355], [-82.64242, 42.55594], [-82.58873, 42.54984], [-82.57583, 42.5718], [-82.51858, 42.611], [-82.51063, 42.66025], [-82.46613, 42.76615], [-82.4826, 42.8068], [-82.45331, 42.93139], [-82.4253, 42.95423], [-82.4146, 42.97626], [-82.42469, 42.992], [-82.48419, 45.30225], [-83.59589, 45.82131], [-83.43746, 45.99749], [-83.57017, 46.105], [-83.83329, 46.12169], [-83.90453, 46.05922], [-83.95399, 46.05634], [-84.1096, 46.23987], [-84.09756, 46.25512], [-84.11615, 46.2681], [-84.11254, 46.32329], [-84.13451, 46.39218], [-84.11196, 46.50248], [-84.12885, 46.53068], [-84.17723, 46.52753], [-84.1945, 46.54061], [-84.2264, 46.53337], [-84.26351, 46.49508], [-84.29893, 46.49127], [-84.34174, 46.50683], [-84.42101, 46.49853], [-84.4481, 46.48972], [-84.47607, 46.45225], [-84.55635, 46.45974], [-84.85871, 46.88881], [-88.37033, 48.30586], [-89.48837, 48.01412], [-89.57972, 48.00023], [-89.77248, 48.02607], [-89.89974, 47.98109], [-90.07418, 48.11043], [-90.56312, 48.09488], [-90.56444, 48.12184], [-90.75045, 48.09143], [-90.87588, 48.2484], [-91.08016, 48.18096], [-91.25025, 48.08522], [-91.43248, 48.04912], [-91.45829, 48.07454], [-91.58025, 48.04339], [-91.55649, 48.10611], [-91.70451, 48.11805], [-91.71231, 48.19875], [-91.86125, 48.21278], [-91.98929, 48.25409], [-92.05339, 48.35958], [-92.14732, 48.36578], [-92.202, 48.35252], [-92.26662, 48.35651], [-92.30939, 48.31251], [-92.27167, 48.25046], [-92.37185, 48.22259], [-92.48147, 48.36609], [-92.45588, 48.40624], [-92.50712, 48.44921], [-92.65606, 48.43471], [-92.71323, 48.46081], [-92.69927, 48.49573], [-92.62747, 48.50278], [-92.6342, 48.54133], [-92.7287, 48.54005], [-92.94973, 48.60866], [-93.25391, 48.64266], [-93.33946, 48.62787], [-93.3712, 48.60599], [-93.39758, 48.60364], [-93.40693, 48.60948], [-93.44472, 48.59147], [-93.47022, 48.54357], [-93.66382, 48.51845], [-93.79267, 48.51631], [-93.80939, 48.52439], [-93.80676, 48.58232], [-93.83288, 48.62745], [-93.85769, 48.63284], [-94.23215, 48.65202], [-94.25104, 48.65729], [-94.25172, 48.68404], [-94.27153, 48.70232], [-94.4174, 48.71049], [-94.44258, 48.69223], [-94.53826, 48.70216], [-94.54885, 48.71543], [-94.58903, 48.71803], [-94.69335, 48.77883], [-94.69669, 48.80918], [-94.70486, 48.82365], [-94.70087, 48.8339], [-94.687, 48.84077], [-94.75017, 49.09931], [-94.77355, 49.11998], [-94.82487, 49.29483], [-94.8159, 49.32299], [-94.85381, 49.32492], [-94.95681, 49.37035], [-94.99532, 49.36579], [-95.01419, 49.35647], [-95.05825, 49.35311], [-95.12903, 49.37056], [-95.15357, 49.384], [-95.15355, 48.9996], [-123.32163, 49.00419], [-123.0093, 48.83186], [-123.0093, 48.76586], [-123.26565, 48.6959], [-123.15614, 48.35395], [-123.50039, 48.21223], [-125.03842, 48.53282], [-133.98258, 38.06389], [-118.48109, 32.5991], [-117.1243, 32.53427], [-115.88053, 32.63624], [-114.71871, 32.71894], [-114.76736, 32.64094], [-114.80584, 32.62028], [-114.81141, 32.55543], [-114.79524, 32.55731], [-114.82011, 32.49609], [-111.07523, 31.33232], [-108.20979, 31.33316], [-108.20899, 31.78534], [-106.529, 31.784], [-106.52266, 31.77509], [-106.51251, 31.76922], [-106.50962, 31.76155], [-106.50111, 31.75714], [-106.48815, 31.74769], [-106.47298, 31.75054], [-106.46726, 31.75998], [-106.45244, 31.76523], [-106.43419, 31.75478], [-106.41773, 31.75196], [-106.38003, 31.73151], [-106.3718, 31.71165], [-106.34864, 31.69663], [-106.33419, 31.66303], [-106.30305, 31.62154], [-106.28084, 31.56173], [-106.24612, 31.54193], [-106.23711, 31.51262], [-106.20346, 31.46305], [-106.09025, 31.40569], [-106.00363, 31.39181], [-104.77674, 30.4236], [-104.5171, 29.64671], [-104.3969, 29.57105], [-104.39363, 29.55396], [-104.37752, 29.54255], [-103.15787, 28.93865], [-102.60596, 29.8192], [-101.47277, 29.7744], [-101.05686, 29.44738], [-101.01128, 29.36947], [-100.96725, 29.3477], [-100.94579, 29.34523], [-100.94056, 29.33371], [-100.87982, 29.296], [-100.79696, 29.24688], [-100.67294, 29.09744], [-100.63689, 28.90812], [-100.59809, 28.88197], [-100.52313, 28.75598], [-100.5075, 28.74066], [-100.51222, 28.70679], [-100.50029, 28.66117], [-99.55409, 27.61314], [-99.51478, 27.55836], [-99.52955, 27.49747], [-99.50208, 27.50021], [-99.48045, 27.49016], [-99.482, 27.47128], [-99.49744, 27.43746], [-99.53573, 27.30926], [-99.08477, 26.39849], [-99.03053, 26.41249], [-99.00546, 26.3925], [-98.35126, 26.15129], [-98.30491, 26.10475], [-98.27075, 26.09457], [-98.24603, 26.07191], [-97.97017, 26.05232], [-97.95155, 26.0625], [-97.66511, 26.01708], [-97.52025, 25.88518], [-97.49828, 25.89877], [-97.45669, 25.86874], [-97.42511, 25.83969], [-97.37332, 25.83854], [-97.35946, 25.92189], [-97.13927, 25.96583]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q620634",
      nameEn: "Bir Tawil",
      groups: ["015", "002"],
      level: "territory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.17563, 22.00405], [33.57251, 21.72406], [33.99686, 21.76784], [34.0765, 22.00501], [33.17563, 22.00405]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q639185",
      nameEn: "Peros Banhos",
      country: "GB",
      groups: ["IO", "BOTS", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[72.12587, -4.02588], [70.1848, -6.37445], [72.09518, -5.61768], [72.12587, -4.02588]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q644636",
      nameEn: "Cyprus",
      level: "sharedLandform"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q851132",
      nameEn: "New Zealand Outlying Islands",
      country: "NZ",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q875134",
      nameEn: "European Russia",
      country: "RU",
      groups: ["151", "150", "UN"],
      callingCodes: ["7"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[18.57853, 55.25302], [19.64312, 54.45423], [19.8038, 54.44203], [20.63871, 54.3706], [21.41123, 54.32395], [22.79705, 54.36264], [22.7253, 54.41732], [22.70208, 54.45312], [22.67788, 54.532], [22.71293, 54.56454], [22.68021, 54.58486], [22.7522, 54.63525], [22.74225, 54.64339], [22.75467, 54.6483], [22.73397, 54.66604], [22.73631, 54.72952], [22.87317, 54.79492], [22.85083, 54.88711], [22.76422, 54.92521], [22.68723, 54.9811], [22.65451, 54.97037], [22.60075, 55.01863], [22.58907, 55.07085], [22.47688, 55.04408], [22.31562, 55.0655], [22.14267, 55.05345], [22.11697, 55.02131], [22.06087, 55.02935], [22.02582, 55.05078], [22.03984, 55.07888], [21.99543, 55.08691], [21.96505, 55.07353], [21.85521, 55.09493], [21.64954, 55.1791], [21.55605, 55.20311], [21.51095, 55.18507], [21.46766, 55.21115], [21.38446, 55.29348], [21.35465, 55.28427], [21.26425, 55.24456], [20.95181, 55.27994], [20.60454, 55.40986], [18.57853, 55.25302]]], [[[26.32936, 60.00121], [26.90044, 59.63819], [27.85643, 59.58538], [28.04187, 59.47017], [28.19061, 59.39962], [28.21137, 59.38058], [28.20537, 59.36491], [28.19284, 59.35791], [28.14215, 59.28934], [28.00689, 59.28351], [27.90911, 59.24353], [27.87978, 59.18097], [27.80482, 59.1116], [27.74429, 58.98351], [27.36366, 58.78381], [27.55489, 58.39525], [27.48541, 58.22615], [27.62393, 58.09462], [27.67282, 57.92627], [27.81841, 57.89244], [27.78526, 57.83963], [27.56689, 57.83356], [27.50171, 57.78842], [27.52615, 57.72843], [27.3746, 57.66834], [27.40393, 57.62125], [27.31919, 57.57672], [27.34698, 57.52242], [27.56832, 57.53728], [27.52453, 57.42826], [27.86101, 57.29402], [27.66511, 56.83921], [27.86101, 56.88204], [28.04768, 56.59004], [28.13526, 56.57989], [28.10069, 56.524], [28.19057, 56.44637], [28.16599, 56.37806], [28.23716, 56.27588], [28.15217, 56.16964], [28.30571, 56.06035], [28.36888, 56.05805], [28.37987, 56.11399], [28.43068, 56.09407], [28.5529, 56.11705], [28.68337, 56.10173], [28.63668, 56.07262], [28.73418, 55.97131], [29.08299, 56.03427], [29.21717, 55.98971], [29.44692, 55.95978], [29.3604, 55.75862], [29.51283, 55.70294], [29.61446, 55.77716], [29.80672, 55.79569], [29.97975, 55.87281], [30.12136, 55.8358], [30.27776, 55.86819], [30.30987, 55.83592], [30.48257, 55.81066], [30.51346, 55.78982], [30.51037, 55.76568], [30.63344, 55.73079], [30.67464, 55.64176], [30.72957, 55.66268], [30.7845, 55.58514], [30.86003, 55.63169], [30.93419, 55.6185], [30.95204, 55.50667], [30.90123, 55.46621], [30.93144, 55.3914], [30.8257, 55.3313], [30.81946, 55.27931], [30.87944, 55.28223], [30.97369, 55.17134], [31.02071, 55.06167], [31.00972, 55.02783], [30.94243, 55.03964], [30.9081, 55.02232], [30.95754, 54.98609], [30.93144, 54.9585], [30.81759, 54.94064], [30.8264, 54.90062], [30.75165, 54.80699], [30.95479, 54.74346], [30.97127, 54.71967], [31.0262, 54.70698], [30.98226, 54.68872], [30.99187, 54.67046], [31.19339, 54.66947], [31.21399, 54.63113], [31.08543, 54.50361], [31.22945, 54.46585], [31.3177, 54.34067], [31.30791, 54.25315], [31.57002, 54.14535], [31.89599, 54.0837], [31.88744, 54.03653], [31.85019, 53.91801], [31.77028, 53.80015], [31.89137, 53.78099], [32.12621, 53.81586], [32.36663, 53.7166], [32.45717, 53.74039], [32.50112, 53.68594], [32.40499, 53.6656], [32.47777, 53.5548], [32.74968, 53.45597], [32.73257, 53.33494], [32.51725, 53.28431], [32.40773, 53.18856], [32.15368, 53.07594], [31.82373, 53.10042], [31.787, 53.18033], [31.62496, 53.22886], [31.56316, 53.19432], [31.40523, 53.21406], [31.36403, 53.13504], [31.3915, 53.09712], [31.33519, 53.08805], [31.32283, 53.04101], [31.24147, 53.031], [31.35667, 52.97854], [31.592, 52.79011], [31.57277, 52.71613], [31.50406, 52.69707], [31.63869, 52.55361], [31.56316, 52.51518], [31.61397, 52.48843], [31.62084, 52.33849], [31.57971, 52.32146], [31.70735, 52.26711], [31.6895, 52.1973], [31.77877, 52.18636], [31.7822, 52.11406], [31.81722, 52.09955], [31.85018, 52.11305], [31.96141, 52.08015], [31.92159, 52.05144], [32.08813, 52.03319], [32.23331, 52.08085], [32.2777, 52.10266], [32.34044, 52.1434], [32.33083, 52.23685], [32.38988, 52.24946], [32.3528, 52.32842], [32.54781, 52.32423], [32.69475, 52.25535], [32.85405, 52.27888], [32.89937, 52.2461], [33.18913, 52.3754], [33.51323, 52.35779], [33.48027, 52.31499], [33.55718, 52.30324], [33.78789, 52.37204], [34.05239, 52.20132], [34.11199, 52.14087], [34.09413, 52.00835], [34.41136, 51.82793], [34.42922, 51.72852], [34.07765, 51.67065], [34.17599, 51.63253], [34.30562, 51.5205], [34.22048, 51.4187], [34.33446, 51.363], [34.23009, 51.26429], [34.31661, 51.23936], [34.38802, 51.2746], [34.6613, 51.25053], [34.6874, 51.18], [34.82472, 51.17483], [34.97304, 51.2342], [35.14058, 51.23162], [35.12685, 51.16191], [35.20375, 51.04723], [35.31774, 51.08434], [35.40837, 51.04119], [35.32598, 50.94524], [35.39307, 50.92145], [35.41367, 50.80227], [35.47704, 50.77274], [35.48116, 50.66405], [35.39464, 50.64751], [35.47463, 50.49247], [35.58003, 50.45117], [35.61711, 50.35707], [35.73659, 50.35489], [35.80388, 50.41356], [35.8926, 50.43829], [36.06893, 50.45205], [36.20763, 50.3943], [36.30101, 50.29088], [36.47817, 50.31457], [36.58371, 50.28563], [36.56655, 50.2413], [36.64571, 50.218], [36.69377, 50.26982], [36.91762, 50.34963], [37.08468, 50.34935], [37.48204, 50.46079], [37.47243, 50.36277], [37.62486, 50.29966], [37.62879, 50.24481], [37.61113, 50.21976], [37.75807, 50.07896], [37.79515, 50.08425], [37.90776, 50.04194], [38.02999, 49.94482], [38.02999, 49.90592], [38.21675, 49.98104], [38.18517, 50.08161], [38.32524, 50.08866], [38.35408, 50.00664], [38.65688, 49.97176], [38.68677, 50.00904], [38.73311, 49.90238], [38.90477, 49.86787], [38.9391, 49.79524], [39.1808, 49.88911], [39.27968, 49.75976], [39.44496, 49.76067], [39.59142, 49.73758], [39.65047, 49.61761], [39.84548, 49.56064], [40.13249, 49.61672], [40.16683, 49.56865], [40.03636, 49.52321], [40.03087, 49.45452], [40.1141, 49.38798], [40.14912, 49.37681], [40.18331, 49.34996], [40.22176, 49.25683], [40.01988, 49.1761], [39.93437, 49.05709], [39.6836, 49.05121], [39.6683, 48.99454], [39.71353, 48.98959], [39.72649, 48.9754], [39.74874, 48.98675], [39.78368, 48.91596], [39.98967, 48.86901], [40.03636, 48.91957], [40.08168, 48.87443], [39.97182, 48.79398], [39.79466, 48.83739], [39.73104, 48.7325], [39.71765, 48.68673], [39.67226, 48.59368], [39.79764, 48.58668], [39.84548, 48.57821], [39.86196, 48.46633], [39.88794, 48.44226], [39.94847, 48.35055], [39.84136, 48.33321], [39.84273, 48.30947], [39.90041, 48.3049], [39.91465, 48.26743], [39.95248, 48.29972], [39.9693, 48.29904], [39.97325, 48.31399], [39.99241, 48.31768], [40.00752, 48.22445], [39.94847, 48.22811], [39.83724, 48.06501], [39.88256, 48.04482], [39.77544, 48.04206], [39.82213, 47.96396], [39.73935, 47.82876], [38.87979, 47.87719], [38.79628, 47.81109], [38.76379, 47.69346], [38.35062, 47.61631], [38.28679, 47.53552], [38.28954, 47.39255], [38.22225, 47.30788], [38.33074, 47.30508], [38.32112, 47.2585], [38.23049, 47.2324], [38.22955, 47.12069], [38.3384, 46.98085], [38.12112, 46.86078], [37.62608, 46.82615], [35.23066, 45.79231], [35.04991, 45.76827], [36.6645, 45.4514], [36.6545, 45.3417], [36.5049, 45.3136], [36.475, 45.2411], [36.4883, 45.0488], [33.5943, 44.03313], [39.81147, 43.06294], [40.0078, 43.38551], [40.00853, 43.40578], [40.01552, 43.42025], [40.01007, 43.42411], [40.03312, 43.44262], [40.04445, 43.47776], [40.10657, 43.57344], [40.65957, 43.56212], [41.64935, 43.22331], [42.40563, 43.23226], [42.66667, 43.13917], [42.75889, 43.19651], [43.03322, 43.08883], [43.0419, 43.02413], [43.81453, 42.74297], [43.73119, 42.62043], [43.95517, 42.55396], [44.54202, 42.75699], [44.70002, 42.74679], [44.80941, 42.61277], [44.88754, 42.74934], [45.15318, 42.70598], [45.36501, 42.55268], [45.78692, 42.48358], [45.61676, 42.20768], [46.42738, 41.91323], [46.5332, 41.87389], [46.58924, 41.80547], [46.75269, 41.8623], [46.8134, 41.76252], [47.00955, 41.63583], [46.99554, 41.59743], [47.03757, 41.55434], [47.10762, 41.59044], [47.34579, 41.27884], [47.49004, 41.26366], [47.54504, 41.20275], [47.62288, 41.22969], [47.75831, 41.19455], [47.87973, 41.21798], [48.07587, 41.49957], [48.22064, 41.51472], [48.2878, 41.56221], [48.40277, 41.60441], [48.42301, 41.65444], [48.55078, 41.77917], [48.5867, 41.84306], [48.80971, 41.95365], [49.2134, 44.84989], [49.88945, 46.04554], [49.32259, 46.26944], [49.16518, 46.38542], [48.54988, 46.56267], [48.51142, 46.69268], [49.01136, 46.72716], [48.52326, 47.4102], [48.45173, 47.40818], [48.15348, 47.74545], [47.64973, 47.76559], [47.41689, 47.83687], [47.38731, 47.68176], [47.12107, 47.83687], [47.11516, 48.27188], [46.49011, 48.43019], [46.78392, 48.95352], [47.00857, 49.04921], [47.04658, 49.19834], [46.78398, 49.34026], [46.9078, 49.86707], [47.18319, 49.93721], [47.34589, 50.09308], [47.30448, 50.30894], [47.58551, 50.47867], [48.10044, 50.09242], [48.24519, 49.86099], [48.42564, 49.82283], [48.68352, 49.89546], [48.90782, 50.02281], [48.57946, 50.63278], [48.86936, 50.61589], [49.12673, 50.78639], [49.41959, 50.85927], [49.39001, 51.09396], [49.76866, 51.11067], [49.97277, 51.2405], [50.26859, 51.28677], [50.59695, 51.61859], [51.26254, 51.68466], [51.301, 51.48799], [51.77431, 51.49536], [51.8246, 51.67916], [52.36119, 51.74161], [52.54329, 51.48444], [53.46165, 51.49445], [53.69299, 51.23466], [54.12248, 51.11542], [54.46331, 50.85554], [54.41894, 50.61214], [54.55797, 50.52006], [54.71476, 50.61214], [54.56685, 51.01958], [54.72067, 51.03261], [55.67774, 50.54508], [56.11398, 50.7471], [56.17906, 50.93204], [57.17302, 51.11253], [57.44221, 50.88354], [57.74986, 50.93017], [57.75578, 51.13852], [58.3208, 51.15151], [58.87974, 50.70852], [59.48928, 50.64216], [59.51886, 50.49937], [59.81172, 50.54451], [60.01288, 50.8163], [60.17262, 50.83312], [60.31914, 50.67705], [60.81833, 50.6629], [61.4431, 50.80679], [61.56889, 51.23679], [61.6813, 51.25716], [61.55114, 51.32746], [61.50677, 51.40687], [60.95655, 51.48615], [60.92401, 51.61124], [60.5424, 51.61675], [60.36787, 51.66815], [60.50986, 51.7964], [60.09867, 51.87135], [59.99809, 51.98263], [59.91279, 52.06924], [60.17253, 52.25814], [60.17516, 52.39457], [59.25033, 52.46803], [59.22409, 52.28437], [58.79644, 52.43392], [58.94336, 53.953], [59.70487, 54.14846], [59.95217, 54.85853], [57.95234, 54.39672], [57.14829, 54.84204], [57.25137, 55.26262], [58.81825, 55.03378], [59.49035, 55.60486], [59.28419, 56.15739], [57.51527, 56.08729], [57.28024, 56.87898], [58.07604, 57.08308], [58.13789, 57.68097], [58.81412, 57.71602], [58.71104, 58.07475], [59.40376, 58.45822], [59.15636, 59.14682], [58.3853, 59.487], [59.50685, 60.91162], [59.36223, 61.3882], [59.61398, 62.44915], [59.24834, 63.01859], [59.80579, 64.13948], [59.63945, 64.78384], [60.74386, 64.95767], [61.98014, 65.72191], [66.1708, 67.61252], [64.18965, 69.94255], [76.13964, 83.37843], [36.85549, 84.09565], [32.07813, 72.01005], [31.59909, 70.16571], [30.84095, 69.80584], [30.95011, 69.54699], [30.52662, 69.54699], [30.16363, 69.65244], [29.97205, 69.41623], [29.27631, 69.2811], [29.26623, 69.13794], [29.0444, 69.0119], [28.91738, 69.04774], [28.45957, 68.91417], [28.78224, 68.86696], [28.43941, 68.53366], [28.62982, 68.19816], [29.34179, 68.06655], [29.66955, 67.79872], [30.02041, 67.67523], [29.91155, 67.51507], [28.9839, 66.94139], [29.91155, 66.13863], [30.16363, 65.66935], [29.97205, 65.70256], [29.74013, 65.64025], [29.84096, 65.56945], [29.68972, 65.31803], [29.61914, 65.23791], [29.8813, 65.22101], [29.84096, 65.1109], [29.61914, 65.05993], [29.68972, 64.80789], [30.05271, 64.79072], [30.12329, 64.64862], [30.01238, 64.57513], [30.06279, 64.35782], [30.4762, 64.25728], [30.55687, 64.09036], [30.25437, 63.83364], [29.98213, 63.75795], [30.49637, 63.46666], [31.23244, 63.22239], [31.29294, 63.09035], [31.58535, 62.91642], [31.38369, 62.66284], [31.10136, 62.43042], [29.01829, 61.17448], [28.82816, 61.1233], [28.47974, 60.93365], [27.77352, 60.52722], [27.71177, 60.3893], [27.44953, 60.22766], [26.32936, 60.00121]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1083368",
      nameEn: "Mainland Finland",
      country: "FI",
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["358"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[29.12697, 69.69193], [28.36883, 69.81658], [28.32849, 69.88605], [27.97558, 69.99671], [27.95542, 70.0965], [27.57226, 70.06215], [27.05802, 69.92069], [26.64461, 69.96565], [26.40261, 69.91377], [25.96904, 69.68397], [25.69679, 69.27039], [25.75729, 68.99383], [25.61613, 68.89602], [25.42455, 68.90328], [25.12206, 68.78684], [25.10189, 68.63307], [24.93048, 68.61102], [24.90023, 68.55579], [24.74898, 68.65143], [24.18432, 68.73936], [24.02299, 68.81601], [23.781, 68.84514], [23.68017, 68.70276], [23.13064, 68.64684], [22.53321, 68.74393], [22.38367, 68.71561], [22.27276, 68.89514], [21.63833, 69.27485], [21.27827, 69.31281], [21.00732, 69.22755], [20.98641, 69.18809], [21.11099, 69.10291], [21.05775, 69.0356], [20.72171, 69.11874], [20.55258, 69.06069], [20.78802, 69.03087], [20.91658, 68.96764], [20.85104, 68.93142], [20.90649, 68.89696], [21.03001, 68.88969], [22.00429, 68.50692], [22.73028, 68.40881], [23.10336, 68.26551], [23.15377, 68.14759], [23.26469, 68.15134], [23.40081, 68.05545], [23.65793, 67.9497], [23.45627, 67.85297], [23.54701, 67.59306], [23.39577, 67.46974], [23.75372, 67.43688], [23.75372, 67.29914], [23.54701, 67.25435], [23.58735, 67.20752], [23.56214, 67.17038], [23.98563, 66.84149], [23.98059, 66.79585], [23.89488, 66.772], [23.85959, 66.56434], [23.63776, 66.43568], [23.67591, 66.3862], [23.64982, 66.30603], [23.71339, 66.21299], [23.90497, 66.15802], [24.15791, 65.85385], [24.14798, 65.83466], [24.15107, 65.81427], [24.14112, 65.39731], [20.15877, 63.06556], [19.23413, 60.61414], [20.96741, 60.71528], [21.15143, 60.54555], [21.08159, 60.20167], [21.02509, 60.12142], [21.35468, 59.67511], [20.5104, 59.15546], [26.32936, 60.00121], [27.44953, 60.22766], [27.71177, 60.3893], [27.77352, 60.52722], [28.47974, 60.93365], [28.82816, 61.1233], [29.01829, 61.17448], [31.10136, 62.43042], [31.38369, 62.66284], [31.58535, 62.91642], [31.29294, 63.09035], [31.23244, 63.22239], [30.49637, 63.46666], [29.98213, 63.75795], [30.25437, 63.83364], [30.55687, 64.09036], [30.4762, 64.25728], [30.06279, 64.35782], [30.01238, 64.57513], [30.12329, 64.64862], [30.05271, 64.79072], [29.68972, 64.80789], [29.61914, 65.05993], [29.84096, 65.1109], [29.8813, 65.22101], [29.61914, 65.23791], [29.68972, 65.31803], [29.84096, 65.56945], [29.74013, 65.64025], [29.97205, 65.70256], [30.16363, 65.66935], [29.91155, 66.13863], [28.9839, 66.94139], [29.91155, 67.51507], [30.02041, 67.67523], [29.66955, 67.79872], [29.34179, 68.06655], [28.62982, 68.19816], [28.43941, 68.53366], [28.78224, 68.86696], [28.45957, 68.91417], [28.91738, 69.04774], [28.81248, 69.11997], [28.8629, 69.22395], [29.31664, 69.47994], [29.12697, 69.69193]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1184963",
      nameEn: "Alhucemas Islands",
      country: "ES",
      groups: ["EU", "Q191011", "015", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-3.90602, 35.21494], [-3.88372, 35.20767], [-3.89343, 35.22728], [-3.90602, 35.21494]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1298289",
      nameEn: "Egmont Islands",
      country: "GB",
      groups: ["IO", "BOTS", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[70.1848, -6.37445], [70.67958, -8.2663], [72.17991, -6.68509], [70.1848, -6.37445]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1352230",
      nameEn: "US Territories",
      country: "US",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1451600",
      nameEn: "Overseas Countries and Territories of the EU",
      aliases: ["OCT"],
      level: "subunion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1544253",
      nameEn: "Great Chagos Bank",
      country: "GB",
      groups: ["IO", "BOTS", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[70.1848, -6.37445], [72.17991, -6.68509], [73.20573, -5.20727], [70.1848, -6.37445]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1585511",
      nameEn: "Salomon Atoll",
      country: "GB",
      groups: ["IO", "BOTS", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[72.09518, -5.61768], [73.20573, -5.20727], [72.12587, -4.02588], [72.09518, -5.61768]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1681727",
      nameEn: "Saint-Paul and Amsterdam",
      country: "FR",
      groups: ["TF", "Q1451600", "014", "202", "002", "UN"],
      level: "subterritory"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[76.31747, -42.16264], [80.15867, -36.04977], [71.22311, -38.75287], [76.31747, -42.16264]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1901211",
      nameEn: "East Malaysia",
      country: "MY",
      groups: ["Q36117", "035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["60"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[110.90339, 7.52694], [109.82788, 2.86812], [109.62558, 1.99182], [109.53794, 1.91771], [109.57923, 1.80624], [109.66397, 1.79972], [109.66397, 1.60425], [110.35354, 0.98869], [110.49182, 0.88088], [110.62374, 0.873], [111.22979, 1.08326], [111.55434, 0.97864], [111.82846, 0.99349], [111.94553, 1.12016], [112.15679, 1.17004], [112.2127, 1.44135], [112.48648, 1.56516], [113.021, 1.57819], [113.01448, 1.42832], [113.64677, 1.23933], [114.03788, 1.44787], [114.57892, 1.5], [114.80706, 1.92351], [114.80706, 2.21665], [115.1721, 2.49671], [115.11343, 2.82879], [115.53713, 3.14776], [115.58276, 3.93499], [115.90217, 4.37708], [117.25801, 4.35108], [117.47313, 4.18857], [117.67641, 4.16535], [118.06469, 4.16638], [118.93936, 4.09009], [119.52945, 5.35672], [117.98544, 6.27477], [117.93857, 6.89845], [117.17735, 7.52841], [116.79524, 7.43869], [115.02521, 5.35005], [115.16236, 5.01011], [115.15092, 4.87604], [115.20737, 4.8256], [115.27819, 4.63661], [115.2851, 4.42295], [115.36346, 4.33563], [115.31275, 4.30806], [115.09978, 4.39123], [115.07737, 4.53418], [115.04064, 4.63706], [115.02278, 4.74137], [115.02955, 4.82087], [115.05038, 4.90275], [114.99417, 4.88201], [114.96982, 4.81146], [114.88841, 4.81905], [114.8266, 4.75062], [114.77303, 4.72871], [114.83189, 4.42387], [114.88039, 4.4257], [114.78539, 4.12205], [114.64211, 4.00694], [114.49922, 4.13108], [114.4416, 4.27588], [114.32176, 4.2552], [114.32176, 4.34942], [114.26876, 4.49878], [114.15813, 4.57], [114.07448, 4.58441], [114.10166, 4.76112], [110.90339, 7.52694]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q1973345",
      nameEn: "Peninsular Malaysia",
      country: "MY",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["60"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[102.46318, 7.22462], [102.09086, 6.23546], [102.08127, 6.22679], [102.07732, 6.193], [102.09182, 6.14161], [102.01835, 6.05407], [101.99209, 6.04075], [101.97114, 6.01992], [101.9714, 6.00575], [101.94712, 5.98421], [101.92819, 5.85511], [101.91776, 5.84269], [101.89188, 5.8386], [101.80144, 5.74505], [101.75074, 5.79091], [101.69773, 5.75881], [101.58019, 5.93534], [101.25524, 5.78633], [101.25755, 5.71065], [101.14062, 5.61613], [100.98815, 5.79464], [101.02708, 5.91013], [101.087, 5.9193], [101.12388, 6.11411], [101.06165, 6.14161], [101.12618, 6.19431], [101.10313, 6.25617], [100.85884, 6.24929], [100.81045, 6.45086], [100.74822, 6.46231], [100.74361, 6.50811], [100.66986, 6.45086], [100.43027, 6.52389], [100.42351, 6.51762], [100.41791, 6.5189], [100.41152, 6.52299], [100.35413, 6.54932], [100.31929, 6.65413], [100.32607, 6.65933], [100.32671, 6.66526], [100.31884, 6.66423], [100.31618, 6.66781], [100.30828, 6.66462], [100.29651, 6.68439], [100.19511, 6.72559], [100.12, 6.42105], [100.0756, 6.4045], [99.91873, 6.50233], [99.50117, 6.44501], [99.31854, 5.99868], [99.75778, 3.86466], [103.03657, 1.30383], [103.56591, 1.19719], [103.62738, 1.35255], [103.67468, 1.43166], [103.7219, 1.46108], [103.74161, 1.4502], [103.76395, 1.45183], [103.81181, 1.47953], [103.86383, 1.46288], [103.89565, 1.42841], [103.93384, 1.42926], [104.00131, 1.42405], [104.02277, 1.4438], [104.04622, 1.44691], [104.07348, 1.43322], [104.08871, 1.42015], [104.09162, 1.39694], [104.08072, 1.35998], [104.12282, 1.27714], [104.34728, 1.33529], [104.56723, 1.44271], [105.01437, 3.24936], [102.46318, 7.22462]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q2093907",
      nameEn: "Three Kings Islands",
      country: "NZ",
      groups: ["Q851132", "053", "009", "UN"],
      driveSide: "left"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[174.17679, -32.62487], [170.93268, -32.97889], [171.97383, -34.64644], [174.17679, -32.62487]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q2298216",
      nameEn: "Solander Islands",
      country: "NZ",
      groups: ["Q851132", "053", "009", "UN"],
      driveSide: "left"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[167.39068, -46.49187], [166.5534, -46.39484], [166.84561, -46.84889], [167.39068, -46.49187]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q2872203",
      nameEn: "Mainland Australia",
      country: "AU",
      groups: ["053", "009", "UN"],
      level: "subcountryGroup",
      driveSide: "left",
      callingCodes: ["61"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[88.16419, -23.49578], [123.64533, -39.13605], [159.74028, -39.1978], [159.76765, -29.76946], [154.02855, -24.43238], [152.93188, -20.92631], [147.69992, -17.5933], [145.2855, -9.62524], [143.87386, -9.02382], [143.29772, -9.33993], [142.48658, -9.36754], [142.19246, -9.15378], [141.88934, -9.36111], [141.01842, -9.35091], [135.49042, -9.2276], [127.55165, -9.05052], [125.29076, -12.33139], [88.16419, -23.49578]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q2914565",
      nameEn: "Autonomous Regions of Portugal",
      country: "PT",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q2915956",
      nameEn: "Mainland Portugal",
      country: "PT",
      groups: ["Q12837", "EU", "039", "150", "UN"],
      level: "subcountryGroup",
      callingCodes: ["351"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-10.39881, 36.12218], [-7.37282, 36.96896], [-7.39769, 37.16868], [-7.41133, 37.20314], [-7.41854, 37.23813], [-7.43227, 37.25152], [-7.43974, 37.38913], [-7.46878, 37.47127], [-7.51759, 37.56119], [-7.41981, 37.75729], [-7.33441, 37.81193], [-7.27314, 37.90145], [-7.24544, 37.98884], [-7.12648, 38.00296], [-7.10366, 38.04404], [-7.05966, 38.01966], [-7.00375, 38.01914], [-6.93418, 38.21454], [-7.09389, 38.17227], [-7.15581, 38.27597], [-7.32529, 38.44336], [-7.265, 38.61674], [-7.26174, 38.72107], [-7.03848, 38.87221], [-7.051, 38.907], [-6.95211, 39.0243], [-6.97004, 39.07619], [-7.04011, 39.11919], [-7.10692, 39.10275], [-7.14929, 39.11287], [-7.12811, 39.17101], [-7.23566, 39.20132], [-7.23403, 39.27579], [-7.3149, 39.34857], [-7.2927, 39.45847], [-7.49477, 39.58794], [-7.54121, 39.66717], [-7.33507, 39.64569], [-7.24707, 39.66576], [-7.01613, 39.66877], [-6.97492, 39.81488], [-6.91463, 39.86618], [-6.86737, 40.01986], [-6.94233, 40.10716], [-7.00589, 40.12087], [-7.02544, 40.18564], [-7.00426, 40.23169], [-6.86085, 40.26776], [-6.86085, 40.2976], [-6.80218, 40.33239], [-6.78426, 40.36468], [-6.84618, 40.42177], [-6.84944, 40.46394], [-6.7973, 40.51723], [-6.80218, 40.55067], [-6.84292, 40.56801], [-6.79567, 40.65955], [-6.82826, 40.74603], [-6.82337, 40.84472], [-6.79892, 40.84842], [-6.80707, 40.88047], [-6.84292, 40.89771], [-6.8527, 40.93958], [-6.9357, 41.02888], [-6.913, 41.03922], [-6.88843, 41.03027], [-6.84781, 41.02692], [-6.80942, 41.03629], [-6.79241, 41.05397], [-6.75655, 41.10187], [-6.77319, 41.13049], [-6.69711, 41.1858], [-6.68286, 41.21641], [-6.65046, 41.24725], [-6.55937, 41.24417], [-6.38551, 41.35274], [-6.38553, 41.38655], [-6.3306, 41.37677], [-6.26777, 41.48796], [-6.19128, 41.57638], [-6.29863, 41.66432], [-6.44204, 41.68258], [-6.49907, 41.65823], [-6.54633, 41.68623], [-6.56426, 41.74219], [-6.51374, 41.8758], [-6.56752, 41.88429], [-6.5447, 41.94371], [-6.58544, 41.96674], [-6.61967, 41.94008], [-6.75004, 41.94129], [-6.76959, 41.98734], [-6.81196, 41.99097], [-6.82174, 41.94493], [-6.94396, 41.94403], [-6.95537, 41.96553], [-6.98144, 41.9728], [-7.01078, 41.94977], [-7.07596, 41.94977], [-7.08574, 41.97401], [-7.14115, 41.98855], [-7.18549, 41.97515], [-7.18677, 41.88793], [-7.32366, 41.8406], [-7.37092, 41.85031], [-7.42864, 41.80589], [-7.42854, 41.83262], [-7.44759, 41.84451], [-7.45566, 41.86488], [-7.49803, 41.87095], [-7.52737, 41.83939], [-7.62188, 41.83089], [-7.58603, 41.87944], [-7.65774, 41.88308], [-7.69848, 41.90977], [-7.84188, 41.88065], [-7.88055, 41.84571], [-7.88751, 41.92553], [-7.90707, 41.92432], [-7.92336, 41.8758], [-7.9804, 41.87337], [-8.01136, 41.83453], [-8.0961, 41.81024], [-8.16455, 41.81753], [-8.16944, 41.87944], [-8.19551, 41.87459], [-8.2185, 41.91237], [-8.16232, 41.9828], [-8.08796, 42.01398], [-8.08847, 42.05767], [-8.11729, 42.08537], [-8.18178, 42.06436], [-8.19406, 42.12141], [-8.18947, 42.13853], [-8.1986, 42.15402], [-8.22406, 42.1328], [-8.24681, 42.13993], [-8.2732, 42.12396], [-8.29809, 42.106], [-8.32161, 42.10218], [-8.33912, 42.08358], [-8.36353, 42.09065], [-8.38323, 42.07683], [-8.40143, 42.08052], [-8.42512, 42.07199], [-8.44123, 42.08218], [-8.48185, 42.0811], [-8.52837, 42.07658], [-8.5252, 42.06264], [-8.54563, 42.0537], [-8.58086, 42.05147], [-8.59493, 42.05708], [-8.63791, 42.04691], [-8.64626, 42.03668], [-8.65832, 42.02972], [-8.6681, 41.99703], [-8.69071, 41.98862], [-8.7478, 41.96282], [-8.74606, 41.9469], [-8.75712, 41.92833], [-8.81794, 41.90375], [-8.87157, 41.86488], [-11.19304, 41.83075], [-10.39881, 36.12218]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3311985",
      nameEn: "Guernsey",
      country: "GB",
      groups: ["GG", "830", "Q185086", "154", "150", "UN"],
      level: "subterritory",
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44 01481"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.49556, 49.79012], [-3.28154, 49.57329], [-2.65349, 49.15373], [-2.36485, 49.48223], [-2.49556, 49.79012]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3320166",
      nameEn: "Outermost Regions of the EU",
      aliases: ["OMR"],
      level: "subunion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q3336843",
      nameEn: "Countries of the United Kingdom",
      country: "GB",
      level: "subcountryGroup"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q6736667",
      nameEn: "Mainland India",
      country: "IN",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["91"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[89.08044, 21.41871], [89.07114, 22.15335], [88.9367, 22.58527], [88.94614, 22.66941], [88.9151, 22.75228], [88.96713, 22.83346], [88.87063, 22.95235], [88.88327, 23.03885], [88.86377, 23.08759], [88.99148, 23.21134], [88.71133, 23.2492], [88.79254, 23.46028], [88.79351, 23.50535], [88.74841, 23.47361], [88.56507, 23.64044], [88.58087, 23.87105], [88.66189, 23.87607], [88.73743, 23.91751], [88.6976, 24.14703], [88.74841, 24.1959], [88.68801, 24.31464], [88.50934, 24.32474], [88.12296, 24.51301], [88.08786, 24.63232], [88.00683, 24.66477], [88.15515, 24.85806], [88.14004, 24.93529], [88.21832, 24.96642], [88.27325, 24.88796], [88.33917, 24.86803], [88.46277, 25.07468], [88.44766, 25.20149], [88.94067, 25.18534], [89.00463, 25.26583], [89.01105, 25.30303], [88.85278, 25.34679], [88.81296, 25.51546], [88.677, 25.46959], [88.4559, 25.59227], [88.45103, 25.66245], [88.242, 25.80811], [88.13138, 25.78773], [88.08804, 25.91334], [88.16581, 26.0238], [88.1844, 26.14417], [88.34757, 26.22216], [88.35153, 26.29123], [88.51649, 26.35923], [88.48749, 26.45855], [88.36938, 26.48683], [88.35153, 26.45241], [88.33093, 26.48929], [88.41196, 26.63837], [88.4298, 26.54489], [88.62144, 26.46783], [88.69485, 26.38353], [88.67837, 26.26291], [88.78961, 26.31093], [88.85004, 26.23211], [89.05328, 26.2469], [88.91321, 26.37984], [88.92357, 26.40711], [88.95612, 26.4564], [89.08899, 26.38845], [89.15869, 26.13708], [89.35953, 26.0077], [89.53515, 26.00382], [89.57101, 25.9682], [89.63968, 26.22595], [89.70201, 26.15138], [89.73581, 26.15818], [89.77865, 26.08387], [89.77728, 26.04254], [89.86592, 25.93115], [89.80585, 25.82489], [89.84388, 25.70042], [89.86129, 25.61714], [89.81208, 25.37244], [89.84086, 25.31854], [89.83371, 25.29548], [89.87629, 25.28337], [89.90478, 25.31038], [90.1155, 25.22686], [90.40034, 25.1534], [90.65042, 25.17788], [90.87427, 25.15799], [91.25517, 25.20677], [91.63648, 25.12846], [92.0316, 25.1834], [92.33957, 25.07593], [92.39147, 25.01471], [92.49887, 24.88796], [92.38626, 24.86055], [92.25854, 24.9191], [92.15796, 24.54435], [92.11662, 24.38997], [91.96603, 24.3799], [91.89258, 24.14674], [91.82596, 24.22345], [91.76004, 24.23848], [91.73257, 24.14703], [91.65292, 24.22095], [91.63782, 24.1132], [91.55542, 24.08687], [91.37414, 24.10693], [91.35741, 23.99072], [91.29587, 24.0041], [91.22308, 23.89616], [91.25192, 23.83463], [91.15579, 23.6599], [91.28293, 23.37538], [91.36453, 23.06612], [91.40848, 23.07117], [91.4035, 23.27522], [91.46615, 23.2328], [91.54993, 23.01051], [91.61571, 22.93929], [91.7324, 23.00043], [91.81634, 23.08001], [91.76417, 23.26619], [91.84789, 23.42235], [91.95642, 23.47361], [91.95093, 23.73284], [92.04706, 23.64229], [92.15417, 23.73409], [92.26541, 23.70392], [92.38214, 23.28705], [92.37665, 22.9435], [92.5181, 22.71441], [92.60029, 22.1522], [92.56616, 22.13554], [92.60949, 21.97638], [92.67532, 22.03547], [92.70416, 22.16017], [92.86208, 22.05456], [92.89504, 21.95143], [92.93899, 22.02656], [92.99804, 21.98964], [92.99255, 22.05965], [93.04885, 22.20595], [93.15734, 22.18687], [93.14224, 22.24535], [93.19991, 22.25425], [93.18206, 22.43716], [93.13537, 22.45873], [93.11477, 22.54374], [93.134, 22.59573], [93.09417, 22.69459], [93.134, 22.92498], [93.12988, 23.05772], [93.2878, 23.00464], [93.38478, 23.13698], [93.36862, 23.35426], [93.38781, 23.36139], [93.39981, 23.38828], [93.38805, 23.4728], [93.43475, 23.68299], [93.3908, 23.7622], [93.3908, 23.92925], [93.36059, 23.93176], [93.32351, 24.04468], [93.34735, 24.10151], [93.41415, 24.07854], [93.46633, 23.97067], [93.50616, 23.94432], [93.62871, 24.00922], [93.75952, 24.0003], [93.80279, 23.92549], [93.92089, 23.95812], [94.14081, 23.83333], [94.30215, 24.23752], [94.32362, 24.27692], [94.45279, 24.56656], [94.50729, 24.59281], [94.5526, 24.70764], [94.60204, 24.70889], [94.73937, 25.00545], [94.74212, 25.13606], [94.57458, 25.20318], [94.68032, 25.47003], [94.80117, 25.49359], [95.18556, 26.07338], [95.11428, 26.1019], [95.12801, 26.38397], [95.05798, 26.45408], [95.23513, 26.68499], [95.30339, 26.65372], [95.437, 26.7083], [95.81603, 27.01335], [95.93002, 27.04149], [96.04949, 27.19428], [96.15591, 27.24572], [96.40779, 27.29818], [96.55761, 27.29928], [96.73888, 27.36638], [96.88445, 27.25046], [96.85287, 27.2065], [96.89132, 27.17474], [97.14675, 27.09041], [97.17422, 27.14052], [96.91431, 27.45752], [96.90112, 27.62149], [97.29919, 27.92233], [97.35824, 27.87256], [97.38845, 28.01329], [97.35412, 28.06663], [97.31292, 28.06784], [97.34547, 28.21385], [97.1289, 28.3619], [96.98882, 28.32564], [96.88445, 28.39452], [96.85561, 28.4875], [96.6455, 28.61657], [96.48895, 28.42955], [96.40929, 28.51526], [96.61391, 28.72742], [96.3626, 29.10607], [96.20467, 29.02325], [96.18682, 29.11087], [96.31316, 29.18643], [96.05361, 29.38167], [95.84899, 29.31464], [95.75149, 29.32063], [95.72086, 29.20797], [95.50842, 29.13487], [95.41091, 29.13007], [95.3038, 29.13847], [95.26122, 29.07727], [95.2214, 29.10727], [95.11291, 29.09527], [95.0978, 29.14446], [94.81353, 29.17804], [94.69318, 29.31739], [94.2752, 29.11687], [94.35897, 29.01965], [93.72797, 28.68821], [93.44621, 28.67189], [93.18069, 28.50319], [93.14635, 28.37035], [92.93075, 28.25671], [92.67486, 28.15018], [92.65472, 28.07632], [92.73025, 28.05814], [92.7275, 27.98662], [92.42538, 27.80092], [92.32101, 27.79363], [92.27432, 27.89077], [91.87057, 27.7195], [91.84722, 27.76325], [91.6469, 27.76358], [91.55819, 27.6144], [91.65007, 27.48287], [92.01132, 27.47352], [92.12019, 27.27829], [92.04702, 27.26861], [92.03457, 27.07334], [92.11863, 26.893], [92.05523, 26.8692], [91.83181, 26.87318], [91.50067, 26.79223], [90.67715, 26.77215], [90.48504, 26.8594], [90.39271, 26.90704], [90.30402, 26.85098], [90.04535, 26.72422], [89.86124, 26.73307], [89.63369, 26.74402], [89.42349, 26.83727], [89.3901, 26.84225], [89.38319, 26.85963], [89.37913, 26.86224], [89.1926, 26.81329], [89.12825, 26.81661], [89.09554, 26.89089], [88.95807, 26.92668], [88.92301, 26.99286], [88.8714, 26.97488], [88.86984, 27.10937], [88.74219, 27.144], [88.91901, 27.32483], [88.82981, 27.38814], [88.77517, 27.45415], [88.88091, 27.85192], [88.83559, 28.01936], [88.63235, 28.12356], [88.54858, 28.06057], [88.25332, 27.9478], [88.1278, 27.95417], [88.13378, 27.88015], [88.1973, 27.85067], [88.19107, 27.79285], [88.04008, 27.49223], [88.07277, 27.43007], [88.01646, 27.21612], [88.01587, 27.21388], [87.9887, 27.11045], [88.11719, 26.98758], [88.13422, 26.98705], [88.12302, 26.95324], [88.19107, 26.75516], [88.1659, 26.68177], [88.16452, 26.64111], [88.09963, 26.54195], [88.09414, 26.43732], [88.00895, 26.36029], [87.90115, 26.44923], [87.89085, 26.48565], [87.84193, 26.43663], [87.7918, 26.46737], [87.76004, 26.40711], [87.67893, 26.43501], [87.66803, 26.40294], [87.59175, 26.38342], [87.55274, 26.40596], [87.51571, 26.43106], [87.46566, 26.44058], [87.37314, 26.40815], [87.34568, 26.34787], [87.26568, 26.37294], [87.26587, 26.40592], [87.24682, 26.4143], [87.18863, 26.40558], [87.14751, 26.40542], [87.09147, 26.45039], [87.0707, 26.58571], [87.04691, 26.58685], [87.01559, 26.53228], [86.95912, 26.52076], [86.94543, 26.52076], [86.82898, 26.43919], [86.76797, 26.45892], [86.74025, 26.42386], [86.69124, 26.45169], [86.62686, 26.46891], [86.61313, 26.48658], [86.57073, 26.49825], [86.54258, 26.53819], [86.49726, 26.54218], [86.31564, 26.61925], [86.26235, 26.61886], [86.22513, 26.58863], [86.13596, 26.60651], [86.02729, 26.66756], [85.8492, 26.56667], [85.85126, 26.60866], [85.83126, 26.61134], [85.76907, 26.63076], [85.72315, 26.67471], [85.73483, 26.79613], [85.66239, 26.84822], [85.61621, 26.86721], [85.59461, 26.85161], [85.5757, 26.85955], [85.56471, 26.84133], [85.47752, 26.79292], [85.34302, 26.74954], [85.21159, 26.75933], [85.18046, 26.80519], [85.19291, 26.86909], [85.15883, 26.86966], [85.02635, 26.85381], [85.05592, 26.88991], [85.00536, 26.89523], [84.97186, 26.9149], [84.96687, 26.95599], [84.85754, 26.98984], [84.82913, 27.01989], [84.793, 26.9968], [84.64496, 27.04669], [84.69166, 27.21294], [84.62161, 27.33885], [84.29315, 27.39], [84.25735, 27.44941], [84.21376, 27.45218], [84.10791, 27.52399], [84.02229, 27.43836], [83.93306, 27.44939], [83.86182, 27.4241], [83.85595, 27.35797], [83.61288, 27.47013], [83.39495, 27.4798], [83.38872, 27.39276], [83.35136, 27.33885], [83.29999, 27.32778], [83.2673, 27.36235], [83.27197, 27.38309], [83.19413, 27.45632], [82.94938, 27.46036], [82.93261, 27.50328], [82.74119, 27.49838], [82.70378, 27.72122], [82.46405, 27.6716], [82.06554, 27.92222], [81.97214, 27.93322], [81.91223, 27.84995], [81.47867, 28.08303], [81.48179, 28.12148], [81.38683, 28.17638], [81.32923, 28.13521], [81.19847, 28.36284], [81.03471, 28.40054], [80.55142, 28.69182], [80.50575, 28.6706], [80.52443, 28.54897], [80.44504, 28.63098], [80.37188, 28.63371], [80.12125, 28.82346], [80.06957, 28.82763], [80.05743, 28.91479], [80.18085, 29.13649], [80.23178, 29.11626], [80.26602, 29.13938], [80.24112, 29.21414], [80.28626, 29.20327], [80.31428, 29.30784], [80.24322, 29.44299], [80.37939, 29.57098], [80.41858, 29.63581], [80.38428, 29.68513], [80.36803, 29.73865], [80.41554, 29.79451], [80.43458, 29.80466], [80.48997, 29.79566], [80.56247, 29.86661], [80.57179, 29.91422], [80.60226, 29.95732], [80.67076, 29.95732], [80.8778, 30.13384], [80.86673, 30.17321], [80.91143, 30.22173], [80.92547, 30.17193], [81.03953, 30.20059], [80.83343, 30.32023], [80.54504, 30.44936], [80.20721, 30.58541], [79.93255, 30.88288], [79.59884, 30.93943], [79.30694, 31.17357], [79.14016, 31.43403], [79.01931, 31.42817], [78.89344, 31.30481], [78.77898, 31.31209], [78.71032, 31.50197], [78.84516, 31.60631], [78.69933, 31.78723], [78.78036, 31.99478], [78.74404, 32.00384], [78.68754, 32.10256], [78.49609, 32.2762], [78.4645, 32.45367], [78.38897, 32.53938], [78.73916, 32.69438], [78.7831, 32.46873], [78.96713, 32.33655], [78.99322, 32.37948], [79.0979, 32.38051], [79.13174, 32.47766], [79.26768, 32.53277], [79.46562, 32.69668], [79.14016, 33.02545], [79.15252, 33.17156], [78.73636, 33.56521], [78.67599, 33.66445], [78.77349, 33.73871], [78.73367, 34.01121], [78.65657, 34.03195], [78.66225, 34.08858], [78.91769, 34.15452], [78.99802, 34.3027], [79.05364, 34.32482], [78.74465, 34.45174], [78.56475, 34.50835], [78.54964, 34.57283], [78.27781, 34.61484], [78.18435, 34.7998], [78.22692, 34.88771], [78.00033, 35.23954], [78.03466, 35.3785], [78.11664, 35.48022], [77.80532, 35.52058], [77.70232, 35.46244], [77.44277, 35.46132], [76.96624, 35.5932], [76.84539, 35.67356], [76.77323, 35.66062], [76.75475, 35.52617], [76.85088, 35.39754], [76.93465, 35.39866], [77.11796, 35.05419], [76.99251, 34.93349], [76.87193, 34.96906], [76.74514, 34.92488], [76.74377, 34.84039], [76.67648, 34.76371], [76.47186, 34.78965], [76.15463, 34.6429], [76.04614, 34.67566], [75.75438, 34.51827], [75.38009, 34.55021], [75.01479, 34.64629], [74.6663, 34.703], [74.58083, 34.77386], [74.31239, 34.79626], [74.12897, 34.70073], [73.96423, 34.68244], [73.93401, 34.63386], [73.93951, 34.57169], [73.89419, 34.54568], [73.88732, 34.48911], [73.74999, 34.3781], [73.74862, 34.34183], [73.8475, 34.32935], [73.90517, 34.35317], [73.98208, 34.2522], [73.90677, 34.10504], [73.88732, 34.05105], [73.91341, 34.01235], [74.21554, 34.03853], [74.25262, 34.01577], [74.26086, 33.92237], [74.14001, 33.83002], [74.05898, 33.82089], [74.00891, 33.75437], [73.96423, 33.73071], [73.98968, 33.66155], [73.97367, 33.64061], [74.03576, 33.56718], [74.10115, 33.56392], [74.18121, 33.4745], [74.17983, 33.3679], [74.08782, 33.26232], [74.01366, 33.25199], [74.02144, 33.18908], [74.15374, 33.13477], [74.17571, 33.07495], [74.31854, 33.02891], [74.34875, 32.97823], [74.31227, 32.92795], [74.41467, 32.90563], [74.45312, 32.77755], [74.6289, 32.75561], [74.64675, 32.82604], [74.7113, 32.84219], [74.65345, 32.71225], [74.69542, 32.66792], [74.64424, 32.60985], [74.65251, 32.56416], [74.67431, 32.56676], [74.68362, 32.49298], [74.84725, 32.49075], [74.97634, 32.45367], [75.03265, 32.49538], [75.28259, 32.36556], [75.38046, 32.26836], [75.25649, 32.10187], [75.00793, 32.03786], [74.9269, 32.0658], [74.86236, 32.04485], [74.79919, 31.95983], [74.58907, 31.87824], [74.47771, 31.72227], [74.57498, 31.60382], [74.61517, 31.55698], [74.59319, 31.50197], [74.64713, 31.45605], [74.59773, 31.4136], [74.53223, 31.30321], [74.51629, 31.13829], [74.56023, 31.08303], [74.60281, 31.10419], [74.60006, 31.13711], [74.6852, 31.12771], [74.67971, 31.05479], [74.5616, 31.04153], [73.88993, 30.36305], [73.95736, 30.28466], [73.97225, 30.19829], [73.80299, 30.06969], [73.58665, 30.01848], [73.3962, 29.94707], [73.28094, 29.56646], [73.05886, 29.1878], [73.01337, 29.16422], [72.94272, 29.02487], [72.40402, 28.78283], [72.29495, 28.66367], [72.20329, 28.3869], [71.9244, 28.11555], [71.89921, 27.96035], [70.79054, 27.68423], [70.60927, 28.02178], [70.37307, 28.01208], [70.12502, 27.8057], [70.03136, 27.56627], [69.58519, 27.18109], [69.50904, 26.74892], [69.88555, 26.56836], [70.05584, 26.60398], [70.17532, 26.55362], [70.17532, 26.24118], [70.08193, 26.08094], [70.0985, 25.93238], [70.2687, 25.71156], [70.37444, 25.67443], [70.53649, 25.68928], [70.60378, 25.71898], [70.67382, 25.68186], [70.66695, 25.39314], [70.89148, 25.15064], [70.94002, 24.92843], [71.09405, 24.69017], [70.97594, 24.60904], [71.00341, 24.46038], [71.12838, 24.42662], [71.04461, 24.34657], [70.94985, 24.3791], [70.85784, 24.30903], [70.88393, 24.27398], [70.71502, 24.23517], [70.57906, 24.27774], [70.5667, 24.43787], [70.11712, 24.30915], [70.03428, 24.172], [69.73335, 24.17007], [69.59579, 24.29777], [69.29778, 24.28712], [69.19341, 24.25646], [69.07806, 24.29777], [68.97781, 24.26021], [68.90914, 24.33156], [68.7416, 24.31904], [68.74643, 23.97027], [68.39339, 23.96838], [68.20763, 23.85849], [68.11329, 23.53945], [76.59015, 5.591], [79.50447, 8.91876], [79.42124, 9.80115], [80.48418, 10.20786], [89.08044, 21.41871]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q9143535",
      nameEn: "Akrotiri",
      country: "GB",
      groups: ["Q644636", "Q37362", "BOTS", "145", "142", "UN"],
      level: "subterritory",
      driveSide: "left",
      callingCodes: ["357"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[32.86014, 34.70585], [32.82717, 34.70622], [32.79433, 34.67883], [32.76136, 34.68318], [32.75515, 34.64985], [32.74412, 34.43926], [33.26744, 34.49942], [33.0138, 34.64424], [32.96968, 34.64046], [32.96718, 34.63446], [32.95891, 34.62919], [32.95323, 34.64075], [32.95471, 34.64528], [32.94976, 34.65204], [32.94796, 34.6587], [32.95325, 34.66462], [32.97079, 34.66112], [32.97736, 34.65277], [32.99014, 34.65518], [32.98668, 34.67268], [32.99135, 34.68061], [32.95539, 34.68471], [32.94683, 34.67907], [32.94379, 34.67111], [32.93693, 34.67027], [32.93449, 34.66241], [32.92807, 34.66736], [32.93043, 34.67091], [32.91398, 34.67343], [32.9068, 34.66102], [32.86167, 34.68734], [32.86014, 34.70585]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q9206745",
      nameEn: "Dhekelia",
      country: "GB",
      groups: ["Q644636", "Q37362", "BOTS", "145", "142", "UN"],
      level: "subterritory",
      driveSide: "left",
      callingCodes: ["357"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.70575, 34.97947], [33.83531, 34.73974], [33.98684, 34.76642], [33.90075, 34.96623], [33.86432, 34.97592], [33.84811, 34.97075], [33.83505, 34.98108], [33.85621, 34.98956], [33.85891, 35.001], [33.85216, 35.00579], [33.84045, 35.00616], [33.82875, 35.01685], [33.83055, 35.02865], [33.81524, 35.04192], [33.8012, 35.04786], [33.82051, 35.0667], [33.8355, 35.05777], [33.85261, 35.0574], [33.88367, 35.07877], [33.89485, 35.06873], [33.90247, 35.07686], [33.91299, 35.07579], [33.91789, 35.08688], [33.89853, 35.11377], [33.88737, 35.11408], [33.88943, 35.12007], [33.88561, 35.12449], [33.87224, 35.12293], [33.87622, 35.10457], [33.87097, 35.09389], [33.87479, 35.08881], [33.8541, 35.07201], [33.84168, 35.06823], [33.82067, 35.07826], [33.78581, 35.05104], [33.76106, 35.04253], [33.73824, 35.05321], [33.71482, 35.03722], [33.70209, 35.04882], [33.7161, 35.07279], [33.70861, 35.07644], [33.69095, 35.06237], [33.68474, 35.06602], [33.67742, 35.05963], [33.67678, 35.03866], [33.69938, 35.03123], [33.69731, 35.01754], [33.71514, 35.00294], [33.70639, 34.99303], [33.70575, 34.97947]], [[33.77312, 34.9976], [33.77553, 34.99518], [33.78516, 34.99582], [33.79191, 34.98914], [33.78917, 34.98854], [33.78571, 34.98951], [33.78318, 34.98699], [33.78149, 34.98854], [33.77843, 34.988], [33.7778, 34.98981], [33.76738, 34.99188], [33.76605, 34.99543], [33.75682, 34.99916], [33.75994, 35.00113], [33.77312, 34.9976]], [[33.74144, 35.01053], [33.7343, 35.01178], [33.73781, 35.02181], [33.74265, 35.02329], [33.74983, 35.02274], [33.7492, 35.01319], [33.74144, 35.01053]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q16390686",
      nameEn: "Peninsular Spain",
      country: "ES",
      groups: ["Q12837", "EU", "039", "150", "UN"],
      callingCodes: ["34"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[3.75438, 42.33445], [3.17156, 42.43545], [3.11379, 42.43646], [3.10027, 42.42621], [3.08167, 42.42748], [3.03734, 42.47363], [2.96518, 42.46692], [2.94283, 42.48174], [2.92107, 42.4573], [2.88413, 42.45938], [2.86983, 42.46843], [2.85675, 42.45444], [2.84335, 42.45724], [2.77464, 42.41046], [2.75497, 42.42578], [2.72056, 42.42298], [2.65311, 42.38771], [2.6747, 42.33974], [2.57934, 42.35808], [2.55516, 42.35351], [2.54382, 42.33406], [2.48457, 42.33933], [2.43508, 42.37568], [2.43299, 42.39423], [2.38504, 42.39977], [2.25551, 42.43757], [2.20578, 42.41633], [2.16599, 42.42314], [2.12789, 42.41291], [2.11621, 42.38393], [2.06241, 42.35906], [2.00488, 42.35399], [1.96482, 42.37787], [1.9574, 42.42401], [1.94084, 42.43039], [1.94061, 42.43333], [1.94292, 42.44316], [1.93663, 42.45439], [1.88853, 42.4501], [1.83037, 42.48395], [1.76335, 42.48863], [1.72515, 42.50338], [1.70571, 42.48867], [1.66826, 42.50779], [1.65674, 42.47125], [1.58933, 42.46275], [1.57953, 42.44957], [1.55937, 42.45808], [1.55073, 42.43299], [1.5127, 42.42959], [1.44529, 42.43724], [1.43838, 42.47848], [1.41648, 42.48315], [1.46661, 42.50949], [1.44759, 42.54431], [1.41245, 42.53539], [1.4234, 42.55959], [1.44529, 42.56722], [1.42512, 42.58292], [1.44197, 42.60217], [1.35562, 42.71944], [1.15928, 42.71407], [1.0804, 42.78569], [0.98292, 42.78754], [0.96166, 42.80629], [0.93089, 42.79154], [0.711, 42.86372], [0.66121, 42.84021], [0.65421, 42.75872], [0.67873, 42.69458], [0.40214, 42.69779], [0.36251, 42.72282], [0.29407, 42.67431], [0.25336, 42.7174], [0.17569, 42.73424], [-0.02468, 42.68513], [-0.10519, 42.72761], [-0.16141, 42.79535], [-0.17939, 42.78974], [-0.3122, 42.84788], [-0.38833, 42.80132], [-0.41319, 42.80776], [-0.44334, 42.79939], [-0.50863, 42.82713], [-0.55497, 42.77846], [-0.67637, 42.88303], [-0.69837, 42.87945], [-0.72608, 42.89318], [-0.73422, 42.91228], [-0.72037, 42.92541], [-0.75478, 42.96916], [-0.81652, 42.95166], [-0.97133, 42.96239], [-1.00963, 42.99279], [-1.10333, 43.0059], [-1.22881, 43.05534], [-1.25244, 43.04164], [-1.30531, 43.06859], [-1.30052, 43.09581], [-1.27118, 43.11961], [-1.32209, 43.1127], [-1.34419, 43.09665], [-1.35272, 43.02658], [-1.44067, 43.047], [-1.47555, 43.08372], [-1.41562, 43.12815], [-1.3758, 43.24511], [-1.40942, 43.27272], [-1.45289, 43.27049], [-1.50992, 43.29481], [-1.55963, 43.28828], [-1.57674, 43.25269], [-1.61341, 43.25269], [-1.63052, 43.28591], [-1.62481, 43.30726], [-1.69407, 43.31378], [-1.73074, 43.29481], [-1.7397, 43.32979], [-1.75079, 43.3317], [-1.75334, 43.34107], [-1.77068, 43.34396], [-1.78714, 43.35476], [-1.78332, 43.36399], [-1.79319, 43.37497], [-1.77289, 43.38957], [-1.81005, 43.59738], [-10.14298, 44.17365], [-11.19304, 41.83075], [-8.87157, 41.86488], [-8.81794, 41.90375], [-8.75712, 41.92833], [-8.74606, 41.9469], [-8.7478, 41.96282], [-8.69071, 41.98862], [-8.6681, 41.99703], [-8.65832, 42.02972], [-8.64626, 42.03668], [-8.63791, 42.04691], [-8.59493, 42.05708], [-8.58086, 42.05147], [-8.54563, 42.0537], [-8.5252, 42.06264], [-8.52837, 42.07658], [-8.48185, 42.0811], [-8.44123, 42.08218], [-8.42512, 42.07199], [-8.40143, 42.08052], [-8.38323, 42.07683], [-8.36353, 42.09065], [-8.33912, 42.08358], [-8.32161, 42.10218], [-8.29809, 42.106], [-8.2732, 42.12396], [-8.24681, 42.13993], [-8.22406, 42.1328], [-8.1986, 42.15402], [-8.18947, 42.13853], [-8.19406, 42.12141], [-8.18178, 42.06436], [-8.11729, 42.08537], [-8.08847, 42.05767], [-8.08796, 42.01398], [-8.16232, 41.9828], [-8.2185, 41.91237], [-8.19551, 41.87459], [-8.16944, 41.87944], [-8.16455, 41.81753], [-8.0961, 41.81024], [-8.01136, 41.83453], [-7.9804, 41.87337], [-7.92336, 41.8758], [-7.90707, 41.92432], [-7.88751, 41.92553], [-7.88055, 41.84571], [-7.84188, 41.88065], [-7.69848, 41.90977], [-7.65774, 41.88308], [-7.58603, 41.87944], [-7.62188, 41.83089], [-7.52737, 41.83939], [-7.49803, 41.87095], [-7.45566, 41.86488], [-7.44759, 41.84451], [-7.42854, 41.83262], [-7.42864, 41.80589], [-7.37092, 41.85031], [-7.32366, 41.8406], [-7.18677, 41.88793], [-7.18549, 41.97515], [-7.14115, 41.98855], [-7.08574, 41.97401], [-7.07596, 41.94977], [-7.01078, 41.94977], [-6.98144, 41.9728], [-6.95537, 41.96553], [-6.94396, 41.94403], [-6.82174, 41.94493], [-6.81196, 41.99097], [-6.76959, 41.98734], [-6.75004, 41.94129], [-6.61967, 41.94008], [-6.58544, 41.96674], [-6.5447, 41.94371], [-6.56752, 41.88429], [-6.51374, 41.8758], [-6.56426, 41.74219], [-6.54633, 41.68623], [-6.49907, 41.65823], [-6.44204, 41.68258], [-6.29863, 41.66432], [-6.19128, 41.57638], [-6.26777, 41.48796], [-6.3306, 41.37677], [-6.38553, 41.38655], [-6.38551, 41.35274], [-6.55937, 41.24417], [-6.65046, 41.24725], [-6.68286, 41.21641], [-6.69711, 41.1858], [-6.77319, 41.13049], [-6.75655, 41.10187], [-6.79241, 41.05397], [-6.80942, 41.03629], [-6.84781, 41.02692], [-6.88843, 41.03027], [-6.913, 41.03922], [-6.9357, 41.02888], [-6.8527, 40.93958], [-6.84292, 40.89771], [-6.80707, 40.88047], [-6.79892, 40.84842], [-6.82337, 40.84472], [-6.82826, 40.74603], [-6.79567, 40.65955], [-6.84292, 40.56801], [-6.80218, 40.55067], [-6.7973, 40.51723], [-6.84944, 40.46394], [-6.84618, 40.42177], [-6.78426, 40.36468], [-6.80218, 40.33239], [-6.86085, 40.2976], [-6.86085, 40.26776], [-7.00426, 40.23169], [-7.02544, 40.18564], [-7.00589, 40.12087], [-6.94233, 40.10716], [-6.86737, 40.01986], [-6.91463, 39.86618], [-6.97492, 39.81488], [-7.01613, 39.66877], [-7.24707, 39.66576], [-7.33507, 39.64569], [-7.54121, 39.66717], [-7.49477, 39.58794], [-7.2927, 39.45847], [-7.3149, 39.34857], [-7.23403, 39.27579], [-7.23566, 39.20132], [-7.12811, 39.17101], [-7.14929, 39.11287], [-7.10692, 39.10275], [-7.04011, 39.11919], [-6.97004, 39.07619], [-6.95211, 39.0243], [-7.051, 38.907], [-7.03848, 38.87221], [-7.26174, 38.72107], [-7.265, 38.61674], [-7.32529, 38.44336], [-7.15581, 38.27597], [-7.09389, 38.17227], [-6.93418, 38.21454], [-7.00375, 38.01914], [-7.05966, 38.01966], [-7.10366, 38.04404], [-7.12648, 38.00296], [-7.24544, 37.98884], [-7.27314, 37.90145], [-7.33441, 37.81193], [-7.41981, 37.75729], [-7.51759, 37.56119], [-7.46878, 37.47127], [-7.43974, 37.38913], [-7.43227, 37.25152], [-7.41854, 37.23813], [-7.41133, 37.20314], [-7.39769, 37.16868], [-7.37282, 36.96896], [-7.2725, 35.73269], [-5.10878, 36.05227], [-2.27707, 35.35051], [3.75438, 42.33445]], [[-5.27801, 36.14942], [-5.34064, 36.03744], [-5.40526, 36.15488], [-5.34536, 36.15501], [-5.33822, 36.15272], [-5.27801, 36.14942]]], [[[1.99838, 42.44682], [2.01564, 42.45171], [1.99216, 42.46208], [1.98579, 42.47486], [1.99766, 42.4858], [1.98916, 42.49351], [1.98022, 42.49569], [1.97697, 42.48568], [1.97227, 42.48487], [1.97003, 42.48081], [1.96215, 42.47854], [1.95606, 42.45785], [1.96125, 42.45364], [1.98378, 42.44697], [1.99838, 42.44682]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q98059339",
      nameEn: "Mainland Norway",
      country: "NO",
      groups: ["154", "150", "UN"],
      callingCodes: ["47"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[10.40861, 58.38489], [10.64958, 58.89391], [11.08911, 58.98745], [11.15367, 59.07862], [11.34459, 59.11672], [11.4601, 58.99022], [11.45199, 58.89604], [11.65732, 58.90177], [11.8213, 59.24985], [11.69297, 59.59442], [11.92112, 59.69531], [11.87121, 59.86039], [12.15641, 59.8926], [12.36317, 59.99259], [12.52003, 60.13846], [12.59133, 60.50559], [12.2277, 61.02442], [12.69115, 61.06584], [12.86939, 61.35427], [12.57707, 61.56547], [12.40595, 61.57226], [12.14746, 61.7147], [12.29187, 62.25699], [12.07085, 62.6297], [12.19919, 63.00104], [11.98529, 63.27487], [12.19919, 63.47935], [12.14928, 63.59373], [12.74105, 64.02171], [13.23411, 64.09087], [13.98222, 64.00953], [14.16051, 64.18725], [14.11117, 64.46674], [13.64276, 64.58402], [14.50926, 65.31786], [14.53778, 66.12399], [15.05113, 66.15572], [15.49318, 66.28509], [15.37197, 66.48217], [16.35589, 67.06419], [16.39154, 67.21653], [16.09922, 67.4364], [16.12774, 67.52106], [16.38441, 67.52923], [16.7409, 67.91037], [17.30416, 68.11591], [17.90787, 67.96537], [18.13836, 68.20874], [18.1241, 68.53721], [18.39503, 68.58672], [18.63032, 68.50849], [18.97255, 68.52416], [19.93508, 68.35911], [20.22027, 68.48759], [19.95647, 68.55546], [20.22027, 68.67246], [20.33435, 68.80174], [20.28444, 68.93283], [20.0695, 69.04469], [20.55258, 69.06069], [20.72171, 69.11874], [21.05775, 69.0356], [21.11099, 69.10291], [20.98641, 69.18809], [21.00732, 69.22755], [21.27827, 69.31281], [21.63833, 69.27485], [22.27276, 68.89514], [22.38367, 68.71561], [22.53321, 68.74393], [23.13064, 68.64684], [23.68017, 68.70276], [23.781, 68.84514], [24.02299, 68.81601], [24.18432, 68.73936], [24.74898, 68.65143], [24.90023, 68.55579], [24.93048, 68.61102], [25.10189, 68.63307], [25.12206, 68.78684], [25.42455, 68.90328], [25.61613, 68.89602], [25.75729, 68.99383], [25.69679, 69.27039], [25.96904, 69.68397], [26.40261, 69.91377], [26.64461, 69.96565], [27.05802, 69.92069], [27.57226, 70.06215], [27.95542, 70.0965], [27.97558, 69.99671], [28.32849, 69.88605], [28.36883, 69.81658], [29.12697, 69.69193], [29.31664, 69.47994], [28.8629, 69.22395], [28.81248, 69.11997], [28.91738, 69.04774], [29.0444, 69.0119], [29.26623, 69.13794], [29.27631, 69.2811], [29.97205, 69.41623], [30.16363, 69.65244], [30.52662, 69.54699], [30.95011, 69.54699], [30.84095, 69.80584], [31.59909, 70.16571], [32.07813, 72.01005], [-11.60274, 67.73467], [7.28637, 57.35913], [10.40861, 58.38489]]]]
    }
  }, {
    type: "Feature",
    properties: {
      wikidata: "Q98543636",
      nameEn: "Mainland Ecuador",
      country: "EC",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["593"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-84.52388, -3.36941], [-80.30602, -3.39149], [-80.20647, -3.431], [-80.24123, -3.46124], [-80.24586, -3.48677], [-80.23651, -3.48652], [-80.22629, -3.501], [-80.20535, -3.51667], [-80.21642, -3.5888], [-80.19848, -3.59249], [-80.18741, -3.63994], [-80.19926, -3.68894], [-80.13232, -3.90317], [-80.46386, -4.01342], [-80.4822, -4.05477], [-80.45023, -4.20938], [-80.32114, -4.21323], [-80.46386, -4.41516], [-80.39256, -4.48269], [-80.13945, -4.29786], [-79.79722, -4.47558], [-79.59402, -4.46848], [-79.26248, -4.95167], [-79.1162, -4.97774], [-79.01659, -5.01481], [-78.85149, -4.66795], [-78.68394, -4.60754], [-78.34362, -3.38633], [-78.24589, -3.39907], [-78.22642, -3.51113], [-78.14324, -3.47653], [-78.19369, -3.36431], [-77.94147, -3.05454], [-76.6324, -2.58397], [-76.05203, -2.12179], [-75.57429, -1.55961], [-75.3872, -0.9374], [-75.22862, -0.95588], [-75.22862, -0.60048], [-75.53615, -0.19213], [-75.60169, -0.18708], [-75.61997, -0.10012], [-75.40192, -0.17196], [-75.25764, -0.11943], [-75.82927, 0.09578], [-76.23441, 0.42294], [-76.41215, 0.38228], [-76.4094, 0.24015], [-76.89177, 0.24736], [-77.52001, 0.40782], [-77.49984, 0.64476], [-77.67815, 0.73863], [-77.66416, 0.81604], [-77.68613, 0.83029], [-77.7148, 0.85003], [-77.85677, 0.80197], [-78.42749, 1.15389], [-78.87137, 1.47457], [-82.12561, 4.00341], [-84.52388, -3.36941]]]]
    }
  }, {
    type: "Feature",
    properties: {
      m49: "001",
      wikidata: "Q2",
      nameEn: "World",
      aliases: ["Earth", "Planet"],
      level: "world"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "002",
      wikidata: "Q15",
      nameEn: "Africa",
      level: "region"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "003",
      wikidata: "Q49",
      nameEn: "North America",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "005",
      wikidata: "Q18",
      nameEn: "South America",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "009",
      wikidata: "Q538",
      nameEn: "Oceania",
      level: "region"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "011",
      wikidata: "Q4412",
      nameEn: "Western Africa",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "013",
      wikidata: "Q27611",
      nameEn: "Central America",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "014",
      wikidata: "Q27407",
      nameEn: "Eastern Africa",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "015",
      wikidata: "Q27381",
      nameEn: "Northern Africa",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "017",
      wikidata: "Q27433",
      nameEn: "Middle Africa",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "018",
      wikidata: "Q27394",
      nameEn: "Southern Africa",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "019",
      wikidata: "Q828",
      nameEn: "Americas",
      level: "region"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "021",
      wikidata: "Q2017699",
      nameEn: "Northern America",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "029",
      wikidata: "Q664609",
      nameEn: "Caribbean",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "030",
      wikidata: "Q27231",
      nameEn: "Eastern Asia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "034",
      wikidata: "Q771405",
      nameEn: "Southern Asia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "035",
      wikidata: "Q11708",
      nameEn: "South-eastern Asia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "039",
      wikidata: "Q27449",
      nameEn: "Southern Europe",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "053",
      wikidata: "Q45256",
      nameEn: "Australia and New Zealand",
      aliases: ["Australasia"],
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "054",
      wikidata: "Q37394",
      nameEn: "Melanesia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "057",
      wikidata: "Q3359409",
      nameEn: "Micronesia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "061",
      wikidata: "Q35942",
      nameEn: "Polynesia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "142",
      wikidata: "Q48",
      nameEn: "Asia",
      level: "region"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "143",
      wikidata: "Q27275",
      nameEn: "Central Asia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "145",
      wikidata: "Q27293",
      nameEn: "Western Asia",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "150",
      wikidata: "Q46",
      nameEn: "Europe",
      level: "region"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "151",
      wikidata: "Q27468",
      nameEn: "Eastern Europe",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "154",
      wikidata: "Q27479",
      nameEn: "Northern Europe",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "155",
      wikidata: "Q27496",
      nameEn: "Western Europe",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "202",
      wikidata: "Q132959",
      nameEn: "Sub-Saharan Africa",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "419",
      wikidata: "Q72829598",
      nameEn: "Latin America and the Caribbean",
      level: "subregion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      m49: "680",
      wikidata: "Q3405693",
      nameEn: "Sark",
      country: "GB",
      groups: ["GG", "830", "Q185086", "154", "150", "UN"],
      level: "subterritory",
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44 01481"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.36485, 49.48223], [-2.65349, 49.15373], [-2.09454, 49.46288], [-2.36485, 49.48223]]]]
    }
  }, {
    type: "Feature",
    properties: {
      m49: "830",
      wikidata: "Q42314",
      nameEn: "Channel Islands",
      level: "intermediateRegion"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AC",
      iso1A3: "ASC",
      wikidata: "Q46197",
      nameEn: "Ascension Island",
      aliases: ["SH-AC"],
      country: "GB",
      groups: ["SH", "BOTS", "011", "202", "002", "UN"],
      isoStatus: "excRes",
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["247"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-14.82771, -8.70814], [-13.33271, -8.07391], [-14.91926, -6.63386], [-14.82771, -8.70814]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AD",
      iso1A3: "AND",
      iso1N3: "020",
      wikidata: "Q228",
      nameEn: "Andorra",
      groups: ["Q12837", "039", "150", "UN"],
      callingCodes: ["376"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[1.72515, 42.50338], [1.73683, 42.55492], [1.7858, 42.57698], [1.72588, 42.59098], [1.73452, 42.61515], [1.68267, 42.62533], [1.6625, 42.61982], [1.63485, 42.62957], [1.60085, 42.62703], [1.55418, 42.65669], [1.50867, 42.64483], [1.48043, 42.65203], [1.46718, 42.63296], [1.47986, 42.61346], [1.44197, 42.60217], [1.42512, 42.58292], [1.44529, 42.56722], [1.4234, 42.55959], [1.41245, 42.53539], [1.44759, 42.54431], [1.46661, 42.50949], [1.41648, 42.48315], [1.43838, 42.47848], [1.44529, 42.43724], [1.5127, 42.42959], [1.55073, 42.43299], [1.55937, 42.45808], [1.57953, 42.44957], [1.58933, 42.46275], [1.65674, 42.47125], [1.66826, 42.50779], [1.70571, 42.48867], [1.72515, 42.50338]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AE",
      iso1A3: "ARE",
      iso1N3: "784",
      wikidata: "Q878",
      nameEn: "United Arab Emirates",
      groups: ["145", "142", "UN"],
      callingCodes: ["971"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[56.26534, 25.62825], [56.25341, 25.61443], [56.26636, 25.60643], [56.25365, 25.60211], [56.20473, 25.61119], [56.18363, 25.65508], [56.14826, 25.66351], [56.13579, 25.73524], [56.17416, 25.77239], [56.13963, 25.82765], [56.19334, 25.9795], [56.15498, 26.06828], [56.08666, 26.05038], [55.81777, 26.18798], [55.14145, 25.62624], [53.97892, 24.64436], [52.82259, 25.51697], [52.35509, 25.00368], [52.02277, 24.75635], [51.83108, 24.71675], [51.58834, 24.66608], [51.41644, 24.39615], [51.58871, 24.27256], [51.59617, 24.12041], [52.56622, 22.94341], [55.13599, 22.63334], [55.2137, 22.71065], [55.22634, 23.10378], [55.57358, 23.669], [55.48677, 23.94946], [55.73301, 24.05994], [55.8308, 24.01633], [56.01799, 24.07426], [55.95472, 24.2172], [55.83367, 24.20193], [55.77658, 24.23476], [55.76558, 24.23227], [55.75257, 24.23466], [55.75382, 24.2466], [55.75939, 24.26114], [55.76781, 24.26209], [55.79145, 24.27914], [55.80747, 24.31069], [55.83395, 24.32776], [55.83271, 24.41521], [55.76461, 24.5287], [55.83271, 24.68567], [55.83408, 24.77858], [55.81348, 24.80102], [55.81116, 24.9116], [55.85094, 24.96858], [55.90849, 24.96771], [55.96316, 25.00857], [56.05715, 24.95727], [56.05106, 24.87461], [55.97467, 24.89639], [55.97836, 24.87673], [56.03535, 24.81161], [56.06128, 24.74457], [56.13684, 24.73699], [56.20062, 24.78565], [56.20568, 24.85063], [56.30269, 24.88334], [56.34873, 24.93205], [56.3227, 24.97284], [56.86325, 25.03856], [56.82555, 25.7713], [56.26534, 25.62825]], [[56.26062, 25.33108], [56.3005, 25.31815], [56.3111, 25.30107], [56.35172, 25.30681], [56.34438, 25.26653], [56.27628, 25.23404], [56.24341, 25.22867], [56.20872, 25.24104], [56.20838, 25.25668], [56.24465, 25.27505], [56.25008, 25.28843], [56.23362, 25.31253], [56.26062, 25.33108]]], [[[56.28423, 25.26344], [56.29379, 25.2754], [56.28102, 25.28486], [56.2716, 25.27916], [56.27086, 25.26128], [56.28423, 25.26344]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AF",
      iso1A3: "AFG",
      iso1N3: "004",
      wikidata: "Q889",
      nameEn: "Afghanistan",
      groups: ["034", "142", "UN"],
      callingCodes: ["93"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[70.61526, 38.34774], [70.60407, 38.28046], [70.54673, 38.24541], [70.4898, 38.12546], [70.17206, 37.93276], [70.1863, 37.84296], [70.27694, 37.81258], [70.28243, 37.66706], [70.15015, 37.52519], [69.95971, 37.5659], [69.93362, 37.61378], [69.84435, 37.60616], [69.80041, 37.5746], [69.51888, 37.5844], [69.44954, 37.4869], [69.36645, 37.40462], [69.45022, 37.23315], [69.39529, 37.16752], [69.25152, 37.09426], [69.03274, 37.25174], [68.96407, 37.32603], [68.88168, 37.33368], [68.91189, 37.26704], [68.80889, 37.32494], [68.81438, 37.23862], [68.6798, 37.27906], [68.61851, 37.19815], [68.41888, 37.13906], [68.41201, 37.10402], [68.29253, 37.10621], [68.27605, 37.00977], [68.18542, 37.02074], [68.02194, 36.91923], [67.87917, 37.0591], [67.7803, 37.08978], [67.78329, 37.1834], [67.51868, 37.26102], [67.2581, 37.17216], [67.2224, 37.24545], [67.13039, 37.27168], [67.08232, 37.35469], [66.95598, 37.40162], [66.64699, 37.32958], [66.55743, 37.35409], [66.30993, 37.32409], [65.72274, 37.55438], [65.64137, 37.45061], [65.64263, 37.34388], [65.51778, 37.23881], [64.97945, 37.21913], [64.61141, 36.6351], [64.62514, 36.44311], [64.57295, 36.34362], [64.43288, 36.24401], [64.05385, 36.10433], [63.98519, 36.03773], [63.56496, 35.95106], [63.53475, 35.90881], [63.29579, 35.85985], [63.12276, 35.86208], [63.10318, 35.81782], [63.23262, 35.67487], [63.10079, 35.63024], [63.12276, 35.53196], [63.0898, 35.43131], [62.90853, 35.37086], [62.74098, 35.25432], [62.62288, 35.22067], [62.48006, 35.28796], [62.29878, 35.13312], [62.29191, 35.25964], [62.15871, 35.33278], [62.05709, 35.43803], [61.97743, 35.4604], [61.77693, 35.41341], [61.58742, 35.43803], [61.27371, 35.61482], [61.18187, 35.30249], [61.0991, 35.27845], [61.12831, 35.09938], [61.06926, 34.82139], [61.00197, 34.70631], [60.99922, 34.63064], [60.72316, 34.52857], [60.91321, 34.30411], [60.66502, 34.31539], [60.50209, 34.13992], [60.5838, 33.80793], [60.5485, 33.73422], [60.57762, 33.59772], [60.69573, 33.56054], [60.91133, 33.55596], [60.88908, 33.50219], [60.56485, 33.12944], [60.86191, 32.22565], [60.84541, 31.49561], [61.70929, 31.37391], [61.80569, 31.16167], [61.80957, 31.12576], [61.83257, 31.0452], [61.8335, 30.97669], [61.78268, 30.92724], [61.80829, 30.84224], [60.87231, 29.86514], [62.47751, 29.40782], [63.5876, 29.50456], [64.12966, 29.39157], [64.19796, 29.50407], [64.62116, 29.58903], [65.04005, 29.53957], [66.24175, 29.85181], [66.36042, 29.9583], [66.23609, 30.06321], [66.34869, 30.404], [66.28413, 30.57001], [66.39194, 30.9408], [66.42645, 30.95309], [66.58175, 30.97532], [66.68166, 31.07597], [66.72561, 31.20526], [66.83273, 31.26867], [67.04147, 31.31561], [67.03323, 31.24519], [67.29964, 31.19586], [67.78854, 31.33203], [67.7748, 31.4188], [67.62374, 31.40473], [67.58323, 31.52772], [67.72056, 31.52304], [67.86887, 31.63536], [68.00071, 31.6564], [68.1655, 31.82691], [68.25614, 31.80357], [68.27605, 31.75863], [68.44222, 31.76446], [68.57475, 31.83158], [68.6956, 31.75687], [68.79997, 31.61665], [68.91078, 31.59687], [68.95995, 31.64822], [69.00939, 31.62249], [69.11514, 31.70782], [69.20577, 31.85957], [69.3225, 31.93186], [69.27032, 32.14141], [69.27932, 32.29119], [69.23599, 32.45946], [69.2868, 32.53938], [69.38155, 32.56601], [69.44747, 32.6678], [69.43649, 32.7302], [69.38018, 32.76601], [69.47082, 32.85834], [69.5436, 32.8768], [69.49854, 32.88843], [69.49004, 33.01509], [69.57656, 33.09911], [69.71526, 33.09911], [69.79766, 33.13247], [69.85259, 33.09451], [70.02563, 33.14282], [70.07369, 33.22557], [70.13686, 33.21064], [70.32775, 33.34496], [70.17062, 33.53535], [70.20141, 33.64387], [70.14785, 33.6553], [70.14236, 33.71701], [70.00503, 33.73528], [69.85671, 33.93719], [69.87307, 33.9689], [69.90203, 34.04194], [70.54336, 33.9463], [70.88119, 33.97933], [71.07345, 34.06242], [71.06933, 34.10564], [71.09307, 34.11961], [71.09453, 34.13524], [71.13078, 34.16503], [71.12815, 34.26619], [71.17662, 34.36769], [71.02401, 34.44835], [71.0089, 34.54568], [71.11602, 34.63047], [71.08718, 34.69034], [71.28356, 34.80882], [71.29472, 34.87728], [71.50329, 34.97328], [71.49917, 35.00478], [71.55273, 35.02615], [71.52938, 35.09023], [71.67495, 35.21262], [71.5541, 35.28776], [71.54294, 35.31037], [71.65435, 35.4479], [71.49917, 35.6267], [71.55273, 35.71483], [71.37969, 35.95865], [71.19505, 36.04134], [71.60491, 36.39429], [71.80267, 36.49924], [72.18135, 36.71838], [72.6323, 36.84601], [73.82685, 36.91421], [74.04856, 36.82648], [74.43389, 37.00977], [74.53739, 36.96224], [74.56453, 37.03023], [74.49981, 37.24518], [74.80605, 37.21565], [74.88887, 37.23275], [74.8294, 37.3435], [74.68383, 37.3948], [74.56161, 37.37734], [74.41055, 37.3948], [74.23339, 37.41116], [74.20308, 37.34208], [73.8564, 37.26158], [73.82552, 37.22659], [73.64974, 37.23643], [73.61129, 37.27469], [73.76647, 37.33913], [73.77197, 37.4417], [73.29633, 37.46495], [73.06884, 37.31729], [72.79693, 37.22222], [72.66381, 37.02014], [72.54095, 37.00007], [72.31676, 36.98115], [71.83229, 36.68084], [71.67083, 36.67346], [71.57195, 36.74943], [71.51502, 36.89128], [71.48481, 36.93218], [71.46923, 36.99925], [71.45578, 37.03094], [71.43097, 37.05855], [71.44127, 37.11856], [71.4494, 37.18137], [71.4555, 37.21418], [71.47386, 37.2269], [71.48339, 37.23937], [71.4824, 37.24921], [71.48536, 37.26017], [71.50674, 37.31502], [71.49821, 37.31975], [71.4862, 37.33405], [71.47685, 37.40281], [71.49612, 37.4279], [71.5256, 37.47971], [71.50616, 37.50733], [71.49693, 37.53527], [71.5065, 37.60912], [71.51972, 37.61945], [71.54186, 37.69691], [71.55234, 37.73209], [71.53053, 37.76534], [71.54324, 37.77104], [71.55752, 37.78677], [71.59255, 37.79956], [71.58843, 37.92425], [71.51565, 37.95349], [71.32871, 37.88564], [71.296, 37.93403], [71.2809, 37.91995], [71.24969, 37.93031], [71.27278, 37.96496], [71.27622, 37.99946], [71.28922, 38.01272], [71.29878, 38.04429], [71.36444, 38.15358], [71.37803, 38.25641], [71.33869, 38.27335], [71.33114, 38.30339], [71.21291, 38.32797], [71.1451, 38.40106], [71.10957, 38.40671], [71.10592, 38.42077], [71.09542, 38.42517], [71.0556, 38.40176], [71.03545, 38.44779], [70.98693, 38.48862], [70.92728, 38.43021], [70.88719, 38.46826], [70.84376, 38.44688], [70.82538, 38.45394], [70.81697, 38.44507], [70.80521, 38.44447], [70.79766, 38.44944], [70.78702, 38.45031], [70.78581, 38.45502], [70.77132, 38.45548], [70.75455, 38.4252], [70.72485, 38.4131], [70.69807, 38.41861], [70.67438, 38.40597], [70.6761, 38.39144], [70.69189, 38.37031], [70.64966, 38.34999], [70.61526, 38.34774]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AG",
      iso1A3: "ATG",
      iso1N3: "028",
      wikidata: "Q781",
      nameEn: "Antigua and Barbuda",
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 268"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-61.66959, 18.6782], [-62.58307, 16.68909], [-62.1023, 16.97277], [-61.23098, 16.62484], [-61.66959, 18.6782]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AI",
      iso1A3: "AIA",
      iso1N3: "660",
      wikidata: "Q25228",
      nameEn: "Anguilla",
      country: "GB",
      groups: ["BOTS", "029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 264"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.79029, 19.11219], [-63.35989, 18.06012], [-62.62718, 18.26185], [-63.79029, 19.11219]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AL",
      iso1A3: "ALB",
      iso1N3: "008",
      wikidata: "Q222",
      nameEn: "Albania",
      groups: ["039", "150", "UN"],
      callingCodes: ["355"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[20.07761, 42.55582], [20.01834, 42.54622], [20.00842, 42.5109], [19.9324, 42.51699], [19.82333, 42.46581], [19.76549, 42.50237], [19.74731, 42.57422], [19.77375, 42.58517], [19.73244, 42.66299], [19.65972, 42.62774], [19.4836, 42.40831], [19.42352, 42.36546], [19.42, 42.33019], [19.28623, 42.17745], [19.40687, 42.10024], [19.37548, 42.06835], [19.36867, 42.02564], [19.37691, 41.96977], [19.34601, 41.95675], [19.33812, 41.90669], [19.37451, 41.8842], [19.37597, 41.84849], [19.26406, 41.74971], [19.0384, 40.35325], [19.95905, 39.82857], [19.97622, 39.78684], [19.92466, 39.69533], [19.98042, 39.6504], [20.00957, 39.69227], [20.05189, 39.69112], [20.12956, 39.65805], [20.15988, 39.652], [20.22376, 39.64532], [20.22707, 39.67459], [20.27412, 39.69884], [20.31961, 39.72799], [20.29152, 39.80421], [20.30804, 39.81563], [20.38572, 39.78516], [20.41475, 39.81437], [20.41546, 39.82832], [20.31135, 39.99438], [20.37911, 39.99058], [20.42373, 40.06777], [20.48487, 40.06271], [20.51297, 40.08168], [20.55593, 40.06524], [20.61081, 40.07866], [20.62566, 40.0897], [20.67162, 40.09433], [20.71789, 40.27739], [20.78234, 40.35803], [20.7906, 40.42726], [20.83688, 40.47882], [20.94925, 40.46625], [20.96908, 40.51526], [21.03932, 40.56299], [21.05833, 40.66586], [20.98134, 40.76046], [20.95752, 40.76982], [20.98396, 40.79109], [20.97887, 40.85475], [20.97693, 40.90103], [20.94305, 40.92399], [20.83671, 40.92752], [20.81567, 40.89662], [20.73504, 40.9081], [20.71634, 40.91781], [20.65558, 41.08009], [20.63454, 41.0889], [20.59832, 41.09066], [20.58546, 41.11179], [20.59715, 41.13644], [20.51068, 41.2323], [20.49432, 41.33679], [20.52119, 41.34381], [20.55976, 41.4087], [20.51301, 41.442], [20.49039, 41.49277], [20.45331, 41.51436], [20.45809, 41.5549], [20.52103, 41.56473], [20.55508, 41.58113], [20.51769, 41.65975], [20.52937, 41.69292], [20.51301, 41.72433], [20.53405, 41.78099], [20.57144, 41.7897], [20.55976, 41.87068], [20.59524, 41.8818], [20.57946, 41.91593], [20.63069, 41.94913], [20.59434, 42.03879], [20.55633, 42.08173], [20.56955, 42.12097], [20.48857, 42.25444], [20.3819, 42.3029], [20.34479, 42.32656], [20.24399, 42.32168], [20.21797, 42.41237], [20.17127, 42.50469], [20.07761, 42.55582]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AM",
      iso1A3: "ARM",
      iso1N3: "051",
      wikidata: "Q399",
      nameEn: "Armenia",
      groups: ["145", "142", "UN"],
      callingCodes: ["374"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[45.0133, 41.29747], [44.93493, 41.25685], [44.81437, 41.30371], [44.80053, 41.25949], [44.81749, 41.23488], [44.84358, 41.23088], [44.89911, 41.21366], [44.87887, 41.20195], [44.82084, 41.21513], [44.72814, 41.20338], [44.61462, 41.24018], [44.59322, 41.1933], [44.46791, 41.18204], [44.34417, 41.2382], [44.34337, 41.20312], [44.32139, 41.2079], [44.18148, 41.24644], [44.16591, 41.19141], [43.84835, 41.16329], [43.74717, 41.1117], [43.67712, 41.13398], [43.4717, 41.12611], [43.44984, 41.0988], [43.47319, 41.02251], [43.58683, 40.98961], [43.67712, 40.93084], [43.67712, 40.84846], [43.74872, 40.7365], [43.7425, 40.66805], [43.63664, 40.54159], [43.54791, 40.47413], [43.60862, 40.43267], [43.59928, 40.34019], [43.71136, 40.16673], [43.65221, 40.14889], [43.65688, 40.11199], [43.92307, 40.01787], [44.1057, 40.03555], [44.1778, 40.02845], [44.26973, 40.04866], [44.46635, 39.97733], [44.61845, 39.8281], [44.75779, 39.7148], [44.88354, 39.74432], [44.92869, 39.72157], [45.06604, 39.79277], [45.18554, 39.67846], [45.17464, 39.58614], [45.21784, 39.58074], [45.23535, 39.61373], [45.30385, 39.61373], [45.29606, 39.57654], [45.46992, 39.49888], [45.70547, 39.60174], [45.80804, 39.56716], [45.83, 39.46487], [45.79225, 39.3695], [45.99774, 39.28931], [46.02303, 39.09978], [46.06973, 39.0744], [46.14785, 38.84206], [46.20601, 38.85262], [46.34059, 38.92076], [46.53497, 38.86548], [46.51805, 38.94982], [46.54296, 39.07078], [46.44022, 39.19636], [46.52584, 39.18912], [46.54141, 39.15895], [46.58032, 39.21204], [46.63481, 39.23013], [46.56476, 39.24942], [46.50093, 39.33736], [46.43244, 39.35181], [46.37795, 39.42039], [46.4013, 39.45405], [46.53051, 39.47809], [46.51027, 39.52373], [46.57721, 39.54414], [46.57098, 39.56694], [46.52117, 39.58734], [46.42465, 39.57534], [46.40286, 39.63651], [46.18493, 39.60533], [45.96543, 39.78859], [45.82533, 39.82925], [45.7833, 39.9475], [45.60895, 39.97733], [45.59806, 40.0131], [45.78642, 40.03218], [45.83779, 39.98925], [45.97944, 40.181], [45.95609, 40.27846], [45.65098, 40.37696], [45.42994, 40.53804], [45.45484, 40.57707], [45.35366, 40.65979], [45.4206, 40.7424], [45.55914, 40.78366], [45.60584, 40.87436], [45.40814, 40.97904], [45.44083, 41.01663], [45.39725, 41.02603], [45.35677, 40.99784], [45.28859, 41.03757], [45.26162, 41.0228], [45.25897, 41.0027], [45.1994, 41.04518], [45.16493, 41.05068], [45.1634, 41.08082], [45.1313, 41.09369], [45.12923, 41.06059], [45.06784, 41.05379], [45.08028, 41.10917], [45.19942, 41.13299], [45.1969, 41.168], [45.11811, 41.19967], [45.05201, 41.19211], [45.02932, 41.2101], [45.05497, 41.2464], [45.0133, 41.29747]], [[45.21324, 40.9817], [45.21219, 40.99001], [45.20518, 40.99348], [45.19312, 40.98998], [45.18382, 41.0066], [45.20625, 41.01484], [45.23487, 41.00226], [45.23095, 40.97828], [45.21324, 40.9817]], [[45.00864, 41.03411], [44.9903, 41.05657], [44.96031, 41.06345], [44.95383, 41.07553], [44.97169, 41.09176], [45.00864, 41.09407], [45.03406, 41.07931], [45.04517, 41.06653], [45.03792, 41.03938], [45.00864, 41.03411]]], [[[45.50279, 40.58424], [45.56071, 40.64765], [45.51825, 40.67382], [45.47927, 40.65023], [45.50279, 40.58424]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AO",
      iso1A3: "AGO",
      iso1N3: "024",
      wikidata: "Q916",
      nameEn: "Angola",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["244"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[16.55507, -5.85631], [13.04371, -5.87078], [12.42245, -6.07585], [11.95767, -5.94705], [12.20376, -5.76338], [12.26557, -5.74031], [12.52318, -5.74353], [12.52301, -5.17481], [12.53599, -5.1618], [12.53586, -5.14658], [12.51589, -5.1332], [12.49815, -5.14058], [12.46297, -5.09408], [12.60251, -5.01715], [12.63465, -4.94632], [12.70868, -4.95505], [12.8733, -4.74346], [13.11195, -4.67745], [13.09648, -4.63739], [12.91489, -4.47907], [12.87096, -4.40315], [12.76844, -4.38709], [12.64835, -4.55937], [12.40964, -4.60609], [12.32324, -4.78415], [12.25587, -4.79437], [12.20901, -4.75642], [12.16068, -4.90089], [12.00924, -5.02627], [11.50888, -5.33417], [10.5065, -17.25284], [11.75063, -17.25013], [12.07076, -17.15165], [12.52111, -17.24495], [12.97145, -16.98567], [13.36212, -16.98048], [13.95896, -17.43141], [14.28743, -17.38814], [18.39229, -17.38927], [18.84226, -17.80375], [21.14283, -17.94318], [21.42741, -18.02787], [23.47474, -17.62877], [23.20038, -17.47563], [22.17217, -16.50269], [22.00323, -16.18028], [21.97988, -13.00148], [24.03339, -12.99091], [23.90937, -12.844], [24.06672, -12.29058], [23.98804, -12.13149], [24.02603, -11.15368], [24.00027, -10.89356], [23.86868, -11.02856], [23.45631, -10.946], [23.16602, -11.10577], [22.54205, -11.05784], [22.25951, -11.24911], [22.17954, -10.85884], [22.32604, -10.76291], [22.19039, -9.94628], [21.84856, -9.59871], [21.79824, -7.29628], [20.56263, -7.28566], [20.61689, -6.90876], [20.31846, -6.91953], [20.30218, -6.98955], [19.5469, -7.00195], [19.33698, -7.99743], [18.33635, -8.00126], [17.5828, -8.13784], [16.96282, -7.21787], [16.55507, -5.85631]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AQ",
      iso1A3: "ATA",
      iso1N3: "010",
      wikidata: "Q51",
      nameEn: "Antarctica",
      level: "region",
      callingCodes: ["672"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[180, -60], [-180, -60], [-180, -90], [180, -90], [180, -60]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AR",
      iso1A3: "ARG",
      iso1N3: "032",
      wikidata: "Q414",
      nameEn: "Argentina",
      aliases: ["RA"],
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["54"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-72.31343, -50.58411], [-72.33873, -51.59954], [-71.99889, -51.98018], [-69.97824, -52.00845], [-68.41683, -52.33516], [-68.60702, -52.65781], [-68.60733, -54.9125], [-68.01394, -54.8753], [-67.46182, -54.92205], [-67.11046, -54.94199], [-66.07313, -55.19618], [-63.67376, -55.11859], [-54.78916, -36.21945], [-57.83001, -34.69099], [-58.34425, -34.15035], [-58.44442, -33.84033], [-58.40475, -33.11777], [-58.1224, -32.98842], [-58.22362, -32.52416], [-58.10036, -32.25338], [-58.20252, -31.86966], [-58.00076, -31.65016], [-58.0023, -31.53084], [-58.07569, -31.44916], [-57.98127, -31.3872], [-57.9908, -31.34924], [-57.86729, -31.06352], [-57.89476, -30.95994], [-57.8024, -30.77193], [-57.89115, -30.49572], [-57.64859, -30.35095], [-57.61478, -30.25165], [-57.65132, -30.19229], [-57.09386, -29.74211], [-56.81251, -29.48154], [-56.62789, -29.18073], [-56.57295, -29.11357], [-56.54171, -29.11447], [-56.05265, -28.62651], [-56.00458, -28.60421], [-56.01729, -28.51223], [-55.65418, -28.18304], [-55.6262, -28.17124], [-55.33303, -27.94661], [-55.16872, -27.86224], [-55.1349, -27.89759], [-54.90805, -27.73149], [-54.90159, -27.63132], [-54.67657, -27.57214], [-54.50416, -27.48232], [-54.41888, -27.40882], [-54.19268, -27.30751], [-54.19062, -27.27639], [-54.15978, -27.2889], [-53.80144, -27.09844], [-53.73372, -26.6131], [-53.68269, -26.33359], [-53.64505, -26.28089], [-53.64186, -26.25976], [-53.64632, -26.24798], [-53.63881, -26.25075], [-53.63739, -26.2496], [-53.65237, -26.23289], [-53.65018, -26.19501], [-53.73968, -26.10012], [-53.73391, -26.07006], [-53.7264, -26.0664], [-53.73086, -26.05842], [-53.73511, -26.04211], [-53.83691, -25.94849], [-53.90831, -25.55513], [-54.52926, -25.62846], [-54.5502, -25.58915], [-54.59398, -25.59224], [-54.62063, -25.91213], [-54.60664, -25.9691], [-54.67359, -25.98607], [-54.69333, -26.37705], [-54.70732, -26.45099], [-54.80868, -26.55669], [-55.00584, -26.78754], [-55.06351, -26.80195], [-55.16948, -26.96068], [-55.25243, -26.93808], [-55.39611, -26.97679], [-55.62322, -27.1941], [-55.59094, -27.32444], [-55.74475, -27.44485], [-55.89195, -27.3467], [-56.18313, -27.29851], [-56.85337, -27.5165], [-58.04205, -27.2387], [-58.59549, -27.29973], [-58.65321, -27.14028], [-58.3198, -26.83443], [-58.1188, -26.16704], [-57.87176, -25.93604], [-57.57431, -25.47269], [-57.80821, -25.13863], [-58.25492, -24.92528], [-58.33055, -24.97099], [-59.33886, -24.49935], [-59.45482, -24.34787], [-60.03367, -24.00701], [-60.28163, -24.04436], [-60.99754, -23.80934], [-61.0782, -23.62932], [-61.9756, -23.0507], [-62.22768, -22.55807], [-62.51761, -22.37684], [-62.64455, -22.25091], [-62.8078, -22.12534], [-62.81124, -21.9987], [-63.66482, -21.99918], [-63.68113, -22.0544], [-63.70963, -21.99934], [-63.93287, -21.99934], [-64.22918, -22.55807], [-64.31489, -22.88824], [-64.35108, -22.73282], [-64.4176, -22.67692], [-64.58888, -22.25035], [-64.67174, -22.18957], [-64.90014, -22.12136], [-64.99524, -22.08255], [-65.47435, -22.08908], [-65.57743, -22.07675], [-65.58694, -22.09794], [-65.61166, -22.09504], [-65.7467, -22.10105], [-65.9261, -21.93335], [-66.04832, -21.9187], [-66.03836, -21.84829], [-66.24077, -21.77837], [-66.29714, -22.08741], [-66.7298, -22.23644], [-67.18382, -22.81525], [-66.99632, -22.99839], [-67.33563, -24.04237], [-68.24825, -24.42596], [-68.56909, -24.69831], [-68.38372, -25.08636], [-68.57622, -25.32505], [-68.38372, -26.15353], [-68.56909, -26.28146], [-68.59048, -26.49861], [-68.27677, -26.90626], [-68.43363, -27.08414], [-68.77586, -27.16029], [-69.22504, -27.95042], [-69.66709, -28.44055], [-69.80969, -29.07185], [-69.99507, -29.28351], [-69.8596, -30.26131], [-70.14479, -30.36595], [-70.55832, -31.51559], [-69.88099, -33.34489], [-69.87386, -34.13344], [-70.49416, -35.24145], [-70.38008, -36.02375], [-70.95047, -36.4321], [-71.24279, -37.20264], [-70.89532, -38.6923], [-71.37826, -38.91474], [-71.92726, -40.72714], [-71.74901, -42.11711], [-72.15541, -42.15941], [-72.14828, -42.85321], [-71.64206, -43.64774], [-71.81318, -44.38097], [-71.16436, -44.46244], [-71.26418, -44.75684], [-72.06985, -44.81756], [-71.35687, -45.22075], [-71.75614, -45.61611], [-71.68577, -46.55385], [-71.94152, -47.13595], [-72.50478, -47.80586], [-72.27662, -48.28727], [-72.54042, -48.52392], [-72.56894, -48.81116], [-73.09655, -49.14342], [-73.45156, -49.79461], [-73.55259, -49.92488], [-73.15765, -50.78337], [-72.31343, -50.58411]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AS",
      iso1A3: "ASM",
      iso1N3: "016",
      wikidata: "Q16641",
      nameEn: "American Samoa",
      aliases: ["US-AS"],
      country: "US",
      groups: ["Q1352230", "061", "009", "UN"],
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 684"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-171.39864, -10.21587], [-170.99605, -15.1275], [-166.32598, -15.26169], [-171.39864, -10.21587]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AT",
      iso1A3: "AUT",
      iso1N3: "040",
      wikidata: "Q40",
      nameEn: "Austria",
      groups: ["EU", "155", "150", "UN"],
      callingCodes: ["43"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[15.34823, 48.98444], [15.28305, 48.98831], [15.26177, 48.95766], [15.16358, 48.94278], [15.15534, 48.99056], [14.99878, 49.01444], [14.97612, 48.96983], [14.98917, 48.90082], [14.95072, 48.79101], [14.98032, 48.77959], [14.9782, 48.7766], [14.98112, 48.77524], [14.9758, 48.76857], [14.95641, 48.75915], [14.94773, 48.76268], [14.81545, 48.7874], [14.80821, 48.77711], [14.80584, 48.73489], [14.72756, 48.69502], [14.71794, 48.59794], [14.66762, 48.58215], [14.60808, 48.62881], [14.56139, 48.60429], [14.4587, 48.64695], [14.43076, 48.58855], [14.33909, 48.55852], [14.20691, 48.5898], [14.09104, 48.5943], [14.01482, 48.63788], [14.06151, 48.66873], [13.84023, 48.76988], [13.82266, 48.75544], [13.81863, 48.73257], [13.79337, 48.71375], [13.81791, 48.69832], [13.81283, 48.68426], [13.81901, 48.6761], [13.82609, 48.62345], [13.80038, 48.59487], [13.80519, 48.58026], [13.76921, 48.55324], [13.7513, 48.5624], [13.74816, 48.53058], [13.72802, 48.51208], [13.66113, 48.53558], [13.65186, 48.55092], [13.62508, 48.55501], [13.59705, 48.57013], [13.57535, 48.55912], [13.51291, 48.59023], [13.50131, 48.58091], [13.50663, 48.57506], [13.46967, 48.55157], [13.45214, 48.56472], [13.43695, 48.55776], [13.45727, 48.51092], [13.42527, 48.45711], [13.43929, 48.43386], [13.40709, 48.37292], [13.30897, 48.31575], [13.26039, 48.29422], [13.18093, 48.29577], [13.126, 48.27867], [13.0851, 48.27711], [13.02083, 48.25689], [12.95306, 48.20629], [12.87126, 48.20318], [12.84475, 48.16556], [12.836, 48.1647], [12.8362, 48.15876], [12.82673, 48.15245], [12.80676, 48.14979], [12.78595, 48.12445], [12.7617, 48.12796], [12.74973, 48.10885], [12.76141, 48.07373], [12.8549, 48.01122], [12.87476, 47.96195], [12.91683, 47.95647], [12.9211, 47.95135], [12.91985, 47.94069], [12.92668, 47.93879], [12.93419, 47.94063], [12.93642, 47.94436], [12.93886, 47.94046], [12.94163, 47.92927], [13.00588, 47.84374], [12.98543, 47.82896], [12.96311, 47.79957], [12.93202, 47.77302], [12.94371, 47.76281], [12.9353, 47.74788], [12.91711, 47.74026], [12.90274, 47.72513], [12.91333, 47.7178], [12.92969, 47.71094], [12.98578, 47.7078], [13.01382, 47.72116], [13.07692, 47.68814], [13.09562, 47.63304], [13.06407, 47.60075], [13.06641, 47.58577], [13.04537, 47.58183], [13.05355, 47.56291], [13.03252, 47.53373], [13.04537, 47.49426], [12.9998, 47.46267], [12.98344, 47.48716], [12.9624, 47.47452], [12.85256, 47.52741], [12.84672, 47.54556], [12.80699, 47.54477], [12.77427, 47.58025], [12.82101, 47.61493], [12.76492, 47.64485], [12.77777, 47.66689], [12.7357, 47.6787], [12.6071, 47.6741], [12.57438, 47.63238], [12.53816, 47.63553], [12.50076, 47.62293], [12.44117, 47.6741], [12.43883, 47.6977], [12.37222, 47.68433], [12.336, 47.69534], [12.27991, 47.68827], [12.26004, 47.67725], [12.24017, 47.69534], [12.26238, 47.73544], [12.2542, 47.7433], [12.22571, 47.71776], [12.18303, 47.70065], [12.16217, 47.70105], [12.16769, 47.68167], [12.18347, 47.66663], [12.18507, 47.65984], [12.19895, 47.64085], [12.20801, 47.61082], [12.20398, 47.60667], [12.18568, 47.6049], [12.17737, 47.60121], [12.18145, 47.61019], [12.17824, 47.61506], [12.13734, 47.60639], [12.05788, 47.61742], [12.02282, 47.61033], [12.0088, 47.62451], [11.85572, 47.60166], [11.84052, 47.58354], [11.63934, 47.59202], [11.60681, 47.57881], [11.58811, 47.55515], [11.58578, 47.52281], [11.52618, 47.50939], [11.4362, 47.51413], [11.38128, 47.47465], [11.4175, 47.44621], [11.33804, 47.44937], [11.29597, 47.42566], [11.27844, 47.39956], [11.22002, 47.3964], [11.25157, 47.43277], [11.20482, 47.43198], [11.12536, 47.41222], [11.11835, 47.39719], [10.97111, 47.39561], [10.97111, 47.41617], [10.98513, 47.42882], [10.92437, 47.46991], [10.93839, 47.48018], [10.90918, 47.48571], [10.87061, 47.4786], [10.86945, 47.5015], [10.91268, 47.51334], [10.88814, 47.53701], [10.77596, 47.51729], [10.7596, 47.53228], [10.6965, 47.54253], [10.68832, 47.55752], [10.63456, 47.5591], [10.60337, 47.56755], [10.56912, 47.53584], [10.48849, 47.54057], [10.47329, 47.58552], [10.43473, 47.58394], [10.44992, 47.5524], [10.4324, 47.50111], [10.44291, 47.48453], [10.46278, 47.47901], [10.47446, 47.43318], [10.4359, 47.41183], [10.4324, 47.38494], [10.39851, 47.37623], [10.33424, 47.30813], [10.23257, 47.27088], [10.17531, 47.27167], [10.17648, 47.29149], [10.2147, 47.31014], [10.19998, 47.32832], [10.23757, 47.37609], [10.22774, 47.38904], [10.2127, 47.38019], [10.17648, 47.38889], [10.16362, 47.36674], [10.11805, 47.37228], [10.09819, 47.35724], [10.06897, 47.40709], [10.1052, 47.4316], [10.09001, 47.46005], [10.07131, 47.45531], [10.03859, 47.48927], [10.00003, 47.48216], [9.96029, 47.53899], [9.92407, 47.53111], [9.87733, 47.54688], [9.87499, 47.52953], [9.8189, 47.54688], [9.82591, 47.58158], [9.80254, 47.59419], [9.76748, 47.5934], [9.72736, 47.53457], [9.55125, 47.53629], [9.56312, 47.49495], [9.58208, 47.48344], [9.59482, 47.46305], [9.60205, 47.46165], [9.60484, 47.46358], [9.60841, 47.47178], [9.62158, 47.45858], [9.62475, 47.45685], [9.6423, 47.45599], [9.65728, 47.45383], [9.65863, 47.44847], [9.64483, 47.43842], [9.6446, 47.43233], [9.65043, 47.41937], [9.65136, 47.40504], [9.6629, 47.39591], [9.67334, 47.39191], [9.67445, 47.38429], [9.6711, 47.37824], [9.66243, 47.37136], [9.65427, 47.36824], [9.62476, 47.36639], [9.59978, 47.34671], [9.58513, 47.31334], [9.55857, 47.29919], [9.54773, 47.2809], [9.53116, 47.27029], [9.56766, 47.24281], [9.55176, 47.22585], [9.56981, 47.21926], [9.58264, 47.20673], [9.56539, 47.17124], [9.62623, 47.14685], [9.63395, 47.08443], [9.61216, 47.07732], [9.60717, 47.06091], [9.87935, 47.01337], [9.88266, 46.93343], [9.98058, 46.91434], [10.10715, 46.84296], [10.22675, 46.86942], [10.24128, 46.93147], [10.30031, 46.92093], [10.36933, 47.00212], [10.48376, 46.93891], [10.47197, 46.85698], [10.54783, 46.84505], [10.66405, 46.87614], [10.75753, 46.82258], [10.72974, 46.78972], [11.00764, 46.76896], [11.10618, 46.92966], [11.33355, 46.99862], [11.50739, 47.00644], [11.74789, 46.98484], [12.19254, 47.09331], [12.21781, 47.03996], [12.11675, 47.01241], [12.2006, 46.88854], [12.27591, 46.88651], [12.38708, 46.71529], [12.59992, 46.6595], [12.94445, 46.60401], [13.27627, 46.56059], [13.64088, 46.53438], [13.7148, 46.5222], [13.89837, 46.52331], [14.00422, 46.48474], [14.04002, 46.49117], [14.12097, 46.47724], [14.15989, 46.43327], [14.28326, 46.44315], [14.314, 46.43327], [14.42608, 46.44614], [14.45877, 46.41717], [14.52176, 46.42617], [14.56463, 46.37208], [14.5942, 46.43434], [14.66892, 46.44936], [14.72185, 46.49974], [14.81836, 46.51046], [14.83549, 46.56614], [14.86419, 46.59411], [14.87129, 46.61], [14.92283, 46.60848], [14.96002, 46.63459], [14.98024, 46.6009], [15.01451, 46.641], [15.14215, 46.66131], [15.23711, 46.63994], [15.41235, 46.65556], [15.45514, 46.63697], [15.46906, 46.61321], [15.54431, 46.6312], [15.55333, 46.64988], [15.54533, 46.66985], [15.59826, 46.68908], [15.62317, 46.67947], [15.63255, 46.68069], [15.6365, 46.6894], [15.6543, 46.69228], [15.6543, 46.70616], [15.67411, 46.70735], [15.69523, 46.69823], [15.72279, 46.69548], [15.73823, 46.70011], [15.76771, 46.69863], [15.78518, 46.70712], [15.8162, 46.71897], [15.87691, 46.7211], [15.94864, 46.68769], [15.98512, 46.68463], [15.99988, 46.67947], [16.04036, 46.6549], [16.04347, 46.68694], [16.02808, 46.71094], [15.99769, 46.7266], [15.98432, 46.74991], [15.99126, 46.78199], [15.99054, 46.82772], [16.05786, 46.83927], [16.10983, 46.867], [16.19904, 46.94134], [16.22403, 46.939], [16.27594, 46.9643], [16.28202, 47.00159], [16.51369, 47.00084], [16.43936, 47.03548], [16.52176, 47.05747], [16.46134, 47.09395], [16.52863, 47.13974], [16.44932, 47.14418], [16.46442, 47.16845], [16.4523, 47.18812], [16.42801, 47.18422], [16.41739, 47.20649], [16.43663, 47.21127], [16.44142, 47.25079], [16.47782, 47.25918], [16.45104, 47.41181], [16.49908, 47.39416], [16.52414, 47.41007], [16.57152, 47.40868], [16.6718, 47.46139], [16.64821, 47.50155], [16.71059, 47.52692], [16.64193, 47.63114], [16.58699, 47.61772], [16.4222, 47.66537], [16.55129, 47.72268], [16.53514, 47.73837], [16.54779, 47.75074], [16.61183, 47.76171], [16.65679, 47.74197], [16.72089, 47.73469], [16.7511, 47.67878], [16.82938, 47.68432], [16.86509, 47.72268], [16.87538, 47.68895], [17.08893, 47.70928], [17.05048, 47.79377], [17.07039, 47.81129], [17.00997, 47.86245], [17.08275, 47.87719], [17.11022, 47.92461], [17.09786, 47.97336], [17.16001, 48.00636], [17.07039, 48.0317], [17.09168, 48.09366], [17.05735, 48.14179], [17.02919, 48.13996], [16.97701, 48.17385], [16.89461, 48.31332], [16.90903, 48.32519], [16.84243, 48.35258], [16.83317, 48.38138], [16.83588, 48.3844], [16.8497, 48.38321], [16.85204, 48.44968], [16.94611, 48.53614], [16.93955, 48.60371], [16.90354, 48.71541], [16.79779, 48.70998], [16.71883, 48.73806], [16.68518, 48.7281], [16.67008, 48.77699], [16.46134, 48.80865], [16.40915, 48.74576], [16.37345, 48.729], [16.06034, 48.75436], [15.84404, 48.86921], [15.78087, 48.87644], [15.75341, 48.8516], [15.6921, 48.85973], [15.61622, 48.89541], [15.51357, 48.91549], [15.48027, 48.94481], [15.34823, 48.98444]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AU",
      iso1A3: "AUS",
      iso1N3: "036",
      wikidata: "Q408",
      nameEn: "Australia"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AW",
      iso1A3: "ABW",
      iso1N3: "533",
      wikidata: "Q21203",
      nameEn: "Aruba",
      aliases: ["NL-AW"],
      country: "NL",
      groups: ["Q1451600", "029", "003", "419", "019", "UN"],
      callingCodes: ["297"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-70.00823, 12.98375], [-70.35625, 12.58277], [-69.60231, 12.17], [-70.00823, 12.98375]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AX",
      iso1A3: "ALA",
      iso1N3: "248",
      wikidata: "Q5689",
      nameEn: "\xC5land Islands",
      country: "FI",
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["358 18", "358 457"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[19.08191, 60.19152], [20.5104, 59.15546], [21.35468, 59.67511], [21.02509, 60.12142], [21.08159, 60.20167], [21.15143, 60.54555], [20.96741, 60.71528], [19.23413, 60.61414], [19.08191, 60.19152]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "AZ",
      iso1A3: "AZE",
      iso1N3: "031",
      wikidata: "Q227",
      nameEn: "Azerbaijan",
      groups: ["145", "142", "UN"],
      callingCodes: ["994"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[46.42738, 41.91323], [46.3984, 41.84399], [46.30863, 41.79133], [46.23962, 41.75811], [46.20538, 41.77205], [46.17891, 41.72094], [46.19759, 41.62327], [46.24429, 41.59883], [46.26531, 41.63339], [46.28182, 41.60089], [46.3253, 41.60912], [46.34039, 41.5947], [46.34126, 41.57454], [46.29794, 41.5724], [46.33925, 41.4963], [46.40307, 41.48464], [46.4669, 41.43331], [46.63658, 41.37727], [46.72375, 41.28609], [46.66148, 41.20533], [46.63969, 41.09515], [46.55096, 41.1104], [46.48558, 41.0576], [46.456, 41.09984], [46.37661, 41.10805], [46.27698, 41.19011], [46.13221, 41.19479], [45.95786, 41.17956], [45.80842, 41.2229], [45.69946, 41.29545], [45.75705, 41.35157], [45.71035, 41.36208], [45.68389, 41.3539], [45.45973, 41.45898], [45.4006, 41.42402], [45.31352, 41.47168], [45.26285, 41.46433], [45.1797, 41.42231], [45.09867, 41.34065], [45.0133, 41.29747], [45.05497, 41.2464], [45.02932, 41.2101], [45.05201, 41.19211], [45.11811, 41.19967], [45.1969, 41.168], [45.19942, 41.13299], [45.08028, 41.10917], [45.06784, 41.05379], [45.12923, 41.06059], [45.1313, 41.09369], [45.1634, 41.08082], [45.16493, 41.05068], [45.1994, 41.04518], [45.25897, 41.0027], [45.26162, 41.0228], [45.28859, 41.03757], [45.35677, 40.99784], [45.39725, 41.02603], [45.44083, 41.01663], [45.40814, 40.97904], [45.60584, 40.87436], [45.55914, 40.78366], [45.4206, 40.7424], [45.35366, 40.65979], [45.45484, 40.57707], [45.42994, 40.53804], [45.65098, 40.37696], [45.95609, 40.27846], [45.97944, 40.181], [45.83779, 39.98925], [45.78642, 40.03218], [45.59806, 40.0131], [45.60895, 39.97733], [45.7833, 39.9475], [45.82533, 39.82925], [45.96543, 39.78859], [46.18493, 39.60533], [46.40286, 39.63651], [46.42465, 39.57534], [46.52117, 39.58734], [46.57098, 39.56694], [46.57721, 39.54414], [46.51027, 39.52373], [46.53051, 39.47809], [46.4013, 39.45405], [46.37795, 39.42039], [46.43244, 39.35181], [46.50093, 39.33736], [46.56476, 39.24942], [46.63481, 39.23013], [46.58032, 39.21204], [46.54141, 39.15895], [46.52584, 39.18912], [46.44022, 39.19636], [46.54296, 39.07078], [46.51805, 38.94982], [46.53497, 38.86548], [46.75752, 39.03231], [46.83822, 39.13143], [46.92539, 39.16644], [46.95341, 39.13505], [47.05771, 39.20143], [47.05927, 39.24846], [47.31301, 39.37492], [47.38978, 39.45999], [47.50099, 39.49615], [47.84774, 39.66285], [47.98977, 39.70999], [48.34264, 39.42935], [48.37385, 39.37584], [48.15984, 39.30028], [48.12404, 39.25208], [48.15361, 39.19419], [48.31239, 39.09278], [48.33884, 39.03022], [48.28437, 38.97186], [48.08627, 38.94434], [48.07734, 38.91616], [48.01409, 38.90333], [48.02581, 38.82705], [48.24773, 38.71883], [48.3146, 38.59958], [48.45084, 38.61013], [48.58793, 38.45076], [48.62217, 38.40198], [48.70001, 38.40564], [48.78979, 38.45026], [48.81072, 38.44853], [48.84969, 38.45015], [48.88288, 38.43975], [52.39847, 39.43556], [48.80971, 41.95365], [48.5867, 41.84306], [48.55078, 41.77917], [48.42301, 41.65444], [48.40277, 41.60441], [48.2878, 41.56221], [48.22064, 41.51472], [48.07587, 41.49957], [47.87973, 41.21798], [47.75831, 41.19455], [47.62288, 41.22969], [47.54504, 41.20275], [47.49004, 41.26366], [47.34579, 41.27884], [47.10762, 41.59044], [47.03757, 41.55434], [46.99554, 41.59743], [47.00955, 41.63583], [46.8134, 41.76252], [46.75269, 41.8623], [46.58924, 41.80547], [46.5332, 41.87389], [46.42738, 41.91323]], [[45.50279, 40.58424], [45.47927, 40.65023], [45.51825, 40.67382], [45.56071, 40.64765], [45.50279, 40.58424]]], [[[45.00864, 41.03411], [45.03792, 41.03938], [45.04517, 41.06653], [45.03406, 41.07931], [45.00864, 41.09407], [44.97169, 41.09176], [44.95383, 41.07553], [44.96031, 41.06345], [44.9903, 41.05657], [45.00864, 41.03411]]], [[[45.21324, 40.9817], [45.23095, 40.97828], [45.23487, 41.00226], [45.20625, 41.01484], [45.18382, 41.0066], [45.19312, 40.98998], [45.20518, 40.99348], [45.21219, 40.99001], [45.21324, 40.9817]]], [[[45.46992, 39.49888], [45.29606, 39.57654], [45.30385, 39.61373], [45.23535, 39.61373], [45.21784, 39.58074], [45.17464, 39.58614], [45.18554, 39.67846], [45.06604, 39.79277], [44.92869, 39.72157], [44.88354, 39.74432], [44.75779, 39.7148], [44.80977, 39.65768], [44.81043, 39.62677], [44.88916, 39.59653], [44.96746, 39.42998], [45.05932, 39.36435], [45.08751, 39.35052], [45.16168, 39.21952], [45.30489, 39.18333], [45.40148, 39.09007], [45.40452, 39.07224], [45.44811, 39.04927], [45.44966, 38.99243], [45.6131, 38.964], [45.6155, 38.94304], [45.65172, 38.95199], [45.83883, 38.90768], [45.90266, 38.87739], [45.94624, 38.89072], [46.00228, 38.87376], [46.06766, 38.87861], [46.14785, 38.84206], [46.06973, 39.0744], [46.02303, 39.09978], [45.99774, 39.28931], [45.79225, 39.3695], [45.83, 39.46487], [45.80804, 39.56716], [45.70547, 39.60174], [45.46992, 39.49888]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BA",
      iso1A3: "BIH",
      iso1N3: "070",
      wikidata: "Q225",
      nameEn: "Bosnia and Herzegovina",
      groups: ["039", "150", "UN"],
      callingCodes: ["387"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[17.84826, 45.04489], [17.66571, 45.13408], [17.59104, 45.10816], [17.51469, 45.10791], [17.47589, 45.12656], [17.45615, 45.12523], [17.4498, 45.16119], [17.41229, 45.13335], [17.33573, 45.14521], [17.32092, 45.16246], [17.26815, 45.18444], [17.25131, 45.14957], [17.24325, 45.146], [17.18438, 45.14764], [17.0415, 45.20759], [16.9385, 45.22742], [16.92405, 45.27607], [16.83804, 45.18951], [16.81137, 45.18434], [16.78219, 45.19002], [16.74845, 45.20393], [16.64962, 45.20714], [16.60194, 45.23042], [16.56559, 45.22307], [16.5501, 45.2212], [16.52982, 45.22713], [16.49155, 45.21153], [16.4634, 45.14522], [16.40023, 45.1147], [16.38309, 45.05955], [16.38219, 45.05139], [16.3749, 45.05206], [16.35863, 45.03529], [16.35404, 45.00241], [16.29036, 44.99732], [16.12153, 45.09616], [15.98412, 45.23088], [15.83512, 45.22459], [15.76371, 45.16508], [15.78842, 45.11519], [15.74585, 45.0638], [15.78568, 44.97401], [15.74723, 44.96818], [15.76096, 44.87045], [15.79472, 44.8455], [15.72584, 44.82334], [15.8255, 44.71501], [15.89348, 44.74964], [16.05828, 44.61538], [16.00884, 44.58605], [16.03012, 44.55572], [16.10566, 44.52586], [16.16814, 44.40679], [16.12969, 44.38275], [16.21346, 44.35231], [16.18688, 44.27012], [16.36864, 44.08263], [16.43662, 44.07523], [16.43629, 44.02826], [16.50528, 44.0244], [16.55472, 43.95326], [16.70922, 43.84887], [16.75316, 43.77157], [16.80736, 43.76011], [17.00585, 43.58037], [17.15828, 43.49376], [17.24411, 43.49376], [17.29699, 43.44542], [17.25579, 43.40353], [17.286, 43.33065], [17.46986, 43.16559], [17.64268, 43.08595], [17.70879, 42.97223], [17.5392, 42.92787], [17.6444, 42.88641], [17.68151, 42.92725], [17.7948, 42.89556], [17.80854, 42.9182], [17.88201, 42.83668], [18.24318, 42.6112], [18.36197, 42.61423], [18.43735, 42.55921], [18.49778, 42.58409], [18.53751, 42.57376], [18.55504, 42.58409], [18.52232, 42.62279], [18.57373, 42.64429], [18.54841, 42.68328], [18.54603, 42.69171], [18.55221, 42.69045], [18.56789, 42.72074], [18.47324, 42.74992], [18.45921, 42.81682], [18.47633, 42.85829], [18.4935, 42.86433], [18.49661, 42.89306], [18.49076, 42.95553], [18.52232, 43.01451], [18.66254, 43.03928], [18.64735, 43.14766], [18.66605, 43.2056], [18.71747, 43.2286], [18.6976, 43.25243], [18.76538, 43.29838], [18.85342, 43.32426], [18.84794, 43.33735], [18.83912, 43.34795], [18.90911, 43.36383], [18.95819, 43.32899], [18.95001, 43.29327], [19.00844, 43.24988], [19.04233, 43.30008], [19.08206, 43.29668], [19.08673, 43.31453], [19.04071, 43.397], [19.01078, 43.43854], [18.96053, 43.45042], [18.95469, 43.49367], [18.91379, 43.50299], [19.01078, 43.55806], [19.04934, 43.50384], [19.13933, 43.5282], [19.15685, 43.53943], [19.22807, 43.5264], [19.24774, 43.53061], [19.2553, 43.5938], [19.33426, 43.58833], [19.36653, 43.60921], [19.41941, 43.54056], [19.42696, 43.57987], [19.50455, 43.58385], [19.5176, 43.71403], [19.3986, 43.79668], [19.23465, 43.98764], [19.24363, 44.01502], [19.38439, 43.96611], [19.52515, 43.95573], [19.56498, 43.99922], [19.61836, 44.01464], [19.61991, 44.05254], [19.57467, 44.04716], [19.55999, 44.06894], [19.51167, 44.08158], [19.47321, 44.1193], [19.48386, 44.14332], [19.47338, 44.15034], [19.43905, 44.13088], [19.40927, 44.16722], [19.3588, 44.18353], [19.34773, 44.23244], [19.32464, 44.27185], [19.26945, 44.26957], [19.23306, 44.26097], [19.20508, 44.2917], [19.18328, 44.28383], [19.16741, 44.28648], [19.13332, 44.31492], [19.13556, 44.338], [19.11547, 44.34218], [19.1083, 44.3558], [19.11865, 44.36712], [19.10298, 44.36924], [19.10365, 44.37795], [19.10704, 44.38249], [19.10749, 44.39421], [19.11785, 44.40313], [19.14681, 44.41463], [19.14837, 44.45253], [19.12278, 44.50132], [19.13369, 44.52521], [19.16699, 44.52197], [19.26388, 44.65412], [19.32543, 44.74058], [19.36722, 44.88164], [19.18183, 44.92055], [19.01994, 44.85493], [18.8704, 44.85097], [18.76347, 44.90669], [18.76369, 44.93707], [18.80661, 44.93561], [18.78357, 44.97741], [18.65723, 45.07544], [18.47939, 45.05871], [18.41896, 45.11083], [18.32077, 45.1021], [18.24387, 45.13699], [18.1624, 45.07654], [18.03121, 45.12632], [18.01594, 45.15163], [17.99479, 45.14958], [17.97834, 45.13831], [17.97336, 45.12245], [17.93706, 45.08016], [17.87148, 45.04645], [17.84826, 45.04489]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BB",
      iso1A3: "BRB",
      iso1N3: "052",
      wikidata: "Q244",
      nameEn: "Barbados",
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      callingCodes: ["1 246"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-58.56442, 13.24471], [-59.80731, 13.87556], [-59.82929, 12.70644], [-58.56442, 13.24471]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BD",
      iso1A3: "BGD",
      iso1N3: "050",
      wikidata: "Q902",
      nameEn: "Bangladesh",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["880"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[89.15869, 26.13708], [89.08899, 26.38845], [88.95612, 26.4564], [88.92357, 26.40711], [88.91321, 26.37984], [89.05328, 26.2469], [88.85004, 26.23211], [88.78961, 26.31093], [88.67837, 26.26291], [88.69485, 26.38353], [88.62144, 26.46783], [88.4298, 26.54489], [88.41196, 26.63837], [88.33093, 26.48929], [88.35153, 26.45241], [88.36938, 26.48683], [88.48749, 26.45855], [88.51649, 26.35923], [88.35153, 26.29123], [88.34757, 26.22216], [88.1844, 26.14417], [88.16581, 26.0238], [88.08804, 25.91334], [88.13138, 25.78773], [88.242, 25.80811], [88.45103, 25.66245], [88.4559, 25.59227], [88.677, 25.46959], [88.81296, 25.51546], [88.85278, 25.34679], [89.01105, 25.30303], [89.00463, 25.26583], [88.94067, 25.18534], [88.44766, 25.20149], [88.46277, 25.07468], [88.33917, 24.86803], [88.27325, 24.88796], [88.21832, 24.96642], [88.14004, 24.93529], [88.15515, 24.85806], [88.00683, 24.66477], [88.08786, 24.63232], [88.12296, 24.51301], [88.50934, 24.32474], [88.68801, 24.31464], [88.74841, 24.1959], [88.6976, 24.14703], [88.73743, 23.91751], [88.66189, 23.87607], [88.58087, 23.87105], [88.56507, 23.64044], [88.74841, 23.47361], [88.79351, 23.50535], [88.79254, 23.46028], [88.71133, 23.2492], [88.99148, 23.21134], [88.86377, 23.08759], [88.88327, 23.03885], [88.87063, 22.95235], [88.96713, 22.83346], [88.9151, 22.75228], [88.94614, 22.66941], [88.9367, 22.58527], [89.07114, 22.15335], [89.08044, 21.41871], [92.47409, 20.38654], [92.26071, 21.05697], [92.17752, 21.17445], [92.20087, 21.337], [92.37939, 21.47764], [92.43158, 21.37025], [92.55105, 21.3856], [92.60187, 21.24615], [92.68152, 21.28454], [92.59775, 21.6092], [92.62187, 21.87037], [92.60949, 21.97638], [92.56616, 22.13554], [92.60029, 22.1522], [92.5181, 22.71441], [92.37665, 22.9435], [92.38214, 23.28705], [92.26541, 23.70392], [92.15417, 23.73409], [92.04706, 23.64229], [91.95093, 23.73284], [91.95642, 23.47361], [91.84789, 23.42235], [91.76417, 23.26619], [91.81634, 23.08001], [91.7324, 23.00043], [91.61571, 22.93929], [91.54993, 23.01051], [91.46615, 23.2328], [91.4035, 23.27522], [91.40848, 23.07117], [91.36453, 23.06612], [91.28293, 23.37538], [91.15579, 23.6599], [91.25192, 23.83463], [91.22308, 23.89616], [91.29587, 24.0041], [91.35741, 23.99072], [91.37414, 24.10693], [91.55542, 24.08687], [91.63782, 24.1132], [91.65292, 24.22095], [91.73257, 24.14703], [91.76004, 24.23848], [91.82596, 24.22345], [91.89258, 24.14674], [91.96603, 24.3799], [92.11662, 24.38997], [92.15796, 24.54435], [92.25854, 24.9191], [92.38626, 24.86055], [92.49887, 24.88796], [92.39147, 25.01471], [92.33957, 25.07593], [92.0316, 25.1834], [91.63648, 25.12846], [91.25517, 25.20677], [90.87427, 25.15799], [90.65042, 25.17788], [90.40034, 25.1534], [90.1155, 25.22686], [89.90478, 25.31038], [89.87629, 25.28337], [89.83371, 25.29548], [89.84086, 25.31854], [89.81208, 25.37244], [89.86129, 25.61714], [89.84388, 25.70042], [89.80585, 25.82489], [89.86592, 25.93115], [89.77728, 26.04254], [89.77865, 26.08387], [89.73581, 26.15818], [89.70201, 26.15138], [89.63968, 26.22595], [89.57101, 25.9682], [89.53515, 26.00382], [89.35953, 26.0077], [89.15869, 26.13708]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BE",
      iso1A3: "BEL",
      iso1N3: "056",
      wikidata: "Q31",
      nameEn: "Belgium",
      groups: ["EU", "155", "150", "UN"],
      callingCodes: ["32"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[4.93295, 51.44945], [4.93909, 51.44632], [4.9524, 51.45014], [4.95244, 51.45207], [4.93295, 51.44945]]], [[[4.91493, 51.4353], [4.92652, 51.43329], [4.92952, 51.42984], [4.93986, 51.43064], [4.94265, 51.44003], [4.93471, 51.43861], [4.93416, 51.44185], [4.94025, 51.44193], [4.93544, 51.44634], [4.92879, 51.44161], [4.92815, 51.43856], [4.92566, 51.44273], [4.92811, 51.4437], [4.92287, 51.44741], [4.91811, 51.44621], [4.92227, 51.44252], [4.91935, 51.43634], [4.91493, 51.4353]]], [[[4.82946, 51.4213], [4.82409, 51.44736], [4.84139, 51.4799], [4.78803, 51.50284], [4.77321, 51.50529], [4.74578, 51.48937], [4.72935, 51.48424], [4.65442, 51.42352], [4.57489, 51.4324], [4.53521, 51.4243], [4.52846, 51.45002], [4.54675, 51.47265], [4.5388, 51.48184], [4.47736, 51.4778], [4.38122, 51.44905], [4.39747, 51.43316], [4.38064, 51.41965], [4.43777, 51.36989], [4.39292, 51.35547], [4.34086, 51.35738], [4.33265, 51.37687], [4.21923, 51.37443], [4.24024, 51.35371], [4.16721, 51.29348], [4.05165, 51.24171], [4.01957, 51.24504], [3.97889, 51.22537], [3.90125, 51.20371], [3.78783, 51.2151], [3.78999, 51.25766], [3.58939, 51.30064], [3.51502, 51.28697], [3.52698, 51.2458], [3.43488, 51.24135], [3.41704, 51.25933], [3.38289, 51.27331], [3.35847, 51.31572], [3.38696, 51.33436], [3.36263, 51.37112], [2.56575, 51.85301], [2.18458, 51.52087], [2.55904, 51.07014], [2.57551, 51.00326], [2.63074, 50.94746], [2.59093, 50.91751], [2.63331, 50.81457], [2.71165, 50.81295], [2.81056, 50.71773], [2.8483, 50.72276], [2.86985, 50.7033], [2.87937, 50.70298], [2.88504, 50.70656], [2.90069, 50.69263], [2.91036, 50.6939], [2.90873, 50.702], [2.95019, 50.75138], [2.96778, 50.75242], [3.00537, 50.76588], [3.04314, 50.77674], [3.09163, 50.77717], [3.10614, 50.78303], [3.11206, 50.79416], [3.11987, 50.79188], [3.1257, 50.78603], [3.15017, 50.79031], [3.16476, 50.76843], [3.18339, 50.74981], [3.18811, 50.74025], [3.20064, 50.73547], [3.19017, 50.72569], [3.20845, 50.71662], [3.22042, 50.71019], [3.24593, 50.71389], [3.26063, 50.70086], [3.26141, 50.69151], [3.2536, 50.68977], [3.264, 50.67668], [3.23951, 50.6585], [3.2729, 50.60718], [3.28575, 50.52724], [3.37693, 50.49538], [3.44629, 50.51009], [3.47385, 50.53397], [3.51564, 50.5256], [3.49509, 50.48885], [3.5683, 50.50192], [3.58361, 50.49049], [3.61014, 50.49568], [3.64426, 50.46275], [3.66153, 50.45165], [3.67494, 50.40239], [3.67262, 50.38663], [3.65709, 50.36873], [3.66976, 50.34563], [3.71009, 50.30305], [3.70987, 50.3191], [3.73911, 50.34809], [3.84314, 50.35219], [3.90781, 50.32814], [3.96771, 50.34989], [4.0268, 50.35793], [4.0689, 50.3254], [4.10237, 50.31247], [4.10957, 50.30234], [4.11954, 50.30425], [4.13665, 50.25609], [4.16808, 50.25786], [4.15524, 50.2833], [4.17347, 50.28838], [4.17861, 50.27443], [4.20651, 50.27333], [4.21945, 50.25539], [4.15524, 50.21103], [4.16014, 50.19239], [4.13561, 50.13078], [4.20147, 50.13535], [4.23101, 50.06945], [4.16294, 50.04719], [4.13508, 50.01976], [4.14239, 49.98034], [4.20532, 49.95803], [4.31963, 49.97043], [4.35051, 49.95315], [4.43488, 49.94122], [4.51098, 49.94659], [4.5414, 49.96911], [4.68695, 49.99685], [4.70064, 50.09384], [4.75237, 50.11314], [4.82438, 50.16878], [4.83279, 50.15331], [4.88602, 50.15182], [4.8382, 50.06738], [4.78827, 49.95609], [4.88529, 49.9236], [4.85134, 49.86457], [4.86965, 49.82271], [4.85464, 49.78995], [4.96714, 49.79872], [5.09249, 49.76193], [5.14545, 49.70287], [5.26232, 49.69456], [5.31465, 49.66846], [5.33039, 49.6555], [5.30214, 49.63055], [5.3137, 49.61225], [5.33851, 49.61599], [5.34837, 49.62889], [5.3974, 49.61596], [5.43713, 49.5707], [5.46734, 49.52648], [5.46541, 49.49825], [5.55001, 49.52729], [5.60909, 49.51228], [5.64505, 49.55146], [5.75649, 49.54321], [5.7577, 49.55915], [5.77435, 49.56298], [5.79195, 49.55228], [5.81838, 49.54777], [5.84143, 49.5533], [5.84692, 49.55663], [5.8424, 49.56082], [5.87256, 49.57539], [5.86986, 49.58756], [5.84971, 49.58674], [5.84826, 49.5969], [5.8762, 49.60898], [5.87609, 49.62047], [5.88393, 49.62802], [5.88552, 49.63507], [5.90599, 49.63853], [5.90164, 49.6511], [5.9069, 49.66377], [5.86175, 49.67862], [5.86527, 49.69291], [5.88677, 49.70951], [5.86503, 49.72739], [5.84193, 49.72161], [5.82562, 49.72395], [5.83149, 49.74729], [5.82245, 49.75048], [5.78871, 49.7962], [5.75409, 49.79239], [5.74953, 49.81428], [5.74364, 49.82058], [5.74844, 49.82435], [5.7404, 49.83452], [5.74076, 49.83823], [5.74975, 49.83933], [5.74953, 49.84709], [5.75884, 49.84811], [5.74567, 49.85368], [5.75861, 49.85631], [5.75269, 49.8711], [5.78415, 49.87922], [5.73621, 49.89796], [5.77314, 49.93646], [5.77291, 49.96056], [5.80833, 49.96451], [5.81163, 49.97142], [5.83467, 49.97823], [5.83968, 49.9892], [5.82331, 49.99662], [5.81866, 50.01286], [5.8551, 50.02683], [5.86904, 50.04614], [5.85474, 50.06342], [5.8857, 50.07824], [5.89488, 50.11476], [5.95929, 50.13295], [5.96453, 50.17259], [6.02488, 50.18283], [6.03093, 50.16362], [6.06406, 50.15344], [6.08577, 50.17246], [6.12028, 50.16374], [6.1137, 50.13668], [6.1379, 50.12964], [6.15298, 50.14126], [6.14132, 50.14971], [6.14588, 50.17106], [6.18739, 50.1822], [6.18364, 50.20815], [6.16853, 50.2234], [6.208, 50.25179], [6.28797, 50.27458], [6.29949, 50.30887], [6.32488, 50.32333], [6.35701, 50.31139], [6.40641, 50.32425], [6.40785, 50.33557], [6.3688, 50.35898], [6.34406, 50.37994], [6.36852, 50.40776], [6.37219, 50.45397], [6.34005, 50.46083], [6.3465, 50.48833], [6.30809, 50.50058], [6.26637, 50.50272], [6.22335, 50.49578], [6.20599, 50.52089], [6.19193, 50.5212], [6.18716, 50.52653], [6.19579, 50.5313], [6.19735, 50.53576], [6.17802, 50.54179], [6.17739, 50.55875], [6.20281, 50.56952], [6.22581, 50.5907], [6.24005, 50.58732], [6.24888, 50.59869], [6.2476, 50.60392], [6.26957, 50.62444], [6.17852, 50.6245], [6.11707, 50.72231], [6.04428, 50.72861], [6.0406, 50.71848], [6.0326, 50.72647], [6.03889, 50.74618], [6.01976, 50.75398], [5.97545, 50.75441], [5.95942, 50.7622], [5.89132, 50.75124], [5.89129, 50.75125], [5.88734, 50.77092], [5.84888, 50.75448], [5.84548, 50.76542], [5.80673, 50.7558], [5.77513, 50.78308], [5.76533, 50.78159], [5.74356, 50.7691], [5.73904, 50.75674], [5.72216, 50.76398], [5.69469, 50.75529], [5.68091, 50.75804], [5.70107, 50.7827], [5.68995, 50.79641], [5.70118, 50.80764], [5.65259, 50.82309], [5.64009, 50.84742], [5.64504, 50.87107], [5.67886, 50.88142], [5.69858, 50.91046], [5.71626, 50.90796], [5.72644, 50.91167], [5.72545, 50.92312], [5.74644, 50.94723], [5.75927, 50.95601], [5.74752, 50.96202], [5.72875, 50.95428], [5.71864, 50.96092], [5.76242, 50.99703], [5.77688, 51.02483], [5.75961, 51.03113], [5.77258, 51.06196], [5.79835, 51.05834], [5.79903, 51.09371], [5.82921, 51.09328], [5.83226, 51.10585], [5.8109, 51.10861], [5.80798, 51.11661], [5.85508, 51.14445], [5.82564, 51.16753], [5.77697, 51.1522], [5.77735, 51.17845], [5.74617, 51.18928], [5.70344, 51.1829], [5.65528, 51.18736], [5.65145, 51.19788], [5.5603, 51.22249], [5.5569, 51.26544], [5.515, 51.29462], [5.48476, 51.30053], [5.46519, 51.2849], [5.4407, 51.28169], [5.41672, 51.26248], [5.347, 51.27502], [5.33886, 51.26314], [5.29716, 51.26104], [5.26461, 51.26693], [5.23814, 51.26064], [5.22542, 51.26888], [5.24244, 51.30495], [5.2002, 51.32243], [5.16222, 51.31035], [5.13377, 51.31592], [5.13105, 51.34791], [5.07102, 51.39469], [5.10456, 51.43163], [5.07891, 51.4715], [5.04774, 51.47022], [5.03281, 51.48679], [5.0106, 51.47167], [5.00393, 51.44406], [4.92152, 51.39487], [4.90016, 51.41404], [4.84988, 51.41502], [4.78941, 51.41102], [4.77229, 51.41337], [4.76577, 51.43046], [4.78314, 51.43319], [4.82946, 51.4213]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BF",
      iso1A3: "BFA",
      iso1N3: "854",
      wikidata: "Q965",
      nameEn: "Burkina Faso",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["226"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[0.23859, 15.00135], [0.06588, 14.96961], [-0.24673, 15.07805], [-0.72004, 15.08655], [-1.05875, 14.7921], [-1.32166, 14.72774], [-1.68083, 14.50023], [-1.97945, 14.47709], [-1.9992, 14.19011], [-2.10223, 14.14878], [-2.47587, 14.29671], [-2.66175, 14.14713], [-2.84667, 14.05532], [-2.90831, 13.81174], [-2.88189, 13.64921], [-3.26407, 13.70699], [-3.28396, 13.5422], [-3.23599, 13.29035], [-3.43507, 13.27272], [-3.4313, 13.1588], [-3.54454, 13.1781], [-3.7911, 13.36665], [-3.96282, 13.38164], [-3.90558, 13.44375], [-3.96501, 13.49778], [-4.34477, 13.12927], [-4.21819, 12.95722], [-4.238, 12.71467], [-4.47356, 12.71252], [-4.41412, 12.31922], [-4.57703, 12.19875], [-4.54841, 12.1385], [-4.62546, 12.13204], [-4.62987, 12.06531], [-4.70692, 12.06746], [-4.72893, 12.01579], [-5.07897, 11.97918], [-5.26389, 11.84778], [-5.40258, 11.8327], [-5.26389, 11.75728], [-5.29251, 11.61715], [-5.22867, 11.60421], [-5.20665, 11.43811], [-5.25509, 11.36905], [-5.25949, 11.24816], [-5.32553, 11.21578], [-5.32994, 11.13371], [-5.49284, 11.07538], [-5.41579, 10.84628], [-5.47083, 10.75329], [-5.46643, 10.56074], [-5.51058, 10.43177], [-5.39602, 10.2929], [-5.12465, 10.29788], [-4.96453, 9.99923], [-4.96621, 9.89132], [-4.6426, 9.70696], [-4.31392, 9.60062], [-4.25999, 9.76012], [-3.69703, 9.94279], [-3.31779, 9.91125], [-3.27228, 9.84981], [-3.19306, 9.93781], [-3.16609, 9.85147], [-3.00765, 9.74019], [-2.93012, 9.57403], [-2.76494, 9.40778], [-2.68802, 9.49343], [-2.76534, 9.56589], [-2.74174, 9.83172], [-2.83108, 10.40252], [-2.94232, 10.64281], [-2.83373, 11.0067], [-0.67143, 10.99811], [-0.61937, 10.91305], [-0.44298, 11.04292], [-0.42391, 11.11661], [-0.38219, 11.12596], [-0.35955, 11.07801], [-0.28566, 11.12713], [-0.27374, 11.17157], [-0.13493, 11.14075], [0.50388, 11.01011], [0.48852, 10.98561], [0.50521, 10.98035], [0.4958, 10.93269], [0.66104, 10.99964], [0.91245, 10.99597], [0.9813, 11.08876], [1.03409, 11.04719], [1.42823, 11.46822], [2.00988, 11.42227], [2.29983, 11.68254], [2.39723, 11.89473], [2.05785, 12.35539], [2.26349, 12.41915], [0.99167, 13.10727], [0.99253, 13.37515], [1.18873, 13.31771], [1.21217, 13.37853], [1.24516, 13.33968], [1.28509, 13.35488], [1.24429, 13.39373], [1.20088, 13.38951], [1.02813, 13.46635], [0.99514, 13.5668], [0.77637, 13.64442], [0.77377, 13.6866], [0.61924, 13.68491], [0.38051, 14.05575], [0.16936, 14.51654], [0.23859, 15.00135]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BG",
      iso1A3: "BGR",
      iso1N3: "100",
      wikidata: "Q219",
      nameEn: "Bulgaria",
      groups: ["EU", "151", "150", "UN"],
      callingCodes: ["359"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[23.05288, 43.79494], [22.85314, 43.84452], [22.83753, 43.88055], [22.87873, 43.9844], [23.01674, 44.01946], [23.04988, 44.07694], [22.67173, 44.21564], [22.61711, 44.16938], [22.61688, 44.06534], [22.41449, 44.00514], [22.35558, 43.81281], [22.41043, 43.69566], [22.47582, 43.6558], [22.53397, 43.47225], [22.82036, 43.33665], [22.89727, 43.22417], [23.00806, 43.19279], [22.98104, 43.11199], [22.89521, 43.03625], [22.78397, 42.98253], [22.74826, 42.88701], [22.54302, 42.87774], [22.43309, 42.82057], [22.4997, 42.74144], [22.43983, 42.56851], [22.55669, 42.50144], [22.51961, 42.3991], [22.47498, 42.3915], [22.45919, 42.33822], [22.34773, 42.31725], [22.38136, 42.30339], [22.47251, 42.20393], [22.50289, 42.19527], [22.51224, 42.15457], [22.67701, 42.06614], [22.86749, 42.02275], [22.90254, 41.87587], [22.96682, 41.77137], [23.01239, 41.76527], [23.03342, 41.71034], [22.95513, 41.63265], [22.96331, 41.35782], [22.93334, 41.34104], [23.1833, 41.31755], [23.21953, 41.33773], [23.22771, 41.37106], [23.31301, 41.40525], [23.33639, 41.36317], [23.40416, 41.39999], [23.52453, 41.40262], [23.63203, 41.37632], [23.67644, 41.41139], [23.76525, 41.40175], [23.80148, 41.43943], [23.89613, 41.45257], [23.91483, 41.47971], [23.96975, 41.44118], [24.06908, 41.46132], [24.06323, 41.53222], [24.10063, 41.54796], [24.18126, 41.51735], [24.27124, 41.57682], [24.30513, 41.51297], [24.52599, 41.56808], [24.61129, 41.42278], [24.71529, 41.41928], [24.8041, 41.34913], [24.82514, 41.4035], [24.86136, 41.39298], [24.90928, 41.40876], [24.942, 41.38685], [25.11611, 41.34212], [25.28322, 41.23411], [25.48187, 41.28506], [25.52394, 41.2798], [25.55082, 41.31667], [25.61042, 41.30614], [25.66183, 41.31316], [25.70507, 41.29209], [25.8266, 41.34563], [25.87919, 41.30526], [26.12926, 41.35878], [26.16548, 41.42278], [26.20288, 41.43943], [26.14796, 41.47533], [26.176, 41.50072], [26.17951, 41.55409], [26.14328, 41.55496], [26.15146, 41.60828], [26.07083, 41.64584], [26.06148, 41.70345], [26.16841, 41.74858], [26.21325, 41.73223], [26.22888, 41.74139], [26.2654, 41.71544], [26.30255, 41.70925], [26.35957, 41.71149], [26.32952, 41.73637], [26.33589, 41.76802], [26.36952, 41.82265], [26.53968, 41.82653], [26.57961, 41.90024], [26.56051, 41.92995], [26.62996, 41.97644], [26.79143, 41.97386], [26.95638, 42.00741], [27.03277, 42.0809], [27.08486, 42.08735], [27.19251, 42.06028], [27.22376, 42.10152], [27.27411, 42.10409], [27.45478, 41.96591], [27.52379, 41.93756], [27.55191, 41.90928], [27.69949, 41.97515], [27.81235, 41.94803], [27.83492, 41.99709], [27.91479, 41.97902], [28.02971, 41.98066], [28.32297, 41.98371], [29.24336, 43.70874], [28.23293, 43.76], [27.99558, 43.84193], [27.92008, 44.00761], [27.73468, 43.95326], [27.64542, 44.04958], [27.60834, 44.01206], [27.39757, 44.0141], [27.26845, 44.12602], [26.95141, 44.13555], [26.62712, 44.05698], [26.38764, 44.04356], [26.10115, 43.96908], [26.05584, 43.90925], [25.94911, 43.85745], [25.72792, 43.69263], [25.39528, 43.61866], [25.17144, 43.70261], [25.10718, 43.6831], [24.96682, 43.72693], [24.73542, 43.68523], [24.62281, 43.74082], [24.50264, 43.76314], [24.35364, 43.70211], [24.18149, 43.68218], [23.73978, 43.80627], [23.61687, 43.79289], [23.4507, 43.84936], [23.26772, 43.84843], [23.05288, 43.79494]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BH",
      iso1A3: "BHR",
      iso1N3: "048",
      wikidata: "Q398",
      nameEn: "Bahrain",
      groups: ["145", "142", "UN"],
      callingCodes: ["973"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[50.93865, 26.30758], [50.71771, 26.73086], [50.38162, 26.53976], [50.26923, 26.08243], [50.302, 25.87592], [50.57069, 25.57887], [50.80824, 25.54641], [50.7801, 25.595], [50.86149, 25.6965], [50.81266, 25.88946], [50.93865, 26.30758]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BI",
      iso1A3: "BDI",
      iso1N3: "108",
      wikidata: "Q967",
      nameEn: "Burundi",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["257"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[30.54501, -2.41404], [30.42933, -2.31064], [30.14034, -2.43626], [29.95911, -2.33348], [29.88237, -2.75105], [29.36805, -2.82933], [29.32234, -2.6483], [29.0562, -2.58632], [29.04081, -2.7416], [29.00167, -2.78523], [29.00404, -2.81978], [29.0505, -2.81774], [29.09119, -2.87871], [29.09797, -2.91935], [29.16037, -2.95457], [29.17258, -2.99385], [29.25633, -3.05471], [29.21463, -3.3514], [29.23708, -3.75856], [29.43673, -4.44845], [29.63827, -4.44681], [29.75109, -4.45836], [29.77289, -4.41733], [29.82885, -4.36153], [29.88172, -4.35743], [30.03323, -4.26631], [30.22042, -4.01738], [30.45915, -3.56532], [30.84165, -3.25152], [30.83823, -2.97837], [30.6675, -2.98987], [30.57926, -2.89791], [30.4987, -2.9573], [30.40662, -2.86151], [30.52747, -2.65841], [30.41789, -2.66266], [30.54501, -2.41404]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BJ",
      iso1A3: "BEN",
      iso1N3: "204",
      wikidata: "Q962",
      nameEn: "Benin",
      aliases: ["DY"],
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["229"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[3.59375, 11.70269], [3.48187, 11.86092], [3.31613, 11.88495], [3.25352, 12.01467], [2.83978, 12.40585], [2.6593, 12.30631], [2.37783, 12.24804], [2.39657, 12.10952], [2.45824, 11.98672], [2.39723, 11.89473], [2.29983, 11.68254], [2.00988, 11.42227], [1.42823, 11.46822], [1.03409, 11.04719], [0.9813, 11.08876], [0.91245, 10.99597], [0.8804, 10.803], [0.80358, 10.71459], [0.77666, 10.37665], [1.35507, 9.99525], [1.36624, 9.5951], [1.33675, 9.54765], [1.41746, 9.3226], [1.5649, 9.16941], [1.61838, 9.0527], [1.64249, 6.99562], [1.55877, 6.99737], [1.61812, 6.74843], [1.58105, 6.68619], [1.76906, 6.43189], [1.79826, 6.28221], [1.62913, 6.24075], [1.67336, 6.02702], [2.74181, 6.13349], [2.70566, 6.38038], [2.70464, 6.50831], [2.74334, 6.57291], [2.7325, 6.64057], [2.78204, 6.70514], [2.78823, 6.76356], [2.73405, 6.78508], [2.74024, 6.92802], [2.71702, 6.95722], [2.76965, 7.13543], [2.74489, 7.42565], [2.79442, 7.43486], [2.78668, 7.5116], [2.73405, 7.5423], [2.73095, 7.7755], [2.67523, 7.87825], [2.77907, 9.06924], [3.08017, 9.10006], [3.14147, 9.28375], [3.13928, 9.47167], [3.25093, 9.61632], [3.34726, 9.70696], [3.32099, 9.78032], [3.35383, 9.83641], [3.54429, 9.87739], [3.66908, 10.18136], [3.57275, 10.27185], [3.6844, 10.46351], [3.78292, 10.40538], [3.84243, 10.59316], [3.71505, 11.13015], [3.49175, 11.29765], [3.59375, 11.70269]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BL",
      iso1A3: "BLM",
      iso1N3: "652",
      wikidata: "Q25362",
      nameEn: "Saint-Barth\xE9lemy",
      country: "FR",
      groups: ["Q1451600", "029", "003", "419", "019", "UN"],
      callingCodes: ["590"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-62.62718, 18.26185], [-63.1055, 17.86651], [-62.34423, 17.49165], [-62.62718, 18.26185]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BM",
      iso1A3: "BMU",
      iso1N3: "060",
      wikidata: "Q23635",
      nameEn: "Bermuda",
      country: "GB",
      groups: ["BOTS", "021", "003", "019", "UN"],
      driveSide: "left",
      callingCodes: ["1 441"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.20987, 32.6953], [-65.31453, 32.68437], [-65.63955, 31.43417], [-63.20987, 32.6953]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BN",
      iso1A3: "BRN",
      iso1N3: "096",
      wikidata: "Q921",
      nameEn: "Brunei",
      groups: ["Q36117", "035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["673"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[115.16236, 5.01011], [115.02521, 5.35005], [114.10166, 4.76112], [114.07448, 4.58441], [114.15813, 4.57], [114.26876, 4.49878], [114.32176, 4.34942], [114.32176, 4.2552], [114.4416, 4.27588], [114.49922, 4.13108], [114.64211, 4.00694], [114.78539, 4.12205], [114.88039, 4.4257], [114.83189, 4.42387], [114.77303, 4.72871], [114.8266, 4.75062], [114.88841, 4.81905], [114.96982, 4.81146], [114.99417, 4.88201], [115.05038, 4.90275], [115.02955, 4.82087], [115.02278, 4.74137], [115.04064, 4.63706], [115.07737, 4.53418], [115.09978, 4.39123], [115.31275, 4.30806], [115.36346, 4.33563], [115.2851, 4.42295], [115.27819, 4.63661], [115.20737, 4.8256], [115.15092, 4.87604], [115.16236, 5.01011]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BO",
      iso1A3: "BOL",
      iso1N3: "068",
      wikidata: "Q750",
      nameEn: "Bolivia",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["591"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.90248, -12.52544], [-64.22539, -12.45267], [-64.30708, -12.46398], [-64.99778, -11.98604], [-65.30027, -11.48749], [-65.28141, -10.86289], [-65.35402, -10.78685], [-65.37923, -10.35141], [-65.29019, -9.86253], [-65.40615, -9.63894], [-65.56244, -9.84266], [-65.68343, -9.75323], [-67.17784, -10.34016], [-68.71533, -11.14749], [-68.7651, -11.0496], [-68.75179, -11.03688], [-68.75265, -11.02383], [-68.74802, -11.00891], [-69.42792, -10.93451], [-69.47839, -10.95254], [-69.57156, -10.94555], [-68.98115, -11.8979], [-68.65044, -12.50689], [-68.85615, -12.87769], [-68.8864, -13.40792], [-69.05265, -13.68546], [-68.88135, -14.18639], [-69.36254, -14.94634], [-69.14856, -15.23478], [-69.40336, -15.61358], [-69.20291, -16.16668], [-69.09986, -16.22693], [-68.96238, -16.194], [-68.79464, -16.33272], [-68.98358, -16.42165], [-69.04027, -16.57214], [-69.00853, -16.66769], [-69.16896, -16.72233], [-69.62883, -17.28142], [-69.46863, -17.37466], [-69.46897, -17.4988], [-69.46623, -17.60518], [-69.34126, -17.72753], [-69.28671, -17.94844], [-69.07496, -18.03715], [-69.14807, -18.16893], [-69.07432, -18.28259], [-68.94987, -18.93302], [-68.87082, -19.06003], [-68.80602, -19.08355], [-68.61989, -19.27584], [-68.41218, -19.40499], [-68.66761, -19.72118], [-68.54611, -19.84651], [-68.57132, -20.03134], [-68.74273, -20.08817], [-68.7276, -20.46178], [-68.44023, -20.62701], [-68.55383, -20.7355], [-68.53957, -20.91542], [-68.40403, -20.94562], [-68.18816, -21.28614], [-67.85114, -22.87076], [-67.54284, -22.89771], [-67.18382, -22.81525], [-66.7298, -22.23644], [-66.29714, -22.08741], [-66.24077, -21.77837], [-66.03836, -21.84829], [-66.04832, -21.9187], [-65.9261, -21.93335], [-65.7467, -22.10105], [-65.61166, -22.09504], [-65.58694, -22.09794], [-65.57743, -22.07675], [-65.47435, -22.08908], [-64.99524, -22.08255], [-64.90014, -22.12136], [-64.67174, -22.18957], [-64.58888, -22.25035], [-64.4176, -22.67692], [-64.35108, -22.73282], [-64.31489, -22.88824], [-64.22918, -22.55807], [-63.93287, -21.99934], [-63.70963, -21.99934], [-63.68113, -22.0544], [-63.66482, -21.99918], [-62.81124, -21.9987], [-62.8078, -22.12534], [-62.64455, -22.25091], [-62.2757, -21.06657], [-62.26883, -20.55311], [-61.93912, -20.10053], [-61.73723, -19.63958], [-60.00638, -19.2981], [-59.06965, -19.29148], [-58.23216, -19.80058], [-58.16225, -20.16193], [-57.8496, -19.98346], [-58.14215, -19.76276], [-57.78463, -19.03259], [-57.71113, -19.03161], [-57.69134, -19.00544], [-57.71995, -18.97546], [-57.71995, -18.89573], [-57.76764, -18.90087], [-57.56807, -18.25655], [-57.48237, -18.24219], [-57.69877, -17.8431], [-57.73949, -17.56095], [-57.90082, -17.44555], [-57.99661, -17.5273], [-58.32935, -17.28195], [-58.5058, -16.80958], [-58.30918, -16.3699], [-58.32431, -16.25861], [-58.41506, -16.32636], [-60.16069, -16.26479], [-60.23797, -15.50267], [-60.58224, -15.09887], [-60.23968, -15.09515], [-60.27887, -14.63021], [-60.46037, -14.22496], [-60.48053, -13.77981], [-61.05527, -13.50054], [-61.81151, -13.49564], [-63.76259, -12.42952], [-63.90248, -12.52544]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BQ",
      iso1A3: "BES",
      iso1N3: "535",
      wikidata: "Q27561",
      nameEn: "Caribbean Netherlands",
      country: "NL"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BR",
      iso1A3: "BRA",
      iso1N3: "076",
      wikidata: "Q155",
      nameEn: "Brazil",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["55"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-59.69361, 4.34069], [-59.78878, 4.45637], [-60.15953, 4.53456], [-60.04189, 4.69801], [-59.98129, 5.07097], [-60.20944, 5.28754], [-60.32352, 5.21299], [-60.73204, 5.20931], [-60.5802, 4.94312], [-60.86539, 4.70512], [-60.98303, 4.54167], [-61.15703, 4.49839], [-61.31457, 4.54167], [-61.29675, 4.44216], [-61.48569, 4.43149], [-61.54629, 4.2822], [-62.13094, 4.08309], [-62.44822, 4.18621], [-62.57656, 4.04754], [-62.74411, 4.03331], [-62.7655, 3.73099], [-62.98296, 3.59935], [-63.21111, 3.96219], [-63.4464, 3.9693], [-63.42233, 3.89995], [-63.50611, 3.83592], [-63.67099, 4.01731], [-63.70218, 3.91417], [-63.86082, 3.94796], [-63.99183, 3.90172], [-64.14512, 4.12932], [-64.57648, 4.12576], [-64.72977, 4.28931], [-64.84028, 4.24665], [-64.48379, 3.7879], [-64.02908, 2.79797], [-64.0257, 2.48156], [-63.39114, 2.4317], [-63.39827, 2.16098], [-64.06135, 1.94722], [-64.08274, 1.64792], [-64.34654, 1.35569], [-64.38932, 1.5125], [-65.11657, 1.12046], [-65.57288, 0.62856], [-65.50158, 0.92086], [-65.6727, 1.01353], [-66.28507, 0.74585], [-66.85795, 1.22998], [-67.08222, 1.17441], [-67.15784, 1.80439], [-67.299, 1.87494], [-67.40488, 2.22258], [-67.9292, 1.82455], [-68.18632, 2.00091], [-68.26699, 1.83463], [-68.18128, 1.72881], [-69.38621, 1.70865], [-69.53746, 1.76408], [-69.83491, 1.69353], [-69.82987, 1.07864], [-69.26017, 1.06856], [-69.14422, 0.84172], [-69.20976, 0.57958], [-69.47696, 0.71065], [-70.04162, 0.55437], [-70.03658, -0.19681], [-69.603, -0.51947], [-69.59796, -0.75136], [-69.4215, -1.01853], [-69.43395, -1.42219], [-69.94708, -4.2431], [-70.00888, -4.37833], [-70.11305, -4.27281], [-70.19582, -4.3607], [-70.33236, -4.15214], [-70.77601, -4.15717], [-70.96814, -4.36915], [-71.87003, -4.51661], [-72.64391, -5.0391], [-72.83973, -5.14765], [-73.24579, -6.05764], [-73.12983, -6.43852], [-73.73986, -6.87919], [-73.77011, -7.28944], [-73.96938, -7.58465], [-73.65485, -7.77897], [-73.76576, -7.89884], [-72.92886, -9.04074], [-73.21498, -9.40904], [-72.72216, -9.41397], [-72.31883, -9.5184], [-72.14742, -9.98049], [-71.23394, -9.9668], [-70.53373, -9.42628], [-70.58453, -9.58303], [-70.55429, -9.76692], [-70.62487, -9.80666], [-70.64134, -11.0108], [-70.51395, -10.92249], [-70.38791, -11.07096], [-69.90896, -10.92744], [-69.57835, -10.94051], [-69.57156, -10.94555], [-69.47839, -10.95254], [-69.42792, -10.93451], [-68.74802, -11.00891], [-68.75265, -11.02383], [-68.75179, -11.03688], [-68.7651, -11.0496], [-68.71533, -11.14749], [-67.17784, -10.34016], [-65.68343, -9.75323], [-65.56244, -9.84266], [-65.40615, -9.63894], [-65.29019, -9.86253], [-65.37923, -10.35141], [-65.35402, -10.78685], [-65.28141, -10.86289], [-65.30027, -11.48749], [-64.99778, -11.98604], [-64.30708, -12.46398], [-64.22539, -12.45267], [-63.90248, -12.52544], [-63.76259, -12.42952], [-61.81151, -13.49564], [-61.05527, -13.50054], [-60.48053, -13.77981], [-60.46037, -14.22496], [-60.27887, -14.63021], [-60.23968, -15.09515], [-60.58224, -15.09887], [-60.23797, -15.50267], [-60.16069, -16.26479], [-58.41506, -16.32636], [-58.32431, -16.25861], [-58.30918, -16.3699], [-58.5058, -16.80958], [-58.32935, -17.28195], [-57.99661, -17.5273], [-57.90082, -17.44555], [-57.73949, -17.56095], [-57.69877, -17.8431], [-57.48237, -18.24219], [-57.56807, -18.25655], [-57.76764, -18.90087], [-57.71995, -18.89573], [-57.71995, -18.97546], [-57.69134, -19.00544], [-57.71113, -19.03161], [-57.78463, -19.03259], [-58.14215, -19.76276], [-57.8496, -19.98346], [-58.16225, -20.16193], [-57.84536, -20.93155], [-57.93492, -21.65505], [-57.88239, -21.6868], [-57.94642, -21.73799], [-57.98625, -22.09157], [-56.6508, -22.28387], [-56.5212, -22.11556], [-56.45893, -22.08072], [-56.23206, -22.25347], [-55.8331, -22.29008], [-55.74941, -22.46436], [-55.741, -22.52018], [-55.72366, -22.5519], [-55.6986, -22.56268], [-55.68742, -22.58407], [-55.62493, -22.62765], [-55.63849, -22.95122], [-55.5446, -23.22811], [-55.52288, -23.2595], [-55.5555, -23.28237], [-55.43585, -23.87157], [-55.44117, -23.9185], [-55.41784, -23.9657], [-55.12292, -23.99669], [-55.0518, -23.98666], [-55.02691, -23.97317], [-54.6238, -23.83078], [-54.32807, -24.01865], [-54.28207, -24.07305], [-54.4423, -25.13381], [-54.62033, -25.46026], [-54.60196, -25.48397], [-54.59509, -25.53696], [-54.59398, -25.59224], [-54.5502, -25.58915], [-54.52926, -25.62846], [-53.90831, -25.55513], [-53.83691, -25.94849], [-53.73511, -26.04211], [-53.73086, -26.05842], [-53.7264, -26.0664], [-53.73391, -26.07006], [-53.73968, -26.10012], [-53.65018, -26.19501], [-53.65237, -26.23289], [-53.63739, -26.2496], [-53.63881, -26.25075], [-53.64632, -26.24798], [-53.64186, -26.25976], [-53.64505, -26.28089], [-53.68269, -26.33359], [-53.73372, -26.6131], [-53.80144, -27.09844], [-54.15978, -27.2889], [-54.19062, -27.27639], [-54.19268, -27.30751], [-54.41888, -27.40882], [-54.50416, -27.48232], [-54.67657, -27.57214], [-54.90159, -27.63132], [-54.90805, -27.73149], [-55.1349, -27.89759], [-55.16872, -27.86224], [-55.33303, -27.94661], [-55.6262, -28.17124], [-55.65418, -28.18304], [-56.01729, -28.51223], [-56.00458, -28.60421], [-56.05265, -28.62651], [-56.54171, -29.11447], [-56.57295, -29.11357], [-56.62789, -29.18073], [-56.81251, -29.48154], [-57.09386, -29.74211], [-57.65132, -30.19229], [-57.22502, -30.26121], [-56.90236, -30.02578], [-56.49267, -30.39471], [-56.4795, -30.3899], [-56.4619, -30.38457], [-55.87388, -31.05053], [-55.58866, -30.84117], [-55.5634, -30.8686], [-55.55373, -30.8732], [-55.55218, -30.88193], [-55.54572, -30.89051], [-55.53431, -30.89714], [-55.53276, -30.90218], [-55.52712, -30.89997], [-55.51862, -30.89828], [-55.50841, -30.9027], [-55.50821, -30.91349], [-54.17384, -31.86168], [-53.76024, -32.0751], [-53.39572, -32.58596], [-53.37671, -32.57005], [-53.1111, -32.71147], [-53.53459, -33.16843], [-53.52794, -33.68908], [-53.44031, -33.69344], [-53.39593, -33.75169], [-53.37138, -33.74313], [-52.83257, -34.01481], [-28.34015, -20.99094], [-28.99601, 1.86593], [-51.35485, 4.8383], [-51.63798, 4.51394], [-51.61983, 4.14596], [-51.79599, 3.89336], [-51.82312, 3.85825], [-51.85573, 3.83427], [-52.31787, 3.17896], [-52.6906, 2.37298], [-52.96539, 2.1881], [-53.78743, 2.34412], [-54.16286, 2.10779], [-54.6084, 2.32856], [-55.01919, 2.564], [-55.71493, 2.40342], [-55.96292, 2.53188], [-56.13054, 2.27723], [-55.92159, 2.05236], [-55.89863, 1.89861], [-55.99278, 1.83137], [-56.47045, 1.95135], [-56.7659, 1.89509], [-57.07092, 1.95304], [-57.09109, 2.01854], [-57.23981, 1.95808], [-57.35073, 1.98327], [-57.55743, 1.69605], [-57.77281, 1.73344], [-57.97336, 1.64566], [-58.01873, 1.51966], [-58.33887, 1.58014], [-58.4858, 1.48399], [-58.53571, 1.29154], [-58.84229, 1.17749], [-58.92072, 1.31293], [-59.25583, 1.40559], [-59.74066, 1.87596], [-59.7264, 2.27497], [-59.91177, 2.36759], [-59.99733, 2.92312], [-59.79769, 3.37162], [-59.86899, 3.57089], [-59.51963, 3.91951], [-59.73353, 4.20399], [-59.69361, 4.34069]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BS",
      iso1A3: "BHS",
      iso1N3: "044",
      wikidata: "Q778",
      nameEn: "The Bahamas",
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 242"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-72.98446, 20.4801], [-71.70065, 25.7637], [-78.91214, 27.76553], [-80.65727, 23.71953], [-72.98446, 20.4801]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BT",
      iso1A3: "BTN",
      iso1N3: "064",
      wikidata: "Q917",
      nameEn: "Bhutan",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["975"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[91.6469, 27.76358], [91.5629, 27.84823], [91.48973, 27.93903], [91.46327, 28.0064], [91.25779, 28.07509], [91.20019, 27.98715], [90.69894, 28.07784], [90.58842, 28.02838], [90.13387, 28.19178], [89.79762, 28.23979], [89.59525, 28.16433], [89.12825, 27.62502], [89.0582, 27.60985], [88.97213, 27.51671], [88.95355, 27.4106], [89.00216, 27.32532], [88.96947, 27.30319], [88.93678, 27.33777], [88.91901, 27.32483], [88.74219, 27.144], [88.86984, 27.10937], [88.8714, 26.97488], [88.92301, 26.99286], [88.95807, 26.92668], [89.09554, 26.89089], [89.12825, 26.81661], [89.1926, 26.81329], [89.37913, 26.86224], [89.38319, 26.85963], [89.3901, 26.84225], [89.42349, 26.83727], [89.63369, 26.74402], [89.86124, 26.73307], [90.04535, 26.72422], [90.30402, 26.85098], [90.39271, 26.90704], [90.48504, 26.8594], [90.67715, 26.77215], [91.50067, 26.79223], [91.83181, 26.87318], [92.05523, 26.8692], [92.11863, 26.893], [92.03457, 27.07334], [92.04702, 27.26861], [92.12019, 27.27829], [92.01132, 27.47352], [91.65007, 27.48287], [91.55819, 27.6144], [91.6469, 27.76358]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BV",
      iso1A3: "BVT",
      iso1N3: "074",
      wikidata: "Q23408",
      nameEn: "Bouvet Island",
      country: "NO",
      groups: ["005", "419", "019", "UN"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[4.54042, -54.0949], [2.28941, -54.13089], [3.35353, -55.17558], [4.54042, -54.0949]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BW",
      iso1A3: "BWA",
      iso1N3: "072",
      wikidata: "Q963",
      nameEn: "Botswana",
      groups: ["018", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["267"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[25.26433, -17.79571], [25.16882, -17.78253], [25.05895, -17.84452], [24.95586, -17.79674], [24.73364, -17.89338], [24.71887, -17.9218], [24.6303, -17.9863], [24.57485, -18.07151], [24.40577, -17.95726], [24.19416, -18.01919], [23.61088, -18.4881], [23.29618, -17.99855], [23.0996, -18.00075], [21.45556, -18.31795], [20.99904, -18.31743], [20.99751, -22.00026], [19.99912, -21.99991], [19.99817, -24.76768], [20.02809, -24.78725], [20.03678, -24.81004], [20.29826, -24.94869], [20.64795, -25.47827], [20.86081, -26.14892], [20.61754, -26.4692], [20.63275, -26.78181], [20.68596, -26.9039], [20.87031, -26.80047], [21.13353, -26.86661], [21.37869, -26.82083], [21.69322, -26.86152], [21.7854, -26.79199], [21.77114, -26.69015], [21.83291, -26.65959], [21.90703, -26.66808], [22.06192, -26.61882], [22.21206, -26.3773], [22.41921, -26.23078], [22.56365, -26.19668], [22.70808, -25.99186], [22.86012, -25.50572], [23.03497, -25.29971], [23.47588, -25.29971], [23.9244, -25.64286], [24.18287, -25.62916], [24.36531, -25.773], [24.44703, -25.73021], [24.67319, -25.81749], [24.8946, -25.80723], [25.01718, -25.72507], [25.12266, -25.75931], [25.33076, -25.76616], [25.58543, -25.6343], [25.6643, -25.4491], [25.69661, -25.29284], [25.72702, -25.25503], [25.88571, -24.87802], [25.84295, -24.78661], [25.8515, -24.75727], [26.39409, -24.63468], [26.46346, -24.60358], [26.51667, -24.47219], [26.84165, -24.24885], [26.99749, -23.65486], [27.33768, -23.40917], [27.52393, -23.37952], [27.6066, -23.21894], [27.74154, -23.2137], [27.93539, -23.04941], [27.93729, -22.96194], [28.04752, -22.90243], [28.04562, -22.8394], [28.34874, -22.5694], [28.63287, -22.55887], [28.91889, -22.44299], [29.0151, -22.22907], [29.10881, -22.21202], [29.15268, -22.21399], [29.18974, -22.18599], [29.21955, -22.17771], [29.37703, -22.19581], [29.3533, -22.18363], [29.24648, -22.05967], [29.1974, -22.07472], [29.14501, -22.07275], [29.08495, -22.04867], [29.04108, -22.00563], [29.02191, -21.95665], [29.02191, -21.90647], [29.04023, -21.85864], [29.07763, -21.81877], [28.58114, -21.63455], [28.49942, -21.66634], [28.29416, -21.59037], [28.01669, -21.57624], [27.91407, -21.31621], [27.69171, -21.08409], [27.72972, -20.51735], [27.69361, -20.48531], [27.28865, -20.49873], [27.29831, -20.28935], [27.21278, -20.08244], [26.72246, -19.92707], [26.17227, -19.53709], [25.96226, -19.08152], [25.99837, -19.02943], [25.94326, -18.90362], [25.82353, -18.82808], [25.79217, -18.6355], [25.68859, -18.56165], [25.53465, -18.39041], [25.39972, -18.12691], [25.31799, -18.07091], [25.23909, -17.90832], [25.26433, -17.79571]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BY",
      iso1A3: "BLR",
      iso1N3: "112",
      wikidata: "Q184",
      nameEn: "Belarus",
      groups: ["151", "150", "UN"],
      callingCodes: ["375"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[28.15217, 56.16964], [27.97865, 56.11849], [27.63065, 55.89687], [27.61683, 55.78558], [27.3541, 55.8089], [27.27804, 55.78299], [27.1559, 55.85032], [26.97153, 55.8102], [26.87448, 55.7172], [26.76872, 55.67658], [26.71802, 55.70645], [26.64888, 55.70515], [26.63231, 55.67968], [26.63167, 55.57887], [26.55094, 55.5093], [26.5522, 55.40277], [26.44937, 55.34832], [26.5709, 55.32572], [26.6714, 55.33902], [26.80929, 55.31642], [26.83266, 55.30444], [26.835, 55.28182], [26.73017, 55.24226], [26.72983, 55.21788], [26.68075, 55.19787], [26.69243, 55.16718], [26.54753, 55.14181], [26.51481, 55.16051], [26.46249, 55.12814], [26.35121, 55.1525], [26.30628, 55.12536], [26.23202, 55.10439], [26.26941, 55.08032], [26.20397, 54.99729], [26.13386, 54.98924], [26.05907, 54.94631], [25.99129, 54.95705], [25.89462, 54.93438], [25.74122, 54.80108], [25.75977, 54.57252], [25.68045, 54.5321], [25.64813, 54.48704], [25.62203, 54.4656], [25.63371, 54.42075], [25.5376, 54.33158], [25.55425, 54.31591], [25.68513, 54.31727], [25.78553, 54.23327], [25.78563, 54.15747], [25.71084, 54.16704], [25.64875, 54.1259], [25.54724, 54.14925], [25.51452, 54.17799], [25.56823, 54.25212], [25.509, 54.30267], [25.35559, 54.26544], [25.22705, 54.26271], [25.19199, 54.219], [25.0728, 54.13419], [24.991, 54.14241], [24.96894, 54.17589], [24.77131, 54.11091], [24.85311, 54.02862], [24.74279, 53.96663], [24.69185, 53.96543], [24.69652, 54.01901], [24.62275, 54.00217], [24.44411, 53.90076], [24.34128, 53.90076], [24.19638, 53.96405], [23.98837, 53.92554], [23.95098, 53.9613], [23.81309, 53.94205], [23.80543, 53.89558], [23.71726, 53.93379], [23.61677, 53.92691], [23.51284, 53.95052], [23.62004, 53.60942], [23.81995, 53.24131], [23.85657, 53.22923], [23.91393, 53.16469], [23.87548, 53.0831], [23.92184, 53.02079], [23.94689, 52.95919], [23.91805, 52.94016], [23.93763, 52.71332], [23.73615, 52.6149], [23.58296, 52.59868], [23.45112, 52.53774], [23.34141, 52.44845], [23.18196, 52.28812], [23.20071, 52.22848], [23.47859, 52.18215], [23.54314, 52.12148], [23.61, 52.11264], [23.64066, 52.07626], [23.68733, 51.9906], [23.61523, 51.92066], [23.62691, 51.78208], [23.53198, 51.74298], [23.57053, 51.55938], [23.56236, 51.53673], [23.62751, 51.50512], [23.6736, 51.50255], [23.60906, 51.62122], [23.7766, 51.66809], [23.91118, 51.63316], [23.8741, 51.59734], [23.99907, 51.58369], [24.13075, 51.66979], [24.3163, 51.75063], [24.29021, 51.80841], [24.37123, 51.88222], [24.98784, 51.91273], [25.20228, 51.97143], [25.46163, 51.92205], [25.73673, 51.91973], [25.80574, 51.94556], [25.83217, 51.92587], [26.00408, 51.92967], [26.19084, 51.86781], [26.39367, 51.87315], [26.46962, 51.80501], [26.69759, 51.82284], [26.80043, 51.75777], [26.9489, 51.73788], [26.99422, 51.76933], [27.20602, 51.77291], [27.20948, 51.66713], [27.26613, 51.65957], [27.24828, 51.60161], [27.47212, 51.61184], [27.51058, 51.5854], [27.55727, 51.63486], [27.71932, 51.60672], [27.67125, 51.50854], [27.76052, 51.47604], [27.85253, 51.62293], [27.91844, 51.61952], [27.95827, 51.56065], [28.10658, 51.57857], [28.23452, 51.66988], [28.37592, 51.54505], [28.47051, 51.59734], [28.64429, 51.5664], [28.69161, 51.44695], [28.73143, 51.46236], [28.75615, 51.41442], [28.78224, 51.45294], [28.76027, 51.48802], [28.81795, 51.55552], [28.95528, 51.59222], [28.99098, 51.56833], [29.1187, 51.65872], [29.16402, 51.64679], [29.20659, 51.56918], [29.25603, 51.57089], [29.25191, 51.49828], [29.32881, 51.37843], [29.42357, 51.4187], [29.49773, 51.39814], [29.54372, 51.48372], [29.7408, 51.53417], [29.77376, 51.4461], [30.17888, 51.51025], [30.34642, 51.42555], [30.36153, 51.33984], [30.56203, 51.25655], [30.64992, 51.35014], [30.51946, 51.59649], [30.68804, 51.82806], [30.76443, 51.89739], [30.90897, 52.00699], [30.95589, 52.07775], [31.13332, 52.1004], [31.25142, 52.04131], [31.38326, 52.12991], [31.7822, 52.11406], [31.77877, 52.18636], [31.6895, 52.1973], [31.70735, 52.26711], [31.57971, 52.32146], [31.62084, 52.33849], [31.61397, 52.48843], [31.56316, 52.51518], [31.63869, 52.55361], [31.50406, 52.69707], [31.57277, 52.71613], [31.592, 52.79011], [31.35667, 52.97854], [31.24147, 53.031], [31.32283, 53.04101], [31.33519, 53.08805], [31.3915, 53.09712], [31.36403, 53.13504], [31.40523, 53.21406], [31.56316, 53.19432], [31.62496, 53.22886], [31.787, 53.18033], [31.82373, 53.10042], [32.15368, 53.07594], [32.40773, 53.18856], [32.51725, 53.28431], [32.73257, 53.33494], [32.74968, 53.45597], [32.47777, 53.5548], [32.40499, 53.6656], [32.50112, 53.68594], [32.45717, 53.74039], [32.36663, 53.7166], [32.12621, 53.81586], [31.89137, 53.78099], [31.77028, 53.80015], [31.85019, 53.91801], [31.88744, 54.03653], [31.89599, 54.0837], [31.57002, 54.14535], [31.30791, 54.25315], [31.3177, 54.34067], [31.22945, 54.46585], [31.08543, 54.50361], [31.21399, 54.63113], [31.19339, 54.66947], [30.99187, 54.67046], [30.98226, 54.68872], [31.0262, 54.70698], [30.97127, 54.71967], [30.95479, 54.74346], [30.75165, 54.80699], [30.8264, 54.90062], [30.81759, 54.94064], [30.93144, 54.9585], [30.95754, 54.98609], [30.9081, 55.02232], [30.94243, 55.03964], [31.00972, 55.02783], [31.02071, 55.06167], [30.97369, 55.17134], [30.87944, 55.28223], [30.81946, 55.27931], [30.8257, 55.3313], [30.93144, 55.3914], [30.90123, 55.46621], [30.95204, 55.50667], [30.93419, 55.6185], [30.86003, 55.63169], [30.7845, 55.58514], [30.72957, 55.66268], [30.67464, 55.64176], [30.63344, 55.73079], [30.51037, 55.76568], [30.51346, 55.78982], [30.48257, 55.81066], [30.30987, 55.83592], [30.27776, 55.86819], [30.12136, 55.8358], [29.97975, 55.87281], [29.80672, 55.79569], [29.61446, 55.77716], [29.51283, 55.70294], [29.3604, 55.75862], [29.44692, 55.95978], [29.21717, 55.98971], [29.08299, 56.03427], [28.73418, 55.97131], [28.63668, 56.07262], [28.68337, 56.10173], [28.5529, 56.11705], [28.43068, 56.09407], [28.37987, 56.11399], [28.36888, 56.05805], [28.30571, 56.06035], [28.15217, 56.16964]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "BZ",
      iso1A3: "BLZ",
      iso1N3: "084",
      wikidata: "Q242",
      nameEn: "Belize",
      groups: ["013", "003", "419", "019", "UN"],
      roadSpeedUnit: "mph",
      callingCodes: ["501"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-88.3268, 18.49048], [-88.48242, 18.49164], [-88.71505, 18.0707], [-88.8716, 17.89535], [-89.03839, 18.0067], [-89.15105, 17.95104], [-89.14985, 17.81563], [-89.15025, 17.04813], [-89.22683, 15.88619], [-89.17418, 15.90898], [-89.02415, 15.9063], [-88.95358, 15.88698], [-88.40779, 16.09624], [-86.92368, 17.61462], [-87.84815, 18.18511], [-87.85693, 18.18266], [-87.86657, 18.19971], [-87.87604, 18.18313], [-87.90671, 18.15213], [-88.03165, 18.16657], [-88.03238, 18.41778], [-88.26593, 18.47617], [-88.29909, 18.47591], [-88.3268, 18.49048]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CA",
      iso1A3: "CAN",
      iso1N3: "124",
      wikidata: "Q16",
      nameEn: "Canada",
      groups: ["021", "003", "019", "UN"],
      callingCodes: ["1"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-67.20349, 45.1722], [-67.19603, 45.16771], [-67.15965, 45.16179], [-67.11316, 45.11176], [-67.0216, 44.95333], [-66.96824, 44.90965], [-66.98249, 44.87071], [-66.96824, 44.83078], [-66.93432, 44.82597], [-67.16117, 44.20069], [-61.98255, 37.34815], [-56.27503, 47.39728], [-53.12387, 41.40385], [-46.37635, 57.3249], [-77.52957, 77.23408], [-68.21821, 80.48551], [-49.33696, 84.57952], [-140.97446, 84.39275], [-141.00116, 60.30648], [-140.5227, 60.22077], [-140.45648, 60.30919], [-139.98024, 60.18027], [-139.68991, 60.33693], [-139.05831, 60.35205], [-139.20603, 60.08896], [-139.05365, 59.99655], [-138.71149, 59.90728], [-138.62145, 59.76431], [-137.60623, 59.24465], [-137.4925, 58.89415], [-136.82619, 59.16198], [-136.52365, 59.16752], [-136.47323, 59.46617], [-136.33727, 59.44466], [-136.22381, 59.55526], [-136.31566, 59.59083], [-135.48007, 59.79937], [-135.03069, 59.56208], [-135.00267, 59.28745], [-134.7047, 59.2458], [-134.55699, 59.1297], [-134.48059, 59.13231], [-134.27175, 58.8634], [-133.84645, 58.73543], [-133.38523, 58.42773], [-131.8271, 56.62247], [-130.77769, 56.36185], [-130.33965, 56.10849], [-130.10173, 56.12178], [-130.00093, 56.00325], [-130.00857, 55.91344], [-130.15373, 55.74895], [-129.97513, 55.28029], [-130.08035, 55.21556], [-130.18765, 55.07744], [-130.27203, 54.97174], [-130.44184, 54.85377], [-130.64499, 54.76912], [-130.61931, 54.70835], [-133.92876, 54.62289], [-133.36909, 48.51151], [-125.03842, 48.53282], [-123.50039, 48.21223], [-123.15614, 48.35395], [-123.26565, 48.6959], [-123.0093, 48.76586], [-123.0093, 48.83186], [-123.32163, 49.00419], [-95.15355, 48.9996], [-95.15357, 49.384], [-95.12903, 49.37056], [-95.05825, 49.35311], [-95.01419, 49.35647], [-94.99532, 49.36579], [-94.95681, 49.37035], [-94.85381, 49.32492], [-94.8159, 49.32299], [-94.82487, 49.29483], [-94.77355, 49.11998], [-94.75017, 49.09931], [-94.687, 48.84077], [-94.70087, 48.8339], [-94.70486, 48.82365], [-94.69669, 48.80918], [-94.69335, 48.77883], [-94.58903, 48.71803], [-94.54885, 48.71543], [-94.53826, 48.70216], [-94.44258, 48.69223], [-94.4174, 48.71049], [-94.27153, 48.70232], [-94.25172, 48.68404], [-94.25104, 48.65729], [-94.23215, 48.65202], [-93.85769, 48.63284], [-93.83288, 48.62745], [-93.80676, 48.58232], [-93.80939, 48.52439], [-93.79267, 48.51631], [-93.66382, 48.51845], [-93.47022, 48.54357], [-93.44472, 48.59147], [-93.40693, 48.60948], [-93.39758, 48.60364], [-93.3712, 48.60599], [-93.33946, 48.62787], [-93.25391, 48.64266], [-92.94973, 48.60866], [-92.7287, 48.54005], [-92.6342, 48.54133], [-92.62747, 48.50278], [-92.69927, 48.49573], [-92.71323, 48.46081], [-92.65606, 48.43471], [-92.50712, 48.44921], [-92.45588, 48.40624], [-92.48147, 48.36609], [-92.37185, 48.22259], [-92.27167, 48.25046], [-92.30939, 48.31251], [-92.26662, 48.35651], [-92.202, 48.35252], [-92.14732, 48.36578], [-92.05339, 48.35958], [-91.98929, 48.25409], [-91.86125, 48.21278], [-91.71231, 48.19875], [-91.70451, 48.11805], [-91.55649, 48.10611], [-91.58025, 48.04339], [-91.45829, 48.07454], [-91.43248, 48.04912], [-91.25025, 48.08522], [-91.08016, 48.18096], [-90.87588, 48.2484], [-90.75045, 48.09143], [-90.56444, 48.12184], [-90.56312, 48.09488], [-90.07418, 48.11043], [-89.89974, 47.98109], [-89.77248, 48.02607], [-89.57972, 48.00023], [-89.48837, 48.01412], [-88.37033, 48.30586], [-84.85871, 46.88881], [-84.55635, 46.45974], [-84.47607, 46.45225], [-84.4481, 46.48972], [-84.42101, 46.49853], [-84.34174, 46.50683], [-84.29893, 46.49127], [-84.26351, 46.49508], [-84.2264, 46.53337], [-84.1945, 46.54061], [-84.17723, 46.52753], [-84.12885, 46.53068], [-84.11196, 46.50248], [-84.13451, 46.39218], [-84.11254, 46.32329], [-84.11615, 46.2681], [-84.09756, 46.25512], [-84.1096, 46.23987], [-83.95399, 46.05634], [-83.90453, 46.05922], [-83.83329, 46.12169], [-83.57017, 46.105], [-83.43746, 45.99749], [-83.59589, 45.82131], [-82.48419, 45.30225], [-82.42469, 42.992], [-82.4146, 42.97626], [-82.4253, 42.95423], [-82.45331, 42.93139], [-82.4826, 42.8068], [-82.46613, 42.76615], [-82.51063, 42.66025], [-82.51858, 42.611], [-82.57583, 42.5718], [-82.58873, 42.54984], [-82.64242, 42.55594], [-82.82964, 42.37355], [-83.02253, 42.33045], [-83.07837, 42.30978], [-83.09837, 42.28877], [-83.12724, 42.2376], [-83.14962, 42.04089], [-83.11184, 41.95671], [-82.67862, 41.67615], [-78.93684, 42.82887], [-78.90712, 42.89733], [-78.90905, 42.93022], [-78.93224, 42.95229], [-78.96312, 42.95509], [-78.98126, 42.97], [-79.02074, 42.98444], [-79.02424, 43.01983], [-78.99941, 43.05612], [-79.01055, 43.06659], [-79.07486, 43.07845], [-79.05671, 43.10937], [-79.06881, 43.12029], [-79.0427, 43.13934], [-79.04652, 43.16396], [-79.05384, 43.17418], [-79.05002, 43.20133], [-79.05544, 43.21224], [-79.05512, 43.25375], [-79.06921, 43.26183], [-79.25796, 43.54052], [-76.79706, 43.63099], [-76.43859, 44.09393], [-76.35324, 44.13493], [-76.31222, 44.19894], [-76.244, 44.19643], [-76.1664, 44.23051], [-76.16285, 44.28262], [-76.00018, 44.34896], [-75.95947, 44.34463], [-75.8217, 44.43176], [-75.76813, 44.51537], [-75.41441, 44.76614], [-75.2193, 44.87821], [-75.01363, 44.95608], [-74.99101, 44.98051], [-74.8447, 45.00606], [-74.66689, 45.00646], [-74.32699, 44.99029], [-73.35025, 45.00942], [-71.50067, 45.01357], [-71.48735, 45.07784], [-71.42778, 45.12624], [-71.40364, 45.21382], [-71.44252, 45.2361], [-71.37133, 45.24624], [-71.29371, 45.29996], [-71.22338, 45.25184], [-71.19723, 45.25438], [-71.14568, 45.24128], [-71.08364, 45.30623], [-71.01866, 45.31573], [-71.0107, 45.34819], [-70.95193, 45.33895], [-70.91169, 45.29849], [-70.89864, 45.2398], [-70.84816, 45.22698], [-70.80236, 45.37444], [-70.82638, 45.39828], [-70.78372, 45.43269], [-70.65383, 45.37592], [-70.62518, 45.42286], [-70.72651, 45.49771], [-70.68516, 45.56964], [-70.54019, 45.67291], [-70.38934, 45.73215], [-70.41523, 45.79497], [-70.25976, 45.89675], [-70.24694, 45.95138], [-70.31025, 45.96424], [-70.23855, 46.1453], [-70.29078, 46.18832], [-70.18547, 46.35357], [-70.05812, 46.41768], [-69.99966, 46.69543], [-69.22119, 47.46461], [-69.05148, 47.42012], [-69.05073, 47.30076], [-69.05039, 47.2456], [-68.89222, 47.1807], [-68.70125, 47.24399], [-68.60575, 47.24659], [-68.57914, 47.28431], [-68.38332, 47.28723], [-68.37458, 47.35851], [-68.23244, 47.35712], [-67.94843, 47.1925], [-67.87993, 47.10377], [-67.78578, 47.06473], [-67.78111, 45.9392], [-67.75196, 45.91814], [-67.80961, 45.87531], [-67.75654, 45.82324], [-67.80653, 45.80022], [-67.80705, 45.69528], [-67.6049, 45.60725], [-67.43815, 45.59162], [-67.42144, 45.50584], [-67.50578, 45.48971], [-67.42394, 45.37969], [-67.48201, 45.27351], [-67.34927, 45.122], [-67.29754, 45.14865], [-67.29748, 45.18173], [-67.27039, 45.1934], [-67.22751, 45.16344], [-67.20349, 45.1722]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CC",
      iso1A3: "CCK",
      iso1N3: "166",
      wikidata: "Q36004",
      nameEn: "Cocos (Keeling) Islands",
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["61"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[96.61846, -10.82438], [96.02343, -12.68334], [97.93979, -12.33309], [96.61846, -10.82438]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CD",
      iso1A3: "COD",
      iso1N3: "180",
      wikidata: "Q974",
      nameEn: "Democratic Republic of the Congo",
      aliases: ["ZR"],
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["243"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[27.44012, 5.07349], [27.09575, 5.22305], [26.93064, 5.13535], [26.85579, 5.03887], [26.74572, 5.10685], [26.48595, 5.04984], [26.13371, 5.25594], [25.86073, 5.19455], [25.53271, 5.37431], [25.34558, 5.29101], [25.31256, 5.03668], [24.71816, 4.90509], [24.46719, 5.0915], [23.38847, 4.60013], [22.94817, 4.82392], [22.89094, 4.79321], [22.84691, 4.69887], [22.78526, 4.71423], [22.6928, 4.47285], [22.60915, 4.48821], [22.5431, 4.22041], [22.45504, 4.13039], [22.27682, 4.11347], [22.10721, 4.20723], [21.6405, 4.317], [21.55904, 4.25553], [21.25744, 4.33676], [21.21341, 4.29285], [21.11214, 4.33895], [21.08793, 4.39603], [20.90383, 4.44877], [20.60184, 4.42394], [18.62755, 3.47564], [18.63857, 3.19342], [18.10683, 2.26876], [18.08034, 1.58553], [17.85887, 1.04327], [17.86989, 0.58873], [17.95255, 0.48128], [17.93877, 0.32424], [17.81204, 0.23884], [17.66051, -0.26535], [17.72112, -0.52707], [17.32438, -0.99265], [16.97999, -1.12762], [16.70724, -1.45815], [16.50336, -1.8795], [16.16173, -2.16586], [16.22785, -2.59528], [16.1755, -3.25014], [16.21407, -3.2969], [15.89448, -3.9513], [15.53081, -4.042], [15.48121, -4.22062], [15.41785, -4.28381], [15.32693, -4.27282], [15.25411, -4.31121], [15.1978, -4.32388], [14.83101, -4.80838], [14.67948, -4.92093], [14.5059, -4.84956], [14.41499, -4.8825], [14.37366, -4.56125], [14.47284, -4.42941], [14.3957, -4.36623], [14.40672, -4.28381], [13.9108, -4.50906], [13.81162, -4.41842], [13.71794, -4.44864], [13.70417, -4.72601], [13.50305, -4.77818], [13.41764, -4.89897], [13.11182, -4.5942], [13.09648, -4.63739], [13.11195, -4.67745], [12.8733, -4.74346], [12.70868, -4.95505], [12.63465, -4.94632], [12.60251, -5.01715], [12.46297, -5.09408], [12.49815, -5.14058], [12.51589, -5.1332], [12.53586, -5.14658], [12.53599, -5.1618], [12.52301, -5.17481], [12.52318, -5.74353], [12.26557, -5.74031], [12.20376, -5.76338], [11.95767, -5.94705], [12.42245, -6.07585], [13.04371, -5.87078], [16.55507, -5.85631], [16.96282, -7.21787], [17.5828, -8.13784], [18.33635, -8.00126], [19.33698, -7.99743], [19.5469, -7.00195], [20.30218, -6.98955], [20.31846, -6.91953], [20.61689, -6.90876], [20.56263, -7.28566], [21.79824, -7.29628], [21.84856, -9.59871], [22.19039, -9.94628], [22.32604, -10.76291], [22.17954, -10.85884], [22.25951, -11.24911], [22.54205, -11.05784], [23.16602, -11.10577], [23.45631, -10.946], [23.86868, -11.02856], [24.00027, -10.89356], [24.34528, -11.06816], [24.42612, -11.44975], [25.34069, -11.19707], [25.33058, -11.65767], [26.01777, -11.91488], [26.88687, -12.01868], [27.04351, -11.61312], [27.22541, -11.60323], [27.21025, -11.76157], [27.59932, -12.22123], [28.33199, -12.41375], [29.01918, -13.41353], [29.60531, -13.21685], [29.65078, -13.41844], [29.81551, -13.44683], [29.8139, -12.14898], [29.48404, -12.23604], [29.4992, -12.43843], [29.18592, -12.37921], [28.48357, -11.87532], [28.37241, -11.57848], [28.65032, -10.65133], [28.62795, -9.92942], [28.68532, -9.78], [28.56208, -9.49122], [28.51627, -9.44726], [28.52636, -9.35379], [28.36562, -9.30091], [28.38526, -9.23393], [28.9711, -8.66935], [28.88917, -8.4831], [30.79243, -8.27382], [30.2567, -7.14121], [29.52552, -6.2731], [29.43673, -4.44845], [29.23708, -3.75856], [29.21463, -3.3514], [29.25633, -3.05471], [29.17258, -2.99385], [29.16037, -2.95457], [29.09797, -2.91935], [29.09119, -2.87871], [29.0505, -2.81774], [29.00404, -2.81978], [29.00167, -2.78523], [29.04081, -2.7416], [29.00357, -2.70596], [28.94346, -2.69124], [28.89793, -2.66111], [28.90226, -2.62385], [28.89288, -2.55848], [28.87943, -2.55165], [28.86193, -2.53185], [28.86209, -2.5231], [28.87497, -2.50887], [28.88846, -2.50493], [28.89342, -2.49017], [28.89132, -2.47557], [28.86846, -2.44866], [28.86826, -2.41888], [28.89601, -2.37321], [28.95642, -2.37321], [29.00051, -2.29001], [29.105, -2.27043], [29.17562, -2.12278], [29.11847, -1.90576], [29.24458, -1.69663], [29.24323, -1.66826], [29.36322, -1.50887], [29.45038, -1.5054], [29.53062, -1.40499], [29.59061, -1.39016], [29.58388, -0.89821], [29.63006, -0.8997], [29.62708, -0.71055], [29.67176, -0.55714], [29.67474, -0.47969], [29.65091, -0.46777], [29.72687, -0.08051], [29.7224, 0.07291], [29.77454, 0.16675], [29.81922, 0.16824], [29.87284, 0.39166], [29.97413, 0.52124], [29.95477, 0.64486], [29.98307, 0.84295], [30.1484, 0.89805], [30.22139, 0.99635], [30.24671, 1.14974], [30.48503, 1.21675], [31.30127, 2.11006], [31.28042, 2.17853], [31.20148, 2.2217], [31.1985, 2.29462], [31.12104, 2.27676], [31.07934, 2.30207], [31.06593, 2.35862], [30.96911, 2.41071], [30.91102, 2.33332], [30.83059, 2.42559], [30.74271, 2.43601], [30.75612, 2.5863], [30.8857, 2.83923], [30.8574, 2.9508], [30.77101, 3.04897], [30.84251, 3.26908], [30.93486, 3.40737], [30.94081, 3.50847], [30.85153, 3.48867], [30.85997, 3.5743], [30.80713, 3.60506], [30.78512, 3.67097], [30.56277, 3.62703], [30.57378, 3.74567], [30.55396, 3.84451], [30.47691, 3.83353], [30.27658, 3.95653], [30.22374, 3.93896], [30.1621, 4.10586], [30.06964, 4.13221], [29.79666, 4.37809], [29.82087, 4.56246], [29.49726, 4.7007], [29.43341, 4.50101], [29.22207, 4.34297], [29.03054, 4.48784], [28.8126, 4.48784], [28.6651, 4.42638], [28.20719, 4.35614], [27.79551, 4.59976], [27.76469, 4.79284], [27.65462, 4.89375], [27.56656, 4.89375], [27.44012, 5.07349]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CF",
      iso1A3: "CAF",
      iso1N3: "140",
      wikidata: "Q929",
      nameEn: "Central African Republic",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["236"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[22.87758, 10.91915], [22.45889, 11.00246], [21.72139, 10.64136], [21.71479, 10.29932], [21.63553, 10.217], [21.52766, 10.2105], [21.34934, 9.95907], [21.26348, 9.97642], [20.82979, 9.44696], [20.36748, 9.11019], [19.06421, 9.00367], [18.86388, 8.87971], [19.11044, 8.68172], [18.79783, 8.25929], [18.67455, 8.22226], [18.62612, 8.14163], [18.64153, 8.08714], [18.6085, 8.05009], [18.02731, 8.01085], [17.93926, 7.95853], [17.67288, 7.98905], [16.8143, 7.53971], [16.6668, 7.67281], [16.658, 7.75353], [16.59415, 7.76444], [16.58315, 7.88657], [16.41583, 7.77971], [16.40703, 7.68809], [15.79942, 7.44149], [15.73118, 7.52006], [15.49743, 7.52179], [15.23397, 7.25135], [15.04717, 6.77085], [14.96311, 6.75693], [14.79966, 6.39043], [14.80122, 6.34866], [14.74206, 6.26356], [14.56149, 6.18928], [14.43073, 6.08867], [14.42917, 6.00508], [14.49455, 5.91683], [14.60974, 5.91838], [14.62375, 5.70466], [14.58951, 5.59777], [14.62531, 5.51411], [14.52724, 5.28319], [14.57083, 5.23979], [14.65489, 5.21343], [14.73383, 4.6135], [15.00825, 4.41458], [15.08609, 4.30282], [15.10644, 4.1362], [15.17482, 4.05131], [15.07686, 4.01805], [15.73522, 3.24348], [15.77725, 3.26835], [16.05449, 3.02306], [16.08252, 2.45708], [16.19357, 2.21537], [16.50126, 2.84739], [16.46701, 2.92512], [16.57598, 3.47999], [16.68283, 3.54257], [17.01746, 3.55136], [17.35649, 3.63045], [17.46876, 3.70515], [17.60966, 3.63705], [17.83421, 3.61068], [17.85842, 3.53378], [18.05656, 3.56893], [18.14902, 3.54476], [18.17323, 3.47665], [18.24148, 3.50302], [18.2723, 3.57992], [18.39558, 3.58212], [18.49245, 3.63924], [18.58711, 3.49423], [18.62755, 3.47564], [20.60184, 4.42394], [20.90383, 4.44877], [21.08793, 4.39603], [21.11214, 4.33895], [21.21341, 4.29285], [21.25744, 4.33676], [21.55904, 4.25553], [21.6405, 4.317], [22.10721, 4.20723], [22.27682, 4.11347], [22.45504, 4.13039], [22.5431, 4.22041], [22.60915, 4.48821], [22.6928, 4.47285], [22.78526, 4.71423], [22.84691, 4.69887], [22.89094, 4.79321], [22.94817, 4.82392], [23.38847, 4.60013], [24.46719, 5.0915], [24.71816, 4.90509], [25.31256, 5.03668], [25.34558, 5.29101], [25.53271, 5.37431], [25.86073, 5.19455], [26.13371, 5.25594], [26.48595, 5.04984], [26.74572, 5.10685], [26.85579, 5.03887], [26.93064, 5.13535], [27.09575, 5.22305], [27.44012, 5.07349], [27.26886, 5.25876], [27.23017, 5.37167], [27.28621, 5.56382], [27.22705, 5.62889], [27.22705, 5.71254], [26.51721, 6.09655], [26.58259, 6.1987], [26.32729, 6.36272], [26.38022, 6.63493], [25.90076, 7.09549], [25.37461, 7.33024], [25.35281, 7.42595], [25.20337, 7.50312], [25.20649, 7.61115], [25.29214, 7.66675], [25.25319, 7.8487], [24.98855, 7.96588], [24.85156, 8.16933], [24.35965, 8.26177], [24.13238, 8.36959], [24.25691, 8.69288], [23.51905, 8.71749], [23.59065, 8.99743], [23.44744, 8.99128], [23.4848, 9.16959], [23.56263, 9.19418], [23.64358, 9.28637], [23.64981, 9.44303], [23.62179, 9.53823], [23.69155, 9.67566], [23.67164, 9.86923], [23.3128, 10.45214], [23.02221, 10.69235], [22.87758, 10.91915]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CG",
      iso1A3: "COG",
      iso1N3: "178",
      wikidata: "Q971",
      nameEn: "Republic of the Congo",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["242"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[18.62755, 3.47564], [18.58711, 3.49423], [18.49245, 3.63924], [18.39558, 3.58212], [18.2723, 3.57992], [18.24148, 3.50302], [18.17323, 3.47665], [18.14902, 3.54476], [18.05656, 3.56893], [17.85842, 3.53378], [17.83421, 3.61068], [17.60966, 3.63705], [17.46876, 3.70515], [17.35649, 3.63045], [17.01746, 3.55136], [16.68283, 3.54257], [16.57598, 3.47999], [16.46701, 2.92512], [16.50126, 2.84739], [16.19357, 2.21537], [16.15568, 2.18955], [16.08563, 2.19733], [16.05294, 1.9811], [16.14634, 1.70259], [16.02647, 1.65591], [16.02959, 1.76483], [15.48942, 1.98265], [15.34776, 1.91264], [15.22634, 2.03243], [15.00996, 1.98887], [14.61145, 2.17866], [13.29457, 2.16106], [13.13461, 1.57238], [13.25447, 1.32339], [13.15519, 1.23368], [13.89582, 1.4261], [14.25186, 1.39842], [14.48179, 0.9152], [14.26066, 0.57255], [14.10909, 0.58563], [13.88648, 0.26652], [13.90632, -0.2287], [14.06862, -0.20826], [14.2165, -0.38261], [14.41887, -0.44799], [14.52569, -0.57818], [14.41838, -1.89412], [14.25932, -1.97624], [14.23518, -2.15671], [14.16202, -2.23916], [14.23829, -2.33715], [14.10442, -2.49268], [13.85846, -2.46935], [13.92073, -2.35581], [13.75884, -2.09293], [13.47977, -2.43224], [13.02759, -2.33098], [12.82172, -1.91091], [12.61312, -1.8129], [12.44656, -1.92025], [12.47925, -2.32626], [12.04895, -2.41704], [11.96866, -2.33559], [11.74605, -2.39936], [11.57637, -2.33379], [11.64487, -2.61865], [11.5359, -2.85654], [11.64798, -2.81146], [11.80365, -3.00424], [11.70558, -3.0773], [11.70227, -3.17465], [11.96554, -3.30267], [11.8318, -3.5812], [11.92719, -3.62768], [11.87083, -3.71571], [11.68608, -3.68942], [11.57949, -3.52798], [11.48764, -3.51089], [11.22301, -3.69888], [11.12647, -3.94169], [10.75913, -4.39519], [11.50888, -5.33417], [12.00924, -5.02627], [12.16068, -4.90089], [12.20901, -4.75642], [12.25587, -4.79437], [12.32324, -4.78415], [12.40964, -4.60609], [12.64835, -4.55937], [12.76844, -4.38709], [12.87096, -4.40315], [12.91489, -4.47907], [13.09648, -4.63739], [13.11182, -4.5942], [13.41764, -4.89897], [13.50305, -4.77818], [13.70417, -4.72601], [13.71794, -4.44864], [13.81162, -4.41842], [13.9108, -4.50906], [14.40672, -4.28381], [14.3957, -4.36623], [14.47284, -4.42941], [14.37366, -4.56125], [14.41499, -4.8825], [14.5059, -4.84956], [14.67948, -4.92093], [14.83101, -4.80838], [15.1978, -4.32388], [15.25411, -4.31121], [15.32693, -4.27282], [15.41785, -4.28381], [15.48121, -4.22062], [15.53081, -4.042], [15.89448, -3.9513], [16.21407, -3.2969], [16.1755, -3.25014], [16.22785, -2.59528], [16.16173, -2.16586], [16.50336, -1.8795], [16.70724, -1.45815], [16.97999, -1.12762], [17.32438, -0.99265], [17.72112, -0.52707], [17.66051, -0.26535], [17.81204, 0.23884], [17.93877, 0.32424], [17.95255, 0.48128], [17.86989, 0.58873], [17.85887, 1.04327], [18.08034, 1.58553], [18.10683, 2.26876], [18.63857, 3.19342], [18.62755, 3.47564]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CH",
      iso1A3: "CHE",
      iso1N3: "756",
      wikidata: "Q39",
      nameEn: "Switzerland",
      groups: ["155", "150", "UN"],
      callingCodes: ["41"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[8.72809, 47.69282], [8.72617, 47.69651], [8.73671, 47.7169], [8.70543, 47.73121], [8.74251, 47.75168], [8.71778, 47.76571], [8.68985, 47.75686], [8.68022, 47.78599], [8.65292, 47.80066], [8.64425, 47.76398], [8.62408, 47.7626], [8.61657, 47.79998], [8.56415, 47.80633], [8.56814, 47.78001], [8.48868, 47.77215], [8.45771, 47.7493], [8.44807, 47.72426], [8.40569, 47.69855], [8.4211, 47.68407], [8.40473, 47.67499], [8.41346, 47.66676], [8.42264, 47.66667], [8.44711, 47.65379], [8.4667, 47.65747], [8.46605, 47.64103], [8.49656, 47.64709], [8.5322, 47.64687], [8.52801, 47.66059], [8.56141, 47.67088], [8.57683, 47.66158], [8.6052, 47.67258], [8.61113, 47.66332], [8.62884, 47.65098], [8.62049, 47.63757], [8.60412, 47.63735], [8.61471, 47.64514], [8.60701, 47.65271], [8.59545, 47.64298], [8.60348, 47.61204], [8.57586, 47.59537], [8.55756, 47.62394], [8.51686, 47.63476], [8.50747, 47.61897], [8.45578, 47.60121], [8.46637, 47.58389], [8.48949, 47.588], [8.49431, 47.58107], [8.43235, 47.56617], [8.39477, 47.57826], [8.38273, 47.56608], [8.32735, 47.57133], [8.30277, 47.58607], [8.29524, 47.5919], [8.29722, 47.60603], [8.2824, 47.61225], [8.26313, 47.6103], [8.25863, 47.61571], [8.23809, 47.61204], [8.22577, 47.60385], [8.22011, 47.6181], [8.20617, 47.62141], [8.19378, 47.61636], [8.1652, 47.5945], [8.14947, 47.59558], [8.13823, 47.59147], [8.13662, 47.58432], [8.11543, 47.5841], [8.10395, 47.57918], [8.10002, 47.56504], [8.08557, 47.55768], [8.06663, 47.56374], [8.04383, 47.55443], [8.02136, 47.55096], [8.00113, 47.55616], [7.97581, 47.55493], [7.95682, 47.55789], [7.94494, 47.54511], [7.91251, 47.55031], [7.90673, 47.57674], [7.88664, 47.58854], [7.84412, 47.5841], [7.81901, 47.58798], [7.79486, 47.55691], [7.75261, 47.54599], [7.71961, 47.54219], [7.69642, 47.53297], [7.68101, 47.53232], [7.6656, 47.53752], [7.66174, 47.54554], [7.65083, 47.54662], [7.63338, 47.56256], [7.67655, 47.56435], [7.68904, 47.57133], [7.67115, 47.5871], [7.68486, 47.59601], [7.69385, 47.60099], [7.68229, 47.59905], [7.67395, 47.59212], [7.64599, 47.59695], [7.64213, 47.5944], [7.64309, 47.59151], [7.61929, 47.57683], [7.60459, 47.57869], [7.60523, 47.58519], [7.58945, 47.59017], [7.58386, 47.57536], [7.56684, 47.57785], [7.56548, 47.57617], [7.55689, 47.57232], [7.55652, 47.56779], [7.53634, 47.55553], [7.52831, 47.55347], [7.51723, 47.54578], [7.50873, 47.54546], [7.49691, 47.53821], [7.50588, 47.52856], [7.51904, 47.53515], [7.53199, 47.5284], [7.5229, 47.51644], [7.49804, 47.51798], [7.51076, 47.49651], [7.47534, 47.47932], [7.43356, 47.49712], [7.42923, 47.48628], [7.4583, 47.47216], [7.4462, 47.46264], [7.43088, 47.45846], [7.40308, 47.43638], [7.35603, 47.43432], [7.33526, 47.44186], [7.24669, 47.4205], [7.17026, 47.44312], [7.19583, 47.49455], [7.16249, 47.49025], [7.12781, 47.50371], [7.07425, 47.48863], [7.0231, 47.50522], [6.98425, 47.49432], [7.0024, 47.45264], [6.93953, 47.43388], [6.93744, 47.40714], [6.88542, 47.37262], [6.87959, 47.35335], [7.03125, 47.36996], [7.0564, 47.35134], [7.05305, 47.33304], [6.94316, 47.28747], [6.95108, 47.26428], [6.9508, 47.24338], [6.8489, 47.15933], [6.76788, 47.1208], [6.68823, 47.06616], [6.71531, 47.0494], [6.43341, 46.92703], [6.46456, 46.88865], [6.43216, 46.80336], [6.45209, 46.77502], [6.38351, 46.73171], [6.27135, 46.68251], [6.11084, 46.57649], [6.1567, 46.54402], [6.07269, 46.46244], [6.08427, 46.44305], [6.06407, 46.41676], [6.09926, 46.40768], [6.15016, 46.3778], [6.15985, 46.37721], [6.16987, 46.36759], [6.15738, 46.3491], [6.13876, 46.33844], [6.1198, 46.31157], [6.11697, 46.29547], [6.1013, 46.28512], [6.11926, 46.2634], [6.12446, 46.25059], [6.10071, 46.23772], [6.08563, 46.24651], [6.07072, 46.24085], [6.0633, 46.24583], [6.05029, 46.23518], [6.04602, 46.23127], [6.03342, 46.2383], [6.02461, 46.23313], [5.97542, 46.21525], [5.96515, 46.19638], [5.99573, 46.18587], [5.98846, 46.17046], [5.98188, 46.17392], [5.97508, 46.15863], [5.9641, 46.14412], [5.95781, 46.12925], [5.97893, 46.13303], [5.9871, 46.14499], [6.01791, 46.14228], [6.03614, 46.13712], [6.04564, 46.14031], [6.05203, 46.15191], [6.07491, 46.14879], [6.09199, 46.15191], [6.09926, 46.14373], [6.13397, 46.1406], [6.15305, 46.15194], [6.18116, 46.16187], [6.18871, 46.16644], [6.18707, 46.17999], [6.19552, 46.18401], [6.19807, 46.18369], [6.20539, 46.19163], [6.21114, 46.1927], [6.21273, 46.19409], [6.21603, 46.19507], [6.21844, 46.19837], [6.22222, 46.19888], [6.22175, 46.20045], [6.23544, 46.20714], [6.23913, 46.20511], [6.24821, 46.20531], [6.26007, 46.21165], [6.27694, 46.21566], [6.29663, 46.22688], [6.31041, 46.24417], [6.29474, 46.26221], [6.26749, 46.24745], [6.24952, 46.26255], [6.23775, 46.27822], [6.25137, 46.29014], [6.24826, 46.30175], [6.21981, 46.31304], [6.25432, 46.3632], [6.53358, 46.45431], [6.82312, 46.42661], [6.8024, 46.39171], [6.77152, 46.34784], [6.86052, 46.28512], [6.78968, 46.14058], [6.89321, 46.12548], [6.87868, 46.03855], [6.93862, 46.06502], [7.00946, 45.9944], [7.04151, 45.92435], [7.10685, 45.85653], [7.56343, 45.97421], [7.85949, 45.91485], [7.9049, 45.99945], [7.98881, 45.99867], [8.02906, 46.10331], [8.11383, 46.11577], [8.16866, 46.17817], [8.08814, 46.26692], [8.31162, 46.38044], [8.30648, 46.41587], [8.42464, 46.46367], [8.46317, 46.43712], [8.45032, 46.26869], [8.62242, 46.12112], [8.75697, 46.10395], [8.80778, 46.10085], [8.85617, 46.0748], [8.79414, 46.00913], [8.78585, 45.98973], [8.79362, 45.99207], [8.8319, 45.9879], [8.85121, 45.97239], [8.86688, 45.96135], [8.88904, 45.95465], [8.93649, 45.86775], [8.94372, 45.86587], [8.93504, 45.86245], [8.91129, 45.8388], [8.94737, 45.84285], [8.9621, 45.83707], [8.99663, 45.83466], [9.00324, 45.82055], [9.0298, 45.82127], [9.03279, 45.82865], [9.03793, 45.83548], [9.03505, 45.83976], [9.04059, 45.8464], [9.04546, 45.84968], [9.06642, 45.8761], [9.09065, 45.89906], [8.99257, 45.9698], [9.01618, 46.04928], [9.24503, 46.23616], [9.29226, 46.32717], [9.25502, 46.43743], [9.28136, 46.49685], [9.36128, 46.5081], [9.40487, 46.46621], [9.45936, 46.50873], [9.46117, 46.37481], [9.57015, 46.2958], [9.71273, 46.29266], [9.73086, 46.35071], [9.95249, 46.38045], [10.07055, 46.21668], [10.14439, 46.22992], [10.17862, 46.25626], [10.10506, 46.3372], [10.165, 46.41051], [10.03715, 46.44479], [10.10307, 46.61003], [10.23674, 46.63484], [10.25309, 46.57432], [10.46136, 46.53164], [10.49375, 46.62049], [10.44686, 46.64162], [10.40475, 46.63671], [10.38659, 46.67847], [10.47197, 46.85698], [10.48376, 46.93891], [10.36933, 47.00212], [10.30031, 46.92093], [10.24128, 46.93147], [10.22675, 46.86942], [10.10715, 46.84296], [9.98058, 46.91434], [9.88266, 46.93343], [9.87935, 47.01337], [9.60717, 47.06091], [9.55721, 47.04762], [9.54041, 47.06495], [9.47548, 47.05257], [9.47139, 47.06402], [9.51362, 47.08505], [9.52089, 47.10019], [9.51044, 47.13727], [9.48774, 47.17402], [9.4891, 47.19346], [9.50318, 47.22153], [9.52406, 47.24959], [9.53116, 47.27029], [9.54773, 47.2809], [9.55857, 47.29919], [9.58513, 47.31334], [9.59978, 47.34671], [9.62476, 47.36639], [9.65427, 47.36824], [9.66243, 47.37136], [9.6711, 47.37824], [9.67445, 47.38429], [9.67334, 47.39191], [9.6629, 47.39591], [9.65136, 47.40504], [9.65043, 47.41937], [9.6446, 47.43233], [9.64483, 47.43842], [9.65863, 47.44847], [9.65728, 47.45383], [9.6423, 47.45599], [9.62475, 47.45685], [9.62158, 47.45858], [9.60841, 47.47178], [9.60484, 47.46358], [9.60205, 47.46165], [9.59482, 47.46305], [9.58208, 47.48344], [9.56312, 47.49495], [9.55125, 47.53629], [9.25619, 47.65939], [9.18203, 47.65598], [9.17593, 47.65399], [9.1755, 47.65584], [9.1705, 47.65513], [9.15181, 47.66904], [9.13845, 47.66389], [9.09891, 47.67801], [9.02093, 47.6868], [8.94093, 47.65596], [8.89946, 47.64769], [8.87625, 47.65441], [8.87383, 47.67045], [8.85065, 47.68209], [8.86989, 47.70504], [8.82002, 47.71458], [8.80663, 47.73821], [8.77309, 47.72059], [8.76965, 47.7075], [8.79966, 47.70222], [8.79511, 47.67462], [8.75856, 47.68969], [8.72809, 47.69282]], [[8.95861, 45.96485], [8.96668, 45.98436], [8.97741, 45.98317], [8.97604, 45.96151], [8.95861, 45.96485]], [[8.70847, 47.68904], [8.68985, 47.69552], [8.66837, 47.68437], [8.65769, 47.68928], [8.67508, 47.6979], [8.66416, 47.71367], [8.70237, 47.71453], [8.71773, 47.69088], [8.70847, 47.68904]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CI",
      iso1A3: "CIV",
      iso1N3: "384",
      wikidata: "Q1008",
      nameEn: "C\xF4te d'Ivoire",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["225"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-7.52774, 3.7105], [-3.34019, 4.17519], [-3.10675, 5.08515], [-3.11073, 5.12675], [-3.063, 5.13665], [-2.96554, 5.10397], [-2.95261, 5.12477], [-2.75502, 5.10657], [-2.73074, 5.1364], [-2.77625, 5.34621], [-2.72737, 5.34789], [-2.76614, 5.60963], [-2.85378, 5.65156], [-2.93132, 5.62137], [-2.96671, 5.6415], [-2.95323, 5.71865], [-3.01896, 5.71697], [-3.25999, 6.62521], [-3.21954, 6.74407], [-3.23327, 6.81744], [-2.95438, 7.23737], [-2.97822, 7.27165], [-2.92339, 7.60847], [-2.79467, 7.86002], [-2.78395, 7.94974], [-2.74819, 7.92613], [-2.67787, 8.02055], [-2.61232, 8.02645], [-2.62901, 8.11495], [-2.49037, 8.20872], [-2.58243, 8.7789], [-2.66357, 9.01771], [-2.77799, 9.04949], [-2.69814, 9.22717], [-2.68802, 9.49343], [-2.76494, 9.40778], [-2.93012, 9.57403], [-3.00765, 9.74019], [-3.16609, 9.85147], [-3.19306, 9.93781], [-3.27228, 9.84981], [-3.31779, 9.91125], [-3.69703, 9.94279], [-4.25999, 9.76012], [-4.31392, 9.60062], [-4.6426, 9.70696], [-4.96621, 9.89132], [-4.96453, 9.99923], [-5.12465, 10.29788], [-5.39602, 10.2929], [-5.51058, 10.43177], [-5.65135, 10.46767], [-5.78124, 10.43952], [-5.99478, 10.19694], [-6.18851, 10.24244], [-6.1731, 10.46983], [-6.24795, 10.74248], [-6.325, 10.68624], [-6.40646, 10.69922], [-6.42847, 10.5694], [-6.52974, 10.59104], [-6.63541, 10.66893], [-6.68164, 10.35074], [-6.93921, 10.35291], [-7.01186, 10.25111], [-6.97444, 10.21644], [-7.00966, 10.15794], [-7.0603, 10.14711], [-7.13331, 10.24877], [-7.3707, 10.24677], [-7.44555, 10.44602], [-7.52261, 10.4655], [-7.54462, 10.40921], [-7.63048, 10.46334], [-7.92107, 10.15577], [-7.97971, 10.17117], [-8.01225, 10.1021], [-8.11921, 10.04577], [-8.15652, 9.94288], [-8.09434, 9.86936], [-8.14657, 9.55062], [-8.03463, 9.39604], [-7.85056, 9.41812], [-7.90777, 9.20456], [-7.73862, 9.08422], [-7.92518, 8.99332], [-7.95503, 8.81146], [-7.69882, 8.66148], [-7.65653, 8.36873], [-7.92518, 8.50652], [-8.22991, 8.48438], [-8.2411, 8.24196], [-8.062, 8.16071], [-7.98675, 8.20134], [-7.99919, 8.11023], [-7.94695, 8.00925], [-8.06449, 8.04989], [-8.13414, 7.87991], [-8.09931, 7.78626], [-8.21374, 7.54466], [-8.4003, 7.6285], [-8.47114, 7.55676], [-8.41935, 7.51203], [-8.37458, 7.25794], [-8.29249, 7.1691], [-8.31736, 6.82837], [-8.59456, 6.50612], [-8.48652, 6.43797], [-8.45666, 6.49977], [-8.38453, 6.35887], [-8.3298, 6.36381], [-8.17557, 6.28222], [-8.00642, 6.31684], [-7.90692, 6.27728], [-7.83478, 6.20309], [-7.8497, 6.08932], [-7.79747, 6.07696], [-7.78254, 5.99037], [-7.70294, 5.90625], [-7.67309, 5.94337], [-7.48155, 5.80974], [-7.46165, 5.84934], [-7.43677, 5.84687], [-7.43926, 5.74787], [-7.37209, 5.61173], [-7.43428, 5.42355], [-7.36463, 5.32944], [-7.46165, 5.26256], [-7.48901, 5.14118], [-7.55369, 5.08667], [-7.53876, 4.94294], [-7.59349, 4.8909], [-7.53259, 4.35145], [-7.52774, 3.7105]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CK",
      iso1A3: "COK",
      iso1N3: "184",
      wikidata: "Q26988",
      nameEn: "Cook Islands",
      country: "NZ",
      groups: ["061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["682"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-168.15106, -10.26955], [-156.45576, -31.75456], [-156.48634, -15.52824], [-156.50903, -7.4975], [-168.15106, -10.26955]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CL",
      iso1A3: "CHL",
      iso1N3: "152",
      wikidata: "Q298",
      nameEn: "Chile",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["56"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-68.60702, -52.65781], [-68.41683, -52.33516], [-69.97824, -52.00845], [-71.99889, -51.98018], [-72.33873, -51.59954], [-72.31343, -50.58411], [-73.15765, -50.78337], [-73.55259, -49.92488], [-73.45156, -49.79461], [-73.09655, -49.14342], [-72.56894, -48.81116], [-72.54042, -48.52392], [-72.27662, -48.28727], [-72.50478, -47.80586], [-71.94152, -47.13595], [-71.68577, -46.55385], [-71.75614, -45.61611], [-71.35687, -45.22075], [-72.06985, -44.81756], [-71.26418, -44.75684], [-71.16436, -44.46244], [-71.81318, -44.38097], [-71.64206, -43.64774], [-72.14828, -42.85321], [-72.15541, -42.15941], [-71.74901, -42.11711], [-71.92726, -40.72714], [-71.37826, -38.91474], [-70.89532, -38.6923], [-71.24279, -37.20264], [-70.95047, -36.4321], [-70.38008, -36.02375], [-70.49416, -35.24145], [-69.87386, -34.13344], [-69.88099, -33.34489], [-70.55832, -31.51559], [-70.14479, -30.36595], [-69.8596, -30.26131], [-69.99507, -29.28351], [-69.80969, -29.07185], [-69.66709, -28.44055], [-69.22504, -27.95042], [-68.77586, -27.16029], [-68.43363, -27.08414], [-68.27677, -26.90626], [-68.59048, -26.49861], [-68.56909, -26.28146], [-68.38372, -26.15353], [-68.57622, -25.32505], [-68.38372, -25.08636], [-68.56909, -24.69831], [-68.24825, -24.42596], [-67.33563, -24.04237], [-66.99632, -22.99839], [-67.18382, -22.81525], [-67.54284, -22.89771], [-67.85114, -22.87076], [-68.18816, -21.28614], [-68.40403, -20.94562], [-68.53957, -20.91542], [-68.55383, -20.7355], [-68.44023, -20.62701], [-68.7276, -20.46178], [-68.74273, -20.08817], [-68.57132, -20.03134], [-68.54611, -19.84651], [-68.66761, -19.72118], [-68.41218, -19.40499], [-68.61989, -19.27584], [-68.80602, -19.08355], [-68.87082, -19.06003], [-68.94987, -18.93302], [-69.07432, -18.28259], [-69.14807, -18.16893], [-69.07496, -18.03715], [-69.28671, -17.94844], [-69.34126, -17.72753], [-69.46623, -17.60518], [-69.46897, -17.4988], [-69.66483, -17.65083], [-69.79087, -17.65563], [-69.82868, -17.72048], [-69.75305, -17.94605], [-69.81607, -18.12582], [-69.96732, -18.25992], [-70.16394, -18.31737], [-70.31267, -18.31258], [-70.378, -18.3495], [-70.59118, -18.35072], [-113.52687, -26.52828], [-68.11646, -58.14883], [-66.07313, -55.19618], [-67.11046, -54.94199], [-67.46182, -54.92205], [-68.01394, -54.8753], [-68.60733, -54.9125], [-68.60702, -52.65781]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CM",
      iso1A3: "CMR",
      iso1N3: "120",
      wikidata: "Q1009",
      nameEn: "Cameroon",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["237"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[14.83314, 12.62963], [14.55058, 12.78256], [14.56101, 12.91036], [14.46881, 13.08259], [14.08251, 13.0797], [14.20204, 12.53405], [14.17523, 12.41916], [14.22215, 12.36533], [14.4843, 12.35223], [14.6474, 12.17466], [14.61612, 11.7798], [14.55207, 11.72001], [14.64591, 11.66166], [14.6124, 11.51283], [14.17821, 11.23831], [13.97489, 11.30258], [13.78945, 11.00154], [13.7403, 11.00593], [13.70753, 10.94451], [13.73434, 10.9255], [13.54964, 10.61236], [13.5705, 10.53183], [13.43644, 10.13326], [13.34111, 10.12299], [13.25025, 10.03647], [13.25323, 10.00127], [13.286, 9.9822], [13.27409, 9.93232], [13.24132, 9.91031], [13.25025, 9.86042], [13.29941, 9.8296], [13.25472, 9.76795], [13.22642, 9.57266], [13.02385, 9.49334], [12.85628, 9.36698], [12.91958, 9.33905], [12.90022, 9.11411], [12.81085, 8.91992], [12.79, 8.75361], [12.71701, 8.7595], [12.68722, 8.65938], [12.44146, 8.6152], [12.4489, 8.52536], [12.26123, 8.43696], [12.24782, 8.17904], [12.19271, 8.10826], [12.20909, 7.97553], [11.99908, 7.67302], [12.01844, 7.52981], [11.93205, 7.47812], [11.84864, 7.26098], [11.87396, 7.09398], [11.63117, 6.9905], [11.55818, 6.86186], [11.57755, 6.74059], [11.51499, 6.60892], [11.42264, 6.5882], [11.42041, 6.53789], [11.09495, 6.51717], [11.09644, 6.68437], [10.94302, 6.69325], [10.8179, 6.83377], [10.83727, 6.9358], [10.60789, 7.06885], [10.59746, 7.14719], [10.57214, 7.16345], [10.53639, 6.93432], [10.21466, 6.88996], [10.15135, 7.03781], [9.86314, 6.77756], [9.77824, 6.79088], [9.70674, 6.51717], [9.51757, 6.43874], [8.84209, 5.82562], [8.88156, 5.78857], [8.83687, 5.68483], [8.92029, 5.58403], [8.78027, 5.1243], [8.60302, 4.87353], [8.34397, 4.30689], [9.22018, 3.72052], [9.81162, 2.33797], [9.82123, 2.35097], [9.83754, 2.32428], [9.83238, 2.29079], [9.84716, 2.24676], [9.89012, 2.20457], [9.90749, 2.20049], [9.991, 2.16561], [11.3561, 2.17217], [11.37116, 2.29975], [13.28534, 2.25716], [13.29457, 2.16106], [14.61145, 2.17866], [15.00996, 1.98887], [15.22634, 2.03243], [15.34776, 1.91264], [15.48942, 1.98265], [16.02959, 1.76483], [16.02647, 1.65591], [16.14634, 1.70259], [16.05294, 1.9811], [16.08563, 2.19733], [16.15568, 2.18955], [16.19357, 2.21537], [16.08252, 2.45708], [16.05449, 3.02306], [15.77725, 3.26835], [15.73522, 3.24348], [15.07686, 4.01805], [15.17482, 4.05131], [15.10644, 4.1362], [15.08609, 4.30282], [15.00825, 4.41458], [14.73383, 4.6135], [14.65489, 5.21343], [14.57083, 5.23979], [14.52724, 5.28319], [14.62531, 5.51411], [14.58951, 5.59777], [14.62375, 5.70466], [14.60974, 5.91838], [14.49455, 5.91683], [14.42917, 6.00508], [14.43073, 6.08867], [14.56149, 6.18928], [14.74206, 6.26356], [14.80122, 6.34866], [14.79966, 6.39043], [14.96311, 6.75693], [15.04717, 6.77085], [15.23397, 7.25135], [15.49743, 7.52179], [15.56964, 7.58936], [15.59272, 7.7696], [15.50743, 7.79302], [15.20426, 8.50892], [15.09484, 8.65982], [14.83566, 8.80557], [14.35707, 9.19611], [14.37094, 9.2954], [13.97544, 9.6365], [14.01793, 9.73169], [14.1317, 9.82413], [14.20411, 10.00055], [14.4673, 10.00264], [14.80082, 9.93818], [14.95722, 9.97926], [15.05999, 9.94845], [15.14043, 9.99246], [15.24618, 9.99246], [15.41408, 9.92876], [15.68761, 9.99344], [15.50535, 10.1098], [15.30874, 10.31063], [15.23724, 10.47764], [15.14936, 10.53915], [15.15532, 10.62846], [15.06737, 10.80921], [15.09127, 10.87431], [15.04957, 11.02347], [15.10021, 11.04101], [15.0585, 11.40481], [15.13149, 11.5537], [15.06595, 11.71126], [15.11579, 11.79313], [15.04808, 11.8731], [15.05786, 12.0608], [15.0349, 12.10698], [15.00146, 12.1223], [14.96952, 12.0925], [14.89019, 12.16593], [14.90827, 12.3269], [14.83314, 12.62963]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CN",
      iso1A3: "CHN",
      iso1N3: "156",
      wikidata: "Q148",
      nameEn: "People's Republic of China"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CO",
      iso1A3: "COL",
      iso1N3: "170",
      wikidata: "Q739",
      nameEn: "Colombia",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["57"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-71.19849, 12.65801], [-81.58685, 18.0025], [-82.06974, 14.49418], [-82.56142, 11.91792], [-78.79327, 9.93766], [-77.58292, 9.22278], [-77.32389, 8.81247], [-77.45064, 8.49991], [-77.17257, 7.97422], [-77.57185, 7.51147], [-77.72514, 7.72348], [-77.72157, 7.47612], [-77.81426, 7.48319], [-77.89178, 7.22681], [-78.06168, 7.07793], [-82.12561, 4.00341], [-78.87137, 1.47457], [-78.42749, 1.15389], [-77.85677, 0.80197], [-77.7148, 0.85003], [-77.68613, 0.83029], [-77.66416, 0.81604], [-77.67815, 0.73863], [-77.49984, 0.64476], [-77.52001, 0.40782], [-76.89177, 0.24736], [-76.4094, 0.24015], [-76.41215, 0.38228], [-76.23441, 0.42294], [-75.82927, 0.09578], [-75.25764, -0.11943], [-75.18513, -0.0308], [-74.42701, -0.50218], [-74.26675, -0.97229], [-73.65312, -1.26222], [-72.92587, -2.44514], [-71.75223, -2.15058], [-70.94377, -2.23142], [-70.04609, -2.73906], [-70.71396, -3.7921], [-70.52393, -3.87553], [-70.3374, -3.79505], [-69.94708, -4.2431], [-69.43395, -1.42219], [-69.4215, -1.01853], [-69.59796, -0.75136], [-69.603, -0.51947], [-70.03658, -0.19681], [-70.04162, 0.55437], [-69.47696, 0.71065], [-69.20976, 0.57958], [-69.14422, 0.84172], [-69.26017, 1.06856], [-69.82987, 1.07864], [-69.83491, 1.69353], [-69.53746, 1.76408], [-69.38621, 1.70865], [-68.18128, 1.72881], [-68.26699, 1.83463], [-68.18632, 2.00091], [-67.9292, 1.82455], [-67.40488, 2.22258], [-67.299, 1.87494], [-67.15784, 1.80439], [-67.08222, 1.17441], [-66.85795, 1.22998], [-67.21967, 2.35778], [-67.65696, 2.81691], [-67.85862, 2.79173], [-67.85862, 2.86727], [-67.30945, 3.38393], [-67.50067, 3.75812], [-67.62671, 3.74303], [-67.85358, 4.53249], [-67.83341, 5.31104], [-67.59141, 5.5369], [-67.63914, 5.64963], [-67.58558, 5.84537], [-67.43513, 5.98835], [-67.4625, 6.20625], [-67.60654, 6.2891], [-69.41843, 6.1072], [-70.10716, 6.96516], [-70.7596, 7.09799], [-71.03941, 6.98163], [-71.37234, 7.01588], [-71.42212, 7.03854], [-71.44118, 7.02116], [-71.82441, 7.04314], [-72.04895, 7.03837], [-72.19437, 7.37034], [-72.43132, 7.40034], [-72.47415, 7.48928], [-72.45321, 7.57232], [-72.47827, 7.65604], [-72.46763, 7.79518], [-72.44454, 7.86031], [-72.46183, 7.90682], [-72.45806, 7.91141], [-72.47042, 7.92306], [-72.48183, 7.92909], [-72.48801, 7.94329], [-72.47213, 7.96106], [-72.39137, 8.03534], [-72.35163, 8.01163], [-72.36987, 8.19976], [-72.4042, 8.36513], [-72.65474, 8.61428], [-72.77415, 9.10165], [-72.94052, 9.10663], [-73.02119, 9.27584], [-73.36905, 9.16636], [-72.98085, 9.85253], [-72.88002, 10.44309], [-72.4767, 11.1117], [-72.24983, 11.14138], [-71.9675, 11.65536], [-71.3275, 11.85], [-70.92579, 11.96275], [-71.19849, 12.65801]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CP",
      iso1A3: "CPT",
      wikidata: "Q161258",
      nameEn: "Clipperton Island",
      country: "FR",
      groups: ["013", "003", "019", "UN"],
      isoStatus: "excRes"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-110.36279, 9.79626], [-108.755, 9.84085], [-109.04145, 11.13245], [-110.36279, 9.79626]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CR",
      iso1A3: "CRI",
      iso1N3: "188",
      wikidata: "Q800",
      nameEn: "Costa Rica",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["506"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-83.68276, 11.01562], [-83.66597, 10.79916], [-83.90838, 10.71161], [-84.68197, 11.07568], [-84.92439, 10.9497], [-85.60529, 11.22607], [-85.71223, 11.06868], [-86.14524, 11.09059], [-87.41779, 5.02401], [-82.94503, 7.93865], [-82.89978, 8.04083], [-82.89137, 8.05755], [-82.88641, 8.10219], [-82.9388, 8.26634], [-83.05209, 8.33394], [-82.93056, 8.43465], [-82.8679, 8.44042], [-82.8382, 8.48117], [-82.83322, 8.52464], [-82.83975, 8.54755], [-82.82739, 8.60153], [-82.8794, 8.6981], [-82.92068, 8.74832], [-82.91377, 8.774], [-82.88253, 8.83331], [-82.72126, 8.97125], [-82.93516, 9.07687], [-82.93516, 9.46741], [-82.84871, 9.4973], [-82.87919, 9.62645], [-82.77206, 9.59573], [-82.66667, 9.49746], [-82.61345, 9.49881], [-82.56507, 9.57279], [-82.51044, 9.65379], [-83.54024, 10.96805], [-83.68276, 11.01562]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CU",
      iso1A3: "CUB",
      iso1N3: "192",
      wikidata: "Q241",
      nameEn: "Cuba",
      groups: ["029", "003", "419", "019", "UN"],
      callingCodes: ["53"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-73.62304, 20.6935], [-82.02215, 24.23074], [-85.77883, 21.92705], [-74.81171, 18.82201], [-73.62304, 20.6935]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CV",
      iso1A3: "CPV",
      iso1N3: "132",
      wikidata: "Q1011",
      nameEn: "Cape Verde",
      groups: ["Q105472", "011", "202", "002", "UN"],
      callingCodes: ["238"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-28.81604, 14.57305], [-20.39702, 14.12816], [-23.37101, 19.134], [-28.81604, 14.57305]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CW",
      iso1A3: "CUW",
      iso1N3: "531",
      wikidata: "Q25279",
      nameEn: "Cura\xE7ao",
      aliases: ["NL-CW"],
      country: "NL",
      groups: ["Q1451600", "029", "003", "419", "019", "UN"],
      callingCodes: ["599"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-68.90012, 12.62309], [-69.59009, 12.46019], [-68.99639, 11.79035], [-68.33524, 11.78151], [-68.90012, 12.62309]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CX",
      iso1A3: "CXR",
      iso1N3: "162",
      wikidata: "Q31063",
      nameEn: "Christmas Island",
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["61"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[105.66835, -9.31927], [104.67494, -11.2566], [106.66176, -11.14349], [105.66835, -9.31927]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CY",
      iso1A3: "CYP",
      iso1N3: "196",
      wikidata: "Q229",
      nameEn: "Republic of Cyprus",
      groups: ["Q644636", "EU", "145", "142", "UN"],
      driveSide: "left",
      callingCodes: ["357"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[32.46489, 35.48584], [30.15137, 34.08517], [32.74412, 34.43926], [32.75515, 34.64985], [32.76136, 34.68318], [32.79433, 34.67883], [32.82717, 34.70622], [32.86014, 34.70585], [32.86167, 34.68734], [32.9068, 34.66102], [32.91398, 34.67343], [32.93043, 34.67091], [32.92807, 34.66736], [32.93449, 34.66241], [32.93693, 34.67027], [32.94379, 34.67111], [32.94683, 34.67907], [32.95539, 34.68471], [32.99135, 34.68061], [32.98668, 34.67268], [32.99014, 34.65518], [32.97736, 34.65277], [32.97079, 34.66112], [32.95325, 34.66462], [32.94796, 34.6587], [32.94976, 34.65204], [32.95471, 34.64528], [32.95323, 34.64075], [32.95891, 34.62919], [32.96718, 34.63446], [32.96968, 34.64046], [33.0138, 34.64424], [33.26744, 34.49942], [33.83531, 34.73974], [33.70575, 34.97947], [33.70639, 34.99303], [33.71514, 35.00294], [33.69731, 35.01754], [33.69938, 35.03123], [33.67678, 35.03866], [33.63765, 35.03869], [33.61215, 35.0527], [33.59658, 35.03635], [33.567, 35.04803], [33.57478, 35.06049], [33.53975, 35.08151], [33.48915, 35.06594], [33.47666, 35.00701], [33.45256, 35.00288], [33.45178, 35.02078], [33.47825, 35.04103], [33.48136, 35.0636], [33.46813, 35.10564], [33.41675, 35.16325], [33.4076, 35.20062], [33.38575, 35.2018], [33.37248, 35.18698], [33.3717, 35.1788], [33.36569, 35.17479], [33.35612, 35.17402], [33.35596, 35.17942], [33.34964, 35.17803], [33.35056, 35.18328], [33.31955, 35.18096], [33.3072, 35.16816], [33.27068, 35.16815], [33.15138, 35.19504], [33.11105, 35.15639], [33.08249, 35.17319], [33.01192, 35.15639], [32.94471, 35.09422], [32.86406, 35.1043], [32.85733, 35.07742], [32.70779, 35.14127], [32.70947, 35.18328], [32.64864, 35.19967], [32.60361, 35.16647], [32.46489, 35.48584]]], [[[33.74144, 35.01053], [33.7492, 35.01319], [33.74983, 35.02274], [33.74265, 35.02329], [33.73781, 35.02181], [33.7343, 35.01178], [33.74144, 35.01053]]], [[[33.77312, 34.9976], [33.75994, 35.00113], [33.75682, 34.99916], [33.76605, 34.99543], [33.76738, 34.99188], [33.7778, 34.98981], [33.77843, 34.988], [33.78149, 34.98854], [33.78318, 34.98699], [33.78571, 34.98951], [33.78917, 34.98854], [33.79191, 34.98914], [33.78516, 34.99582], [33.77553, 34.99518], [33.77312, 34.9976]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "CZ",
      iso1A3: "CZE",
      iso1N3: "203",
      wikidata: "Q213",
      nameEn: "Czechia",
      groups: ["EU", "151", "150", "UN"],
      callingCodes: ["420"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[14.82803, 50.86966], [14.79139, 50.81438], [14.70661, 50.84096], [14.61993, 50.86049], [14.63434, 50.8883], [14.65259, 50.90513], [14.64802, 50.93241], [14.58024, 50.91443], [14.56374, 50.922], [14.59702, 50.96148], [14.59908, 50.98685], [14.58215, 50.99306], [14.56432, 51.01008], [14.53438, 51.00374], [14.53321, 51.01679], [14.49873, 51.02242], [14.50809, 51.0427], [14.49991, 51.04692], [14.49154, 51.04382], [14.49202, 51.02286], [14.45827, 51.03712], [14.41335, 51.02086], [14.30098, 51.05515], [14.25665, 50.98935], [14.28776, 50.97718], [14.32353, 50.98556], [14.32793, 50.97379], [14.30251, 50.96606], [14.31422, 50.95243], [14.39848, 50.93866], [14.38691, 50.89907], [14.30098, 50.88448], [14.27123, 50.89386], [14.24314, 50.88761], [14.22331, 50.86049], [14.02982, 50.80662], [13.98864, 50.8177], [13.89113, 50.78533], [13.89444, 50.74142], [13.82942, 50.7251], [13.76316, 50.73487], [13.70204, 50.71771], [13.65977, 50.73096], [13.52474, 50.70394], [13.53748, 50.67654], [13.5226, 50.64721], [13.49742, 50.63133], [13.46413, 50.60102], [13.42189, 50.61243], [13.37485, 50.64931], [13.37805, 50.627], [13.32264, 50.60317], [13.32594, 50.58009], [13.29454, 50.57904], [13.25158, 50.59268], [13.19043, 50.50237], [13.13424, 50.51709], [13.08301, 50.50132], [13.0312, 50.50944], [13.02038, 50.4734], [13.02147, 50.44763], [12.98433, 50.42016], [12.94058, 50.40944], [12.82465, 50.45738], [12.73476, 50.43237], [12.73044, 50.42268], [12.70731, 50.39948], [12.67261, 50.41949], [12.51356, 50.39694], [12.48747, 50.37278], [12.49214, 50.35228], [12.48256, 50.34784], [12.46643, 50.35527], [12.43722, 50.33774], [12.43371, 50.32506], [12.39924, 50.32302], [12.40158, 50.29521], [12.36594, 50.28289], [12.35425, 50.23993], [12.33263, 50.24367], [12.32445, 50.20442], [12.33847, 50.19432], [12.32596, 50.17146], [12.29232, 50.17524], [12.28063, 50.19544], [12.28755, 50.22429], [12.23943, 50.24594], [12.24791, 50.25525], [12.26953, 50.25189], [12.25119, 50.27079], [12.20823, 50.2729], [12.18013, 50.32146], [12.10907, 50.32041], [12.13716, 50.27396], [12.09287, 50.25032], [12.19335, 50.19997], [12.21484, 50.16399], [12.1917, 50.13434], [12.2073, 50.10315], [12.23709, 50.10213], [12.27433, 50.0771], [12.26111, 50.06331], [12.30798, 50.05719], [12.49908, 49.97305], [12.47264, 49.94222], [12.55197, 49.92094], [12.48256, 49.83575], [12.46603, 49.78882], [12.40489, 49.76321], [12.4462, 49.70233], [12.52553, 49.68415], [12.53544, 49.61888], [12.56188, 49.6146], [12.60155, 49.52887], [12.64782, 49.52565], [12.64121, 49.47628], [12.669, 49.42935], [12.71227, 49.42363], [12.75854, 49.3989], [12.78168, 49.34618], [12.88414, 49.33541], [12.88249, 49.35479], [12.94859, 49.34079], [13.03618, 49.30417], [13.02957, 49.27399], [13.05883, 49.26259], [13.17665, 49.16713], [13.17019, 49.14339], [13.20405, 49.12303], [13.23689, 49.11412], [13.28242, 49.1228], [13.39479, 49.04812], [13.40802, 48.98851], [13.50221, 48.93752], [13.50552, 48.97441], [13.58319, 48.96899], [13.61624, 48.9462], [13.67739, 48.87886], [13.73854, 48.88538], [13.76994, 48.83537], [13.78977, 48.83319], [13.8096, 48.77877], [13.84023, 48.76988], [14.06151, 48.66873], [14.01482, 48.63788], [14.09104, 48.5943], [14.20691, 48.5898], [14.33909, 48.55852], [14.43076, 48.58855], [14.4587, 48.64695], [14.56139, 48.60429], [14.60808, 48.62881], [14.66762, 48.58215], [14.71794, 48.59794], [14.72756, 48.69502], [14.80584, 48.73489], [14.80821, 48.77711], [14.81545, 48.7874], [14.94773, 48.76268], [14.95641, 48.75915], [14.9758, 48.76857], [14.98112, 48.77524], [14.9782, 48.7766], [14.98032, 48.77959], [14.95072, 48.79101], [14.98917, 48.90082], [14.97612, 48.96983], [14.99878, 49.01444], [15.15534, 48.99056], [15.16358, 48.94278], [15.26177, 48.95766], [15.28305, 48.98831], [15.34823, 48.98444], [15.48027, 48.94481], [15.51357, 48.91549], [15.61622, 48.89541], [15.6921, 48.85973], [15.75341, 48.8516], [15.78087, 48.87644], [15.84404, 48.86921], [16.06034, 48.75436], [16.37345, 48.729], [16.40915, 48.74576], [16.46134, 48.80865], [16.67008, 48.77699], [16.68518, 48.7281], [16.71883, 48.73806], [16.79779, 48.70998], [16.90354, 48.71541], [16.93955, 48.60371], [17.00215, 48.70887], [17.11202, 48.82925], [17.19355, 48.87602], [17.29054, 48.85546], [17.3853, 48.80936], [17.45671, 48.85004], [17.5295, 48.81117], [17.7094, 48.86721], [17.73126, 48.87885], [17.77944, 48.92318], [17.87831, 48.92679], [17.91814, 49.01784], [18.06885, 49.03157], [18.1104, 49.08624], [18.15022, 49.24518], [18.18456, 49.28909], [18.36446, 49.3267], [18.4139, 49.36517], [18.4084, 49.40003], [18.44686, 49.39467], [18.54848, 49.47059], [18.53063, 49.49022], [18.57183, 49.51162], [18.6144, 49.49824], [18.67757, 49.50895], [18.74761, 49.492], [18.84521, 49.51672], [18.84786, 49.5446], [18.80479, 49.6815], [18.72838, 49.68163], [18.69817, 49.70473], [18.62676, 49.71983], [18.62943, 49.74603], [18.62645, 49.75002], [18.61368, 49.75426], [18.61278, 49.7618], [18.57183, 49.83334], [18.60341, 49.86256], [18.57045, 49.87849], [18.57697, 49.91565], [18.54299, 49.92537], [18.54495, 49.9079], [18.53423, 49.89906], [18.41604, 49.93498], [18.33562, 49.94747], [18.33278, 49.92415], [18.31914, 49.91565], [18.27794, 49.93863], [18.27107, 49.96779], [18.21752, 49.97309], [18.20241, 49.99958], [18.10628, 50.00223], [18.07898, 50.04535], [18.03212, 50.06574], [18.00396, 50.04954], [18.04585, 50.03311], [18.04585, 50.01194], [18.00191, 50.01723], [17.86886, 49.97452], [17.77669, 50.02253], [17.7506, 50.07896], [17.6888, 50.12037], [17.66683, 50.10275], [17.59404, 50.16437], [17.70528, 50.18812], [17.76296, 50.23382], [17.72176, 50.25665], [17.74648, 50.29966], [17.69292, 50.32859], [17.67764, 50.28977], [17.58889, 50.27837], [17.3702, 50.28123], [17.34548, 50.2628], [17.34273, 50.32947], [17.27681, 50.32246], [17.19991, 50.3654], [17.19579, 50.38817], [17.14498, 50.38117], [17.1224, 50.39494], [16.89229, 50.45117], [16.85933, 50.41093], [16.90877, 50.38642], [16.94448, 50.31281], [16.99803, 50.30316], [17.02138, 50.27772], [16.99803, 50.25753], [17.02825, 50.23118], [17.00353, 50.21449], [16.98018, 50.24172], [16.8456, 50.20834], [16.7014, 50.09659], [16.63137, 50.1142], [16.55446, 50.16613], [16.56407, 50.21009], [16.42674, 50.32509], [16.39379, 50.3207], [16.3622, 50.34875], [16.36495, 50.37679], [16.30289, 50.38292], [16.28118, 50.36891], [16.22821, 50.41054], [16.21585, 50.40627], [16.19526, 50.43291], [16.31413, 50.50274], [16.34572, 50.49575], [16.44597, 50.58041], [16.33611, 50.66579], [16.23174, 50.67101], [16.20839, 50.63096], [16.10265, 50.66405], [16.02437, 50.60046], [15.98317, 50.61528], [16.0175, 50.63009], [15.97219, 50.69799], [15.87331, 50.67188], [15.81683, 50.75666], [15.73186, 50.73885], [15.43798, 50.80833], [15.3803, 50.77187], [15.36656, 50.83956], [15.2773, 50.8907], [15.27043, 50.97724], [15.2361, 50.99886], [15.1743, 50.9833], [15.16744, 51.01959], [15.11937, 50.99021], [15.10152, 51.01095], [15.06218, 51.02269], [15.03895, 51.0123], [15.02433, 51.0242], [14.96419, 50.99108], [15.01088, 50.97984], [14.99852, 50.86817], [14.82803, 50.86966]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DE",
      iso1A3: "DEU",
      iso1N3: "276",
      wikidata: "Q183",
      nameEn: "Germany",
      groups: ["EU", "155", "150", "UN"],
      callingCodes: ["49"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[8.70847, 47.68904], [8.71773, 47.69088], [8.70237, 47.71453], [8.66416, 47.71367], [8.67508, 47.6979], [8.65769, 47.68928], [8.66837, 47.68437], [8.68985, 47.69552], [8.70847, 47.68904]]], [[[8.72617, 47.69651], [8.72809, 47.69282], [8.75856, 47.68969], [8.79511, 47.67462], [8.79966, 47.70222], [8.76965, 47.7075], [8.77309, 47.72059], [8.80663, 47.73821], [8.82002, 47.71458], [8.86989, 47.70504], [8.85065, 47.68209], [8.87383, 47.67045], [8.87625, 47.65441], [8.89946, 47.64769], [8.94093, 47.65596], [9.02093, 47.6868], [9.09891, 47.67801], [9.13845, 47.66389], [9.15181, 47.66904], [9.1705, 47.65513], [9.1755, 47.65584], [9.17593, 47.65399], [9.18203, 47.65598], [9.25619, 47.65939], [9.55125, 47.53629], [9.72736, 47.53457], [9.76748, 47.5934], [9.80254, 47.59419], [9.82591, 47.58158], [9.8189, 47.54688], [9.87499, 47.52953], [9.87733, 47.54688], [9.92407, 47.53111], [9.96029, 47.53899], [10.00003, 47.48216], [10.03859, 47.48927], [10.07131, 47.45531], [10.09001, 47.46005], [10.1052, 47.4316], [10.06897, 47.40709], [10.09819, 47.35724], [10.11805, 47.37228], [10.16362, 47.36674], [10.17648, 47.38889], [10.2127, 47.38019], [10.22774, 47.38904], [10.23757, 47.37609], [10.19998, 47.32832], [10.2147, 47.31014], [10.17648, 47.29149], [10.17531, 47.27167], [10.23257, 47.27088], [10.33424, 47.30813], [10.39851, 47.37623], [10.4324, 47.38494], [10.4359, 47.41183], [10.47446, 47.43318], [10.46278, 47.47901], [10.44291, 47.48453], [10.4324, 47.50111], [10.44992, 47.5524], [10.43473, 47.58394], [10.47329, 47.58552], [10.48849, 47.54057], [10.56912, 47.53584], [10.60337, 47.56755], [10.63456, 47.5591], [10.68832, 47.55752], [10.6965, 47.54253], [10.7596, 47.53228], [10.77596, 47.51729], [10.88814, 47.53701], [10.91268, 47.51334], [10.86945, 47.5015], [10.87061, 47.4786], [10.90918, 47.48571], [10.93839, 47.48018], [10.92437, 47.46991], [10.98513, 47.42882], [10.97111, 47.41617], [10.97111, 47.39561], [11.11835, 47.39719], [11.12536, 47.41222], [11.20482, 47.43198], [11.25157, 47.43277], [11.22002, 47.3964], [11.27844, 47.39956], [11.29597, 47.42566], [11.33804, 47.44937], [11.4175, 47.44621], [11.38128, 47.47465], [11.4362, 47.51413], [11.52618, 47.50939], [11.58578, 47.52281], [11.58811, 47.55515], [11.60681, 47.57881], [11.63934, 47.59202], [11.84052, 47.58354], [11.85572, 47.60166], [12.0088, 47.62451], [12.02282, 47.61033], [12.05788, 47.61742], [12.13734, 47.60639], [12.17824, 47.61506], [12.18145, 47.61019], [12.17737, 47.60121], [12.18568, 47.6049], [12.20398, 47.60667], [12.20801, 47.61082], [12.19895, 47.64085], [12.18507, 47.65984], [12.18347, 47.66663], [12.16769, 47.68167], [12.16217, 47.70105], [12.18303, 47.70065], [12.22571, 47.71776], [12.2542, 47.7433], [12.26238, 47.73544], [12.24017, 47.69534], [12.26004, 47.67725], [12.27991, 47.68827], [12.336, 47.69534], [12.37222, 47.68433], [12.43883, 47.6977], [12.44117, 47.6741], [12.50076, 47.62293], [12.53816, 47.63553], [12.57438, 47.63238], [12.6071, 47.6741], [12.7357, 47.6787], [12.77777, 47.66689], [12.76492, 47.64485], [12.82101, 47.61493], [12.77427, 47.58025], [12.80699, 47.54477], [12.84672, 47.54556], [12.85256, 47.52741], [12.9624, 47.47452], [12.98344, 47.48716], [12.9998, 47.46267], [13.04537, 47.49426], [13.03252, 47.53373], [13.05355, 47.56291], [13.04537, 47.58183], [13.06641, 47.58577], [13.06407, 47.60075], [13.09562, 47.63304], [13.07692, 47.68814], [13.01382, 47.72116], [12.98578, 47.7078], [12.92969, 47.71094], [12.91333, 47.7178], [12.90274, 47.72513], [12.91711, 47.74026], [12.9353, 47.74788], [12.94371, 47.76281], [12.93202, 47.77302], [12.96311, 47.79957], [12.98543, 47.82896], [13.00588, 47.84374], [12.94163, 47.92927], [12.93886, 47.94046], [12.93642, 47.94436], [12.93419, 47.94063], [12.92668, 47.93879], [12.91985, 47.94069], [12.9211, 47.95135], [12.91683, 47.95647], [12.87476, 47.96195], [12.8549, 48.01122], [12.76141, 48.07373], [12.74973, 48.10885], [12.7617, 48.12796], [12.78595, 48.12445], [12.80676, 48.14979], [12.82673, 48.15245], [12.8362, 48.15876], [12.836, 48.1647], [12.84475, 48.16556], [12.87126, 48.20318], [12.95306, 48.20629], [13.02083, 48.25689], [13.0851, 48.27711], [13.126, 48.27867], [13.18093, 48.29577], [13.26039, 48.29422], [13.30897, 48.31575], [13.40709, 48.37292], [13.43929, 48.43386], [13.42527, 48.45711], [13.45727, 48.51092], [13.43695, 48.55776], [13.45214, 48.56472], [13.46967, 48.55157], [13.50663, 48.57506], [13.50131, 48.58091], [13.51291, 48.59023], [13.57535, 48.55912], [13.59705, 48.57013], [13.62508, 48.55501], [13.65186, 48.55092], [13.66113, 48.53558], [13.72802, 48.51208], [13.74816, 48.53058], [13.7513, 48.5624], [13.76921, 48.55324], [13.80519, 48.58026], [13.80038, 48.59487], [13.82609, 48.62345], [13.81901, 48.6761], [13.81283, 48.68426], [13.81791, 48.69832], [13.79337, 48.71375], [13.81863, 48.73257], [13.82266, 48.75544], [13.84023, 48.76988], [13.8096, 48.77877], [13.78977, 48.83319], [13.76994, 48.83537], [13.73854, 48.88538], [13.67739, 48.87886], [13.61624, 48.9462], [13.58319, 48.96899], [13.50552, 48.97441], [13.50221, 48.93752], [13.40802, 48.98851], [13.39479, 49.04812], [13.28242, 49.1228], [13.23689, 49.11412], [13.20405, 49.12303], [13.17019, 49.14339], [13.17665, 49.16713], [13.05883, 49.26259], [13.02957, 49.27399], [13.03618, 49.30417], [12.94859, 49.34079], [12.88249, 49.35479], [12.88414, 49.33541], [12.78168, 49.34618], [12.75854, 49.3989], [12.71227, 49.42363], [12.669, 49.42935], [12.64121, 49.47628], [12.64782, 49.52565], [12.60155, 49.52887], [12.56188, 49.6146], [12.53544, 49.61888], [12.52553, 49.68415], [12.4462, 49.70233], [12.40489, 49.76321], [12.46603, 49.78882], [12.48256, 49.83575], [12.55197, 49.92094], [12.47264, 49.94222], [12.49908, 49.97305], [12.30798, 50.05719], [12.26111, 50.06331], [12.27433, 50.0771], [12.23709, 50.10213], [12.2073, 50.10315], [12.1917, 50.13434], [12.21484, 50.16399], [12.19335, 50.19997], [12.09287, 50.25032], [12.13716, 50.27396], [12.10907, 50.32041], [12.18013, 50.32146], [12.20823, 50.2729], [12.25119, 50.27079], [12.26953, 50.25189], [12.24791, 50.25525], [12.23943, 50.24594], [12.28755, 50.22429], [12.28063, 50.19544], [12.29232, 50.17524], [12.32596, 50.17146], [12.33847, 50.19432], [12.32445, 50.20442], [12.33263, 50.24367], [12.35425, 50.23993], [12.36594, 50.28289], [12.40158, 50.29521], [12.39924, 50.32302], [12.43371, 50.32506], [12.43722, 50.33774], [12.46643, 50.35527], [12.48256, 50.34784], [12.49214, 50.35228], [12.48747, 50.37278], [12.51356, 50.39694], [12.67261, 50.41949], [12.70731, 50.39948], [12.73044, 50.42268], [12.73476, 50.43237], [12.82465, 50.45738], [12.94058, 50.40944], [12.98433, 50.42016], [13.02147, 50.44763], [13.02038, 50.4734], [13.0312, 50.50944], [13.08301, 50.50132], [13.13424, 50.51709], [13.19043, 50.50237], [13.25158, 50.59268], [13.29454, 50.57904], [13.32594, 50.58009], [13.32264, 50.60317], [13.37805, 50.627], [13.37485, 50.64931], [13.42189, 50.61243], [13.46413, 50.60102], [13.49742, 50.63133], [13.5226, 50.64721], [13.53748, 50.67654], [13.52474, 50.70394], [13.65977, 50.73096], [13.70204, 50.71771], [13.76316, 50.73487], [13.82942, 50.7251], [13.89444, 50.74142], [13.89113, 50.78533], [13.98864, 50.8177], [14.02982, 50.80662], [14.22331, 50.86049], [14.24314, 50.88761], [14.27123, 50.89386], [14.30098, 50.88448], [14.38691, 50.89907], [14.39848, 50.93866], [14.31422, 50.95243], [14.30251, 50.96606], [14.32793, 50.97379], [14.32353, 50.98556], [14.28776, 50.97718], [14.25665, 50.98935], [14.30098, 51.05515], [14.41335, 51.02086], [14.45827, 51.03712], [14.49202, 51.02286], [14.49154, 51.04382], [14.49991, 51.04692], [14.50809, 51.0427], [14.49873, 51.02242], [14.53321, 51.01679], [14.53438, 51.00374], [14.56432, 51.01008], [14.58215, 50.99306], [14.59908, 50.98685], [14.59702, 50.96148], [14.56374, 50.922], [14.58024, 50.91443], [14.64802, 50.93241], [14.65259, 50.90513], [14.63434, 50.8883], [14.61993, 50.86049], [14.70661, 50.84096], [14.79139, 50.81438], [14.82803, 50.86966], [14.81664, 50.88148], [14.89681, 50.9422], [14.89252, 50.94999], [14.92942, 50.99744], [14.95529, 51.04552], [14.97938, 51.07742], [14.98229, 51.11354], [14.99689, 51.12205], [14.99079, 51.14284], [14.99646, 51.14365], [15.00083, 51.14974], [14.99414, 51.15813], [14.99311, 51.16249], [15.0047, 51.16874], [15.01242, 51.21285], [15.04288, 51.28387], [14.98008, 51.33449], [14.96899, 51.38367], [14.9652, 51.44793], [14.94749, 51.47155], [14.73219, 51.52922], [14.72652, 51.53902], [14.73047, 51.54606], [14.71125, 51.56209], [14.7727, 51.61263], [14.75759, 51.62318], [14.75392, 51.67445], [14.69065, 51.70842], [14.66386, 51.73282], [14.64625, 51.79472], [14.60493, 51.80473], [14.59089, 51.83302], [14.6588, 51.88359], [14.6933, 51.9044], [14.70601, 51.92944], [14.7177, 51.94048], [14.72163, 51.95188], [14.71836, 51.95606], [14.7139, 51.95643], [14.70488, 51.97679], [14.71339, 52.00337], [14.76026, 52.06624], [14.72971, 52.09167], [14.6917, 52.10283], [14.67683, 52.13936], [14.70616, 52.16927], [14.68344, 52.19612], [14.71319, 52.22144], [14.70139, 52.25038], [14.58149, 52.28007], [14.56378, 52.33838], [14.55228, 52.35264], [14.54423, 52.42568], [14.63056, 52.48993], [14.60081, 52.53116], [14.6289, 52.57136], [14.61073, 52.59847], [14.22071, 52.81175], [14.13806, 52.82392], [14.12256, 52.84311], [14.15873, 52.87715], [14.14056, 52.95786], [14.25954, 53.00264], [14.35044, 53.05829], [14.38679, 53.13669], [14.36696, 53.16444], [14.37853, 53.20405], [14.40662, 53.21098], [14.45125, 53.26241], [14.44133, 53.27427], [14.4215, 53.27724], [14.35209, 53.49506], [14.3273, 53.50587], [14.30416, 53.55499], [14.31904, 53.61581], [14.2853, 53.63392], [14.28477, 53.65955], [14.27133, 53.66613], [14.2836, 53.67721], [14.26782, 53.69866], [14.27249, 53.74464], [14.21323, 53.8664], [14.20823, 53.90776], [14.18544, 53.91258], [14.20647, 53.91671], [14.22634, 53.9291], [14.20811, 54.12784], [13.93395, 54.84044], [12.85844, 54.82438], [11.90309, 54.38543], [11.00303, 54.63689], [10.31111, 54.65968], [10.16755, 54.73883], [9.89314, 54.84171], [9.73563, 54.8247], [9.61187, 54.85548], [9.62734, 54.88057], [9.58937, 54.88785], [9.4659, 54.83131], [9.43155, 54.82586], [9.41213, 54.84254], [9.38532, 54.83968], [9.36496, 54.81749], [9.33849, 54.80233], [9.32771, 54.80602], [9.2474, 54.8112], [9.23445, 54.83432], [9.24631, 54.84726], [9.20571, 54.85841], [9.14275, 54.87421], [9.04629, 54.87249], [8.92795, 54.90452], [8.81178, 54.90518], [8.76387, 54.8948], [8.63979, 54.91069], [8.55769, 54.91837], [8.45719, 55.06747], [8.02459, 55.09613], [5.45168, 54.20039], [6.91025, 53.44221], [7.00198, 53.32672], [7.19052, 53.31866], [7.21679, 53.20058], [7.22681, 53.18165], [7.17898, 53.13817], [7.21694, 53.00742], [7.07253, 52.81083], [7.04557, 52.63318], [6.77307, 52.65375], [6.71641, 52.62905], [6.69507, 52.488], [6.94293, 52.43597], [6.99041, 52.47235], [7.03417, 52.40237], [7.07044, 52.37805], [7.02703, 52.27941], [7.06365, 52.23789], [7.03729, 52.22695], [6.9897, 52.2271], [6.97189, 52.20329], [6.83984, 52.11728], [6.76117, 52.11895], [6.68128, 52.05052], [6.83035, 51.9905], [6.82357, 51.96711], [6.72319, 51.89518], [6.68386, 51.91861], [6.58556, 51.89386], [6.50231, 51.86313], [6.47179, 51.85395], [6.38815, 51.87257], [6.40704, 51.82771], [6.30593, 51.84998], [6.29872, 51.86801], [6.21443, 51.86801], [6.15349, 51.90439], [6.11551, 51.89769], [6.16902, 51.84094], [6.10337, 51.84829], [6.06705, 51.86136], [5.99848, 51.83195], [5.94568, 51.82786], [5.98665, 51.76944], [5.95003, 51.7493], [6.04091, 51.71821], [6.02767, 51.6742], [6.11759, 51.65609], [6.09055, 51.60564], [6.18017, 51.54096], [6.21724, 51.48568], [6.20654, 51.40049], [6.22641, 51.39948], [6.22674, 51.36135], [6.16977, 51.33169], [6.07889, 51.24432], [6.07889, 51.17038], [6.17384, 51.19589], [6.16706, 51.15677], [5.98292, 51.07469], [5.9541, 51.03496], [5.9134, 51.06736], [5.86735, 51.05182], [5.87849, 51.01969], [5.90493, 51.00198], [5.90296, 50.97356], [5.95282, 50.98728], [6.02697, 50.98303], [6.01615, 50.93367], [6.09297, 50.92066], [6.07486, 50.89307], [6.08805, 50.87223], [6.07693, 50.86025], [6.07431, 50.84674], [6.05702, 50.85179], [6.05623, 50.8572], [6.01921, 50.84435], [6.02328, 50.81694], [6.00462, 50.80065], [5.98404, 50.80988], [5.97497, 50.79992], [6.02624, 50.77453], [6.01976, 50.75398], [6.03889, 50.74618], [6.0326, 50.72647], [6.0406, 50.71848], [6.04428, 50.72861], [6.11707, 50.72231], [6.17852, 50.6245], [6.26957, 50.62444], [6.2476, 50.60392], [6.24888, 50.59869], [6.24005, 50.58732], [6.22581, 50.5907], [6.20281, 50.56952], [6.17739, 50.55875], [6.17802, 50.54179], [6.19735, 50.53576], [6.19579, 50.5313], [6.18716, 50.52653], [6.19193, 50.5212], [6.20599, 50.52089], [6.22335, 50.49578], [6.26637, 50.50272], [6.30809, 50.50058], [6.3465, 50.48833], [6.34005, 50.46083], [6.37219, 50.45397], [6.36852, 50.40776], [6.34406, 50.37994], [6.3688, 50.35898], [6.40785, 50.33557], [6.40641, 50.32425], [6.35701, 50.31139], [6.32488, 50.32333], [6.29949, 50.30887], [6.28797, 50.27458], [6.208, 50.25179], [6.16853, 50.2234], [6.18364, 50.20815], [6.18739, 50.1822], [6.14588, 50.17106], [6.14132, 50.14971], [6.15298, 50.14126], [6.1379, 50.12964], [6.12055, 50.09171], [6.11274, 50.05916], [6.13458, 50.04141], [6.13044, 50.02929], [6.14666, 50.02207], [6.13794, 50.01466], [6.13273, 50.02019], [6.1295, 50.01849], [6.13806, 50.01056], [6.14948, 50.00908], [6.14147, 49.99563], [6.1701, 49.98518], [6.16466, 49.97086], [6.17872, 49.9537], [6.18554, 49.95622], [6.18045, 49.96611], [6.19089, 49.96991], [6.19856, 49.95053], [6.22094, 49.94955], [6.22608, 49.929], [6.21882, 49.92403], [6.22926, 49.92096], [6.23496, 49.89972], [6.26146, 49.88203], [6.28874, 49.87592], [6.29692, 49.86685], [6.30963, 49.87021], [6.32303, 49.85133], [6.32098, 49.83728], [6.33585, 49.83785], [6.34267, 49.84974], [6.36576, 49.85032], [6.40022, 49.82029], [6.42521, 49.81591], [6.42905, 49.81091], [6.44131, 49.81443], [6.45425, 49.81164], [6.47111, 49.82263], [6.48718, 49.81267], [6.50647, 49.80916], [6.51215, 49.80124], [6.52121, 49.81338], [6.53122, 49.80666], [6.52169, 49.79787], [6.50534, 49.78952], [6.51669, 49.78336], [6.51056, 49.77515], [6.51828, 49.76855], [6.51646, 49.75961], [6.50174, 49.75292], [6.50193, 49.73291], [6.51805, 49.72425], [6.51397, 49.72058], [6.50261, 49.72718], [6.49535, 49.72645], [6.49694, 49.72205], [6.5042, 49.71808], [6.50647, 49.71353], [6.49785, 49.71118], [6.48014, 49.69767], [6.46048, 49.69092], [6.44654, 49.67799], [6.42937, 49.66857], [6.42726, 49.66078], [6.43768, 49.66021], [6.4413, 49.65722], [6.41861, 49.61723], [6.39822, 49.60081], [6.385, 49.59946], [6.37464, 49.58886], [6.38342, 49.5799], [6.38024, 49.57593], [6.36676, 49.57813], [6.35825, 49.57053], [6.38228, 49.55855], [6.38072, 49.55171], [6.35666, 49.52931], [6.36788, 49.50377], [6.36907, 49.48931], [6.36778, 49.46937], [6.38352, 49.46463], [6.39168, 49.4667], [6.40274, 49.46546], [6.42432, 49.47683], [6.55404, 49.42464], [6.533, 49.40748], [6.60091, 49.36864], [6.58807, 49.35358], [6.572, 49.35027], [6.60186, 49.31055], [6.66583, 49.28065], [6.69274, 49.21661], [6.71843, 49.2208], [6.73256, 49.20486], [6.71137, 49.18808], [6.73765, 49.16375], [6.78265, 49.16793], [6.83385, 49.15162], [6.84703, 49.15734], [6.86225, 49.18185], [6.85016, 49.19354], [6.85119, 49.20038], [6.83555, 49.21249], [6.85939, 49.22376], [6.89298, 49.20863], [6.91875, 49.22261], [6.93831, 49.2223], [6.94028, 49.21641], [6.95963, 49.203], [6.97273, 49.2099], [7.01318, 49.19018], [7.03459, 49.19096], [7.0274, 49.17042], [7.03178, 49.15734], [7.04662, 49.13724], [7.04409, 49.12123], [7.04843, 49.11422], [7.05548, 49.11185], [7.06642, 49.11415], [7.07162, 49.1255], [7.09007, 49.13094], [7.07859, 49.15031], [7.10715, 49.15631], [7.10384, 49.13787], [7.12504, 49.14253], [7.1358, 49.1282], [7.1593, 49.1204], [7.23473, 49.12971], [7.29514, 49.11426], [7.3195, 49.14231], [7.35995, 49.14399], [7.3662, 49.17308], [7.44052, 49.18354], [7.44455, 49.16765], [7.49473, 49.17], [7.49172, 49.13915], [7.53012, 49.09818], [7.56416, 49.08136], [7.62575, 49.07654], [7.63618, 49.05428], [7.75948, 49.04562], [7.79557, 49.06583], [7.86386, 49.03499], [7.93641, 49.05544], [7.97783, 49.03161], [8.14189, 48.97833], [8.22604, 48.97352], [8.20031, 48.95856], [8.19989, 48.95825], [8.12813, 48.87985], [8.10253, 48.81829], [8.06802, 48.78957], [8.0326, 48.79017], [8.01534, 48.76085], [7.96994, 48.75606], [7.96812, 48.72491], [7.89002, 48.66317], [7.84098, 48.64217], [7.80057, 48.5857], [7.80167, 48.54758], [7.80647, 48.51239], [7.76833, 48.48945], [7.73109, 48.39192], [7.74562, 48.32736], [7.69022, 48.30018], [7.6648, 48.22219], [7.57137, 48.12292], [7.56966, 48.03265], [7.62302, 47.97898], [7.55673, 47.87371], [7.52921, 47.77747], [7.54761, 47.72912], [7.53722, 47.71635], [7.51266, 47.70197], [7.51915, 47.68335], [7.52067, 47.66437], [7.53384, 47.65115], [7.5591, 47.63849], [7.57423, 47.61628], [7.58851, 47.60794], [7.59301, 47.60058], [7.58945, 47.59017], [7.60523, 47.58519], [7.60459, 47.57869], [7.61929, 47.57683], [7.64309, 47.59151], [7.64213, 47.5944], [7.64599, 47.59695], [7.67395, 47.59212], [7.68229, 47.59905], [7.69385, 47.60099], [7.68486, 47.59601], [7.67115, 47.5871], [7.68904, 47.57133], [7.67655, 47.56435], [7.63338, 47.56256], [7.65083, 47.54662], [7.66174, 47.54554], [7.6656, 47.53752], [7.68101, 47.53232], [7.69642, 47.53297], [7.71961, 47.54219], [7.75261, 47.54599], [7.79486, 47.55691], [7.81901, 47.58798], [7.84412, 47.5841], [7.88664, 47.58854], [7.90673, 47.57674], [7.91251, 47.55031], [7.94494, 47.54511], [7.95682, 47.55789], [7.97581, 47.55493], [8.00113, 47.55616], [8.02136, 47.55096], [8.04383, 47.55443], [8.06663, 47.56374], [8.08557, 47.55768], [8.10002, 47.56504], [8.10395, 47.57918], [8.11543, 47.5841], [8.13662, 47.58432], [8.13823, 47.59147], [8.14947, 47.59558], [8.1652, 47.5945], [8.19378, 47.61636], [8.20617, 47.62141], [8.22011, 47.6181], [8.22577, 47.60385], [8.23809, 47.61204], [8.25863, 47.61571], [8.26313, 47.6103], [8.2824, 47.61225], [8.29722, 47.60603], [8.29524, 47.5919], [8.30277, 47.58607], [8.32735, 47.57133], [8.35512, 47.57014], [8.38273, 47.56608], [8.39477, 47.57826], [8.43235, 47.56617], [8.49431, 47.58107], [8.48949, 47.588], [8.46637, 47.58389], [8.45578, 47.60121], [8.50747, 47.61897], [8.51686, 47.63476], [8.55756, 47.62394], [8.57586, 47.59537], [8.60348, 47.61204], [8.59545, 47.64298], [8.60701, 47.65271], [8.61471, 47.64514], [8.60412, 47.63735], [8.62049, 47.63757], [8.62884, 47.65098], [8.61113, 47.66332], [8.6052, 47.67258], [8.57683, 47.66158], [8.56141, 47.67088], [8.52801, 47.66059], [8.5322, 47.64687], [8.49656, 47.64709], [8.46605, 47.64103], [8.4667, 47.65747], [8.44711, 47.65379], [8.42264, 47.66667], [8.41346, 47.66676], [8.40473, 47.67499], [8.4211, 47.68407], [8.40569, 47.69855], [8.44807, 47.72426], [8.45771, 47.7493], [8.48868, 47.77215], [8.56814, 47.78001], [8.56415, 47.80633], [8.61657, 47.79998], [8.62408, 47.7626], [8.64425, 47.76398], [8.65292, 47.80066], [8.68022, 47.78599], [8.68985, 47.75686], [8.71778, 47.76571], [8.74251, 47.75168], [8.70543, 47.73121], [8.73671, 47.7169], [8.72617, 47.69651]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DG",
      iso1A3: "DGA",
      wikidata: "Q184851",
      nameEn: "Diego Garcia",
      country: "GB",
      groups: ["IO", "BOTS", "014", "202", "002", "UN"],
      isoStatus: "excRes",
      callingCodes: ["246"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[73.14823, -7.76302], [73.09982, -6.07324], [71.43792, -7.73904], [73.14823, -7.76302]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DJ",
      iso1A3: "DJI",
      iso1N3: "262",
      wikidata: "Q977",
      nameEn: "Djibouti",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["253"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[43.90659, 12.3823], [43.90659, 12.3823], [43.32909, 12.59711], [43.29075, 12.79154], [42.86195, 12.58747], [42.7996, 12.42629], [42.6957, 12.36201], [42.46941, 12.52661], [42.4037, 12.46478], [41.95461, 11.81157], [41.82878, 11.72361], [41.77727, 11.49902], [41.8096, 11.33606], [41.80056, 10.97127], [42.06302, 10.92599], [42.13691, 10.97586], [42.42669, 10.98493], [42.62989, 11.09711], [42.75111, 11.06992], [42.79037, 10.98493], [42.95776, 10.98533], [43.90659, 12.3823]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DK",
      iso1A3: "DNK",
      iso1N3: "208",
      wikidata: "Q756617",
      nameEn: "Kingdom of Denmark"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DM",
      iso1A3: "DMA",
      iso1N3: "212",
      wikidata: "Q784",
      nameEn: "Dominica",
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 767"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-61.32485, 14.91445], [-60.86656, 15.82603], [-61.95646, 15.5094], [-61.32485, 14.91445]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DO",
      iso1A3: "DOM",
      iso1N3: "214",
      wikidata: "Q786",
      nameEn: "Dominican Republic",
      groups: ["029", "003", "419", "019", "UN"],
      callingCodes: ["1 809", "1 829", "1 849"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-67.87844, 21.7938], [-72.38946, 20.27111], [-71.77419, 19.73128], [-71.75865, 19.70231], [-71.7429, 19.58445], [-71.71449, 19.55364], [-71.71268, 19.53374], [-71.6802, 19.45008], [-71.69448, 19.37866], [-71.77766, 19.33823], [-71.73229, 19.26686], [-71.62642, 19.21212], [-71.65337, 19.11759], [-71.69938, 19.10916], [-71.71088, 19.08353], [-71.74088, 19.0437], [-71.88102, 18.95007], [-71.77766, 18.95007], [-71.72624, 18.87802], [-71.71885, 18.78423], [-71.82556, 18.62551], [-71.95412, 18.64939], [-72.00201, 18.62312], [-71.88102, 18.50125], [-71.90875, 18.45821], [-71.69952, 18.34101], [-71.78271, 18.18302], [-71.75465, 18.14405], [-71.74994, 18.11115], [-71.73783, 18.07177], [-71.75671, 18.03456], [-72.29523, 17.48026], [-68.39466, 16.14167], [-67.87844, 21.7938]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "DZ",
      iso1A3: "DZA",
      iso1N3: "012",
      wikidata: "Q262",
      nameEn: "Algeria",
      groups: ["015", "002", "UN"],
      callingCodes: ["213"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[8.59123, 37.14286], [5.10072, 39.89531], [-2.27707, 35.35051], [-2.21248, 35.08532], [-2.21445, 35.04378], [-2.04734, 34.93218], [-1.97833, 34.93218], [-1.97469, 34.886], [-1.73707, 34.74226], [-1.84569, 34.61907], [-1.69788, 34.48056], [-1.78042, 34.39018], [-1.64666, 34.10405], [-1.73494, 33.71721], [-1.59508, 33.59929], [-1.67067, 33.27084], [-1.46249, 33.0499], [-1.54244, 32.95499], [-1.37794, 32.73628], [-0.9912, 32.52467], [-1.24998, 32.32993], [-1.24453, 32.1917], [-1.15735, 32.12096], [-1.22829, 32.07832], [-2.46166, 32.16603], [-2.93873, 32.06557], [-2.82784, 31.79459], [-3.66314, 31.6339], [-3.66386, 31.39202], [-3.77647, 31.31912], [-3.77103, 31.14984], [-3.54944, 31.0503], [-3.65418, 30.85566], [-3.64735, 30.67539], [-4.31774, 30.53229], [-4.6058, 30.28343], [-5.21671, 29.95253], [-5.58831, 29.48103], [-5.72121, 29.52322], [-5.75616, 29.61407], [-6.69965, 29.51623], [-6.78351, 29.44634], [-6.95824, 29.50924], [-7.61585, 29.36252], [-8.6715, 28.71194], [-8.66879, 27.6666], [-8.66674, 27.31569], [-4.83423, 24.99935], [1.15698, 21.12843], [1.20992, 20.73533], [3.24648, 19.81703], [3.12501, 19.1366], [3.36082, 18.9745], [4.26651, 19.14224], [5.8153, 19.45101], [7.38361, 20.79165], [7.48273, 20.87258], [11.96886, 23.51735], [11.62498, 24.26669], [11.41061, 24.21456], [10.85323, 24.5595], [10.33159, 24.5465], [10.02432, 24.98124], [10.03146, 25.35635], [9.38834, 26.19288], [9.51696, 26.39148], [9.89569, 26.57696], [9.78136, 29.40961], [9.3876, 30.16738], [9.55544, 30.23971], [9.07483, 32.07865], [8.35999, 32.50101], [8.31895, 32.83483], [8.1179, 33.05086], [8.11433, 33.10175], [7.83028, 33.18851], [7.73687, 33.42114], [7.54088, 33.7726], [7.52851, 34.06493], [7.66174, 34.20167], [7.74207, 34.16492], [7.81242, 34.21841], [7.86264, 34.3987], [8.20482, 34.57575], [8.29655, 34.72798], [8.25189, 34.92009], [8.30727, 34.95378], [8.3555, 35.10007], [8.47318, 35.23376], [8.30329, 35.29884], [8.36086, 35.47774], [8.35371, 35.66373], [8.26472, 35.73669], [8.2626, 35.91733], [8.40731, 36.42208], [8.18936, 36.44939], [8.16167, 36.48817], [8.47609, 36.66607], [8.46537, 36.7706], [8.57613, 36.78062], [8.67706, 36.8364], [8.62972, 36.86499], [8.64044, 36.9401], [8.59123, 37.14286]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "EA",
      wikidata: "Q28868874",
      nameEn: "Ceuta, Melilla",
      country: "ES",
      level: "territory",
      isoStatus: "excRes"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "EC",
      iso1A3: "ECU",
      iso1N3: "218",
      wikidata: "Q736",
      nameEn: "Ecuador"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "EE",
      iso1A3: "EST",
      iso1N3: "233",
      wikidata: "Q191",
      nameEn: "Estonia",
      aliases: ["EW"],
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["372"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[26.32936, 60.00121], [20.5104, 59.15546], [19.84909, 57.57876], [22.80496, 57.87798], [23.20055, 57.56697], [24.26221, 57.91787], [24.3579, 57.87471], [25.19484, 58.0831], [25.28237, 57.98539], [25.29581, 58.08288], [25.73499, 57.90193], [26.05949, 57.84744], [26.0324, 57.79037], [26.02456, 57.78342], [26.027, 57.78158], [26.0266, 57.77441], [26.02069, 57.77169], [26.02415, 57.76865], [26.03332, 57.7718], [26.0543, 57.76105], [26.08098, 57.76619], [26.2029, 57.7206], [26.1866, 57.6849], [26.29253, 57.59244], [26.46527, 57.56885], [26.54675, 57.51813], [26.90364, 57.62823], [27.34698, 57.52242], [27.31919, 57.57672], [27.40393, 57.62125], [27.3746, 57.66834], [27.52615, 57.72843], [27.50171, 57.78842], [27.56689, 57.83356], [27.78526, 57.83963], [27.81841, 57.89244], [27.67282, 57.92627], [27.62393, 58.09462], [27.48541, 58.22615], [27.55489, 58.39525], [27.36366, 58.78381], [27.74429, 58.98351], [27.80482, 59.1116], [27.87978, 59.18097], [27.90911, 59.24353], [28.00689, 59.28351], [28.14215, 59.28934], [28.19284, 59.35791], [28.20537, 59.36491], [28.21137, 59.38058], [28.19061, 59.39962], [28.04187, 59.47017], [27.85643, 59.58538], [26.90044, 59.63819], [26.32936, 60.00121]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "EG",
      iso1A3: "EGY",
      iso1N3: "818",
      wikidata: "Q79",
      nameEn: "Egypt",
      groups: ["015", "002", "UN"],
      callingCodes: ["20"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.62659, 31.82938], [26.92891, 33.39516], [24.8458, 31.39877], [25.01077, 30.73861], [24.71117, 30.17441], [24.99968, 29.24574], [24.99885, 21.99535], [33.17563, 22.00405], [34.0765, 22.00501], [37.8565, 22.00903], [34.4454, 27.91479], [34.8812, 29.36878], [34.92298, 29.45305], [34.26742, 31.21998], [34.24012, 31.29591], [34.23572, 31.2966], [34.21853, 31.32363], [34.052, 31.46619], [33.62659, 31.82938]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "EH",
      iso1A3: "ESH",
      iso1N3: "732",
      wikidata: "Q6250",
      nameEn: "Western Sahara",
      groups: ["015", "002"],
      callingCodes: ["212"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-8.66879, 27.6666], [-8.77527, 27.66663], [-8.71787, 26.9898], [-9.08698, 26.98639], [-9.56957, 26.90042], [-9.81998, 26.71379], [-10.68417, 26.90984], [-11.35695, 26.8505], [-11.23622, 26.72023], [-11.38635, 26.611], [-11.62052, 26.05229], [-12.06001, 26.04442], [-12.12281, 25.13682], [-12.92147, 24.39502], [-13.00628, 24.01923], [-13.75627, 23.77231], [-14.10361, 22.75501], [-14.1291, 22.41636], [-14.48112, 22.00886], [-14.47329, 21.63839], [-14.78487, 21.36587], [-16.44269, 21.39745], [-16.9978, 21.36239], [-17.02707, 21.34022], [-17.21511, 21.34226], [-17.35589, 20.80492], [-17.0471, 20.76408], [-17.0695, 20.85742], [-17.06781, 20.92697], [-17.0396, 20.9961], [-17.0357, 21.05368], [-16.99806, 21.12142], [-16.95474, 21.33997], [-13.01525, 21.33343], [-13.08438, 22.53866], [-13.15313, 22.75649], [-13.10753, 22.89493], [-13.00412, 23.02297], [-12.5741, 23.28975], [-12.36213, 23.3187], [-12.14969, 23.41935], [-12.00251, 23.4538], [-12.0002, 25.9986], [-8.66721, 25.99918], [-8.66674, 27.31569], [-8.66879, 27.6666]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ER",
      iso1A3: "ERI",
      iso1N3: "232",
      wikidata: "Q986",
      nameEn: "Eritrea",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["291"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[40.99158, 15.81743], [39.63762, 18.37348], [38.57727, 17.98125], [38.45916, 17.87167], [38.37133, 17.66269], [38.13362, 17.53906], [37.50967, 17.32199], [37.42694, 17.04041], [36.99777, 17.07172], [36.92193, 16.23451], [36.76371, 15.80831], [36.69761, 15.75323], [36.54276, 15.23478], [36.44337, 15.14963], [36.54376, 14.25597], [36.56536, 14.26177], [36.55659, 14.28237], [36.63364, 14.31172], [36.85787, 14.32201], [37.01622, 14.2561], [37.09486, 14.27155], [37.13206, 14.40746], [37.3106, 14.44657], [37.47319, 14.2149], [37.528, 14.18413], [37.91287, 14.89447], [38.0364, 14.72745], [38.25562, 14.67287], [38.3533, 14.51323], [38.45748, 14.41445], [38.78306, 14.4754], [38.98058, 14.54895], [39.02834, 14.63717], [39.16074, 14.65187], [39.14772, 14.61827], [39.19547, 14.56996], [39.23888, 14.56365], [39.26927, 14.48801], [39.2302, 14.44598], [39.2519, 14.40393], [39.37685, 14.54402], [39.52756, 14.49011], [39.50585, 14.55735], [39.58182, 14.60987], [39.76632, 14.54264], [39.9443, 14.41024], [40.07236, 14.54264], [40.14649, 14.53969], [40.21128, 14.39342], [40.25686, 14.41445], [40.9167, 14.11152], [41.25097, 13.60787], [41.62864, 13.38626], [42.05841, 12.80912], [42.21469, 12.75832], [42.2798, 12.6355], [42.4037, 12.46478], [42.46941, 12.52661], [42.6957, 12.36201], [42.7996, 12.42629], [42.86195, 12.58747], [43.29075, 12.79154], [40.99158, 15.81743]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ES",
      iso1A3: "ESP",
      iso1N3: "724",
      wikidata: "Q29",
      nameEn: "Spain"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ET",
      iso1A3: "ETH",
      iso1N3: "231",
      wikidata: "Q115",
      nameEn: "Ethiopia",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["251"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[42.4037, 12.46478], [42.2798, 12.6355], [42.21469, 12.75832], [42.05841, 12.80912], [41.62864, 13.38626], [41.25097, 13.60787], [40.9167, 14.11152], [40.25686, 14.41445], [40.21128, 14.39342], [40.14649, 14.53969], [40.07236, 14.54264], [39.9443, 14.41024], [39.76632, 14.54264], [39.58182, 14.60987], [39.50585, 14.55735], [39.52756, 14.49011], [39.37685, 14.54402], [39.2519, 14.40393], [39.2302, 14.44598], [39.26927, 14.48801], [39.23888, 14.56365], [39.19547, 14.56996], [39.14772, 14.61827], [39.16074, 14.65187], [39.02834, 14.63717], [38.98058, 14.54895], [38.78306, 14.4754], [38.45748, 14.41445], [38.3533, 14.51323], [38.25562, 14.67287], [38.0364, 14.72745], [37.91287, 14.89447], [37.528, 14.18413], [37.47319, 14.2149], [37.3106, 14.44657], [37.13206, 14.40746], [37.09486, 14.27155], [37.01622, 14.2561], [36.85787, 14.32201], [36.63364, 14.31172], [36.55659, 14.28237], [36.56536, 14.26177], [36.54376, 14.25597], [36.44653, 13.95666], [36.48824, 13.83954], [36.38993, 13.56459], [36.24545, 13.36759], [36.13374, 12.92665], [36.16651, 12.88019], [36.14268, 12.70879], [36.01458, 12.72478], [35.70476, 12.67101], [35.24302, 11.91132], [35.11492, 11.85156], [35.05832, 11.71158], [35.09556, 11.56278], [34.95704, 11.24448], [35.01215, 11.19626], [34.93172, 10.95946], [34.97789, 10.91559], [34.97491, 10.86147], [34.86916, 10.78832], [34.86618, 10.74588], [34.77532, 10.69027], [34.77383, 10.74588], [34.59062, 10.89072], [34.4372, 10.781], [34.2823, 10.53508], [34.34783, 10.23914], [34.32102, 10.11599], [34.22718, 10.02506], [34.20484, 9.9033], [34.13186, 9.7492], [34.08717, 9.55243], [34.10229, 9.50238], [34.14304, 9.04654], [34.14453, 8.60204], [34.01346, 8.50041], [33.89579, 8.4842], [33.87195, 8.41938], [33.71407, 8.3678], [33.66938, 8.44442], [33.54575, 8.47094], [33.3119, 8.45474], [33.19721, 8.40317], [33.1853, 8.29264], [33.18083, 8.13047], [33.08401, 8.05822], [33.0006, 7.90333], [33.04944, 7.78989], [33.24637, 7.77939], [33.32531, 7.71297], [33.44745, 7.7543], [33.71407, 7.65983], [33.87642, 7.5491], [34.02984, 7.36449], [34.03878, 7.27437], [34.01495, 7.25664], [34.19369, 7.12807], [34.19369, 7.04382], [34.35753, 6.91963], [34.47669, 6.91076], [34.53925, 6.82794], [34.53776, 6.74808], [34.65096, 6.72589], [34.77459, 6.5957], [34.87736, 6.60161], [35.01738, 6.46991], [34.96227, 6.26415], [35.00546, 5.89387], [35.12611, 5.68937], [35.13058, 5.62118], [35.31188, 5.50106], [35.29938, 5.34042], [35.50792, 5.42431], [35.8576, 5.33413], [35.81968, 5.10757], [35.82118, 4.77382], [35.9419, 4.61933], [35.95449, 4.53244], [36.03924, 4.44406], [36.84474, 4.44518], [37.07724, 4.33503], [38.14168, 3.62487], [38.45812, 3.60445], [38.52336, 3.62551], [38.91938, 3.51198], [39.07736, 3.5267], [39.19954, 3.47834], [39.49444, 3.45521], [39.51551, 3.40895], [39.55132, 3.39634], [39.58339, 3.47434], [39.76808, 3.67058], [39.86043, 3.86974], [40.77498, 4.27683], [41.1754, 3.94079], [41.89488, 3.97375], [42.07619, 4.17667], [42.55853, 4.20518], [42.84526, 4.28357], [42.97746, 4.44032], [43.04177, 4.57923], [43.40263, 4.79289], [44.02436, 4.9451], [44.98104, 4.91821], [47.97917, 8.00124], [47.92477, 8.00111], [46.99339, 7.9989], [44.19222, 8.93028], [43.32613, 9.59205], [43.23518, 9.84605], [43.0937, 9.90579], [42.87643, 10.18441], [42.69452, 10.62672], [42.95776, 10.98533], [42.79037, 10.98493], [42.75111, 11.06992], [42.62989, 11.09711], [42.42669, 10.98493], [42.13691, 10.97586], [42.06302, 10.92599], [41.80056, 10.97127], [41.8096, 11.33606], [41.77727, 11.49902], [41.82878, 11.72361], [41.95461, 11.81157], [42.4037, 12.46478]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "EU",
      iso1A3: "EUE",
      wikidata: "Q458",
      nameEn: "European Union",
      level: "union",
      isoStatus: "excRes"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FI",
      iso1A3: "FIN",
      iso1N3: "246",
      wikidata: "Q33",
      nameEn: "Finland",
      aliases: ["SF"]
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FJ",
      iso1A3: "FJI",
      iso1N3: "242",
      wikidata: "Q712",
      nameEn: "Fiji",
      groups: ["054", "009", "UN"],
      driveSide: "left",
      callingCodes: ["679"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[174.245, -23.1974], [179.99999, -22.5], [179.99999, -11.5], [174, -11.5], [174.245, -23.1974]]], [[[-176.76826, -14.95183], [-180, -14.96041], [-180, -22.90585], [-176.74538, -22.89767], [-176.76826, -14.95183]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FK",
      iso1A3: "FLK",
      iso1N3: "238",
      wikidata: "Q9648",
      nameEn: "Falkland Islands",
      country: "GB",
      groups: ["BOTS", "005", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["500"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.67376, -55.11859], [-54.56126, -51.26248], [-61.26735, -50.63919], [-63.67376, -55.11859]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FM",
      iso1A3: "FSM",
      iso1N3: "583",
      wikidata: "Q702",
      nameEn: "Federated States of Micronesia",
      groups: ["057", "009", "UN"],
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["691"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[138.20583, 13.3783], [136.27107, 6.73747], [156.88247, -1.39237], [165.19726, 6.22546], [138.20583, 13.3783]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FO",
      iso1A3: "FRO",
      iso1N3: "234",
      wikidata: "Q4628",
      nameEn: "Faroe Islands",
      country: "DK",
      groups: ["154", "150", "UN"],
      callingCodes: ["298"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-8.51774, 62.35338], [-6.51083, 60.95272], [-5.70102, 62.77194], [-8.51774, 62.35338]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FR",
      iso1A3: "FRA",
      iso1N3: "250",
      wikidata: "Q142",
      nameEn: "France"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "FX",
      iso1A3: "FXX",
      iso1N3: "249",
      wikidata: "Q212429",
      nameEn: "Metropolitan France",
      country: "FR",
      groups: ["EU", "155", "150", "UN"],
      isoStatus: "excRes",
      callingCodes: ["33"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[2.55904, 51.07014], [2.18458, 51.52087], [1.17405, 50.74239], [-2.02963, 49.91866], [-2.09454, 49.46288], [-1.83944, 49.23037], [-2.00491, 48.86706], [-2.65349, 49.15373], [-6.28985, 48.93406], [-1.81005, 43.59738], [-1.77289, 43.38957], [-1.79319, 43.37497], [-1.78332, 43.36399], [-1.78714, 43.35476], [-1.77068, 43.34396], [-1.75334, 43.34107], [-1.75079, 43.3317], [-1.7397, 43.32979], [-1.73074, 43.29481], [-1.69407, 43.31378], [-1.62481, 43.30726], [-1.63052, 43.28591], [-1.61341, 43.25269], [-1.57674, 43.25269], [-1.55963, 43.28828], [-1.50992, 43.29481], [-1.45289, 43.27049], [-1.40942, 43.27272], [-1.3758, 43.24511], [-1.41562, 43.12815], [-1.47555, 43.08372], [-1.44067, 43.047], [-1.35272, 43.02658], [-1.34419, 43.09665], [-1.32209, 43.1127], [-1.27118, 43.11961], [-1.30052, 43.09581], [-1.30531, 43.06859], [-1.25244, 43.04164], [-1.22881, 43.05534], [-1.10333, 43.0059], [-1.00963, 42.99279], [-0.97133, 42.96239], [-0.81652, 42.95166], [-0.75478, 42.96916], [-0.72037, 42.92541], [-0.73422, 42.91228], [-0.72608, 42.89318], [-0.69837, 42.87945], [-0.67637, 42.88303], [-0.55497, 42.77846], [-0.50863, 42.82713], [-0.44334, 42.79939], [-0.41319, 42.80776], [-0.38833, 42.80132], [-0.3122, 42.84788], [-0.17939, 42.78974], [-0.16141, 42.79535], [-0.10519, 42.72761], [-0.02468, 42.68513], [0.17569, 42.73424], [0.25336, 42.7174], [0.29407, 42.67431], [0.36251, 42.72282], [0.40214, 42.69779], [0.67873, 42.69458], [0.65421, 42.75872], [0.66121, 42.84021], [0.711, 42.86372], [0.93089, 42.79154], [0.96166, 42.80629], [0.98292, 42.78754], [1.0804, 42.78569], [1.15928, 42.71407], [1.35562, 42.71944], [1.44197, 42.60217], [1.47986, 42.61346], [1.46718, 42.63296], [1.48043, 42.65203], [1.50867, 42.64483], [1.55418, 42.65669], [1.60085, 42.62703], [1.63485, 42.62957], [1.6625, 42.61982], [1.68267, 42.62533], [1.73452, 42.61515], [1.72588, 42.59098], [1.7858, 42.57698], [1.73683, 42.55492], [1.72515, 42.50338], [1.76335, 42.48863], [1.83037, 42.48395], [1.88853, 42.4501], [1.93663, 42.45439], [1.94292, 42.44316], [1.94061, 42.43333], [1.94084, 42.43039], [1.9574, 42.42401], [1.96482, 42.37787], [2.00488, 42.35399], [2.06241, 42.35906], [2.11621, 42.38393], [2.12789, 42.41291], [2.16599, 42.42314], [2.20578, 42.41633], [2.25551, 42.43757], [2.38504, 42.39977], [2.43299, 42.39423], [2.43508, 42.37568], [2.48457, 42.33933], [2.54382, 42.33406], [2.55516, 42.35351], [2.57934, 42.35808], [2.6747, 42.33974], [2.65311, 42.38771], [2.72056, 42.42298], [2.75497, 42.42578], [2.77464, 42.41046], [2.84335, 42.45724], [2.85675, 42.45444], [2.86983, 42.46843], [2.88413, 42.45938], [2.92107, 42.4573], [2.94283, 42.48174], [2.96518, 42.46692], [3.03734, 42.47363], [3.08167, 42.42748], [3.10027, 42.42621], [3.11379, 42.43646], [3.17156, 42.43545], [3.75438, 42.33445], [7.60802, 41.05927], [10.09675, 41.44089], [9.56115, 43.20816], [7.50102, 43.51859], [7.42422, 43.72209], [7.40903, 43.7296], [7.41113, 43.73156], [7.41291, 43.73168], [7.41298, 43.73311], [7.41233, 43.73439], [7.42062, 43.73977], [7.42299, 43.74176], [7.42443, 43.74087], [7.42809, 43.74396], [7.43013, 43.74895], [7.43624, 43.75014], [7.43708, 43.75197], [7.4389, 43.75151], [7.4379, 43.74963], [7.47823, 43.73341], [7.53006, 43.78405], [7.50423, 43.84345], [7.49355, 43.86551], [7.51162, 43.88301], [7.56075, 43.89932], [7.56858, 43.94506], [7.60771, 43.95772], [7.65266, 43.9763], [7.66848, 43.99943], [7.6597, 44.03009], [7.72508, 44.07578], [7.66878, 44.12795], [7.68694, 44.17487], [7.63245, 44.17877], [7.62155, 44.14881], [7.36364, 44.11882], [7.34547, 44.14359], [7.27827, 44.1462], [7.16929, 44.20352], [7.00764, 44.23736], [6.98221, 44.28289], [6.89171, 44.36637], [6.88784, 44.42043], [6.94504, 44.43112], [6.86233, 44.49834], [6.85507, 44.53072], [6.96042, 44.62129], [6.95133, 44.66264], [7.00582, 44.69364], [7.07484, 44.68073], [7.00401, 44.78782], [7.02217, 44.82519], [6.93499, 44.8664], [6.90774, 44.84322], [6.75518, 44.89915], [6.74519, 44.93661], [6.74791, 45.01939], [6.66981, 45.02324], [6.62803, 45.11175], [6.7697, 45.16044], [6.85144, 45.13226], [6.96706, 45.20841], [7.07074, 45.21228], [7.13115, 45.25386], [7.10572, 45.32924], [7.18019, 45.40071], [7.00037, 45.509], [6.98948, 45.63869], [6.80785, 45.71864], [6.80785, 45.83265], [6.95315, 45.85163], [7.04151, 45.92435], [7.00946, 45.9944], [6.93862, 46.06502], [6.87868, 46.03855], [6.89321, 46.12548], [6.78968, 46.14058], [6.86052, 46.28512], [6.77152, 46.34784], [6.8024, 46.39171], [6.82312, 46.42661], [6.53358, 46.45431], [6.25432, 46.3632], [6.21981, 46.31304], [6.24826, 46.30175], [6.25137, 46.29014], [6.23775, 46.27822], [6.24952, 46.26255], [6.26749, 46.24745], [6.29474, 46.26221], [6.31041, 46.24417], [6.29663, 46.22688], [6.27694, 46.21566], [6.26007, 46.21165], [6.24821, 46.20531], [6.23913, 46.20511], [6.23544, 46.20714], [6.22175, 46.20045], [6.22222, 46.19888], [6.21844, 46.19837], [6.21603, 46.19507], [6.21273, 46.19409], [6.21114, 46.1927], [6.20539, 46.19163], [6.19807, 46.18369], [6.19552, 46.18401], [6.18707, 46.17999], [6.18871, 46.16644], [6.18116, 46.16187], [6.15305, 46.15194], [6.13397, 46.1406], [6.09926, 46.14373], [6.09199, 46.15191], [6.07491, 46.14879], [6.05203, 46.15191], [6.04564, 46.14031], [6.03614, 46.13712], [6.01791, 46.14228], [5.9871, 46.14499], [5.97893, 46.13303], [5.95781, 46.12925], [5.9641, 46.14412], [5.97508, 46.15863], [5.98188, 46.17392], [5.98846, 46.17046], [5.99573, 46.18587], [5.96515, 46.19638], [5.97542, 46.21525], [6.02461, 46.23313], [6.03342, 46.2383], [6.04602, 46.23127], [6.05029, 46.23518], [6.0633, 46.24583], [6.07072, 46.24085], [6.08563, 46.24651], [6.10071, 46.23772], [6.12446, 46.25059], [6.11926, 46.2634], [6.1013, 46.28512], [6.11697, 46.29547], [6.1198, 46.31157], [6.13876, 46.33844], [6.15738, 46.3491], [6.16987, 46.36759], [6.15985, 46.37721], [6.15016, 46.3778], [6.09926, 46.40768], [6.06407, 46.41676], [6.08427, 46.44305], [6.07269, 46.46244], [6.1567, 46.54402], [6.11084, 46.57649], [6.27135, 46.68251], [6.38351, 46.73171], [6.45209, 46.77502], [6.43216, 46.80336], [6.46456, 46.88865], [6.43341, 46.92703], [6.71531, 47.0494], [6.68823, 47.06616], [6.76788, 47.1208], [6.8489, 47.15933], [6.9508, 47.24338], [6.95108, 47.26428], [6.94316, 47.28747], [7.05305, 47.33304], [7.0564, 47.35134], [7.03125, 47.36996], [6.87959, 47.35335], [6.88542, 47.37262], [6.93744, 47.40714], [6.93953, 47.43388], [7.0024, 47.45264], [6.98425, 47.49432], [7.0231, 47.50522], [7.07425, 47.48863], [7.12781, 47.50371], [7.16249, 47.49025], [7.19583, 47.49455], [7.17026, 47.44312], [7.24669, 47.4205], [7.33526, 47.44186], [7.35603, 47.43432], [7.40308, 47.43638], [7.43088, 47.45846], [7.4462, 47.46264], [7.4583, 47.47216], [7.42923, 47.48628], [7.43356, 47.49712], [7.47534, 47.47932], [7.51076, 47.49651], [7.49804, 47.51798], [7.5229, 47.51644], [7.53199, 47.5284], [7.51904, 47.53515], [7.50588, 47.52856], [7.49691, 47.53821], [7.50873, 47.54546], [7.51723, 47.54578], [7.52831, 47.55347], [7.53634, 47.55553], [7.55652, 47.56779], [7.55689, 47.57232], [7.56548, 47.57617], [7.56684, 47.57785], [7.58386, 47.57536], [7.58945, 47.59017], [7.59301, 47.60058], [7.58851, 47.60794], [7.57423, 47.61628], [7.5591, 47.63849], [7.53384, 47.65115], [7.52067, 47.66437], [7.51915, 47.68335], [7.51266, 47.70197], [7.53722, 47.71635], [7.54761, 47.72912], [7.52921, 47.77747], [7.55673, 47.87371], [7.62302, 47.97898], [7.56966, 48.03265], [7.57137, 48.12292], [7.6648, 48.22219], [7.69022, 48.30018], [7.74562, 48.32736], [7.73109, 48.39192], [7.76833, 48.48945], [7.80647, 48.51239], [7.80167, 48.54758], [7.80057, 48.5857], [7.84098, 48.64217], [7.89002, 48.66317], [7.96812, 48.72491], [7.96994, 48.75606], [8.01534, 48.76085], [8.0326, 48.79017], [8.06802, 48.78957], [8.10253, 48.81829], [8.12813, 48.87985], [8.19989, 48.95825], [8.20031, 48.95856], [8.22604, 48.97352], [8.14189, 48.97833], [7.97783, 49.03161], [7.93641, 49.05544], [7.86386, 49.03499], [7.79557, 49.06583], [7.75948, 49.04562], [7.63618, 49.05428], [7.62575, 49.07654], [7.56416, 49.08136], [7.53012, 49.09818], [7.49172, 49.13915], [7.49473, 49.17], [7.44455, 49.16765], [7.44052, 49.18354], [7.3662, 49.17308], [7.35995, 49.14399], [7.3195, 49.14231], [7.29514, 49.11426], [7.23473, 49.12971], [7.1593, 49.1204], [7.1358, 49.1282], [7.12504, 49.14253], [7.10384, 49.13787], [7.10715, 49.15631], [7.07859, 49.15031], [7.09007, 49.13094], [7.07162, 49.1255], [7.06642, 49.11415], [7.05548, 49.11185], [7.04843, 49.11422], [7.04409, 49.12123], [7.04662, 49.13724], [7.03178, 49.15734], [7.0274, 49.17042], [7.03459, 49.19096], [7.01318, 49.19018], [6.97273, 49.2099], [6.95963, 49.203], [6.94028, 49.21641], [6.93831, 49.2223], [6.91875, 49.22261], [6.89298, 49.20863], [6.85939, 49.22376], [6.83555, 49.21249], [6.85119, 49.20038], [6.85016, 49.19354], [6.86225, 49.18185], [6.84703, 49.15734], [6.83385, 49.15162], [6.78265, 49.16793], [6.73765, 49.16375], [6.71137, 49.18808], [6.73256, 49.20486], [6.71843, 49.2208], [6.69274, 49.21661], [6.66583, 49.28065], [6.60186, 49.31055], [6.572, 49.35027], [6.58807, 49.35358], [6.60091, 49.36864], [6.533, 49.40748], [6.55404, 49.42464], [6.42432, 49.47683], [6.40274, 49.46546], [6.39168, 49.4667], [6.38352, 49.46463], [6.36778, 49.46937], [6.3687, 49.4593], [6.28818, 49.48465], [6.27875, 49.503], [6.25029, 49.50609], [6.2409, 49.51408], [6.19543, 49.50536], [6.17386, 49.50934], [6.15366, 49.50226], [6.16115, 49.49297], [6.14321, 49.48796], [6.12814, 49.49365], [6.12346, 49.4735], [6.10325, 49.4707], [6.09845, 49.46351], [6.10072, 49.45268], [6.08373, 49.45594], [6.07887, 49.46399], [6.05553, 49.46663], [6.04176, 49.44801], [6.02743, 49.44845], [6.02648, 49.45451], [5.97693, 49.45513], [5.96876, 49.49053], [5.94224, 49.49608], [5.94128, 49.50034], [5.86571, 49.50015], [5.83389, 49.52152], [5.83467, 49.52717], [5.84466, 49.53027], [5.83648, 49.5425], [5.81664, 49.53775], [5.80871, 49.5425], [5.81838, 49.54777], [5.79195, 49.55228], [5.77435, 49.56298], [5.7577, 49.55915], [5.75649, 49.54321], [5.64505, 49.55146], [5.60909, 49.51228], [5.55001, 49.52729], [5.46541, 49.49825], [5.46734, 49.52648], [5.43713, 49.5707], [5.3974, 49.61596], [5.34837, 49.62889], [5.33851, 49.61599], [5.3137, 49.61225], [5.30214, 49.63055], [5.33039, 49.6555], [5.31465, 49.66846], [5.26232, 49.69456], [5.14545, 49.70287], [5.09249, 49.76193], [4.96714, 49.79872], [4.85464, 49.78995], [4.86965, 49.82271], [4.85134, 49.86457], [4.88529, 49.9236], [4.78827, 49.95609], [4.8382, 50.06738], [4.88602, 50.15182], [4.83279, 50.15331], [4.82438, 50.16878], [4.75237, 50.11314], [4.70064, 50.09384], [4.68695, 49.99685], [4.5414, 49.96911], [4.51098, 49.94659], [4.43488, 49.94122], [4.35051, 49.95315], [4.31963, 49.97043], [4.20532, 49.95803], [4.14239, 49.98034], [4.13508, 50.01976], [4.16294, 50.04719], [4.23101, 50.06945], [4.20147, 50.13535], [4.13561, 50.13078], [4.16014, 50.19239], [4.15524, 50.21103], [4.21945, 50.25539], [4.20651, 50.27333], [4.17861, 50.27443], [4.17347, 50.28838], [4.15524, 50.2833], [4.16808, 50.25786], [4.13665, 50.25609], [4.11954, 50.30425], [4.10957, 50.30234], [4.10237, 50.31247], [4.0689, 50.3254], [4.0268, 50.35793], [3.96771, 50.34989], [3.90781, 50.32814], [3.84314, 50.35219], [3.73911, 50.34809], [3.70987, 50.3191], [3.71009, 50.30305], [3.66976, 50.34563], [3.65709, 50.36873], [3.67262, 50.38663], [3.67494, 50.40239], [3.66153, 50.45165], [3.64426, 50.46275], [3.61014, 50.49568], [3.58361, 50.49049], [3.5683, 50.50192], [3.49509, 50.48885], [3.51564, 50.5256], [3.47385, 50.53397], [3.44629, 50.51009], [3.37693, 50.49538], [3.28575, 50.52724], [3.2729, 50.60718], [3.23951, 50.6585], [3.264, 50.67668], [3.2536, 50.68977], [3.26141, 50.69151], [3.26063, 50.70086], [3.24593, 50.71389], [3.22042, 50.71019], [3.20845, 50.71662], [3.19017, 50.72569], [3.20064, 50.73547], [3.18811, 50.74025], [3.18339, 50.74981], [3.16476, 50.76843], [3.15017, 50.79031], [3.1257, 50.78603], [3.11987, 50.79188], [3.11206, 50.79416], [3.10614, 50.78303], [3.09163, 50.77717], [3.04314, 50.77674], [3.00537, 50.76588], [2.96778, 50.75242], [2.95019, 50.75138], [2.90873, 50.702], [2.91036, 50.6939], [2.90069, 50.69263], [2.88504, 50.70656], [2.87937, 50.70298], [2.86985, 50.7033], [2.8483, 50.72276], [2.81056, 50.71773], [2.71165, 50.81295], [2.63331, 50.81457], [2.59093, 50.91751], [2.63074, 50.94746], [2.57551, 51.00326], [2.55904, 51.07014]], [[1.99838, 42.44682], [1.98378, 42.44697], [1.96125, 42.45364], [1.95606, 42.45785], [1.96215, 42.47854], [1.97003, 42.48081], [1.97227, 42.48487], [1.97697, 42.48568], [1.98022, 42.49569], [1.98916, 42.49351], [1.99766, 42.4858], [1.98579, 42.47486], [1.99216, 42.46208], [2.01564, 42.45171], [1.99838, 42.44682]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GA",
      iso1A3: "GAB",
      iso1N3: "266",
      wikidata: "Q1000",
      nameEn: "Gabon",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["241"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[13.29457, 2.16106], [13.28534, 2.25716], [11.37116, 2.29975], [11.3561, 2.17217], [11.35307, 1.00251], [9.79648, 1.0019], [9.75065, 1.06753], [9.66433, 1.06723], [7.24416, -0.64092], [10.75913, -4.39519], [11.12647, -3.94169], [11.22301, -3.69888], [11.48764, -3.51089], [11.57949, -3.52798], [11.68608, -3.68942], [11.87083, -3.71571], [11.92719, -3.62768], [11.8318, -3.5812], [11.96554, -3.30267], [11.70227, -3.17465], [11.70558, -3.0773], [11.80365, -3.00424], [11.64798, -2.81146], [11.5359, -2.85654], [11.64487, -2.61865], [11.57637, -2.33379], [11.74605, -2.39936], [11.96866, -2.33559], [12.04895, -2.41704], [12.47925, -2.32626], [12.44656, -1.92025], [12.61312, -1.8129], [12.82172, -1.91091], [13.02759, -2.33098], [13.47977, -2.43224], [13.75884, -2.09293], [13.92073, -2.35581], [13.85846, -2.46935], [14.10442, -2.49268], [14.23829, -2.33715], [14.16202, -2.23916], [14.23518, -2.15671], [14.25932, -1.97624], [14.41838, -1.89412], [14.52569, -0.57818], [14.41887, -0.44799], [14.2165, -0.38261], [14.06862, -0.20826], [13.90632, -0.2287], [13.88648, 0.26652], [14.10909, 0.58563], [14.26066, 0.57255], [14.48179, 0.9152], [14.25186, 1.39842], [13.89582, 1.4261], [13.15519, 1.23368], [13.25447, 1.32339], [13.13461, 1.57238], [13.29457, 2.16106]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GB",
      iso1A3: "GBR",
      iso1N3: "826",
      wikidata: "Q145",
      ccTLD: ".uk",
      nameEn: "United Kingdom",
      aliases: ["UK"]
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GD",
      iso1A3: "GRD",
      iso1N3: "308",
      wikidata: "Q769",
      nameEn: "Grenada",
      aliases: ["WG"],
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 473"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-62.64026, 12.69984], [-61.77886, 11.36496], [-59.94058, 12.34011], [-62.64026, 12.69984]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GE",
      iso1A3: "GEO",
      iso1N3: "268",
      wikidata: "Q230",
      nameEn: "Georgia",
      groups: ["145", "142", "UN"],
      callingCodes: ["995"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[46.42738, 41.91323], [45.61676, 42.20768], [45.78692, 42.48358], [45.36501, 42.55268], [45.15318, 42.70598], [44.88754, 42.74934], [44.80941, 42.61277], [44.70002, 42.74679], [44.54202, 42.75699], [43.95517, 42.55396], [43.73119, 42.62043], [43.81453, 42.74297], [43.0419, 43.02413], [43.03322, 43.08883], [42.75889, 43.19651], [42.66667, 43.13917], [42.40563, 43.23226], [41.64935, 43.22331], [40.65957, 43.56212], [40.10657, 43.57344], [40.04445, 43.47776], [40.03312, 43.44262], [40.01007, 43.42411], [40.01552, 43.42025], [40.00853, 43.40578], [40.0078, 43.38551], [39.81147, 43.06294], [40.89217, 41.72528], [41.54366, 41.52185], [41.7148, 41.4932], [41.7124, 41.47417], [41.81939, 41.43621], [41.95134, 41.52466], [42.26387, 41.49346], [42.51772, 41.43606], [42.59202, 41.58183], [42.72794, 41.59714], [42.84471, 41.58912], [42.78995, 41.50126], [42.84899, 41.47265], [42.8785, 41.50516], [43.02956, 41.37891], [43.21707, 41.30331], [43.13373, 41.25503], [43.1945, 41.25242], [43.23096, 41.17536], [43.36118, 41.2028], [43.44973, 41.17666], [43.4717, 41.12611], [43.67712, 41.13398], [43.74717, 41.1117], [43.84835, 41.16329], [44.16591, 41.19141], [44.18148, 41.24644], [44.32139, 41.2079], [44.34337, 41.20312], [44.34417, 41.2382], [44.46791, 41.18204], [44.59322, 41.1933], [44.61462, 41.24018], [44.72814, 41.20338], [44.82084, 41.21513], [44.87887, 41.20195], [44.89911, 41.21366], [44.84358, 41.23088], [44.81749, 41.23488], [44.80053, 41.25949], [44.81437, 41.30371], [44.93493, 41.25685], [45.0133, 41.29747], [45.09867, 41.34065], [45.1797, 41.42231], [45.26285, 41.46433], [45.31352, 41.47168], [45.4006, 41.42402], [45.45973, 41.45898], [45.68389, 41.3539], [45.71035, 41.36208], [45.75705, 41.35157], [45.69946, 41.29545], [45.80842, 41.2229], [45.95786, 41.17956], [46.13221, 41.19479], [46.27698, 41.19011], [46.37661, 41.10805], [46.456, 41.09984], [46.48558, 41.0576], [46.55096, 41.1104], [46.63969, 41.09515], [46.66148, 41.20533], [46.72375, 41.28609], [46.63658, 41.37727], [46.4669, 41.43331], [46.40307, 41.48464], [46.33925, 41.4963], [46.29794, 41.5724], [46.34126, 41.57454], [46.34039, 41.5947], [46.3253, 41.60912], [46.28182, 41.60089], [46.26531, 41.63339], [46.24429, 41.59883], [46.19759, 41.62327], [46.17891, 41.72094], [46.20538, 41.77205], [46.23962, 41.75811], [46.30863, 41.79133], [46.3984, 41.84399], [46.42738, 41.91323]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GF",
      iso1A3: "GUF",
      iso1N3: "254",
      wikidata: "Q3769",
      nameEn: "French Guiana",
      country: "FR",
      groups: ["Q3320166", "EU", "005", "419", "019", "UN"],
      callingCodes: ["594"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-51.35485, 4.8383], [-53.7094, 6.2264], [-54.01074, 5.68785], [-54.01877, 5.52789], [-54.26916, 5.26909], [-54.4717, 4.91964], [-54.38444, 4.13222], [-54.19367, 3.84387], [-54.05128, 3.63557], [-53.98914, 3.627], [-53.9849, 3.58697], [-54.28534, 2.67798], [-54.42864, 2.42442], [-54.6084, 2.32856], [-54.16286, 2.10779], [-53.78743, 2.34412], [-52.96539, 2.1881], [-52.6906, 2.37298], [-52.31787, 3.17896], [-51.85573, 3.83427], [-51.82312, 3.85825], [-51.79599, 3.89336], [-51.61983, 4.14596], [-51.63798, 4.51394], [-51.35485, 4.8383]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GG",
      iso1A3: "GGY",
      iso1N3: "831",
      wikidata: "Q25230",
      nameEn: "Bailiwick of Guernsey",
      country: "GB"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GH",
      iso1A3: "GHA",
      iso1N3: "288",
      wikidata: "Q117",
      nameEn: "Ghana",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["233"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-0.13493, 11.14075], [-0.27374, 11.17157], [-0.28566, 11.12713], [-0.35955, 11.07801], [-0.38219, 11.12596], [-0.42391, 11.11661], [-0.44298, 11.04292], [-0.61937, 10.91305], [-0.67143, 10.99811], [-2.83373, 11.0067], [-2.94232, 10.64281], [-2.83108, 10.40252], [-2.74174, 9.83172], [-2.76534, 9.56589], [-2.68802, 9.49343], [-2.69814, 9.22717], [-2.77799, 9.04949], [-2.66357, 9.01771], [-2.58243, 8.7789], [-2.49037, 8.20872], [-2.62901, 8.11495], [-2.61232, 8.02645], [-2.67787, 8.02055], [-2.74819, 7.92613], [-2.78395, 7.94974], [-2.79467, 7.86002], [-2.92339, 7.60847], [-2.97822, 7.27165], [-2.95438, 7.23737], [-3.23327, 6.81744], [-3.21954, 6.74407], [-3.25999, 6.62521], [-3.01896, 5.71697], [-2.95323, 5.71865], [-2.96671, 5.6415], [-2.93132, 5.62137], [-2.85378, 5.65156], [-2.76614, 5.60963], [-2.72737, 5.34789], [-2.77625, 5.34621], [-2.73074, 5.1364], [-2.75502, 5.10657], [-2.95261, 5.12477], [-2.96554, 5.10397], [-3.063, 5.13665], [-3.11073, 5.12675], [-3.10675, 5.08515], [-3.34019, 4.17519], [1.07031, 5.15655], [1.27574, 5.93551], [1.19771, 6.11522], [1.19966, 6.17069], [1.09187, 6.17074], [1.05969, 6.22998], [1.03108, 6.24064], [0.99652, 6.33779], [0.89283, 6.33779], [0.71048, 6.53083], [0.74862, 6.56517], [0.63659, 6.63857], [0.6497, 6.73682], [0.58176, 6.76049], [0.57406, 6.80348], [0.52853, 6.82921], [0.56508, 6.92971], [0.52098, 6.94391], [0.52217, 6.9723], [0.59606, 7.01252], [0.65327, 7.31643], [0.62943, 7.41099], [0.57223, 7.39326], [0.52455, 7.45354], [0.51979, 7.58706], [0.58295, 7.62368], [0.62943, 7.85751], [0.58891, 8.12779], [0.6056, 8.13959], [0.61156, 8.18324], [0.5913, 8.19622], [0.63897, 8.25873], [0.73432, 8.29529], [0.64731, 8.48866], [0.47211, 8.59945], [0.37319, 8.75262], [0.52455, 8.87746], [0.45424, 9.04581], [0.56388, 9.40697], [0.49118, 9.48339], [0.36485, 9.49749], [0.33148, 9.44812], [0.25758, 9.42696], [0.2254, 9.47869], [0.31241, 9.50337], [0.30406, 9.521], [0.2409, 9.52335], [0.23851, 9.57389], [0.38153, 9.58682], [0.36008, 9.6256], [0.29334, 9.59387], [0.26712, 9.66437], [0.28261, 9.69022], [0.32313, 9.6491], [0.34816, 9.66907], [0.34816, 9.71607], [0.32075, 9.72781], [0.36366, 10.03309], [0.41252, 10.02018], [0.41371, 10.06361], [0.35293, 10.09412], [0.39584, 10.31112], [0.33028, 10.30408], [0.29453, 10.41546], [0.18846, 10.4096], [0.12886, 10.53149], [-0.05945, 10.63458], [-0.09141, 10.7147], [-0.07327, 10.71845], [-0.07183, 10.76794], [-0.0228, 10.81916], [-0.02685, 10.8783], [-908e-5, 10.91644], [-63e-4, 10.96417], [0.03355, 10.9807], [0.02395, 11.06229], [342e-5, 11.08317], [-514e-5, 11.10763], [-0.0275, 11.11202], [-0.05733, 11.08628], [-0.14462, 11.10811], [-0.13493, 11.14075]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GI",
      iso1A3: "GIB",
      iso1N3: "292",
      wikidata: "Q1410",
      nameEn: "Gibraltar",
      country: "GB",
      groups: ["Q12837", "BOTS", "039", "150", "UN"],
      callingCodes: ["350"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-5.34064, 36.03744], [-5.27801, 36.14942], [-5.33822, 36.15272], [-5.34536, 36.15501], [-5.40526, 36.15488], [-5.34064, 36.03744]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GL",
      iso1A3: "GRL",
      iso1N3: "304",
      wikidata: "Q223",
      nameEn: "Greenland",
      country: "DK",
      groups: ["Q1451600", "021", "003", "019", "UN"],
      callingCodes: ["299"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-49.33696, 84.57952], [-68.21821, 80.48551], [-77.52957, 77.23408], [-46.37635, 57.3249], [-9.68082, 72.73731], [-5.7106, 84.28058], [-49.33696, 84.57952]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GM",
      iso1A3: "GMB",
      iso1N3: "270",
      wikidata: "Q1005",
      nameEn: "The Gambia",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["220"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-15.14917, 13.57989], [-14.36795, 13.23033], [-13.79409, 13.34472], [-13.8955, 13.59126], [-14.34721, 13.46578], [-14.93719, 13.80173], [-15.36504, 13.79313], [-15.47902, 13.58758], [-17.43598, 13.59273], [-17.43966, 13.04579], [-16.74676, 13.06025], [-16.69343, 13.16791], [-15.80355, 13.16729], [-15.80478, 13.34832], [-15.26908, 13.37768], [-15.14917, 13.57989]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GN",
      iso1A3: "GIN",
      iso1N3: "324",
      wikidata: "Q1006",
      nameEn: "Guinea",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["224"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-11.37536, 12.40788], [-11.46267, 12.44559], [-11.91331, 12.42008], [-12.35415, 12.32758], [-12.87336, 12.51892], [-13.06603, 12.49342], [-13.05296, 12.64003], [-13.70523, 12.68013], [-13.7039, 12.60313], [-13.65089, 12.49515], [-13.64168, 12.42764], [-13.70851, 12.24978], [-13.92745, 12.24077], [-13.94589, 12.16869], [-13.7039, 12.00869], [-13.7039, 11.70195], [-14.09799, 11.63649], [-14.26623, 11.67486], [-14.31513, 11.60713], [-14.51173, 11.49708], [-14.66677, 11.51188], [-14.77786, 11.36323], [-14.95993, 10.99244], [-15.07174, 10.89557], [-15.96748, 10.162], [-14.36218, 8.64107], [-13.29911, 9.04245], [-13.18586, 9.0925], [-13.08953, 9.0409], [-12.94095, 9.26335], [-12.76788, 9.3133], [-12.47254, 9.86834], [-12.24262, 9.92386], [-12.12634, 9.87203], [-11.91023, 9.93927], [-11.89624, 9.99763], [-11.2118, 10.00098], [-10.6534, 9.29919], [-10.74484, 9.07998], [-10.5783, 9.06386], [-10.56197, 8.81225], [-10.47707, 8.67669], [-10.61422, 8.5314], [-10.70565, 8.29235], [-10.63934, 8.35326], [-10.54891, 8.31174], [-10.37257, 8.48941], [-10.27575, 8.48711], [-10.203, 8.47991], [-10.14579, 8.52665], [-10.05375, 8.50697], [-10.05873, 8.42578], [-9.77763, 8.54633], [-9.47415, 8.35195], [-9.50898, 8.18455], [-9.41445, 8.02448], [-9.44928, 7.9284], [-9.35724, 7.74111], [-9.37465, 7.62032], [-9.48161, 7.37122], [-9.41943, 7.41809], [-9.305, 7.42056], [-9.20798, 7.38109], [-9.18311, 7.30461], [-9.09107, 7.1985], [-8.93435, 7.2824], [-8.85724, 7.26019], [-8.8448, 7.35149], [-8.72789, 7.51429], [-8.67814, 7.69428], [-8.55874, 7.70167], [-8.55874, 7.62525], [-8.47114, 7.55676], [-8.4003, 7.6285], [-8.21374, 7.54466], [-8.09931, 7.78626], [-8.13414, 7.87991], [-8.06449, 8.04989], [-7.94695, 8.00925], [-7.99919, 8.11023], [-7.98675, 8.20134], [-8.062, 8.16071], [-8.2411, 8.24196], [-8.22991, 8.48438], [-7.92518, 8.50652], [-7.65653, 8.36873], [-7.69882, 8.66148], [-7.95503, 8.81146], [-7.92518, 8.99332], [-7.73862, 9.08422], [-7.90777, 9.20456], [-7.85056, 9.41812], [-8.03463, 9.39604], [-8.14657, 9.55062], [-8.09434, 9.86936], [-8.15652, 9.94288], [-8.11921, 10.04577], [-8.01225, 10.1021], [-7.97971, 10.17117], [-7.9578, 10.2703], [-8.10207, 10.44649], [-8.22711, 10.41722], [-8.32614, 10.69273], [-8.2667, 10.91762], [-8.35083, 11.06234], [-8.66923, 10.99397], [-8.40058, 11.37466], [-8.80854, 11.66715], [-8.94784, 12.34842], [-9.13689, 12.50875], [-9.38067, 12.48446], [-9.32097, 12.29009], [-9.63938, 12.18312], [-9.714, 12.0226], [-10.30604, 12.24634], [-10.71897, 11.91552], [-10.80355, 12.1053], [-10.99758, 12.24634], [-11.24136, 12.01286], [-11.50006, 12.17826], [-11.37536, 12.40788]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GP",
      iso1A3: "GLP",
      iso1N3: "312",
      wikidata: "Q17012",
      nameEn: "Guadeloupe",
      country: "FR",
      groups: ["Q3320166", "EU", "029", "003", "419", "019", "UN"],
      callingCodes: ["590"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-60.03183, 16.1129], [-61.60296, 16.73066], [-63.00549, 15.26166], [-60.03183, 16.1129]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GQ",
      iso1A3: "GNQ",
      iso1N3: "226",
      wikidata: "Q983",
      nameEn: "Equatorial Guinea",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["240"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[9.22018, 3.72052], [8.34397, 4.30689], [7.71762, 0.6674], [3.35016, -3.29031], [9.66433, 1.06723], [9.75065, 1.06753], [9.79648, 1.0019], [11.35307, 1.00251], [11.3561, 2.17217], [9.991, 2.16561], [9.90749, 2.20049], [9.89012, 2.20457], [9.84716, 2.24676], [9.83238, 2.29079], [9.83754, 2.32428], [9.82123, 2.35097], [9.81162, 2.33797], [9.22018, 3.72052]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GR",
      iso1A3: "GRC",
      iso1N3: "300",
      wikidata: "Q41",
      nameEn: "Greece",
      aliases: ["EL"],
      groups: ["EU", "039", "150", "UN"],
      callingCodes: ["30"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[26.03489, 40.73051], [26.0754, 40.72772], [26.08638, 40.73214], [26.12495, 40.74283], [26.12854, 40.77339], [26.15685, 40.80709], [26.21351, 40.83298], [26.20856, 40.86048], [26.26169, 40.9168], [26.29441, 40.89119], [26.28623, 40.93005], [26.32259, 40.94042], [26.35894, 40.94292], [26.33297, 40.98388], [26.3606, 41.02027], [26.31928, 41.07386], [26.32259, 41.24929], [26.39861, 41.25053], [26.5209, 41.33993], [26.5837, 41.32131], [26.62997, 41.34613], [26.61767, 41.42281], [26.59742, 41.48058], [26.59196, 41.60491], [26.5209, 41.62592], [26.47958, 41.67037], [26.35957, 41.71149], [26.30255, 41.70925], [26.2654, 41.71544], [26.22888, 41.74139], [26.21325, 41.73223], [26.16841, 41.74858], [26.06148, 41.70345], [26.07083, 41.64584], [26.15146, 41.60828], [26.14328, 41.55496], [26.17951, 41.55409], [26.176, 41.50072], [26.14796, 41.47533], [26.20288, 41.43943], [26.16548, 41.42278], [26.12926, 41.35878], [25.87919, 41.30526], [25.8266, 41.34563], [25.70507, 41.29209], [25.66183, 41.31316], [25.61042, 41.30614], [25.55082, 41.31667], [25.52394, 41.2798], [25.48187, 41.28506], [25.28322, 41.23411], [25.11611, 41.34212], [24.942, 41.38685], [24.90928, 41.40876], [24.86136, 41.39298], [24.82514, 41.4035], [24.8041, 41.34913], [24.71529, 41.41928], [24.61129, 41.42278], [24.52599, 41.56808], [24.30513, 41.51297], [24.27124, 41.57682], [24.18126, 41.51735], [24.10063, 41.54796], [24.06323, 41.53222], [24.06908, 41.46132], [23.96975, 41.44118], [23.91483, 41.47971], [23.89613, 41.45257], [23.80148, 41.43943], [23.76525, 41.40175], [23.67644, 41.41139], [23.63203, 41.37632], [23.52453, 41.40262], [23.40416, 41.39999], [23.33639, 41.36317], [23.31301, 41.40525], [23.22771, 41.37106], [23.21953, 41.33773], [23.1833, 41.31755], [22.93334, 41.34104], [22.81199, 41.3398], [22.76408, 41.32225], [22.74538, 41.16321], [22.71266, 41.13945], [22.65306, 41.18168], [22.62852, 41.14385], [22.58295, 41.11568], [22.5549, 41.13065], [22.42285, 41.11921], [22.26744, 41.16409], [22.17629, 41.15969], [22.1424, 41.12449], [22.06527, 41.15617], [21.90869, 41.09191], [21.91102, 41.04786], [21.7556, 40.92525], [21.69601, 40.9429], [21.57448, 40.86076], [21.53007, 40.90759], [21.41555, 40.9173], [21.35595, 40.87578], [21.25779, 40.86165], [21.21105, 40.8855], [21.15262, 40.85546], [20.97887, 40.85475], [20.98396, 40.79109], [20.95752, 40.76982], [20.98134, 40.76046], [21.05833, 40.66586], [21.03932, 40.56299], [20.96908, 40.51526], [20.94925, 40.46625], [20.83688, 40.47882], [20.7906, 40.42726], [20.78234, 40.35803], [20.71789, 40.27739], [20.67162, 40.09433], [20.62566, 40.0897], [20.61081, 40.07866], [20.55593, 40.06524], [20.51297, 40.08168], [20.48487, 40.06271], [20.42373, 40.06777], [20.37911, 39.99058], [20.31135, 39.99438], [20.41546, 39.82832], [20.41475, 39.81437], [20.38572, 39.78516], [20.30804, 39.81563], [20.29152, 39.80421], [20.31961, 39.72799], [20.27412, 39.69884], [20.22707, 39.67459], [20.22376, 39.64532], [20.15988, 39.652], [20.12956, 39.65805], [20.05189, 39.69112], [20.00957, 39.69227], [19.98042, 39.6504], [19.92466, 39.69533], [19.97622, 39.78684], [19.95905, 39.82857], [19.0384, 40.35325], [19.20409, 39.7532], [22.5213, 33.45682], [29.73302, 35.92555], [29.69611, 36.10365], [29.61805, 36.14179], [29.61002, 36.1731], [29.48192, 36.18377], [29.30783, 36.01033], [28.23708, 36.56812], [27.95037, 36.46155], [27.89482, 36.69898], [27.46117, 36.53789], [27.24613, 36.71622], [27.45627, 36.9008], [27.20312, 36.94571], [27.14757, 37.32], [26.95583, 37.64989], [26.99377, 37.69034], [27.16428, 37.72343], [27.05537, 37.9131], [26.21136, 38.17558], [26.24183, 38.44695], [26.32173, 38.48731], [26.21136, 38.65436], [26.61814, 38.81372], [26.70773, 39.0312], [26.43357, 39.43096], [25.94257, 39.39358], [25.61285, 40.17161], [26.04292, 40.3958], [25.94795, 40.72797], [26.03489, 40.73051]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GS",
      iso1A3: "SGS",
      iso1N3: "239",
      wikidata: "Q35086",
      nameEn: "South Georgia and South Sandwich Islands",
      country: "GB",
      groups: ["BOTS", "005", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["500"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-35.26394, -43.68272], [-53.39656, -59.87088], [-22.31757, -59.85974], [-35.26394, -43.68272]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GT",
      iso1A3: "GTM",
      iso1N3: "320",
      wikidata: "Q774",
      nameEn: "Guatemala",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["502"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-89.14985, 17.81563], [-90.98678, 17.81655], [-90.99199, 17.25192], [-91.43809, 17.25373], [-91.04436, 16.92175], [-90.69064, 16.70697], [-90.61212, 16.49832], [-90.40499, 16.40524], [-90.44567, 16.07573], [-91.73182, 16.07371], [-92.20983, 15.26077], [-92.0621, 15.07406], [-92.1454, 14.98143], [-92.1423, 14.88647], [-92.18161, 14.84147], [-92.1454, 14.6804], [-92.2261, 14.53423], [-92.37213, 14.39277], [-90.55276, 12.8866], [-90.11344, 13.73679], [-90.10505, 13.85104], [-89.88937, 14.0396], [-89.81807, 14.07073], [-89.76103, 14.02923], [-89.73251, 14.04133], [-89.75569, 14.07073], [-89.70756, 14.1537], [-89.61844, 14.21937], [-89.52397, 14.22628], [-89.50614, 14.26084], [-89.58814, 14.33165], [-89.57441, 14.41637], [-89.39028, 14.44561], [-89.34776, 14.43013], [-89.35189, 14.47553], [-89.23719, 14.58046], [-89.15653, 14.57802], [-89.13132, 14.71582], [-89.23467, 14.85596], [-89.15149, 14.97775], [-89.18048, 14.99967], [-89.15149, 15.07392], [-88.97343, 15.14039], [-88.32467, 15.63665], [-88.31459, 15.66942], [-88.24022, 15.69247], [-88.22552, 15.72294], [-88.20359, 16.03858], [-88.40779, 16.09624], [-88.95358, 15.88698], [-89.02415, 15.9063], [-89.17418, 15.90898], [-89.22683, 15.88619], [-89.15025, 17.04813], [-89.14985, 17.81563]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GU",
      iso1A3: "GUM",
      iso1N3: "316",
      wikidata: "Q16635",
      nameEn: "Guam",
      aliases: ["US-GU"],
      country: "US",
      groups: ["Q1352230", "Q153732", "057", "009", "UN"],
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 671"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[146.25931, 13.85876], [143.82485, 13.92273], [144.61642, 12.82462], [146.25931, 13.85876]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GW",
      iso1A3: "GNB",
      iso1N3: "624",
      wikidata: "Q1007",
      nameEn: "Guinea-Bissau",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["245"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-14.31513, 11.60713], [-14.26623, 11.67486], [-14.09799, 11.63649], [-13.7039, 11.70195], [-13.7039, 12.00869], [-13.94589, 12.16869], [-13.92745, 12.24077], [-13.70851, 12.24978], [-13.64168, 12.42764], [-13.65089, 12.49515], [-13.7039, 12.60313], [-13.70523, 12.68013], [-15.17582, 12.6847], [-15.67302, 12.42974], [-16.20591, 12.46157], [-16.38191, 12.36449], [-16.70562, 12.34803], [-17.4623, 11.92379], [-15.96748, 10.162], [-15.07174, 10.89557], [-14.95993, 10.99244], [-14.77786, 11.36323], [-14.66677, 11.51188], [-14.51173, 11.49708], [-14.31513, 11.60713]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "GY",
      iso1A3: "GUY",
      iso1N3: "328",
      wikidata: "Q734",
      nameEn: "Guyana",
      groups: ["005", "419", "019", "UN"],
      driveSide: "left",
      callingCodes: ["592"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-56.84822, 6.73257], [-59.54058, 8.6862], [-59.98508, 8.53046], [-59.85562, 8.35213], [-59.80661, 8.28906], [-59.83156, 8.23261], [-59.97059, 8.20791], [-60.02407, 8.04557], [-60.38056, 7.8302], [-60.51959, 7.83373], [-60.64793, 7.56877], [-60.71923, 7.55817], [-60.59802, 7.33194], [-60.63367, 7.25061], [-60.54098, 7.14804], [-60.44116, 7.20817], [-60.28074, 7.1162], [-60.39419, 6.94847], [-60.54873, 6.8631], [-61.13632, 6.70922], [-61.20762, 6.58174], [-61.15058, 6.19558], [-61.4041, 5.95304], [-60.73204, 5.20931], [-60.32352, 5.21299], [-60.20944, 5.28754], [-59.98129, 5.07097], [-60.04189, 4.69801], [-60.15953, 4.53456], [-59.78878, 4.45637], [-59.69361, 4.34069], [-59.73353, 4.20399], [-59.51963, 3.91951], [-59.86899, 3.57089], [-59.79769, 3.37162], [-59.99733, 2.92312], [-59.91177, 2.36759], [-59.7264, 2.27497], [-59.74066, 1.87596], [-59.25583, 1.40559], [-58.92072, 1.31293], [-58.84229, 1.17749], [-58.53571, 1.29154], [-58.4858, 1.48399], [-58.33887, 1.58014], [-58.01873, 1.51966], [-57.97336, 1.64566], [-57.77281, 1.73344], [-57.55743, 1.69605], [-57.35073, 1.98327], [-57.23981, 1.95808], [-57.09109, 2.01854], [-57.07092, 1.95304], [-56.7659, 1.89509], [-56.47045, 1.95135], [-56.55439, 2.02003], [-56.70519, 2.02964], [-57.35891, 3.32121], [-58.0307, 3.95513], [-57.8699, 4.89394], [-57.37442, 5.0208], [-57.22536, 5.15605], [-57.31629, 5.33714], [-56.84822, 6.73257]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "HK",
      iso1A3: "HKG",
      iso1N3: "344",
      wikidata: "Q8646",
      nameEn: "Hong Kong",
      country: "CN",
      groups: ["030", "142", "UN"],
      driveSide: "left",
      callingCodes: ["852"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[113.92195, 22.13873], [114.50148, 22.15017], [114.44998, 22.55977], [114.25154, 22.55977], [114.22888, 22.5436], [114.22185, 22.55343], [114.20655, 22.55706], [114.18338, 22.55444], [114.17247, 22.55944], [114.1597, 22.56041], [114.15123, 22.55163], [114.1482, 22.54091], [114.13823, 22.54319], [114.12665, 22.54003], [114.11656, 22.53415], [114.11181, 22.52878], [114.1034, 22.5352], [114.09692, 22.53435], [114.09048, 22.53716], [114.08606, 22.53276], [114.07817, 22.52997], [114.07267, 22.51855], [114.06272, 22.51617], [114.05729, 22.51104], [114.05438, 22.5026], [114.03113, 22.5065], [113.86771, 22.42972], [113.81621, 22.2163], [113.83338, 22.1826], [113.92195, 22.13873]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "HM",
      iso1A3: "HMD",
      iso1N3: "334",
      wikidata: "Q131198",
      nameEn: "Heard Island and McDonald Islands",
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left"
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[71.08716, -53.87687], [75.44182, -53.99822], [72.87012, -51.48322], [71.08716, -53.87687]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "HN",
      iso1A3: "HND",
      iso1N3: "340",
      wikidata: "Q783",
      nameEn: "Honduras",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["504"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-83.86109, 17.73736], [-88.20359, 16.03858], [-88.22552, 15.72294], [-88.24022, 15.69247], [-88.31459, 15.66942], [-88.32467, 15.63665], [-88.97343, 15.14039], [-89.15149, 15.07392], [-89.18048, 14.99967], [-89.15149, 14.97775], [-89.23467, 14.85596], [-89.13132, 14.71582], [-89.15653, 14.57802], [-89.23719, 14.58046], [-89.35189, 14.47553], [-89.34776, 14.43013], [-89.04187, 14.33644], [-88.94608, 14.20207], [-88.85785, 14.17763], [-88.815, 14.11652], [-88.73182, 14.10919], [-88.70661, 14.04317], [-88.49738, 13.97224], [-88.48982, 13.86458], [-88.25791, 13.91108], [-88.23018, 13.99915], [-88.07641, 13.98447], [-88.00331, 13.86948], [-87.7966, 13.91353], [-87.68821, 13.80829], [-87.73106, 13.75443], [-87.78148, 13.52906], [-87.71657, 13.50577], [-87.72115, 13.46083], [-87.73841, 13.44169], [-87.77354, 13.45767], [-87.83467, 13.44655], [-87.84675, 13.41078], [-87.80177, 13.35689], [-87.73714, 13.32715], [-87.69751, 13.25228], [-87.55124, 13.12523], [-87.37107, 12.98646], [-87.06306, 13.00892], [-87.03785, 12.98682], [-86.93197, 13.05313], [-86.93383, 13.18677], [-86.87066, 13.30641], [-86.71267, 13.30348], [-86.76812, 13.79605], [-86.35219, 13.77157], [-86.14801, 14.04317], [-86.00685, 14.08474], [-86.03458, 13.99181], [-85.75477, 13.8499], [-85.73964, 13.9698], [-85.45762, 14.11304], [-85.32149, 14.2562], [-85.18602, 14.24929], [-85.1575, 14.53934], [-84.90082, 14.80489], [-84.82596, 14.82212], [-84.70119, 14.68078], [-84.48373, 14.63249], [-84.10584, 14.76353], [-83.89551, 14.76697], [-83.62101, 14.89448], [-83.49268, 15.01158], [-83.13724, 15.00002], [-83.04763, 15.03256], [-82.06974, 14.49418], [-81.58685, 18.0025], [-83.86109, 17.73736]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "HR",
      iso1A3: "HRV",
      iso1N3: "191",
      wikidata: "Q224",
      nameEn: "Croatia",
      groups: ["EU", "039", "150", "UN"],
      callingCodes: ["385"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[17.6444, 42.88641], [17.5392, 42.92787], [17.70879, 42.97223], [17.64268, 43.08595], [17.46986, 43.16559], [17.286, 43.33065], [17.25579, 43.40353], [17.29699, 43.44542], [17.24411, 43.49376], [17.15828, 43.49376], [17.00585, 43.58037], [16.80736, 43.76011], [16.75316, 43.77157], [16.70922, 43.84887], [16.55472, 43.95326], [16.50528, 44.0244], [16.43629, 44.02826], [16.43662, 44.07523], [16.36864, 44.08263], [16.18688, 44.27012], [16.21346, 44.35231], [16.12969, 44.38275], [16.16814, 44.40679], [16.10566, 44.52586], [16.03012, 44.55572], [16.00884, 44.58605], [16.05828, 44.61538], [15.89348, 44.74964], [15.8255, 44.71501], [15.72584, 44.82334], [15.79472, 44.8455], [15.76096, 44.87045], [15.74723, 44.96818], [15.78568, 44.97401], [15.74585, 45.0638], [15.78842, 45.11519], [15.76371, 45.16508], [15.83512, 45.22459], [15.98412, 45.23088], [16.12153, 45.09616], [16.29036, 44.99732], [16.35404, 45.00241], [16.35863, 45.03529], [16.3749, 45.05206], [16.38219, 45.05139], [16.38309, 45.05955], [16.40023, 45.1147], [16.4634, 45.14522], [16.49155, 45.21153], [16.52982, 45.22713], [16.5501, 45.2212], [16.56559, 45.22307], [16.60194, 45.23042], [16.64962, 45.20714], [16.74845, 45.20393], [16.78219, 45.19002], [16.81137, 45.18434], [16.83804, 45.18951], [16.92405, 45.27607], [16.9385, 45.22742], [17.0415, 45.20759], [17.18438, 45.14764], [17.24325, 45.146], [17.25131, 45.14957], [17.26815, 45.18444], [17.32092, 45.16246], [17.33573, 45.14521], [17.41229, 45.13335], [17.4498, 45.16119], [17.45615, 45.12523], [17.47589, 45.12656], [17.51469, 45.10791], [17.59104, 45.10816], [17.66571, 45.13408], [17.84826, 45.04489], [17.87148, 45.04645], [17.93706, 45.08016], [17.97336, 45.12245], [17.97834, 45.13831], [17.99479, 45.14958], [18.01594, 45.15163], [18.03121, 45.12632], [18.1624, 45.07654], [18.24387, 45.13699], [18.32077, 45.1021], [18.41896, 45.11083], [18.47939, 45.05871], [18.65723, 45.07544], [18.78357, 44.97741], [18.80661, 44.93561], [18.76369, 44.93707], [18.76347, 44.90669], [18.8704, 44.85097], [19.01994, 44.85493], [18.98957, 44.90645], [19.02871, 44.92541], [19.06853, 44.89915], [19.15573, 44.95409], [19.05205, 44.97692], [19.1011, 45.01191], [19.07952, 45.14668], [19.14063, 45.12972], [19.19144, 45.17863], [19.43589, 45.17137], [19.41941, 45.23475], [19.28208, 45.23813], [19.10774, 45.29547], [18.97446, 45.37528], [18.99918, 45.49333], [19.08364, 45.48804], [19.07471, 45.53086], [18.94562, 45.53712], [18.88776, 45.57253], [18.96691, 45.66731], [18.90305, 45.71863], [18.85783, 45.85493], [18.81394, 45.91329], [18.80211, 45.87995], [18.6792, 45.92057], [18.57483, 45.80772], [18.44368, 45.73972], [18.12439, 45.78905], [18.08869, 45.76511], [17.99805, 45.79671], [17.87377, 45.78522], [17.66545, 45.84207], [17.56821, 45.93728], [17.35672, 45.95209], [17.14592, 46.16697], [16.8903, 46.28122], [16.8541, 46.36255], [16.7154, 46.39523], [16.6639, 46.45203], [16.59527, 46.47524], [16.52604, 46.47831], [16.5007, 46.49644], [16.44036, 46.5171], [16.38771, 46.53608], [16.37193, 46.55008], [16.29793, 46.5121], [16.26733, 46.51505], [16.26759, 46.50566], [16.23961, 46.49653], [16.25124, 46.48067], [16.27398, 46.42875], [16.27329, 46.41467], [16.30162, 46.40437], [16.30233, 46.37837], [16.18824, 46.38282], [16.14859, 46.40547], [16.05281, 46.39141], [16.05065, 46.3833], [16.07314, 46.36458], [16.07616, 46.3463], [15.97965, 46.30652], [15.79284, 46.25811], [15.78817, 46.21719], [15.75479, 46.20336], [15.75436, 46.21969], [15.67395, 46.22478], [15.6434, 46.21396], [15.64904, 46.19229], [15.59909, 46.14761], [15.6083, 46.11992], [15.62317, 46.09103], [15.72977, 46.04682], [15.71246, 46.01196], [15.70327, 46.00015], [15.70636, 45.92116], [15.67967, 45.90455], [15.68383, 45.88867], [15.68232, 45.86819], [15.70411, 45.8465], [15.66662, 45.84085], [15.64185, 45.82915], [15.57952, 45.84953], [15.52234, 45.82195], [15.47325, 45.8253], [15.47531, 45.79802], [15.40836, 45.79491], [15.25423, 45.72275], [15.30872, 45.69014], [15.34919, 45.71623], [15.4057, 45.64727], [15.38952, 45.63682], [15.34214, 45.64702], [15.34695, 45.63382], [15.31027, 45.6303], [15.27747, 45.60504], [15.29837, 45.5841], [15.30249, 45.53224], [15.38188, 45.48752], [15.33051, 45.45258], [15.27758, 45.46678], [15.16862, 45.42309], [15.05187, 45.49079], [15.02385, 45.48533], [14.92266, 45.52788], [14.90554, 45.47769], [14.81992, 45.45913], [14.80124, 45.49515], [14.71718, 45.53442], [14.68605, 45.53006], [14.69694, 45.57366], [14.59576, 45.62812], [14.60977, 45.66403], [14.57397, 45.67165], [14.53816, 45.6205], [14.5008, 45.60852], [14.49769, 45.54424], [14.36693, 45.48642], [14.32487, 45.47142], [14.27681, 45.4902], [14.26611, 45.48239], [14.24239, 45.50607], [14.22371, 45.50388], [14.20348, 45.46896], [14.07116, 45.48752], [14.00578, 45.52352], [13.96063, 45.50825], [13.99488, 45.47551], [13.97309, 45.45258], [13.90771, 45.45149], [13.88124, 45.42637], [13.81742, 45.43729], [13.7785, 45.46787], [13.67398, 45.4436], [13.62902, 45.45898], [13.56979, 45.4895], [13.45644, 45.59464], [13.05142, 45.33128], [13.12821, 44.48877], [16.15283, 42.18525], [18.45131, 42.21682], [18.54128, 42.39171], [18.52152, 42.42302], [18.43588, 42.48556], [18.44307, 42.51077], [18.43735, 42.55921], [18.36197, 42.61423], [18.24318, 42.6112], [17.88201, 42.83668], [17.80854, 42.9182], [17.7948, 42.89556], [17.68151, 42.92725], [17.6444, 42.88641]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "HT",
      iso1A3: "HTI",
      iso1N3: "332",
      wikidata: "Q790",
      nameEn: "Haiti",
      aliases: ["RH"],
      groups: ["029", "003", "419", "019", "UN"],
      callingCodes: ["509"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-71.71885, 18.78423], [-71.72624, 18.87802], [-71.77766, 18.95007], [-71.88102, 18.95007], [-71.74088, 19.0437], [-71.71088, 19.08353], [-71.69938, 19.10916], [-71.65337, 19.11759], [-71.62642, 19.21212], [-71.73229, 19.26686], [-71.77766, 19.33823], [-71.69448, 19.37866], [-71.6802, 19.45008], [-71.71268, 19.53374], [-71.71449, 19.55364], [-71.7429, 19.58445], [-71.75865, 19.70231], [-71.77419, 19.73128], [-72.38946, 20.27111], [-73.37289, 20.43199], [-74.7289, 18.71009], [-74.76465, 18.06252], [-72.29523, 17.48026], [-71.75671, 18.03456], [-71.73783, 18.07177], [-71.74994, 18.11115], [-71.75465, 18.14405], [-71.78271, 18.18302], [-71.69952, 18.34101], [-71.90875, 18.45821], [-71.88102, 18.50125], [-72.00201, 18.62312], [-71.95412, 18.64939], [-71.82556, 18.62551], [-71.71885, 18.78423]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "HU",
      iso1A3: "HUN",
      iso1N3: "348",
      wikidata: "Q28",
      nameEn: "Hungary",
      groups: ["EU", "151", "150", "UN"],
      callingCodes: ["36"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[21.72525, 48.34628], [21.67134, 48.3989], [21.6068, 48.50365], [21.44063, 48.58456], [21.11516, 48.49546], [20.83248, 48.5824], [20.5215, 48.53336], [20.29943, 48.26104], [20.24312, 48.2784], [19.92452, 48.1283], [19.63338, 48.25006], [19.52489, 48.19791], [19.47957, 48.09437], [19.28182, 48.08336], [19.23924, 48.0595], [19.01952, 48.07052], [18.82176, 48.04206], [18.76134, 47.97499], [18.76821, 47.87469], [18.8506, 47.82308], [18.74074, 47.8157], [18.66521, 47.76772], [18.56496, 47.76588], [18.29305, 47.73541], [18.02938, 47.75665], [17.71215, 47.7548], [17.23699, 48.02094], [17.16001, 48.00636], [17.09786, 47.97336], [17.11022, 47.92461], [17.08275, 47.87719], [17.00997, 47.86245], [17.07039, 47.81129], [17.05048, 47.79377], [17.08893, 47.70928], [16.87538, 47.68895], [16.86509, 47.72268], [16.82938, 47.68432], [16.7511, 47.67878], [16.72089, 47.73469], [16.65679, 47.74197], [16.61183, 47.76171], [16.54779, 47.75074], [16.53514, 47.73837], [16.55129, 47.72268], [16.4222, 47.66537], [16.58699, 47.61772], [16.64193, 47.63114], [16.71059, 47.52692], [16.64821, 47.50155], [16.6718, 47.46139], [16.57152, 47.40868], [16.52414, 47.41007], [16.49908, 47.39416], [16.45104, 47.41181], [16.47782, 47.25918], [16.44142, 47.25079], [16.43663, 47.21127], [16.41739, 47.20649], [16.42801, 47.18422], [16.4523, 47.18812], [16.46442, 47.16845], [16.44932, 47.14418], [16.52863, 47.13974], [16.46134, 47.09395], [16.52176, 47.05747], [16.43936, 47.03548], [16.51369, 47.00084], [16.28202, 47.00159], [16.27594, 46.9643], [16.22403, 46.939], [16.19904, 46.94134], [16.10983, 46.867], [16.14365, 46.8547], [16.15711, 46.85434], [16.21892, 46.86961], [16.2365, 46.87775], [16.2941, 46.87137], [16.34547, 46.83836], [16.3408, 46.80641], [16.31303, 46.79838], [16.30966, 46.7787], [16.37816, 46.69975], [16.42641, 46.69228], [16.41863, 46.66238], [16.38594, 46.6549], [16.39217, 46.63673], [16.50139, 46.56684], [16.52885, 46.53303], [16.52604, 46.5051], [16.59527, 46.47524], [16.6639, 46.45203], [16.7154, 46.39523], [16.8541, 46.36255], [16.8903, 46.28122], [17.14592, 46.16697], [17.35672, 45.95209], [17.56821, 45.93728], [17.66545, 45.84207], [17.87377, 45.78522], [17.99805, 45.79671], [18.08869, 45.76511], [18.12439, 45.78905], [18.44368, 45.73972], [18.57483, 45.80772], [18.6792, 45.92057], [18.80211, 45.87995], [18.81394, 45.91329], [18.99712, 45.93537], [19.01284, 45.96529], [19.0791, 45.96458], [19.10388, 46.04015], [19.14543, 45.9998], [19.28826, 45.99694], [19.52473, 46.1171], [19.56113, 46.16824], [19.66007, 46.19005], [19.81491, 46.1313], [19.93508, 46.17553], [20.01816, 46.17696], [20.03533, 46.14509], [20.09713, 46.17315], [20.26068, 46.12332], [20.28324, 46.1438], [20.35573, 46.16629], [20.45377, 46.14405], [20.49718, 46.18721], [20.63863, 46.12728], [20.76085, 46.21002], [20.74574, 46.25467], [20.86797, 46.28884], [21.06572, 46.24897], [21.16872, 46.30118], [21.28061, 46.44941], [21.26929, 46.4993], [21.33214, 46.63035], [21.43926, 46.65109], [21.5151, 46.72147], [21.48935, 46.7577], [21.52028, 46.84118], [21.59307, 46.86935], [21.59581, 46.91628], [21.68645, 46.99595], [21.648, 47.03902], [21.78395, 47.11104], [21.94463, 47.38046], [22.01055, 47.37767], [22.03389, 47.42508], [22.00917, 47.50492], [22.31816, 47.76126], [22.41979, 47.7391], [22.46559, 47.76583], [22.67247, 47.7871], [22.76617, 47.8417], [22.77991, 47.87211], [22.89849, 47.95851], [22.84276, 47.98602], [22.87847, 48.04665], [22.81804, 48.11363], [22.73427, 48.12005], [22.66835, 48.09162], [22.58733, 48.10813], [22.59007, 48.15121], [22.49806, 48.25189], [22.38133, 48.23726], [22.2083, 48.42534], [22.14689, 48.4005], [21.83339, 48.36242], [21.8279, 48.33321], [21.72525, 48.34628]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IC",
      wikidata: "Q5813",
      nameEn: "Canary Islands",
      country: "ES",
      groups: ["Q3320166", "Q105472", "EU", "039", "150", "UN"],
      isoStatus: "excRes",
      callingCodes: ["34"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-12.00985, 30.24121], [-25.3475, 27.87574], [-14.43883, 27.02969], [-12.00985, 30.24121]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ID",
      iso1A3: "IDN",
      iso1N3: "360",
      wikidata: "Q252",
      nameEn: "Indonesia",
      aliases: ["RI"]
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IE",
      iso1A3: "IRL",
      iso1N3: "372",
      wikidata: "Q27",
      nameEn: "Republic of Ireland",
      groups: ["EU", "Q22890", "154", "150", "UN"],
      driveSide: "left",
      callingCodes: ["353"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-6.26218, 54.09785], [-6.29003, 54.11278], [-6.32694, 54.09337], [-6.36279, 54.11248], [-6.36605, 54.07234], [-6.47849, 54.06947], [-6.62842, 54.03503], [-6.66264, 54.0666], [-6.6382, 54.17071], [-6.70175, 54.20218], [-6.74575, 54.18788], [-6.81583, 54.22791], [-6.85179, 54.29176], [-6.87775, 54.34682], [-7.02034, 54.4212], [-7.19145, 54.31296], [-7.14908, 54.22732], [-7.25012, 54.20063], [-7.26316, 54.13863], [-7.29493, 54.12013], [-7.29687, 54.1354], [-7.28017, 54.16714], [-7.29157, 54.17191], [-7.34005, 54.14698], [-7.30553, 54.11869], [-7.32834, 54.11475], [-7.44567, 54.1539], [-7.4799, 54.12239], [-7.55812, 54.12239], [-7.69501, 54.20731], [-7.81397, 54.20159], [-7.8596, 54.21779], [-7.87101, 54.29299], [-8.04555, 54.36292], [-8.179, 54.46763], [-8.04538, 54.48941], [-7.99812, 54.54427], [-7.8596, 54.53671], [-7.70315, 54.62077], [-7.93293, 54.66603], [-7.83352, 54.73854], [-7.75041, 54.7103], [-7.64449, 54.75265], [-7.54671, 54.74606], [-7.54508, 54.79401], [-7.47626, 54.83084], [-7.4473, 54.87003], [-7.44404, 54.9403], [-7.40004, 54.94498], [-7.4033, 55.00391], [-7.34464, 55.04688], [-7.2471, 55.06933], [-6.34755, 55.49206], [-7.75229, 55.93854], [-22.01468, 48.19557], [-6.03913, 51.13217], [-5.37267, 53.63269], [-6.26218, 54.09785]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IL",
      iso1A3: "ISR",
      iso1N3: "376",
      wikidata: "Q801",
      nameEn: "Israel",
      groups: ["145", "142", "UN"],
      callingCodes: ["972"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[34.052, 31.46619], [34.29262, 31.70393], [34.48681, 31.59711], [34.56797, 31.54197], [34.48892, 31.48365], [34.40077, 31.40926], [34.36505, 31.36404], [34.37381, 31.30598], [34.36523, 31.28963], [34.29417, 31.24194], [34.26742, 31.21998], [34.92298, 29.45305], [34.97718, 29.54294], [34.98207, 29.58147], [35.02147, 29.66343], [35.14108, 30.07374], [35.19183, 30.34636], [35.16218, 30.43535], [35.19595, 30.50297], [35.21379, 30.60401], [35.29311, 30.71365], [35.33456, 30.81224], [35.33984, 30.8802], [35.41371, 30.95565], [35.43658, 31.12444], [35.40316, 31.25535], [35.47672, 31.49578], [35.39675, 31.49572], [35.22921, 31.37445], [35.13033, 31.3551], [35.02459, 31.35979], [34.92571, 31.34337], [34.88932, 31.37093], [34.87833, 31.39321], [34.89756, 31.43891], [34.93258, 31.47816], [34.94356, 31.50743], [34.9415, 31.55601], [34.95249, 31.59813], [35.00879, 31.65426], [35.08226, 31.69107], [35.10782, 31.71594], [35.11895, 31.71454], [35.12933, 31.7325], [35.13931, 31.73012], [35.15119, 31.73634], [35.15474, 31.73352], [35.16478, 31.73242], [35.18023, 31.72067], [35.20538, 31.72388], [35.21937, 31.71578], [35.22392, 31.71899], [35.23972, 31.70896], [35.24315, 31.71244], [35.2438, 31.7201], [35.24981, 31.72543], [35.25182, 31.73945], [35.26319, 31.74846], [35.25225, 31.7678], [35.26058, 31.79064], [35.25573, 31.81362], [35.26404, 31.82567], [35.251, 31.83085], [35.25753, 31.8387], [35.24816, 31.8458], [35.2304, 31.84222], [35.2249, 31.85433], [35.22817, 31.8638], [35.22567, 31.86745], [35.22294, 31.87889], [35.22014, 31.88264], [35.2136, 31.88241], [35.21276, 31.88153], [35.21016, 31.88237], [35.20945, 31.8815], [35.20791, 31.8821], [35.20673, 31.88151], [35.20381, 31.86716], [35.21128, 31.863], [35.216, 31.83894], [35.21469, 31.81835], [35.19461, 31.82687], [35.18169, 31.82542], [35.18603, 31.80901], [35.14174, 31.81325], [35.07677, 31.85627], [35.05617, 31.85685], [35.01978, 31.82944], [34.9724, 31.83352], [34.99712, 31.85569], [35.03489, 31.85919], [35.03978, 31.89276], [35.03489, 31.92448], [35.00124, 31.93264], [34.98682, 31.96935], [35.00261, 32.027], [34.9863, 32.09551], [34.99437, 32.10962], [34.98507, 32.12606], [34.99039, 32.14626], [34.96009, 32.17503], [34.95703, 32.19522], [34.98885, 32.20758], [35.01841, 32.23981], [35.02939, 32.2671], [35.01119, 32.28684], [35.01772, 32.33863], [35.04243, 32.35008], [35.05142, 32.3667], [35.0421, 32.38242], [35.05311, 32.4024], [35.05423, 32.41754], [35.07059, 32.4585], [35.08564, 32.46948], [35.09236, 32.47614], [35.10024, 32.47856], [35.10882, 32.4757], [35.15937, 32.50466], [35.2244, 32.55289], [35.25049, 32.52453], [35.29306, 32.50947], [35.30685, 32.51024], [35.35212, 32.52047], [35.40224, 32.50136], [35.42034, 32.46009], [35.41598, 32.45593], [35.41048, 32.43706], [35.42078, 32.41562], [35.55807, 32.38674], [35.55494, 32.42687], [35.57485, 32.48669], [35.56614, 32.64393], [35.59813, 32.65159], [35.61669, 32.67999], [35.66527, 32.681], [35.68467, 32.70715], [35.75983, 32.74803], [35.78745, 32.77938], [35.83758, 32.82817], [35.84021, 32.8725], [35.87012, 32.91976], [35.89298, 32.9456], [35.87188, 32.98028], [35.84802, 33.1031], [35.81911, 33.11077], [35.81911, 33.1336], [35.84285, 33.16673], [35.83846, 33.19397], [35.81647, 33.2028], [35.81295, 33.24841], [35.77513, 33.27342], [35.813, 33.3172], [35.77477, 33.33609], [35.62019, 33.27278], [35.62283, 33.24226], [35.58502, 33.26653], [35.58326, 33.28381], [35.56523, 33.28969], [35.55555, 33.25844], [35.54544, 33.25513], [35.54808, 33.236], [35.5362, 33.23196], [35.54228, 33.19865], [35.52573, 33.11921], [35.50335, 33.114], [35.50272, 33.09056], [35.448, 33.09264], [35.43059, 33.06659], [35.35223, 33.05617], [35.31429, 33.10515], [35.1924, 33.08743], [35.10645, 33.09318], [34.78515, 33.20368], [33.62659, 31.82938], [34.052, 31.46619]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IM",
      iso1A3: "IMN",
      iso1N3: "833",
      wikidata: "Q9676",
      nameEn: "Isle of Man",
      country: "GB",
      groups: ["Q185086", "154", "150", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44 01624", "44 07624", "44 07524", "44 07924"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-3.98763, 54.07351], [-4.1819, 54.57861], [-5.6384, 53.81157], [-3.98763, 54.07351]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IN",
      iso1A3: "IND",
      iso1N3: "356",
      wikidata: "Q668",
      nameEn: "India"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IO",
      iso1A3: "IOT",
      iso1N3: "086",
      wikidata: "Q43448",
      nameEn: "British Indian Ocean Territory",
      country: "GB"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IQ",
      iso1A3: "IRQ",
      iso1N3: "368",
      wikidata: "Q796",
      nameEn: "Iraq",
      groups: ["145", "142", "UN"],
      callingCodes: ["964"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[42.78887, 37.38615], [42.56725, 37.14878], [42.35724, 37.10998], [42.36697, 37.0627], [41.81736, 36.58782], [41.40058, 36.52502], [41.28864, 36.35368], [41.2564, 36.06012], [41.37027, 35.84095], [41.38184, 35.62502], [41.26569, 35.42708], [41.21654, 35.1508], [41.2345, 34.80049], [41.12388, 34.65742], [40.97676, 34.39788], [40.64314, 34.31604], [38.79171, 33.37328], [39.08202, 32.50304], [38.98762, 32.47694], [39.04251, 32.30203], [39.26157, 32.35555], [39.29903, 32.23259], [40.01521, 32.05667], [42.97601, 30.72204], [42.97796, 30.48295], [44.72255, 29.19736], [46.42415, 29.05947], [46.5527, 29.10283], [46.89695, 29.50584], [47.15166, 30.01044], [47.37192, 30.10421], [47.7095, 30.10453], [48.01114, 29.98906], [48.06782, 30.02906], [48.17332, 30.02448], [48.40479, 29.85763], [48.59531, 29.66815], [48.83867, 29.78572], [48.61441, 29.93675], [48.51011, 29.96238], [48.44785, 30.00148], [48.4494, 30.04456], [48.43384, 30.08233], [48.38869, 30.11062], [48.38714, 30.13485], [48.41671, 30.17254], [48.41117, 30.19846], [48.26393, 30.3408], [48.24385, 30.33846], [48.21279, 30.31644], [48.19425, 30.32796], [48.18321, 30.39703], [48.14585, 30.44133], [48.02443, 30.4789], [48.03221, 30.9967], [47.68219, 31.00004], [47.6804, 31.39086], [47.86337, 31.78422], [47.64771, 32.07666], [47.52474, 32.15972], [47.57144, 32.20583], [47.37529, 32.47808], [47.17218, 32.45393], [46.46788, 32.91992], [46.32298, 32.9731], [46.17198, 32.95612], [46.09103, 32.98354], [46.15175, 33.07229], [46.03966, 33.09577], [46.05367, 33.13097], [46.11905, 33.11924], [46.20623, 33.20395], [45.99919, 33.5082], [45.86687, 33.49263], [45.96183, 33.55751], [45.89801, 33.63661], [45.77814, 33.60938], [45.50261, 33.94968], [45.42789, 33.9458], [45.41077, 33.97421], [45.47264, 34.03099], [45.56176, 34.15088], [45.58667, 34.30147], [45.53552, 34.35148], [45.49171, 34.3439], [45.46697, 34.38221], [45.43879, 34.45949], [45.51883, 34.47692], [45.53219, 34.60441], [45.59074, 34.55558], [45.60224, 34.55057], [45.73923, 34.54416], [45.70031, 34.69277], [45.65672, 34.7222], [45.68284, 34.76624], [45.70031, 34.82322], [45.73641, 34.83975], [45.79682, 34.85133], [45.78904, 34.91135], [45.86532, 34.89858], [45.89477, 34.95805], [45.87864, 35.03441], [45.92173, 35.0465], [45.92203, 35.09538], [45.93108, 35.08148], [45.94756, 35.09188], [46.06508, 35.03699], [46.07747, 35.0838], [46.11763, 35.07551], [46.19116, 35.11097], [46.15642, 35.1268], [46.16229, 35.16984], [46.19738, 35.18536], [46.18457, 35.22561], [46.11367, 35.23729], [46.15474, 35.2883], [46.13152, 35.32548], [46.05358, 35.38568], [45.98453, 35.49848], [46.01518, 35.52012], [45.97584, 35.58132], [46.03028, 35.57416], [46.01307, 35.59756], [46.0165, 35.61501], [45.99452, 35.63574], [46.0117, 35.65059], [46.01631, 35.69139], [46.23736, 35.71414], [46.34166, 35.78363], [46.32921, 35.82655], [46.17198, 35.8013], [46.08325, 35.8581], [45.94711, 35.82218], [45.89784, 35.83708], [45.81442, 35.82107], [45.76145, 35.79898], [45.6645, 35.92872], [45.60018, 35.96069], [45.55245, 35.99943], [45.46594, 36.00042], [45.38275, 35.97156], [45.33916, 35.99424], [45.37652, 36.06222], [45.37312, 36.09917], [45.32235, 36.17383], [45.30038, 36.27769], [45.26261, 36.3001], [45.27394, 36.35846], [45.23953, 36.43257], [45.11811, 36.40751], [45.00759, 36.5402], [45.06985, 36.62645], [45.06985, 36.6814], [45.01537, 36.75128], [44.84725, 36.77622], [44.83479, 36.81362], [44.90173, 36.86096], [44.91199, 36.91468], [44.89862, 37.01897], [44.81611, 37.04383], [44.75229, 37.11958], [44.78319, 37.1431], [44.76698, 37.16162], [44.63179, 37.19229], [44.42631, 37.05825], [44.38117, 37.05825], [44.35315, 37.04955], [44.35937, 37.02843], [44.30645, 36.97373], [44.25975, 36.98119], [44.18503, 37.09551], [44.22239, 37.15756], [44.27998, 37.16501], [44.2613, 37.25055], [44.13521, 37.32486], [44.02002, 37.33229], [43.90949, 37.22453], [43.84878, 37.22205], [43.82699, 37.19477], [43.8052, 37.22825], [43.7009, 37.23692], [43.63085, 37.21957], [43.56702, 37.25675], [43.50787, 37.24436], [43.33508, 37.33105], [43.30083, 37.30629], [43.11403, 37.37436], [42.93705, 37.32015], [42.78887, 37.38615]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IR",
      iso1A3: "IRN",
      iso1N3: "364",
      wikidata: "Q794",
      nameEn: "Iran",
      groups: ["034", "142", "UN"],
      callingCodes: ["98"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[44.96746, 39.42998], [44.88916, 39.59653], [44.81043, 39.62677], [44.71806, 39.71124], [44.65422, 39.72163], [44.6137, 39.78393], [44.47298, 39.68788], [44.48111, 39.61579], [44.41849, 39.56659], [44.42832, 39.4131], [44.37921, 39.4131], [44.29818, 39.378], [44.22452, 39.4169], [44.03667, 39.39223], [44.1043, 39.19842], [44.20946, 39.13975], [44.18863, 38.93881], [44.30322, 38.81581], [44.26155, 38.71427], [44.28065, 38.6465], [44.32058, 38.62752], [44.3207, 38.49799], [44.3119, 38.37887], [44.38309, 38.36117], [44.44386, 38.38295], [44.50115, 38.33939], [44.42476, 38.25763], [44.22509, 37.88859], [44.3883, 37.85433], [44.45948, 37.77065], [44.55498, 37.783], [44.62096, 37.71985], [44.56887, 37.6429], [44.61401, 37.60165], [44.58449, 37.45018], [44.81021, 37.2915], [44.75986, 37.21549], [44.7868, 37.16644], [44.78319, 37.1431], [44.75229, 37.11958], [44.81611, 37.04383], [44.89862, 37.01897], [44.91199, 36.91468], [44.90173, 36.86096], [44.83479, 36.81362], [44.84725, 36.77622], [45.01537, 36.75128], [45.06985, 36.6814], [45.06985, 36.62645], [45.00759, 36.5402], [45.11811, 36.40751], [45.23953, 36.43257], [45.27394, 36.35846], [45.26261, 36.3001], [45.30038, 36.27769], [45.32235, 36.17383], [45.37312, 36.09917], [45.37652, 36.06222], [45.33916, 35.99424], [45.38275, 35.97156], [45.46594, 36.00042], [45.55245, 35.99943], [45.60018, 35.96069], [45.6645, 35.92872], [45.76145, 35.79898], [45.81442, 35.82107], [45.89784, 35.83708], [45.94711, 35.82218], [46.08325, 35.8581], [46.17198, 35.8013], [46.32921, 35.82655], [46.34166, 35.78363], [46.23736, 35.71414], [46.01631, 35.69139], [46.0117, 35.65059], [45.99452, 35.63574], [46.0165, 35.61501], [46.01307, 35.59756], [46.03028, 35.57416], [45.97584, 35.58132], [46.01518, 35.52012], [45.98453, 35.49848], [46.05358, 35.38568], [46.13152, 35.32548], [46.15474, 35.2883], [46.11367, 35.23729], [46.18457, 35.22561], [46.19738, 35.18536], [46.16229, 35.16984], [46.15642, 35.1268], [46.19116, 35.11097], [46.11763, 35.07551], [46.07747, 35.0838], [46.06508, 35.03699], [45.94756, 35.09188], [45.93108, 35.08148], [45.92203, 35.09538], [45.92173, 35.0465], [45.87864, 35.03441], [45.89477, 34.95805], [45.86532, 34.89858], [45.78904, 34.91135], [45.79682, 34.85133], [45.73641, 34.83975], [45.70031, 34.82322], [45.68284, 34.76624], [45.65672, 34.7222], [45.70031, 34.69277], [45.73923, 34.54416], [45.60224, 34.55057], [45.59074, 34.55558], [45.53219, 34.60441], [45.51883, 34.47692], [45.43879, 34.45949], [45.46697, 34.38221], [45.49171, 34.3439], [45.53552, 34.35148], [45.58667, 34.30147], [45.56176, 34.15088], [45.47264, 34.03099], [45.41077, 33.97421], [45.42789, 33.9458], [45.50261, 33.94968], [45.77814, 33.60938], [45.89801, 33.63661], [45.96183, 33.55751], [45.86687, 33.49263], [45.99919, 33.5082], [46.20623, 33.20395], [46.11905, 33.11924], [46.05367, 33.13097], [46.03966, 33.09577], [46.15175, 33.07229], [46.09103, 32.98354], [46.17198, 32.95612], [46.32298, 32.9731], [46.46788, 32.91992], [47.17218, 32.45393], [47.37529, 32.47808], [47.57144, 32.20583], [47.52474, 32.15972], [47.64771, 32.07666], [47.86337, 31.78422], [47.6804, 31.39086], [47.68219, 31.00004], [48.03221, 30.9967], [48.02443, 30.4789], [48.14585, 30.44133], [48.18321, 30.39703], [48.19425, 30.32796], [48.21279, 30.31644], [48.24385, 30.33846], [48.26393, 30.3408], [48.41117, 30.19846], [48.41671, 30.17254], [48.38714, 30.13485], [48.38869, 30.11062], [48.43384, 30.08233], [48.4494, 30.04456], [48.44785, 30.00148], [48.51011, 29.96238], [48.61441, 29.93675], [48.83867, 29.78572], [49.98877, 27.87827], [50.37726, 27.89227], [54.39838, 25.68383], [55.14145, 25.62624], [55.81777, 26.18798], [56.2644, 26.58649], [56.68954, 26.76645], [56.79239, 26.41236], [56.82555, 25.7713], [56.86325, 25.03856], [61.46682, 24.57869], [61.6433, 25.27541], [61.683, 25.66638], [61.83968, 25.7538], [61.83831, 26.07249], [61.89391, 26.26251], [62.05117, 26.31647], [62.21304, 26.26601], [62.31484, 26.528], [62.77352, 26.64099], [63.1889, 26.65072], [63.18688, 26.83844], [63.25005, 26.84212], [63.25005, 27.08692], [63.32283, 27.14437], [63.19649, 27.25674], [62.80604, 27.22412], [62.79684, 27.34381], [62.84905, 27.47627], [62.7638, 28.02992], [62.79412, 28.28108], [62.59499, 28.24842], [62.40259, 28.42703], [61.93581, 28.55284], [61.65978, 28.77937], [61.53765, 29.00507], [61.31508, 29.38903], [60.87231, 29.86514], [61.80829, 30.84224], [61.78268, 30.92724], [61.8335, 30.97669], [61.83257, 31.0452], [61.80957, 31.12576], [61.80569, 31.16167], [61.70929, 31.37391], [60.84541, 31.49561], [60.86191, 32.22565], [60.56485, 33.12944], [60.88908, 33.50219], [60.91133, 33.55596], [60.69573, 33.56054], [60.57762, 33.59772], [60.5485, 33.73422], [60.5838, 33.80793], [60.50209, 34.13992], [60.66502, 34.31539], [60.91321, 34.30411], [60.72316, 34.52857], [60.99922, 34.63064], [61.00197, 34.70631], [61.06926, 34.82139], [61.12831, 35.09938], [61.0991, 35.27845], [61.18187, 35.30249], [61.27371, 35.61482], [61.22719, 35.67038], [61.26152, 35.80749], [61.22444, 35.92879], [61.12007, 35.95992], [61.22719, 36.12759], [61.1393, 36.38782], [61.18187, 36.55348], [61.14516, 36.64644], [60.34767, 36.63214], [60.00768, 37.04102], [59.74678, 37.12499], [59.55178, 37.13594], [59.39385, 37.34257], [59.39797, 37.47892], [59.33507, 37.53146], [59.22905, 37.51161], [58.9338, 37.67374], [58.6921, 37.64548], [58.5479, 37.70526], [58.47786, 37.6433], [58.39959, 37.63134], [58.22999, 37.6856], [58.21399, 37.77281], [57.79534, 37.89299], [57.35042, 37.98546], [57.37236, 38.09321], [57.21169, 38.28965], [57.03453, 38.18717], [56.73928, 38.27887], [56.62255, 38.24005], [56.43303, 38.26054], [56.32454, 38.18502], [56.33278, 38.08132], [55.97847, 38.08024], [55.76561, 38.12238], [55.44152, 38.08564], [55.13412, 37.94705], [54.851, 37.75739], [54.77684, 37.62264], [54.81804, 37.61285], [54.77822, 37.51597], [54.67247, 37.43532], [54.58664, 37.45809], [54.36211, 37.34912], [54.24565, 37.32047], [53.89734, 37.3464], [48.88288, 38.43975], [48.84969, 38.45015], [48.81072, 38.44853], [48.78979, 38.45026], [48.70001, 38.40564], [48.62217, 38.40198], [48.58793, 38.45076], [48.45084, 38.61013], [48.3146, 38.59958], [48.24773, 38.71883], [48.02581, 38.82705], [48.01409, 38.90333], [48.07734, 38.91616], [48.08627, 38.94434], [48.28437, 38.97186], [48.33884, 39.03022], [48.31239, 39.09278], [48.15361, 39.19419], [48.12404, 39.25208], [48.15984, 39.30028], [48.37385, 39.37584], [48.34264, 39.42935], [47.98977, 39.70999], [47.84774, 39.66285], [47.50099, 39.49615], [47.38978, 39.45999], [47.31301, 39.37492], [47.05927, 39.24846], [47.05771, 39.20143], [46.95341, 39.13505], [46.92539, 39.16644], [46.83822, 39.13143], [46.75752, 39.03231], [46.53497, 38.86548], [46.34059, 38.92076], [46.20601, 38.85262], [46.14785, 38.84206], [46.06766, 38.87861], [46.00228, 38.87376], [45.94624, 38.89072], [45.90266, 38.87739], [45.83883, 38.90768], [45.65172, 38.95199], [45.6155, 38.94304], [45.6131, 38.964], [45.44966, 38.99243], [45.44811, 39.04927], [45.40452, 39.07224], [45.40148, 39.09007], [45.30489, 39.18333], [45.16168, 39.21952], [45.08751, 39.35052], [45.05932, 39.36435], [44.96746, 39.42998]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IS",
      iso1A3: "ISL",
      iso1N3: "352",
      wikidata: "Q189",
      nameEn: "Iceland",
      groups: ["154", "150", "UN"],
      callingCodes: ["354"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-33.15676, 62.62995], [-8.25539, 63.0423], [-15.70914, 69.67442], [-33.15676, 62.62995]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "IT",
      iso1A3: "ITA",
      iso1N3: "380",
      wikidata: "Q38",
      nameEn: "Italy",
      groups: ["EU", "039", "150", "UN"],
      callingCodes: ["39"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[8.95861, 45.96485], [8.97604, 45.96151], [8.97741, 45.98317], [8.96668, 45.98436], [8.95861, 45.96485]]], [[[7.63035, 43.57419], [9.56115, 43.20816], [10.09675, 41.44089], [7.60802, 41.05927], [7.89009, 38.19924], [11.2718, 37.6713], [12.13667, 34.20326], [14.02721, 36.53141], [17.67657, 35.68918], [18.83516, 40.36999], [16.15283, 42.18525], [13.12821, 44.48877], [13.05142, 45.33128], [13.45644, 45.59464], [13.6076, 45.64761], [13.7198, 45.59352], [13.74587, 45.59811], [13.78445, 45.5825], [13.84106, 45.58185], [13.86771, 45.59898], [13.8695, 45.60835], [13.9191, 45.6322], [13.87933, 45.65207], [13.83422, 45.68703], [13.83332, 45.70855], [13.8235, 45.7176], [13.66986, 45.79955], [13.59784, 45.8072], [13.58858, 45.83503], [13.57563, 45.8425], [13.58644, 45.88173], [13.59565, 45.89446], [13.60857, 45.89907], [13.61931, 45.91782], [13.63815, 45.93607], [13.6329, 45.94894], [13.64307, 45.98326], [13.63458, 45.98947], [13.62074, 45.98388], [13.58903, 45.99009], [13.56759, 45.96991], [13.52963, 45.96588], [13.50104, 45.98078], [13.47474, 46.00546], [13.49702, 46.01832], [13.50998, 46.04498], [13.49568, 46.04839], [13.50104, 46.05986], [13.57072, 46.09022], [13.64053, 46.13587], [13.66472, 46.17392], [13.64451, 46.18966], [13.56682, 46.18703], [13.56114, 46.2054], [13.47587, 46.22725], [13.42218, 46.20758], [13.37671, 46.29668], [13.44808, 46.33507], [13.43418, 46.35992], [13.47019, 46.3621], [13.5763, 46.40915], [13.5763, 46.42613], [13.59777, 46.44137], [13.68684, 46.43881], [13.7148, 46.5222], [13.64088, 46.53438], [13.27627, 46.56059], [12.94445, 46.60401], [12.59992, 46.6595], [12.38708, 46.71529], [12.27591, 46.88651], [12.2006, 46.88854], [12.11675, 47.01241], [12.21781, 47.03996], [12.19254, 47.09331], [11.74789, 46.98484], [11.50739, 47.00644], [11.33355, 46.99862], [11.10618, 46.92966], [11.00764, 46.76896], [10.72974, 46.78972], [10.75753, 46.82258], [10.66405, 46.87614], [10.54783, 46.84505], [10.47197, 46.85698], [10.38659, 46.67847], [10.40475, 46.63671], [10.44686, 46.64162], [10.49375, 46.62049], [10.46136, 46.53164], [10.25309, 46.57432], [10.23674, 46.63484], [10.10307, 46.61003], [10.03715, 46.44479], [10.165, 46.41051], [10.10506, 46.3372], [10.17862, 46.25626], [10.14439, 46.22992], [10.07055, 46.21668], [9.95249, 46.38045], [9.73086, 46.35071], [9.71273, 46.29266], [9.57015, 46.2958], [9.46117, 46.37481], [9.45936, 46.50873], [9.40487, 46.46621], [9.36128, 46.5081], [9.28136, 46.49685], [9.25502, 46.43743], [9.29226, 46.32717], [9.24503, 46.23616], [9.01618, 46.04928], [8.99257, 45.9698], [9.09065, 45.89906], [9.06642, 45.8761], [9.04546, 45.84968], [9.04059, 45.8464], [9.03505, 45.83976], [9.03793, 45.83548], [9.03279, 45.82865], [9.0298, 45.82127], [9.00324, 45.82055], [8.99663, 45.83466], [8.9621, 45.83707], [8.94737, 45.84285], [8.91129, 45.8388], [8.93504, 45.86245], [8.94372, 45.86587], [8.93649, 45.86775], [8.88904, 45.95465], [8.86688, 45.96135], [8.85121, 45.97239], [8.8319, 45.9879], [8.79362, 45.99207], [8.78585, 45.98973], [8.79414, 46.00913], [8.85617, 46.0748], [8.80778, 46.10085], [8.75697, 46.10395], [8.62242, 46.12112], [8.45032, 46.26869], [8.46317, 46.43712], [8.42464, 46.46367], [8.30648, 46.41587], [8.31162, 46.38044], [8.08814, 46.26692], [8.16866, 46.17817], [8.11383, 46.11577], [8.02906, 46.10331], [7.98881, 45.99867], [7.9049, 45.99945], [7.85949, 45.91485], [7.56343, 45.97421], [7.10685, 45.85653], [7.04151, 45.92435], [6.95315, 45.85163], [6.80785, 45.83265], [6.80785, 45.71864], [6.98948, 45.63869], [7.00037, 45.509], [7.18019, 45.40071], [7.10572, 45.32924], [7.13115, 45.25386], [7.07074, 45.21228], [6.96706, 45.20841], [6.85144, 45.13226], [6.7697, 45.16044], [6.62803, 45.11175], [6.66981, 45.02324], [6.74791, 45.01939], [6.74519, 44.93661], [6.75518, 44.89915], [6.90774, 44.84322], [6.93499, 44.8664], [7.02217, 44.82519], [7.00401, 44.78782], [7.07484, 44.68073], [7.00582, 44.69364], [6.95133, 44.66264], [6.96042, 44.62129], [6.85507, 44.53072], [6.86233, 44.49834], [6.94504, 44.43112], [6.88784, 44.42043], [6.89171, 44.36637], [6.98221, 44.28289], [7.00764, 44.23736], [7.16929, 44.20352], [7.27827, 44.1462], [7.34547, 44.14359], [7.36364, 44.11882], [7.62155, 44.14881], [7.63245, 44.17877], [7.68694, 44.17487], [7.66878, 44.12795], [7.72508, 44.07578], [7.6597, 44.03009], [7.66848, 43.99943], [7.65266, 43.9763], [7.60771, 43.95772], [7.56858, 43.94506], [7.56075, 43.89932], [7.51162, 43.88301], [7.49355, 43.86551], [7.50423, 43.84345], [7.53006, 43.78405], [7.63035, 43.57419]], [[12.45181, 41.90056], [12.44834, 41.90095], [12.44582, 41.90194], [12.44815, 41.90326], [12.44984, 41.90545], [12.45091, 41.90625], [12.45543, 41.90738], [12.45561, 41.90629], [12.45762, 41.9058], [12.45755, 41.9033], [12.45826, 41.90281], [12.45834, 41.90174], [12.4577, 41.90115], [12.45691, 41.90125], [12.45626, 41.90172], [12.45435, 41.90143], [12.45446, 41.90028], [12.45181, 41.90056]], [[12.45648, 43.89369], [12.44184, 43.90498], [12.41641, 43.89991], [12.40935, 43.9024], [12.41233, 43.90956], [12.40733, 43.92379], [12.41551, 43.92984], [12.41165, 43.93769], [12.40506, 43.94325], [12.40415, 43.95485], [12.41414, 43.95273], [12.42005, 43.9578], [12.43662, 43.95698], [12.44684, 43.96597], [12.46205, 43.97463], [12.47853, 43.98052], [12.49406, 43.98492], [12.50678, 43.99113], [12.51463, 43.99122], [12.5154, 43.98508], [12.51064, 43.98165], [12.51109, 43.97201], [12.50622, 43.97131], [12.50875, 43.96198], [12.50655, 43.95796], [12.51427, 43.94897], [12.51553, 43.94096], [12.50496, 43.93017], [12.50269, 43.92363], [12.49724, 43.92248], [12.49247, 43.91774], [12.49429, 43.90973], [12.48771, 43.89706], [12.45648, 43.89369]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "JE",
      iso1A3: "JEY",
      iso1N3: "832",
      wikidata: "Q785",
      nameEn: "Bailiwick of Jersey",
      country: "GB",
      groups: ["830", "Q185086", "154", "150", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["44 01534"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.00491, 48.86706], [-1.83944, 49.23037], [-2.09454, 49.46288], [-2.65349, 49.15373], [-2.00491, 48.86706]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "JM",
      iso1A3: "JAM",
      iso1N3: "388",
      wikidata: "Q766",
      nameEn: "Jamaica",
      aliases: ["JA"],
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      callingCodes: ["1 876", "1 658"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-74.09729, 17.36817], [-78.9741, 19.59515], [-78.34606, 16.57862], [-74.09729, 17.36817]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "JO",
      iso1A3: "JOR",
      iso1N3: "400",
      wikidata: "Q810",
      nameEn: "Jordan",
      groups: ["145", "142", "UN"],
      callingCodes: ["962"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[39.04251, 32.30203], [38.98762, 32.47694], [39.08202, 32.50304], [38.79171, 33.37328], [36.83946, 32.31293], [36.40959, 32.37908], [36.23948, 32.50108], [36.20875, 32.49529], [36.20379, 32.52751], [36.08074, 32.51463], [36.02239, 32.65911], [35.96633, 32.66237], [35.93307, 32.71966], [35.88405, 32.71321], [35.75983, 32.74803], [35.68467, 32.70715], [35.66527, 32.681], [35.61669, 32.67999], [35.59813, 32.65159], [35.56614, 32.64393], [35.57485, 32.48669], [35.55494, 32.42687], [35.55807, 32.38674], [35.57111, 32.21877], [35.52012, 32.04076], [35.54375, 31.96587], [35.52758, 31.9131], [35.55941, 31.76535], [35.47672, 31.49578], [35.40316, 31.25535], [35.43658, 31.12444], [35.41371, 30.95565], [35.33984, 30.8802], [35.33456, 30.81224], [35.29311, 30.71365], [35.21379, 30.60401], [35.19595, 30.50297], [35.16218, 30.43535], [35.19183, 30.34636], [35.14108, 30.07374], [35.02147, 29.66343], [34.98207, 29.58147], [34.97718, 29.54294], [34.92298, 29.45305], [34.8812, 29.36878], [36.07081, 29.18469], [36.50005, 29.49696], [36.75083, 29.86903], [37.4971, 29.99949], [37.66395, 30.33245], [37.99354, 30.49998], [36.99791, 31.50081], [38.99233, 31.99721], [39.29903, 32.23259], [39.26157, 32.35555], [39.04251, 32.30203]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "JP",
      iso1A3: "JPN",
      iso1N3: "392",
      wikidata: "Q17",
      nameEn: "Japan",
      groups: ["030", "142", "UN"],
      driveSide: "left",
      callingCodes: ["81"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[145.82361, 43.38904], [145.23667, 43.76813], [145.82343, 44.571], [140.9182, 45.92937], [133.61399, 37.41], [129.2669, 34.87122], [122.26612, 25.98197], [123.92912, 17.8782], [155.16731, 23.60141], [145.82361, 43.38904]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KE",
      iso1A3: "KEN",
      iso1N3: "404",
      wikidata: "Q114",
      nameEn: "Kenya",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["254"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[35.9419, 4.61933], [35.51424, 4.61643], [35.42366, 4.76969], [35.47843, 4.91872], [35.30992, 4.90402], [35.34151, 5.02364], [34.47601, 4.72162], [33.9873, 4.23316], [34.06046, 4.15235], [34.15429, 3.80464], [34.45815, 3.67385], [34.44922, 3.51627], [34.39112, 3.48802], [34.41794, 3.44342], [34.40006, 3.37949], [34.45815, 3.18319], [34.56242, 3.11478], [34.60114, 2.93034], [34.65774, 2.8753], [34.73967, 2.85447], [34.78137, 2.76223], [34.77244, 2.70272], [34.95267, 2.47209], [34.90947, 2.42447], [34.98692, 1.97348], [34.9899, 1.6668], [34.92734, 1.56109], [34.87819, 1.5596], [34.7918, 1.36752], [34.82606, 1.30944], [34.82606, 1.26626], [34.80223, 1.22754], [34.67562, 1.21265], [34.58029, 1.14712], [34.57427, 1.09868], [34.52369, 1.10692], [34.43349, 0.85254], [34.40041, 0.80266], [34.31516, 0.75693], [34.27345, 0.63182], [34.20196, 0.62289], [34.13493, 0.58118], [34.11408, 0.48884], [34.08727, 0.44713], [34.10067, 0.36372], [33.90936, 0.10581], [33.98449, -0.13079], [33.9264, -0.54188], [33.93107, -0.99298], [34.02286, -1.00779], [34.03084, -1.05101], [34.0824, -1.02264], [37.67199, -3.06222], [37.71745, -3.304], [37.5903, -3.42735], [37.63099, -3.50723], [37.75036, -3.54243], [37.81321, -3.69179], [39.21631, -4.67835], [39.44306, -4.93877], [39.62121, -4.68136], [41.75542, -1.85308], [41.56362, -1.66375], [41.56, -1.59812], [41.00099, -0.83068], [40.98767, 2.82959], [41.31368, 3.14314], [41.89488, 3.97375], [41.1754, 3.94079], [40.77498, 4.27683], [39.86043, 3.86974], [39.76808, 3.67058], [39.58339, 3.47434], [39.55132, 3.39634], [39.51551, 3.40895], [39.49444, 3.45521], [39.19954, 3.47834], [39.07736, 3.5267], [38.91938, 3.51198], [38.52336, 3.62551], [38.45812, 3.60445], [38.14168, 3.62487], [37.07724, 4.33503], [36.84474, 4.44518], [36.03924, 4.44406], [35.95449, 4.53244], [35.9419, 4.61933]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KG",
      iso1A3: "KGZ",
      iso1N3: "417",
      wikidata: "Q813",
      nameEn: "Kyrgyzstan",
      groups: ["143", "142", "UN"],
      callingCodes: ["996"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[74.88756, 42.98612], [74.75, 42.99029], [74.70331, 43.02519], [74.64615, 43.05881], [74.57491, 43.13702], [74.22489, 43.24657], [73.55634, 43.03071], [73.50992, 42.82356], [73.44393, 42.43098], [71.88792, 42.83578], [71.62405, 42.76613], [71.53272, 42.8014], [71.2724, 42.77853], [71.22785, 42.69248], [71.17807, 42.67381], [71.15232, 42.60486], [70.97717, 42.50147], [70.85973, 42.30188], [70.94483, 42.26238], [71.13263, 42.28356], [71.28719, 42.18033], [70.69777, 41.92554], [70.17682, 41.5455], [70.48909, 41.40335], [70.67586, 41.47953], [70.78572, 41.36419], [70.77885, 41.24813], [70.86263, 41.23833], [70.9615, 41.16393], [71.02193, 41.19494], [71.11806, 41.15359], [71.25813, 41.18796], [71.27187, 41.11015], [71.34877, 41.16807], [71.40198, 41.09436], [71.46148, 41.13958], [71.43814, 41.19644], [71.46688, 41.31883], [71.57227, 41.29175], [71.6787, 41.42111], [71.65914, 41.49599], [71.73054, 41.54713], [71.71132, 41.43012], [71.76625, 41.4466], [71.83914, 41.3546], [71.91457, 41.2982], [71.85964, 41.19081], [72.07249, 41.11739], [72.10745, 41.15483], [72.16433, 41.16483], [72.17594, 41.15522], [72.14864, 41.13363], [72.1792, 41.10621], [72.21061, 41.05607], [72.17594, 41.02377], [72.18339, 40.99571], [72.324, 41.03381], [72.34026, 41.04539], [72.34757, 41.06104], [72.36138, 41.04384], [72.38511, 41.02785], [72.45206, 41.03018], [72.48742, 40.97136], [72.55109, 40.96046], [72.59136, 40.86947], [72.68157, 40.84942], [72.84291, 40.85512], [72.94454, 40.8094], [73.01869, 40.84681], [73.13267, 40.83512], [73.13412, 40.79122], [73.0612, 40.76678], [72.99133, 40.76457], [72.93296, 40.73089], [72.8722, 40.71111], [72.85372, 40.7116], [72.84754, 40.67229], [72.80137, 40.67856], [72.74866, 40.60873], [72.74894, 40.59592], [72.75982, 40.57273], [72.74862, 40.57131], [72.74768, 40.58051], [72.73995, 40.58409], [72.69579, 40.59778], [72.66713, 40.59076], [72.66713, 40.5219], [72.47795, 40.5532], [72.40517, 40.61917], [72.34406, 40.60144], [72.41714, 40.55736], [72.38384, 40.51535], [72.41513, 40.50856], [72.44191, 40.48222], [72.40346, 40.4007], [72.24368, 40.46091], [72.18648, 40.49893], [71.96401, 40.31907], [72.05464, 40.27586], [71.85002, 40.25647], [71.82646, 40.21872], [71.73054, 40.14818], [71.71719, 40.17886], [71.69621, 40.18492], [71.70569, 40.20391], [71.68386, 40.26984], [71.61931, 40.26775], [71.61725, 40.20615], [71.51549, 40.22986], [71.51215, 40.26943], [71.4246, 40.28619], [71.36663, 40.31593], [71.13042, 40.34106], [71.05901, 40.28765], [70.95789, 40.28761], [70.9818, 40.22392], [70.80495, 40.16813], [70.7928, 40.12797], [70.65827, 40.0981], [70.65946, 39.9878], [70.58912, 39.95211], [70.55033, 39.96619], [70.47557, 39.93216], [70.57384, 39.99394], [70.58297, 40.00891], [70.01283, 40.23288], [69.67001, 40.10639], [69.64704, 40.12165], [69.57615, 40.10524], [69.55555, 40.12296], [69.53794, 40.11833], [69.53855, 40.0887], [69.5057, 40.03277], [69.53615, 39.93991], [69.43557, 39.92877], [69.43134, 39.98431], [69.35649, 40.01994], [69.26938, 39.8127], [69.3594, 39.52516], [69.68677, 39.59281], [69.87491, 39.53882], [70.11111, 39.58223], [70.2869, 39.53141], [70.44757, 39.60128], [70.64087, 39.58792], [70.7854, 39.38933], [71.06418, 39.41586], [71.08752, 39.50704], [71.49814, 39.61397], [71.55856, 39.57588], [71.5517, 39.45722], [71.62688, 39.44056], [71.76816, 39.45456], [71.80164, 39.40631], [71.7522, 39.32031], [71.79202, 39.27355], [71.90601, 39.27674], [72.04059, 39.36704], [72.09689, 39.26823], [72.17242, 39.2661], [72.23834, 39.17248], [72.33173, 39.33093], [72.62027, 39.39696], [72.85934, 39.35116], [73.18454, 39.35536], [73.31912, 39.38615], [73.45096, 39.46677], [73.59831, 39.46425], [73.87018, 39.47879], [73.94683, 39.60733], [73.92354, 39.69565], [73.9051, 39.75073], [73.83006, 39.76136], [73.97049, 40.04378], [74.25533, 40.13191], [74.35063, 40.09742], [74.69875, 40.34668], [74.85996, 40.32857], [74.78168, 40.44886], [74.82013, 40.52197], [75.08243, 40.43945], [75.22834, 40.45382], [75.5854, 40.66874], [75.69663, 40.28642], [75.91361, 40.2948], [75.96168, 40.38064], [76.33659, 40.3482], [76.5261, 40.46114], [76.75681, 40.95354], [76.99302, 41.0696], [77.28004, 41.0033], [77.3693, 41.0375], [77.52723, 41.00227], [77.76206, 41.01574], [77.81287, 41.14307], [78.12873, 41.23091], [78.15757, 41.38565], [78.3732, 41.39603], [79.92977, 42.04113], [80.17842, 42.03211], [80.17807, 42.21166], [79.97364, 42.42816], [79.52921, 42.44778], [79.19763, 42.804], [78.91502, 42.76839], [78.48469, 42.89649], [75.82823, 42.94848], [75.72174, 42.79672], [75.29966, 42.86183], [75.22619, 42.85528], [74.88756, 42.98612]], [[70.74189, 39.86319], [70.63105, 39.77923], [70.59667, 39.83542], [70.54998, 39.85137], [70.52631, 39.86989], [70.53651, 39.89155], [70.74189, 39.86319]], [[71.86463, 39.98598], [71.84316, 39.95582], [71.7504, 39.93701], [71.71511, 39.96348], [71.78838, 40.01404], [71.86463, 39.98598]], [[71.21139, 40.03369], [71.1427, 39.95026], [71.23067, 39.93581], [71.16101, 39.88423], [71.10531, 39.91354], [71.04979, 39.89808], [71.10501, 39.95568], [71.09063, 39.99], [71.11668, 39.99291], [71.11037, 40.01984], [71.01035, 40.05481], [71.00236, 40.18154], [71.06305, 40.1771], [71.12218, 40.03052], [71.21139, 40.03369]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KH",
      iso1A3: "KHM",
      iso1N3: "116",
      wikidata: "Q424",
      nameEn: "Cambodia",
      groups: ["035", "142", "UN"],
      callingCodes: ["855"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[105.87328, 11.55953], [105.81645, 11.56876], [105.80867, 11.60536], [105.8507, 11.66635], [105.88962, 11.67854], [105.95188, 11.63738], [106.00792, 11.7197], [106.02038, 11.77457], [106.06708, 11.77761], [106.13158, 11.73283], [106.18539, 11.75171], [106.26478, 11.72122], [106.30525, 11.67549], [106.37219, 11.69836], [106.44691, 11.66787], [106.45158, 11.68616], [106.41577, 11.76999], [106.44535, 11.8279], [106.44068, 11.86294], [106.4687, 11.86751], [106.4111, 11.97413], [106.70687, 11.96956], [106.79405, 12.0807], [106.92325, 12.06548], [106.99953, 12.08983], [107.15831, 12.27547], [107.34511, 12.33327], [107.42917, 12.24657], [107.4463, 12.29373], [107.55059, 12.36824], [107.5755, 12.52177], [107.55993, 12.7982], [107.49611, 12.88926], [107.49144, 13.01215], [107.62843, 13.3668], [107.61909, 13.52577], [107.53503, 13.73908], [107.45252, 13.78897], [107.46498, 13.91593], [107.44318, 13.99751], [107.38247, 13.99147], [107.35757, 14.02319], [107.37158, 14.07906], [107.33577, 14.11832], [107.40427, 14.24509], [107.39493, 14.32655], [107.44941, 14.41552], [107.48521, 14.40346], [107.52569, 14.54665], [107.52102, 14.59034], [107.55371, 14.628], [107.54361, 14.69092], [107.47238, 14.61523], [107.44435, 14.52785], [107.37897, 14.54443], [107.3276, 14.58812], [107.29803, 14.58963], [107.26534, 14.54292], [107.256, 14.48716], [107.21241, 14.48716], [107.17038, 14.41782], [107.09722, 14.3937], [107.03962, 14.45099], [107.04585, 14.41782], [106.98825, 14.36806], [106.9649, 14.3198], [106.90574, 14.33639], [106.8497, 14.29416], [106.80767, 14.31226], [106.73762, 14.42687], [106.63333, 14.44194], [106.59908, 14.50977], [106.57106, 14.50525], [106.54148, 14.59565], [106.50723, 14.58963], [106.45898, 14.55045], [106.47766, 14.50977], [106.43874, 14.52032], [106.40916, 14.45249], [106.32355, 14.44043], [106.25194, 14.48415], [106.21302, 14.36203], [106.00131, 14.36957], [105.99509, 14.32734], [106.02311, 14.30623], [106.04801, 14.20363], [106.10872, 14.18401], [106.11962, 14.11307], [106.18656, 14.06324], [106.16632, 14.01794], [106.10094, 13.98471], [106.10405, 13.9137], [105.90791, 13.92881], [105.78182, 14.02247], [105.78338, 14.08438], [105.5561, 14.15684], [105.44869, 14.10703], [105.36775, 14.09948], [105.2759, 14.17496], [105.20894, 14.34967], [105.17748, 14.34432], [105.14012, 14.23873], [105.08408, 14.20402], [105.02804, 14.23722], [104.97667, 14.38806], [104.69335, 14.42726], [104.55014, 14.36091], [104.27616, 14.39861], [103.93836, 14.3398], [103.70175, 14.38052], [103.71109, 14.4348], [103.53518, 14.42575], [103.39353, 14.35639], [103.16469, 14.33075], [102.93275, 14.19044], [102.91251, 14.01531], [102.77864, 13.93374], [102.72727, 13.77806], [102.56848, 13.69366], [102.5481, 13.6589], [102.58635, 13.6286], [102.62483, 13.60883], [102.57573, 13.60461], [102.5358, 13.56933], [102.44601, 13.5637], [102.36859, 13.57488], [102.33828, 13.55613], [102.361, 13.50551], [102.35563, 13.47307], [102.35692, 13.38274], [102.34611, 13.35618], [102.36001, 13.31142], [102.36146, 13.26006], [102.43422, 13.09061], [102.46011, 13.08057], [102.52275, 12.99813], [102.48694, 12.97537], [102.49335, 12.92711], [102.53053, 12.77506], [102.4994, 12.71736], [102.51963, 12.66117], [102.57567, 12.65358], [102.7796, 12.43781], [102.78116, 12.40284], [102.73134, 12.37091], [102.70176, 12.1686], [102.77026, 12.06815], [102.78427, 11.98746], [102.83957, 11.8519], [102.90973, 11.75613], [102.91449, 11.65512], [102.52395, 11.25257], [102.47649, 9.66162], [103.99198, 10.48391], [104.43778, 10.42386], [104.47963, 10.43046], [104.49869, 10.4057], [104.59018, 10.53073], [104.87933, 10.52833], [104.95094, 10.64003], [105.09571, 10.72722], [105.02722, 10.89236], [105.08326, 10.95656], [105.11449, 10.96332], [105.34011, 10.86179], [105.42884, 10.96878], [105.50045, 10.94586], [105.77751, 11.03671], [105.86376, 10.89839], [105.84603, 10.85873], [105.93403, 10.83853], [105.94535, 10.9168], [106.06708, 10.8098], [106.18539, 10.79451], [106.14301, 10.98176], [106.20095, 10.97795], [106.1757, 11.07301], [106.1527, 11.10476], [106.10444, 11.07879], [105.86782, 11.28343], [105.88962, 11.43605], [105.87328, 11.55953]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KI",
      iso1A3: "KIR",
      iso1N3: "296",
      wikidata: "Q710",
      nameEn: "Kiribati",
      groups: ["057", "009", "UN"],
      driveSide: "left",
      callingCodes: ["686"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[169, 3.9], [169, -3.5], [178, -3.5], [178, 3.9], [169, 3.9]]], [[[-161.06795, 5.2462], [-158.12991, -1.86122], [-175.33482, -1.40631], [-175.31804, -7.54825], [-156.50903, -7.4975], [-156.48634, -15.52824], [-135.59706, -4.70473], [-161.06795, 5.2462]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KM",
      iso1A3: "COM",
      iso1N3: "174",
      wikidata: "Q970",
      nameEn: "Comoros",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["269"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[42.63904, -10.02522], [43.28731, -13.97126], [45.4971, -11.75965], [42.63904, -10.02522]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KN",
      iso1A3: "KNA",
      iso1N3: "659",
      wikidata: "Q763",
      nameEn: "St. Kitts and Nevis",
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 869"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-62.29333, 17.43155], [-62.76692, 17.64353], [-63.09677, 17.21372], [-62.63813, 16.65446], [-62.29333, 17.43155]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KP",
      iso1A3: "PRK",
      iso1N3: "408",
      wikidata: "Q423",
      nameEn: "North Korea",
      groups: ["030", "142", "UN"],
      callingCodes: ["850"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[130.26095, 42.9027], [130.09764, 42.91425], [130.12957, 42.98361], [129.96409, 42.97306], [129.95082, 43.01051], [129.8865, 43.00395], [129.85261, 42.96494], [129.83277, 42.86746], [129.80719, 42.79218], [129.7835, 42.76521], [129.77183, 42.69435], [129.75294, 42.59409], [129.72541, 42.43739], [129.60482, 42.44461], [129.54701, 42.37254], [129.42882, 42.44702], [129.28541, 42.41574], [129.22423, 42.3553], [129.22285, 42.26491], [129.15178, 42.17224], [128.96068, 42.06657], [128.94007, 42.03537], [128.04487, 42.01769], [128.15119, 41.74568], [128.30716, 41.60322], [128.20061, 41.40895], [128.18546, 41.41279], [128.12967, 41.37931], [128.03311, 41.39232], [128.02633, 41.42103], [127.92943, 41.44291], [127.29712, 41.49473], [127.17841, 41.59714], [126.90729, 41.79955], [126.60631, 41.65565], [126.53189, 41.35206], [126.242, 41.15454], [126.00335, 40.92835], [125.76869, 40.87908], [125.71172, 40.85223], [124.86913, 40.45387], [124.40719, 40.13655], [124.38556, 40.11047], [124.3322, 40.05573], [124.37089, 40.03004], [124.35029, 39.95639], [124.23201, 39.9248], [124.17532, 39.8232], [123.90497, 38.79949], [123.85601, 37.49093], [124.67666, 38.05679], [124.84224, 37.977], [124.87921, 37.80827], [125.06408, 37.66334], [125.37112, 37.62643], [125.81159, 37.72949], [126.13074, 37.70512], [126.18776, 37.74728], [126.19097, 37.81462], [126.24402, 37.83113], [126.43239, 37.84095], [126.46818, 37.80873], [126.56709, 37.76857], [126.59918, 37.76364], [126.66067, 37.7897], [126.68793, 37.83728], [126.68793, 37.9175], [126.67023, 37.95852], [126.84961, 38.0344], [126.88106, 38.10246], [126.95887, 38.1347], [126.95338, 38.17735], [127.04479, 38.25518], [127.15749, 38.30722], [127.38727, 38.33227], [127.49672, 38.30647], [127.55013, 38.32257], [128.02917, 38.31861], [128.27652, 38.41657], [128.31105, 38.58462], [128.37487, 38.62345], [128.65655, 38.61914], [131.95041, 41.5445], [130.65022, 42.32281], [130.66367, 42.38024], [130.64181, 42.41422], [130.60805, 42.4317], [130.56835, 42.43281], [130.55143, 42.52158], [130.50123, 42.61636], [130.44361, 42.54849], [130.41826, 42.6011], [130.2385, 42.71127], [130.23068, 42.80125], [130.26095, 42.9027]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KR",
      iso1A3: "KOR",
      iso1N3: "410",
      wikidata: "Q884",
      nameEn: "South Korea",
      groups: ["030", "142", "UN"],
      callingCodes: ["82"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[133.11729, 37.53115], [128.65655, 38.61914], [128.37487, 38.62345], [128.31105, 38.58462], [128.27652, 38.41657], [128.02917, 38.31861], [127.55013, 38.32257], [127.49672, 38.30647], [127.38727, 38.33227], [127.15749, 38.30722], [127.04479, 38.25518], [126.95338, 38.17735], [126.95887, 38.1347], [126.88106, 38.10246], [126.84961, 38.0344], [126.67023, 37.95852], [126.68793, 37.9175], [126.68793, 37.83728], [126.66067, 37.7897], [126.59918, 37.76364], [126.56709, 37.76857], [126.46818, 37.80873], [126.43239, 37.84095], [126.24402, 37.83113], [126.19097, 37.81462], [126.18776, 37.74728], [126.13074, 37.70512], [125.81159, 37.72949], [125.37112, 37.62643], [125.06408, 37.66334], [124.87921, 37.80827], [124.84224, 37.977], [124.67666, 38.05679], [123.85601, 37.49093], [122.80525, 33.30571], [125.99728, 32.63328], [129.2669, 34.87122], [133.11729, 37.53115]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KW",
      iso1A3: "KWT",
      iso1N3: "414",
      wikidata: "Q817",
      nameEn: "Kuwait",
      groups: ["145", "142", "UN"],
      callingCodes: ["965"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[49.00421, 28.81495], [48.59531, 29.66815], [48.40479, 29.85763], [48.17332, 30.02448], [48.06782, 30.02906], [48.01114, 29.98906], [47.7095, 30.10453], [47.37192, 30.10421], [47.15166, 30.01044], [46.89695, 29.50584], [46.5527, 29.10283], [47.46202, 29.0014], [47.58376, 28.83382], [47.59863, 28.66798], [47.70561, 28.5221], [48.42991, 28.53628], [49.00421, 28.81495]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KY",
      iso1A3: "CYM",
      iso1N3: "136",
      wikidata: "Q5785",
      nameEn: "Cayman Islands",
      country: "GB",
      groups: ["BOTS", "029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 345"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-82.11509, 19.60401], [-80.36068, 18.11751], [-79.32727, 20.06742], [-82.11509, 19.60401]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "KZ",
      iso1A3: "KAZ",
      iso1N3: "398",
      wikidata: "Q232",
      nameEn: "Kazakhstan",
      groups: ["143", "142", "UN"],
      callingCodes: ["7"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[68.90865, 55.38148], [68.19206, 55.18823], [68.26661, 55.09226], [68.21308, 54.98645], [65.20174, 54.55216], [65.24663, 54.35721], [65.11033, 54.33028], [64.97216, 54.4212], [63.97686, 54.29763], [64.02715, 54.22679], [63.91224, 54.20013], [63.80604, 54.27079], [62.58651, 54.05871], [62.56876, 53.94047], [62.45931, 53.90737], [62.38535, 54.03961], [62.00966, 54.04134], [62.03913, 53.94768], [61.65318, 54.02445], [61.56941, 53.95703], [61.47603, 54.08048], [61.3706, 54.08464], [61.26863, 53.92797], [60.99796, 53.93699], [61.14283, 53.90063], [61.22574, 53.80268], [60.90626, 53.62937], [61.55706, 53.57144], [61.57185, 53.50112], [61.37957, 53.45887], [61.29082, 53.50992], [61.14291, 53.41481], [61.19024, 53.30536], [62.14574, 53.09626], [62.12799, 52.99133], [62.0422, 52.96105], [61.23462, 53.03227], [61.05842, 52.92217], [60.71989, 52.75923], [60.71693, 52.66245], [60.84118, 52.63912], [60.84709, 52.52228], [60.98021, 52.50068], [61.05417, 52.35096], [60.78201, 52.22067], [60.72581, 52.15538], [60.48915, 52.15175], [60.19925, 51.99173], [59.99809, 51.98263], [60.09867, 51.87135], [60.50986, 51.7964], [60.36787, 51.66815], [60.5424, 51.61675], [60.92401, 51.61124], [60.95655, 51.48615], [61.50677, 51.40687], [61.55114, 51.32746], [61.6813, 51.25716], [61.56889, 51.23679], [61.4431, 50.80679], [60.81833, 50.6629], [60.31914, 50.67705], [60.17262, 50.83312], [60.01288, 50.8163], [59.81172, 50.54451], [59.51886, 50.49937], [59.48928, 50.64216], [58.87974, 50.70852], [58.3208, 51.15151], [57.75578, 51.13852], [57.74986, 50.93017], [57.44221, 50.88354], [57.17302, 51.11253], [56.17906, 50.93204], [56.11398, 50.7471], [55.67774, 50.54508], [54.72067, 51.03261], [54.56685, 51.01958], [54.71476, 50.61214], [54.55797, 50.52006], [54.41894, 50.61214], [54.46331, 50.85554], [54.12248, 51.11542], [53.69299, 51.23466], [53.46165, 51.49445], [52.54329, 51.48444], [52.36119, 51.74161], [51.8246, 51.67916], [51.77431, 51.49536], [51.301, 51.48799], [51.26254, 51.68466], [50.59695, 51.61859], [50.26859, 51.28677], [49.97277, 51.2405], [49.76866, 51.11067], [49.39001, 51.09396], [49.41959, 50.85927], [49.12673, 50.78639], [48.86936, 50.61589], [48.57946, 50.63278], [48.90782, 50.02281], [48.68352, 49.89546], [48.42564, 49.82283], [48.24519, 49.86099], [48.10044, 50.09242], [47.58551, 50.47867], [47.30448, 50.30894], [47.34589, 50.09308], [47.18319, 49.93721], [46.9078, 49.86707], [46.78398, 49.34026], [47.04658, 49.19834], [47.00857, 49.04921], [46.78392, 48.95352], [46.49011, 48.43019], [47.11516, 48.27188], [47.12107, 47.83687], [47.38731, 47.68176], [47.41689, 47.83687], [47.64973, 47.76559], [48.15348, 47.74545], [48.45173, 47.40818], [48.52326, 47.4102], [49.01136, 46.72716], [48.51142, 46.69268], [48.54988, 46.56267], [49.16518, 46.38542], [49.32259, 46.26944], [49.88945, 46.04554], [49.2134, 44.84989], [52.26048, 41.69249], [52.47884, 41.78034], [52.97575, 42.1308], [54.20635, 42.38477], [54.95182, 41.92424], [55.45471, 41.25609], [56.00314, 41.32584], [55.97584, 44.99322], [55.97584, 44.99328], [55.97584, 44.99338], [55.97584, 44.99343], [55.97584, 44.99348], [55.97584, 44.99353], [55.97584, 44.99359], [55.97584, 44.99369], [55.97584, 44.99374], [55.97584, 44.99384], [55.97584, 44.9939], [55.97584, 44.994], [55.97584, 44.99405], [55.97584, 44.99415], [55.97584, 44.99421], [55.97584, 44.99426], [55.97584, 44.99431], [55.97584, 44.99436], [55.97584, 44.99441], [55.97594, 44.99446], [55.97605, 44.99452], [55.97605, 44.99457], [55.97605, 44.99462], [55.97605, 44.99467], [55.97605, 44.99477], [55.97615, 44.99477], [55.97615, 44.99483], [55.97615, 44.99493], [55.97615, 44.99498], [55.97615, 44.99503], [55.97615, 44.99508], [55.97625, 44.99514], [55.97636, 44.99519], [55.97636, 44.99524], [55.97646, 44.99529], [55.97646, 44.99534], [55.97656, 44.99539], [55.97667, 44.99545], [55.97677, 44.9955], [55.97677, 44.99555], [55.97677, 44.9956], [55.97687, 44.9956], [55.97698, 44.99565], [55.97698, 44.9957], [55.97708, 44.99576], [55.97718, 44.99581], [55.97729, 44.99586], [55.97739, 44.99586], [55.97739, 44.99591], [55.97749, 44.99591], [55.9776, 44.99591], [55.9777, 44.99596], [55.9777, 44.99601], [55.9778, 44.99607], [55.97791, 44.99607], [55.97801, 44.99607], [55.97801, 44.99612], [55.97811, 44.99617], [55.97822, 44.99617], [55.97832, 44.99622], [55.97842, 44.99622], [58.59711, 45.58671], [61.01475, 44.41383], [62.01711, 43.51008], [63.34656, 43.64003], [64.53885, 43.56941], [64.96464, 43.74748], [65.18666, 43.48835], [65.53277, 43.31856], [65.85194, 42.85481], [66.09482, 42.93426], [66.00546, 41.94455], [66.53302, 41.87388], [66.69129, 41.1311], [67.9644, 41.14611], [67.98511, 41.02794], [68.08273, 41.08148], [68.1271, 41.0324], [67.96736, 40.83798], [68.49983, 40.56437], [68.63, 40.59358], [68.58444, 40.91447], [68.49983, 40.99669], [68.62221, 41.03019], [68.65662, 40.93861], [68.73945, 40.96989], [68.7217, 41.05025], [69.01308, 41.22804], [69.05006, 41.36183], [69.15137, 41.43078], [69.17701, 41.43769], [69.18528, 41.45175], [69.20439, 41.45391], [69.22671, 41.46298], [69.23332, 41.45847], [69.25059, 41.46693], [69.29778, 41.43673], [69.35554, 41.47211], [69.37468, 41.46555], [69.45081, 41.46246], [69.39485, 41.51518], [69.45751, 41.56863], [69.49545, 41.545], [70.94483, 42.26238], [70.85973, 42.30188], [70.97717, 42.50147], [71.15232, 42.60486], [71.17807, 42.67381], [71.22785, 42.69248], [71.2724, 42.77853], [71.53272, 42.8014], [71.62405, 42.76613], [71.88792, 42.83578], [73.44393, 42.43098], [73.50992, 42.82356], [73.55634, 43.03071], [74.22489, 43.24657], [74.57491, 43.13702], [74.64615, 43.05881], [74.70331, 43.02519], [74.75, 42.99029], [74.88756, 42.98612], [75.22619, 42.85528], [75.29966, 42.86183], [75.72174, 42.79672], [75.82823, 42.94848], [78.48469, 42.89649], [78.91502, 42.76839], [79.19763, 42.804], [79.52921, 42.44778], [79.97364, 42.42816], [80.17807, 42.21166], [80.26841, 42.23797], [80.16892, 42.61137], [80.26886, 42.8366], [80.38169, 42.83142], [80.58999, 42.9011], [80.3735, 43.01557], [80.62913, 43.141], [80.78817, 43.14235], [80.77771, 43.30065], [80.69718, 43.32589], [80.75156, 43.44948], [80.40031, 44.10986], [80.40229, 44.23319], [80.38384, 44.63073], [79.8987, 44.89957], [80.11169, 45.03352], [81.73278, 45.3504], [82.51374, 45.1755], [82.58474, 45.40027], [82.21792, 45.56619], [83.04622, 47.19053], [83.92184, 46.98912], [84.73077, 47.01394], [84.93995, 46.87399], [85.22443, 47.04816], [85.54294, 47.06171], [85.69696, 47.2898], [85.61067, 47.49753], [85.5169, 48.05493], [85.73581, 48.3939], [86.38069, 48.46064], [86.75343, 48.70331], [86.73568, 48.99918], [86.87238, 49.12432], [87.28386, 49.11626], [87.31465, 49.23603], [87.03071, 49.25142], [86.82606, 49.51796], [86.61307, 49.60239], [86.79056, 49.74787], [86.63674, 49.80136], [86.18709, 49.50259], [85.24047, 49.60239], [84.99198, 50.06793], [84.29385, 50.27257], [83.8442, 50.87375], [83.14607, 51.00796], [82.55443, 50.75412], [81.94999, 50.79307], [81.46581, 50.77658], [81.41248, 50.97524], [81.06091, 50.94833], [81.16999, 51.15662], [80.80318, 51.28262], [80.44819, 51.20855], [80.4127, 50.95581], [80.08138, 50.77658], [79.11255, 52.01171], [77.90383, 53.29807], [76.54243, 53.99329], [76.44076, 54.16017], [76.82266, 54.1798], [76.91052, 54.4677], [75.3668, 54.07439], [75.43398, 53.98652], [75.07405, 53.80831], [73.39218, 53.44623], [73.25412, 53.61532], [73.68921, 53.86522], [73.74778, 54.07194], [73.37963, 53.96132], [72.71026, 54.1161], [72.43415, 53.92685], [72.17477, 54.36303], [71.96141, 54.17736], [71.10379, 54.13326], [71.08706, 54.33376], [71.24185, 54.64965], [71.08288, 54.71253], [70.96009, 55.10558], [70.76493, 55.3027], [70.19179, 55.1476], [69.74917, 55.35545], [69.34224, 55.36344], [68.90865, 55.38148]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LA",
      iso1A3: "LAO",
      iso1N3: "418",
      wikidata: "Q819",
      nameEn: "Laos",
      groups: ["035", "142", "UN"],
      callingCodes: ["856"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[102.1245, 22.43372], [102.03633, 22.46164], [101.98487, 22.42766], [101.91344, 22.44417], [101.90714, 22.38688], [101.86828, 22.38397], [101.7685, 22.50337], [101.68973, 22.46843], [101.61306, 22.27515], [101.56789, 22.28876], [101.53638, 22.24794], [101.60675, 22.13513], [101.57525, 22.13026], [101.62566, 21.96574], [101.7791, 21.83019], [101.74555, 21.72852], [101.83257, 21.61562], [101.80001, 21.57461], [101.7475, 21.5873], [101.7727, 21.51794], [101.74224, 21.48276], [101.74014, 21.30967], [101.84412, 21.25291], [101.83887, 21.20983], [101.76745, 21.21571], [101.79266, 21.19025], [101.7622, 21.14813], [101.70548, 21.14911], [101.66977, 21.20004], [101.60886, 21.17947], [101.59491, 21.18621], [101.6068, 21.23329], [101.54563, 21.25668], [101.29326, 21.17254], [101.2229, 21.23271], [101.26912, 21.36482], [101.19349, 21.41959], [101.2124, 21.56422], [101.15156, 21.56129], [101.16198, 21.52808], [101.00234, 21.39612], [100.80173, 21.2934], [100.72716, 21.31786], [100.63578, 21.05639], [100.55281, 21.02796], [100.50974, 20.88574], [100.64628, 20.88279], [100.60112, 20.8347], [100.51079, 20.82194], [100.36375, 20.82783], [100.1957, 20.68247], [100.08404, 20.36626], [100.09999, 20.31614], [100.09337, 20.26293], [100.11785, 20.24787], [100.1712, 20.24324], [100.16668, 20.2986], [100.22076, 20.31598], [100.25769, 20.3992], [100.33383, 20.4028], [100.37439, 20.35156], [100.41473, 20.25625], [100.44992, 20.23644], [100.4537, 20.19971], [100.47567, 20.19133], [100.51052, 20.14928], [100.55218, 20.17741], [100.58808, 20.15791], [100.5094, 19.87904], [100.398, 19.75047], [100.49604, 19.53504], [100.58219, 19.49164], [100.64606, 19.55884], [100.77231, 19.48324], [100.90302, 19.61901], [101.08928, 19.59748], [101.26545, 19.59242], [101.26991, 19.48324], [101.21347, 19.46223], [101.20604, 19.35296], [101.24911, 19.33334], [101.261, 19.12717], [101.35606, 19.04716], [101.25803, 18.89545], [101.22832, 18.73377], [101.27585, 18.68875], [101.06047, 18.43247], [101.18227, 18.34367], [101.15108, 18.25624], [101.19118, 18.2125], [101.1793, 18.0544], [101.02185, 17.87637], [100.96541, 17.57926], [101.15108, 17.47586], [101.44667, 17.7392], [101.72294, 17.92867], [101.78087, 18.07559], [101.88485, 18.02474], [102.11359, 18.21532], [102.45523, 17.97106], [102.59234, 17.96127], [102.60971, 17.95411], [102.61432, 17.92273], [102.5896, 17.84889], [102.59485, 17.83537], [102.68194, 17.80151], [102.69946, 17.81686], [102.67543, 17.84529], [102.68538, 17.86653], [102.75954, 17.89561], [102.79044, 17.93612], [102.81988, 17.94233], [102.86323, 17.97531], [102.95812, 18.0054], [102.9912, 17.9949], [103.01998, 17.97095], [103.0566, 18.00144], [103.07823, 18.03833], [103.07343, 18.12351], [103.1493, 18.17799], [103.14994, 18.23172], [103.17093, 18.2618], [103.29757, 18.30475], [103.23818, 18.34875], [103.24779, 18.37807], [103.30977, 18.4341], [103.41044, 18.4486], [103.47773, 18.42841], [103.60957, 18.40528], [103.699, 18.34125], [103.82449, 18.33979], [103.85642, 18.28666], [103.93916, 18.33914], [103.97725, 18.33631], [104.06533, 18.21656], [104.10927, 18.10826], [104.21776, 17.99335], [104.2757, 17.86139], [104.35432, 17.82871], [104.45404, 17.66788], [104.69867, 17.53038], [104.80061, 17.39367], [104.80716, 17.19025], [104.73712, 17.01404], [104.7373, 16.91125], [104.76442, 16.84752], [104.7397, 16.81005], [104.76099, 16.69302], [104.73349, 16.565], [104.88057, 16.37311], [105.00262, 16.25627], [105.06204, 16.09792], [105.42001, 16.00657], [105.38508, 15.987], [105.34115, 15.92737], [105.37959, 15.84074], [105.42285, 15.76971], [105.46573, 15.74742], [105.61756, 15.68792], [105.60446, 15.53301], [105.58191, 15.41031], [105.47635, 15.3796], [105.4692, 15.33709], [105.50662, 15.32054], [105.58043, 15.32724], [105.46661, 15.13132], [105.61162, 15.00037], [105.5121, 14.80802], [105.53864, 14.55731], [105.43783, 14.43865], [105.20894, 14.34967], [105.2759, 14.17496], [105.36775, 14.09948], [105.44869, 14.10703], [105.5561, 14.15684], [105.78338, 14.08438], [105.78182, 14.02247], [105.90791, 13.92881], [106.10405, 13.9137], [106.10094, 13.98471], [106.16632, 14.01794], [106.18656, 14.06324], [106.11962, 14.11307], [106.10872, 14.18401], [106.04801, 14.20363], [106.02311, 14.30623], [105.99509, 14.32734], [106.00131, 14.36957], [106.21302, 14.36203], [106.25194, 14.48415], [106.32355, 14.44043], [106.40916, 14.45249], [106.43874, 14.52032], [106.47766, 14.50977], [106.45898, 14.55045], [106.50723, 14.58963], [106.54148, 14.59565], [106.57106, 14.50525], [106.59908, 14.50977], [106.63333, 14.44194], [106.73762, 14.42687], [106.80767, 14.31226], [106.8497, 14.29416], [106.90574, 14.33639], [106.9649, 14.3198], [106.98825, 14.36806], [107.04585, 14.41782], [107.03962, 14.45099], [107.09722, 14.3937], [107.17038, 14.41782], [107.21241, 14.48716], [107.256, 14.48716], [107.26534, 14.54292], [107.29803, 14.58963], [107.3276, 14.58812], [107.37897, 14.54443], [107.44435, 14.52785], [107.47238, 14.61523], [107.54361, 14.69092], [107.51579, 14.79282], [107.59285, 14.87795], [107.48277, 14.93751], [107.46516, 15.00982], [107.61486, 15.0566], [107.61926, 15.13949], [107.58844, 15.20111], [107.62587, 15.2266], [107.60605, 15.37524], [107.62367, 15.42193], [107.53341, 15.40496], [107.50699, 15.48771], [107.3815, 15.49832], [107.34408, 15.62345], [107.27583, 15.62769], [107.27143, 15.71459], [107.21859, 15.74638], [107.21419, 15.83747], [107.34188, 15.89464], [107.39471, 15.88829], [107.46296, 16.01106], [107.44975, 16.08511], [107.33968, 16.05549], [107.25822, 16.13587], [107.14595, 16.17816], [107.15035, 16.26271], [107.09091, 16.3092], [107.02597, 16.31132], [106.97385, 16.30204], [106.96638, 16.34938], [106.88067, 16.43594], [106.88727, 16.52671], [106.84104, 16.55415], [106.74418, 16.41904], [106.65832, 16.47816], [106.66052, 16.56892], [106.61477, 16.60713], [106.58267, 16.6012], [106.59013, 16.62259], [106.55485, 16.68704], [106.55265, 16.86831], [106.52183, 16.87884], [106.51963, 16.92097], [106.54824, 16.92729], [106.55045, 17.0031], [106.50862, 16.9673], [106.43597, 17.01362], [106.31929, 17.20509], [106.29287, 17.3018], [106.24444, 17.24714], [106.18991, 17.28227], [106.09019, 17.36399], [105.85744, 17.63221], [105.76612, 17.67147], [105.60381, 17.89356], [105.64784, 17.96687], [105.46292, 18.22008], [105.38366, 18.15315], [105.15942, 18.38691], [105.10408, 18.43533], [105.1327, 18.58355], [105.19654, 18.64196], [105.12829, 18.70453], [104.64617, 18.85668], [104.5361, 18.97747], [103.87125, 19.31854], [104.06058, 19.43484], [104.10832, 19.51575], [104.05617, 19.61743], [104.06498, 19.66926], [104.23229, 19.70242], [104.41281, 19.70035], [104.53169, 19.61743], [104.64837, 19.62365], [104.68359, 19.72729], [104.8355, 19.80395], [104.8465, 19.91783], [104.9874, 20.09573], [104.91695, 20.15567], [104.86852, 20.14121], [104.61315, 20.24452], [104.62195, 20.36633], [104.72102, 20.40554], [104.66158, 20.47774], [104.47886, 20.37459], [104.40621, 20.3849], [104.38199, 20.47155], [104.63957, 20.6653], [104.27412, 20.91433], [104.11121, 20.96779], [103.98024, 20.91531], [103.82282, 20.8732], [103.73478, 20.6669], [103.68633, 20.66324], [103.45737, 20.82382], [103.38032, 20.79501], [103.21497, 20.89832], [103.12055, 20.89994], [103.03469, 21.05821], [102.97745, 21.05821], [102.89825, 21.24707], [102.80794, 21.25736], [102.88939, 21.3107], [102.94223, 21.46034], [102.86297, 21.4255], [102.98846, 21.58936], [102.97965, 21.74076], [102.86077, 21.71213], [102.85637, 21.84501], [102.81894, 21.83888], [102.82115, 21.73667], [102.74189, 21.66713], [102.67145, 21.65894], [102.62301, 21.91447], [102.49092, 21.99002], [102.51734, 22.02676], [102.18712, 22.30403], [102.14099, 22.40092], [102.1245, 22.43372]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LB",
      iso1A3: "LBN",
      iso1N3: "422",
      wikidata: "Q822",
      nameEn: "Lebanon",
      aliases: ["RL"],
      groups: ["145", "142", "UN"],
      callingCodes: ["961"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[35.94816, 33.47886], [35.94465, 33.52774], [36.05723, 33.57904], [35.9341, 33.6596], [36.06778, 33.82927], [36.14517, 33.85118], [36.3967, 33.83365], [36.38263, 33.86579], [36.28589, 33.91981], [36.41078, 34.05253], [36.50576, 34.05982], [36.5128, 34.09916], [36.62537, 34.20251], [36.59195, 34.2316], [36.58667, 34.27667], [36.60778, 34.31009], [36.56556, 34.31881], [36.53039, 34.3798], [36.55853, 34.41609], [36.46179, 34.46541], [36.4442, 34.50165], [36.34745, 34.5002], [36.3369, 34.52629], [36.39846, 34.55672], [36.41429, 34.61175], [36.45299, 34.59438], [36.46003, 34.6378], [36.42941, 34.62505], [36.35384, 34.65447], [36.35135, 34.68516], [36.32399, 34.69334], [36.29165, 34.62991], [35.98718, 34.64977], [35.97386, 34.63322], [35.48515, 34.70851], [34.78515, 33.20368], [35.10645, 33.09318], [35.1924, 33.08743], [35.31429, 33.10515], [35.35223, 33.05617], [35.43059, 33.06659], [35.448, 33.09264], [35.50272, 33.09056], [35.50335, 33.114], [35.52573, 33.11921], [35.54228, 33.19865], [35.5362, 33.23196], [35.54808, 33.236], [35.54544, 33.25513], [35.55555, 33.25844], [35.56523, 33.28969], [35.58326, 33.28381], [35.58502, 33.26653], [35.62283, 33.24226], [35.62019, 33.27278], [35.77477, 33.33609], [35.81324, 33.36354], [35.82577, 33.40479], [35.88668, 33.43183], [35.94816, 33.47886]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LC",
      iso1A3: "LCA",
      iso1N3: "662",
      wikidata: "Q760",
      nameEn: "St. Lucia",
      aliases: ["WL"],
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 758"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-59.95997, 14.20285], [-61.69315, 14.26451], [-59.94058, 12.34011], [-59.95997, 14.20285]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LI",
      iso1A3: "LIE",
      iso1N3: "438",
      wikidata: "Q347",
      nameEn: "Liechtenstein",
      aliases: ["FL"],
      groups: ["155", "150", "UN"],
      callingCodes: ["423"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[9.60717, 47.06091], [9.61216, 47.07732], [9.63395, 47.08443], [9.62623, 47.14685], [9.56539, 47.17124], [9.58264, 47.20673], [9.56981, 47.21926], [9.55176, 47.22585], [9.56766, 47.24281], [9.53116, 47.27029], [9.52406, 47.24959], [9.50318, 47.22153], [9.4891, 47.19346], [9.48774, 47.17402], [9.51044, 47.13727], [9.52089, 47.10019], [9.51362, 47.08505], [9.47139, 47.06402], [9.47548, 47.05257], [9.54041, 47.06495], [9.55721, 47.04762], [9.60717, 47.06091]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LK",
      iso1A3: "LKA",
      iso1N3: "144",
      wikidata: "Q854",
      nameEn: "Sri Lanka",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["94"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[76.59015, 5.591], [85.15017, 5.21497], [80.48418, 10.20786], [79.42124, 9.80115], [79.50447, 8.91876], [76.59015, 5.591]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LR",
      iso1A3: "LBR",
      iso1N3: "430",
      wikidata: "Q1014",
      nameEn: "Liberia",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["231"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-8.47114, 7.55676], [-8.55874, 7.62525], [-8.55874, 7.70167], [-8.67814, 7.69428], [-8.72789, 7.51429], [-8.8448, 7.35149], [-8.85724, 7.26019], [-8.93435, 7.2824], [-9.09107, 7.1985], [-9.18311, 7.30461], [-9.20798, 7.38109], [-9.305, 7.42056], [-9.41943, 7.41809], [-9.48161, 7.37122], [-9.37465, 7.62032], [-9.35724, 7.74111], [-9.44928, 7.9284], [-9.41445, 8.02448], [-9.50898, 8.18455], [-9.47415, 8.35195], [-9.77763, 8.54633], [-10.05873, 8.42578], [-10.05375, 8.50697], [-10.14579, 8.52665], [-10.203, 8.47991], [-10.27575, 8.48711], [-10.30084, 8.30008], [-10.31635, 8.28554], [-10.29839, 8.21283], [-10.35227, 8.15223], [-10.45023, 8.15627], [-10.51554, 8.1393], [-10.57523, 8.04829], [-10.60492, 8.04072], [-10.60422, 7.7739], [-11.29417, 7.21576], [-11.4027, 6.97746], [-11.50429, 6.92704], [-12.15048, 6.15992], [-7.52774, 3.7105], [-7.53259, 4.35145], [-7.59349, 4.8909], [-7.53876, 4.94294], [-7.55369, 5.08667], [-7.48901, 5.14118], [-7.46165, 5.26256], [-7.36463, 5.32944], [-7.43428, 5.42355], [-7.37209, 5.61173], [-7.43926, 5.74787], [-7.43677, 5.84687], [-7.46165, 5.84934], [-7.48155, 5.80974], [-7.67309, 5.94337], [-7.70294, 5.90625], [-7.78254, 5.99037], [-7.79747, 6.07696], [-7.8497, 6.08932], [-7.83478, 6.20309], [-7.90692, 6.27728], [-8.00642, 6.31684], [-8.17557, 6.28222], [-8.3298, 6.36381], [-8.38453, 6.35887], [-8.45666, 6.49977], [-8.48652, 6.43797], [-8.59456, 6.50612], [-8.31736, 6.82837], [-8.29249, 7.1691], [-8.37458, 7.25794], [-8.41935, 7.51203], [-8.47114, 7.55676]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LS",
      iso1A3: "LSO",
      iso1N3: "426",
      wikidata: "Q1013",
      nameEn: "Lesotho",
      groups: ["018", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["266"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[29.33204, -29.45598], [29.44883, -29.3772], [29.40524, -29.21246], [28.68043, -28.58744], [28.65091, -28.57025], [28.40612, -28.6215], [28.30518, -28.69531], [28.2348, -28.69471], [28.1317, -28.7293], [28.02503, -28.85991], [27.98675, -28.8787], [27.9392, -28.84864], [27.88933, -28.88156], [27.8907, -28.91612], [27.75458, -28.89839], [27.55974, -29.18954], [27.5158, -29.2261], [27.54258, -29.25575], [27.48679, -29.29349], [27.45125, -29.29708], [27.47254, -29.31968], [27.4358, -29.33465], [27.33464, -29.48161], [27.01016, -29.65439], [27.09489, -29.72796], [27.22719, -30.00718], [27.29603, -30.05473], [27.32555, -30.14785], [27.40778, -30.14577], [27.37293, -30.19401], [27.36649, -30.27246], [27.38108, -30.33456], [27.45452, -30.32239], [27.56901, -30.42504], [27.56781, -30.44562], [27.62137, -30.50509], [27.6521, -30.51707], [27.67819, -30.53437], [27.69467, -30.55862], [27.74814, -30.60635], [28.12073, -30.68072], [28.2319, -30.28476], [28.399, -30.1592], [28.68627, -30.12885], [28.80222, -30.10579], [28.9338, -30.05072], [29.16548, -29.91706], [29.12553, -29.76266], [29.28545, -29.58456], [29.33204, -29.45598]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LT",
      iso1A3: "LTU",
      iso1N3: "440",
      wikidata: "Q37",
      nameEn: "Lithuania",
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["370"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[24.89005, 56.46666], [24.83686, 56.41565], [24.70022, 56.40483], [24.57353, 56.31525], [24.58143, 56.29125], [24.42746, 56.26522], [24.32334, 56.30226], [24.13139, 56.24881], [24.02657, 56.3231], [23.75726, 56.37282], [23.49803, 56.34307], [23.40486, 56.37689], [23.31606, 56.3827], [23.17312, 56.36795], [23.09531, 56.30511], [22.96988, 56.41213], [22.83048, 56.367], [22.69354, 56.36284], [22.56441, 56.39305], [22.3361, 56.4016], [22.09728, 56.42851], [22.00548, 56.41508], [21.74558, 56.33181], [21.57888, 56.31406], [21.49736, 56.29106], [21.24644, 56.16917], [21.15016, 56.07818], [20.68447, 56.04073], [20.60454, 55.40986], [20.95181, 55.27994], [21.26425, 55.24456], [21.35465, 55.28427], [21.38446, 55.29348], [21.46766, 55.21115], [21.51095, 55.18507], [21.55605, 55.20311], [21.64954, 55.1791], [21.85521, 55.09493], [21.96505, 55.07353], [21.99543, 55.08691], [22.03984, 55.07888], [22.02582, 55.05078], [22.06087, 55.02935], [22.11697, 55.02131], [22.14267, 55.05345], [22.31562, 55.0655], [22.47688, 55.04408], [22.58907, 55.07085], [22.60075, 55.01863], [22.65451, 54.97037], [22.68723, 54.9811], [22.76422, 54.92521], [22.85083, 54.88711], [22.87317, 54.79492], [22.73631, 54.72952], [22.73397, 54.66604], [22.75467, 54.6483], [22.74225, 54.64339], [22.7522, 54.63525], [22.68021, 54.58486], [22.71293, 54.56454], [22.67788, 54.532], [22.70208, 54.45312], [22.7253, 54.41732], [22.79705, 54.36264], [22.83756, 54.40827], [23.00584, 54.38514], [22.99649, 54.35927], [23.05726, 54.34565], [23.04323, 54.31567], [23.104, 54.29794], [23.13905, 54.31567], [23.15526, 54.31076], [23.15938, 54.29894], [23.24656, 54.25701], [23.3494, 54.25155], [23.39525, 54.21672], [23.42418, 54.17911], [23.45223, 54.17775], [23.49196, 54.14764], [23.52702, 54.04622], [23.48261, 53.98855], [23.51284, 53.95052], [23.61677, 53.92691], [23.71726, 53.93379], [23.80543, 53.89558], [23.81309, 53.94205], [23.95098, 53.9613], [23.98837, 53.92554], [24.19638, 53.96405], [24.34128, 53.90076], [24.44411, 53.90076], [24.62275, 54.00217], [24.69652, 54.01901], [24.69185, 53.96543], [24.74279, 53.96663], [24.85311, 54.02862], [24.77131, 54.11091], [24.96894, 54.17589], [24.991, 54.14241], [25.0728, 54.13419], [25.19199, 54.219], [25.22705, 54.26271], [25.35559, 54.26544], [25.509, 54.30267], [25.56823, 54.25212], [25.51452, 54.17799], [25.54724, 54.14925], [25.64875, 54.1259], [25.71084, 54.16704], [25.78563, 54.15747], [25.78553, 54.23327], [25.68513, 54.31727], [25.55425, 54.31591], [25.5376, 54.33158], [25.63371, 54.42075], [25.62203, 54.4656], [25.64813, 54.48704], [25.68045, 54.5321], [25.75977, 54.57252], [25.74122, 54.80108], [25.89462, 54.93438], [25.99129, 54.95705], [26.05907, 54.94631], [26.13386, 54.98924], [26.20397, 54.99729], [26.26941, 55.08032], [26.23202, 55.10439], [26.30628, 55.12536], [26.35121, 55.1525], [26.46249, 55.12814], [26.51481, 55.16051], [26.54753, 55.14181], [26.69243, 55.16718], [26.68075, 55.19787], [26.72983, 55.21788], [26.73017, 55.24226], [26.835, 55.28182], [26.83266, 55.30444], [26.80929, 55.31642], [26.6714, 55.33902], [26.5709, 55.32572], [26.44937, 55.34832], [26.5522, 55.40277], [26.55094, 55.5093], [26.63167, 55.57887], [26.63231, 55.67968], [26.58248, 55.6754], [26.46661, 55.70375], [26.39561, 55.71156], [26.18509, 55.86813], [26.03815, 55.95884], [25.90047, 56.0013], [25.85893, 56.00188], [25.81773, 56.05444], [25.69246, 56.08892], [25.68588, 56.14725], [25.53621, 56.16663], [25.39751, 56.15707], [25.23099, 56.19147], [25.09325, 56.1878], [25.05762, 56.26742], [24.89005, 56.46666]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LU",
      iso1A3: "LUX",
      iso1N3: "442",
      wikidata: "Q32",
      nameEn: "Luxembourg",
      groups: ["EU", "155", "150", "UN"],
      callingCodes: ["352"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[6.1379, 50.12964], [6.1137, 50.13668], [6.12028, 50.16374], [6.08577, 50.17246], [6.06406, 50.15344], [6.03093, 50.16362], [6.02488, 50.18283], [5.96453, 50.17259], [5.95929, 50.13295], [5.89488, 50.11476], [5.8857, 50.07824], [5.85474, 50.06342], [5.86904, 50.04614], [5.8551, 50.02683], [5.81866, 50.01286], [5.82331, 49.99662], [5.83968, 49.9892], [5.83467, 49.97823], [5.81163, 49.97142], [5.80833, 49.96451], [5.77291, 49.96056], [5.77314, 49.93646], [5.73621, 49.89796], [5.78415, 49.87922], [5.75269, 49.8711], [5.75861, 49.85631], [5.74567, 49.85368], [5.75884, 49.84811], [5.74953, 49.84709], [5.74975, 49.83933], [5.74076, 49.83823], [5.7404, 49.83452], [5.74844, 49.82435], [5.74364, 49.82058], [5.74953, 49.81428], [5.75409, 49.79239], [5.78871, 49.7962], [5.82245, 49.75048], [5.83149, 49.74729], [5.82562, 49.72395], [5.84193, 49.72161], [5.86503, 49.72739], [5.88677, 49.70951], [5.86527, 49.69291], [5.86175, 49.67862], [5.9069, 49.66377], [5.90164, 49.6511], [5.90599, 49.63853], [5.88552, 49.63507], [5.88393, 49.62802], [5.87609, 49.62047], [5.8762, 49.60898], [5.84826, 49.5969], [5.84971, 49.58674], [5.86986, 49.58756], [5.87256, 49.57539], [5.8424, 49.56082], [5.84692, 49.55663], [5.84143, 49.5533], [5.81838, 49.54777], [5.80871, 49.5425], [5.81664, 49.53775], [5.83648, 49.5425], [5.84466, 49.53027], [5.83467, 49.52717], [5.83389, 49.52152], [5.86571, 49.50015], [5.94128, 49.50034], [5.94224, 49.49608], [5.96876, 49.49053], [5.97693, 49.45513], [6.02648, 49.45451], [6.02743, 49.44845], [6.04176, 49.44801], [6.05553, 49.46663], [6.07887, 49.46399], [6.08373, 49.45594], [6.10072, 49.45268], [6.09845, 49.46351], [6.10325, 49.4707], [6.12346, 49.4735], [6.12814, 49.49365], [6.14321, 49.48796], [6.16115, 49.49297], [6.15366, 49.50226], [6.17386, 49.50934], [6.19543, 49.50536], [6.2409, 49.51408], [6.25029, 49.50609], [6.27875, 49.503], [6.28818, 49.48465], [6.3687, 49.4593], [6.36778, 49.46937], [6.36907, 49.48931], [6.36788, 49.50377], [6.35666, 49.52931], [6.38072, 49.55171], [6.38228, 49.55855], [6.35825, 49.57053], [6.36676, 49.57813], [6.38024, 49.57593], [6.38342, 49.5799], [6.37464, 49.58886], [6.385, 49.59946], [6.39822, 49.60081], [6.41861, 49.61723], [6.4413, 49.65722], [6.43768, 49.66021], [6.42726, 49.66078], [6.42937, 49.66857], [6.44654, 49.67799], [6.46048, 49.69092], [6.48014, 49.69767], [6.49785, 49.71118], [6.50647, 49.71353], [6.5042, 49.71808], [6.49694, 49.72205], [6.49535, 49.72645], [6.50261, 49.72718], [6.51397, 49.72058], [6.51805, 49.72425], [6.50193, 49.73291], [6.50174, 49.75292], [6.51646, 49.75961], [6.51828, 49.76855], [6.51056, 49.77515], [6.51669, 49.78336], [6.50534, 49.78952], [6.52169, 49.79787], [6.53122, 49.80666], [6.52121, 49.81338], [6.51215, 49.80124], [6.50647, 49.80916], [6.48718, 49.81267], [6.47111, 49.82263], [6.45425, 49.81164], [6.44131, 49.81443], [6.42905, 49.81091], [6.42521, 49.81591], [6.40022, 49.82029], [6.36576, 49.85032], [6.34267, 49.84974], [6.33585, 49.83785], [6.32098, 49.83728], [6.32303, 49.85133], [6.30963, 49.87021], [6.29692, 49.86685], [6.28874, 49.87592], [6.26146, 49.88203], [6.23496, 49.89972], [6.22926, 49.92096], [6.21882, 49.92403], [6.22608, 49.929], [6.22094, 49.94955], [6.19856, 49.95053], [6.19089, 49.96991], [6.18045, 49.96611], [6.18554, 49.95622], [6.17872, 49.9537], [6.16466, 49.97086], [6.1701, 49.98518], [6.14147, 49.99563], [6.14948, 50.00908], [6.13806, 50.01056], [6.1295, 50.01849], [6.13273, 50.02019], [6.13794, 50.01466], [6.14666, 50.02207], [6.13044, 50.02929], [6.13458, 50.04141], [6.11274, 50.05916], [6.12055, 50.09171], [6.1379, 50.12964]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LV",
      iso1A3: "LVA",
      iso1N3: "428",
      wikidata: "Q211",
      nameEn: "Latvia",
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["371"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[27.34698, 57.52242], [26.90364, 57.62823], [26.54675, 57.51813], [26.46527, 57.56885], [26.29253, 57.59244], [26.1866, 57.6849], [26.2029, 57.7206], [26.08098, 57.76619], [26.0543, 57.76105], [26.03332, 57.7718], [26.02415, 57.76865], [26.02069, 57.77169], [26.0266, 57.77441], [26.027, 57.78158], [26.02456, 57.78342], [26.0324, 57.79037], [26.05949, 57.84744], [25.73499, 57.90193], [25.29581, 58.08288], [25.28237, 57.98539], [25.19484, 58.0831], [24.3579, 57.87471], [24.26221, 57.91787], [23.20055, 57.56697], [22.80496, 57.87798], [19.84909, 57.57876], [19.64795, 57.06466], [20.68447, 56.04073], [21.15016, 56.07818], [21.24644, 56.16917], [21.49736, 56.29106], [21.57888, 56.31406], [21.74558, 56.33181], [22.00548, 56.41508], [22.09728, 56.42851], [22.3361, 56.4016], [22.56441, 56.39305], [22.69354, 56.36284], [22.83048, 56.367], [22.96988, 56.41213], [23.09531, 56.30511], [23.17312, 56.36795], [23.31606, 56.3827], [23.40486, 56.37689], [23.49803, 56.34307], [23.75726, 56.37282], [24.02657, 56.3231], [24.13139, 56.24881], [24.32334, 56.30226], [24.42746, 56.26522], [24.58143, 56.29125], [24.57353, 56.31525], [24.70022, 56.40483], [24.83686, 56.41565], [24.89005, 56.46666], [25.05762, 56.26742], [25.09325, 56.1878], [25.23099, 56.19147], [25.39751, 56.15707], [25.53621, 56.16663], [25.68588, 56.14725], [25.69246, 56.08892], [25.81773, 56.05444], [25.85893, 56.00188], [25.90047, 56.0013], [26.03815, 55.95884], [26.18509, 55.86813], [26.39561, 55.71156], [26.46661, 55.70375], [26.58248, 55.6754], [26.63231, 55.67968], [26.64888, 55.70515], [26.71802, 55.70645], [26.76872, 55.67658], [26.87448, 55.7172], [26.97153, 55.8102], [27.1559, 55.85032], [27.27804, 55.78299], [27.3541, 55.8089], [27.61683, 55.78558], [27.63065, 55.89687], [27.97865, 56.11849], [28.15217, 56.16964], [28.23716, 56.27588], [28.16599, 56.37806], [28.19057, 56.44637], [28.10069, 56.524], [28.13526, 56.57989], [28.04768, 56.59004], [27.86101, 56.88204], [27.66511, 56.83921], [27.86101, 57.29402], [27.52453, 57.42826], [27.56832, 57.53728], [27.34698, 57.52242]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "LY",
      iso1A3: "LBY",
      iso1N3: "434",
      wikidata: "Q1016",
      nameEn: "Libya",
      groups: ["015", "002", "UN"],
      callingCodes: ["218"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[26.92891, 33.39516], [11.58941, 33.36891], [11.55852, 33.1409], [11.51549, 33.09826], [11.46037, 32.6307], [11.57828, 32.48013], [11.53898, 32.4138], [11.04234, 32.2145], [10.7315, 31.97235], [10.62788, 31.96629], [10.48497, 31.72956], [10.31364, 31.72648], [10.12239, 31.42098], [10.29516, 30.90337], [9.88152, 30.34074], [9.76848, 30.34366], [9.55544, 30.23971], [9.3876, 30.16738], [9.78136, 29.40961], [9.89569, 26.57696], [9.51696, 26.39148], [9.38834, 26.19288], [10.03146, 25.35635], [10.02432, 24.98124], [10.33159, 24.5465], [10.85323, 24.5595], [11.41061, 24.21456], [11.62498, 24.26669], [11.96886, 23.51735], [13.5631, 23.16574], [14.22918, 22.61719], [14.99751, 23.00539], [15.99566, 23.49639], [23.99539, 19.49944], [23.99715, 20.00038], [24.99794, 19.99661], [24.99885, 21.99535], [24.99968, 29.24574], [24.71117, 30.17441], [25.01077, 30.73861], [24.8458, 31.39877], [26.92891, 33.39516]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MA",
      iso1A3: "MAR",
      iso1N3: "504",
      wikidata: "Q1028",
      nameEn: "Morocco",
      groups: ["015", "002", "UN"],
      callingCodes: ["212"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-2.27707, 35.35051], [-5.10878, 36.05227], [-7.2725, 35.73269], [-14.43883, 27.02969], [-17.27295, 21.93519], [-17.21511, 21.34226], [-17.02707, 21.34022], [-16.9978, 21.36239], [-16.44269, 21.39745], [-14.78487, 21.36587], [-14.47329, 21.63839], [-14.48112, 22.00886], [-14.1291, 22.41636], [-14.10361, 22.75501], [-13.75627, 23.77231], [-13.00628, 24.01923], [-12.92147, 24.39502], [-12.12281, 25.13682], [-12.06001, 26.04442], [-11.62052, 26.05229], [-11.38635, 26.611], [-11.23622, 26.72023], [-11.35695, 26.8505], [-10.68417, 26.90984], [-9.81998, 26.71379], [-9.56957, 26.90042], [-9.08698, 26.98639], [-8.71787, 26.9898], [-8.77527, 27.66663], [-8.66879, 27.6666], [-8.6715, 28.71194], [-7.61585, 29.36252], [-6.95824, 29.50924], [-6.78351, 29.44634], [-6.69965, 29.51623], [-5.75616, 29.61407], [-5.72121, 29.52322], [-5.58831, 29.48103], [-5.21671, 29.95253], [-4.6058, 30.28343], [-4.31774, 30.53229], [-3.64735, 30.67539], [-3.65418, 30.85566], [-3.54944, 31.0503], [-3.77103, 31.14984], [-3.77647, 31.31912], [-3.66386, 31.39202], [-3.66314, 31.6339], [-2.82784, 31.79459], [-2.93873, 32.06557], [-2.46166, 32.16603], [-1.22829, 32.07832], [-1.15735, 32.12096], [-1.24453, 32.1917], [-1.24998, 32.32993], [-0.9912, 32.52467], [-1.37794, 32.73628], [-1.54244, 32.95499], [-1.46249, 33.0499], [-1.67067, 33.27084], [-1.59508, 33.59929], [-1.73494, 33.71721], [-1.64666, 34.10405], [-1.78042, 34.39018], [-1.69788, 34.48056], [-1.84569, 34.61907], [-1.73707, 34.74226], [-1.97469, 34.886], [-1.97833, 34.93218], [-2.04734, 34.93218], [-2.21445, 35.04378], [-2.21248, 35.08532], [-2.27707, 35.35051]], [[-2.91909, 35.33927], [-2.92272, 35.27509], [-2.93893, 35.26737], [-2.95065, 35.26576], [-2.95431, 35.2728], [-2.96516, 35.27967], [-2.96826, 35.28296], [-2.96507, 35.28801], [-2.97035, 35.28852], [-2.96978, 35.29459], [-2.96648, 35.30475], [-2.96038, 35.31609], [-2.91909, 35.33927]], [[-3.90602, 35.21494], [-3.89343, 35.22728], [-3.88372, 35.20767], [-3.90602, 35.21494]], [[-4.30191, 35.17419], [-4.29436, 35.17149], [-4.30112, 35.17058], [-4.30191, 35.17419]], [[-2.40316, 35.16893], [-2.45965, 35.16527], [-2.43262, 35.20652], [-2.40316, 35.16893]], [[-5.38491, 35.92591], [-5.21179, 35.90091], [-5.34379, 35.8711], [-5.35844, 35.87375], [-5.37338, 35.88417], [-5.38491, 35.92591]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MC",
      iso1A3: "MCO",
      iso1N3: "492",
      wikidata: "Q235",
      nameEn: "Monaco",
      groups: ["155", "150", "UN"],
      callingCodes: ["377"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[7.47823, 43.73341], [7.4379, 43.74963], [7.4389, 43.75151], [7.43708, 43.75197], [7.43624, 43.75014], [7.43013, 43.74895], [7.42809, 43.74396], [7.42443, 43.74087], [7.42299, 43.74176], [7.42062, 43.73977], [7.41233, 43.73439], [7.41298, 43.73311], [7.41291, 43.73168], [7.41113, 43.73156], [7.40903, 43.7296], [7.42422, 43.72209], [7.47823, 43.73341]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MD",
      iso1A3: "MDA",
      iso1N3: "498",
      wikidata: "Q217",
      nameEn: "Moldova",
      groups: ["151", "150", "UN"],
      callingCodes: ["373"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[27.74422, 48.45926], [27.6658, 48.44034], [27.59027, 48.46311], [27.5889, 48.49224], [27.46942, 48.454], [27.44333, 48.41209], [27.37741, 48.41026], [27.37604, 48.44398], [27.32159, 48.4434], [27.27855, 48.37534], [27.13434, 48.37288], [27.08078, 48.43214], [27.0231, 48.42485], [27.03821, 48.37653], [26.93384, 48.36558], [26.85556, 48.41095], [26.71274, 48.40388], [26.82809, 48.31629], [26.79239, 48.29071], [26.6839, 48.35828], [26.62823, 48.25804], [26.81161, 48.25049], [26.87708, 48.19919], [26.94265, 48.1969], [26.98042, 48.15752], [26.96119, 48.13003], [27.04118, 48.12522], [27.02985, 48.09083], [27.15622, 47.98538], [27.1618, 47.92391], [27.29069, 47.73722], [27.25519, 47.71366], [27.32202, 47.64009], [27.3979, 47.59473], [27.47942, 47.48113], [27.55731, 47.46637], [27.60263, 47.32507], [27.68706, 47.28962], [27.73172, 47.29248], [27.81892, 47.1381], [28.09095, 46.97621], [28.12173, 46.82283], [28.24808, 46.64305], [28.22281, 46.50481], [28.25769, 46.43334], [28.18902, 46.35283], [28.19864, 46.31869], [28.10937, 46.22852], [28.13684, 46.18099], [28.08612, 46.01105], [28.13111, 45.92819], [28.16568, 45.6421], [28.08927, 45.6051], [28.18741, 45.47358], [28.21139, 45.46895], [28.30201, 45.54744], [28.41836, 45.51715], [28.43072, 45.48538], [28.51449, 45.49982], [28.49252, 45.56716], [28.54196, 45.58062], [28.51587, 45.6613], [28.47879, 45.66994], [28.52823, 45.73803], [28.70401, 45.78019], [28.69852, 45.81753], [28.78503, 45.83475], [28.74383, 45.96664], [28.98004, 46.00385], [29.00613, 46.04962], [28.94643, 46.09176], [29.06656, 46.19716], [28.94953, 46.25852], [28.98478, 46.31803], [29.004, 46.31495], [28.9306, 46.45699], [29.01241, 46.46177], [29.02409, 46.49582], [29.23547, 46.55435], [29.24886, 46.37912], [29.35357, 46.49505], [29.49914, 46.45889], [29.5939, 46.35472], [29.6763, 46.36041], [29.66359, 46.4215], [29.74496, 46.45605], [29.88329, 46.35851], [29.94114, 46.40114], [30.09103, 46.38694], [30.16794, 46.40967], [30.02511, 46.45132], [29.88916, 46.54302], [29.94409, 46.56002], [29.9743, 46.75325], [29.94522, 46.80055], [29.98814, 46.82358], [29.87405, 46.88199], [29.75458, 46.8604], [29.72986, 46.92234], [29.57056, 46.94766], [29.62137, 47.05069], [29.61038, 47.09932], [29.53044, 47.07851], [29.49732, 47.12878], [29.57696, 47.13581], [29.54996, 47.24962], [29.59665, 47.25521], [29.5733, 47.36508], [29.48678, 47.36043], [29.47854, 47.30366], [29.39889, 47.30179], [29.3261, 47.44664], [29.18603, 47.43387], [29.11743, 47.55001], [29.22414, 47.60012], [29.22242, 47.73607], [29.27255, 47.79953], [29.20663, 47.80367], [29.27804, 47.88893], [29.19839, 47.89261], [29.1723, 47.99013], [28.9306, 47.96255], [28.8414, 48.03392], [28.85232, 48.12506], [28.69896, 48.13106], [28.53921, 48.17453], [28.48428, 48.0737], [28.42454, 48.12047], [28.43701, 48.15832], [28.38712, 48.17567], [28.34009, 48.13147], [28.30609, 48.14018], [28.30586, 48.1597], [28.34912, 48.1787], [28.36996, 48.20543], [28.35519, 48.24957], [28.32508, 48.23384], [28.2856, 48.23202], [28.19314, 48.20749], [28.17666, 48.25963], [28.07504, 48.23494], [28.09873, 48.3124], [28.04527, 48.32661], [27.95883, 48.32368], [27.88391, 48.36699], [27.87533, 48.4037], [27.81902, 48.41874], [27.79225, 48.44244], [27.74422, 48.45926]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ME",
      iso1A3: "MNE",
      iso1N3: "499",
      wikidata: "Q236",
      nameEn: "Montenegro",
      groups: ["039", "150", "UN"],
      callingCodes: ["382"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[19.22807, 43.5264], [19.15685, 43.53943], [19.13933, 43.5282], [19.04934, 43.50384], [19.01078, 43.55806], [18.91379, 43.50299], [18.95469, 43.49367], [18.96053, 43.45042], [19.01078, 43.43854], [19.04071, 43.397], [19.08673, 43.31453], [19.08206, 43.29668], [19.04233, 43.30008], [19.00844, 43.24988], [18.95001, 43.29327], [18.95819, 43.32899], [18.90911, 43.36383], [18.83912, 43.34795], [18.84794, 43.33735], [18.85342, 43.32426], [18.76538, 43.29838], [18.6976, 43.25243], [18.71747, 43.2286], [18.66605, 43.2056], [18.64735, 43.14766], [18.66254, 43.03928], [18.52232, 43.01451], [18.49076, 42.95553], [18.49661, 42.89306], [18.4935, 42.86433], [18.47633, 42.85829], [18.45921, 42.81682], [18.47324, 42.74992], [18.56789, 42.72074], [18.55221, 42.69045], [18.54603, 42.69171], [18.54841, 42.68328], [18.57373, 42.64429], [18.52232, 42.62279], [18.55504, 42.58409], [18.53751, 42.57376], [18.49778, 42.58409], [18.43735, 42.55921], [18.44307, 42.51077], [18.43588, 42.48556], [18.52152, 42.42302], [18.54128, 42.39171], [18.45131, 42.21682], [19.26406, 41.74971], [19.37597, 41.84849], [19.37451, 41.8842], [19.33812, 41.90669], [19.34601, 41.95675], [19.37691, 41.96977], [19.36867, 42.02564], [19.37548, 42.06835], [19.40687, 42.10024], [19.28623, 42.17745], [19.42, 42.33019], [19.42352, 42.36546], [19.4836, 42.40831], [19.65972, 42.62774], [19.73244, 42.66299], [19.77375, 42.58517], [19.74731, 42.57422], [19.76549, 42.50237], [19.82333, 42.46581], [19.9324, 42.51699], [20.00842, 42.5109], [20.01834, 42.54622], [20.07761, 42.55582], [20.0969, 42.65559], [20.02915, 42.71147], [20.02088, 42.74789], [20.04898, 42.77701], [20.2539, 42.76245], [20.27869, 42.81945], [20.35692, 42.8335], [20.34528, 42.90676], [20.16415, 42.97177], [20.14896, 42.99058], [20.12325, 42.96237], [20.05431, 42.99571], [20.04729, 43.02732], [19.98887, 43.0538], [19.96549, 43.11098], [19.92576, 43.08539], [19.79255, 43.11951], [19.76918, 43.16044], [19.64063, 43.19027], [19.62661, 43.2286], [19.54598, 43.25158], [19.52962, 43.31623], [19.48171, 43.32644], [19.44315, 43.38846], [19.22229, 43.47926], [19.22807, 43.5264]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MF",
      iso1A3: "MAF",
      iso1N3: "663",
      wikidata: "Q126125",
      nameEn: "Saint-Martin",
      country: "FR",
      groups: ["Q3320166", "EU", "029", "003", "419", "019", "UN"],
      callingCodes: ["590"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-62.93924, 18.02904], [-62.62718, 18.26185], [-63.35989, 18.06012], [-63.33064, 17.9615], [-63.13502, 18.05445], [-63.11042, 18.05339], [-63.09686, 18.04608], [-63.07759, 18.04943], [-63.0579, 18.06614], [-63.04039, 18.05619], [-63.02323, 18.05757], [-62.93924, 18.02904]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MG",
      iso1A3: "MDG",
      iso1N3: "450",
      wikidata: "Q1019",
      nameEn: "Madagascar",
      aliases: ["RM"],
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["261"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[51.93891, -10.85085], [45.84651, -12.77177], [42.14681, -19.63341], [45.80092, -33.00974], [51.93891, -10.85085]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MH",
      iso1A3: "MHL",
      iso1N3: "584",
      wikidata: "Q709",
      nameEn: "Marshall Islands",
      groups: ["057", "009", "UN"],
      roadSpeedUnit: "mph",
      callingCodes: ["692"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[169, 3.9], [173.53711, 5.70687], [169.29099, 15.77133], [159.04653, 10.59067], [169, 3.9]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MK",
      iso1A3: "MKD",
      iso1N3: "807",
      wikidata: "Q221",
      nameEn: "North Macedonia",
      groups: ["039", "150", "UN"],
      callingCodes: ["389"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[22.34773, 42.31725], [22.29275, 42.34913], [22.29605, 42.37477], [22.16384, 42.32103], [22.02908, 42.29848], [21.94405, 42.34669], [21.91595, 42.30392], [21.84654, 42.3247], [21.77176, 42.2648], [21.70111, 42.23789], [21.58992, 42.25915], [21.52145, 42.24465], [21.50823, 42.27156], [21.43882, 42.2789], [21.43882, 42.23609], [21.38428, 42.24465], [21.30496, 42.1418], [21.29913, 42.13954], [21.31983, 42.10993], [21.22728, 42.08909], [21.16614, 42.19815], [21.11491, 42.20794], [20.75464, 42.05229], [20.76786, 41.91839], [20.68523, 41.85318], [20.59524, 41.8818], [20.55976, 41.87068], [20.57144, 41.7897], [20.53405, 41.78099], [20.51301, 41.72433], [20.52937, 41.69292], [20.51769, 41.65975], [20.55508, 41.58113], [20.52103, 41.56473], [20.45809, 41.5549], [20.45331, 41.51436], [20.49039, 41.49277], [20.51301, 41.442], [20.55976, 41.4087], [20.52119, 41.34381], [20.49432, 41.33679], [20.51068, 41.2323], [20.59715, 41.13644], [20.58546, 41.11179], [20.59832, 41.09066], [20.63454, 41.0889], [20.65558, 41.08009], [20.71634, 40.91781], [20.73504, 40.9081], [20.81567, 40.89662], [20.83671, 40.92752], [20.94305, 40.92399], [20.97693, 40.90103], [20.97887, 40.85475], [21.15262, 40.85546], [21.21105, 40.8855], [21.25779, 40.86165], [21.35595, 40.87578], [21.41555, 40.9173], [21.53007, 40.90759], [21.57448, 40.86076], [21.69601, 40.9429], [21.7556, 40.92525], [21.91102, 41.04786], [21.90869, 41.09191], [22.06527, 41.15617], [22.1424, 41.12449], [22.17629, 41.15969], [22.26744, 41.16409], [22.42285, 41.11921], [22.5549, 41.13065], [22.58295, 41.11568], [22.62852, 41.14385], [22.65306, 41.18168], [22.71266, 41.13945], [22.74538, 41.16321], [22.76408, 41.32225], [22.81199, 41.3398], [22.93334, 41.34104], [22.96331, 41.35782], [22.95513, 41.63265], [23.03342, 41.71034], [23.01239, 41.76527], [22.96682, 41.77137], [22.90254, 41.87587], [22.86749, 42.02275], [22.67701, 42.06614], [22.51224, 42.15457], [22.50289, 42.19527], [22.47251, 42.20393], [22.38136, 42.30339], [22.34773, 42.31725]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ML",
      iso1A3: "MLI",
      iso1N3: "466",
      wikidata: "Q912",
      nameEn: "Mali",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["223"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-4.83423, 24.99935], [-6.57191, 25.0002], [-5.60725, 16.49919], [-5.33435, 16.33354], [-5.50165, 15.50061], [-9.32979, 15.50032], [-9.31106, 15.69412], [-9.33314, 15.7044], [-9.44673, 15.60553], [-9.40447, 15.4396], [-10.71721, 15.4223], [-10.90932, 15.11001], [-11.43483, 15.62339], [-11.70705, 15.51558], [-11.94903, 14.76143], [-12.23936, 14.76324], [-11.93043, 13.84505], [-12.06897, 13.71049], [-11.83345, 13.33333], [-11.63025, 13.39174], [-11.39935, 12.97808], [-11.37536, 12.40788], [-11.50006, 12.17826], [-11.24136, 12.01286], [-10.99758, 12.24634], [-10.80355, 12.1053], [-10.71897, 11.91552], [-10.30604, 12.24634], [-9.714, 12.0226], [-9.63938, 12.18312], [-9.32097, 12.29009], [-9.38067, 12.48446], [-9.13689, 12.50875], [-8.94784, 12.34842], [-8.80854, 11.66715], [-8.40058, 11.37466], [-8.66923, 10.99397], [-8.35083, 11.06234], [-8.2667, 10.91762], [-8.32614, 10.69273], [-8.22711, 10.41722], [-8.10207, 10.44649], [-7.9578, 10.2703], [-7.97971, 10.17117], [-7.92107, 10.15577], [-7.63048, 10.46334], [-7.54462, 10.40921], [-7.52261, 10.4655], [-7.44555, 10.44602], [-7.3707, 10.24677], [-7.13331, 10.24877], [-7.0603, 10.14711], [-7.00966, 10.15794], [-6.97444, 10.21644], [-7.01186, 10.25111], [-6.93921, 10.35291], [-6.68164, 10.35074], [-6.63541, 10.66893], [-6.52974, 10.59104], [-6.42847, 10.5694], [-6.40646, 10.69922], [-6.325, 10.68624], [-6.24795, 10.74248], [-6.1731, 10.46983], [-6.18851, 10.24244], [-5.99478, 10.19694], [-5.78124, 10.43952], [-5.65135, 10.46767], [-5.51058, 10.43177], [-5.46643, 10.56074], [-5.47083, 10.75329], [-5.41579, 10.84628], [-5.49284, 11.07538], [-5.32994, 11.13371], [-5.32553, 11.21578], [-5.25949, 11.24816], [-5.25509, 11.36905], [-5.20665, 11.43811], [-5.22867, 11.60421], [-5.29251, 11.61715], [-5.26389, 11.75728], [-5.40258, 11.8327], [-5.26389, 11.84778], [-5.07897, 11.97918], [-4.72893, 12.01579], [-4.70692, 12.06746], [-4.62987, 12.06531], [-4.62546, 12.13204], [-4.54841, 12.1385], [-4.57703, 12.19875], [-4.41412, 12.31922], [-4.47356, 12.71252], [-4.238, 12.71467], [-4.21819, 12.95722], [-4.34477, 13.12927], [-3.96501, 13.49778], [-3.90558, 13.44375], [-3.96282, 13.38164], [-3.7911, 13.36665], [-3.54454, 13.1781], [-3.4313, 13.1588], [-3.43507, 13.27272], [-3.23599, 13.29035], [-3.28396, 13.5422], [-3.26407, 13.70699], [-2.88189, 13.64921], [-2.90831, 13.81174], [-2.84667, 14.05532], [-2.66175, 14.14713], [-2.47587, 14.29671], [-2.10223, 14.14878], [-1.9992, 14.19011], [-1.97945, 14.47709], [-1.68083, 14.50023], [-1.32166, 14.72774], [-1.05875, 14.7921], [-0.72004, 15.08655], [-0.24673, 15.07805], [0.06588, 14.96961], [0.23859, 15.00135], [0.72632, 14.95898], [0.96711, 14.98275], [1.31275, 15.27978], [3.01806, 15.34571], [3.03134, 15.42221], [3.50368, 15.35934], [4.19893, 16.39923], [4.21787, 17.00118], [4.26762, 17.00432], [4.26651, 19.14224], [3.36082, 18.9745], [3.12501, 19.1366], [3.24648, 19.81703], [1.20992, 20.73533], [1.15698, 21.12843], [-4.83423, 24.99935]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MM",
      iso1A3: "MMR",
      iso1N3: "104",
      wikidata: "Q836",
      nameEn: "Myanmar",
      aliases: ["Burma", "BU"],
      groups: ["035", "142", "UN"],
      callingCodes: ["95"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[92.62187, 21.87037], [92.59775, 21.6092], [92.68152, 21.28454], [92.60187, 21.24615], [92.55105, 21.3856], [92.43158, 21.37025], [92.37939, 21.47764], [92.20087, 21.337], [92.17752, 21.17445], [92.26071, 21.05697], [92.47409, 20.38654], [92.61042, 13.76986], [94.6371, 13.81803], [97.63455, 9.60854], [98.12555, 9.44056], [98.33094, 9.91973], [98.47298, 9.95782], [98.52291, 9.92389], [98.55174, 9.92804], [98.7391, 10.31488], [98.81944, 10.52761], [98.77275, 10.62548], [98.78511, 10.68351], [98.86819, 10.78336], [99.0069, 10.85485], [98.99701, 10.92962], [99.02337, 10.97217], [99.06938, 10.94857], [99.32756, 11.28545], [99.31573, 11.32081], [99.39485, 11.3925], [99.47598, 11.62434], [99.5672, 11.62732], [99.64108, 11.78948], [99.64891, 11.82699], [99.53424, 12.02317], [99.56445, 12.14805], [99.47519, 12.1353], [99.409, 12.60603], [99.29254, 12.68921], [99.18905, 12.84799], [99.18748, 12.9898], [99.10646, 13.05804], [99.12225, 13.19847], [99.20617, 13.20575], [99.16695, 13.72621], [98.97356, 14.04868], [98.56762, 14.37701], [98.24874, 14.83013], [98.18821, 15.13125], [98.22, 15.21327], [98.30446, 15.30667], [98.40522, 15.25268], [98.41906, 15.27103], [98.39351, 15.34177], [98.4866, 15.39154], [98.56027, 15.33471], [98.58598, 15.46821], [98.541, 15.65406], [98.59853, 15.87197], [98.57019, 16.04578], [98.69585, 16.13353], [98.8376, 16.11706], [98.92656, 16.36425], [98.84485, 16.42354], [98.68074, 16.27068], [98.63817, 16.47424], [98.57912, 16.55983], [98.5695, 16.62826], [98.51113, 16.64503], [98.51833, 16.676], [98.51472, 16.68521], [98.51579, 16.69433], [98.51043, 16.70107], [98.49713, 16.69022], [98.50253, 16.7139], [98.46994, 16.73613], [98.53833, 16.81934], [98.49603, 16.8446], [98.52624, 16.89979], [98.39441, 17.06266], [98.34566, 17.04822], [98.10439, 17.33847], [98.11185, 17.36829], [97.91829, 17.54504], [97.76407, 17.71595], [97.66794, 17.88005], [97.73723, 17.97912], [97.60841, 18.23846], [97.64116, 18.29778], [97.56219, 18.33885], [97.50383, 18.26844], [97.34522, 18.54596], [97.36444, 18.57138], [97.5258, 18.4939], [97.76752, 18.58097], [97.73836, 18.88478], [97.66487, 18.9371], [97.73654, 18.9812], [97.73797, 19.04261], [97.83479, 19.09972], [97.84024, 19.22217], [97.78606, 19.26769], [97.84186, 19.29526], [97.78769, 19.39429], [97.88423, 19.5041], [97.84715, 19.55782], [98.04364, 19.65755], [98.03314, 19.80941], [98.13829, 19.78541], [98.24884, 19.67876], [98.51182, 19.71303], [98.56065, 19.67807], [98.83661, 19.80931], [98.98679, 19.7419], [99.0735, 20.10298], [99.20328, 20.12877], [99.416, 20.08614], [99.52943, 20.14811], [99.5569, 20.20676], [99.46077, 20.36198], [99.46008, 20.39673], [99.68255, 20.32077], [99.81096, 20.33687], [99.86383, 20.44371], [99.88211, 20.44488], [99.88451, 20.44596], [99.89168, 20.44548], [99.89301, 20.44311], [99.89692, 20.44789], [99.90499, 20.4487], [99.91616, 20.44986], [99.95721, 20.46301], [100.08404, 20.36626], [100.1957, 20.68247], [100.36375, 20.82783], [100.51079, 20.82194], [100.60112, 20.8347], [100.64628, 20.88279], [100.50974, 20.88574], [100.55281, 21.02796], [100.63578, 21.05639], [100.72716, 21.31786], [100.80173, 21.2934], [101.00234, 21.39612], [101.16198, 21.52808], [101.15156, 21.56129], [101.11744, 21.77659], [100.87265, 21.67396], [100.72143, 21.51898], [100.57861, 21.45637], [100.4811, 21.46148], [100.42892, 21.54325], [100.35201, 21.53176], [100.25863, 21.47043], [100.18447, 21.51898], [100.1625, 21.48704], [100.12542, 21.50365], [100.10757, 21.59945], [100.17486, 21.65306], [100.12679, 21.70539], [100.04956, 21.66843], [99.98654, 21.71064], [99.94003, 21.82782], [99.99084, 21.97053], [99.96612, 22.05965], [99.85351, 22.04183], [99.47585, 22.13345], [99.33166, 22.09656], [99.1552, 22.15874], [99.19176, 22.16983], [99.17318, 22.18025], [99.28771, 22.4105], [99.37972, 22.50188], [99.38247, 22.57544], [99.31243, 22.73893], [99.45654, 22.85726], [99.43537, 22.94086], [99.54218, 22.90014], [99.52214, 23.08218], [99.34127, 23.13099], [99.25741, 23.09025], [99.04601, 23.12215], [99.05975, 23.16382], [98.88597, 23.18656], [98.92515, 23.29535], [98.93958, 23.31414], [98.87573, 23.33038], [98.92104, 23.36946], [98.87683, 23.48995], [98.82877, 23.47908], [98.80294, 23.5345], [98.88396, 23.59555], [98.81775, 23.694], [98.82933, 23.72921], [98.79607, 23.77947], [98.68209, 23.80492], [98.67797, 23.9644], [98.89632, 24.10612], [98.87998, 24.15624], [98.85319, 24.13042], [98.59256, 24.08371], [98.54476, 24.13119], [98.20666, 24.11406], [98.07806, 24.07988], [98.06703, 24.08028], [98.0607, 24.07812], [98.05671, 24.07961], [98.05302, 24.07408], [98.04709, 24.07616], [97.99583, 24.04932], [97.98691, 24.03897], [97.93951, 24.01953], [97.90998, 24.02094], [97.88616, 24.00463], [97.88414, 23.99405], [97.88814, 23.98605], [97.89683, 23.98389], [97.89676, 23.97931], [97.8955, 23.97758], [97.88811, 23.97446], [97.86545, 23.97723], [97.84328, 23.97603], [97.79416, 23.95663], [97.79456, 23.94836], [97.72302, 23.89288], [97.64667, 23.84574], [97.5247, 23.94032], [97.62363, 24.00506], [97.72903, 24.12606], [97.75305, 24.16902], [97.72799, 24.18883], [97.72998, 24.2302], [97.76799, 24.26365], [97.71941, 24.29652], [97.66723, 24.30027], [97.65624, 24.33781], [97.7098, 24.35658], [97.66998, 24.45288], [97.60029, 24.4401], [97.52757, 24.43748], [97.56286, 24.54535], [97.56525, 24.72838], [97.54675, 24.74202], [97.5542, 24.74943], [97.56383, 24.75535], [97.56648, 24.76475], [97.64354, 24.79171], [97.70181, 24.84557], [97.73127, 24.83015], [97.76481, 24.8289], [97.79949, 24.85655], [97.72903, 24.91332], [97.72216, 25.08508], [97.77023, 25.11492], [97.83614, 25.2715], [97.92541, 25.20815], [98.14925, 25.41547], [98.12591, 25.50722], [98.18084, 25.56298], [98.16848, 25.62739], [98.25774, 25.6051], [98.31268, 25.55307], [98.40606, 25.61129], [98.54064, 25.85129], [98.63128, 25.79937], [98.70818, 25.86241], [98.60763, 26.01512], [98.57085, 26.11547], [98.63128, 26.15492], [98.66884, 26.09165], [98.7329, 26.17218], [98.67797, 26.24487], [98.72741, 26.36183], [98.77547, 26.61994], [98.7333, 26.85615], [98.69582, 27.56499], [98.43353, 27.67086], [98.42529, 27.55404], [98.32641, 27.51385], [98.13964, 27.9478], [98.15337, 28.12114], [97.90069, 28.3776], [97.79632, 28.33168], [97.70705, 28.5056], [97.56835, 28.55628], [97.50518, 28.49716], [97.47085, 28.2688], [97.41729, 28.29783], [97.34547, 28.21385], [97.31292, 28.06784], [97.35412, 28.06663], [97.38845, 28.01329], [97.35824, 27.87256], [97.29919, 27.92233], [96.90112, 27.62149], [96.91431, 27.45752], [97.17422, 27.14052], [97.14675, 27.09041], [96.89132, 27.17474], [96.85287, 27.2065], [96.88445, 27.25046], [96.73888, 27.36638], [96.55761, 27.29928], [96.40779, 27.29818], [96.15591, 27.24572], [96.04949, 27.19428], [95.93002, 27.04149], [95.81603, 27.01335], [95.437, 26.7083], [95.30339, 26.65372], [95.23513, 26.68499], [95.05798, 26.45408], [95.12801, 26.38397], [95.11428, 26.1019], [95.18556, 26.07338], [94.80117, 25.49359], [94.68032, 25.47003], [94.57458, 25.20318], [94.74212, 25.13606], [94.73937, 25.00545], [94.60204, 24.70889], [94.5526, 24.70764], [94.50729, 24.59281], [94.45279, 24.56656], [94.32362, 24.27692], [94.30215, 24.23752], [94.14081, 23.83333], [93.92089, 23.95812], [93.80279, 23.92549], [93.75952, 24.0003], [93.62871, 24.00922], [93.50616, 23.94432], [93.46633, 23.97067], [93.41415, 24.07854], [93.34735, 24.10151], [93.32351, 24.04468], [93.36059, 23.93176], [93.3908, 23.92925], [93.3908, 23.7622], [93.43475, 23.68299], [93.38805, 23.4728], [93.39981, 23.38828], [93.38781, 23.36139], [93.36862, 23.35426], [93.38478, 23.13698], [93.2878, 23.00464], [93.12988, 23.05772], [93.134, 22.92498], [93.09417, 22.69459], [93.134, 22.59573], [93.11477, 22.54374], [93.13537, 22.45873], [93.18206, 22.43716], [93.19991, 22.25425], [93.14224, 22.24535], [93.15734, 22.18687], [93.04885, 22.20595], [92.99255, 22.05965], [92.99804, 21.98964], [92.93899, 22.02656], [92.89504, 21.95143], [92.86208, 22.05456], [92.70416, 22.16017], [92.67532, 22.03547], [92.60949, 21.97638], [92.62187, 21.87037]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MN",
      iso1A3: "MNG",
      iso1N3: "496",
      wikidata: "Q711",
      nameEn: "Mongolia",
      groups: ["030", "142", "UN"],
      callingCodes: ["976"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[102.14032, 51.35566], [101.5044, 51.50467], [101.39085, 51.45753], [100.61116, 51.73028], [99.89203, 51.74903], [99.75578, 51.90108], [99.27888, 51.96876], [98.87768, 52.14563], [98.74142, 51.8637], [98.33222, 51.71832], [98.22053, 51.46579], [98.05257, 51.46696], [97.83305, 51.00248], [98.01472, 50.86652], [97.9693, 50.78044], [98.06393, 50.61262], [98.31373, 50.4996], [98.29481, 50.33561], [97.85197, 49.91339], [97.76871, 49.99861], [97.56432, 49.92801], [97.56811, 49.84265], [97.24639, 49.74737], [96.97388, 49.88413], [95.80056, 50.04239], [95.74757, 49.97915], [95.02465, 49.96941], [94.97166, 50.04725], [94.6121, 50.04239], [94.49477, 50.17832], [94.39258, 50.22193], [94.30823, 50.57498], [92.99595, 50.63183], [93.01109, 50.79001], [92.44714, 50.78762], [92.07173, 50.69585], [91.86048, 50.73734], [89.59711, 49.90851], [89.70687, 49.72535], [88.82499, 49.44808], [88.42449, 49.48821], [88.17223, 49.46934], [88.15543, 49.30314], [87.98977, 49.18147], [87.81333, 49.17354], [87.88171, 48.95853], [87.73822, 48.89582], [88.0788, 48.71436], [87.96361, 48.58478], [88.58939, 48.34531], [88.58316, 48.21893], [88.8011, 48.11302], [88.93186, 48.10263], [89.0711, 47.98528], [89.55453, 48.0423], [89.76624, 47.82745], [90.06512, 47.88177], [90.10871, 47.7375], [90.33598, 47.68303], [90.48854, 47.41826], [90.48542, 47.30438], [90.76108, 46.99399], [90.84035, 46.99525], [91.03649, 46.72916], [91.0147, 46.58171], [91.07696, 46.57315], [90.89639, 46.30711], [90.99672, 46.14207], [91.03026, 46.04194], [90.70907, 45.73437], [90.65114, 45.49314], [90.89169, 45.19667], [91.64048, 45.07408], [93.51161, 44.95964], [94.10003, 44.71016], [94.71959, 44.35284], [95.01191, 44.25274], [95.39772, 44.2805], [95.32891, 44.02407], [95.52594, 43.99353], [95.89543, 43.2528], [96.35658, 42.90363], [96.37926, 42.72055], [97.1777, 42.7964], [99.50671, 42.56535], [100.33297, 42.68231], [100.84979, 42.67087], [101.80515, 42.50074], [102.07645, 42.22519], [102.72403, 42.14675], [103.92804, 41.78246], [104.52258, 41.8706], [104.51667, 41.66113], [105.0123, 41.63188], [106.76517, 42.28741], [107.24774, 42.36107], [107.29755, 42.41395], [107.49681, 42.46221], [107.57258, 42.40898], [108.84489, 42.40246], [109.00679, 42.45302], [109.452, 42.44842], [109.89402, 42.63111], [110.08401, 42.6411], [110.4327, 42.78293], [111.0149, 43.3289], [111.59087, 43.51207], [111.79758, 43.6637], [111.93776, 43.68709], [111.96289, 43.81596], [111.40498, 44.3461], [111.76275, 44.98032], [111.98695, 45.09074], [112.4164, 45.06858], [112.74662, 44.86297], [113.70918, 44.72891], [114.5166, 45.27189], [114.54801, 45.38337], [114.74612, 45.43585], [114.94546, 45.37377], [115.60329, 45.44717], [116.16989, 45.68603], [116.27366, 45.78637], [116.24012, 45.8778], [116.26678, 45.96479], [116.58612, 46.30211], [116.75551, 46.33083], [116.83166, 46.38637], [117.36609, 46.36335], [117.41782, 46.57862], [117.60748, 46.59771], [117.69554, 46.50991], [118.30534, 46.73519], [118.78747, 46.68689], [118.8337, 46.77742], [118.89974, 46.77139], [118.92616, 46.72765], [119.00541, 46.74273], [119.10448, 46.65516], [119.24978, 46.64761], [119.32827, 46.61433], [119.42827, 46.63783], [119.65265, 46.62342], [119.68127, 46.59015], [119.77373, 46.62947], [119.80455, 46.67631], [119.89261, 46.66423], [119.91242, 46.90091], [119.85518, 46.92196], [119.71209, 47.19192], [119.62403, 47.24575], [119.56019, 47.24874], [119.54918, 47.29505], [119.31964, 47.42617], [119.35892, 47.48104], [119.13995, 47.53997], [119.12343, 47.66458], [118.7564, 47.76947], [118.55766, 47.99277], [118.29654, 48.00246], [118.22677, 48.03853], [118.11009, 48.04], [118.03676, 48.00982], [117.80196, 48.01661], [117.50181, 47.77216], [117.37875, 47.63627], [116.9723, 47.87285], [116.67405, 47.89039], [116.4465, 47.83662], [116.21879, 47.88505], [115.94296, 47.67741], [115.57128, 47.91988], [115.52082, 48.15367], [115.811, 48.25699], [115.78876, 48.51781], [116.06565, 48.81716], [116.03781, 48.87014], [116.71193, 49.83813], [116.62502, 49.92919], [116.22402, 50.04477], [115.73602, 49.87688], [115.26068, 49.97367], [114.9703, 50.19254], [114.325, 50.28098], [113.20216, 49.83356], [113.02647, 49.60772], [110.64493, 49.1816], [110.39891, 49.25083], [110.24373, 49.16676], [109.51325, 49.22859], [109.18017, 49.34709], [108.53969, 49.32325], [108.27937, 49.53167], [107.95387, 49.66659], [107.96116, 49.93191], [107.36407, 49.97612], [107.1174, 50.04239], [107.00007, 50.1977], [106.80326, 50.30177], [106.58373, 50.34044], [106.51122, 50.34408], [106.49628, 50.32436], [106.47156, 50.31909], [106.07865, 50.33474], [106.05562, 50.40582], [105.32528, 50.4648], [103.70343, 50.13952], [102.71178, 50.38873], [102.32194, 50.67982], [102.14032, 51.35566]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MO",
      iso1A3: "MAC",
      iso1N3: "446",
      wikidata: "Q14773",
      nameEn: "Macau",
      aliases: ["Macao"],
      country: "CN",
      groups: ["030", "142", "UN"],
      driveSide: "left",
      callingCodes: ["853"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[113.54942, 22.14519], [113.54839, 22.10909], [113.57191, 22.07696], [113.63011, 22.10782], [113.60504, 22.20464], [113.57123, 22.20416], [113.56865, 22.20973], [113.5508, 22.21672], [113.54333, 22.21688], [113.54093, 22.21314], [113.53593, 22.2137], [113.53301, 22.21235], [113.53552, 22.20607], [113.52659, 22.18271], [113.54093, 22.15497], [113.54942, 22.14519]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MP",
      iso1A3: "MNP",
      iso1N3: "580",
      wikidata: "Q16644",
      nameEn: "Northern Mariana Islands",
      aliases: ["US-MP"],
      country: "US",
      groups: ["Q1352230", "Q153732", "057", "009", "UN"],
      roadSpeedUnit: "mph",
      callingCodes: ["1 670"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[135.52896, 14.32623], [152.19114, 13.63487], [145.05972, 21.28731], [135.52896, 14.32623]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MQ",
      iso1A3: "MTQ",
      iso1N3: "474",
      wikidata: "Q17054",
      nameEn: "Martinique",
      country: "FR",
      groups: ["Q3320166", "EU", "029", "003", "419", "019", "UN"],
      callingCodes: ["596"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-59.95997, 14.20285], [-61.07821, 15.25109], [-61.69315, 14.26451], [-59.95997, 14.20285]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MR",
      iso1A3: "MRT",
      iso1N3: "478",
      wikidata: "Q1025",
      nameEn: "Mauritania",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["222"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-5.60725, 16.49919], [-6.57191, 25.0002], [-4.83423, 24.99935], [-8.66674, 27.31569], [-8.66721, 25.99918], [-12.0002, 25.9986], [-12.00251, 23.4538], [-12.14969, 23.41935], [-12.36213, 23.3187], [-12.5741, 23.28975], [-13.00412, 23.02297], [-13.10753, 22.89493], [-13.15313, 22.75649], [-13.08438, 22.53866], [-13.01525, 21.33343], [-16.95474, 21.33997], [-16.99806, 21.12142], [-17.0357, 21.05368], [-17.0396, 20.9961], [-17.06781, 20.92697], [-17.0695, 20.85742], [-17.0471, 20.76408], [-17.15288, 16.07139], [-16.50854, 16.09032], [-16.48967, 16.0496], [-16.44814, 16.09753], [-16.4429, 16.20605], [-16.27016, 16.51565], [-15.6509, 16.50315], [-15.00557, 16.64997], [-14.32144, 16.61495], [-13.80075, 16.13961], [-13.43135, 16.09022], [-13.11029, 15.52116], [-12.23936, 14.76324], [-11.94903, 14.76143], [-11.70705, 15.51558], [-11.43483, 15.62339], [-10.90932, 15.11001], [-10.71721, 15.4223], [-9.40447, 15.4396], [-9.44673, 15.60553], [-9.33314, 15.7044], [-9.31106, 15.69412], [-9.32979, 15.50032], [-5.50165, 15.50061], [-5.33435, 16.33354], [-5.60725, 16.49919]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MS",
      iso1A3: "MSR",
      iso1N3: "500",
      wikidata: "Q13353",
      nameEn: "Montserrat",
      country: "GB",
      groups: ["BOTS", "029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 664"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-61.91508, 16.51165], [-62.1023, 16.97277], [-62.58307, 16.68909], [-61.91508, 16.51165]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MT",
      iso1A3: "MLT",
      iso1N3: "470",
      wikidata: "Q233",
      nameEn: "Malta",
      groups: ["EU", "039", "150", "UN"],
      driveSide: "left",
      callingCodes: ["356"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[15.70991, 35.79901], [14.07544, 36.41525], [13.27636, 35.20764], [15.70991, 35.79901]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MU",
      iso1A3: "MUS",
      iso1N3: "480",
      wikidata: "Q1027",
      nameEn: "Mauritius",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["230"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[56.09755, -9.55401], [57.50644, -31.92637], [68.4673, -19.15185], [56.09755, -9.55401]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MV",
      iso1A3: "MDV",
      iso1N3: "462",
      wikidata: "Q826",
      nameEn: "Maldives",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["960"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[71.9161, 8.55531], [72.57428, -3.7623], [76.59015, 5.591], [71.9161, 8.55531]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MW",
      iso1A3: "MWI",
      iso1N3: "454",
      wikidata: "Q1020",
      nameEn: "Malawi",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["265"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.48052, -9.62442], [33.31581, -9.48554], [33.14925, -9.49322], [32.99397, -9.36712], [32.95389, -9.40138], [33.00476, -9.5133], [33.00256, -9.63053], [33.05485, -9.61316], [33.10163, -9.66525], [33.12144, -9.58929], [33.2095, -9.61099], [33.31517, -9.82364], [33.36581, -9.81063], [33.37902, -9.9104], [33.31297, -10.05133], [33.53863, -10.20148], [33.54797, -10.36077], [33.70675, -10.56896], [33.47636, -10.78465], [33.28022, -10.84428], [33.25998, -10.88862], [33.39697, -11.15296], [33.29267, -11.3789], [33.29267, -11.43536], [33.23663, -11.40637], [33.24252, -11.59302], [33.32692, -11.59248], [33.33937, -11.91252], [33.25998, -12.14242], [33.3705, -12.34931], [33.47636, -12.32498], [33.54485, -12.35996], [33.37517, -12.54085], [33.28177, -12.54692], [33.18837, -12.61377], [33.05917, -12.59554], [32.94397, -12.76868], [32.96733, -12.88251], [33.02181, -12.88707], [32.98289, -13.12671], [33.0078, -13.19492], [32.86113, -13.47292], [32.84176, -13.52794], [32.73683, -13.57682], [32.68436, -13.55769], [32.66468, -13.60019], [32.68654, -13.64268], [32.7828, -13.64805], [32.84528, -13.71576], [32.76962, -13.77224], [32.79015, -13.80755], [32.88985, -13.82956], [32.99042, -13.95689], [33.02977, -14.05022], [33.07568, -13.98447], [33.16749, -13.93992], [33.24249, -14.00019], [33.66677, -14.61306], [33.7247, -14.4989], [33.88503, -14.51652], [33.92898, -14.47929], [34.08588, -14.48893], [34.18733, -14.43823], [34.22355, -14.43607], [34.34453, -14.3985], [34.35843, -14.38652], [34.39277, -14.39467], [34.4192, -14.43191], [34.44641, -14.47746], [34.45053, -14.49873], [34.47628, -14.53363], [34.48932, -14.53646], [34.49636, -14.55091], [34.52366, -14.5667], [34.53962, -14.59776], [34.55112, -14.64494], [34.53516, -14.67782], [34.52057, -14.68263], [34.54503, -14.74672], [34.567, -14.77345], [34.61522, -14.99583], [34.57503, -15.30619], [34.43126, -15.44778], [34.44981, -15.60864], [34.25195, -15.90321], [34.43126, -16.04737], [34.40344, -16.20923], [35.04805, -16.83167], [35.13771, -16.81687], [35.17017, -16.93521], [35.04805, -17.00027], [35.0923, -17.13235], [35.3062, -17.1244], [35.27065, -16.93817], [35.30929, -16.82871], [35.27219, -16.69402], [35.14235, -16.56812], [35.25828, -16.4792], [35.30157, -16.2211], [35.43355, -16.11371], [35.52365, -16.15414], [35.70107, -16.10147], [35.80487, -16.03907], [35.85303, -15.41913], [35.78799, -15.17428], [35.91812, -14.89514], [35.87212, -14.89478], [35.86945, -14.67481], [35.5299, -14.27714], [35.47989, -14.15594], [34.86229, -13.48958], [34.60253, -13.48487], [34.37831, -12.17408], [34.46088, -12.0174], [34.70739, -12.15652], [34.82903, -12.04837], [34.57917, -11.87849], [34.64241, -11.57499], [34.96296, -11.57354], [34.91153, -11.39799], [34.79375, -11.32245], [34.63305, -11.11731], [34.61161, -11.01611], [34.67047, -10.93796], [34.65946, -10.6828], [34.57581, -10.56271], [34.51911, -10.12279], [34.54499, -10.0678], [34.03865, -9.49398], [33.95829, -9.54066], [33.9638, -9.62206], [33.93298, -9.71647], [33.76677, -9.58516], [33.48052, -9.62442]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MX",
      iso1A3: "MEX",
      iso1N3: "484",
      wikidata: "Q96",
      nameEn: "Mexico",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["52"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-117.1243, 32.53427], [-118.48109, 32.5991], [-120.12904, 18.41089], [-92.37213, 14.39277], [-92.2261, 14.53423], [-92.1454, 14.6804], [-92.18161, 14.84147], [-92.1423, 14.88647], [-92.1454, 14.98143], [-92.0621, 15.07406], [-92.20983, 15.26077], [-91.73182, 16.07371], [-90.44567, 16.07573], [-90.40499, 16.40524], [-90.61212, 16.49832], [-90.69064, 16.70697], [-91.04436, 16.92175], [-91.43809, 17.25373], [-90.99199, 17.25192], [-90.98678, 17.81655], [-89.14985, 17.81563], [-89.15105, 17.95104], [-89.03839, 18.0067], [-88.8716, 17.89535], [-88.71505, 18.0707], [-88.48242, 18.49164], [-88.3268, 18.49048], [-88.29909, 18.47591], [-88.26593, 18.47617], [-88.03238, 18.41778], [-88.03165, 18.16657], [-87.90671, 18.15213], [-87.87604, 18.18313], [-87.86657, 18.19971], [-87.85693, 18.18266], [-87.84815, 18.18511], [-86.92368, 17.61462], [-85.9092, 21.8218], [-96.92418, 25.97377], [-97.13927, 25.96583], [-97.35946, 25.92189], [-97.37332, 25.83854], [-97.42511, 25.83969], [-97.45669, 25.86874], [-97.49828, 25.89877], [-97.52025, 25.88518], [-97.66511, 26.01708], [-97.95155, 26.0625], [-97.97017, 26.05232], [-98.24603, 26.07191], [-98.27075, 26.09457], [-98.30491, 26.10475], [-98.35126, 26.15129], [-99.00546, 26.3925], [-99.03053, 26.41249], [-99.08477, 26.39849], [-99.53573, 27.30926], [-99.49744, 27.43746], [-99.482, 27.47128], [-99.48045, 27.49016], [-99.50208, 27.50021], [-99.52955, 27.49747], [-99.51478, 27.55836], [-99.55409, 27.61314], [-100.50029, 28.66117], [-100.51222, 28.70679], [-100.5075, 28.74066], [-100.52313, 28.75598], [-100.59809, 28.88197], [-100.63689, 28.90812], [-100.67294, 29.09744], [-100.79696, 29.24688], [-100.87982, 29.296], [-100.94056, 29.33371], [-100.94579, 29.34523], [-100.96725, 29.3477], [-101.01128, 29.36947], [-101.05686, 29.44738], [-101.47277, 29.7744], [-102.60596, 29.8192], [-103.15787, 28.93865], [-104.37752, 29.54255], [-104.39363, 29.55396], [-104.3969, 29.57105], [-104.5171, 29.64671], [-104.77674, 30.4236], [-106.00363, 31.39181], [-106.09025, 31.40569], [-106.20346, 31.46305], [-106.23711, 31.51262], [-106.24612, 31.54193], [-106.28084, 31.56173], [-106.30305, 31.62154], [-106.33419, 31.66303], [-106.34864, 31.69663], [-106.3718, 31.71165], [-106.38003, 31.73151], [-106.41773, 31.75196], [-106.43419, 31.75478], [-106.45244, 31.76523], [-106.46726, 31.75998], [-106.47298, 31.75054], [-106.48815, 31.74769], [-106.50111, 31.75714], [-106.50962, 31.76155], [-106.51251, 31.76922], [-106.52266, 31.77509], [-106.529, 31.784], [-108.20899, 31.78534], [-108.20979, 31.33316], [-111.07523, 31.33232], [-114.82011, 32.49609], [-114.79524, 32.55731], [-114.81141, 32.55543], [-114.80584, 32.62028], [-114.76736, 32.64094], [-114.71871, 32.71894], [-115.88053, 32.63624], [-117.1243, 32.53427]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MY",
      iso1A3: "MYS",
      iso1N3: "458",
      wikidata: "Q833",
      nameEn: "Malaysia"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "MZ",
      iso1A3: "MOZ",
      iso1N3: "508",
      wikidata: "Q1029",
      nameEn: "Mozambique",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["258"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[40.74206, -10.25691], [40.44265, -10.4618], [40.00295, -10.80255], [39.58249, -10.96043], [39.24395, -11.17433], [38.88996, -11.16978], [38.47258, -11.4199], [38.21598, -11.27289], [37.93618, -11.26228], [37.8388, -11.3123], [37.76614, -11.53352], [37.3936, -11.68949], [36.80309, -11.56836], [36.62068, -11.72884], [36.19094, -11.70008], [36.19094, -11.57593], [35.82767, -11.41081], [35.63599, -11.55927], [34.96296, -11.57354], [34.64241, -11.57499], [34.57917, -11.87849], [34.82903, -12.04837], [34.70739, -12.15652], [34.46088, -12.0174], [34.37831, -12.17408], [34.60253, -13.48487], [34.86229, -13.48958], [35.47989, -14.15594], [35.5299, -14.27714], [35.86945, -14.67481], [35.87212, -14.89478], [35.91812, -14.89514], [35.78799, -15.17428], [35.85303, -15.41913], [35.80487, -16.03907], [35.70107, -16.10147], [35.52365, -16.15414], [35.43355, -16.11371], [35.30157, -16.2211], [35.25828, -16.4792], [35.14235, -16.56812], [35.27219, -16.69402], [35.30929, -16.82871], [35.27065, -16.93817], [35.3062, -17.1244], [35.0923, -17.13235], [35.04805, -17.00027], [35.17017, -16.93521], [35.13771, -16.81687], [35.04805, -16.83167], [34.40344, -16.20923], [34.43126, -16.04737], [34.25195, -15.90321], [34.44981, -15.60864], [34.43126, -15.44778], [34.57503, -15.30619], [34.61522, -14.99583], [34.567, -14.77345], [34.54503, -14.74672], [34.52057, -14.68263], [34.53516, -14.67782], [34.55112, -14.64494], [34.53962, -14.59776], [34.52366, -14.5667], [34.49636, -14.55091], [34.48932, -14.53646], [34.47628, -14.53363], [34.45053, -14.49873], [34.44641, -14.47746], [34.4192, -14.43191], [34.39277, -14.39467], [34.35843, -14.38652], [34.34453, -14.3985], [34.22355, -14.43607], [34.18733, -14.43823], [34.08588, -14.48893], [33.92898, -14.47929], [33.88503, -14.51652], [33.7247, -14.4989], [33.66677, -14.61306], [33.24249, -14.00019], [30.22098, -14.99447], [30.41902, -15.62269], [30.42568, -15.9962], [30.91597, -15.99924], [30.97761, -16.05848], [31.13171, -15.98019], [31.30563, -16.01193], [31.42451, -16.15154], [31.67988, -16.19595], [31.90223, -16.34388], [31.91324, -16.41569], [32.02772, -16.43892], [32.28529, -16.43892], [32.42838, -16.4727], [32.71017, -16.59932], [32.69917, -16.66893], [32.78943, -16.70267], [32.97655, -16.70689], [32.91051, -16.89446], [32.84113, -16.92259], [32.96554, -17.11971], [33.00517, -17.30477], [33.0426, -17.3468], [32.96554, -17.48964], [32.98536, -17.55891], [33.0492, -17.60298], [32.94133, -17.99705], [33.03159, -18.35054], [33.02278, -18.4696], [32.88629, -18.51344], [32.88629, -18.58023], [32.95013, -18.69079], [32.9017, -18.7992], [32.82465, -18.77419], [32.70137, -18.84712], [32.73439, -18.92628], [32.69917, -18.94293], [32.72118, -19.02204], [32.84006, -19.0262], [32.87088, -19.09279], [32.85107, -19.29238], [32.77966, -19.36098], [32.78282, -19.47513], [32.84446, -19.48343], [32.84666, -19.68462], [32.95013, -19.67219], [33.06461, -19.77787], [33.01178, -20.02007], [32.93032, -20.03868], [32.85987, -20.16686], [32.85987, -20.27841], [32.66174, -20.56106], [32.55167, -20.56312], [32.48122, -20.63319], [32.51644, -20.91929], [32.37115, -21.133], [32.48236, -21.32873], [32.41234, -21.31246], [31.38336, -22.36919], [31.30611, -22.422], [31.55779, -23.176], [31.56539, -23.47268], [31.67942, -23.60858], [31.70223, -23.72695], [31.77445, -23.90082], [31.87707, -23.95293], [31.90368, -24.18892], [31.9835, -24.29983], [32.03196, -25.10785], [32.01676, -25.38117], [31.97875, -25.46356], [32.00631, -25.65044], [31.92649, -25.84216], [31.974, -25.95387], [32.00916, -25.999], [32.08599, -26.00978], [32.10435, -26.15656], [32.07352, -26.40185], [32.13409, -26.5317], [32.13315, -26.84345], [32.19409, -26.84032], [32.22302, -26.84136], [32.29584, -26.852], [32.35222, -26.86027], [34.51034, -26.91792], [42.99868, -12.65261], [40.74206, -10.25691]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NA",
      iso1A3: "NAM",
      iso1N3: "516",
      wikidata: "Q1030",
      nameEn: "Namibia",
      groups: ["018", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["264"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[14.28743, -17.38814], [13.95896, -17.43141], [13.36212, -16.98048], [12.97145, -16.98567], [12.52111, -17.24495], [12.07076, -17.15165], [11.75063, -17.25013], [10.5065, -17.25284], [12.51595, -32.27486], [16.45332, -28.63117], [16.46592, -28.57126], [16.59922, -28.53246], [16.90446, -28.057], [17.15405, -28.08573], [17.4579, -28.68718], [18.99885, -28.89165], [19.99882, -28.42622], [19.99817, -24.76768], [19.99912, -21.99991], [20.99751, -22.00026], [20.99904, -18.31743], [21.45556, -18.31795], [23.0996, -18.00075], [23.29618, -17.99855], [23.61088, -18.4881], [24.19416, -18.01919], [24.40577, -17.95726], [24.57485, -18.07151], [24.6303, -17.9863], [24.71887, -17.9218], [24.73364, -17.89338], [24.95586, -17.79674], [25.05895, -17.84452], [25.16882, -17.78253], [25.26433, -17.79571], [25.00198, -17.58221], [24.70864, -17.49501], [24.5621, -17.52963], [24.38712, -17.46818], [24.32811, -17.49082], [24.23619, -17.47489], [23.47474, -17.62877], [21.42741, -18.02787], [21.14283, -17.94318], [18.84226, -17.80375], [18.39229, -17.38927], [14.28743, -17.38814]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NC",
      iso1A3: "NCL",
      iso1N3: "540",
      wikidata: "Q33788",
      nameEn: "New Caledonia",
      country: "FR",
      groups: ["Q1451600", "054", "009", "UN"],
      callingCodes: ["687"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[159.77159, -28.41151], [174.245, -23.1974], [156.73836, -14.50464], [159.77159, -28.41151]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NE",
      iso1A3: "NER",
      iso1N3: "562",
      wikidata: "Q1032",
      nameEn: "Niger",
      aliases: ["RN"],
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["227"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[14.22918, 22.61719], [13.5631, 23.16574], [11.96886, 23.51735], [7.48273, 20.87258], [7.38361, 20.79165], [5.8153, 19.45101], [4.26651, 19.14224], [4.26762, 17.00432], [4.21787, 17.00118], [4.19893, 16.39923], [3.50368, 15.35934], [3.03134, 15.42221], [3.01806, 15.34571], [1.31275, 15.27978], [0.96711, 14.98275], [0.72632, 14.95898], [0.23859, 15.00135], [0.16936, 14.51654], [0.38051, 14.05575], [0.61924, 13.68491], [0.77377, 13.6866], [0.77637, 13.64442], [0.99514, 13.5668], [1.02813, 13.46635], [1.20088, 13.38951], [1.24429, 13.39373], [1.28509, 13.35488], [1.24516, 13.33968], [1.21217, 13.37853], [1.18873, 13.31771], [0.99253, 13.37515], [0.99167, 13.10727], [2.26349, 12.41915], [2.05785, 12.35539], [2.39723, 11.89473], [2.45824, 11.98672], [2.39657, 12.10952], [2.37783, 12.24804], [2.6593, 12.30631], [2.83978, 12.40585], [3.25352, 12.01467], [3.31613, 11.88495], [3.48187, 11.86092], [3.59375, 11.70269], [3.61075, 11.69181], [3.67988, 11.75429], [3.67122, 11.80865], [3.63063, 11.83042], [3.61955, 11.91847], [3.67775, 11.97599], [3.63136, 12.11826], [3.66364, 12.25884], [3.65111, 12.52223], [3.94339, 12.74979], [4.10006, 12.98862], [4.14367, 13.17189], [4.14186, 13.47586], [4.23456, 13.47725], [4.4668, 13.68286], [4.87425, 13.78], [4.9368, 13.7345], [5.07396, 13.75052], [5.21026, 13.73627], [5.27797, 13.75474], [5.35437, 13.83567], [5.52957, 13.8845], [6.15771, 13.64564], [6.27411, 13.67835], [6.43053, 13.6006], [6.69617, 13.34057], [6.94445, 12.99825], [7.0521, 13.00076], [7.12676, 13.02445], [7.22399, 13.1293], [7.39241, 13.09717], [7.81085, 13.34902], [8.07997, 13.30847], [8.25185, 13.20369], [8.41853, 13.06166], [8.49493, 13.07519], [8.60431, 13.01768], [8.64251, 12.93985], [8.97413, 12.83661], [9.65995, 12.80614], [10.00373, 13.18171], [10.19993, 13.27129], [10.46731, 13.28819], [10.66004, 13.36422], [11.4535, 13.37773], [11.88236, 13.2527], [12.04209, 13.14452], [12.16189, 13.10056], [12.19315, 13.12423], [12.47095, 13.06673], [12.58033, 13.27805], [12.6793, 13.29157], [12.87376, 13.48919], [13.05085, 13.53984], [13.19844, 13.52802], [13.33213, 13.71195], [13.6302, 13.71094], [13.47559, 14.40881], [13.48259, 14.46704], [13.68573, 14.55276], [13.67878, 14.64013], [13.809, 14.72915], [13.78991, 14.87519], [13.86301, 15.04043], [14.37425, 15.72591], [15.50373, 16.89649], [15.6032, 18.77402], [15.75098, 19.93002], [15.99632, 20.35364], [15.6721, 20.70069], [15.59841, 20.74039], [15.56004, 20.79488], [15.55382, 20.86507], [15.57248, 20.92138], [15.62515, 20.95395], [15.28332, 21.44557], [15.20213, 21.49365], [15.19692, 21.99339], [14.99751, 23.00539], [14.22918, 22.61719]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NF",
      iso1A3: "NFK",
      iso1N3: "574",
      wikidata: "Q31057",
      nameEn: "Norfolk Island",
      country: "AU",
      groups: ["053", "009", "UN"],
      driveSide: "left",
      callingCodes: ["672 3"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[169.82316, -28.16667], [166.29505, -28.29175], [167.94076, -30.60745], [169.82316, -28.16667]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NG",
      iso1A3: "NGA",
      iso1N3: "566",
      wikidata: "Q1033",
      nameEn: "Nigeria",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["234"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[6.15771, 13.64564], [5.52957, 13.8845], [5.35437, 13.83567], [5.27797, 13.75474], [5.21026, 13.73627], [5.07396, 13.75052], [4.9368, 13.7345], [4.87425, 13.78], [4.4668, 13.68286], [4.23456, 13.47725], [4.14186, 13.47586], [4.14367, 13.17189], [4.10006, 12.98862], [3.94339, 12.74979], [3.65111, 12.52223], [3.66364, 12.25884], [3.63136, 12.11826], [3.67775, 11.97599], [3.61955, 11.91847], [3.63063, 11.83042], [3.67122, 11.80865], [3.67988, 11.75429], [3.61075, 11.69181], [3.59375, 11.70269], [3.49175, 11.29765], [3.71505, 11.13015], [3.84243, 10.59316], [3.78292, 10.40538], [3.6844, 10.46351], [3.57275, 10.27185], [3.66908, 10.18136], [3.54429, 9.87739], [3.35383, 9.83641], [3.32099, 9.78032], [3.34726, 9.70696], [3.25093, 9.61632], [3.13928, 9.47167], [3.14147, 9.28375], [3.08017, 9.10006], [2.77907, 9.06924], [2.67523, 7.87825], [2.73095, 7.7755], [2.73405, 7.5423], [2.78668, 7.5116], [2.79442, 7.43486], [2.74489, 7.42565], [2.76965, 7.13543], [2.71702, 6.95722], [2.74024, 6.92802], [2.73405, 6.78508], [2.78823, 6.76356], [2.78204, 6.70514], [2.7325, 6.64057], [2.74334, 6.57291], [2.70464, 6.50831], [2.70566, 6.38038], [2.74181, 6.13349], [5.87055, 3.78489], [8.34397, 4.30689], [8.60302, 4.87353], [8.78027, 5.1243], [8.92029, 5.58403], [8.83687, 5.68483], [8.88156, 5.78857], [8.84209, 5.82562], [9.51757, 6.43874], [9.70674, 6.51717], [9.77824, 6.79088], [9.86314, 6.77756], [10.15135, 7.03781], [10.21466, 6.88996], [10.53639, 6.93432], [10.57214, 7.16345], [10.59746, 7.14719], [10.60789, 7.06885], [10.83727, 6.9358], [10.8179, 6.83377], [10.94302, 6.69325], [11.09644, 6.68437], [11.09495, 6.51717], [11.42041, 6.53789], [11.42264, 6.5882], [11.51499, 6.60892], [11.57755, 6.74059], [11.55818, 6.86186], [11.63117, 6.9905], [11.87396, 7.09398], [11.84864, 7.26098], [11.93205, 7.47812], [12.01844, 7.52981], [11.99908, 7.67302], [12.20909, 7.97553], [12.19271, 8.10826], [12.24782, 8.17904], [12.26123, 8.43696], [12.4489, 8.52536], [12.44146, 8.6152], [12.68722, 8.65938], [12.71701, 8.7595], [12.79, 8.75361], [12.81085, 8.91992], [12.90022, 9.11411], [12.91958, 9.33905], [12.85628, 9.36698], [13.02385, 9.49334], [13.22642, 9.57266], [13.25472, 9.76795], [13.29941, 9.8296], [13.25025, 9.86042], [13.24132, 9.91031], [13.27409, 9.93232], [13.286, 9.9822], [13.25323, 10.00127], [13.25025, 10.03647], [13.34111, 10.12299], [13.43644, 10.13326], [13.5705, 10.53183], [13.54964, 10.61236], [13.73434, 10.9255], [13.70753, 10.94451], [13.7403, 11.00593], [13.78945, 11.00154], [13.97489, 11.30258], [14.17821, 11.23831], [14.6124, 11.51283], [14.64591, 11.66166], [14.55207, 11.72001], [14.61612, 11.7798], [14.6474, 12.17466], [14.4843, 12.35223], [14.22215, 12.36533], [14.17523, 12.41916], [14.20204, 12.53405], [14.08251, 13.0797], [13.6302, 13.71094], [13.33213, 13.71195], [13.19844, 13.52802], [13.05085, 13.53984], [12.87376, 13.48919], [12.6793, 13.29157], [12.58033, 13.27805], [12.47095, 13.06673], [12.19315, 13.12423], [12.16189, 13.10056], [12.04209, 13.14452], [11.88236, 13.2527], [11.4535, 13.37773], [10.66004, 13.36422], [10.46731, 13.28819], [10.19993, 13.27129], [10.00373, 13.18171], [9.65995, 12.80614], [8.97413, 12.83661], [8.64251, 12.93985], [8.60431, 13.01768], [8.49493, 13.07519], [8.41853, 13.06166], [8.25185, 13.20369], [8.07997, 13.30847], [7.81085, 13.34902], [7.39241, 13.09717], [7.22399, 13.1293], [7.12676, 13.02445], [7.0521, 13.00076], [6.94445, 12.99825], [6.69617, 13.34057], [6.43053, 13.6006], [6.27411, 13.67835], [6.15771, 13.64564]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NI",
      iso1A3: "NIC",
      iso1N3: "558",
      wikidata: "Q811",
      nameEn: "Nicaragua",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["505"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-83.13724, 15.00002], [-83.49268, 15.01158], [-83.62101, 14.89448], [-83.89551, 14.76697], [-84.10584, 14.76353], [-84.48373, 14.63249], [-84.70119, 14.68078], [-84.82596, 14.82212], [-84.90082, 14.80489], [-85.1575, 14.53934], [-85.18602, 14.24929], [-85.32149, 14.2562], [-85.45762, 14.11304], [-85.73964, 13.9698], [-85.75477, 13.8499], [-86.03458, 13.99181], [-86.00685, 14.08474], [-86.14801, 14.04317], [-86.35219, 13.77157], [-86.76812, 13.79605], [-86.71267, 13.30348], [-86.87066, 13.30641], [-86.93383, 13.18677], [-86.93197, 13.05313], [-87.03785, 12.98682], [-87.06306, 13.00892], [-87.37107, 12.98646], [-87.55124, 13.12523], [-87.7346, 13.13228], [-88.11443, 12.63306], [-86.14524, 11.09059], [-85.71223, 11.06868], [-85.60529, 11.22607], [-84.92439, 10.9497], [-84.68197, 11.07568], [-83.90838, 10.71161], [-83.66597, 10.79916], [-83.68276, 11.01562], [-82.56142, 11.91792], [-82.06974, 14.49418], [-83.04763, 15.03256], [-83.13724, 15.00002]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NL",
      iso1A3: "NLD",
      iso1N3: "528",
      wikidata: "Q29999",
      nameEn: "Kingdom of the Netherlands"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NO",
      iso1A3: "NOR",
      iso1N3: "578",
      wikidata: "Q20",
      nameEn: "Norway"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NP",
      iso1A3: "NPL",
      iso1N3: "524",
      wikidata: "Q837",
      nameEn: "Nepal",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["977"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[88.13378, 27.88015], [87.82681, 27.95248], [87.72718, 27.80938], [87.56996, 27.84517], [87.11696, 27.84104], [87.03757, 27.94835], [86.75582, 28.04182], [86.74181, 28.10638], [86.56265, 28.09569], [86.51609, 27.96623], [86.42736, 27.91122], [86.22966, 27.9786], [86.18607, 28.17364], [86.088, 28.09264], [86.08333, 28.02121], [86.12069, 27.93047], [86.06309, 27.90021], [85.94946, 27.9401], [85.97813, 27.99023], [85.90743, 28.05144], [85.84672, 28.18187], [85.74864, 28.23126], [85.71907, 28.38064], [85.69105, 28.38475], [85.60854, 28.25045], [85.59765, 28.30529], [85.4233, 28.32996], [85.38127, 28.28336], [85.10729, 28.34092], [85.18668, 28.54076], [85.19135, 28.62825], [85.06059, 28.68562], [84.85511, 28.58041], [84.62317, 28.73887], [84.47528, 28.74023], [84.2231, 28.89571], [84.24801, 29.02783], [84.18107, 29.23451], [83.97559, 29.33091], [83.82303, 29.30513], [83.63156, 29.16249], [83.44787, 29.30513], [83.28131, 29.56813], [83.07116, 29.61957], [82.73024, 29.81695], [82.5341, 29.9735], [82.38622, 30.02608], [82.16984, 30.0692], [82.19475, 30.16884], [82.10757, 30.23745], [82.10135, 30.35439], [81.99082, 30.33423], [81.62033, 30.44703], [81.5459, 30.37688], [81.41018, 30.42153], [81.39928, 30.21862], [81.33355, 30.15303], [81.2623, 30.14596], [81.29032, 30.08806], [81.24362, 30.0126], [81.12842, 30.01395], [81.03953, 30.20059], [80.92547, 30.17193], [80.91143, 30.22173], [80.86673, 30.17321], [80.8778, 30.13384], [80.67076, 29.95732], [80.60226, 29.95732], [80.57179, 29.91422], [80.56247, 29.86661], [80.48997, 29.79566], [80.43458, 29.80466], [80.41554, 29.79451], [80.36803, 29.73865], [80.38428, 29.68513], [80.41858, 29.63581], [80.37939, 29.57098], [80.24322, 29.44299], [80.31428, 29.30784], [80.28626, 29.20327], [80.24112, 29.21414], [80.26602, 29.13938], [80.23178, 29.11626], [80.18085, 29.13649], [80.05743, 28.91479], [80.06957, 28.82763], [80.12125, 28.82346], [80.37188, 28.63371], [80.44504, 28.63098], [80.52443, 28.54897], [80.50575, 28.6706], [80.55142, 28.69182], [81.03471, 28.40054], [81.19847, 28.36284], [81.32923, 28.13521], [81.38683, 28.17638], [81.48179, 28.12148], [81.47867, 28.08303], [81.91223, 27.84995], [81.97214, 27.93322], [82.06554, 27.92222], [82.46405, 27.6716], [82.70378, 27.72122], [82.74119, 27.49838], [82.93261, 27.50328], [82.94938, 27.46036], [83.19413, 27.45632], [83.27197, 27.38309], [83.2673, 27.36235], [83.29999, 27.32778], [83.35136, 27.33885], [83.38872, 27.39276], [83.39495, 27.4798], [83.61288, 27.47013], [83.85595, 27.35797], [83.86182, 27.4241], [83.93306, 27.44939], [84.02229, 27.43836], [84.10791, 27.52399], [84.21376, 27.45218], [84.25735, 27.44941], [84.29315, 27.39], [84.62161, 27.33885], [84.69166, 27.21294], [84.64496, 27.04669], [84.793, 26.9968], [84.82913, 27.01989], [84.85754, 26.98984], [84.96687, 26.95599], [84.97186, 26.9149], [85.00536, 26.89523], [85.05592, 26.88991], [85.02635, 26.85381], [85.15883, 26.86966], [85.19291, 26.86909], [85.18046, 26.80519], [85.21159, 26.75933], [85.34302, 26.74954], [85.47752, 26.79292], [85.56471, 26.84133], [85.5757, 26.85955], [85.59461, 26.85161], [85.61621, 26.86721], [85.66239, 26.84822], [85.73483, 26.79613], [85.72315, 26.67471], [85.76907, 26.63076], [85.83126, 26.61134], [85.85126, 26.60866], [85.8492, 26.56667], [86.02729, 26.66756], [86.13596, 26.60651], [86.22513, 26.58863], [86.26235, 26.61886], [86.31564, 26.61925], [86.49726, 26.54218], [86.54258, 26.53819], [86.57073, 26.49825], [86.61313, 26.48658], [86.62686, 26.46891], [86.69124, 26.45169], [86.74025, 26.42386], [86.76797, 26.45892], [86.82898, 26.43919], [86.94543, 26.52076], [86.95912, 26.52076], [87.01559, 26.53228], [87.04691, 26.58685], [87.0707, 26.58571], [87.09147, 26.45039], [87.14751, 26.40542], [87.18863, 26.40558], [87.24682, 26.4143], [87.26587, 26.40592], [87.26568, 26.37294], [87.34568, 26.34787], [87.37314, 26.40815], [87.46566, 26.44058], [87.51571, 26.43106], [87.55274, 26.40596], [87.59175, 26.38342], [87.66803, 26.40294], [87.67893, 26.43501], [87.76004, 26.40711], [87.7918, 26.46737], [87.84193, 26.43663], [87.89085, 26.48565], [87.90115, 26.44923], [88.00895, 26.36029], [88.09414, 26.43732], [88.09963, 26.54195], [88.16452, 26.64111], [88.1659, 26.68177], [88.19107, 26.75516], [88.12302, 26.95324], [88.13422, 26.98705], [88.11719, 26.98758], [87.9887, 27.11045], [88.01587, 27.21388], [88.01646, 27.21612], [88.07277, 27.43007], [88.04008, 27.49223], [88.19107, 27.79285], [88.1973, 27.85067], [88.13378, 27.88015]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NR",
      iso1A3: "NRU",
      iso1N3: "520",
      wikidata: "Q697",
      nameEn: "Nauru",
      groups: ["057", "009", "UN"],
      driveSide: "left",
      callingCodes: ["674"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[166.95155, 0.14829], [166.21778, -0.7977], [167.60042, -0.88259], [166.95155, 0.14829]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NU",
      iso1A3: "NIU",
      iso1N3: "570",
      wikidata: "Q34020",
      nameEn: "Niue",
      country: "NZ",
      groups: ["061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["683"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-170.83899, -18.53439], [-170.82274, -20.44429], [-168.63096, -18.60489], [-170.83899, -18.53439]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "NZ",
      iso1A3: "NZL",
      iso1N3: "554",
      wikidata: "Q664",
      nameEn: "New Zealand"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "OM",
      iso1A3: "OMN",
      iso1N3: "512",
      wikidata: "Q842",
      nameEn: "Oman",
      groups: ["145", "142", "UN"],
      callingCodes: ["968"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[56.82555, 25.7713], [56.79239, 26.41236], [56.68954, 26.76645], [56.2644, 26.58649], [55.81777, 26.18798], [56.08666, 26.05038], [56.15498, 26.06828], [56.19334, 25.9795], [56.13963, 25.82765], [56.17416, 25.77239], [56.13579, 25.73524], [56.14826, 25.66351], [56.18363, 25.65508], [56.20473, 25.61119], [56.25365, 25.60211], [56.26636, 25.60643], [56.25341, 25.61443], [56.26534, 25.62825], [56.82555, 25.7713]]], [[[56.26062, 25.33108], [56.23362, 25.31253], [56.25008, 25.28843], [56.24465, 25.27505], [56.20838, 25.25668], [56.20872, 25.24104], [56.24341, 25.22867], [56.27628, 25.23404], [56.34438, 25.26653], [56.35172, 25.30681], [56.3111, 25.30107], [56.3005, 25.31815], [56.26062, 25.33108]], [[56.28423, 25.26344], [56.27086, 25.26128], [56.2716, 25.27916], [56.28102, 25.28486], [56.29379, 25.2754], [56.28423, 25.26344]]], [[[61.45114, 22.55394], [56.86325, 25.03856], [56.3227, 24.97284], [56.34873, 24.93205], [56.30269, 24.88334], [56.20568, 24.85063], [56.20062, 24.78565], [56.13684, 24.73699], [56.06128, 24.74457], [56.03535, 24.81161], [55.97836, 24.87673], [55.97467, 24.89639], [56.05106, 24.87461], [56.05715, 24.95727], [55.96316, 25.00857], [55.90849, 24.96771], [55.85094, 24.96858], [55.81116, 24.9116], [55.81348, 24.80102], [55.83408, 24.77858], [55.83271, 24.68567], [55.76461, 24.5287], [55.83271, 24.41521], [55.83395, 24.32776], [55.80747, 24.31069], [55.79145, 24.27914], [55.76781, 24.26209], [55.75939, 24.26114], [55.75382, 24.2466], [55.75257, 24.23466], [55.76558, 24.23227], [55.77658, 24.23476], [55.83367, 24.20193], [55.95472, 24.2172], [56.01799, 24.07426], [55.8308, 24.01633], [55.73301, 24.05994], [55.48677, 23.94946], [55.57358, 23.669], [55.22634, 23.10378], [55.2137, 22.71065], [55.66469, 21.99658], [54.99756, 20.00083], [52.00311, 19.00083], [52.78009, 17.35124], [52.74267, 17.29519], [52.81185, 17.28568], [57.49095, 8.14549], [61.45114, 22.55394]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PA",
      iso1A3: "PAN",
      iso1N3: "591",
      wikidata: "Q804",
      nameEn: "Panama",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["507"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-77.32389, 8.81247], [-77.58292, 9.22278], [-78.79327, 9.93766], [-82.51044, 9.65379], [-82.56507, 9.57279], [-82.61345, 9.49881], [-82.66667, 9.49746], [-82.77206, 9.59573], [-82.87919, 9.62645], [-82.84871, 9.4973], [-82.93516, 9.46741], [-82.93516, 9.07687], [-82.72126, 8.97125], [-82.88253, 8.83331], [-82.91377, 8.774], [-82.92068, 8.74832], [-82.8794, 8.6981], [-82.82739, 8.60153], [-82.83975, 8.54755], [-82.83322, 8.52464], [-82.8382, 8.48117], [-82.8679, 8.44042], [-82.93056, 8.43465], [-83.05209, 8.33394], [-82.9388, 8.26634], [-82.88641, 8.10219], [-82.89137, 8.05755], [-82.89978, 8.04083], [-82.94503, 7.93865], [-82.13751, 6.97312], [-78.06168, 7.07793], [-77.89178, 7.22681], [-77.81426, 7.48319], [-77.72157, 7.47612], [-77.72514, 7.72348], [-77.57185, 7.51147], [-77.17257, 7.97422], [-77.45064, 8.49991], [-77.32389, 8.81247]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PE",
      iso1A3: "PER",
      iso1N3: "604",
      wikidata: "Q419",
      nameEn: "Peru",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["51"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-74.26675, -0.97229], [-74.42701, -0.50218], [-75.18513, -0.0308], [-75.25764, -0.11943], [-75.40192, -0.17196], [-75.61997, -0.10012], [-75.60169, -0.18708], [-75.53615, -0.19213], [-75.22862, -0.60048], [-75.22862, -0.95588], [-75.3872, -0.9374], [-75.57429, -1.55961], [-76.05203, -2.12179], [-76.6324, -2.58397], [-77.94147, -3.05454], [-78.19369, -3.36431], [-78.14324, -3.47653], [-78.22642, -3.51113], [-78.24589, -3.39907], [-78.34362, -3.38633], [-78.68394, -4.60754], [-78.85149, -4.66795], [-79.01659, -5.01481], [-79.1162, -4.97774], [-79.26248, -4.95167], [-79.59402, -4.46848], [-79.79722, -4.47558], [-80.13945, -4.29786], [-80.39256, -4.48269], [-80.46386, -4.41516], [-80.32114, -4.21323], [-80.45023, -4.20938], [-80.4822, -4.05477], [-80.46386, -4.01342], [-80.13232, -3.90317], [-80.19926, -3.68894], [-80.18741, -3.63994], [-80.19848, -3.59249], [-80.21642, -3.5888], [-80.20535, -3.51667], [-80.22629, -3.501], [-80.23651, -3.48652], [-80.24586, -3.48677], [-80.24123, -3.46124], [-80.20647, -3.431], [-80.30602, -3.39149], [-84.52388, -3.36941], [-85.71054, -21.15413], [-70.59118, -18.35072], [-70.378, -18.3495], [-70.31267, -18.31258], [-70.16394, -18.31737], [-69.96732, -18.25992], [-69.81607, -18.12582], [-69.75305, -17.94605], [-69.82868, -17.72048], [-69.79087, -17.65563], [-69.66483, -17.65083], [-69.46897, -17.4988], [-69.46863, -17.37466], [-69.62883, -17.28142], [-69.16896, -16.72233], [-69.00853, -16.66769], [-69.04027, -16.57214], [-68.98358, -16.42165], [-68.79464, -16.33272], [-68.96238, -16.194], [-69.09986, -16.22693], [-69.20291, -16.16668], [-69.40336, -15.61358], [-69.14856, -15.23478], [-69.36254, -14.94634], [-68.88135, -14.18639], [-69.05265, -13.68546], [-68.8864, -13.40792], [-68.85615, -12.87769], [-68.65044, -12.50689], [-68.98115, -11.8979], [-69.57156, -10.94555], [-69.57835, -10.94051], [-69.90896, -10.92744], [-70.38791, -11.07096], [-70.51395, -10.92249], [-70.64134, -11.0108], [-70.62487, -9.80666], [-70.55429, -9.76692], [-70.58453, -9.58303], [-70.53373, -9.42628], [-71.23394, -9.9668], [-72.14742, -9.98049], [-72.31883, -9.5184], [-72.72216, -9.41397], [-73.21498, -9.40904], [-72.92886, -9.04074], [-73.76576, -7.89884], [-73.65485, -7.77897], [-73.96938, -7.58465], [-73.77011, -7.28944], [-73.73986, -6.87919], [-73.12983, -6.43852], [-73.24579, -6.05764], [-72.83973, -5.14765], [-72.64391, -5.0391], [-71.87003, -4.51661], [-70.96814, -4.36915], [-70.77601, -4.15717], [-70.33236, -4.15214], [-70.19582, -4.3607], [-70.11305, -4.27281], [-70.00888, -4.37833], [-69.94708, -4.2431], [-70.3374, -3.79505], [-70.52393, -3.87553], [-70.71396, -3.7921], [-70.04609, -2.73906], [-70.94377, -2.23142], [-71.75223, -2.15058], [-72.92587, -2.44514], [-73.65312, -1.26222], [-74.26675, -0.97229]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PF",
      iso1A3: "PYF",
      iso1N3: "258",
      wikidata: "Q30971",
      nameEn: "French Polynesia",
      country: "FR",
      groups: ["Q1451600", "061", "009", "UN"],
      callingCodes: ["689"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-135.59706, -4.70473], [-156.48634, -15.52824], [-156.45576, -31.75456], [-133.59543, -28.4709], [-135.59706, -4.70473]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PG",
      iso1A3: "PNG",
      iso1N3: "598",
      wikidata: "Q691",
      nameEn: "Papua New Guinea",
      groups: ["054", "009", "UN"],
      driveSide: "left",
      callingCodes: ["675"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[141.03157, 2.12829], [140.99813, -6.3233], [140.85295, -6.72996], [140.90448, -6.85033], [141.01763, -6.90181], [141.01842, -9.35091], [141.88934, -9.36111], [142.19246, -9.15378], [142.48658, -9.36754], [143.29772, -9.33993], [143.87386, -9.02382], [145.2855, -9.62524], [156.73836, -14.50464], [154.74815, -7.33315], [155.60735, -6.92266], [155.69784, -6.92661], [155.92557, -6.84664], [156.03993, -6.65703], [156.03296, -6.55528], [160.43769, -4.17974], [141.03157, 2.12829]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PH",
      iso1A3: "PHL",
      iso1N3: "608",
      wikidata: "Q928",
      nameEn: "Philippines",
      aliases: ["PI", "RP"],
      groups: ["035", "142", "UN"],
      callingCodes: ["63"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[129.19694, 7.84182], [121.8109, 21.77688], [120.69238, 21.52331], [118.82252, 14.67191], [115.39742, 10.92666], [116.79524, 7.43869], [117.17735, 7.52841], [117.93857, 6.89845], [117.98544, 6.27477], [119.52945, 5.35672], [118.93936, 4.09009], [118.06469, 4.16638], [121.14448, 2.12444], [129.19694, 7.84182]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PK",
      iso1A3: "PAK",
      iso1N3: "586",
      wikidata: "Q843",
      nameEn: "Pakistan",
      groups: ["034", "142", "UN"],
      driveSide: "left",
      callingCodes: ["92"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[75.72737, 36.7529], [75.45562, 36.71971], [75.40481, 36.95382], [75.13839, 37.02622], [74.56453, 37.03023], [74.53739, 36.96224], [74.43389, 37.00977], [74.04856, 36.82648], [73.82685, 36.91421], [72.6323, 36.84601], [72.18135, 36.71838], [71.80267, 36.49924], [71.60491, 36.39429], [71.19505, 36.04134], [71.37969, 35.95865], [71.55273, 35.71483], [71.49917, 35.6267], [71.65435, 35.4479], [71.54294, 35.31037], [71.5541, 35.28776], [71.67495, 35.21262], [71.52938, 35.09023], [71.55273, 35.02615], [71.49917, 35.00478], [71.50329, 34.97328], [71.29472, 34.87728], [71.28356, 34.80882], [71.08718, 34.69034], [71.11602, 34.63047], [71.0089, 34.54568], [71.02401, 34.44835], [71.17662, 34.36769], [71.12815, 34.26619], [71.13078, 34.16503], [71.09453, 34.13524], [71.09307, 34.11961], [71.06933, 34.10564], [71.07345, 34.06242], [70.88119, 33.97933], [70.54336, 33.9463], [69.90203, 34.04194], [69.87307, 33.9689], [69.85671, 33.93719], [70.00503, 33.73528], [70.14236, 33.71701], [70.14785, 33.6553], [70.20141, 33.64387], [70.17062, 33.53535], [70.32775, 33.34496], [70.13686, 33.21064], [70.07369, 33.22557], [70.02563, 33.14282], [69.85259, 33.09451], [69.79766, 33.13247], [69.71526, 33.09911], [69.57656, 33.09911], [69.49004, 33.01509], [69.49854, 32.88843], [69.5436, 32.8768], [69.47082, 32.85834], [69.38018, 32.76601], [69.43649, 32.7302], [69.44747, 32.6678], [69.38155, 32.56601], [69.2868, 32.53938], [69.23599, 32.45946], [69.27932, 32.29119], [69.27032, 32.14141], [69.3225, 31.93186], [69.20577, 31.85957], [69.11514, 31.70782], [69.00939, 31.62249], [68.95995, 31.64822], [68.91078, 31.59687], [68.79997, 31.61665], [68.6956, 31.75687], [68.57475, 31.83158], [68.44222, 31.76446], [68.27605, 31.75863], [68.25614, 31.80357], [68.1655, 31.82691], [68.00071, 31.6564], [67.86887, 31.63536], [67.72056, 31.52304], [67.58323, 31.52772], [67.62374, 31.40473], [67.7748, 31.4188], [67.78854, 31.33203], [67.29964, 31.19586], [67.03323, 31.24519], [67.04147, 31.31561], [66.83273, 31.26867], [66.72561, 31.20526], [66.68166, 31.07597], [66.58175, 30.97532], [66.42645, 30.95309], [66.39194, 30.9408], [66.28413, 30.57001], [66.34869, 30.404], [66.23609, 30.06321], [66.36042, 29.9583], [66.24175, 29.85181], [65.04005, 29.53957], [64.62116, 29.58903], [64.19796, 29.50407], [64.12966, 29.39157], [63.5876, 29.50456], [62.47751, 29.40782], [60.87231, 29.86514], [61.31508, 29.38903], [61.53765, 29.00507], [61.65978, 28.77937], [61.93581, 28.55284], [62.40259, 28.42703], [62.59499, 28.24842], [62.79412, 28.28108], [62.7638, 28.02992], [62.84905, 27.47627], [62.79684, 27.34381], [62.80604, 27.22412], [63.19649, 27.25674], [63.32283, 27.14437], [63.25005, 27.08692], [63.25005, 26.84212], [63.18688, 26.83844], [63.1889, 26.65072], [62.77352, 26.64099], [62.31484, 26.528], [62.21304, 26.26601], [62.05117, 26.31647], [61.89391, 26.26251], [61.83831, 26.07249], [61.83968, 25.7538], [61.683, 25.66638], [61.6433, 25.27541], [61.46682, 24.57869], [68.11329, 23.53945], [68.20763, 23.85849], [68.39339, 23.96838], [68.74643, 23.97027], [68.7416, 24.31904], [68.90914, 24.33156], [68.97781, 24.26021], [69.07806, 24.29777], [69.19341, 24.25646], [69.29778, 24.28712], [69.59579, 24.29777], [69.73335, 24.17007], [70.03428, 24.172], [70.11712, 24.30915], [70.5667, 24.43787], [70.57906, 24.27774], [70.71502, 24.23517], [70.88393, 24.27398], [70.85784, 24.30903], [70.94985, 24.3791], [71.04461, 24.34657], [71.12838, 24.42662], [71.00341, 24.46038], [70.97594, 24.60904], [71.09405, 24.69017], [70.94002, 24.92843], [70.89148, 25.15064], [70.66695, 25.39314], [70.67382, 25.68186], [70.60378, 25.71898], [70.53649, 25.68928], [70.37444, 25.67443], [70.2687, 25.71156], [70.0985, 25.93238], [70.08193, 26.08094], [70.17532, 26.24118], [70.17532, 26.55362], [70.05584, 26.60398], [69.88555, 26.56836], [69.50904, 26.74892], [69.58519, 27.18109], [70.03136, 27.56627], [70.12502, 27.8057], [70.37307, 28.01208], [70.60927, 28.02178], [70.79054, 27.68423], [71.89921, 27.96035], [71.9244, 28.11555], [72.20329, 28.3869], [72.29495, 28.66367], [72.40402, 28.78283], [72.94272, 29.02487], [73.01337, 29.16422], [73.05886, 29.1878], [73.28094, 29.56646], [73.3962, 29.94707], [73.58665, 30.01848], [73.80299, 30.06969], [73.97225, 30.19829], [73.95736, 30.28466], [73.88993, 30.36305], [74.5616, 31.04153], [74.67971, 31.05479], [74.6852, 31.12771], [74.60006, 31.13711], [74.60281, 31.10419], [74.56023, 31.08303], [74.51629, 31.13829], [74.53223, 31.30321], [74.59773, 31.4136], [74.64713, 31.45605], [74.59319, 31.50197], [74.61517, 31.55698], [74.57498, 31.60382], [74.47771, 31.72227], [74.58907, 31.87824], [74.79919, 31.95983], [74.86236, 32.04485], [74.9269, 32.0658], [75.00793, 32.03786], [75.25649, 32.10187], [75.38046, 32.26836], [75.28259, 32.36556], [75.03265, 32.49538], [74.97634, 32.45367], [74.84725, 32.49075], [74.68362, 32.49298], [74.67431, 32.56676], [74.65251, 32.56416], [74.64424, 32.60985], [74.69542, 32.66792], [74.65345, 32.71225], [74.7113, 32.84219], [74.64675, 32.82604], [74.6289, 32.75561], [74.45312, 32.77755], [74.41467, 32.90563], [74.31227, 32.92795], [74.34875, 32.97823], [74.31854, 33.02891], [74.17571, 33.07495], [74.15374, 33.13477], [74.02144, 33.18908], [74.01366, 33.25199], [74.08782, 33.26232], [74.17983, 33.3679], [74.18121, 33.4745], [74.10115, 33.56392], [74.03576, 33.56718], [73.97367, 33.64061], [73.98968, 33.66155], [73.96423, 33.73071], [74.00891, 33.75437], [74.05898, 33.82089], [74.14001, 33.83002], [74.26086, 33.92237], [74.25262, 34.01577], [74.21554, 34.03853], [73.91341, 34.01235], [73.88732, 34.05105], [73.90677, 34.10504], [73.98208, 34.2522], [73.90517, 34.35317], [73.8475, 34.32935], [73.74862, 34.34183], [73.74999, 34.3781], [73.88732, 34.48911], [73.89419, 34.54568], [73.93951, 34.57169], [73.93401, 34.63386], [73.96423, 34.68244], [74.12897, 34.70073], [74.31239, 34.79626], [74.58083, 34.77386], [74.6663, 34.703], [75.01479, 34.64629], [75.38009, 34.55021], [75.75438, 34.51827], [76.04614, 34.67566], [76.15463, 34.6429], [76.47186, 34.78965], [76.67648, 34.76371], [76.74377, 34.84039], [76.74514, 34.92488], [76.87193, 34.96906], [76.99251, 34.93349], [77.11796, 35.05419], [76.93465, 35.39866], [76.85088, 35.39754], [76.75475, 35.52617], [76.77323, 35.66062], [76.50961, 35.8908], [76.33453, 35.84296], [76.14913, 35.82848], [76.15325, 35.9264], [75.93028, 36.13136], [76.00906, 36.17511], [76.0324, 36.41198], [75.92391, 36.56986], [75.72737, 36.7529]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PL",
      iso1A3: "POL",
      iso1N3: "616",
      wikidata: "Q36",
      nameEn: "Poland",
      groups: ["EU", "151", "150", "UN"],
      callingCodes: ["48"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[18.57853, 55.25302], [14.20811, 54.12784], [14.22634, 53.9291], [14.20647, 53.91671], [14.18544, 53.91258], [14.20823, 53.90776], [14.21323, 53.8664], [14.27249, 53.74464], [14.26782, 53.69866], [14.2836, 53.67721], [14.27133, 53.66613], [14.28477, 53.65955], [14.2853, 53.63392], [14.31904, 53.61581], [14.30416, 53.55499], [14.3273, 53.50587], [14.35209, 53.49506], [14.4215, 53.27724], [14.44133, 53.27427], [14.45125, 53.26241], [14.40662, 53.21098], [14.37853, 53.20405], [14.36696, 53.16444], [14.38679, 53.13669], [14.35044, 53.05829], [14.25954, 53.00264], [14.14056, 52.95786], [14.15873, 52.87715], [14.12256, 52.84311], [14.13806, 52.82392], [14.22071, 52.81175], [14.61073, 52.59847], [14.6289, 52.57136], [14.60081, 52.53116], [14.63056, 52.48993], [14.54423, 52.42568], [14.55228, 52.35264], [14.56378, 52.33838], [14.58149, 52.28007], [14.70139, 52.25038], [14.71319, 52.22144], [14.68344, 52.19612], [14.70616, 52.16927], [14.67683, 52.13936], [14.6917, 52.10283], [14.72971, 52.09167], [14.76026, 52.06624], [14.71339, 52.00337], [14.70488, 51.97679], [14.7139, 51.95643], [14.71836, 51.95606], [14.72163, 51.95188], [14.7177, 51.94048], [14.70601, 51.92944], [14.6933, 51.9044], [14.6588, 51.88359], [14.59089, 51.83302], [14.60493, 51.80473], [14.64625, 51.79472], [14.66386, 51.73282], [14.69065, 51.70842], [14.75392, 51.67445], [14.75759, 51.62318], [14.7727, 51.61263], [14.71125, 51.56209], [14.73047, 51.54606], [14.72652, 51.53902], [14.73219, 51.52922], [14.94749, 51.47155], [14.9652, 51.44793], [14.96899, 51.38367], [14.98008, 51.33449], [15.04288, 51.28387], [15.01242, 51.21285], [15.0047, 51.16874], [14.99311, 51.16249], [14.99414, 51.15813], [15.00083, 51.14974], [14.99646, 51.14365], [14.99079, 51.14284], [14.99689, 51.12205], [14.98229, 51.11354], [14.97938, 51.07742], [14.95529, 51.04552], [14.92942, 50.99744], [14.89252, 50.94999], [14.89681, 50.9422], [14.81664, 50.88148], [14.82803, 50.86966], [14.99852, 50.86817], [15.01088, 50.97984], [14.96419, 50.99108], [15.02433, 51.0242], [15.03895, 51.0123], [15.06218, 51.02269], [15.10152, 51.01095], [15.11937, 50.99021], [15.16744, 51.01959], [15.1743, 50.9833], [15.2361, 50.99886], [15.27043, 50.97724], [15.2773, 50.8907], [15.36656, 50.83956], [15.3803, 50.77187], [15.43798, 50.80833], [15.73186, 50.73885], [15.81683, 50.75666], [15.87331, 50.67188], [15.97219, 50.69799], [16.0175, 50.63009], [15.98317, 50.61528], [16.02437, 50.60046], [16.10265, 50.66405], [16.20839, 50.63096], [16.23174, 50.67101], [16.33611, 50.66579], [16.44597, 50.58041], [16.34572, 50.49575], [16.31413, 50.50274], [16.19526, 50.43291], [16.21585, 50.40627], [16.22821, 50.41054], [16.28118, 50.36891], [16.30289, 50.38292], [16.36495, 50.37679], [16.3622, 50.34875], [16.39379, 50.3207], [16.42674, 50.32509], [16.56407, 50.21009], [16.55446, 50.16613], [16.63137, 50.1142], [16.7014, 50.09659], [16.8456, 50.20834], [16.98018, 50.24172], [17.00353, 50.21449], [17.02825, 50.23118], [16.99803, 50.25753], [17.02138, 50.27772], [16.99803, 50.30316], [16.94448, 50.31281], [16.90877, 50.38642], [16.85933, 50.41093], [16.89229, 50.45117], [17.1224, 50.39494], [17.14498, 50.38117], [17.19579, 50.38817], [17.19991, 50.3654], [17.27681, 50.32246], [17.34273, 50.32947], [17.34548, 50.2628], [17.3702, 50.28123], [17.58889, 50.27837], [17.67764, 50.28977], [17.69292, 50.32859], [17.74648, 50.29966], [17.72176, 50.25665], [17.76296, 50.23382], [17.70528, 50.18812], [17.59404, 50.16437], [17.66683, 50.10275], [17.6888, 50.12037], [17.7506, 50.07896], [17.77669, 50.02253], [17.86886, 49.97452], [18.00191, 50.01723], [18.04585, 50.01194], [18.04585, 50.03311], [18.00396, 50.04954], [18.03212, 50.06574], [18.07898, 50.04535], [18.10628, 50.00223], [18.20241, 49.99958], [18.21752, 49.97309], [18.27107, 49.96779], [18.27794, 49.93863], [18.31914, 49.91565], [18.33278, 49.92415], [18.33562, 49.94747], [18.41604, 49.93498], [18.53423, 49.89906], [18.54495, 49.9079], [18.54299, 49.92537], [18.57697, 49.91565], [18.57045, 49.87849], [18.60341, 49.86256], [18.57183, 49.83334], [18.61278, 49.7618], [18.61368, 49.75426], [18.62645, 49.75002], [18.62943, 49.74603], [18.62676, 49.71983], [18.69817, 49.70473], [18.72838, 49.68163], [18.80479, 49.6815], [18.84786, 49.5446], [18.84521, 49.51672], [18.94536, 49.52143], [18.97283, 49.49914], [18.9742, 49.39557], [19.18019, 49.41165], [19.25435, 49.53391], [19.36009, 49.53747], [19.37795, 49.574], [19.45348, 49.61583], [19.52626, 49.57311], [19.53313, 49.52856], [19.57845, 49.46077], [19.64162, 49.45184], [19.6375, 49.40897], [19.72127, 49.39288], [19.78581, 49.41701], [19.82237, 49.27806], [19.75286, 49.20751], [19.86409, 49.19316], [19.90529, 49.23532], [19.98494, 49.22904], [20.08238, 49.1813], [20.13738, 49.31685], [20.21977, 49.35265], [20.31453, 49.34817], [20.31728, 49.39914], [20.39939, 49.3896], [20.46422, 49.41612], [20.5631, 49.375], [20.61666, 49.41791], [20.72274, 49.41813], [20.77971, 49.35383], [20.9229, 49.29626], [20.98733, 49.30774], [21.09799, 49.37176], [21.041, 49.41791], [21.12477, 49.43666], [21.19756, 49.4054], [21.27858, 49.45988], [21.43376, 49.41433], [21.62328, 49.4447], [21.77983, 49.35443], [21.82927, 49.39467], [21.96385, 49.3437], [22.04427, 49.22136], [22.56155, 49.08865], [22.89122, 49.00725], [22.86336, 49.10513], [22.72009, 49.20288], [22.748, 49.32759], [22.69444, 49.49378], [22.64534, 49.53094], [22.78304, 49.65543], [22.80261, 49.69098], [22.83179, 49.69875], [22.99329, 49.84249], [23.28221, 50.0957], [23.67635, 50.33385], [23.71382, 50.38248], [23.79445, 50.40481], [23.99563, 50.41289], [24.03668, 50.44507], [24.07048, 50.5071], [24.0996, 50.60752], [24.0595, 50.71625], [23.95925, 50.79271], [23.99254, 50.83847], [24.0952, 50.83262], [24.14524, 50.86128], [24.04576, 50.90196], [23.92217, 51.00836], [23.90376, 51.07697], [23.80678, 51.18405], [23.63858, 51.32182], [23.69905, 51.40871], [23.62751, 51.50512], [23.56236, 51.53673], [23.57053, 51.55938], [23.53198, 51.74298], [23.62691, 51.78208], [23.61523, 51.92066], [23.68733, 51.9906], [23.64066, 52.07626], [23.61, 52.11264], [23.54314, 52.12148], [23.47859, 52.18215], [23.20071, 52.22848], [23.18196, 52.28812], [23.34141, 52.44845], [23.45112, 52.53774], [23.58296, 52.59868], [23.73615, 52.6149], [23.93763, 52.71332], [23.91805, 52.94016], [23.94689, 52.95919], [23.92184, 53.02079], [23.87548, 53.0831], [23.91393, 53.16469], [23.85657, 53.22923], [23.81995, 53.24131], [23.62004, 53.60942], [23.51284, 53.95052], [23.48261, 53.98855], [23.52702, 54.04622], [23.49196, 54.14764], [23.45223, 54.17775], [23.42418, 54.17911], [23.39525, 54.21672], [23.3494, 54.25155], [23.24656, 54.25701], [23.15938, 54.29894], [23.15526, 54.31076], [23.13905, 54.31567], [23.104, 54.29794], [23.04323, 54.31567], [23.05726, 54.34565], [22.99649, 54.35927], [23.00584, 54.38514], [22.83756, 54.40827], [22.79705, 54.36264], [21.41123, 54.32395], [20.63871, 54.3706], [19.8038, 54.44203], [19.64312, 54.45423], [18.57853, 55.25302]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PM",
      iso1A3: "SPM",
      iso1N3: "666",
      wikidata: "Q34617",
      nameEn: "Saint Pierre and Miquelon",
      country: "FR",
      groups: ["Q1451600", "021", "003", "019", "UN"],
      callingCodes: ["508"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-56.72993, 46.65575], [-55.90758, 46.6223], [-56.27503, 47.39728], [-56.72993, 46.65575]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PN",
      iso1A3: "PCN",
      iso1N3: "612",
      wikidata: "Q35672",
      nameEn: "Pitcairn Islands",
      country: "GB",
      groups: ["BOTS", "061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["64"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-133.59543, -28.4709], [-122.0366, -24.55017], [-133.61511, -21.93325], [-133.59543, -28.4709]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PR",
      iso1A3: "PRI",
      iso1N3: "630",
      wikidata: "Q1183",
      nameEn: "Puerto Rico",
      aliases: ["US-PR"],
      country: "US",
      groups: ["Q1352230", "029", "003", "419", "019", "UN"],
      roadSpeedUnit: "mph",
      callingCodes: ["1 787", "1 939"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-65.27974, 17.56928], [-65.02435, 18.73231], [-67.99519, 18.97186], [-68.23894, 17.84663], [-65.27974, 17.56928]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PS",
      iso1A3: "PSE",
      iso1N3: "275",
      wikidata: "Q219060",
      nameEn: "Palestine"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PT",
      iso1A3: "PRT",
      iso1N3: "620",
      wikidata: "Q45",
      nameEn: "Portugal"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PW",
      iso1A3: "PLW",
      iso1N3: "585",
      wikidata: "Q695",
      nameEn: "Palau",
      groups: ["057", "009", "UN"],
      roadSpeedUnit: "mph",
      callingCodes: ["680"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[128.97621, 3.08804], [136.39296, 1.54187], [136.04605, 12.45908], [128.97621, 3.08804]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "PY",
      iso1A3: "PRY",
      iso1N3: "600",
      wikidata: "Q733",
      nameEn: "Paraguay",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["595"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-58.16225, -20.16193], [-58.23216, -19.80058], [-59.06965, -19.29148], [-60.00638, -19.2981], [-61.73723, -19.63958], [-61.93912, -20.10053], [-62.26883, -20.55311], [-62.2757, -21.06657], [-62.64455, -22.25091], [-62.51761, -22.37684], [-62.22768, -22.55807], [-61.9756, -23.0507], [-61.0782, -23.62932], [-60.99754, -23.80934], [-60.28163, -24.04436], [-60.03367, -24.00701], [-59.45482, -24.34787], [-59.33886, -24.49935], [-58.33055, -24.97099], [-58.25492, -24.92528], [-57.80821, -25.13863], [-57.57431, -25.47269], [-57.87176, -25.93604], [-58.1188, -26.16704], [-58.3198, -26.83443], [-58.65321, -27.14028], [-58.59549, -27.29973], [-58.04205, -27.2387], [-56.85337, -27.5165], [-56.18313, -27.29851], [-55.89195, -27.3467], [-55.74475, -27.44485], [-55.59094, -27.32444], [-55.62322, -27.1941], [-55.39611, -26.97679], [-55.25243, -26.93808], [-55.16948, -26.96068], [-55.06351, -26.80195], [-55.00584, -26.78754], [-54.80868, -26.55669], [-54.70732, -26.45099], [-54.69333, -26.37705], [-54.67359, -25.98607], [-54.60664, -25.9691], [-54.62063, -25.91213], [-54.59398, -25.59224], [-54.59509, -25.53696], [-54.60196, -25.48397], [-54.62033, -25.46026], [-54.4423, -25.13381], [-54.28207, -24.07305], [-54.32807, -24.01865], [-54.6238, -23.83078], [-55.02691, -23.97317], [-55.0518, -23.98666], [-55.12292, -23.99669], [-55.41784, -23.9657], [-55.44117, -23.9185], [-55.43585, -23.87157], [-55.5555, -23.28237], [-55.52288, -23.2595], [-55.5446, -23.22811], [-55.63849, -22.95122], [-55.62493, -22.62765], [-55.68742, -22.58407], [-55.6986, -22.56268], [-55.72366, -22.5519], [-55.741, -22.52018], [-55.74941, -22.46436], [-55.8331, -22.29008], [-56.23206, -22.25347], [-56.45893, -22.08072], [-56.5212, -22.11556], [-56.6508, -22.28387], [-57.98625, -22.09157], [-57.94642, -21.73799], [-57.88239, -21.6868], [-57.93492, -21.65505], [-57.84536, -20.93155], [-58.16225, -20.16193]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "QA",
      iso1A3: "QAT",
      iso1N3: "634",
      wikidata: "Q846",
      nameEn: "Qatar",
      groups: ["145", "142", "UN"],
      callingCodes: ["974"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[50.92992, 24.54396], [51.09638, 24.46907], [51.29972, 24.50747], [51.39468, 24.62785], [51.58834, 24.66608], [51.83108, 24.71675], [51.83682, 26.70231], [50.93865, 26.30758], [50.81266, 25.88946], [50.86149, 25.6965], [50.7801, 25.595], [50.80824, 25.54641], [50.57069, 25.57887], [50.8133, 24.74049], [50.92992, 24.54396]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "RE",
      iso1A3: "REU",
      iso1N3: "638",
      wikidata: "Q17070",
      nameEn: "R\xE9union",
      country: "FR",
      groups: ["Q3320166", "EU", "014", "202", "002", "UN"],
      callingCodes: ["262"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[53.37984, -21.23941], [56.73473, -21.9174], [56.62373, -20.2711], [53.37984, -21.23941]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "RO",
      iso1A3: "ROU",
      iso1N3: "642",
      wikidata: "Q218",
      nameEn: "Romania",
      groups: ["EU", "151", "150", "UN"],
      callingCodes: ["40"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[27.15622, 47.98538], [27.02985, 48.09083], [27.04118, 48.12522], [26.96119, 48.13003], [26.98042, 48.15752], [26.94265, 48.1969], [26.87708, 48.19919], [26.81161, 48.25049], [26.62823, 48.25804], [26.55202, 48.22445], [26.33504, 48.18418], [26.17711, 47.99246], [26.05901, 47.9897], [25.77723, 47.93919], [25.63878, 47.94924], [25.23778, 47.89403], [25.11144, 47.75203], [24.88896, 47.7234], [24.81893, 47.82031], [24.70632, 47.84428], [24.61994, 47.95062], [24.43578, 47.97131], [24.34926, 47.9244], [24.22566, 47.90231], [24.11281, 47.91487], [24.06466, 47.95317], [24.02999, 47.95087], [24.00801, 47.968], [23.98553, 47.96076], [23.96337, 47.96672], [23.94192, 47.94868], [23.89352, 47.94512], [23.8602, 47.9329], [23.80904, 47.98142], [23.75188, 47.99705], [23.66262, 47.98786], [23.63894, 48.00293], [23.5653, 48.00499], [23.52803, 48.01818], [23.4979, 47.96858], [23.33577, 48.0237], [23.27397, 48.08245], [23.15999, 48.12188], [23.1133, 48.08061], [23.08858, 48.00716], [23.0158, 47.99338], [22.92241, 48.02002], [22.94301, 47.96672], [22.89849, 47.95851], [22.77991, 47.87211], [22.76617, 47.8417], [22.67247, 47.7871], [22.46559, 47.76583], [22.41979, 47.7391], [22.31816, 47.76126], [22.00917, 47.50492], [22.03389, 47.42508], [22.01055, 47.37767], [21.94463, 47.38046], [21.78395, 47.11104], [21.648, 47.03902], [21.68645, 46.99595], [21.59581, 46.91628], [21.59307, 46.86935], [21.52028, 46.84118], [21.48935, 46.7577], [21.5151, 46.72147], [21.43926, 46.65109], [21.33214, 46.63035], [21.26929, 46.4993], [21.28061, 46.44941], [21.16872, 46.30118], [21.06572, 46.24897], [20.86797, 46.28884], [20.74574, 46.25467], [20.76085, 46.21002], [20.63863, 46.12728], [20.49718, 46.18721], [20.45377, 46.14405], [20.35573, 46.16629], [20.28324, 46.1438], [20.26068, 46.12332], [20.35862, 45.99356], [20.54818, 45.89939], [20.65645, 45.82801], [20.70069, 45.7493], [20.77416, 45.75601], [20.78446, 45.78522], [20.82364, 45.77738], [20.80361, 45.65875], [20.76798, 45.60969], [20.83321, 45.53567], [20.77217, 45.49788], [20.86026, 45.47295], [20.87948, 45.42743], [21.09894, 45.30144], [21.17612, 45.32566], [21.20392, 45.2677], [21.29398, 45.24148], [21.48278, 45.19557], [21.51299, 45.15345], [21.4505, 45.04294], [21.35855, 45.01941], [21.54938, 44.9327], [21.56328, 44.89502], [21.48202, 44.87199], [21.44013, 44.87613], [21.35643, 44.86364], [21.38802, 44.78133], [21.55007, 44.77304], [21.60019, 44.75208], [21.61942, 44.67059], [21.67504, 44.67107], [21.71692, 44.65349], [21.7795, 44.66165], [21.99364, 44.63395], [22.08016, 44.49844], [22.13234, 44.47444], [22.18315, 44.48179], [22.30844, 44.6619], [22.45301, 44.7194], [22.61917, 44.61489], [22.69196, 44.61587], [22.76749, 44.54446], [22.70981, 44.51852], [22.61368, 44.55719], [22.56493, 44.53419], [22.54021, 44.47836], [22.45436, 44.47258], [22.56012, 44.30712], [22.68166, 44.28206], [22.67173, 44.21564], [23.04988, 44.07694], [23.01674, 44.01946], [22.87873, 43.9844], [22.83753, 43.88055], [22.85314, 43.84452], [23.05288, 43.79494], [23.26772, 43.84843], [23.4507, 43.84936], [23.61687, 43.79289], [23.73978, 43.80627], [24.18149, 43.68218], [24.35364, 43.70211], [24.50264, 43.76314], [24.62281, 43.74082], [24.73542, 43.68523], [24.96682, 43.72693], [25.10718, 43.6831], [25.17144, 43.70261], [25.39528, 43.61866], [25.72792, 43.69263], [25.94911, 43.85745], [26.05584, 43.90925], [26.10115, 43.96908], [26.38764, 44.04356], [26.62712, 44.05698], [26.95141, 44.13555], [27.26845, 44.12602], [27.39757, 44.0141], [27.60834, 44.01206], [27.64542, 44.04958], [27.73468, 43.95326], [27.92008, 44.00761], [27.99558, 43.84193], [28.23293, 43.76], [29.24336, 43.70874], [30.04414, 45.08461], [29.69272, 45.19227], [29.65428, 45.25629], [29.68175, 45.26885], [29.59798, 45.38857], [29.42632, 45.44545], [29.24779, 45.43388], [28.96077, 45.33164], [28.94292, 45.28045], [28.81383, 45.3384], [28.78911, 45.24179], [28.71358, 45.22631], [28.5735, 45.24759], [28.34554, 45.32102], [28.28504, 45.43907], [28.21139, 45.46895], [28.18741, 45.47358], [28.08927, 45.6051], [28.16568, 45.6421], [28.13111, 45.92819], [28.08612, 46.01105], [28.13684, 46.18099], [28.10937, 46.22852], [28.19864, 46.31869], [28.18902, 46.35283], [28.25769, 46.43334], [28.22281, 46.50481], [28.24808, 46.64305], [28.12173, 46.82283], [28.09095, 46.97621], [27.81892, 47.1381], [27.73172, 47.29248], [27.68706, 47.28962], [27.60263, 47.32507], [27.55731, 47.46637], [27.47942, 47.48113], [27.3979, 47.59473], [27.32202, 47.64009], [27.25519, 47.71366], [27.29069, 47.73722], [27.1618, 47.92391], [27.15622, 47.98538]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "RS",
      iso1A3: "SRB",
      iso1N3: "688",
      wikidata: "Q403",
      nameEn: "Serbia",
      groups: ["039", "150", "UN"],
      callingCodes: ["381"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[19.66007, 46.19005], [19.56113, 46.16824], [19.52473, 46.1171], [19.28826, 45.99694], [19.14543, 45.9998], [19.10388, 46.04015], [19.0791, 45.96458], [19.01284, 45.96529], [18.99712, 45.93537], [18.81394, 45.91329], [18.85783, 45.85493], [18.90305, 45.71863], [18.96691, 45.66731], [18.88776, 45.57253], [18.94562, 45.53712], [19.07471, 45.53086], [19.08364, 45.48804], [18.99918, 45.49333], [18.97446, 45.37528], [19.10774, 45.29547], [19.28208, 45.23813], [19.41941, 45.23475], [19.43589, 45.17137], [19.19144, 45.17863], [19.14063, 45.12972], [19.07952, 45.14668], [19.1011, 45.01191], [19.05205, 44.97692], [19.15573, 44.95409], [19.06853, 44.89915], [19.02871, 44.92541], [18.98957, 44.90645], [19.01994, 44.85493], [19.18183, 44.92055], [19.36722, 44.88164], [19.32543, 44.74058], [19.26388, 44.65412], [19.16699, 44.52197], [19.13369, 44.52521], [19.12278, 44.50132], [19.14837, 44.45253], [19.14681, 44.41463], [19.11785, 44.40313], [19.10749, 44.39421], [19.10704, 44.38249], [19.10365, 44.37795], [19.10298, 44.36924], [19.11865, 44.36712], [19.1083, 44.3558], [19.11547, 44.34218], [19.13556, 44.338], [19.13332, 44.31492], [19.16741, 44.28648], [19.18328, 44.28383], [19.20508, 44.2917], [19.23306, 44.26097], [19.26945, 44.26957], [19.32464, 44.27185], [19.34773, 44.23244], [19.3588, 44.18353], [19.40927, 44.16722], [19.43905, 44.13088], [19.47338, 44.15034], [19.48386, 44.14332], [19.47321, 44.1193], [19.51167, 44.08158], [19.55999, 44.06894], [19.57467, 44.04716], [19.61991, 44.05254], [19.61836, 44.01464], [19.56498, 43.99922], [19.52515, 43.95573], [19.38439, 43.96611], [19.24363, 44.01502], [19.23465, 43.98764], [19.3986, 43.79668], [19.5176, 43.71403], [19.50455, 43.58385], [19.42696, 43.57987], [19.41941, 43.54056], [19.36653, 43.60921], [19.33426, 43.58833], [19.2553, 43.5938], [19.24774, 43.53061], [19.22807, 43.5264], [19.22229, 43.47926], [19.44315, 43.38846], [19.48171, 43.32644], [19.52962, 43.31623], [19.54598, 43.25158], [19.62661, 43.2286], [19.64063, 43.19027], [19.76918, 43.16044], [19.79255, 43.11951], [19.92576, 43.08539], [19.96549, 43.11098], [19.98887, 43.0538], [20.04729, 43.02732], [20.05431, 42.99571], [20.12325, 42.96237], [20.14896, 42.99058], [20.16415, 42.97177], [20.34528, 42.90676], [20.35692, 42.8335], [20.40594, 42.84853], [20.43734, 42.83157], [20.53484, 42.8885], [20.48692, 42.93208], [20.59929, 43.01067], [20.64557, 43.00826], [20.69515, 43.09641], [20.59929, 43.20492], [20.68688, 43.21335], [20.73811, 43.25068], [20.82145, 43.26769], [20.88685, 43.21697], [20.83727, 43.17842], [20.96287, 43.12416], [21.00749, 43.13984], [21.05378, 43.10707], [21.08952, 43.13471], [21.14465, 43.11089], [21.16734, 42.99694], [21.2041, 43.02277], [21.23877, 43.00848], [21.23534, 42.95523], [21.2719, 42.8994], [21.32974, 42.90424], [21.36941, 42.87397], [21.44047, 42.87276], [21.39045, 42.74888], [21.47498, 42.74695], [21.59154, 42.72643], [21.58755, 42.70418], [21.6626, 42.67813], [21.75025, 42.70125], [21.79413, 42.65923], [21.75672, 42.62695], [21.7327, 42.55041], [21.70522, 42.54176], [21.7035, 42.51899], [21.62556, 42.45106], [21.64209, 42.41081], [21.62887, 42.37664], [21.59029, 42.38042], [21.57021, 42.3647], [21.53467, 42.36809], [21.5264, 42.33634], [21.56772, 42.30946], [21.58992, 42.25915], [21.70111, 42.23789], [21.77176, 42.2648], [21.84654, 42.3247], [21.91595, 42.30392], [21.94405, 42.34669], [22.02908, 42.29848], [22.16384, 42.32103], [22.29605, 42.37477], [22.29275, 42.34913], [22.34773, 42.31725], [22.45919, 42.33822], [22.47498, 42.3915], [22.51961, 42.3991], [22.55669, 42.50144], [22.43983, 42.56851], [22.4997, 42.74144], [22.43309, 42.82057], [22.54302, 42.87774], [22.74826, 42.88701], [22.78397, 42.98253], [22.89521, 43.03625], [22.98104, 43.11199], [23.00806, 43.19279], [22.89727, 43.22417], [22.82036, 43.33665], [22.53397, 43.47225], [22.47582, 43.6558], [22.41043, 43.69566], [22.35558, 43.81281], [22.41449, 44.00514], [22.61688, 44.06534], [22.61711, 44.16938], [22.67173, 44.21564], [22.68166, 44.28206], [22.56012, 44.30712], [22.45436, 44.47258], [22.54021, 44.47836], [22.56493, 44.53419], [22.61368, 44.55719], [22.70981, 44.51852], [22.76749, 44.54446], [22.69196, 44.61587], [22.61917, 44.61489], [22.45301, 44.7194], [22.30844, 44.6619], [22.18315, 44.48179], [22.13234, 44.47444], [22.08016, 44.49844], [21.99364, 44.63395], [21.7795, 44.66165], [21.71692, 44.65349], [21.67504, 44.67107], [21.61942, 44.67059], [21.60019, 44.75208], [21.55007, 44.77304], [21.38802, 44.78133], [21.35643, 44.86364], [21.44013, 44.87613], [21.48202, 44.87199], [21.56328, 44.89502], [21.54938, 44.9327], [21.35855, 45.01941], [21.4505, 45.04294], [21.51299, 45.15345], [21.48278, 45.19557], [21.29398, 45.24148], [21.20392, 45.2677], [21.17612, 45.32566], [21.09894, 45.30144], [20.87948, 45.42743], [20.86026, 45.47295], [20.77217, 45.49788], [20.83321, 45.53567], [20.76798, 45.60969], [20.80361, 45.65875], [20.82364, 45.77738], [20.78446, 45.78522], [20.77416, 45.75601], [20.70069, 45.7493], [20.65645, 45.82801], [20.54818, 45.89939], [20.35862, 45.99356], [20.26068, 46.12332], [20.09713, 46.17315], [20.03533, 46.14509], [20.01816, 46.17696], [19.93508, 46.17553], [19.81491, 46.1313], [19.66007, 46.19005]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "RU",
      iso1A3: "RUS",
      iso1N3: "643",
      wikidata: "Q159",
      nameEn: "Russia"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "RW",
      iso1A3: "RWA",
      iso1N3: "646",
      wikidata: "Q1037",
      nameEn: "Rwanda",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["250"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[30.47194, -1.0555], [30.35212, -1.06896], [30.16369, -1.34303], [29.912, -1.48269], [29.82657, -1.31187], [29.59061, -1.39016], [29.53062, -1.40499], [29.45038, -1.5054], [29.36322, -1.50887], [29.24323, -1.66826], [29.24458, -1.69663], [29.11847, -1.90576], [29.17562, -2.12278], [29.105, -2.27043], [29.00051, -2.29001], [28.95642, -2.37321], [28.89601, -2.37321], [28.86826, -2.41888], [28.86846, -2.44866], [28.89132, -2.47557], [28.89342, -2.49017], [28.88846, -2.50493], [28.87497, -2.50887], [28.86209, -2.5231], [28.86193, -2.53185], [28.87943, -2.55165], [28.89288, -2.55848], [28.90226, -2.62385], [28.89793, -2.66111], [28.94346, -2.69124], [29.00357, -2.70596], [29.04081, -2.7416], [29.0562, -2.58632], [29.32234, -2.6483], [29.36805, -2.82933], [29.88237, -2.75105], [29.95911, -2.33348], [30.14034, -2.43626], [30.42933, -2.31064], [30.54501, -2.41404], [30.83915, -2.35795], [30.89303, -2.08223], [30.80802, -1.91477], [30.84079, -1.64652], [30.71974, -1.43244], [30.57123, -1.33264], [30.50889, -1.16412], [30.45116, -1.10641], [30.47194, -1.0555]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SA",
      iso1A3: "SAU",
      iso1N3: "682",
      wikidata: "Q851",
      nameEn: "Saudi Arabia",
      groups: ["145", "142", "UN"],
      callingCodes: ["966"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[40.01521, 32.05667], [39.29903, 32.23259], [38.99233, 31.99721], [36.99791, 31.50081], [37.99354, 30.49998], [37.66395, 30.33245], [37.4971, 29.99949], [36.75083, 29.86903], [36.50005, 29.49696], [36.07081, 29.18469], [34.8812, 29.36878], [34.4454, 27.91479], [37.8565, 22.00903], [39.63762, 18.37348], [40.99158, 15.81743], [42.15205, 16.40211], [42.76801, 16.40371], [42.94625, 16.39721], [42.94351, 16.49467], [42.97215, 16.51093], [43.11601, 16.53166], [43.15274, 16.67248], [43.22066, 16.65179], [43.21325, 16.74416], [43.25857, 16.75304], [43.26303, 16.79479], [43.24801, 16.80613], [43.22956, 16.80613], [43.22012, 16.83932], [43.18338, 16.84852], [43.1398, 16.90696], [43.19328, 16.94703], [43.1813, 16.98438], [43.18233, 17.02673], [43.23967, 17.03428], [43.17787, 17.14717], [43.20156, 17.25901], [43.32653, 17.31179], [43.22533, 17.38343], [43.29185, 17.53224], [43.43005, 17.56148], [43.70631, 17.35762], [44.50126, 17.47475], [46.31018, 17.20464], [46.76494, 17.29151], [47.00571, 16.94765], [47.48245, 17.10808], [47.58351, 17.50366], [48.19996, 18.20584], [49.04884, 18.59899], [52.00311, 19.00083], [54.99756, 20.00083], [55.66469, 21.99658], [55.2137, 22.71065], [55.13599, 22.63334], [52.56622, 22.94341], [51.59617, 24.12041], [51.58871, 24.27256], [51.41644, 24.39615], [51.58834, 24.66608], [51.39468, 24.62785], [51.29972, 24.50747], [51.09638, 24.46907], [50.92992, 24.54396], [50.8133, 24.74049], [50.57069, 25.57887], [50.302, 25.87592], [50.26923, 26.08243], [50.38162, 26.53976], [50.71771, 26.73086], [50.37726, 27.89227], [49.98877, 27.87827], [49.00421, 28.81495], [48.42991, 28.53628], [47.70561, 28.5221], [47.59863, 28.66798], [47.58376, 28.83382], [47.46202, 29.0014], [46.5527, 29.10283], [46.42415, 29.05947], [44.72255, 29.19736], [42.97796, 30.48295], [42.97601, 30.72204], [40.01521, 32.05667]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SB",
      iso1A3: "SLB",
      iso1N3: "090",
      wikidata: "Q685",
      nameEn: "Solomon Islands",
      groups: ["054", "009", "UN"],
      driveSide: "left",
      callingCodes: ["677"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[172.71443, -12.01327], [160.43769, -4.17974], [156.03296, -6.55528], [156.03993, -6.65703], [155.92557, -6.84664], [155.69784, -6.92661], [155.60735, -6.92266], [154.74815, -7.33315], [156.73836, -14.50464], [172.71443, -12.01327]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SC",
      iso1A3: "SYC",
      iso1N3: "690",
      wikidata: "Q1042",
      nameEn: "Seychelles",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["248"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[43.75112, -10.38913], [54.83239, -10.93575], [66.3222, 5.65313], [43.75112, -10.38913]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SD",
      iso1A3: "SDN",
      iso1N3: "729",
      wikidata: "Q1049",
      nameEn: "Sudan",
      groups: ["015", "002", "UN"],
      callingCodes: ["249"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[37.8565, 22.00903], [34.0765, 22.00501], [33.99686, 21.76784], [33.57251, 21.72406], [33.17563, 22.00405], [24.99885, 21.99535], [24.99794, 19.99661], [23.99715, 20.00038], [23.99539, 19.49944], [23.99997, 15.69575], [23.62785, 15.7804], [23.38812, 15.69649], [23.10792, 15.71297], [22.93201, 15.55107], [22.92579, 15.47007], [22.99584, 15.40105], [22.99584, 15.22989], [22.66115, 14.86308], [22.70474, 14.69149], [22.38562, 14.58907], [22.44944, 14.24986], [22.55997, 14.23024], [22.5553, 14.11704], [22.22995, 13.96754], [22.08674, 13.77863], [22.29689, 13.3731], [22.1599, 13.19281], [22.02914, 13.13976], [21.94819, 13.05637], [21.81432, 12.81362], [21.89371, 12.68001], [21.98711, 12.63292], [22.15679, 12.66634], [22.22684, 12.74682], [22.46345, 12.61925], [22.38873, 12.45514], [22.50548, 12.16769], [22.48369, 12.02766], [22.64092, 12.07485], [22.54907, 11.64372], [22.7997, 11.40424], [22.93124, 11.41645], [22.97249, 11.21955], [22.87758, 10.91915], [23.02221, 10.69235], [23.3128, 10.45214], [23.67164, 9.86923], [23.69155, 9.67566], [24.09319, 9.66572], [24.12744, 9.73784], [24.49389, 9.79962], [24.84653, 9.80643], [24.97739, 9.9081], [25.05688, 10.06776], [25.0918, 10.33718], [25.78141, 10.42599], [25.93163, 10.38159], [25.93241, 10.17941], [26.21338, 9.91545], [26.35815, 9.57946], [26.70685, 9.48735], [27.14427, 9.62858], [27.90704, 9.61323], [28.99983, 9.67155], [29.06988, 9.74826], [29.53844, 9.75133], [29.54, 10.07949], [29.94629, 10.29245], [30.00389, 10.28633], [30.53005, 9.95992], [30.82893, 9.71451], [30.84605, 9.7498], [31.28504, 9.75287], [31.77539, 10.28939], [31.99177, 10.65065], [32.46967, 11.04662], [32.39358, 11.18207], [32.39578, 11.70208], [32.10079, 11.95203], [32.73921, 11.95203], [32.73921, 12.22757], [33.25876, 12.22111], [33.13988, 11.43248], [33.26977, 10.83632], [33.24645, 10.77913], [33.52294, 10.64382], [33.66604, 10.44254], [33.80913, 10.32994], [33.90159, 10.17179], [33.96984, 10.15446], [33.99185, 9.99623], [33.96323, 9.80972], [33.9082, 9.762], [33.87958, 9.49937], [34.10229, 9.50238], [34.08717, 9.55243], [34.13186, 9.7492], [34.20484, 9.9033], [34.22718, 10.02506], [34.32102, 10.11599], [34.34783, 10.23914], [34.2823, 10.53508], [34.4372, 10.781], [34.59062, 10.89072], [34.77383, 10.74588], [34.77532, 10.69027], [34.86618, 10.74588], [34.86916, 10.78832], [34.97491, 10.86147], [34.97789, 10.91559], [34.93172, 10.95946], [35.01215, 11.19626], [34.95704, 11.24448], [35.09556, 11.56278], [35.05832, 11.71158], [35.11492, 11.85156], [35.24302, 11.91132], [35.70476, 12.67101], [36.01458, 12.72478], [36.14268, 12.70879], [36.16651, 12.88019], [36.13374, 12.92665], [36.24545, 13.36759], [36.38993, 13.56459], [36.48824, 13.83954], [36.44653, 13.95666], [36.54376, 14.25597], [36.44337, 15.14963], [36.54276, 15.23478], [36.69761, 15.75323], [36.76371, 15.80831], [36.92193, 16.23451], [36.99777, 17.07172], [37.42694, 17.04041], [37.50967, 17.32199], [38.13362, 17.53906], [38.37133, 17.66269], [38.45916, 17.87167], [38.57727, 17.98125], [39.63762, 18.37348], [37.8565, 22.00903]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SE",
      iso1A3: "SWE",
      iso1N3: "752",
      wikidata: "Q34",
      nameEn: "Sweden",
      groups: ["EU", "154", "150", "UN"],
      callingCodes: ["46"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[24.15791, 65.85385], [23.90497, 66.15802], [23.71339, 66.21299], [23.64982, 66.30603], [23.67591, 66.3862], [23.63776, 66.43568], [23.85959, 66.56434], [23.89488, 66.772], [23.98059, 66.79585], [23.98563, 66.84149], [23.56214, 67.17038], [23.58735, 67.20752], [23.54701, 67.25435], [23.75372, 67.29914], [23.75372, 67.43688], [23.39577, 67.46974], [23.54701, 67.59306], [23.45627, 67.85297], [23.65793, 67.9497], [23.40081, 68.05545], [23.26469, 68.15134], [23.15377, 68.14759], [23.10336, 68.26551], [22.73028, 68.40881], [22.00429, 68.50692], [21.03001, 68.88969], [20.90649, 68.89696], [20.85104, 68.93142], [20.91658, 68.96764], [20.78802, 69.03087], [20.55258, 69.06069], [20.0695, 69.04469], [20.28444, 68.93283], [20.33435, 68.80174], [20.22027, 68.67246], [19.95647, 68.55546], [20.22027, 68.48759], [19.93508, 68.35911], [18.97255, 68.52416], [18.63032, 68.50849], [18.39503, 68.58672], [18.1241, 68.53721], [18.13836, 68.20874], [17.90787, 67.96537], [17.30416, 68.11591], [16.7409, 67.91037], [16.38441, 67.52923], [16.12774, 67.52106], [16.09922, 67.4364], [16.39154, 67.21653], [16.35589, 67.06419], [15.37197, 66.48217], [15.49318, 66.28509], [15.05113, 66.15572], [14.53778, 66.12399], [14.50926, 65.31786], [13.64276, 64.58402], [14.11117, 64.46674], [14.16051, 64.18725], [13.98222, 64.00953], [13.23411, 64.09087], [12.74105, 64.02171], [12.14928, 63.59373], [12.19919, 63.47935], [11.98529, 63.27487], [12.19919, 63.00104], [12.07085, 62.6297], [12.29187, 62.25699], [12.14746, 61.7147], [12.40595, 61.57226], [12.57707, 61.56547], [12.86939, 61.35427], [12.69115, 61.06584], [12.2277, 61.02442], [12.59133, 60.50559], [12.52003, 60.13846], [12.36317, 59.99259], [12.15641, 59.8926], [11.87121, 59.86039], [11.92112, 59.69531], [11.69297, 59.59442], [11.8213, 59.24985], [11.65732, 58.90177], [11.45199, 58.89604], [11.4601, 58.99022], [11.34459, 59.11672], [11.15367, 59.07862], [11.08911, 58.98745], [10.64958, 58.89391], [10.40861, 58.38489], [12.16597, 56.60205], [12.07466, 56.29488], [12.65312, 56.04345], [12.6372, 55.91371], [12.88472, 55.63369], [12.60345, 55.42675], [12.84405, 55.13257], [14.28399, 55.1553], [14.89259, 55.5623], [15.79951, 55.54655], [19.64795, 57.06466], [19.84909, 57.57876], [20.5104, 59.15546], [19.08191, 60.19152], [19.23413, 60.61414], [20.15877, 63.06556], [24.14112, 65.39731], [24.15107, 65.81427], [24.14798, 65.83466], [24.15791, 65.85385]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SG",
      iso1A3: "SGP",
      iso1N3: "702",
      wikidata: "Q334",
      nameEn: "Singapore",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["65"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[104.00131, 1.42405], [103.93384, 1.42926], [103.89565, 1.42841], [103.86383, 1.46288], [103.81181, 1.47953], [103.76395, 1.45183], [103.74161, 1.4502], [103.7219, 1.46108], [103.67468, 1.43166], [103.62738, 1.35255], [103.56591, 1.19719], [103.66049, 1.18825], [103.74084, 1.12902], [104.03085, 1.26954], [104.12282, 1.27714], [104.08072, 1.35998], [104.09162, 1.39694], [104.08871, 1.42015], [104.07348, 1.43322], [104.04622, 1.44691], [104.02277, 1.4438], [104.00131, 1.42405]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SH",
      iso1A3: "SHN",
      iso1N3: "654",
      wikidata: "Q192184",
      nameEn: "Saint Helena, Ascension and Tristan da Cunha",
      country: "GB"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SI",
      iso1A3: "SVN",
      iso1N3: "705",
      wikidata: "Q215",
      nameEn: "Slovenia",
      groups: ["EU", "039", "150", "UN"],
      callingCodes: ["386"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[16.50139, 46.56684], [16.39217, 46.63673], [16.38594, 46.6549], [16.41863, 46.66238], [16.42641, 46.69228], [16.37816, 46.69975], [16.30966, 46.7787], [16.31303, 46.79838], [16.3408, 46.80641], [16.34547, 46.83836], [16.2941, 46.87137], [16.2365, 46.87775], [16.21892, 46.86961], [16.15711, 46.85434], [16.14365, 46.8547], [16.10983, 46.867], [16.05786, 46.83927], [15.99054, 46.82772], [15.99126, 46.78199], [15.98432, 46.74991], [15.99769, 46.7266], [16.02808, 46.71094], [16.04347, 46.68694], [16.04036, 46.6549], [15.99988, 46.67947], [15.98512, 46.68463], [15.94864, 46.68769], [15.87691, 46.7211], [15.8162, 46.71897], [15.78518, 46.70712], [15.76771, 46.69863], [15.73823, 46.70011], [15.72279, 46.69548], [15.69523, 46.69823], [15.67411, 46.70735], [15.6543, 46.70616], [15.6543, 46.69228], [15.6365, 46.6894], [15.63255, 46.68069], [15.62317, 46.67947], [15.59826, 46.68908], [15.54533, 46.66985], [15.55333, 46.64988], [15.54431, 46.6312], [15.46906, 46.61321], [15.45514, 46.63697], [15.41235, 46.65556], [15.23711, 46.63994], [15.14215, 46.66131], [15.01451, 46.641], [14.98024, 46.6009], [14.96002, 46.63459], [14.92283, 46.60848], [14.87129, 46.61], [14.86419, 46.59411], [14.83549, 46.56614], [14.81836, 46.51046], [14.72185, 46.49974], [14.66892, 46.44936], [14.5942, 46.43434], [14.56463, 46.37208], [14.52176, 46.42617], [14.45877, 46.41717], [14.42608, 46.44614], [14.314, 46.43327], [14.28326, 46.44315], [14.15989, 46.43327], [14.12097, 46.47724], [14.04002, 46.49117], [14.00422, 46.48474], [13.89837, 46.52331], [13.7148, 46.5222], [13.68684, 46.43881], [13.59777, 46.44137], [13.5763, 46.42613], [13.5763, 46.40915], [13.47019, 46.3621], [13.43418, 46.35992], [13.44808, 46.33507], [13.37671, 46.29668], [13.42218, 46.20758], [13.47587, 46.22725], [13.56114, 46.2054], [13.56682, 46.18703], [13.64451, 46.18966], [13.66472, 46.17392], [13.64053, 46.13587], [13.57072, 46.09022], [13.50104, 46.05986], [13.49568, 46.04839], [13.50998, 46.04498], [13.49702, 46.01832], [13.47474, 46.00546], [13.50104, 45.98078], [13.52963, 45.96588], [13.56759, 45.96991], [13.58903, 45.99009], [13.62074, 45.98388], [13.63458, 45.98947], [13.64307, 45.98326], [13.6329, 45.94894], [13.63815, 45.93607], [13.61931, 45.91782], [13.60857, 45.89907], [13.59565, 45.89446], [13.58644, 45.88173], [13.57563, 45.8425], [13.58858, 45.83503], [13.59784, 45.8072], [13.66986, 45.79955], [13.8235, 45.7176], [13.83332, 45.70855], [13.83422, 45.68703], [13.87933, 45.65207], [13.9191, 45.6322], [13.8695, 45.60835], [13.86771, 45.59898], [13.84106, 45.58185], [13.78445, 45.5825], [13.74587, 45.59811], [13.7198, 45.59352], [13.6076, 45.64761], [13.45644, 45.59464], [13.56979, 45.4895], [13.62902, 45.45898], [13.67398, 45.4436], [13.7785, 45.46787], [13.81742, 45.43729], [13.88124, 45.42637], [13.90771, 45.45149], [13.97309, 45.45258], [13.99488, 45.47551], [13.96063, 45.50825], [14.00578, 45.52352], [14.07116, 45.48752], [14.20348, 45.46896], [14.22371, 45.50388], [14.24239, 45.50607], [14.26611, 45.48239], [14.27681, 45.4902], [14.32487, 45.47142], [14.36693, 45.48642], [14.49769, 45.54424], [14.5008, 45.60852], [14.53816, 45.6205], [14.57397, 45.67165], [14.60977, 45.66403], [14.59576, 45.62812], [14.69694, 45.57366], [14.68605, 45.53006], [14.71718, 45.53442], [14.80124, 45.49515], [14.81992, 45.45913], [14.90554, 45.47769], [14.92266, 45.52788], [15.02385, 45.48533], [15.05187, 45.49079], [15.16862, 45.42309], [15.27758, 45.46678], [15.33051, 45.45258], [15.38188, 45.48752], [15.30249, 45.53224], [15.29837, 45.5841], [15.27747, 45.60504], [15.31027, 45.6303], [15.34695, 45.63382], [15.34214, 45.64702], [15.38952, 45.63682], [15.4057, 45.64727], [15.34919, 45.71623], [15.30872, 45.69014], [15.25423, 45.72275], [15.40836, 45.79491], [15.47531, 45.79802], [15.47325, 45.8253], [15.52234, 45.82195], [15.57952, 45.84953], [15.64185, 45.82915], [15.66662, 45.84085], [15.70411, 45.8465], [15.68232, 45.86819], [15.68383, 45.88867], [15.67967, 45.90455], [15.70636, 45.92116], [15.70327, 46.00015], [15.71246, 46.01196], [15.72977, 46.04682], [15.62317, 46.09103], [15.6083, 46.11992], [15.59909, 46.14761], [15.64904, 46.19229], [15.6434, 46.21396], [15.67395, 46.22478], [15.75436, 46.21969], [15.75479, 46.20336], [15.78817, 46.21719], [15.79284, 46.25811], [15.97965, 46.30652], [16.07616, 46.3463], [16.07314, 46.36458], [16.05065, 46.3833], [16.05281, 46.39141], [16.14859, 46.40547], [16.18824, 46.38282], [16.30233, 46.37837], [16.30162, 46.40437], [16.27329, 46.41467], [16.27398, 46.42875], [16.25124, 46.48067], [16.23961, 46.49653], [16.26759, 46.50566], [16.26733, 46.51505], [16.29793, 46.5121], [16.37193, 46.55008], [16.38771, 46.53608], [16.44036, 46.5171], [16.5007, 46.49644], [16.52604, 46.47831], [16.59527, 46.47524], [16.52604, 46.5051], [16.52885, 46.53303], [16.50139, 46.56684]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SJ",
      iso1A3: "SJM",
      iso1N3: "744",
      wikidata: "Q842829",
      nameEn: "Svalbard and Jan Mayen",
      country: "NO"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SK",
      iso1A3: "SVK",
      iso1N3: "703",
      wikidata: "Q214",
      nameEn: "Slovakia",
      groups: ["EU", "151", "150", "UN"],
      callingCodes: ["421"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[19.82237, 49.27806], [19.78581, 49.41701], [19.72127, 49.39288], [19.6375, 49.40897], [19.64162, 49.45184], [19.57845, 49.46077], [19.53313, 49.52856], [19.52626, 49.57311], [19.45348, 49.61583], [19.37795, 49.574], [19.36009, 49.53747], [19.25435, 49.53391], [19.18019, 49.41165], [18.9742, 49.39557], [18.97283, 49.49914], [18.94536, 49.52143], [18.84521, 49.51672], [18.74761, 49.492], [18.67757, 49.50895], [18.6144, 49.49824], [18.57183, 49.51162], [18.53063, 49.49022], [18.54848, 49.47059], [18.44686, 49.39467], [18.4084, 49.40003], [18.4139, 49.36517], [18.36446, 49.3267], [18.18456, 49.28909], [18.15022, 49.24518], [18.1104, 49.08624], [18.06885, 49.03157], [17.91814, 49.01784], [17.87831, 48.92679], [17.77944, 48.92318], [17.73126, 48.87885], [17.7094, 48.86721], [17.5295, 48.81117], [17.45671, 48.85004], [17.3853, 48.80936], [17.29054, 48.85546], [17.19355, 48.87602], [17.11202, 48.82925], [17.00215, 48.70887], [16.93955, 48.60371], [16.94611, 48.53614], [16.85204, 48.44968], [16.8497, 48.38321], [16.83588, 48.3844], [16.83317, 48.38138], [16.84243, 48.35258], [16.90903, 48.32519], [16.89461, 48.31332], [16.97701, 48.17385], [17.02919, 48.13996], [17.05735, 48.14179], [17.09168, 48.09366], [17.07039, 48.0317], [17.16001, 48.00636], [17.23699, 48.02094], [17.71215, 47.7548], [18.02938, 47.75665], [18.29305, 47.73541], [18.56496, 47.76588], [18.66521, 47.76772], [18.74074, 47.8157], [18.8506, 47.82308], [18.76821, 47.87469], [18.76134, 47.97499], [18.82176, 48.04206], [19.01952, 48.07052], [19.23924, 48.0595], [19.28182, 48.08336], [19.47957, 48.09437], [19.52489, 48.19791], [19.63338, 48.25006], [19.92452, 48.1283], [20.24312, 48.2784], [20.29943, 48.26104], [20.5215, 48.53336], [20.83248, 48.5824], [21.11516, 48.49546], [21.44063, 48.58456], [21.6068, 48.50365], [21.67134, 48.3989], [21.72525, 48.34628], [21.8279, 48.33321], [21.83339, 48.36242], [22.14689, 48.4005], [22.16023, 48.56548], [22.21379, 48.6218], [22.34151, 48.68893], [22.42934, 48.92857], [22.48296, 48.99172], [22.54338, 49.01424], [22.56155, 49.08865], [22.04427, 49.22136], [21.96385, 49.3437], [21.82927, 49.39467], [21.77983, 49.35443], [21.62328, 49.4447], [21.43376, 49.41433], [21.27858, 49.45988], [21.19756, 49.4054], [21.12477, 49.43666], [21.041, 49.41791], [21.09799, 49.37176], [20.98733, 49.30774], [20.9229, 49.29626], [20.77971, 49.35383], [20.72274, 49.41813], [20.61666, 49.41791], [20.5631, 49.375], [20.46422, 49.41612], [20.39939, 49.3896], [20.31728, 49.39914], [20.31453, 49.34817], [20.21977, 49.35265], [20.13738, 49.31685], [20.08238, 49.1813], [19.98494, 49.22904], [19.90529, 49.23532], [19.86409, 49.19316], [19.75286, 49.20751], [19.82237, 49.27806]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SL",
      iso1A3: "SLE",
      iso1N3: "694",
      wikidata: "Q1044",
      nameEn: "Sierra Leone",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["232"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-10.27575, 8.48711], [-10.37257, 8.48941], [-10.54891, 8.31174], [-10.63934, 8.35326], [-10.70565, 8.29235], [-10.61422, 8.5314], [-10.47707, 8.67669], [-10.56197, 8.81225], [-10.5783, 9.06386], [-10.74484, 9.07998], [-10.6534, 9.29919], [-11.2118, 10.00098], [-11.89624, 9.99763], [-11.91023, 9.93927], [-12.12634, 9.87203], [-12.24262, 9.92386], [-12.47254, 9.86834], [-12.76788, 9.3133], [-12.94095, 9.26335], [-13.08953, 9.0409], [-13.18586, 9.0925], [-13.29911, 9.04245], [-14.36218, 8.64107], [-12.15048, 6.15992], [-11.50429, 6.92704], [-11.4027, 6.97746], [-11.29417, 7.21576], [-10.60422, 7.7739], [-10.60492, 8.04072], [-10.57523, 8.04829], [-10.51554, 8.1393], [-10.45023, 8.15627], [-10.35227, 8.15223], [-10.29839, 8.21283], [-10.31635, 8.28554], [-10.30084, 8.30008], [-10.27575, 8.48711]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SM",
      iso1A3: "SMR",
      iso1N3: "674",
      wikidata: "Q238",
      nameEn: "San Marino",
      groups: ["039", "150", "UN"],
      callingCodes: ["378"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[12.45648, 43.89369], [12.48771, 43.89706], [12.49429, 43.90973], [12.49247, 43.91774], [12.49724, 43.92248], [12.50269, 43.92363], [12.50496, 43.93017], [12.51553, 43.94096], [12.51427, 43.94897], [12.50655, 43.95796], [12.50875, 43.96198], [12.50622, 43.97131], [12.51109, 43.97201], [12.51064, 43.98165], [12.5154, 43.98508], [12.51463, 43.99122], [12.50678, 43.99113], [12.49406, 43.98492], [12.47853, 43.98052], [12.46205, 43.97463], [12.44684, 43.96597], [12.43662, 43.95698], [12.42005, 43.9578], [12.41414, 43.95273], [12.40415, 43.95485], [12.40506, 43.94325], [12.41165, 43.93769], [12.41551, 43.92984], [12.40733, 43.92379], [12.41233, 43.90956], [12.40935, 43.9024], [12.41641, 43.89991], [12.44184, 43.90498], [12.45648, 43.89369]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SN",
      iso1A3: "SEN",
      iso1N3: "686",
      wikidata: "Q1041",
      nameEn: "Senegal",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["221"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-14.32144, 16.61495], [-15.00557, 16.64997], [-15.6509, 16.50315], [-16.27016, 16.51565], [-16.4429, 16.20605], [-16.44814, 16.09753], [-16.48967, 16.0496], [-16.50854, 16.09032], [-17.15288, 16.07139], [-18.35085, 14.63444], [-17.43598, 13.59273], [-15.47902, 13.58758], [-15.36504, 13.79313], [-14.93719, 13.80173], [-14.34721, 13.46578], [-13.8955, 13.59126], [-13.79409, 13.34472], [-14.36795, 13.23033], [-15.14917, 13.57989], [-15.26908, 13.37768], [-15.80478, 13.34832], [-15.80355, 13.16729], [-16.69343, 13.16791], [-16.74676, 13.06025], [-17.43966, 13.04579], [-17.4623, 11.92379], [-16.70562, 12.34803], [-16.38191, 12.36449], [-16.20591, 12.46157], [-15.67302, 12.42974], [-15.17582, 12.6847], [-13.70523, 12.68013], [-13.05296, 12.64003], [-13.06603, 12.49342], [-12.87336, 12.51892], [-12.35415, 12.32758], [-11.91331, 12.42008], [-11.46267, 12.44559], [-11.37536, 12.40788], [-11.39935, 12.97808], [-11.63025, 13.39174], [-11.83345, 13.33333], [-12.06897, 13.71049], [-11.93043, 13.84505], [-12.23936, 14.76324], [-13.11029, 15.52116], [-13.43135, 16.09022], [-13.80075, 16.13961], [-14.32144, 16.61495]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SO",
      iso1A3: "SOM",
      iso1N3: "706",
      wikidata: "Q1045",
      nameEn: "Somalia",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["252"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[51.12877, 12.56479], [43.90659, 12.3823], [42.95776, 10.98533], [42.69452, 10.62672], [42.87643, 10.18441], [43.0937, 9.90579], [43.23518, 9.84605], [43.32613, 9.59205], [44.19222, 8.93028], [46.99339, 7.9989], [47.92477, 8.00111], [47.97917, 8.00124], [44.98104, 4.91821], [44.02436, 4.9451], [43.40263, 4.79289], [43.04177, 4.57923], [42.97746, 4.44032], [42.84526, 4.28357], [42.55853, 4.20518], [42.07619, 4.17667], [41.89488, 3.97375], [41.31368, 3.14314], [40.98767, 2.82959], [41.00099, -0.83068], [41.56, -1.59812], [41.56362, -1.66375], [41.75542, -1.85308], [57.49095, 8.14549], [51.12877, 12.56479]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SR",
      iso1A3: "SUR",
      iso1N3: "740",
      wikidata: "Q730",
      nameEn: "Suriname",
      groups: ["005", "419", "019", "UN"],
      driveSide: "left",
      callingCodes: ["597"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-54.26916, 5.26909], [-54.01877, 5.52789], [-54.01074, 5.68785], [-53.7094, 6.2264], [-56.84822, 6.73257], [-57.31629, 5.33714], [-57.22536, 5.15605], [-57.37442, 5.0208], [-57.8699, 4.89394], [-58.0307, 3.95513], [-57.35891, 3.32121], [-56.70519, 2.02964], [-56.55439, 2.02003], [-56.47045, 1.95135], [-55.99278, 1.83137], [-55.89863, 1.89861], [-55.92159, 2.05236], [-56.13054, 2.27723], [-55.96292, 2.53188], [-55.71493, 2.40342], [-55.01919, 2.564], [-54.6084, 2.32856], [-54.42864, 2.42442], [-54.28534, 2.67798], [-53.9849, 3.58697], [-53.98914, 3.627], [-54.05128, 3.63557], [-54.19367, 3.84387], [-54.38444, 4.13222], [-54.4717, 4.91964], [-54.26916, 5.26909]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SS",
      iso1A3: "SSD",
      iso1N3: "728",
      wikidata: "Q958",
      nameEn: "South Sudan",
      groups: ["014", "202", "002", "UN"],
      callingCodes: ["211"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[34.10229, 9.50238], [33.87958, 9.49937], [33.9082, 9.762], [33.96323, 9.80972], [33.99185, 9.99623], [33.96984, 10.15446], [33.90159, 10.17179], [33.80913, 10.32994], [33.66604, 10.44254], [33.52294, 10.64382], [33.24645, 10.77913], [33.26977, 10.83632], [33.13988, 11.43248], [33.25876, 12.22111], [32.73921, 12.22757], [32.73921, 11.95203], [32.10079, 11.95203], [32.39578, 11.70208], [32.39358, 11.18207], [32.46967, 11.04662], [31.99177, 10.65065], [31.77539, 10.28939], [31.28504, 9.75287], [30.84605, 9.7498], [30.82893, 9.71451], [30.53005, 9.95992], [30.00389, 10.28633], [29.94629, 10.29245], [29.54, 10.07949], [29.53844, 9.75133], [29.06988, 9.74826], [28.99983, 9.67155], [27.90704, 9.61323], [27.14427, 9.62858], [26.70685, 9.48735], [26.35815, 9.57946], [26.21338, 9.91545], [25.93241, 10.17941], [25.93163, 10.38159], [25.78141, 10.42599], [25.0918, 10.33718], [25.05688, 10.06776], [24.97739, 9.9081], [24.84653, 9.80643], [24.49389, 9.79962], [24.12744, 9.73784], [24.09319, 9.66572], [23.69155, 9.67566], [23.62179, 9.53823], [23.64981, 9.44303], [23.64358, 9.28637], [23.56263, 9.19418], [23.4848, 9.16959], [23.44744, 8.99128], [23.59065, 8.99743], [23.51905, 8.71749], [24.25691, 8.69288], [24.13238, 8.36959], [24.35965, 8.26177], [24.85156, 8.16933], [24.98855, 7.96588], [25.25319, 7.8487], [25.29214, 7.66675], [25.20649, 7.61115], [25.20337, 7.50312], [25.35281, 7.42595], [25.37461, 7.33024], [25.90076, 7.09549], [26.38022, 6.63493], [26.32729, 6.36272], [26.58259, 6.1987], [26.51721, 6.09655], [27.22705, 5.71254], [27.22705, 5.62889], [27.28621, 5.56382], [27.23017, 5.37167], [27.26886, 5.25876], [27.44012, 5.07349], [27.56656, 4.89375], [27.65462, 4.89375], [27.76469, 4.79284], [27.79551, 4.59976], [28.20719, 4.35614], [28.6651, 4.42638], [28.8126, 4.48784], [29.03054, 4.48784], [29.22207, 4.34297], [29.43341, 4.50101], [29.49726, 4.7007], [29.82087, 4.56246], [29.79666, 4.37809], [30.06964, 4.13221], [30.1621, 4.10586], [30.22374, 3.93896], [30.27658, 3.95653], [30.47691, 3.83353], [30.55396, 3.84451], [30.57378, 3.74567], [30.56277, 3.62703], [30.78512, 3.67097], [30.80713, 3.60506], [30.85997, 3.5743], [30.85153, 3.48867], [30.97601, 3.693], [31.16666, 3.79853], [31.29476, 3.8015], [31.50478, 3.67814], [31.50776, 3.63652], [31.72075, 3.74354], [31.81459, 3.82083], [31.86821, 3.78664], [31.96205, 3.6499], [31.95907, 3.57408], [32.05187, 3.589], [32.08491, 3.56287], [32.08866, 3.53543], [32.19888, 3.50867], [32.20782, 3.6053], [32.41337, 3.748], [32.72021, 3.77327], [32.89746, 3.81339], [33.02852, 3.89296], [33.18356, 3.77812], [33.51264, 3.75068], [33.9873, 4.23316], [34.47601, 4.72162], [35.34151, 5.02364], [35.30992, 4.90402], [35.47843, 4.91872], [35.42366, 4.76969], [35.51424, 4.61643], [35.9419, 4.61933], [35.82118, 4.77382], [35.81968, 5.10757], [35.8576, 5.33413], [35.50792, 5.42431], [35.29938, 5.34042], [35.31188, 5.50106], [35.13058, 5.62118], [35.12611, 5.68937], [35.00546, 5.89387], [34.96227, 6.26415], [35.01738, 6.46991], [34.87736, 6.60161], [34.77459, 6.5957], [34.65096, 6.72589], [34.53776, 6.74808], [34.53925, 6.82794], [34.47669, 6.91076], [34.35753, 6.91963], [34.19369, 7.04382], [34.19369, 7.12807], [34.01495, 7.25664], [34.03878, 7.27437], [34.02984, 7.36449], [33.87642, 7.5491], [33.71407, 7.65983], [33.44745, 7.7543], [33.32531, 7.71297], [33.24637, 7.77939], [33.04944, 7.78989], [33.0006, 7.90333], [33.08401, 8.05822], [33.18083, 8.13047], [33.1853, 8.29264], [33.19721, 8.40317], [33.3119, 8.45474], [33.54575, 8.47094], [33.66938, 8.44442], [33.71407, 8.3678], [33.87195, 8.41938], [33.89579, 8.4842], [34.01346, 8.50041], [34.14453, 8.60204], [34.14304, 9.04654], [34.10229, 9.50238]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ST",
      iso1A3: "STP",
      iso1N3: "678",
      wikidata: "Q1039",
      nameEn: "S\xE3o Tom\xE9 and Principe",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["239"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[4.34149, 1.91417], [6.6507, -0.28606], [7.9035, 1.92304], [4.34149, 1.91417]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SV",
      iso1A3: "SLV",
      iso1N3: "222",
      wikidata: "Q792",
      nameEn: "El Salvador",
      groups: ["013", "003", "419", "019", "UN"],
      callingCodes: ["503"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-89.34776, 14.43013], [-89.39028, 14.44561], [-89.57441, 14.41637], [-89.58814, 14.33165], [-89.50614, 14.26084], [-89.52397, 14.22628], [-89.61844, 14.21937], [-89.70756, 14.1537], [-89.75569, 14.07073], [-89.73251, 14.04133], [-89.76103, 14.02923], [-89.81807, 14.07073], [-89.88937, 14.0396], [-90.10505, 13.85104], [-90.11344, 13.73679], [-90.55276, 12.8866], [-88.11443, 12.63306], [-87.7346, 13.13228], [-87.55124, 13.12523], [-87.69751, 13.25228], [-87.73714, 13.32715], [-87.80177, 13.35689], [-87.84675, 13.41078], [-87.83467, 13.44655], [-87.77354, 13.45767], [-87.73841, 13.44169], [-87.72115, 13.46083], [-87.71657, 13.50577], [-87.78148, 13.52906], [-87.73106, 13.75443], [-87.68821, 13.80829], [-87.7966, 13.91353], [-88.00331, 13.86948], [-88.07641, 13.98447], [-88.23018, 13.99915], [-88.25791, 13.91108], [-88.48982, 13.86458], [-88.49738, 13.97224], [-88.70661, 14.04317], [-88.73182, 14.10919], [-88.815, 14.11652], [-88.85785, 14.17763], [-88.94608, 14.20207], [-89.04187, 14.33644], [-89.34776, 14.43013]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SX",
      iso1A3: "SXM",
      iso1N3: "534",
      wikidata: "Q26273",
      nameEn: "Sint Maarten",
      aliases: ["NL-SX"],
      country: "NL",
      groups: ["Q1451600", "029", "003", "419", "019", "UN"],
      callingCodes: ["1 721"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-63.33064, 17.9615], [-63.1055, 17.86651], [-62.93924, 18.02904], [-63.02323, 18.05757], [-63.04039, 18.05619], [-63.0579, 18.06614], [-63.07759, 18.04943], [-63.09686, 18.04608], [-63.11042, 18.05339], [-63.13502, 18.05445], [-63.33064, 17.9615]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SY",
      iso1A3: "SYR",
      iso1N3: "760",
      wikidata: "Q858",
      nameEn: "Syria",
      groups: ["145", "142", "UN"],
      callingCodes: ["963"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[42.23683, 37.2863], [42.21548, 37.28026], [42.20454, 37.28715], [42.22381, 37.30238], [42.22257, 37.31395], [42.2112, 37.32491], [42.19301, 37.31323], [42.18225, 37.28569], [42.00894, 37.17209], [41.515, 37.08084], [41.21937, 37.07665], [40.90856, 37.13147], [40.69136, 37.0996], [39.81589, 36.75538], [39.21538, 36.66834], [39.03217, 36.70911], [38.74042, 36.70629], [38.55908, 36.84429], [38.38859, 36.90064], [38.21064, 36.91842], [37.81974, 36.76055], [37.68048, 36.75065], [37.49103, 36.66904], [37.47253, 36.63243], [37.21988, 36.6736], [37.16177, 36.66069], [37.10894, 36.6704], [37.08279, 36.63495], [37.02088, 36.66422], [37.01647, 36.69512], [37.04619, 36.71101], [37.04399, 36.73483], [36.99886, 36.74012], [36.99557, 36.75997], [36.66727, 36.82901], [36.61581, 36.74629], [36.62681, 36.71189], [36.57398, 36.65186], [36.58829, 36.58295], [36.54206, 36.49539], [36.6081, 36.33772], [36.65653, 36.33861], [36.68672, 36.23677], [36.6125, 36.22592], [36.50463, 36.2419], [36.4617, 36.20461], [36.39206, 36.22088], [36.37474, 36.01163], [36.33956, 35.98687], [36.30099, 36.00985], [36.28338, 36.00273], [36.29769, 35.96086], [36.27678, 35.94839], [36.25366, 35.96264], [36.19973, 35.95195], [36.17441, 35.92076], [36.1623, 35.80925], [36.14029, 35.81015], [36.13919, 35.83692], [36.11827, 35.85923], [35.99829, 35.88242], [36.01844, 35.92403], [36.00514, 35.94113], [35.98499, 35.94107], [35.931, 35.92109], [35.51152, 36.10954], [35.48515, 34.70851], [35.97386, 34.63322], [35.98718, 34.64977], [36.29165, 34.62991], [36.32399, 34.69334], [36.35135, 34.68516], [36.35384, 34.65447], [36.42941, 34.62505], [36.46003, 34.6378], [36.45299, 34.59438], [36.41429, 34.61175], [36.39846, 34.55672], [36.3369, 34.52629], [36.34745, 34.5002], [36.4442, 34.50165], [36.46179, 34.46541], [36.55853, 34.41609], [36.53039, 34.3798], [36.56556, 34.31881], [36.60778, 34.31009], [36.58667, 34.27667], [36.59195, 34.2316], [36.62537, 34.20251], [36.5128, 34.09916], [36.50576, 34.05982], [36.41078, 34.05253], [36.28589, 33.91981], [36.38263, 33.86579], [36.3967, 33.83365], [36.14517, 33.85118], [36.06778, 33.82927], [35.9341, 33.6596], [36.05723, 33.57904], [35.94465, 33.52774], [35.94816, 33.47886], [35.88668, 33.43183], [35.82577, 33.40479], [35.81324, 33.36354], [35.77477, 33.33609], [35.813, 33.3172], [35.77513, 33.27342], [35.81295, 33.24841], [35.81647, 33.2028], [35.83846, 33.19397], [35.84285, 33.16673], [35.81911, 33.1336], [35.81911, 33.11077], [35.84802, 33.1031], [35.87188, 32.98028], [35.89298, 32.9456], [35.87012, 32.91976], [35.84021, 32.8725], [35.83758, 32.82817], [35.78745, 32.77938], [35.75983, 32.74803], [35.88405, 32.71321], [35.93307, 32.71966], [35.96633, 32.66237], [36.02239, 32.65911], [36.08074, 32.51463], [36.20379, 32.52751], [36.20875, 32.49529], [36.23948, 32.50108], [36.40959, 32.37908], [36.83946, 32.31293], [38.79171, 33.37328], [40.64314, 34.31604], [40.97676, 34.39788], [41.12388, 34.65742], [41.2345, 34.80049], [41.21654, 35.1508], [41.26569, 35.42708], [41.38184, 35.62502], [41.37027, 35.84095], [41.2564, 36.06012], [41.28864, 36.35368], [41.40058, 36.52502], [41.81736, 36.58782], [42.36697, 37.0627], [42.35724, 37.10998], [42.32313, 37.17814], [42.34735, 37.22548], [42.2824, 37.2798], [42.26039, 37.27017], [42.23683, 37.2863]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "SZ",
      iso1A3: "SWZ",
      iso1N3: "748",
      wikidata: "Q1050",
      nameEn: "Eswatini",
      aliases: ["Swaziland"],
      groups: ["018", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["268"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[31.86881, -25.99973], [31.4175, -25.71886], [31.31237, -25.7431], [31.13073, -25.91558], [30.95819, -26.26303], [30.78927, -26.48271], [30.81101, -26.84722], [30.88826, -26.79622], [30.97757, -26.92706], [30.96088, -27.0245], [31.15027, -27.20151], [31.49834, -27.31549], [31.97592, -27.31675], [31.97463, -27.11057], [32.00893, -26.8096], [32.09664, -26.80721], [32.13315, -26.84345], [32.13409, -26.5317], [32.07352, -26.40185], [32.10435, -26.15656], [32.08599, -26.00978], [32.00916, -25.999], [31.974, -25.95387], [31.86881, -25.99973]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TA",
      iso1A3: "TAA",
      wikidata: "Q220982",
      nameEn: "Tristan da Cunha",
      aliases: ["SH-TA"],
      country: "GB",
      groups: ["SH", "BOTS", "011", "202", "002", "UN"],
      isoStatus: "excRes",
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["290 8", "44 20"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-13.38232, -34.07258], [-16.67337, -41.9188], [-5.88482, -41.4829], [-13.38232, -34.07258]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TC",
      iso1A3: "TCA",
      iso1N3: "796",
      wikidata: "Q18221",
      nameEn: "Turks and Caicos Islands",
      country: "GB",
      groups: ["BOTS", "029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 649"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-71.70065, 25.7637], [-72.98446, 20.4801], [-69.80718, 21.35956], [-71.70065, 25.7637]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TD",
      iso1A3: "TCD",
      iso1N3: "148",
      wikidata: "Q657",
      nameEn: "Chad",
      groups: ["017", "202", "002", "UN"],
      callingCodes: ["235"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[23.99539, 19.49944], [15.99566, 23.49639], [14.99751, 23.00539], [15.19692, 21.99339], [15.20213, 21.49365], [15.28332, 21.44557], [15.62515, 20.95395], [15.57248, 20.92138], [15.55382, 20.86507], [15.56004, 20.79488], [15.59841, 20.74039], [15.6721, 20.70069], [15.99632, 20.35364], [15.75098, 19.93002], [15.6032, 18.77402], [15.50373, 16.89649], [14.37425, 15.72591], [13.86301, 15.04043], [13.78991, 14.87519], [13.809, 14.72915], [13.67878, 14.64013], [13.68573, 14.55276], [13.48259, 14.46704], [13.47559, 14.40881], [13.6302, 13.71094], [14.08251, 13.0797], [14.46881, 13.08259], [14.56101, 12.91036], [14.55058, 12.78256], [14.83314, 12.62963], [14.90827, 12.3269], [14.89019, 12.16593], [14.96952, 12.0925], [15.00146, 12.1223], [15.0349, 12.10698], [15.05786, 12.0608], [15.04808, 11.8731], [15.11579, 11.79313], [15.06595, 11.71126], [15.13149, 11.5537], [15.0585, 11.40481], [15.10021, 11.04101], [15.04957, 11.02347], [15.09127, 10.87431], [15.06737, 10.80921], [15.15532, 10.62846], [15.14936, 10.53915], [15.23724, 10.47764], [15.30874, 10.31063], [15.50535, 10.1098], [15.68761, 9.99344], [15.41408, 9.92876], [15.24618, 9.99246], [15.14043, 9.99246], [15.05999, 9.94845], [14.95722, 9.97926], [14.80082, 9.93818], [14.4673, 10.00264], [14.20411, 10.00055], [14.1317, 9.82413], [14.01793, 9.73169], [13.97544, 9.6365], [14.37094, 9.2954], [14.35707, 9.19611], [14.83566, 8.80557], [15.09484, 8.65982], [15.20426, 8.50892], [15.50743, 7.79302], [15.59272, 7.7696], [15.56964, 7.58936], [15.49743, 7.52179], [15.73118, 7.52006], [15.79942, 7.44149], [16.40703, 7.68809], [16.41583, 7.77971], [16.58315, 7.88657], [16.59415, 7.76444], [16.658, 7.75353], [16.6668, 7.67281], [16.8143, 7.53971], [17.67288, 7.98905], [17.93926, 7.95853], [18.02731, 8.01085], [18.6085, 8.05009], [18.64153, 8.08714], [18.62612, 8.14163], [18.67455, 8.22226], [18.79783, 8.25929], [19.11044, 8.68172], [18.86388, 8.87971], [19.06421, 9.00367], [20.36748, 9.11019], [20.82979, 9.44696], [21.26348, 9.97642], [21.34934, 9.95907], [21.52766, 10.2105], [21.63553, 10.217], [21.71479, 10.29932], [21.72139, 10.64136], [22.45889, 11.00246], [22.87758, 10.91915], [22.97249, 11.21955], [22.93124, 11.41645], [22.7997, 11.40424], [22.54907, 11.64372], [22.64092, 12.07485], [22.48369, 12.02766], [22.50548, 12.16769], [22.38873, 12.45514], [22.46345, 12.61925], [22.22684, 12.74682], [22.15679, 12.66634], [21.98711, 12.63292], [21.89371, 12.68001], [21.81432, 12.81362], [21.94819, 13.05637], [22.02914, 13.13976], [22.1599, 13.19281], [22.29689, 13.3731], [22.08674, 13.77863], [22.22995, 13.96754], [22.5553, 14.11704], [22.55997, 14.23024], [22.44944, 14.24986], [22.38562, 14.58907], [22.70474, 14.69149], [22.66115, 14.86308], [22.99584, 15.22989], [22.99584, 15.40105], [22.92579, 15.47007], [22.93201, 15.55107], [23.10792, 15.71297], [23.38812, 15.69649], [23.62785, 15.7804], [23.99997, 15.69575], [23.99539, 19.49944]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TF",
      iso1A3: "ATF",
      iso1N3: "260",
      wikidata: "Q129003",
      nameEn: "French Southern Territories",
      country: "FR"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TG",
      iso1A3: "TGO",
      iso1N3: "768",
      wikidata: "Q945",
      nameEn: "Togo",
      groups: ["011", "202", "002", "UN"],
      callingCodes: ["228"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[0.50388, 11.01011], [-0.13493, 11.14075], [-0.14462, 11.10811], [-0.05733, 11.08628], [-0.0275, 11.11202], [-514e-5, 11.10763], [342e-5, 11.08317], [0.02395, 11.06229], [0.03355, 10.9807], [-63e-4, 10.96417], [-908e-5, 10.91644], [-0.02685, 10.8783], [-0.0228, 10.81916], [-0.07183, 10.76794], [-0.07327, 10.71845], [-0.09141, 10.7147], [-0.05945, 10.63458], [0.12886, 10.53149], [0.18846, 10.4096], [0.29453, 10.41546], [0.33028, 10.30408], [0.39584, 10.31112], [0.35293, 10.09412], [0.41371, 10.06361], [0.41252, 10.02018], [0.36366, 10.03309], [0.32075, 9.72781], [0.34816, 9.71607], [0.34816, 9.66907], [0.32313, 9.6491], [0.28261, 9.69022], [0.26712, 9.66437], [0.29334, 9.59387], [0.36008, 9.6256], [0.38153, 9.58682], [0.23851, 9.57389], [0.2409, 9.52335], [0.30406, 9.521], [0.31241, 9.50337], [0.2254, 9.47869], [0.25758, 9.42696], [0.33148, 9.44812], [0.36485, 9.49749], [0.49118, 9.48339], [0.56388, 9.40697], [0.45424, 9.04581], [0.52455, 8.87746], [0.37319, 8.75262], [0.47211, 8.59945], [0.64731, 8.48866], [0.73432, 8.29529], [0.63897, 8.25873], [0.5913, 8.19622], [0.61156, 8.18324], [0.6056, 8.13959], [0.58891, 8.12779], [0.62943, 7.85751], [0.58295, 7.62368], [0.51979, 7.58706], [0.52455, 7.45354], [0.57223, 7.39326], [0.62943, 7.41099], [0.65327, 7.31643], [0.59606, 7.01252], [0.52217, 6.9723], [0.52098, 6.94391], [0.56508, 6.92971], [0.52853, 6.82921], [0.57406, 6.80348], [0.58176, 6.76049], [0.6497, 6.73682], [0.63659, 6.63857], [0.74862, 6.56517], [0.71048, 6.53083], [0.89283, 6.33779], [0.99652, 6.33779], [1.03108, 6.24064], [1.05969, 6.22998], [1.09187, 6.17074], [1.19966, 6.17069], [1.19771, 6.11522], [1.27574, 5.93551], [1.67336, 6.02702], [1.62913, 6.24075], [1.79826, 6.28221], [1.76906, 6.43189], [1.58105, 6.68619], [1.61812, 6.74843], [1.55877, 6.99737], [1.64249, 6.99562], [1.61838, 9.0527], [1.5649, 9.16941], [1.41746, 9.3226], [1.33675, 9.54765], [1.36624, 9.5951], [1.35507, 9.99525], [0.77666, 10.37665], [0.80358, 10.71459], [0.8804, 10.803], [0.91245, 10.99597], [0.66104, 10.99964], [0.4958, 10.93269], [0.50521, 10.98035], [0.48852, 10.98561], [0.50388, 11.01011]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TH",
      iso1A3: "THA",
      iso1N3: "764",
      wikidata: "Q869",
      nameEn: "Thailand",
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["66"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[100.08404, 20.36626], [99.95721, 20.46301], [99.91616, 20.44986], [99.90499, 20.4487], [99.89692, 20.44789], [99.89301, 20.44311], [99.89168, 20.44548], [99.88451, 20.44596], [99.88211, 20.44488], [99.86383, 20.44371], [99.81096, 20.33687], [99.68255, 20.32077], [99.46008, 20.39673], [99.46077, 20.36198], [99.5569, 20.20676], [99.52943, 20.14811], [99.416, 20.08614], [99.20328, 20.12877], [99.0735, 20.10298], [98.98679, 19.7419], [98.83661, 19.80931], [98.56065, 19.67807], [98.51182, 19.71303], [98.24884, 19.67876], [98.13829, 19.78541], [98.03314, 19.80941], [98.04364, 19.65755], [97.84715, 19.55782], [97.88423, 19.5041], [97.78769, 19.39429], [97.84186, 19.29526], [97.78606, 19.26769], [97.84024, 19.22217], [97.83479, 19.09972], [97.73797, 19.04261], [97.73654, 18.9812], [97.66487, 18.9371], [97.73836, 18.88478], [97.76752, 18.58097], [97.5258, 18.4939], [97.36444, 18.57138], [97.34522, 18.54596], [97.50383, 18.26844], [97.56219, 18.33885], [97.64116, 18.29778], [97.60841, 18.23846], [97.73723, 17.97912], [97.66794, 17.88005], [97.76407, 17.71595], [97.91829, 17.54504], [98.11185, 17.36829], [98.10439, 17.33847], [98.34566, 17.04822], [98.39441, 17.06266], [98.52624, 16.89979], [98.49603, 16.8446], [98.53833, 16.81934], [98.46994, 16.73613], [98.50253, 16.7139], [98.49713, 16.69022], [98.51043, 16.70107], [98.51579, 16.69433], [98.51472, 16.68521], [98.51833, 16.676], [98.51113, 16.64503], [98.5695, 16.62826], [98.57912, 16.55983], [98.63817, 16.47424], [98.68074, 16.27068], [98.84485, 16.42354], [98.92656, 16.36425], [98.8376, 16.11706], [98.69585, 16.13353], [98.57019, 16.04578], [98.59853, 15.87197], [98.541, 15.65406], [98.58598, 15.46821], [98.56027, 15.33471], [98.4866, 15.39154], [98.39351, 15.34177], [98.41906, 15.27103], [98.40522, 15.25268], [98.30446, 15.30667], [98.22, 15.21327], [98.18821, 15.13125], [98.24874, 14.83013], [98.56762, 14.37701], [98.97356, 14.04868], [99.16695, 13.72621], [99.20617, 13.20575], [99.12225, 13.19847], [99.10646, 13.05804], [99.18748, 12.9898], [99.18905, 12.84799], [99.29254, 12.68921], [99.409, 12.60603], [99.47519, 12.1353], [99.56445, 12.14805], [99.53424, 12.02317], [99.64891, 11.82699], [99.64108, 11.78948], [99.5672, 11.62732], [99.47598, 11.62434], [99.39485, 11.3925], [99.31573, 11.32081], [99.32756, 11.28545], [99.06938, 10.94857], [99.02337, 10.97217], [98.99701, 10.92962], [99.0069, 10.85485], [98.86819, 10.78336], [98.78511, 10.68351], [98.77275, 10.62548], [98.81944, 10.52761], [98.7391, 10.31488], [98.55174, 9.92804], [98.52291, 9.92389], [98.47298, 9.95782], [98.33094, 9.91973], [98.12555, 9.44056], [97.63455, 9.60854], [97.19814, 8.18901], [99.31854, 5.99868], [99.50117, 6.44501], [99.91873, 6.50233], [100.0756, 6.4045], [100.12, 6.42105], [100.19511, 6.72559], [100.29651, 6.68439], [100.30828, 6.66462], [100.31618, 6.66781], [100.31884, 6.66423], [100.32671, 6.66526], [100.32607, 6.65933], [100.31929, 6.65413], [100.35413, 6.54932], [100.41152, 6.52299], [100.41791, 6.5189], [100.42351, 6.51762], [100.43027, 6.52389], [100.66986, 6.45086], [100.74361, 6.50811], [100.74822, 6.46231], [100.81045, 6.45086], [100.85884, 6.24929], [101.10313, 6.25617], [101.12618, 6.19431], [101.06165, 6.14161], [101.12388, 6.11411], [101.087, 5.9193], [101.02708, 5.91013], [100.98815, 5.79464], [101.14062, 5.61613], [101.25755, 5.71065], [101.25524, 5.78633], [101.58019, 5.93534], [101.69773, 5.75881], [101.75074, 5.79091], [101.80144, 5.74505], [101.89188, 5.8386], [101.91776, 5.84269], [101.92819, 5.85511], [101.94712, 5.98421], [101.9714, 6.00575], [101.97114, 6.01992], [101.99209, 6.04075], [102.01835, 6.05407], [102.09182, 6.14161], [102.07732, 6.193], [102.08127, 6.22679], [102.09086, 6.23546], [102.46318, 7.22462], [102.47649, 9.66162], [102.52395, 11.25257], [102.91449, 11.65512], [102.90973, 11.75613], [102.83957, 11.8519], [102.78427, 11.98746], [102.77026, 12.06815], [102.70176, 12.1686], [102.73134, 12.37091], [102.78116, 12.40284], [102.7796, 12.43781], [102.57567, 12.65358], [102.51963, 12.66117], [102.4994, 12.71736], [102.53053, 12.77506], [102.49335, 12.92711], [102.48694, 12.97537], [102.52275, 12.99813], [102.46011, 13.08057], [102.43422, 13.09061], [102.36146, 13.26006], [102.36001, 13.31142], [102.34611, 13.35618], [102.35692, 13.38274], [102.35563, 13.47307], [102.361, 13.50551], [102.33828, 13.55613], [102.36859, 13.57488], [102.44601, 13.5637], [102.5358, 13.56933], [102.57573, 13.60461], [102.62483, 13.60883], [102.58635, 13.6286], [102.5481, 13.6589], [102.56848, 13.69366], [102.72727, 13.77806], [102.77864, 13.93374], [102.91251, 14.01531], [102.93275, 14.19044], [103.16469, 14.33075], [103.39353, 14.35639], [103.53518, 14.42575], [103.71109, 14.4348], [103.70175, 14.38052], [103.93836, 14.3398], [104.27616, 14.39861], [104.55014, 14.36091], [104.69335, 14.42726], [104.97667, 14.38806], [105.02804, 14.23722], [105.08408, 14.20402], [105.14012, 14.23873], [105.17748, 14.34432], [105.20894, 14.34967], [105.43783, 14.43865], [105.53864, 14.55731], [105.5121, 14.80802], [105.61162, 15.00037], [105.46661, 15.13132], [105.58043, 15.32724], [105.50662, 15.32054], [105.4692, 15.33709], [105.47635, 15.3796], [105.58191, 15.41031], [105.60446, 15.53301], [105.61756, 15.68792], [105.46573, 15.74742], [105.42285, 15.76971], [105.37959, 15.84074], [105.34115, 15.92737], [105.38508, 15.987], [105.42001, 16.00657], [105.06204, 16.09792], [105.00262, 16.25627], [104.88057, 16.37311], [104.73349, 16.565], [104.76099, 16.69302], [104.7397, 16.81005], [104.76442, 16.84752], [104.7373, 16.91125], [104.73712, 17.01404], [104.80716, 17.19025], [104.80061, 17.39367], [104.69867, 17.53038], [104.45404, 17.66788], [104.35432, 17.82871], [104.2757, 17.86139], [104.21776, 17.99335], [104.10927, 18.10826], [104.06533, 18.21656], [103.97725, 18.33631], [103.93916, 18.33914], [103.85642, 18.28666], [103.82449, 18.33979], [103.699, 18.34125], [103.60957, 18.40528], [103.47773, 18.42841], [103.41044, 18.4486], [103.30977, 18.4341], [103.24779, 18.37807], [103.23818, 18.34875], [103.29757, 18.30475], [103.17093, 18.2618], [103.14994, 18.23172], [103.1493, 18.17799], [103.07343, 18.12351], [103.07823, 18.03833], [103.0566, 18.00144], [103.01998, 17.97095], [102.9912, 17.9949], [102.95812, 18.0054], [102.86323, 17.97531], [102.81988, 17.94233], [102.79044, 17.93612], [102.75954, 17.89561], [102.68538, 17.86653], [102.67543, 17.84529], [102.69946, 17.81686], [102.68194, 17.80151], [102.59485, 17.83537], [102.5896, 17.84889], [102.61432, 17.92273], [102.60971, 17.95411], [102.59234, 17.96127], [102.45523, 17.97106], [102.11359, 18.21532], [101.88485, 18.02474], [101.78087, 18.07559], [101.72294, 17.92867], [101.44667, 17.7392], [101.15108, 17.47586], [100.96541, 17.57926], [101.02185, 17.87637], [101.1793, 18.0544], [101.19118, 18.2125], [101.15108, 18.25624], [101.18227, 18.34367], [101.06047, 18.43247], [101.27585, 18.68875], [101.22832, 18.73377], [101.25803, 18.89545], [101.35606, 19.04716], [101.261, 19.12717], [101.24911, 19.33334], [101.20604, 19.35296], [101.21347, 19.46223], [101.26991, 19.48324], [101.26545, 19.59242], [101.08928, 19.59748], [100.90302, 19.61901], [100.77231, 19.48324], [100.64606, 19.55884], [100.58219, 19.49164], [100.49604, 19.53504], [100.398, 19.75047], [100.5094, 19.87904], [100.58808, 20.15791], [100.55218, 20.17741], [100.51052, 20.14928], [100.47567, 20.19133], [100.4537, 20.19971], [100.44992, 20.23644], [100.41473, 20.25625], [100.37439, 20.35156], [100.33383, 20.4028], [100.25769, 20.3992], [100.22076, 20.31598], [100.16668, 20.2986], [100.1712, 20.24324], [100.11785, 20.24787], [100.09337, 20.26293], [100.09999, 20.31614], [100.08404, 20.36626]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TJ",
      iso1A3: "TJK",
      iso1N3: "762",
      wikidata: "Q863",
      nameEn: "Tajikistan",
      groups: ["143", "142", "UN"],
      callingCodes: ["992"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[70.45251, 41.04438], [70.38028, 41.02014], [70.36655, 40.90296], [69.69434, 40.62615], [69.59441, 40.70181], [69.53021, 40.77621], [69.38327, 40.7918], [69.32834, 40.70233], [69.3455, 40.57988], [69.2643, 40.57506], [69.21063, 40.54469], [69.27066, 40.49274], [69.28525, 40.41894], [69.30774, 40.36102], [69.33794, 40.34819], [69.32833, 40.29794], [69.30808, 40.2821], [69.24817, 40.30357], [69.25229, 40.26362], [69.30104, 40.24502], [69.30448, 40.18774], [69.2074, 40.21488], [69.15659, 40.2162], [69.04544, 40.22904], [68.85832, 40.20885], [68.84357, 40.18604], [68.79276, 40.17555], [68.77902, 40.20492], [68.5332, 40.14826], [68.52771, 40.11676], [68.62796, 40.07789], [69.01523, 40.15771], [69.01935, 40.11466], [68.96579, 40.06949], [68.84906, 40.04952], [68.93695, 39.91167], [68.88889, 39.87163], [68.63071, 39.85265], [68.61972, 39.68905], [68.54166, 39.53929], [68.12053, 39.56317], [67.70992, 39.66156], [67.62889, 39.60234], [67.44899, 39.57799], [67.46547, 39.53564], [67.39681, 39.52505], [67.46822, 39.46146], [67.45998, 39.315], [67.36522, 39.31287], [67.33226, 39.23739], [67.67833, 39.14479], [67.68915, 39.00775], [68.09704, 39.02589], [68.19743, 38.85985], [68.06948, 38.82115], [68.12877, 38.73677], [68.05598, 38.71641], [68.0807, 38.64136], [68.05873, 38.56087], [68.11366, 38.47169], [68.06274, 38.39435], [68.13289, 38.40822], [68.40343, 38.19484], [68.27159, 37.91477], [68.12635, 37.93], [67.81566, 37.43107], [67.8474, 37.31594], [67.78329, 37.1834], [67.7803, 37.08978], [67.87917, 37.0591], [68.02194, 36.91923], [68.18542, 37.02074], [68.27605, 37.00977], [68.29253, 37.10621], [68.41201, 37.10402], [68.41888, 37.13906], [68.61851, 37.19815], [68.6798, 37.27906], [68.81438, 37.23862], [68.80889, 37.32494], [68.91189, 37.26704], [68.88168, 37.33368], [68.96407, 37.32603], [69.03274, 37.25174], [69.25152, 37.09426], [69.39529, 37.16752], [69.45022, 37.23315], [69.36645, 37.40462], [69.44954, 37.4869], [69.51888, 37.5844], [69.80041, 37.5746], [69.84435, 37.60616], [69.93362, 37.61378], [69.95971, 37.5659], [70.15015, 37.52519], [70.28243, 37.66706], [70.27694, 37.81258], [70.1863, 37.84296], [70.17206, 37.93276], [70.4898, 38.12546], [70.54673, 38.24541], [70.60407, 38.28046], [70.61526, 38.34774], [70.64966, 38.34999], [70.69189, 38.37031], [70.6761, 38.39144], [70.67438, 38.40597], [70.69807, 38.41861], [70.72485, 38.4131], [70.75455, 38.4252], [70.77132, 38.45548], [70.78581, 38.45502], [70.78702, 38.45031], [70.79766, 38.44944], [70.80521, 38.44447], [70.81697, 38.44507], [70.82538, 38.45394], [70.84376, 38.44688], [70.88719, 38.46826], [70.92728, 38.43021], [70.98693, 38.48862], [71.03545, 38.44779], [71.0556, 38.40176], [71.09542, 38.42517], [71.10592, 38.42077], [71.10957, 38.40671], [71.1451, 38.40106], [71.21291, 38.32797], [71.33114, 38.30339], [71.33869, 38.27335], [71.37803, 38.25641], [71.36444, 38.15358], [71.29878, 38.04429], [71.28922, 38.01272], [71.27622, 37.99946], [71.27278, 37.96496], [71.24969, 37.93031], [71.2809, 37.91995], [71.296, 37.93403], [71.32871, 37.88564], [71.51565, 37.95349], [71.58843, 37.92425], [71.59255, 37.79956], [71.55752, 37.78677], [71.54324, 37.77104], [71.53053, 37.76534], [71.55234, 37.73209], [71.54186, 37.69691], [71.51972, 37.61945], [71.5065, 37.60912], [71.49693, 37.53527], [71.50616, 37.50733], [71.5256, 37.47971], [71.49612, 37.4279], [71.47685, 37.40281], [71.4862, 37.33405], [71.49821, 37.31975], [71.50674, 37.31502], [71.48536, 37.26017], [71.4824, 37.24921], [71.48339, 37.23937], [71.47386, 37.2269], [71.4555, 37.21418], [71.4494, 37.18137], [71.44127, 37.11856], [71.43097, 37.05855], [71.45578, 37.03094], [71.46923, 36.99925], [71.48481, 36.93218], [71.51502, 36.89128], [71.57195, 36.74943], [71.67083, 36.67346], [71.83229, 36.68084], [72.31676, 36.98115], [72.54095, 37.00007], [72.66381, 37.02014], [72.79693, 37.22222], [73.06884, 37.31729], [73.29633, 37.46495], [73.77197, 37.4417], [73.76647, 37.33913], [73.61129, 37.27469], [73.64974, 37.23643], [73.82552, 37.22659], [73.8564, 37.26158], [74.20308, 37.34208], [74.23339, 37.41116], [74.41055, 37.3948], [74.56161, 37.37734], [74.68383, 37.3948], [74.8294, 37.3435], [74.88887, 37.23275], [75.12328, 37.31839], [75.09719, 37.37297], [75.15899, 37.41443], [75.06011, 37.52779], [74.94338, 37.55501], [74.8912, 37.67576], [75.00935, 37.77486], [74.92416, 37.83428], [74.9063, 38.03033], [74.82665, 38.07359], [74.80331, 38.19889], [74.69894, 38.22155], [74.69619, 38.42947], [74.51217, 38.47034], [74.17022, 38.65504], [73.97933, 38.52945], [73.79806, 38.61106], [73.80656, 38.66449], [73.7033, 38.84782], [73.7445, 38.93867], [73.82964, 38.91517], [73.81728, 39.04007], [73.75823, 39.023], [73.60638, 39.24534], [73.54572, 39.27567], [73.55396, 39.3543], [73.5004, 39.38402], [73.59241, 39.40843], [73.59831, 39.46425], [73.45096, 39.46677], [73.31912, 39.38615], [73.18454, 39.35536], [72.85934, 39.35116], [72.62027, 39.39696], [72.33173, 39.33093], [72.23834, 39.17248], [72.17242, 39.2661], [72.09689, 39.26823], [72.04059, 39.36704], [71.90601, 39.27674], [71.79202, 39.27355], [71.7522, 39.32031], [71.80164, 39.40631], [71.76816, 39.45456], [71.62688, 39.44056], [71.5517, 39.45722], [71.55856, 39.57588], [71.49814, 39.61397], [71.08752, 39.50704], [71.06418, 39.41586], [70.7854, 39.38933], [70.64087, 39.58792], [70.44757, 39.60128], [70.2869, 39.53141], [70.11111, 39.58223], [69.87491, 39.53882], [69.68677, 39.59281], [69.3594, 39.52516], [69.26938, 39.8127], [69.35649, 40.01994], [69.43134, 39.98431], [69.43557, 39.92877], [69.53615, 39.93991], [69.5057, 40.03277], [69.53855, 40.0887], [69.53794, 40.11833], [69.55555, 40.12296], [69.57615, 40.10524], [69.64704, 40.12165], [69.67001, 40.10639], [70.01283, 40.23288], [70.58297, 40.00891], [70.57384, 39.99394], [70.47557, 39.93216], [70.55033, 39.96619], [70.58912, 39.95211], [70.65946, 39.9878], [70.65827, 40.0981], [70.7928, 40.12797], [70.80495, 40.16813], [70.9818, 40.22392], [70.8607, 40.217], [70.62342, 40.17396], [70.56394, 40.26421], [70.57149, 40.3442], [70.37511, 40.38605], [70.32626, 40.45174], [70.49871, 40.52503], [70.80009, 40.72825], [70.45251, 41.04438]]], [[[70.68112, 40.90612], [70.6158, 40.97661], [70.56077, 41.00642], [70.54223, 40.98787], [70.57501, 40.98941], [70.6721, 40.90555], [70.68112, 40.90612]]], [[[70.74189, 39.86319], [70.53651, 39.89155], [70.52631, 39.86989], [70.54998, 39.85137], [70.59667, 39.83542], [70.63105, 39.77923], [70.74189, 39.86319]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TK",
      iso1A3: "TKL",
      iso1N3: "772",
      wikidata: "Q36823",
      nameEn: "Tokelau",
      country: "NZ",
      groups: ["061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["690"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-168.251, -9.44289], [-174.18635, -7.80441], [-174.17993, -10.13616], [-168.251, -9.44289]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TL",
      iso1A3: "TLS",
      iso1N3: "626",
      wikidata: "Q574",
      nameEn: "East Timor",
      aliases: ["Timor-Leste", "TP"],
      groups: ["035", "142", "UN"],
      driveSide: "left",
      callingCodes: ["670"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[124.46701, -9.13002], [124.94011, -8.85617], [124.97742, -9.08128], [125.11764, -8.96359], [125.18632, -9.03142], [125.18907, -9.16434], [125.09434, -9.19669], [125.04044, -9.17093], [124.97892, -9.19281], [125.09025, -9.46406], [125.68138, -9.85176], [127.55165, -9.05052], [127.42116, -8.22471], [125.87691, -8.31789], [125.58506, -7.95311], [124.92337, -8.75859], [124.33472, -9.11416], [124.04628, -9.22671], [124.04286, -9.34243], [124.10539, -9.41206], [124.14517, -9.42324], [124.21247, -9.36904], [124.28115, -9.42189], [124.28115, -9.50453], [124.3535, -9.48493], [124.35258, -9.43002], [124.38554, -9.3582], [124.45971, -9.30263], [124.46701, -9.13002]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TM",
      iso1A3: "TKM",
      iso1N3: "795",
      wikidata: "Q874",
      nameEn: "Turkmenistan",
      groups: ["143", "142", "UN"],
      callingCodes: ["993"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[60.5078, 41.21694], [60.06581, 41.4363], [60.18117, 41.60082], [60.06032, 41.76287], [60.08504, 41.80997], [60.33223, 41.75058], [59.95046, 41.97966], [60.0356, 42.01028], [60.04659, 42.08982], [59.96419, 42.1428], [60.00539, 42.212], [59.94633, 42.27655], [59.4341, 42.29738], [59.2955, 42.37064], [59.17317, 42.52248], [58.93422, 42.5407], [58.6266, 42.79314], [58.57991, 42.64988], [58.27504, 42.69632], [58.14321, 42.62159], [58.29427, 42.56497], [58.51674, 42.30348], [58.40688, 42.29535], [58.3492, 42.43335], [57.99214, 42.50021], [57.90975, 42.4374], [57.92897, 42.24047], [57.84932, 42.18555], [57.6296, 42.16519], [57.30275, 42.14076], [57.03633, 41.92043], [56.96218, 41.80383], [57.03359, 41.41777], [57.13796, 41.36625], [57.03423, 41.25435], [56.00314, 41.32584], [55.45471, 41.25609], [54.95182, 41.92424], [54.20635, 42.38477], [52.97575, 42.1308], [52.47884, 41.78034], [52.26048, 41.69249], [51.7708, 40.29239], [53.89734, 37.3464], [54.24565, 37.32047], [54.36211, 37.34912], [54.58664, 37.45809], [54.67247, 37.43532], [54.77822, 37.51597], [54.81804, 37.61285], [54.77684, 37.62264], [54.851, 37.75739], [55.13412, 37.94705], [55.44152, 38.08564], [55.76561, 38.12238], [55.97847, 38.08024], [56.33278, 38.08132], [56.32454, 38.18502], [56.43303, 38.26054], [56.62255, 38.24005], [56.73928, 38.27887], [57.03453, 38.18717], [57.21169, 38.28965], [57.37236, 38.09321], [57.35042, 37.98546], [57.79534, 37.89299], [58.21399, 37.77281], [58.22999, 37.6856], [58.39959, 37.63134], [58.47786, 37.6433], [58.5479, 37.70526], [58.6921, 37.64548], [58.9338, 37.67374], [59.22905, 37.51161], [59.33507, 37.53146], [59.39797, 37.47892], [59.39385, 37.34257], [59.55178, 37.13594], [59.74678, 37.12499], [60.00768, 37.04102], [60.34767, 36.63214], [61.14516, 36.64644], [61.18187, 36.55348], [61.1393, 36.38782], [61.22719, 36.12759], [61.12007, 35.95992], [61.22444, 35.92879], [61.26152, 35.80749], [61.22719, 35.67038], [61.27371, 35.61482], [61.58742, 35.43803], [61.77693, 35.41341], [61.97743, 35.4604], [62.05709, 35.43803], [62.15871, 35.33278], [62.29191, 35.25964], [62.29878, 35.13312], [62.48006, 35.28796], [62.62288, 35.22067], [62.74098, 35.25432], [62.90853, 35.37086], [63.0898, 35.43131], [63.12276, 35.53196], [63.10079, 35.63024], [63.23262, 35.67487], [63.10318, 35.81782], [63.12276, 35.86208], [63.29579, 35.85985], [63.53475, 35.90881], [63.56496, 35.95106], [63.98519, 36.03773], [64.05385, 36.10433], [64.43288, 36.24401], [64.57295, 36.34362], [64.62514, 36.44311], [64.61141, 36.6351], [64.97945, 37.21913], [65.51778, 37.23881], [65.64263, 37.34388], [65.64137, 37.45061], [65.72274, 37.55438], [66.30993, 37.32409], [66.55743, 37.35409], [66.52303, 37.39827], [66.65761, 37.45497], [66.52852, 37.58568], [66.53676, 37.80084], [66.67684, 37.96776], [66.56697, 38.0435], [66.41042, 38.02403], [66.24013, 38.16238], [65.83913, 38.25733], [65.55873, 38.29052], [64.32576, 38.98691], [64.19086, 38.95561], [63.70778, 39.22349], [63.6913, 39.27666], [62.43337, 39.98528], [62.34273, 40.43206], [62.11751, 40.58242], [61.87856, 41.12257], [61.4446, 41.29407], [61.39732, 41.19873], [61.33199, 41.14946], [61.22212, 41.14946], [61.03261, 41.25691], [60.5078, 41.21694]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TN",
      iso1A3: "TUN",
      iso1N3: "788",
      wikidata: "Q948",
      nameEn: "Tunisia",
      groups: ["015", "002", "UN"],
      callingCodes: ["216"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[11.2718, 37.6713], [7.89009, 38.19924], [8.59123, 37.14286], [8.64044, 36.9401], [8.62972, 36.86499], [8.67706, 36.8364], [8.57613, 36.78062], [8.46537, 36.7706], [8.47609, 36.66607], [8.16167, 36.48817], [8.18936, 36.44939], [8.40731, 36.42208], [8.2626, 35.91733], [8.26472, 35.73669], [8.35371, 35.66373], [8.36086, 35.47774], [8.30329, 35.29884], [8.47318, 35.23376], [8.3555, 35.10007], [8.30727, 34.95378], [8.25189, 34.92009], [8.29655, 34.72798], [8.20482, 34.57575], [7.86264, 34.3987], [7.81242, 34.21841], [7.74207, 34.16492], [7.66174, 34.20167], [7.52851, 34.06493], [7.54088, 33.7726], [7.73687, 33.42114], [7.83028, 33.18851], [8.11433, 33.10175], [8.1179, 33.05086], [8.31895, 32.83483], [8.35999, 32.50101], [9.07483, 32.07865], [9.55544, 30.23971], [9.76848, 30.34366], [9.88152, 30.34074], [10.29516, 30.90337], [10.12239, 31.42098], [10.31364, 31.72648], [10.48497, 31.72956], [10.62788, 31.96629], [10.7315, 31.97235], [11.04234, 32.2145], [11.53898, 32.4138], [11.57828, 32.48013], [11.46037, 32.6307], [11.51549, 33.09826], [11.55852, 33.1409], [11.58941, 33.36891], [11.2718, 37.6713]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TO",
      iso1A3: "TON",
      iso1N3: "776",
      wikidata: "Q678",
      nameEn: "Tonga",
      groups: ["061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["676"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-176.74538, -22.89767], [-180, -22.90585], [-180, -24.21376], [-173.10761, -24.19665], [-173.13438, -14.94228], [-176.76826, -14.95183], [-176.74538, -22.89767]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TR",
      iso1A3: "TUR",
      iso1N3: "792",
      wikidata: "Q43",
      nameEn: "Turkey",
      groups: ["145", "142", "UN"],
      callingCodes: ["90"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[41.54366, 41.52185], [40.89217, 41.72528], [34.8305, 42.4581], [28.32297, 41.98371], [28.02971, 41.98066], [27.91479, 41.97902], [27.83492, 41.99709], [27.81235, 41.94803], [27.69949, 41.97515], [27.55191, 41.90928], [27.52379, 41.93756], [27.45478, 41.96591], [27.27411, 42.10409], [27.22376, 42.10152], [27.19251, 42.06028], [27.08486, 42.08735], [27.03277, 42.0809], [26.95638, 42.00741], [26.79143, 41.97386], [26.62996, 41.97644], [26.56051, 41.92995], [26.57961, 41.90024], [26.53968, 41.82653], [26.36952, 41.82265], [26.33589, 41.76802], [26.32952, 41.73637], [26.35957, 41.71149], [26.47958, 41.67037], [26.5209, 41.62592], [26.59196, 41.60491], [26.59742, 41.48058], [26.61767, 41.42281], [26.62997, 41.34613], [26.5837, 41.32131], [26.5209, 41.33993], [26.39861, 41.25053], [26.32259, 41.24929], [26.31928, 41.07386], [26.3606, 41.02027], [26.33297, 40.98388], [26.35894, 40.94292], [26.32259, 40.94042], [26.28623, 40.93005], [26.29441, 40.89119], [26.26169, 40.9168], [26.20856, 40.86048], [26.21351, 40.83298], [26.15685, 40.80709], [26.12854, 40.77339], [26.12495, 40.74283], [26.08638, 40.73214], [26.0754, 40.72772], [26.03489, 40.73051], [25.94795, 40.72797], [26.04292, 40.3958], [25.61285, 40.17161], [25.94257, 39.39358], [26.43357, 39.43096], [26.70773, 39.0312], [26.61814, 38.81372], [26.21136, 38.65436], [26.32173, 38.48731], [26.24183, 38.44695], [26.21136, 38.17558], [27.05537, 37.9131], [27.16428, 37.72343], [26.99377, 37.69034], [26.95583, 37.64989], [27.14757, 37.32], [27.20312, 36.94571], [27.45627, 36.9008], [27.24613, 36.71622], [27.46117, 36.53789], [27.89482, 36.69898], [27.95037, 36.46155], [28.23708, 36.56812], [29.30783, 36.01033], [29.48192, 36.18377], [29.61002, 36.1731], [29.61805, 36.14179], [29.69611, 36.10365], [29.73302, 35.92555], [32.82353, 35.70297], [35.51152, 36.10954], [35.931, 35.92109], [35.98499, 35.94107], [36.00514, 35.94113], [36.01844, 35.92403], [35.99829, 35.88242], [36.11827, 35.85923], [36.13919, 35.83692], [36.14029, 35.81015], [36.1623, 35.80925], [36.17441, 35.92076], [36.19973, 35.95195], [36.25366, 35.96264], [36.27678, 35.94839], [36.29769, 35.96086], [36.28338, 36.00273], [36.30099, 36.00985], [36.33956, 35.98687], [36.37474, 36.01163], [36.39206, 36.22088], [36.4617, 36.20461], [36.50463, 36.2419], [36.6125, 36.22592], [36.68672, 36.23677], [36.65653, 36.33861], [36.6081, 36.33772], [36.54206, 36.49539], [36.58829, 36.58295], [36.57398, 36.65186], [36.62681, 36.71189], [36.61581, 36.74629], [36.66727, 36.82901], [36.99557, 36.75997], [36.99886, 36.74012], [37.04399, 36.73483], [37.04619, 36.71101], [37.01647, 36.69512], [37.02088, 36.66422], [37.08279, 36.63495], [37.10894, 36.6704], [37.16177, 36.66069], [37.21988, 36.6736], [37.47253, 36.63243], [37.49103, 36.66904], [37.68048, 36.75065], [37.81974, 36.76055], [38.21064, 36.91842], [38.38859, 36.90064], [38.55908, 36.84429], [38.74042, 36.70629], [39.03217, 36.70911], [39.21538, 36.66834], [39.81589, 36.75538], [40.69136, 37.0996], [40.90856, 37.13147], [41.21937, 37.07665], [41.515, 37.08084], [42.00894, 37.17209], [42.18225, 37.28569], [42.19301, 37.31323], [42.2112, 37.32491], [42.22257, 37.31395], [42.22381, 37.30238], [42.20454, 37.28715], [42.21548, 37.28026], [42.23683, 37.2863], [42.26039, 37.27017], [42.2824, 37.2798], [42.34735, 37.22548], [42.32313, 37.17814], [42.35724, 37.10998], [42.56725, 37.14878], [42.78887, 37.38615], [42.93705, 37.32015], [43.11403, 37.37436], [43.30083, 37.30629], [43.33508, 37.33105], [43.50787, 37.24436], [43.56702, 37.25675], [43.63085, 37.21957], [43.7009, 37.23692], [43.8052, 37.22825], [43.82699, 37.19477], [43.84878, 37.22205], [43.90949, 37.22453], [44.02002, 37.33229], [44.13521, 37.32486], [44.2613, 37.25055], [44.27998, 37.16501], [44.22239, 37.15756], [44.18503, 37.09551], [44.25975, 36.98119], [44.30645, 36.97373], [44.35937, 37.02843], [44.35315, 37.04955], [44.38117, 37.05825], [44.42631, 37.05825], [44.63179, 37.19229], [44.76698, 37.16162], [44.78319, 37.1431], [44.7868, 37.16644], [44.75986, 37.21549], [44.81021, 37.2915], [44.58449, 37.45018], [44.61401, 37.60165], [44.56887, 37.6429], [44.62096, 37.71985], [44.55498, 37.783], [44.45948, 37.77065], [44.3883, 37.85433], [44.22509, 37.88859], [44.42476, 38.25763], [44.50115, 38.33939], [44.44386, 38.38295], [44.38309, 38.36117], [44.3119, 38.37887], [44.3207, 38.49799], [44.32058, 38.62752], [44.28065, 38.6465], [44.26155, 38.71427], [44.30322, 38.81581], [44.18863, 38.93881], [44.20946, 39.13975], [44.1043, 39.19842], [44.03667, 39.39223], [44.22452, 39.4169], [44.29818, 39.378], [44.37921, 39.4131], [44.42832, 39.4131], [44.41849, 39.56659], [44.48111, 39.61579], [44.47298, 39.68788], [44.6137, 39.78393], [44.65422, 39.72163], [44.71806, 39.71124], [44.81043, 39.62677], [44.80977, 39.65768], [44.75779, 39.7148], [44.61845, 39.8281], [44.46635, 39.97733], [44.26973, 40.04866], [44.1778, 40.02845], [44.1057, 40.03555], [43.92307, 40.01787], [43.65688, 40.11199], [43.65221, 40.14889], [43.71136, 40.16673], [43.59928, 40.34019], [43.60862, 40.43267], [43.54791, 40.47413], [43.63664, 40.54159], [43.7425, 40.66805], [43.74872, 40.7365], [43.67712, 40.84846], [43.67712, 40.93084], [43.58683, 40.98961], [43.47319, 41.02251], [43.44984, 41.0988], [43.4717, 41.12611], [43.44973, 41.17666], [43.36118, 41.2028], [43.23096, 41.17536], [43.1945, 41.25242], [43.13373, 41.25503], [43.21707, 41.30331], [43.02956, 41.37891], [42.8785, 41.50516], [42.84899, 41.47265], [42.78995, 41.50126], [42.84471, 41.58912], [42.72794, 41.59714], [42.59202, 41.58183], [42.51772, 41.43606], [42.26387, 41.49346], [41.95134, 41.52466], [41.81939, 41.43621], [41.7124, 41.47417], [41.7148, 41.4932], [41.54366, 41.52185]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TT",
      iso1A3: "TTO",
      iso1N3: "780",
      wikidata: "Q754",
      nameEn: "Trinidad and Tobago",
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      callingCodes: ["1 868"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-61.62505, 11.18974], [-62.08693, 10.04435], [-60.89962, 9.81445], [-60.07172, 11.77667], [-61.62505, 11.18974]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TV",
      iso1A3: "TUV",
      iso1N3: "798",
      wikidata: "Q672",
      nameEn: "Tuvalu",
      groups: ["061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["688"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[174, -5], [174, -11.5], [179.99999, -11.5], [179.99999, -5], [174, -5]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TW",
      iso1A3: "TWN",
      iso1N3: "158",
      wikidata: "Q865",
      nameEn: "Taiwan",
      aliases: ["RC"],
      groups: ["030", "142"],
      callingCodes: ["886"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[121.8109, 21.77688], [122.26612, 25.98197], [120.49232, 25.22863], [118.56434, 24.49266], [118.42453, 24.54644], [118.35291, 24.51645], [118.28244, 24.51231], [118.11703, 24.39734], [120.69238, 21.52331], [121.8109, 21.77688]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "TZ",
      iso1A3: "TZA",
      iso1N3: "834",
      wikidata: "Q924",
      nameEn: "Tanzania",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["255"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[30.80408, -0.99911], [30.76635, -0.9852], [30.70631, -1.01175], [30.64166, -1.06601], [30.47194, -1.0555], [30.45116, -1.10641], [30.50889, -1.16412], [30.57123, -1.33264], [30.71974, -1.43244], [30.84079, -1.64652], [30.80802, -1.91477], [30.89303, -2.08223], [30.83915, -2.35795], [30.54501, -2.41404], [30.41789, -2.66266], [30.52747, -2.65841], [30.40662, -2.86151], [30.4987, -2.9573], [30.57926, -2.89791], [30.6675, -2.98987], [30.83823, -2.97837], [30.84165, -3.25152], [30.45915, -3.56532], [30.22042, -4.01738], [30.03323, -4.26631], [29.88172, -4.35743], [29.82885, -4.36153], [29.77289, -4.41733], [29.75109, -4.45836], [29.63827, -4.44681], [29.43673, -4.44845], [29.52552, -6.2731], [30.2567, -7.14121], [30.79243, -8.27382], [31.00796, -8.58615], [31.37533, -8.60769], [31.57147, -8.70619], [31.57147, -8.81388], [31.71158, -8.91386], [31.81587, -8.88618], [31.94663, -8.93846], [31.94196, -9.02303], [31.98866, -9.07069], [32.08206, -9.04609], [32.16146, -9.05993], [32.25486, -9.13371], [32.43543, -9.11988], [32.49147, -9.14754], [32.53661, -9.24281], [32.75611, -9.28583], [32.76233, -9.31963], [32.95389, -9.40138], [32.99397, -9.36712], [33.14925, -9.49322], [33.31581, -9.48554], [33.48052, -9.62442], [33.76677, -9.58516], [33.93298, -9.71647], [33.9638, -9.62206], [33.95829, -9.54066], [34.03865, -9.49398], [34.54499, -10.0678], [34.51911, -10.12279], [34.57581, -10.56271], [34.65946, -10.6828], [34.67047, -10.93796], [34.61161, -11.01611], [34.63305, -11.11731], [34.79375, -11.32245], [34.91153, -11.39799], [34.96296, -11.57354], [35.63599, -11.55927], [35.82767, -11.41081], [36.19094, -11.57593], [36.19094, -11.70008], [36.62068, -11.72884], [36.80309, -11.56836], [37.3936, -11.68949], [37.76614, -11.53352], [37.8388, -11.3123], [37.93618, -11.26228], [38.21598, -11.27289], [38.47258, -11.4199], [38.88996, -11.16978], [39.24395, -11.17433], [39.58249, -10.96043], [40.00295, -10.80255], [40.44265, -10.4618], [40.74206, -10.25691], [40.14328, -4.64201], [39.62121, -4.68136], [39.44306, -4.93877], [39.21631, -4.67835], [37.81321, -3.69179], [37.75036, -3.54243], [37.63099, -3.50723], [37.5903, -3.42735], [37.71745, -3.304], [37.67199, -3.06222], [34.0824, -1.02264], [34.03084, -1.05101], [34.02286, -1.00779], [33.93107, -0.99298], [30.80408, -0.99911]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "UA",
      iso1A3: "UKR",
      iso1N3: "804",
      wikidata: "Q212",
      nameEn: "Ukraine",
      groups: ["151", "150", "UN"],
      callingCodes: ["380"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.57318, 46.10317], [33.61467, 46.13561], [33.63854, 46.14147], [33.61517, 46.22615], [33.646, 46.23028], [33.74047, 46.18555], [33.79715, 46.20482], [33.85234, 46.19863], [33.91549, 46.15938], [34.05272, 46.10838], [34.07311, 46.11769], [34.12929, 46.10494], [34.181, 46.06804], [34.25111, 46.0532], [34.33912, 46.06114], [34.41221, 46.00245], [34.44155, 45.95995], [34.48729, 45.94267], [34.52011, 45.95097], [34.55889, 45.99347], [34.60861, 45.99347], [34.66679, 45.97136], [34.75479, 45.90705], [34.80153, 45.90047], [34.79905, 45.81009], [34.96015, 45.75634], [35.23066, 45.79231], [37.62608, 46.82615], [38.12112, 46.86078], [38.3384, 46.98085], [38.22955, 47.12069], [38.23049, 47.2324], [38.32112, 47.2585], [38.33074, 47.30508], [38.22225, 47.30788], [38.28954, 47.39255], [38.28679, 47.53552], [38.35062, 47.61631], [38.76379, 47.69346], [38.79628, 47.81109], [38.87979, 47.87719], [39.73935, 47.82876], [39.82213, 47.96396], [39.77544, 48.04206], [39.88256, 48.04482], [39.83724, 48.06501], [39.94847, 48.22811], [40.00752, 48.22445], [39.99241, 48.31768], [39.97325, 48.31399], [39.9693, 48.29904], [39.95248, 48.29972], [39.91465, 48.26743], [39.90041, 48.3049], [39.84273, 48.30947], [39.84136, 48.33321], [39.94847, 48.35055], [39.88794, 48.44226], [39.86196, 48.46633], [39.84548, 48.57821], [39.79764, 48.58668], [39.67226, 48.59368], [39.71765, 48.68673], [39.73104, 48.7325], [39.79466, 48.83739], [39.97182, 48.79398], [40.08168, 48.87443], [40.03636, 48.91957], [39.98967, 48.86901], [39.78368, 48.91596], [39.74874, 48.98675], [39.72649, 48.9754], [39.71353, 48.98959], [39.6683, 48.99454], [39.6836, 49.05121], [39.93437, 49.05709], [40.01988, 49.1761], [40.22176, 49.25683], [40.18331, 49.34996], [40.14912, 49.37681], [40.1141, 49.38798], [40.03087, 49.45452], [40.03636, 49.52321], [40.16683, 49.56865], [40.13249, 49.61672], [39.84548, 49.56064], [39.65047, 49.61761], [39.59142, 49.73758], [39.44496, 49.76067], [39.27968, 49.75976], [39.1808, 49.88911], [38.9391, 49.79524], [38.90477, 49.86787], [38.73311, 49.90238], [38.68677, 50.00904], [38.65688, 49.97176], [38.35408, 50.00664], [38.32524, 50.08866], [38.18517, 50.08161], [38.21675, 49.98104], [38.02999, 49.90592], [38.02999, 49.94482], [37.90776, 50.04194], [37.79515, 50.08425], [37.75807, 50.07896], [37.61113, 50.21976], [37.62879, 50.24481], [37.62486, 50.29966], [37.47243, 50.36277], [37.48204, 50.46079], [37.08468, 50.34935], [36.91762, 50.34963], [36.69377, 50.26982], [36.64571, 50.218], [36.56655, 50.2413], [36.58371, 50.28563], [36.47817, 50.31457], [36.30101, 50.29088], [36.20763, 50.3943], [36.06893, 50.45205], [35.8926, 50.43829], [35.80388, 50.41356], [35.73659, 50.35489], [35.61711, 50.35707], [35.58003, 50.45117], [35.47463, 50.49247], [35.39464, 50.64751], [35.48116, 50.66405], [35.47704, 50.77274], [35.41367, 50.80227], [35.39307, 50.92145], [35.32598, 50.94524], [35.40837, 51.04119], [35.31774, 51.08434], [35.20375, 51.04723], [35.12685, 51.16191], [35.14058, 51.23162], [34.97304, 51.2342], [34.82472, 51.17483], [34.6874, 51.18], [34.6613, 51.25053], [34.38802, 51.2746], [34.31661, 51.23936], [34.23009, 51.26429], [34.33446, 51.363], [34.22048, 51.4187], [34.30562, 51.5205], [34.17599, 51.63253], [34.07765, 51.67065], [34.42922, 51.72852], [34.41136, 51.82793], [34.09413, 52.00835], [34.11199, 52.14087], [34.05239, 52.20132], [33.78789, 52.37204], [33.55718, 52.30324], [33.48027, 52.31499], [33.51323, 52.35779], [33.18913, 52.3754], [32.89937, 52.2461], [32.85405, 52.27888], [32.69475, 52.25535], [32.54781, 52.32423], [32.3528, 52.32842], [32.38988, 52.24946], [32.33083, 52.23685], [32.34044, 52.1434], [32.2777, 52.10266], [32.23331, 52.08085], [32.08813, 52.03319], [31.92159, 52.05144], [31.96141, 52.08015], [31.85018, 52.11305], [31.81722, 52.09955], [31.7822, 52.11406], [31.38326, 52.12991], [31.25142, 52.04131], [31.13332, 52.1004], [30.95589, 52.07775], [30.90897, 52.00699], [30.76443, 51.89739], [30.68804, 51.82806], [30.51946, 51.59649], [30.64992, 51.35014], [30.56203, 51.25655], [30.36153, 51.33984], [30.34642, 51.42555], [30.17888, 51.51025], [29.77376, 51.4461], [29.7408, 51.53417], [29.54372, 51.48372], [29.49773, 51.39814], [29.42357, 51.4187], [29.32881, 51.37843], [29.25191, 51.49828], [29.25603, 51.57089], [29.20659, 51.56918], [29.16402, 51.64679], [29.1187, 51.65872], [28.99098, 51.56833], [28.95528, 51.59222], [28.81795, 51.55552], [28.76027, 51.48802], [28.78224, 51.45294], [28.75615, 51.41442], [28.73143, 51.46236], [28.69161, 51.44695], [28.64429, 51.5664], [28.47051, 51.59734], [28.37592, 51.54505], [28.23452, 51.66988], [28.10658, 51.57857], [27.95827, 51.56065], [27.91844, 51.61952], [27.85253, 51.62293], [27.76052, 51.47604], [27.67125, 51.50854], [27.71932, 51.60672], [27.55727, 51.63486], [27.51058, 51.5854], [27.47212, 51.61184], [27.24828, 51.60161], [27.26613, 51.65957], [27.20948, 51.66713], [27.20602, 51.77291], [26.99422, 51.76933], [26.9489, 51.73788], [26.80043, 51.75777], [26.69759, 51.82284], [26.46962, 51.80501], [26.39367, 51.87315], [26.19084, 51.86781], [26.00408, 51.92967], [25.83217, 51.92587], [25.80574, 51.94556], [25.73673, 51.91973], [25.46163, 51.92205], [25.20228, 51.97143], [24.98784, 51.91273], [24.37123, 51.88222], [24.29021, 51.80841], [24.3163, 51.75063], [24.13075, 51.66979], [23.99907, 51.58369], [23.8741, 51.59734], [23.91118, 51.63316], [23.7766, 51.66809], [23.60906, 51.62122], [23.6736, 51.50255], [23.62751, 51.50512], [23.69905, 51.40871], [23.63858, 51.32182], [23.80678, 51.18405], [23.90376, 51.07697], [23.92217, 51.00836], [24.04576, 50.90196], [24.14524, 50.86128], [24.0952, 50.83262], [23.99254, 50.83847], [23.95925, 50.79271], [24.0595, 50.71625], [24.0996, 50.60752], [24.07048, 50.5071], [24.03668, 50.44507], [23.99563, 50.41289], [23.79445, 50.40481], [23.71382, 50.38248], [23.67635, 50.33385], [23.28221, 50.0957], [22.99329, 49.84249], [22.83179, 49.69875], [22.80261, 49.69098], [22.78304, 49.65543], [22.64534, 49.53094], [22.69444, 49.49378], [22.748, 49.32759], [22.72009, 49.20288], [22.86336, 49.10513], [22.89122, 49.00725], [22.56155, 49.08865], [22.54338, 49.01424], [22.48296, 48.99172], [22.42934, 48.92857], [22.34151, 48.68893], [22.21379, 48.6218], [22.16023, 48.56548], [22.14689, 48.4005], [22.2083, 48.42534], [22.38133, 48.23726], [22.49806, 48.25189], [22.59007, 48.15121], [22.58733, 48.10813], [22.66835, 48.09162], [22.73427, 48.12005], [22.81804, 48.11363], [22.87847, 48.04665], [22.84276, 47.98602], [22.89849, 47.95851], [22.94301, 47.96672], [22.92241, 48.02002], [23.0158, 47.99338], [23.08858, 48.00716], [23.1133, 48.08061], [23.15999, 48.12188], [23.27397, 48.08245], [23.33577, 48.0237], [23.4979, 47.96858], [23.52803, 48.01818], [23.5653, 48.00499], [23.63894, 48.00293], [23.66262, 47.98786], [23.75188, 47.99705], [23.80904, 47.98142], [23.8602, 47.9329], [23.89352, 47.94512], [23.94192, 47.94868], [23.96337, 47.96672], [23.98553, 47.96076], [24.00801, 47.968], [24.02999, 47.95087], [24.06466, 47.95317], [24.11281, 47.91487], [24.22566, 47.90231], [24.34926, 47.9244], [24.43578, 47.97131], [24.61994, 47.95062], [24.70632, 47.84428], [24.81893, 47.82031], [24.88896, 47.7234], [25.11144, 47.75203], [25.23778, 47.89403], [25.63878, 47.94924], [25.77723, 47.93919], [26.05901, 47.9897], [26.17711, 47.99246], [26.33504, 48.18418], [26.55202, 48.22445], [26.62823, 48.25804], [26.6839, 48.35828], [26.79239, 48.29071], [26.82809, 48.31629], [26.71274, 48.40388], [26.85556, 48.41095], [26.93384, 48.36558], [27.03821, 48.37653], [27.0231, 48.42485], [27.08078, 48.43214], [27.13434, 48.37288], [27.27855, 48.37534], [27.32159, 48.4434], [27.37604, 48.44398], [27.37741, 48.41026], [27.44333, 48.41209], [27.46942, 48.454], [27.5889, 48.49224], [27.59027, 48.46311], [27.6658, 48.44034], [27.74422, 48.45926], [27.79225, 48.44244], [27.81902, 48.41874], [27.87533, 48.4037], [27.88391, 48.36699], [27.95883, 48.32368], [28.04527, 48.32661], [28.09873, 48.3124], [28.07504, 48.23494], [28.17666, 48.25963], [28.19314, 48.20749], [28.2856, 48.23202], [28.32508, 48.23384], [28.35519, 48.24957], [28.36996, 48.20543], [28.34912, 48.1787], [28.30586, 48.1597], [28.30609, 48.14018], [28.34009, 48.13147], [28.38712, 48.17567], [28.43701, 48.15832], [28.42454, 48.12047], [28.48428, 48.0737], [28.53921, 48.17453], [28.69896, 48.13106], [28.85232, 48.12506], [28.8414, 48.03392], [28.9306, 47.96255], [29.1723, 47.99013], [29.19839, 47.89261], [29.27804, 47.88893], [29.20663, 47.80367], [29.27255, 47.79953], [29.22242, 47.73607], [29.22414, 47.60012], [29.11743, 47.55001], [29.18603, 47.43387], [29.3261, 47.44664], [29.39889, 47.30179], [29.47854, 47.30366], [29.48678, 47.36043], [29.5733, 47.36508], [29.59665, 47.25521], [29.54996, 47.24962], [29.57696, 47.13581], [29.49732, 47.12878], [29.53044, 47.07851], [29.61038, 47.09932], [29.62137, 47.05069], [29.57056, 46.94766], [29.72986, 46.92234], [29.75458, 46.8604], [29.87405, 46.88199], [29.98814, 46.82358], [29.94522, 46.80055], [29.9743, 46.75325], [29.94409, 46.56002], [29.88916, 46.54302], [30.02511, 46.45132], [30.16794, 46.40967], [30.09103, 46.38694], [29.94114, 46.40114], [29.88329, 46.35851], [29.74496, 46.45605], [29.66359, 46.4215], [29.6763, 46.36041], [29.5939, 46.35472], [29.49914, 46.45889], [29.35357, 46.49505], [29.24886, 46.37912], [29.23547, 46.55435], [29.02409, 46.49582], [29.01241, 46.46177], [28.9306, 46.45699], [29.004, 46.31495], [28.98478, 46.31803], [28.94953, 46.25852], [29.06656, 46.19716], [28.94643, 46.09176], [29.00613, 46.04962], [28.98004, 46.00385], [28.74383, 45.96664], [28.78503, 45.83475], [28.69852, 45.81753], [28.70401, 45.78019], [28.52823, 45.73803], [28.47879, 45.66994], [28.51587, 45.6613], [28.54196, 45.58062], [28.49252, 45.56716], [28.51449, 45.49982], [28.43072, 45.48538], [28.41836, 45.51715], [28.30201, 45.54744], [28.21139, 45.46895], [28.28504, 45.43907], [28.34554, 45.32102], [28.5735, 45.24759], [28.71358, 45.22631], [28.78911, 45.24179], [28.81383, 45.3384], [28.94292, 45.28045], [28.96077, 45.33164], [29.24779, 45.43388], [29.42632, 45.44545], [29.59798, 45.38857], [29.68175, 45.26885], [29.65428, 45.25629], [29.69272, 45.19227], [30.04414, 45.08461], [31.62627, 45.50633], [33.54017, 46.0123], [33.59087, 46.06013], [33.57318, 46.10317]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "UG",
      iso1A3: "UGA",
      iso1N3: "800",
      wikidata: "Q1036",
      nameEn: "Uganda",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["256"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[33.93107, -0.99298], [33.9264, -0.54188], [33.98449, -0.13079], [33.90936, 0.10581], [34.10067, 0.36372], [34.08727, 0.44713], [34.11408, 0.48884], [34.13493, 0.58118], [34.20196, 0.62289], [34.27345, 0.63182], [34.31516, 0.75693], [34.40041, 0.80266], [34.43349, 0.85254], [34.52369, 1.10692], [34.57427, 1.09868], [34.58029, 1.14712], [34.67562, 1.21265], [34.80223, 1.22754], [34.82606, 1.26626], [34.82606, 1.30944], [34.7918, 1.36752], [34.87819, 1.5596], [34.92734, 1.56109], [34.9899, 1.6668], [34.98692, 1.97348], [34.90947, 2.42447], [34.95267, 2.47209], [34.77244, 2.70272], [34.78137, 2.76223], [34.73967, 2.85447], [34.65774, 2.8753], [34.60114, 2.93034], [34.56242, 3.11478], [34.45815, 3.18319], [34.40006, 3.37949], [34.41794, 3.44342], [34.39112, 3.48802], [34.44922, 3.51627], [34.45815, 3.67385], [34.15429, 3.80464], [34.06046, 4.15235], [33.9873, 4.23316], [33.51264, 3.75068], [33.18356, 3.77812], [33.02852, 3.89296], [32.89746, 3.81339], [32.72021, 3.77327], [32.41337, 3.748], [32.20782, 3.6053], [32.19888, 3.50867], [32.08866, 3.53543], [32.08491, 3.56287], [32.05187, 3.589], [31.95907, 3.57408], [31.96205, 3.6499], [31.86821, 3.78664], [31.81459, 3.82083], [31.72075, 3.74354], [31.50776, 3.63652], [31.50478, 3.67814], [31.29476, 3.8015], [31.16666, 3.79853], [30.97601, 3.693], [30.85153, 3.48867], [30.94081, 3.50847], [30.93486, 3.40737], [30.84251, 3.26908], [30.77101, 3.04897], [30.8574, 2.9508], [30.8857, 2.83923], [30.75612, 2.5863], [30.74271, 2.43601], [30.83059, 2.42559], [30.91102, 2.33332], [30.96911, 2.41071], [31.06593, 2.35862], [31.07934, 2.30207], [31.12104, 2.27676], [31.1985, 2.29462], [31.20148, 2.2217], [31.28042, 2.17853], [31.30127, 2.11006], [30.48503, 1.21675], [30.24671, 1.14974], [30.22139, 0.99635], [30.1484, 0.89805], [29.98307, 0.84295], [29.95477, 0.64486], [29.97413, 0.52124], [29.87284, 0.39166], [29.81922, 0.16824], [29.77454, 0.16675], [29.7224, 0.07291], [29.72687, -0.08051], [29.65091, -0.46777], [29.67474, -0.47969], [29.67176, -0.55714], [29.62708, -0.71055], [29.63006, -0.8997], [29.58388, -0.89821], [29.59061, -1.39016], [29.82657, -1.31187], [29.912, -1.48269], [30.16369, -1.34303], [30.35212, -1.06896], [30.47194, -1.0555], [30.64166, -1.06601], [30.70631, -1.01175], [30.76635, -0.9852], [30.80408, -0.99911], [33.93107, -0.99298]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "UM",
      iso1A3: "UMI",
      iso1N3: "581",
      wikidata: "Q16645",
      nameEn: "United States Minor Outlying Islands",
      country: "US"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "UN",
      wikidata: "Q1065",
      nameEn: "United Nations",
      level: "unitedNations",
      isoStatus: "excRes"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "US",
      iso1A3: "USA",
      iso1N3: "840",
      wikidata: "Q30",
      nameEn: "United States of America"
    },
    geometry: null
  }, {
    type: "Feature",
    properties: {
      iso1A2: "UY",
      iso1A3: "URY",
      iso1N3: "858",
      wikidata: "Q77",
      nameEn: "Uruguay",
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["598"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-57.65132, -30.19229], [-57.61478, -30.25165], [-57.64859, -30.35095], [-57.89115, -30.49572], [-57.8024, -30.77193], [-57.89476, -30.95994], [-57.86729, -31.06352], [-57.9908, -31.34924], [-57.98127, -31.3872], [-58.07569, -31.44916], [-58.0023, -31.53084], [-58.00076, -31.65016], [-58.20252, -31.86966], [-58.10036, -32.25338], [-58.22362, -32.52416], [-58.1224, -32.98842], [-58.40475, -33.11777], [-58.44442, -33.84033], [-58.34425, -34.15035], [-57.83001, -34.69099], [-54.78916, -36.21945], [-52.83257, -34.01481], [-53.37138, -33.74313], [-53.39593, -33.75169], [-53.44031, -33.69344], [-53.52794, -33.68908], [-53.53459, -33.16843], [-53.1111, -32.71147], [-53.37671, -32.57005], [-53.39572, -32.58596], [-53.76024, -32.0751], [-54.17384, -31.86168], [-55.50821, -30.91349], [-55.50841, -30.9027], [-55.51862, -30.89828], [-55.52712, -30.89997], [-55.53276, -30.90218], [-55.53431, -30.89714], [-55.54572, -30.89051], [-55.55218, -30.88193], [-55.55373, -30.8732], [-55.5634, -30.8686], [-55.58866, -30.84117], [-55.87388, -31.05053], [-56.4619, -30.38457], [-56.4795, -30.3899], [-56.49267, -30.39471], [-56.90236, -30.02578], [-57.22502, -30.26121], [-57.65132, -30.19229]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "UZ",
      iso1A3: "UZB",
      iso1N3: "860",
      wikidata: "Q265",
      nameEn: "Uzbekistan",
      groups: ["143", "142", "UN"],
      callingCodes: ["998"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[65.85194, 42.85481], [65.53277, 43.31856], [65.18666, 43.48835], [64.96464, 43.74748], [64.53885, 43.56941], [63.34656, 43.64003], [62.01711, 43.51008], [61.01475, 44.41383], [58.59711, 45.58671], [55.97842, 44.99622], [55.97832, 44.99622], [55.97822, 44.99617], [55.97811, 44.99617], [55.97801, 44.99612], [55.97801, 44.99607], [55.97791, 44.99607], [55.9778, 44.99607], [55.9777, 44.99601], [55.9777, 44.99596], [55.9776, 44.99591], [55.97749, 44.99591], [55.97739, 44.99591], [55.97739, 44.99586], [55.97729, 44.99586], [55.97718, 44.99581], [55.97708, 44.99576], [55.97698, 44.9957], [55.97698, 44.99565], [55.97687, 44.9956], [55.97677, 44.9956], [55.97677, 44.99555], [55.97677, 44.9955], [55.97667, 44.99545], [55.97656, 44.99539], [55.97646, 44.99534], [55.97646, 44.99529], [55.97636, 44.99524], [55.97636, 44.99519], [55.97625, 44.99514], [55.97615, 44.99508], [55.97615, 44.99503], [55.97615, 44.99498], [55.97615, 44.99493], [55.97615, 44.99483], [55.97615, 44.99477], [55.97605, 44.99477], [55.97605, 44.99467], [55.97605, 44.99462], [55.97605, 44.99457], [55.97605, 44.99452], [55.97594, 44.99446], [55.97584, 44.99441], [55.97584, 44.99436], [55.97584, 44.99431], [55.97584, 44.99426], [55.97584, 44.99421], [55.97584, 44.99415], [55.97584, 44.99405], [55.97584, 44.994], [55.97584, 44.9939], [55.97584, 44.99384], [55.97584, 44.99374], [55.97584, 44.99369], [55.97584, 44.99359], [55.97584, 44.99353], [55.97584, 44.99348], [55.97584, 44.99343], [55.97584, 44.99338], [55.97584, 44.99328], [55.97584, 44.99322], [56.00314, 41.32584], [57.03423, 41.25435], [57.13796, 41.36625], [57.03359, 41.41777], [56.96218, 41.80383], [57.03633, 41.92043], [57.30275, 42.14076], [57.6296, 42.16519], [57.84932, 42.18555], [57.92897, 42.24047], [57.90975, 42.4374], [57.99214, 42.50021], [58.3492, 42.43335], [58.40688, 42.29535], [58.51674, 42.30348], [58.29427, 42.56497], [58.14321, 42.62159], [58.27504, 42.69632], [58.57991, 42.64988], [58.6266, 42.79314], [58.93422, 42.5407], [59.17317, 42.52248], [59.2955, 42.37064], [59.4341, 42.29738], [59.94633, 42.27655], [60.00539, 42.212], [59.96419, 42.1428], [60.04659, 42.08982], [60.0356, 42.01028], [59.95046, 41.97966], [60.33223, 41.75058], [60.08504, 41.80997], [60.06032, 41.76287], [60.18117, 41.60082], [60.06581, 41.4363], [60.5078, 41.21694], [61.03261, 41.25691], [61.22212, 41.14946], [61.33199, 41.14946], [61.39732, 41.19873], [61.4446, 41.29407], [61.87856, 41.12257], [62.11751, 40.58242], [62.34273, 40.43206], [62.43337, 39.98528], [63.6913, 39.27666], [63.70778, 39.22349], [64.19086, 38.95561], [64.32576, 38.98691], [65.55873, 38.29052], [65.83913, 38.25733], [66.24013, 38.16238], [66.41042, 38.02403], [66.56697, 38.0435], [66.67684, 37.96776], [66.53676, 37.80084], [66.52852, 37.58568], [66.65761, 37.45497], [66.52303, 37.39827], [66.55743, 37.35409], [66.64699, 37.32958], [66.95598, 37.40162], [67.08232, 37.35469], [67.13039, 37.27168], [67.2224, 37.24545], [67.2581, 37.17216], [67.51868, 37.26102], [67.78329, 37.1834], [67.8474, 37.31594], [67.81566, 37.43107], [68.12635, 37.93], [68.27159, 37.91477], [68.40343, 38.19484], [68.13289, 38.40822], [68.06274, 38.39435], [68.11366, 38.47169], [68.05873, 38.56087], [68.0807, 38.64136], [68.05598, 38.71641], [68.12877, 38.73677], [68.06948, 38.82115], [68.19743, 38.85985], [68.09704, 39.02589], [67.68915, 39.00775], [67.67833, 39.14479], [67.33226, 39.23739], [67.36522, 39.31287], [67.45998, 39.315], [67.46822, 39.46146], [67.39681, 39.52505], [67.46547, 39.53564], [67.44899, 39.57799], [67.62889, 39.60234], [67.70992, 39.66156], [68.12053, 39.56317], [68.54166, 39.53929], [68.61972, 39.68905], [68.63071, 39.85265], [68.88889, 39.87163], [68.93695, 39.91167], [68.84906, 40.04952], [68.96579, 40.06949], [69.01935, 40.11466], [69.01523, 40.15771], [68.62796, 40.07789], [68.52771, 40.11676], [68.5332, 40.14826], [68.77902, 40.20492], [68.79276, 40.17555], [68.84357, 40.18604], [68.85832, 40.20885], [69.04544, 40.22904], [69.15659, 40.2162], [69.2074, 40.21488], [69.30448, 40.18774], [69.30104, 40.24502], [69.25229, 40.26362], [69.24817, 40.30357], [69.30808, 40.2821], [69.32833, 40.29794], [69.33794, 40.34819], [69.30774, 40.36102], [69.28525, 40.41894], [69.27066, 40.49274], [69.21063, 40.54469], [69.2643, 40.57506], [69.3455, 40.57988], [69.32834, 40.70233], [69.38327, 40.7918], [69.53021, 40.77621], [69.59441, 40.70181], [69.69434, 40.62615], [70.36655, 40.90296], [70.38028, 41.02014], [70.45251, 41.04438], [70.80009, 40.72825], [70.49871, 40.52503], [70.32626, 40.45174], [70.37511, 40.38605], [70.57149, 40.3442], [70.56394, 40.26421], [70.62342, 40.17396], [70.8607, 40.217], [70.9818, 40.22392], [70.95789, 40.28761], [71.05901, 40.28765], [71.13042, 40.34106], [71.36663, 40.31593], [71.4246, 40.28619], [71.51215, 40.26943], [71.51549, 40.22986], [71.61725, 40.20615], [71.61931, 40.26775], [71.68386, 40.26984], [71.70569, 40.20391], [71.69621, 40.18492], [71.71719, 40.17886], [71.73054, 40.14818], [71.82646, 40.21872], [71.85002, 40.25647], [72.05464, 40.27586], [71.96401, 40.31907], [72.18648, 40.49893], [72.24368, 40.46091], [72.40346, 40.4007], [72.44191, 40.48222], [72.41513, 40.50856], [72.38384, 40.51535], [72.41714, 40.55736], [72.34406, 40.60144], [72.40517, 40.61917], [72.47795, 40.5532], [72.66713, 40.5219], [72.66713, 40.59076], [72.69579, 40.59778], [72.73995, 40.58409], [72.74768, 40.58051], [72.74862, 40.57131], [72.75982, 40.57273], [72.74894, 40.59592], [72.74866, 40.60873], [72.80137, 40.67856], [72.84754, 40.67229], [72.85372, 40.7116], [72.8722, 40.71111], [72.93296, 40.73089], [72.99133, 40.76457], [73.0612, 40.76678], [73.13412, 40.79122], [73.13267, 40.83512], [73.01869, 40.84681], [72.94454, 40.8094], [72.84291, 40.85512], [72.68157, 40.84942], [72.59136, 40.86947], [72.55109, 40.96046], [72.48742, 40.97136], [72.45206, 41.03018], [72.38511, 41.02785], [72.36138, 41.04384], [72.34757, 41.06104], [72.34026, 41.04539], [72.324, 41.03381], [72.18339, 40.99571], [72.17594, 41.02377], [72.21061, 41.05607], [72.1792, 41.10621], [72.14864, 41.13363], [72.17594, 41.15522], [72.16433, 41.16483], [72.10745, 41.15483], [72.07249, 41.11739], [71.85964, 41.19081], [71.91457, 41.2982], [71.83914, 41.3546], [71.76625, 41.4466], [71.71132, 41.43012], [71.73054, 41.54713], [71.65914, 41.49599], [71.6787, 41.42111], [71.57227, 41.29175], [71.46688, 41.31883], [71.43814, 41.19644], [71.46148, 41.13958], [71.40198, 41.09436], [71.34877, 41.16807], [71.27187, 41.11015], [71.25813, 41.18796], [71.11806, 41.15359], [71.02193, 41.19494], [70.9615, 41.16393], [70.86263, 41.23833], [70.77885, 41.24813], [70.78572, 41.36419], [70.67586, 41.47953], [70.48909, 41.40335], [70.17682, 41.5455], [70.69777, 41.92554], [71.28719, 42.18033], [71.13263, 42.28356], [70.94483, 42.26238], [69.49545, 41.545], [69.45751, 41.56863], [69.39485, 41.51518], [69.45081, 41.46246], [69.37468, 41.46555], [69.35554, 41.47211], [69.29778, 41.43673], [69.25059, 41.46693], [69.23332, 41.45847], [69.22671, 41.46298], [69.20439, 41.45391], [69.18528, 41.45175], [69.17701, 41.43769], [69.15137, 41.43078], [69.05006, 41.36183], [69.01308, 41.22804], [68.7217, 41.05025], [68.73945, 40.96989], [68.65662, 40.93861], [68.62221, 41.03019], [68.49983, 40.99669], [68.58444, 40.91447], [68.63, 40.59358], [68.49983, 40.56437], [67.96736, 40.83798], [68.1271, 41.0324], [68.08273, 41.08148], [67.98511, 41.02794], [67.9644, 41.14611], [66.69129, 41.1311], [66.53302, 41.87388], [66.00546, 41.94455], [66.09482, 42.93426], [65.85194, 42.85481]], [[70.68112, 40.90612], [70.6721, 40.90555], [70.57501, 40.98941], [70.54223, 40.98787], [70.56077, 41.00642], [70.6158, 40.97661], [70.68112, 40.90612]]], [[[71.21139, 40.03369], [71.12218, 40.03052], [71.06305, 40.1771], [71.00236, 40.18154], [71.01035, 40.05481], [71.11037, 40.01984], [71.11668, 39.99291], [71.09063, 39.99], [71.10501, 39.95568], [71.04979, 39.89808], [71.10531, 39.91354], [71.16101, 39.88423], [71.23067, 39.93581], [71.1427, 39.95026], [71.21139, 40.03369]]], [[[71.86463, 39.98598], [71.78838, 40.01404], [71.71511, 39.96348], [71.7504, 39.93701], [71.84316, 39.95582], [71.86463, 39.98598]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VA",
      iso1A3: "VAT",
      iso1N3: "336",
      wikidata: "Q237",
      nameEn: "Vatican City",
      aliases: ["Holy See"],
      groups: ["039", "150"],
      callingCodes: ["379", "39 06"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[12.45181, 41.90056], [12.45446, 41.90028], [12.45435, 41.90143], [12.45626, 41.90172], [12.45691, 41.90125], [12.4577, 41.90115], [12.45834, 41.90174], [12.45826, 41.90281], [12.45755, 41.9033], [12.45762, 41.9058], [12.45561, 41.90629], [12.45543, 41.90738], [12.45091, 41.90625], [12.44984, 41.90545], [12.44815, 41.90326], [12.44582, 41.90194], [12.44834, 41.90095], [12.45181, 41.90056]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VC",
      iso1A3: "VCT",
      iso1N3: "670",
      wikidata: "Q757",
      nameEn: "St. Vincent and the Grenadines",
      aliases: ["WV"],
      groups: ["029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      callingCodes: ["1 784"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-62.64026, 12.69984], [-59.94058, 12.34011], [-61.69315, 14.26451], [-62.64026, 12.69984]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VE",
      iso1A3: "VEN",
      iso1N3: "862",
      wikidata: "Q717",
      nameEn: "Venezuela",
      aliases: ["YV"],
      groups: ["005", "419", "019", "UN"],
      callingCodes: ["58"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-71.22331, 13.01387], [-70.92579, 11.96275], [-71.3275, 11.85], [-71.9675, 11.65536], [-72.24983, 11.14138], [-72.4767, 11.1117], [-72.88002, 10.44309], [-72.98085, 9.85253], [-73.36905, 9.16636], [-73.02119, 9.27584], [-72.94052, 9.10663], [-72.77415, 9.10165], [-72.65474, 8.61428], [-72.4042, 8.36513], [-72.36987, 8.19976], [-72.35163, 8.01163], [-72.39137, 8.03534], [-72.47213, 7.96106], [-72.48801, 7.94329], [-72.48183, 7.92909], [-72.47042, 7.92306], [-72.45806, 7.91141], [-72.46183, 7.90682], [-72.44454, 7.86031], [-72.46763, 7.79518], [-72.47827, 7.65604], [-72.45321, 7.57232], [-72.47415, 7.48928], [-72.43132, 7.40034], [-72.19437, 7.37034], [-72.04895, 7.03837], [-71.82441, 7.04314], [-71.44118, 7.02116], [-71.42212, 7.03854], [-71.37234, 7.01588], [-71.03941, 6.98163], [-70.7596, 7.09799], [-70.10716, 6.96516], [-69.41843, 6.1072], [-67.60654, 6.2891], [-67.4625, 6.20625], [-67.43513, 5.98835], [-67.58558, 5.84537], [-67.63914, 5.64963], [-67.59141, 5.5369], [-67.83341, 5.31104], [-67.85358, 4.53249], [-67.62671, 3.74303], [-67.50067, 3.75812], [-67.30945, 3.38393], [-67.85862, 2.86727], [-67.85862, 2.79173], [-67.65696, 2.81691], [-67.21967, 2.35778], [-66.85795, 1.22998], [-66.28507, 0.74585], [-65.6727, 1.01353], [-65.50158, 0.92086], [-65.57288, 0.62856], [-65.11657, 1.12046], [-64.38932, 1.5125], [-64.34654, 1.35569], [-64.08274, 1.64792], [-64.06135, 1.94722], [-63.39827, 2.16098], [-63.39114, 2.4317], [-64.0257, 2.48156], [-64.02908, 2.79797], [-64.48379, 3.7879], [-64.84028, 4.24665], [-64.72977, 4.28931], [-64.57648, 4.12576], [-64.14512, 4.12932], [-63.99183, 3.90172], [-63.86082, 3.94796], [-63.70218, 3.91417], [-63.67099, 4.01731], [-63.50611, 3.83592], [-63.42233, 3.89995], [-63.4464, 3.9693], [-63.21111, 3.96219], [-62.98296, 3.59935], [-62.7655, 3.73099], [-62.74411, 4.03331], [-62.57656, 4.04754], [-62.44822, 4.18621], [-62.13094, 4.08309], [-61.54629, 4.2822], [-61.48569, 4.43149], [-61.29675, 4.44216], [-61.31457, 4.54167], [-61.15703, 4.49839], [-60.98303, 4.54167], [-60.86539, 4.70512], [-60.5802, 4.94312], [-60.73204, 5.20931], [-61.4041, 5.95304], [-61.15058, 6.19558], [-61.20762, 6.58174], [-61.13632, 6.70922], [-60.54873, 6.8631], [-60.39419, 6.94847], [-60.28074, 7.1162], [-60.44116, 7.20817], [-60.54098, 7.14804], [-60.63367, 7.25061], [-60.59802, 7.33194], [-60.71923, 7.55817], [-60.64793, 7.56877], [-60.51959, 7.83373], [-60.38056, 7.8302], [-60.02407, 8.04557], [-59.97059, 8.20791], [-59.83156, 8.23261], [-59.80661, 8.28906], [-59.85562, 8.35213], [-59.98508, 8.53046], [-59.54058, 8.6862], [-60.89962, 9.81445], [-62.08693, 10.04435], [-61.62505, 11.18974], [-63.73917, 11.92623], [-63.19938, 16.44103], [-67.89186, 12.4116], [-68.01417, 11.77722], [-68.33524, 11.78151], [-68.99639, 11.79035], [-71.22331, 13.01387]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VG",
      iso1A3: "VGB",
      iso1N3: "092",
      wikidata: "Q25305",
      nameEn: "British Virgin Islands",
      country: "GB",
      groups: ["BOTS", "029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 284"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-64.47127, 17.55688], [-63.88746, 19.15706], [-65.02435, 18.73231], [-64.86027, 18.39056], [-64.64673, 18.36549], [-64.47127, 17.55688]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VI",
      iso1A3: "VIR",
      iso1N3: "850",
      wikidata: "Q11703",
      nameEn: "United States Virgin Islands",
      aliases: ["US-VI"],
      country: "US",
      groups: ["Q1352230", "029", "003", "419", "019", "UN"],
      driveSide: "left",
      roadSpeedUnit: "mph",
      roadHeightUnit: "ft",
      callingCodes: ["1 340"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-65.02435, 18.73231], [-65.27974, 17.56928], [-64.47127, 17.55688], [-64.64673, 18.36549], [-64.86027, 18.39056], [-65.02435, 18.73231]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VN",
      iso1A3: "VNM",
      iso1N3: "704",
      wikidata: "Q881",
      nameEn: "Vietnam",
      groups: ["035", "142", "UN"],
      callingCodes: ["84"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[108.10003, 21.47338], [108.0569, 21.53604], [108.02926, 21.54997], [107.97932, 21.54503], [107.97383, 21.53961], [107.97074, 21.54072], [107.96774, 21.53601], [107.95232, 21.5388], [107.92652, 21.58906], [107.90006, 21.5905], [107.86114, 21.65128], [107.80355, 21.66141], [107.66967, 21.60787], [107.56537, 21.61945], [107.54047, 21.5934], [107.49065, 21.59774], [107.49532, 21.62958], [107.47197, 21.6672], [107.41593, 21.64839], [107.38636, 21.59774], [107.35989, 21.60063], [107.35834, 21.6672], [107.29296, 21.74674], [107.24625, 21.7077], [107.20734, 21.71493], [107.10771, 21.79879], [107.02615, 21.81981], [107.00964, 21.85948], [107.06101, 21.88982], [107.05634, 21.92303], [106.99252, 21.95191], [106.97228, 21.92592], [106.92714, 21.93459], [106.9178, 21.97357], [106.81038, 21.97934], [106.74345, 22.00965], [106.72551, 21.97923], [106.69276, 21.96013], [106.68274, 21.99811], [106.70142, 22.02409], [106.6983, 22.15102], [106.67495, 22.1885], [106.69986, 22.22309], [106.6516, 22.33977], [106.55976, 22.34841], [106.57221, 22.37], [106.55665, 22.46498], [106.58395, 22.474], [106.61269, 22.60301], [106.65316, 22.5757], [106.71698, 22.58432], [106.72321, 22.63606], [106.76293, 22.73491], [106.82404, 22.7881], [106.83685, 22.8098], [106.81271, 22.8226], [106.78422, 22.81532], [106.71128, 22.85982], [106.71387, 22.88296], [106.6734, 22.89587], [106.6516, 22.86862], [106.60179, 22.92884], [106.55976, 22.92311], [106.51306, 22.94891], [106.49749, 22.91164], [106.34961, 22.86718], [106.27022, 22.87722], [106.19705, 22.98475], [106.00179, 22.99049], [105.99568, 22.94178], [105.90119, 22.94168], [105.8726, 22.92756], [105.72382, 23.06641], [105.57594, 23.075], [105.56037, 23.16806], [105.49966, 23.20669], [105.42805, 23.30824], [105.40782, 23.28107], [105.32376, 23.39684], [105.22569, 23.27249], [105.17276, 23.28679], [105.11672, 23.25247], [105.07002, 23.26248], [104.98712, 23.19176], [104.96532, 23.20463], [104.9486, 23.17235], [104.91435, 23.18666], [104.87992, 23.17141], [104.87382, 23.12854], [104.79478, 23.12934], [104.8334, 23.01484], [104.86765, 22.95178], [104.84942, 22.93631], [104.77114, 22.90017], [104.72755, 22.81984], [104.65283, 22.83419], [104.60457, 22.81841], [104.58122, 22.85571], [104.47225, 22.75813], [104.35593, 22.69353], [104.25683, 22.76534], [104.27084, 22.8457], [104.11384, 22.80363], [104.03734, 22.72945], [104.01088, 22.51823], [103.99247, 22.51958], [103.97384, 22.50634], [103.96783, 22.51173], [103.96352, 22.50584], [103.95191, 22.5134], [103.94513, 22.52553], [103.93286, 22.52703], [103.87904, 22.56683], [103.64506, 22.79979], [103.56255, 22.69499], [103.57812, 22.65764], [103.52675, 22.59155], [103.43646, 22.70648], [103.43179, 22.75816], [103.32282, 22.8127], [103.28079, 22.68063], [103.18895, 22.64471], [103.15782, 22.59873], [103.17961, 22.55705], [103.07843, 22.50097], [103.0722, 22.44775], [102.9321, 22.48659], [102.8636, 22.60735], [102.60675, 22.73376], [102.57095, 22.7036], [102.51802, 22.77969], [102.46665, 22.77108], [102.42618, 22.69212], [102.38415, 22.67919], [102.41061, 22.64184], [102.25339, 22.4607], [102.26428, 22.41321], [102.16621, 22.43336], [102.14099, 22.40092], [102.18712, 22.30403], [102.51734, 22.02676], [102.49092, 21.99002], [102.62301, 21.91447], [102.67145, 21.65894], [102.74189, 21.66713], [102.82115, 21.73667], [102.81894, 21.83888], [102.85637, 21.84501], [102.86077, 21.71213], [102.97965, 21.74076], [102.98846, 21.58936], [102.86297, 21.4255], [102.94223, 21.46034], [102.88939, 21.3107], [102.80794, 21.25736], [102.89825, 21.24707], [102.97745, 21.05821], [103.03469, 21.05821], [103.12055, 20.89994], [103.21497, 20.89832], [103.38032, 20.79501], [103.45737, 20.82382], [103.68633, 20.66324], [103.73478, 20.6669], [103.82282, 20.8732], [103.98024, 20.91531], [104.11121, 20.96779], [104.27412, 20.91433], [104.63957, 20.6653], [104.38199, 20.47155], [104.40621, 20.3849], [104.47886, 20.37459], [104.66158, 20.47774], [104.72102, 20.40554], [104.62195, 20.36633], [104.61315, 20.24452], [104.86852, 20.14121], [104.91695, 20.15567], [104.9874, 20.09573], [104.8465, 19.91783], [104.8355, 19.80395], [104.68359, 19.72729], [104.64837, 19.62365], [104.53169, 19.61743], [104.41281, 19.70035], [104.23229, 19.70242], [104.06498, 19.66926], [104.05617, 19.61743], [104.10832, 19.51575], [104.06058, 19.43484], [103.87125, 19.31854], [104.5361, 18.97747], [104.64617, 18.85668], [105.12829, 18.70453], [105.19654, 18.64196], [105.1327, 18.58355], [105.10408, 18.43533], [105.15942, 18.38691], [105.38366, 18.15315], [105.46292, 18.22008], [105.64784, 17.96687], [105.60381, 17.89356], [105.76612, 17.67147], [105.85744, 17.63221], [106.09019, 17.36399], [106.18991, 17.28227], [106.24444, 17.24714], [106.29287, 17.3018], [106.31929, 17.20509], [106.43597, 17.01362], [106.50862, 16.9673], [106.55045, 17.0031], [106.54824, 16.92729], [106.51963, 16.92097], [106.52183, 16.87884], [106.55265, 16.86831], [106.55485, 16.68704], [106.59013, 16.62259], [106.58267, 16.6012], [106.61477, 16.60713], [106.66052, 16.56892], [106.65832, 16.47816], [106.74418, 16.41904], [106.84104, 16.55415], [106.88727, 16.52671], [106.88067, 16.43594], [106.96638, 16.34938], [106.97385, 16.30204], [107.02597, 16.31132], [107.09091, 16.3092], [107.15035, 16.26271], [107.14595, 16.17816], [107.25822, 16.13587], [107.33968, 16.05549], [107.44975, 16.08511], [107.46296, 16.01106], [107.39471, 15.88829], [107.34188, 15.89464], [107.21419, 15.83747], [107.21859, 15.74638], [107.27143, 15.71459], [107.27583, 15.62769], [107.34408, 15.62345], [107.3815, 15.49832], [107.50699, 15.48771], [107.53341, 15.40496], [107.62367, 15.42193], [107.60605, 15.37524], [107.62587, 15.2266], [107.58844, 15.20111], [107.61926, 15.13949], [107.61486, 15.0566], [107.46516, 15.00982], [107.48277, 14.93751], [107.59285, 14.87795], [107.51579, 14.79282], [107.54361, 14.69092], [107.55371, 14.628], [107.52102, 14.59034], [107.52569, 14.54665], [107.48521, 14.40346], [107.44941, 14.41552], [107.39493, 14.32655], [107.40427, 14.24509], [107.33577, 14.11832], [107.37158, 14.07906], [107.35757, 14.02319], [107.38247, 13.99147], [107.44318, 13.99751], [107.46498, 13.91593], [107.45252, 13.78897], [107.53503, 13.73908], [107.61909, 13.52577], [107.62843, 13.3668], [107.49144, 13.01215], [107.49611, 12.88926], [107.55993, 12.7982], [107.5755, 12.52177], [107.55059, 12.36824], [107.4463, 12.29373], [107.42917, 12.24657], [107.34511, 12.33327], [107.15831, 12.27547], [106.99953, 12.08983], [106.92325, 12.06548], [106.79405, 12.0807], [106.70687, 11.96956], [106.4111, 11.97413], [106.4687, 11.86751], [106.44068, 11.86294], [106.44535, 11.8279], [106.41577, 11.76999], [106.45158, 11.68616], [106.44691, 11.66787], [106.37219, 11.69836], [106.30525, 11.67549], [106.26478, 11.72122], [106.18539, 11.75171], [106.13158, 11.73283], [106.06708, 11.77761], [106.02038, 11.77457], [106.00792, 11.7197], [105.95188, 11.63738], [105.88962, 11.67854], [105.8507, 11.66635], [105.80867, 11.60536], [105.81645, 11.56876], [105.87328, 11.55953], [105.88962, 11.43605], [105.86782, 11.28343], [106.10444, 11.07879], [106.1527, 11.10476], [106.1757, 11.07301], [106.20095, 10.97795], [106.14301, 10.98176], [106.18539, 10.79451], [106.06708, 10.8098], [105.94535, 10.9168], [105.93403, 10.83853], [105.84603, 10.85873], [105.86376, 10.89839], [105.77751, 11.03671], [105.50045, 10.94586], [105.42884, 10.96878], [105.34011, 10.86179], [105.11449, 10.96332], [105.08326, 10.95656], [105.02722, 10.89236], [105.09571, 10.72722], [104.95094, 10.64003], [104.87933, 10.52833], [104.59018, 10.53073], [104.49869, 10.4057], [104.47963, 10.43046], [104.43778, 10.42386], [103.99198, 10.48391], [102.47649, 9.66162], [104.81582, 8.03101], [109.55486, 8.10026], [111.60491, 13.57105], [108.00365, 17.98159], [108.10003, 21.47338]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "VU",
      iso1A3: "VUT",
      iso1N3: "548",
      wikidata: "Q686",
      nameEn: "Vanuatu",
      groups: ["054", "009", "UN"],
      callingCodes: ["678"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[156.73836, -14.50464], [174.245, -23.1974], [172.71443, -12.01327], [156.73836, -14.50464]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "WF",
      iso1A3: "WLF",
      iso1N3: "876",
      wikidata: "Q35555",
      nameEn: "Wallis and Futuna",
      country: "FR",
      groups: ["Q1451600", "061", "009", "UN"],
      callingCodes: ["681"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-178.66551, -14.32452], [-176.76826, -14.95183], [-175.59809, -12.61507], [-178.66551, -14.32452]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "WS",
      iso1A3: "WSM",
      iso1N3: "882",
      wikidata: "Q683",
      nameEn: "Samoa",
      groups: ["061", "009", "UN"],
      driveSide: "left",
      callingCodes: ["685"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[-173.74402, -14.26669], [-170.99605, -15.1275], [-171.39864, -10.21587], [-173.74402, -14.26669]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "XK",
      iso1A3: "XKX",
      wikidata: "Q1246",
      nameEn: "Kosovo",
      aliases: ["KV"],
      groups: ["039", "150"],
      isoStatus: "usrAssn",
      callingCodes: ["383"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[21.39045, 42.74888], [21.44047, 42.87276], [21.36941, 42.87397], [21.32974, 42.90424], [21.2719, 42.8994], [21.23534, 42.95523], [21.23877, 43.00848], [21.2041, 43.02277], [21.16734, 42.99694], [21.14465, 43.11089], [21.08952, 43.13471], [21.05378, 43.10707], [21.00749, 43.13984], [20.96287, 43.12416], [20.83727, 43.17842], [20.88685, 43.21697], [20.82145, 43.26769], [20.73811, 43.25068], [20.68688, 43.21335], [20.59929, 43.20492], [20.69515, 43.09641], [20.64557, 43.00826], [20.59929, 43.01067], [20.48692, 42.93208], [20.53484, 42.8885], [20.43734, 42.83157], [20.40594, 42.84853], [20.35692, 42.8335], [20.27869, 42.81945], [20.2539, 42.76245], [20.04898, 42.77701], [20.02088, 42.74789], [20.02915, 42.71147], [20.0969, 42.65559], [20.07761, 42.55582], [20.17127, 42.50469], [20.21797, 42.41237], [20.24399, 42.32168], [20.34479, 42.32656], [20.3819, 42.3029], [20.48857, 42.25444], [20.56955, 42.12097], [20.55633, 42.08173], [20.59434, 42.03879], [20.63069, 41.94913], [20.57946, 41.91593], [20.59524, 41.8818], [20.68523, 41.85318], [20.76786, 41.91839], [20.75464, 42.05229], [21.11491, 42.20794], [21.16614, 42.19815], [21.22728, 42.08909], [21.31983, 42.10993], [21.29913, 42.13954], [21.30496, 42.1418], [21.38428, 42.24465], [21.43882, 42.23609], [21.43882, 42.2789], [21.50823, 42.27156], [21.52145, 42.24465], [21.58992, 42.25915], [21.56772, 42.30946], [21.5264, 42.33634], [21.53467, 42.36809], [21.57021, 42.3647], [21.59029, 42.38042], [21.62887, 42.37664], [21.64209, 42.41081], [21.62556, 42.45106], [21.7035, 42.51899], [21.70522, 42.54176], [21.7327, 42.55041], [21.75672, 42.62695], [21.79413, 42.65923], [21.75025, 42.70125], [21.6626, 42.67813], [21.58755, 42.70418], [21.59154, 42.72643], [21.47498, 42.74695], [21.39045, 42.74888]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "YE",
      iso1A3: "YEM",
      iso1N3: "887",
      wikidata: "Q805",
      nameEn: "Yemen",
      groups: ["145", "142", "UN"],
      callingCodes: ["967"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[57.49095, 8.14549], [52.81185, 17.28568], [52.74267, 17.29519], [52.78009, 17.35124], [52.00311, 19.00083], [49.04884, 18.59899], [48.19996, 18.20584], [47.58351, 17.50366], [47.48245, 17.10808], [47.00571, 16.94765], [46.76494, 17.29151], [46.31018, 17.20464], [44.50126, 17.47475], [43.70631, 17.35762], [43.43005, 17.56148], [43.29185, 17.53224], [43.22533, 17.38343], [43.32653, 17.31179], [43.20156, 17.25901], [43.17787, 17.14717], [43.23967, 17.03428], [43.18233, 17.02673], [43.1813, 16.98438], [43.19328, 16.94703], [43.1398, 16.90696], [43.18338, 16.84852], [43.22012, 16.83932], [43.22956, 16.80613], [43.24801, 16.80613], [43.26303, 16.79479], [43.25857, 16.75304], [43.21325, 16.74416], [43.22066, 16.65179], [43.15274, 16.67248], [43.11601, 16.53166], [42.97215, 16.51093], [42.94351, 16.49467], [42.94625, 16.39721], [42.76801, 16.40371], [42.15205, 16.40211], [40.99158, 15.81743], [43.29075, 12.79154], [43.32909, 12.59711], [43.90659, 12.3823], [51.12877, 12.56479], [57.49095, 8.14549]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "YT",
      iso1A3: "MYT",
      iso1N3: "175",
      wikidata: "Q17063",
      nameEn: "Mayotte",
      country: "FR",
      groups: ["Q3320166", "EU", "014", "202", "002", "UN"],
      callingCodes: ["262"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[43.28731, -13.97126], [45.54824, -13.22353], [45.4971, -11.75965], [43.28731, -13.97126]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ZA",
      iso1A3: "ZAF",
      iso1N3: "710",
      wikidata: "Q258",
      nameEn: "South Africa",
      groups: ["018", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["27"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[31.30611, -22.422], [31.16344, -22.32599], [31.08932, -22.34884], [30.86696, -22.28907], [30.6294, -22.32599], [30.48686, -22.31368], [30.38614, -22.34533], [30.28351, -22.35587], [30.2265, -22.2961], [30.13147, -22.30841], [29.92242, -22.19408], [29.76848, -22.14128], [29.64609, -22.12917], [29.37703, -22.19581], [29.21955, -22.17771], [29.18974, -22.18599], [29.15268, -22.21399], [29.10881, -22.21202], [29.0151, -22.22907], [28.91889, -22.44299], [28.63287, -22.55887], [28.34874, -22.5694], [28.04562, -22.8394], [28.04752, -22.90243], [27.93729, -22.96194], [27.93539, -23.04941], [27.74154, -23.2137], [27.6066, -23.21894], [27.52393, -23.37952], [27.33768, -23.40917], [26.99749, -23.65486], [26.84165, -24.24885], [26.51667, -24.47219], [26.46346, -24.60358], [26.39409, -24.63468], [25.8515, -24.75727], [25.84295, -24.78661], [25.88571, -24.87802], [25.72702, -25.25503], [25.69661, -25.29284], [25.6643, -25.4491], [25.58543, -25.6343], [25.33076, -25.76616], [25.12266, -25.75931], [25.01718, -25.72507], [24.8946, -25.80723], [24.67319, -25.81749], [24.44703, -25.73021], [24.36531, -25.773], [24.18287, -25.62916], [23.9244, -25.64286], [23.47588, -25.29971], [23.03497, -25.29971], [22.86012, -25.50572], [22.70808, -25.99186], [22.56365, -26.19668], [22.41921, -26.23078], [22.21206, -26.3773], [22.06192, -26.61882], [21.90703, -26.66808], [21.83291, -26.65959], [21.77114, -26.69015], [21.7854, -26.79199], [21.69322, -26.86152], [21.37869, -26.82083], [21.13353, -26.86661], [20.87031, -26.80047], [20.68596, -26.9039], [20.63275, -26.78181], [20.61754, -26.4692], [20.86081, -26.14892], [20.64795, -25.47827], [20.29826, -24.94869], [20.03678, -24.81004], [20.02809, -24.78725], [19.99817, -24.76768], [19.99882, -28.42622], [18.99885, -28.89165], [17.4579, -28.68718], [17.15405, -28.08573], [16.90446, -28.057], [16.59922, -28.53246], [16.46592, -28.57126], [16.45332, -28.63117], [12.51595, -32.27486], [38.88176, -48.03306], [34.51034, -26.91792], [32.35222, -26.86027], [32.29584, -26.852], [32.22302, -26.84136], [32.19409, -26.84032], [32.13315, -26.84345], [32.09664, -26.80721], [32.00893, -26.8096], [31.97463, -27.11057], [31.97592, -27.31675], [31.49834, -27.31549], [31.15027, -27.20151], [30.96088, -27.0245], [30.97757, -26.92706], [30.88826, -26.79622], [30.81101, -26.84722], [30.78927, -26.48271], [30.95819, -26.26303], [31.13073, -25.91558], [31.31237, -25.7431], [31.4175, -25.71886], [31.86881, -25.99973], [31.974, -25.95387], [31.92649, -25.84216], [32.00631, -25.65044], [31.97875, -25.46356], [32.01676, -25.38117], [32.03196, -25.10785], [31.9835, -24.29983], [31.90368, -24.18892], [31.87707, -23.95293], [31.77445, -23.90082], [31.70223, -23.72695], [31.67942, -23.60858], [31.56539, -23.47268], [31.55779, -23.176], [31.30611, -22.422]], [[29.33204, -29.45598], [29.28545, -29.58456], [29.12553, -29.76266], [29.16548, -29.91706], [28.9338, -30.05072], [28.80222, -30.10579], [28.68627, -30.12885], [28.399, -30.1592], [28.2319, -30.28476], [28.12073, -30.68072], [27.74814, -30.60635], [27.69467, -30.55862], [27.67819, -30.53437], [27.6521, -30.51707], [27.62137, -30.50509], [27.56781, -30.44562], [27.56901, -30.42504], [27.45452, -30.32239], [27.38108, -30.33456], [27.36649, -30.27246], [27.37293, -30.19401], [27.40778, -30.14577], [27.32555, -30.14785], [27.29603, -30.05473], [27.22719, -30.00718], [27.09489, -29.72796], [27.01016, -29.65439], [27.33464, -29.48161], [27.4358, -29.33465], [27.47254, -29.31968], [27.45125, -29.29708], [27.48679, -29.29349], [27.54258, -29.25575], [27.5158, -29.2261], [27.55974, -29.18954], [27.75458, -28.89839], [27.8907, -28.91612], [27.88933, -28.88156], [27.9392, -28.84864], [27.98675, -28.8787], [28.02503, -28.85991], [28.1317, -28.7293], [28.2348, -28.69471], [28.30518, -28.69531], [28.40612, -28.6215], [28.65091, -28.57025], [28.68043, -28.58744], [29.40524, -29.21246], [29.44883, -29.3772], [29.33204, -29.45598]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ZM",
      iso1A3: "ZMB",
      iso1N3: "894",
      wikidata: "Q953",
      nameEn: "Zambia",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["260"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[32.95389, -9.40138], [32.76233, -9.31963], [32.75611, -9.28583], [32.53661, -9.24281], [32.49147, -9.14754], [32.43543, -9.11988], [32.25486, -9.13371], [32.16146, -9.05993], [32.08206, -9.04609], [31.98866, -9.07069], [31.94196, -9.02303], [31.94663, -8.93846], [31.81587, -8.88618], [31.71158, -8.91386], [31.57147, -8.81388], [31.57147, -8.70619], [31.37533, -8.60769], [31.00796, -8.58615], [30.79243, -8.27382], [28.88917, -8.4831], [28.9711, -8.66935], [28.38526, -9.23393], [28.36562, -9.30091], [28.52636, -9.35379], [28.51627, -9.44726], [28.56208, -9.49122], [28.68532, -9.78], [28.62795, -9.92942], [28.65032, -10.65133], [28.37241, -11.57848], [28.48357, -11.87532], [29.18592, -12.37921], [29.4992, -12.43843], [29.48404, -12.23604], [29.8139, -12.14898], [29.81551, -13.44683], [29.65078, -13.41844], [29.60531, -13.21685], [29.01918, -13.41353], [28.33199, -12.41375], [27.59932, -12.22123], [27.21025, -11.76157], [27.22541, -11.60323], [27.04351, -11.61312], [26.88687, -12.01868], [26.01777, -11.91488], [25.33058, -11.65767], [25.34069, -11.19707], [24.42612, -11.44975], [24.34528, -11.06816], [24.00027, -10.89356], [24.02603, -11.15368], [23.98804, -12.13149], [24.06672, -12.29058], [23.90937, -12.844], [24.03339, -12.99091], [21.97988, -13.00148], [22.00323, -16.18028], [22.17217, -16.50269], [23.20038, -17.47563], [23.47474, -17.62877], [24.23619, -17.47489], [24.32811, -17.49082], [24.38712, -17.46818], [24.5621, -17.52963], [24.70864, -17.49501], [25.00198, -17.58221], [25.26433, -17.79571], [25.51646, -17.86232], [25.6827, -17.81987], [25.85738, -17.91403], [25.85892, -17.97726], [26.08925, -17.98168], [26.0908, -17.93021], [26.21601, -17.88608], [26.55918, -17.99638], [26.68403, -18.07411], [26.74314, -18.0199], [26.89926, -17.98756], [27.14196, -17.81398], [27.30736, -17.60487], [27.61377, -17.34378], [27.62795, -17.24365], [27.83141, -16.96274], [28.73725, -16.5528], [28.76199, -16.51575], [28.81454, -16.48611], [28.8501, -16.04537], [28.9243, -15.93987], [29.01298, -15.93805], [29.21955, -15.76589], [29.4437, -15.68702], [29.8317, -15.6126], [30.35574, -15.6513], [30.41902, -15.62269], [30.22098, -14.99447], [33.24249, -14.00019], [33.16749, -13.93992], [33.07568, -13.98447], [33.02977, -14.05022], [32.99042, -13.95689], [32.88985, -13.82956], [32.79015, -13.80755], [32.76962, -13.77224], [32.84528, -13.71576], [32.7828, -13.64805], [32.68654, -13.64268], [32.66468, -13.60019], [32.68436, -13.55769], [32.73683, -13.57682], [32.84176, -13.52794], [32.86113, -13.47292], [33.0078, -13.19492], [32.98289, -13.12671], [33.02181, -12.88707], [32.96733, -12.88251], [32.94397, -12.76868], [33.05917, -12.59554], [33.18837, -12.61377], [33.28177, -12.54692], [33.37517, -12.54085], [33.54485, -12.35996], [33.47636, -12.32498], [33.3705, -12.34931], [33.25998, -12.14242], [33.33937, -11.91252], [33.32692, -11.59248], [33.24252, -11.59302], [33.23663, -11.40637], [33.29267, -11.43536], [33.29267, -11.3789], [33.39697, -11.15296], [33.25998, -10.88862], [33.28022, -10.84428], [33.47636, -10.78465], [33.70675, -10.56896], [33.54797, -10.36077], [33.53863, -10.20148], [33.31297, -10.05133], [33.37902, -9.9104], [33.36581, -9.81063], [33.31517, -9.82364], [33.2095, -9.61099], [33.12144, -9.58929], [33.10163, -9.66525], [33.05485, -9.61316], [33.00256, -9.63053], [33.00476, -9.5133], [32.95389, -9.40138]]]]
    }
  }, {
    type: "Feature",
    properties: {
      iso1A2: "ZW",
      iso1A3: "ZWE",
      iso1N3: "716",
      wikidata: "Q954",
      nameEn: "Zimbabwe",
      groups: ["014", "202", "002", "UN"],
      driveSide: "left",
      callingCodes: ["263"]
    },
    geometry: {
      type: "MultiPolygon",
      coordinates: [[[[30.41902, -15.62269], [30.35574, -15.6513], [29.8317, -15.6126], [29.4437, -15.68702], [29.21955, -15.76589], [29.01298, -15.93805], [28.9243, -15.93987], [28.8501, -16.04537], [28.81454, -16.48611], [28.76199, -16.51575], [28.73725, -16.5528], [27.83141, -16.96274], [27.62795, -17.24365], [27.61377, -17.34378], [27.30736, -17.60487], [27.14196, -17.81398], [26.89926, -17.98756], [26.74314, -18.0199], [26.68403, -18.07411], [26.55918, -17.99638], [26.21601, -17.88608], [26.0908, -17.93021], [26.08925, -17.98168], [25.85892, -17.97726], [25.85738, -17.91403], [25.6827, -17.81987], [25.51646, -17.86232], [25.26433, -17.79571], [25.23909, -17.90832], [25.31799, -18.07091], [25.39972, -18.12691], [25.53465, -18.39041], [25.68859, -18.56165], [25.79217, -18.6355], [25.82353, -18.82808], [25.94326, -18.90362], [25.99837, -19.02943], [25.96226, -19.08152], [26.17227, -19.53709], [26.72246, -19.92707], [27.21278, -20.08244], [27.29831, -20.28935], [27.28865, -20.49873], [27.69361, -20.48531], [27.72972, -20.51735], [27.69171, -21.08409], [27.91407, -21.31621], [28.01669, -21.57624], [28.29416, -21.59037], [28.49942, -21.66634], [28.58114, -21.63455], [29.07763, -21.81877], [29.04023, -21.85864], [29.02191, -21.90647], [29.02191, -21.95665], [29.04108, -22.00563], [29.08495, -22.04867], [29.14501, -22.07275], [29.1974, -22.07472], [29.24648, -22.05967], [29.3533, -22.18363], [29.37703, -22.19581], [29.64609, -22.12917], [29.76848, -22.14128], [29.92242, -22.19408], [30.13147, -22.30841], [30.2265, -22.2961], [30.28351, -22.35587], [30.38614, -22.34533], [30.48686, -22.31368], [30.6294, -22.32599], [30.86696, -22.28907], [31.08932, -22.34884], [31.16344, -22.32599], [31.30611, -22.422], [31.38336, -22.36919], [32.41234, -21.31246], [32.48236, -21.32873], [32.37115, -21.133], [32.51644, -20.91929], [32.48122, -20.63319], [32.55167, -20.56312], [32.66174, -20.56106], [32.85987, -20.27841], [32.85987, -20.16686], [32.93032, -20.03868], [33.01178, -20.02007], [33.06461, -19.77787], [32.95013, -19.67219], [32.84666, -19.68462], [32.84446, -19.48343], [32.78282, -19.47513], [32.77966, -19.36098], [32.85107, -19.29238], [32.87088, -19.09279], [32.84006, -19.0262], [32.72118, -19.02204], [32.69917, -18.94293], [32.73439, -18.92628], [32.70137, -18.84712], [32.82465, -18.77419], [32.9017, -18.7992], [32.95013, -18.69079], [32.88629, -18.58023], [32.88629, -18.51344], [33.02278, -18.4696], [33.03159, -18.35054], [32.94133, -17.99705], [33.0492, -17.60298], [32.98536, -17.55891], [32.96554, -17.48964], [33.0426, -17.3468], [33.00517, -17.30477], [32.96554, -17.11971], [32.84113, -16.92259], [32.91051, -16.89446], [32.97655, -16.70689], [32.78943, -16.70267], [32.69917, -16.66893], [32.71017, -16.59932], [32.42838, -16.4727], [32.28529, -16.43892], [32.02772, -16.43892], [31.91324, -16.41569], [31.90223, -16.34388], [31.67988, -16.19595], [31.42451, -16.15154], [31.30563, -16.01193], [31.13171, -15.98019], [30.97761, -16.05848], [30.91597, -15.99924], [30.42568, -15.9962], [30.41902, -15.62269]]]]
    }
  }];
  var borders_default = {
    type: type,
    features: features
  };
  var borders = borders_default;
  var whichPolygonGetter = {};
  var featuresByCode = {};
  var idFilterRegex = /(?=(?!^(and|the|of|el|la|de)$))(\b(and|the|of|el|la|de)\b)|[-_ .,'()&[\]/]/gi;
  function canonicalID(id2) {
    var s = id2 || "";
    if (s.charAt(0) === ".") {
      return s.toUpperCase();
    } else {
      return s.replace(idFilterRegex, "").toUpperCase();
    }
  }
  var levels = ["subterritory", "territory", "subcountryGroup", "country", "sharedLandform", "intermediateRegion", "subregion", "region", "subunion", "union", "unitedNations", "world"];
  loadDerivedDataAndCaches(borders);
  function loadDerivedDataAndCaches(borders2) {
    var identifierProps = ["iso1A2", "iso1A3", "m49", "wikidata", "emojiFlag", "ccTLD", "nameEn"];
    var geometryFeatures = [];
    for (var i2 in borders2.features) {
      var feature22 = borders2.features[i2];
      feature22.properties.id = feature22.properties.iso1A2 || feature22.properties.m49 || feature22.properties.wikidata;
      loadM49(feature22);
      loadTLD(feature22);
      loadIsoStatus(feature22);
      loadLevel(feature22);
      loadGroups(feature22);
      loadFlag(feature22);
      cacheFeatureByIDs(feature22);
      if (feature22.geometry)
        geometryFeatures.push(feature22);
    }
    for (var _i in borders2.features) {
      var _feature = borders2.features[_i];
      _feature.properties.groups = _feature.properties.groups.map(function(groupID) {
        return featuresByCode[groupID].properties.id;
      });
      loadMembersForGroupsOf(_feature);
    }
    for (var _i2 in borders2.features) {
      var _feature2 = borders2.features[_i2];
      loadRoadSpeedUnit(_feature2);
      loadRoadHeightUnit(_feature2);
      loadDriveSide(_feature2);
      loadCallingCodes(_feature2);
      loadGroupGroups(_feature2);
    }
    for (var _i3 in borders2.features) {
      var _feature3 = borders2.features[_i3];
      _feature3.properties.groups.sort(function(groupID1, groupID2) {
        return levels.indexOf(featuresByCode[groupID1].properties.level) - levels.indexOf(featuresByCode[groupID2].properties.level);
      });
      if (_feature3.properties.members)
        _feature3.properties.members.sort(function(id1, id2) {
          var diff = levels.indexOf(featuresByCode[id1].properties.level) - levels.indexOf(featuresByCode[id2].properties.level);
          if (diff === 0) {
            return borders2.features.indexOf(featuresByCode[id1]) - borders2.features.indexOf(featuresByCode[id2]);
          }
          return diff;
        });
    }
    var geometryOnlyCollection = {
      type: "FeatureCollection",
      features: geometryFeatures
    };
    whichPolygonGetter = (0, import_which_polygon.default)(geometryOnlyCollection);
    function loadGroups(feature23) {
      var props = feature23.properties;
      if (!props.groups) {
        props.groups = [];
      }
      if (feature23.geometry && props.country) {
        props.groups.push(props.country);
      }
      if (props.m49 !== "001") {
        props.groups.push("001");
      }
    }
    function loadM49(feature23) {
      var props = feature23.properties;
      if (!props.m49 && props.iso1N3) {
        props.m49 = props.iso1N3;
      }
    }
    function loadTLD(feature23) {
      var props = feature23.properties;
      if (props.level === "unitedNations")
        return;
      if (!props.ccTLD && props.iso1A2) {
        props.ccTLD = "." + props.iso1A2.toLowerCase();
      }
    }
    function loadIsoStatus(feature23) {
      var props = feature23.properties;
      if (!props.isoStatus && props.iso1A2) {
        props.isoStatus = "official";
      }
    }
    function loadLevel(feature23) {
      var props = feature23.properties;
      if (props.level)
        return;
      if (!props.country) {
        props.level = "country";
      } else if (!props.iso1A2 || props.isoStatus === "official") {
        props.level = "territory";
      } else {
        props.level = "subterritory";
      }
    }
    function loadGroupGroups(feature23) {
      var props = feature23.properties;
      if (feature23.geometry || !props.members)
        return;
      var featureLevelIndex = levels.indexOf(props.level);
      var sharedGroups = [];
      var _loop = function _loop2(_i42) {
        var memberID = props.members[_i42];
        var member = featuresByCode[memberID];
        var memberGroups = member.properties.groups.filter(function(groupID) {
          return groupID !== feature23.properties.id && featureLevelIndex < levels.indexOf(featuresByCode[groupID].properties.level);
        });
        if (_i42 === "0") {
          sharedGroups = memberGroups;
        } else {
          sharedGroups = sharedGroups.filter(function(groupID) {
            return memberGroups.indexOf(groupID) !== -1;
          });
        }
      };
      for (var _i4 in props.members) {
        _loop(_i4);
      }
      props.groups = props.groups.concat(sharedGroups.filter(function(groupID) {
        return props.groups.indexOf(groupID) === -1;
      }));
      for (var j in sharedGroups) {
        var groupFeature = featuresByCode[sharedGroups[j]];
        if (groupFeature.properties.members.indexOf(props.id) === -1) {
          groupFeature.properties.members.push(props.id);
        }
      }
    }
    function loadRoadSpeedUnit(feature23) {
      var props = feature23.properties;
      if (feature23.geometry) {
        if (!props.roadSpeedUnit)
          props.roadSpeedUnit = "km/h";
      } else if (props.members) {
        var vals = Array.from(new Set(props.members.map(function(id2) {
          var member = featuresByCode[id2];
          if (member.geometry)
            return member.properties.roadSpeedUnit || "km/h";
        }).filter(Boolean)));
        if (vals.length === 1)
          props.roadSpeedUnit = vals[0];
      }
    }
    function loadRoadHeightUnit(feature23) {
      var props = feature23.properties;
      if (feature23.geometry) {
        if (!props.roadHeightUnit)
          props.roadHeightUnit = "m";
      } else if (props.members) {
        var vals = Array.from(new Set(props.members.map(function(id2) {
          var member = featuresByCode[id2];
          if (member.geometry)
            return member.properties.roadHeightUnit || "m";
        }).filter(Boolean)));
        if (vals.length === 1)
          props.roadHeightUnit = vals[0];
      }
    }
    function loadDriveSide(feature23) {
      var props = feature23.properties;
      if (feature23.geometry) {
        if (!props.driveSide)
          props.driveSide = "right";
      } else if (props.members) {
        var vals = Array.from(new Set(props.members.map(function(id2) {
          var member = featuresByCode[id2];
          if (member.geometry)
            return member.properties.driveSide || "right";
        }).filter(Boolean)));
        if (vals.length === 1)
          props.driveSide = vals[0];
      }
    }
    function loadCallingCodes(feature23) {
      var props = feature23.properties;
      if (!feature23.geometry && props.members) {
        props.callingCodes = Array.from(new Set(props.members.reduce(function(array2, id2) {
          var member = featuresByCode[id2];
          if (member.geometry && member.properties.callingCodes)
            return array2.concat(member.properties.callingCodes);
          return array2;
        }, [])));
      }
    }
    function loadFlag(feature23) {
      if (!feature23.properties.iso1A2)
        return;
      var flag = feature23.properties.iso1A2.replace(/./g, function(char) {
        return String.fromCodePoint(char.charCodeAt(0) + 127397);
      });
      feature23.properties.emojiFlag = flag;
    }
    function loadMembersForGroupsOf(feature23) {
      for (var j in feature23.properties.groups) {
        var groupID = feature23.properties.groups[j];
        var groupFeature = featuresByCode[groupID];
        if (!groupFeature.properties.members)
          groupFeature.properties.members = [];
        groupFeature.properties.members.push(feature23.properties.id);
      }
    }
    function cacheFeatureByIDs(feature23) {
      var ids = [];
      for (var k in identifierProps) {
        var prop = identifierProps[k];
        var id2 = feature23.properties[prop];
        if (id2)
          ids.push(id2);
      }
      if (feature23.properties.aliases) {
        for (var j in feature23.properties.aliases) {
          ids.push(feature23.properties.aliases[j]);
        }
      }
      for (var _i5 in ids) {
        var _id = canonicalID(ids[_i5]);
        featuresByCode[_id] = feature23;
      }
    }
  }
  function locArray(loc) {
    if (Array.isArray(loc)) {
      return loc;
    } else if (loc.coordinates) {
      return loc.coordinates;
    }
    return loc.geometry.coordinates;
  }
  function smallestFeature(loc) {
    var query = locArray(loc);
    var featureProperties = whichPolygonGetter(query);
    if (!featureProperties)
      return null;
    return featuresByCode[featureProperties.id];
  }
  function countryFeature(loc) {
    var feature22 = smallestFeature(loc);
    if (!feature22)
      return null;
    var countryCode2 = feature22.properties.country || feature22.properties.iso1A2;
    return featuresByCode[countryCode2] || null;
  }
  var defaultOpts = {
    level: void 0,
    maxLevel: void 0,
    withProp: void 0
  };
  function featureForLoc(loc, opts) {
    var targetLevel = opts.level || "country";
    var maxLevel = opts.maxLevel || "world";
    var withProp = opts.withProp;
    var targetLevelIndex = levels.indexOf(targetLevel);
    if (targetLevelIndex === -1)
      return null;
    var maxLevelIndex = levels.indexOf(maxLevel);
    if (maxLevelIndex === -1)
      return null;
    if (maxLevelIndex < targetLevelIndex)
      return null;
    if (targetLevel === "country") {
      var fastFeature = countryFeature(loc);
      if (fastFeature) {
        if (!withProp || fastFeature.properties[withProp]) {
          return fastFeature;
        }
      }
    }
    var features2 = featuresContaining(loc);
    for (var i2 in features2) {
      var feature22 = features2[i2];
      var levelIndex = levels.indexOf(feature22.properties.level);
      if (feature22.properties.level === targetLevel || levelIndex > targetLevelIndex && levelIndex <= maxLevelIndex) {
        if (!withProp || feature22.properties[withProp]) {
          return feature22;
        }
      }
    }
    return null;
  }
  function featureForID(id2) {
    var stringID;
    if (typeof id2 === "number") {
      stringID = id2.toString();
      if (stringID.length === 1) {
        stringID = "00" + stringID;
      } else if (stringID.length === 2) {
        stringID = "0" + stringID;
      }
    } else {
      stringID = canonicalID(id2);
    }
    return featuresByCode[stringID] || null;
  }
  function smallestFeaturesForBbox(bbox) {
    return whichPolygonGetter.bbox(bbox).map(function(props) {
      return featuresByCode[props.id];
    });
  }
  function smallestOrMatchingFeature(query) {
    if (_typeof(query) === "object") {
      return smallestFeature(query);
    }
    return featureForID(query);
  }
  function feature(query) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOpts;
    if (_typeof(query) === "object") {
      return featureForLoc(query, opts);
    }
    return featureForID(query);
  }
  function iso1A2Code(query) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOpts;
    opts.withProp = "iso1A2";
    var match = feature(query, opts);
    if (!match)
      return null;
    return match.properties.iso1A2 || null;
  }
  function featuresContaining(query, strict) {
    var matchingFeatures;
    if (Array.isArray(query) && query.length === 4) {
      matchingFeatures = smallestFeaturesForBbox(query);
    } else {
      var smallestOrMatching = smallestOrMatchingFeature(query);
      matchingFeatures = smallestOrMatching ? [smallestOrMatching] : [];
    }
    if (!matchingFeatures.length)
      return [];
    var returnFeatures;
    if (!strict || _typeof(query) === "object") {
      returnFeatures = matchingFeatures.slice();
    } else {
      returnFeatures = [];
    }
    for (var j in matchingFeatures) {
      var properties = matchingFeatures[j].properties;
      for (var i2 in properties.groups) {
        var groupID = properties.groups[i2];
        var groupFeature = featuresByCode[groupID];
        if (returnFeatures.indexOf(groupFeature) === -1) {
          returnFeatures.push(groupFeature);
        }
      }
    }
    return returnFeatures;
  }
  function featuresIn(id2, strict) {
    var feature22 = featureForID(id2);
    if (!feature22)
      return [];
    var features2 = [];
    if (!strict) {
      features2.push(feature22);
    }
    var properties = feature22.properties;
    if (properties.members) {
      for (var i2 in properties.members) {
        var memberID = properties.members[i2];
        features2.push(featuresByCode[memberID]);
      }
    }
    return features2;
  }
  function aggregateFeature(id2) {
    var features2 = featuresIn(id2, false);
    if (features2.length === 0)
      return null;
    var aggregateCoordinates = [];
    for (var i2 in features2) {
      var feature22 = features2[i2];
      if (feature22.geometry && feature22.geometry.type === "MultiPolygon" && feature22.geometry.coordinates) {
        aggregateCoordinates = aggregateCoordinates.concat(feature22.geometry.coordinates);
      }
    }
    return {
      type: "Feature",
      properties: features2[0].properties,
      geometry: {
        type: "MultiPolygon",
        coordinates: aggregateCoordinates
      }
    };
  }
  function roadSpeedUnit(query) {
    var feature22 = smallestOrMatchingFeature(query);
    return feature22 && feature22.properties.roadSpeedUnit || null;
  }

  // node_modules/@ideditor/location-conflation/index.mjs
  var import_geojson_area = __toModule(require_geojson_area());
  var import_circle_to_polygon = __toModule(require_circle_to_polygon());
  var import_polygon_clipping = __toModule(require_polygon_clipping_umd());
  var import_geojson_precision = __toModule(require_geojson_precision());
  var import_json_stringify_pretty_compact = __toModule(require_json_stringify_pretty_compact());
  var _default = /* @__PURE__ */ function() {
    function _default2(fc) {
      var _this = this;
      _classCallCheck(this, _default2);
      this._cache = {};
      this._strict = true;
      if (fc && fc.type === "FeatureCollection" && Array.isArray(fc.features)) {
        fc.features.forEach(function(feature3) {
          feature3.properties = feature3.properties || {};
          var props = feature3.properties;
          var id2 = feature3.id || props.id;
          if (!id2 || !/^\S+\.geojson$/i.test(id2))
            return;
          id2 = id2.toLowerCase();
          feature3.id = id2;
          props.id = id2;
          if (!props.area) {
            var area3 = import_geojson_area.default.geometry(feature3.geometry) / 1e6;
            props.area = Number(area3.toFixed(2));
          }
          _this._cache[id2] = feature3;
        });
      }
      var world = _cloneDeep(feature("Q2"));
      world.geometry = {
        type: "Polygon",
        coordinates: [[[-180, -90], [180, -90], [180, 90], [-180, 90], [-180, -90]]]
      };
      world.id = "Q2";
      world.properties.id = "Q2";
      world.properties.area = import_geojson_area.default.geometry(world.geometry) / 1e6;
      this._cache.Q2 = world;
    }
    _createClass(_default2, [{
      key: "validateLocation",
      value: function validateLocation(location2) {
        if (Array.isArray(location2) && (location2.length === 2 || location2.length === 3)) {
          var lon = location2[0];
          var lat = location2[1];
          var radius = location2[2];
          if (Number.isFinite(lon) && lon >= -180 && lon <= 180 && Number.isFinite(lat) && lat >= -90 && lat <= 90 && (location2.length === 2 || Number.isFinite(radius) && radius > 0)) {
            var id2 = "[" + location2.toString() + "]";
            return {
              type: "point",
              location: location2,
              id: id2
            };
          }
        } else if (typeof location2 === "string" && /^\S+\.geojson$/i.test(location2)) {
          var _id = location2.toLowerCase();
          if (this._cache[_id]) {
            return {
              type: "geojson",
              location: location2,
              id: _id
            };
          }
        } else if (typeof location2 === "string" || typeof location2 === "number") {
          var feature3 = feature(location2);
          if (feature3) {
            var _id2 = feature3.properties.wikidata;
            return {
              type: "countrycoder",
              location: location2,
              id: _id2
            };
          }
        }
        if (this._strict) {
          throw new Error('validateLocation:  Invalid location: "'.concat(location2, '".'));
        } else {
          return null;
        }
      }
    }, {
      key: "resolveLocation",
      value: function resolveLocation(location2) {
        var valid = this.validateLocation(location2);
        if (!valid)
          return null;
        var id2 = valid.id;
        if (this._cache[id2]) {
          return Object.assign(valid, {
            feature: this._cache[id2]
          });
        }
        if (valid.type === "point") {
          var lon = location2[0];
          var lat = location2[1];
          var radius = location2[2] || 25;
          var EDGES = 10;
          var PRECISION = 3;
          var area3 = Math.PI * radius * radius;
          var feature3 = this._cache[id2] = (0, import_geojson_precision.default)({
            type: "Feature",
            id: id2,
            properties: {
              id: id2,
              area: Number(area3.toFixed(2))
            },
            geometry: (0, import_circle_to_polygon.default)([lon, lat], radius * 1e3, EDGES)
          }, PRECISION);
          return Object.assign(valid, {
            feature: feature3
          });
        } else if (valid.type === "geojson") {
        } else if (valid.type === "countrycoder") {
          var _feature = _cloneDeep(feature(id2));
          var props = _feature.properties;
          if (Array.isArray(props.members)) {
            var aggregate = aggregateFeature(id2);
            aggregate.geometry.coordinates = _clip([aggregate], "UNION").geometry.coordinates;
            _feature.geometry = aggregate.geometry;
          }
          if (!props.area) {
            var _area = import_geojson_area.default.geometry(_feature.geometry) / 1e6;
            props.area = Number(_area.toFixed(2));
          }
          _feature.id = id2;
          props.id = id2;
          this._cache[id2] = _feature;
          return Object.assign(valid, {
            feature: _feature
          });
        }
        if (this._strict) {
          throw new Error("resolveLocation:  Couldn't resolve location \"".concat(location2, '".'));
        } else {
          return null;
        }
      }
    }, {
      key: "validateLocationSet",
      value: function validateLocationSet(locationSet) {
        locationSet = locationSet || {};
        var validator = this.validateLocation.bind(this);
        var include = (locationSet.include || []).map(validator).filter(Boolean);
        var exclude = (locationSet.exclude || []).map(validator).filter(Boolean);
        if (!include.length) {
          if (this._strict) {
            throw new Error("validateLocationSet:  LocationSet includes nothing.");
          } else {
            locationSet.include = ["Q2"];
            include = [{
              type: "countrycoder",
              location: "Q2",
              id: "Q2"
            }];
          }
        }
        include.sort(_sortLocations);
        var id2 = "+[" + include.map(function(d) {
          return d.id;
        }).join(",") + "]";
        if (exclude.length) {
          exclude.sort(_sortLocations);
          id2 += "-[" + exclude.map(function(d) {
            return d.id;
          }).join(",") + "]";
        }
        return {
          type: "locationset",
          locationSet: locationSet,
          id: id2
        };
      }
    }, {
      key: "resolveLocationSet",
      value: function resolveLocationSet(locationSet) {
        locationSet = locationSet || {};
        var valid = this.validateLocationSet(locationSet);
        if (!valid)
          return null;
        var id2 = valid.id;
        if (this._cache[id2]) {
          return Object.assign(valid, {
            feature: this._cache[id2]
          });
        }
        var resolver = this.resolveLocation.bind(this);
        var includes = (locationSet.include || []).map(resolver).filter(Boolean);
        var excludes = (locationSet.exclude || []).map(resolver).filter(Boolean);
        if (includes.length === 1 && excludes.length === 0) {
          return Object.assign(valid, {
            feature: includes[0].feature
          });
        }
        var includeGeoJSON = _clip(includes.map(function(d) {
          return d.feature;
        }), "UNION");
        var excludeGeoJSON = _clip(excludes.map(function(d) {
          return d.feature;
        }), "UNION");
        var resultGeoJSON = excludeGeoJSON ? _clip([includeGeoJSON, excludeGeoJSON], "DIFFERENCE") : includeGeoJSON;
        var area3 = import_geojson_area.default.geometry(resultGeoJSON.geometry) / 1e6;
        resultGeoJSON.id = id2;
        resultGeoJSON.properties = {
          id: id2,
          area: Number(area3.toFixed(2))
        };
        this._cache[id2] = resultGeoJSON;
        return Object.assign(valid, {
          feature: resultGeoJSON
        });
      }
    }, {
      key: "strict",
      value: function strict(val) {
        if (val === void 0) {
          return this._strict;
        } else {
          this._strict = val;
          return this;
        }
      }
    }, {
      key: "cache",
      value: function cache7() {
        return this._cache;
      }
    }, {
      key: "stringify",
      value: function stringify3(obj, options) {
        return (0, import_json_stringify_pretty_compact.default)(obj, options);
      }
    }]);
    return _default2;
  }();
  function _clip(features2, which) {
    if (!Array.isArray(features2) || !features2.length)
      return null;
    var fn = {
      UNION: import_polygon_clipping.default.union,
      DIFFERENCE: import_polygon_clipping.default.difference
    }[which];
    var args = features2.map(function(feature3) {
      return feature3.geometry.coordinates;
    });
    var coords = fn.apply(null, args);
    return {
      type: "Feature",
      properties: {},
      geometry: {
        type: whichType(coords),
        coordinates: coords
      }
    };
    function whichType(coords2) {
      var a = Array.isArray(coords2);
      var b2 = a && Array.isArray(coords2[0]);
      var c2 = b2 && Array.isArray(coords2[0][0]);
      var d = c2 && Array.isArray(coords2[0][0][0]);
      return d ? "MultiPolygon" : "Polygon";
    }
  }
  function _cloneDeep(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  function _sortLocations(a, b2) {
    var rank = {
      countrycoder: 1,
      geojson: 2,
      point: 3
    };
    var aRank = rank[a.type];
    var bRank = rank[b2.type];
    return aRank > bRank ? 1 : aRank < bRank ? -1 : a.id.localeCompare(b2.id);
  }

  // modules/core/locations.js
  var import_which_polygon2 = __toModule(require_which_polygon());
  var import_geojson_area2 = __toModule(require_geojson_area());
  var _mainLocations = coreLocations();
  function coreLocations() {
    var _this = {};
    var _resolvedFeatures = {};
    var _loco = new _default();
    var _wp;
    var world = {
      locationSet: {
        include: ["Q2"]
      }
    };
    resolveLocationSet(world);
    rebuildIndex();
    var _queue = [];
    var _deferred2 = new Set();
    var _inProcess;
    function processQueue() {
      if (!_queue.length)
        return Promise.resolve();
      var chunk = _queue.pop();
      return new Promise(function(resolvePromise) {
        var handle = window.requestIdleCallback(function() {
          _deferred2.delete(handle);
          chunk.forEach(resolveLocationSet);
          resolvePromise();
        });
        _deferred2.add(handle);
      }).then(function() {
        return processQueue();
      });
    }
    function resolveLocationSet(obj) {
      if (obj.locationSetID)
        return;
      try {
        var locationSet = obj.locationSet;
        if (!locationSet) {
          throw new Error("object missing locationSet property");
        }
        if (!locationSet.include) {
          locationSet.include = ["Q2"];
        }
        var resolved = _loco.resolveLocationSet(locationSet);
        var locationSetID = resolved.id;
        obj.locationSetID = locationSetID;
        if (!resolved.feature.geometry.coordinates.length || !resolved.feature.properties.area) {
          throw new Error("locationSet ".concat(locationSetID, " resolves to an empty feature."));
        }
        if (!_resolvedFeatures[locationSetID]) {
          var feature3 = JSON.parse(JSON.stringify(resolved.feature));
          feature3.id = locationSetID;
          feature3.properties.id = locationSetID;
          _resolvedFeatures[locationSetID] = feature3;
        }
      } catch (err) {
        obj.locationSet = {
          include: ["Q2"]
        };
        obj.locationSetID = "+[Q2]";
      }
    }
    function rebuildIndex() {
      _wp = (0, import_which_polygon2.default)({
        features: Object.values(_resolvedFeatures)
      });
    }
    _this.mergeCustomGeoJSON = function(fc) {
      if (fc && fc.type === "FeatureCollection" && Array.isArray(fc.features)) {
        fc.features.forEach(function(feature3) {
          feature3.properties = feature3.properties || {};
          var props = feature3.properties;
          var id2 = feature3.id || props.id;
          if (!id2 || !/^\S+\.geojson$/i.test(id2))
            return;
          id2 = id2.toLowerCase();
          feature3.id = id2;
          props.id = id2;
          if (!props.area) {
            var area3 = import_geojson_area2.default.geometry(feature3.geometry) / 1e6;
            props.area = Number(area3.toFixed(2));
          }
          _loco._cache[id2] = feature3;
        });
      }
    };
    _this.mergeLocationSets = function(objects) {
      if (!Array.isArray(objects))
        return Promise.reject("nothing to do");
      _queue = _queue.concat(utilArrayChunk(objects, 200));
      if (!_inProcess) {
        _inProcess = processQueue().then(function() {
          rebuildIndex();
          _inProcess = null;
          return objects;
        });
      }
      return _inProcess;
    };
    _this.locationSetID = function(locationSet) {
      var locationSetID;
      try {
        locationSetID = _loco.validateLocationSet(locationSet).id;
      } catch (err) {
        locationSetID = "+[Q2]";
      }
      return locationSetID;
    };
    _this.feature = function(locationSetID) {
      return _resolvedFeatures[locationSetID] || _resolvedFeatures["+[Q2]"];
    };
    _this.locationsAt = function(loc) {
      var result6 = {};
      (_wp(loc, true) || []).forEach(function(prop) {
        return result6[prop.id] = prop.area;
      });
      return result6;
    };
    _this.query = function(loc, multi) {
      return _wp(loc, multi);
    };
    _this.loco = function() {
      return _loco;
    };
    _this.wp = function() {
      return _wp;
    };
    return _this;
  }

  // modules/core/localizer.js
  init_typeof();

  // modules/util/detect.js
  var _detected;
  function utilDetect(refresh2) {
    if (_detected && !refresh2)
      return _detected;
    _detected = {};
    var ua = navigator.userAgent;
    var m = null;
    m = ua.match(/(edge)\/?\s*(\.?\d+(\.\d+)*)/i);
    if (m !== null) {
      _detected.browser = m[1];
      _detected.version = m[2];
    }
    if (!_detected.browser) {
      m = ua.match(/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/i);
      if (m !== null) {
        _detected.browser = "msie";
        _detected.version = m[1];
      }
    }
    if (!_detected.browser) {
      m = ua.match(/(opr)\/?\s*(\.?\d+(\.\d+)*)/i);
      if (m !== null) {
        _detected.browser = "Opera";
        _detected.version = m[2];
      }
    }
    if (!_detected.browser) {
      m = ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
      if (m !== null) {
        _detected.browser = m[1];
        _detected.version = m[2];
        m = ua.match(/version\/([\.\d]+)/i);
        if (m !== null)
          _detected.version = m[1];
      }
    }
    if (!_detected.browser) {
      _detected.browser = navigator.appName;
      _detected.version = navigator.appVersion;
    }
    _detected.version = _detected.version.split(/\W/).slice(0, 2).join(".");
    _detected.opera = _detected.browser.toLowerCase() === "opera" && parseFloat(_detected.version) < 15;
    if (_detected.browser.toLowerCase() === "msie") {
      _detected.ie = true;
      _detected.browser = "Internet Explorer";
      _detected.support = parseFloat(_detected.version) >= 11;
    } else {
      _detected.ie = false;
      _detected.support = true;
    }
    _detected.filedrop = window.FileReader && "ondrop" in window;
    _detected.download = !(_detected.ie || _detected.browser.toLowerCase() === "edge");
    _detected.cssfilters = !(_detected.ie || _detected.browser.toLowerCase() === "edge");
    if (/Win/.test(ua)) {
      _detected.os = "win";
      _detected.platform = "Windows";
    } else if (/Mac/.test(ua)) {
      _detected.os = "mac";
      _detected.platform = "Macintosh";
    } else if (/X11/.test(ua) || /Linux/.test(ua)) {
      _detected.os = "linux";
      _detected.platform = "Linux";
    } else {
      _detected.os = "win";
      _detected.platform = "Unknown";
    }
    _detected.isMobileWebKit = (/\b(iPad|iPhone|iPod)\b/.test(ua) || navigator.platform === "MacIntel" && "maxTouchPoints" in navigator && navigator.maxTouchPoints > 1) && /WebKit/.test(ua) && !/Edge/.test(ua) && !window.MSStream;
    _detected.browserLocales = Array.from(new Set([navigator.language].concat(navigator.languages || []).concat([
      navigator.userLanguage
    ]).filter(Boolean)));
    var loc = window.top.location;
    var origin = loc.origin;
    if (!origin) {
      origin = loc.protocol + "//" + loc.hostname + (loc.port ? ":" + loc.port : "");
    }
    _detected.host = origin + loc.pathname;
    return _detected;
  }

  // modules/core/localizer.js
  var _mainLocalizer = coreLocalizer();
  var _t = _mainLocalizer.t;
  function coreLocalizer() {
    var localizer = {};
    var _dataLanguages = {};
    var _dataLocales = {};
    var _localeStrings = {};
    var _localeCode = "en-US";
    var _localeCodes = ["en-US", "en"];
    var _languageCode = "en";
    var _textDirection = "ltr";
    var _usesMetric = false;
    var _languageNames = {};
    var _scriptNames = {};
    localizer.localeCode = function() {
      return _localeCode;
    };
    localizer.localeCodes = function() {
      return _localeCodes;
    };
    localizer.languageCode = function() {
      return _languageCode;
    };
    localizer.textDirection = function() {
      return _textDirection;
    };
    localizer.usesMetric = function() {
      return _usesMetric;
    };
    localizer.languageNames = function() {
      return _languageNames;
    };
    localizer.scriptNames = function() {
      return _scriptNames;
    };
    var _preferredLocaleCodes = [];
    localizer.preferredLocaleCodes = function(codes) {
      if (!arguments.length)
        return _preferredLocaleCodes;
      if (typeof codes === "string") {
        _preferredLocaleCodes = codes.split(/,|;| /gi).filter(Boolean);
      } else {
        _preferredLocaleCodes = codes;
      }
      return localizer;
    };
    var _loadPromise;
    localizer.ensureLoaded = function() {
      if (_loadPromise)
        return _loadPromise;
      var filesToFetch = [
        "languages",
        "locales"
      ];
      var localeDirs = {
        general: "locales",
        tagging: "https://cdn.jsdelivr.net/npm/@openstreetmap/id-tagging-schema@3/dist/translations"
      };
      var fileMap = _mainFileFetcher.fileMap();
      for (var scopeId in localeDirs) {
        var key = "locales_index_".concat(scopeId);
        if (!fileMap[key]) {
          fileMap[key] = localeDirs[scopeId] + "/index.min.json";
        }
        filesToFetch.push(key);
      }
      return _loadPromise = Promise.all(filesToFetch.map(function(key2) {
        return _mainFileFetcher.get(key2);
      })).then(function(results) {
        _dataLanguages = results[0];
        _dataLocales = results[1];
        var indexes = results.slice(2);
        var requestedLocales = (_preferredLocaleCodes || []).concat(utilDetect().browserLocales).concat(["en"]);
        _localeCodes = localesToUseFrom(requestedLocales);
        _localeCode = _localeCodes[0];
        var loadStringsPromises = [];
        indexes.forEach(function(index, i2) {
          var fullCoverageIndex = _localeCodes.length - 1;
          _localeCodes.slice(0, fullCoverageIndex + 1).forEach(function(code) {
            var scopeId2 = Object.keys(localeDirs)[i2];
            var directory = Object.values(localeDirs)[i2];
            if (index[code])
              loadStringsPromises.push(localizer.loadLocale(code, scopeId2, directory));
          });
        });
        return Promise.all(loadStringsPromises);
      }).then(function() {
        updateForCurrentLocale();
      }).catch(function(err) {
        return console.error(err);
      });
    };
    function localesToUseFrom(requestedLocales) {
      var supportedLocales = _dataLocales;
      var toUse = [];
      for (var i2 in requestedLocales) {
        var locale2 = requestedLocales[i2];
        if (supportedLocales[locale2])
          toUse.push(locale2);
        if (locale2.includes("-")) {
          var langPart = locale2.split("-")[0];
          if (supportedLocales[langPart])
            toUse.push(langPart);
        }
      }
      return utilArrayUniq(toUse);
    }
    function updateForCurrentLocale() {
      if (!_localeCode)
        return;
      _languageCode = _localeCode.split("-")[0];
      var currentData = _dataLocales[_localeCode] || _dataLocales[_languageCode];
      var hash = utilStringQs(window.location.hash);
      if (hash.rtl === "true") {
        _textDirection = "rtl";
      } else if (hash.rtl === "false") {
        _textDirection = "ltr";
      } else {
        _textDirection = currentData && currentData.rtl ? "rtl" : "ltr";
      }
      var locale2 = _localeCode;
      if (locale2.toLowerCase().startsWith("en"))
        locale2 = "en";
      _languageNames = _localeStrings.general[locale2].languageNames;
      _scriptNames = _localeStrings.general[locale2].scriptNames;
      _usesMetric = _localeCode.slice(-3).toLowerCase() !== "-us";
    }
    localizer.loadLocale = function(locale2, scopeId, directory) {
      if (locale2.toLowerCase().startsWith("en"))
        locale2 = "en";
      if (_localeStrings[scopeId] && _localeStrings[scopeId][locale2]) {
        return Promise.resolve(locale2);
      }
      var fileMap = _mainFileFetcher.fileMap();
      var key = "locale_".concat(scopeId, "_").concat(locale2);
      if (!fileMap[key]) {
        fileMap[key] = "".concat(directory, "/").concat(locale2, ".min.json");
      }
      return _mainFileFetcher.get(key).then(function(d) {
        if (!_localeStrings[scopeId])
          _localeStrings[scopeId] = {};
        _localeStrings[scopeId][locale2] = d[locale2];
        return locale2;
      });
    };
    localizer.pluralRule = function(number3) {
      return pluralRule(number3, _localeCode);
    };
    function pluralRule(number3, localeCode) {
      var rules = "Intl" in window && Intl.PluralRules && new Intl.PluralRules(localeCode);
      if (rules) {
        return rules.select(number3);
      }
      if (number3 === 1)
        return "one";
      return "other";
    }
    localizer.tInfo = function(origStringId, replacements, locale2) {
      var stringId = origStringId.trim();
      var scopeId = "general";
      if (stringId[0] === "_") {
        var split = stringId.split(".");
        scopeId = split[0].slice(1);
        stringId = split.slice(1).join(".");
      }
      locale2 = locale2 || _localeCode;
      var path = stringId.split(".").map(function(s) {
        return s.replace(/<TX_DOT>/g, ".");
      }).reverse();
      var stringsKey = locale2;
      if (stringsKey.toLowerCase().startsWith("en"))
        stringsKey = "en";
      var result6 = _localeStrings && _localeStrings[scopeId] && _localeStrings[scopeId][stringsKey];
      while (result6 !== void 0 && path.length) {
        result6 = result6[path.pop()];
      }
      if (result6 !== void 0) {
        if (replacements) {
          if (_typeof(result6) === "object" && Object.keys(result6).length) {
            var number3 = Object.values(replacements).find(function(value3) {
              return typeof value3 === "number";
            });
            if (number3 !== void 0) {
              var rule = pluralRule(number3, locale2);
              if (result6[rule]) {
                result6 = result6[rule];
              } else {
                result6 = Object.values(result6)[0];
              }
            }
          }
          if (typeof result6 === "string") {
            for (var key in replacements) {
              var value2 = replacements[key];
              if (typeof value2 === "number") {
                if (value2.toLocaleString) {
                  value2 = value2.toLocaleString(locale2, {
                    style: "decimal",
                    useGrouping: true,
                    minimumFractionDigits: 0
                  });
                } else {
                  value2 = value2.toString();
                }
              }
              var token = "{".concat(key, "}");
              var regex = new RegExp(token, "g");
              result6 = result6.replace(regex, value2);
            }
          }
        }
        if (typeof result6 === "string") {
          return {
            text: result6,
            locale: locale2
          };
        }
      }
      var index = _localeCodes.indexOf(locale2);
      if (index >= 0 && index < _localeCodes.length - 1) {
        var fallback = _localeCodes[index + 1];
        return localizer.tInfo(origStringId, replacements, fallback);
      }
      if (replacements && "default" in replacements) {
        return {
          text: replacements.default,
          locale: null
        };
      }
      var missing = "Missing ".concat(locale2, " translation: ").concat(origStringId);
      if (typeof console !== "undefined")
        console.error(missing);
      return {
        text: missing,
        locale: "en"
      };
    };
    localizer.hasTextForStringId = function(stringId) {
      return !!localizer.tInfo(stringId, {
        default: "nothing found"
      }).locale;
    };
    localizer.t = function(stringId, replacements, locale2) {
      return localizer.tInfo(stringId, replacements, locale2).text;
    };
    localizer.t.html = function(stringId, replacements, locale2) {
      var info = localizer.tInfo(stringId, replacements, locale2);
      return info.text ? localizer.htmlForLocalizedText(info.text, info.locale) : "";
    };
    localizer.htmlForLocalizedText = function(text, localeCode) {
      return '<span class="localized-text" lang="'.concat(localeCode || "unknown", '">').concat(text, "</span>");
    };
    localizer.languageName = function(code, options) {
      if (_languageNames[code]) {
        return _languageNames[code];
      }
      if (options && options.localOnly)
        return null;
      var langInfo = _dataLanguages[code];
      if (langInfo) {
        if (langInfo.nativeName) {
          return localizer.t("translate.language_and_code", {
            language: langInfo.nativeName,
            code: code
          });
        } else if (langInfo.base && langInfo.script) {
          var base2 = langInfo.base;
          if (_languageNames[base2]) {
            var scriptCode = langInfo.script;
            var script = _scriptNames[scriptCode] || scriptCode;
            return localizer.t("translate.language_and_code", {
              language: _languageNames[base2],
              code: script
            });
          } else if (_dataLanguages[base2] && _dataLanguages[base2].nativeName) {
            return localizer.t("translate.language_and_code", {
              language: _dataLanguages[base2].nativeName,
              code: code
            });
          }
        }
      }
      return code;
    };
    return localizer;
  }

  // modules/presets/collection.js
  function presetCollection(collection) {
    var MAXRESULTS = 50;
    var _this = {};
    var _memo = {};
    _this.collection = collection;
    _this.item = function(id2) {
      if (_memo[id2])
        return _memo[id2];
      var found = _this.collection.find(function(d) {
        return d.id === id2;
      });
      if (found)
        _memo[id2] = found;
      return found;
    };
    _this.index = function(id2) {
      return _this.collection.findIndex(function(d) {
        return d.id === id2;
      });
    };
    _this.matchGeometry = function(geometry6) {
      return presetCollection(_this.collection.filter(function(d) {
        return d.matchGeometry(geometry6);
      }));
    };
    _this.matchAllGeometry = function(geometries) {
      return presetCollection(_this.collection.filter(function(d) {
        return d && d.matchAllGeometry(geometries);
      }));
    };
    _this.matchAnyGeometry = function(geometries) {
      return presetCollection(_this.collection.filter(function(d) {
        return geometries.some(function(geom) {
          return d.matchGeometry(geom);
        });
      }));
    };
    _this.fallback = function(geometry6) {
      var id2 = geometry6;
      if (id2 === "vertex")
        id2 = "point";
      return _this.item(id2);
    };
    _this.search = function(value2, geometry6, loc) {
      if (!value2)
        return _this;
      value2 = value2.toLowerCase().trim();
      function leading(a) {
        var index = a.indexOf(value2);
        return index === 0 || a[index - 1] === " ";
      }
      function leadingStrict(a) {
        var index = a.indexOf(value2);
        return index === 0;
      }
      function sortPresets(nameProp) {
        return function sortNames(a, b2) {
          var aCompare = a[nameProp]();
          var bCompare = b2[nameProp]();
          if (value2 === aCompare)
            return -1;
          if (value2 === bCompare)
            return 1;
          var i2 = b2.originalScore - a.originalScore;
          if (i2 !== 0)
            return i2;
          i2 = aCompare.indexOf(value2) - bCompare.indexOf(value2);
          if (i2 !== 0)
            return i2;
          return aCompare.length - bCompare.length;
        };
      }
      var pool = _this.collection;
      if (Array.isArray(loc)) {
        var validLocations = _mainLocations.locationsAt(loc);
        pool = pool.filter(function(a) {
          return !a.locationSetID || validLocations[a.locationSetID];
        });
      }
      var searchable = pool.filter(function(a) {
        return a.searchable !== false && a.suggestion !== true;
      });
      var suggestions2 = pool.filter(function(a) {
        return a.suggestion === true;
      });
      var leadingNames = searchable.filter(function(a) {
        return leading(a.searchName());
      }).sort(sortPresets("searchName"));
      var leadingSuggestions = suggestions2.filter(function(a) {
        return leadingStrict(a.searchName());
      }).sort(sortPresets("searchName"));
      var leadingNamesStripped = searchable.filter(function(a) {
        return leading(a.searchNameStripped());
      }).sort(sortPresets("searchNameStripped"));
      var leadingSuggestionsStripped = suggestions2.filter(function(a) {
        return leadingStrict(a.searchNameStripped());
      }).sort(sortPresets("searchNameStripped"));
      var leadingTerms = searchable.filter(function(a) {
        return (a.terms() || []).some(leading);
      });
      var leadingSuggestionTerms = suggestions2.filter(function(a) {
        return (a.terms() || []).some(leading);
      });
      var leadingTagValues = searchable.filter(function(a) {
        return Object.values(a.tags || {}).filter(function(val) {
          return val !== "*";
        }).some(leading);
      });
      var similarName = searchable.map(function(a) {
        return {
          preset: a,
          dist: utilEditDistance(value2, a.searchName())
        };
      }).filter(function(a) {
        return a.dist + Math.min(value2.length - a.preset.searchName().length, 0) < 3;
      }).sort(function(a, b2) {
        return a.dist - b2.dist;
      }).map(function(a) {
        return a.preset;
      });
      var similarSuggestions = suggestions2.map(function(a) {
        return {
          preset: a,
          dist: utilEditDistance(value2, a.searchName())
        };
      }).filter(function(a) {
        return a.dist + Math.min(value2.length - a.preset.searchName().length, 0) < 1;
      }).sort(function(a, b2) {
        return a.dist - b2.dist;
      }).map(function(a) {
        return a.preset;
      });
      var similarTerms = searchable.filter(function(a) {
        return (a.terms() || []).some(function(b2) {
          return utilEditDistance(value2, b2) + Math.min(value2.length - b2.length, 0) < 3;
        });
      });
      var results = leadingNames.concat(leadingSuggestions, leadingNamesStripped, leadingSuggestionsStripped, leadingTerms, leadingSuggestionTerms, leadingTagValues, similarName, similarSuggestions, similarTerms).slice(0, MAXRESULTS - 1);
      if (geometry6) {
        if (typeof geometry6 === "string") {
          results.push(_this.fallback(geometry6));
        } else {
          geometry6.forEach(function(geom) {
            return results.push(_this.fallback(geom));
          });
        }
      }
      return presetCollection(utilArrayUniq(results));
    };
    return _this;
  }

  // modules/presets/category.js
  function presetCategory(categoryID, category, allPresets) {
    var _this = Object.assign({}, category);
    var _searchName;
    var _searchNameStripped;
    _this.id = categoryID;
    _this.members = presetCollection((category.members || []).map(function(presetID) {
      return allPresets[presetID];
    }).filter(Boolean));
    _this.geometry = _this.members.collection.reduce(function(acc, preset) {
      for (var i2 in preset.geometry) {
        var geometry6 = preset.geometry[i2];
        if (acc.indexOf(geometry6) === -1) {
          acc.push(geometry6);
        }
      }
      return acc;
    }, []);
    _this.matchGeometry = function(geom) {
      return _this.geometry.indexOf(geom) >= 0;
    };
    _this.matchAllGeometry = function(geometries) {
      return _this.members.collection.some(function(preset) {
        return preset.matchAllGeometry(geometries);
      });
    };
    _this.matchScore = function() {
      return -1;
    };
    _this.name = function() {
      return _t("_tagging.presets.categories.".concat(categoryID, ".name"), {
        "default": categoryID
      });
    };
    _this.nameLabel = function() {
      return _t.html("_tagging.presets.categories.".concat(categoryID, ".name"), {
        "default": categoryID
      });
    };
    _this.terms = function() {
      return [];
    };
    _this.searchName = function() {
      if (!_searchName) {
        _searchName = (_this.suggestion ? _this.originalName : _this.name()).toLowerCase();
      }
      return _searchName;
    };
    _this.searchNameStripped = function() {
      if (!_searchNameStripped) {
        _searchNameStripped = _this.searchName();
        if (_searchNameStripped.normalize)
          _searchNameStripped = _searchNameStripped.normalize("NFD");
        _searchNameStripped = _searchNameStripped.replace(/[\u0300-\u036f]/g, "");
      }
      return _searchNameStripped;
    };
    return _this;
  }

  // modules/presets/field.js
  function presetField(fieldID, field) {
    var _this = Object.assign({}, field);
    _this.id = fieldID;
    _this.safeid = utilSafeString(fieldID);
    _this.matchGeometry = function(geom) {
      return !_this.geometry || _this.geometry.indexOf(geom) !== -1;
    };
    _this.matchAllGeometry = function(geometries) {
      return !_this.geometry || geometries.every(function(geom) {
        return _this.geometry.indexOf(geom) !== -1;
      });
    };
    _this.t = function(scope, options) {
      return _t("_tagging.presets.fields.".concat(fieldID, ".").concat(scope), options);
    };
    _this.t.html = function(scope, options) {
      return _t.html("_tagging.presets.fields.".concat(fieldID, ".").concat(scope), options);
    };
    _this.hasTextForStringId = function(scope) {
      return _mainLocalizer.hasTextForStringId("_tagging.presets.fields.".concat(fieldID, ".").concat(scope));
    };
    _this.title = function() {
      return _this.overrideLabel || _this.t("label", {
        "default": fieldID
      });
    };
    _this.label = function() {
      return _this.overrideLabel || _this.t.html("label", {
        "default": fieldID
      });
    };
    var _placeholder = _this.placeholder;
    _this.placeholder = function() {
      return _this.t("placeholder", {
        "default": _placeholder
      });
    };
    _this.originalTerms = (_this.terms || []).join();
    _this.terms = function() {
      return _this.t("terms", {
        "default": _this.originalTerms
      }).toLowerCase().trim().split(/\s*,+\s*/);
    };
    _this.increment = _this.type === "number" ? _this.increment || 1 : void 0;
    return _this;
  }

  // modules/presets/preset.js
  function presetPreset(presetID, preset, addable, allFields, allPresets) {
    allFields = allFields || {};
    allPresets = allPresets || {};
    var _this = Object.assign({}, preset);
    var _addable = addable || false;
    var _resolvedFields;
    var _resolvedMoreFields;
    var _searchName;
    var _searchNameStripped;
    _this.id = presetID;
    _this.safeid = utilSafeString(presetID);
    _this.originalTerms = (_this.terms || []).join();
    _this.originalName = _this.name || "";
    _this.originalScore = _this.matchScore || 1;
    _this.originalReference = _this.reference || {};
    _this.originalFields = _this.fields || [];
    _this.originalMoreFields = _this.moreFields || [];
    _this.fields = function() {
      return _resolvedFields || (_resolvedFields = resolve("fields"));
    };
    _this.moreFields = function() {
      return _resolvedMoreFields || (_resolvedMoreFields = resolve("moreFields"));
    };
    _this.resetFields = function() {
      return _resolvedFields = _resolvedMoreFields = null;
    };
    _this.tags = _this.tags || {};
    _this.addTags = _this.addTags || _this.tags;
    _this.removeTags = _this.removeTags || _this.addTags;
    _this.geometry = _this.geometry || [];
    _this.matchGeometry = function(geom) {
      return _this.geometry.indexOf(geom) >= 0;
    };
    _this.matchAllGeometry = function(geoms) {
      return geoms.every(_this.matchGeometry);
    };
    _this.matchScore = function(entityTags) {
      var tags = _this.tags;
      var seen = {};
      var score = 0;
      for (var k in tags) {
        seen[k] = true;
        if (entityTags[k] === tags[k]) {
          score += _this.originalScore;
        } else if (tags[k] === "*" && k in entityTags) {
          score += _this.originalScore / 2;
        } else {
          return -1;
        }
      }
      var addTags = _this.addTags;
      for (var _k in addTags) {
        if (!seen[_k] && entityTags[_k] === addTags[_k]) {
          score += _this.originalScore;
        }
      }
      return score;
    };
    _this.t = function(scope, options) {
      var textID = "_tagging.presets.presets.".concat(presetID, ".").concat(scope);
      return _t(textID, options);
    };
    _this.t.html = function(scope, options) {
      var textID = "_tagging.presets.presets.".concat(presetID, ".").concat(scope);
      return _t.html(textID, options);
    };
    _this.name = function() {
      return _this.t("name", {
        "default": _this.originalName
      });
    };
    _this.nameLabel = function() {
      return _this.t.html("name", {
        "default": _this.originalName
      });
    };
    _this.subtitle = function() {
      if (_this.suggestion) {
        var path = presetID.split("/");
        path.pop();
        return _t("_tagging.presets.presets." + path.join("/") + ".name");
      }
      return null;
    };
    _this.subtitleLabel = function() {
      if (_this.suggestion) {
        var path = presetID.split("/");
        path.pop();
        return _t.html("_tagging.presets.presets." + path.join("/") + ".name");
      }
      return null;
    };
    _this.terms = function() {
      return _this.t("terms", {
        "default": _this.originalTerms
      }).toLowerCase().trim().split(/\s*,+\s*/);
    };
    _this.searchName = function() {
      if (!_searchName) {
        _searchName = (_this.suggestion ? _this.originalName : _this.name()).toLowerCase();
      }
      return _searchName;
    };
    _this.searchNameStripped = function() {
      if (!_searchNameStripped) {
        _searchNameStripped = _this.searchName();
        if (_searchNameStripped.normalize)
          _searchNameStripped = _searchNameStripped.normalize("NFD");
        _searchNameStripped = _searchNameStripped.replace(/[\u0300-\u036f]/g, "");
      }
      return _searchNameStripped;
    };
    _this.isFallback = function() {
      var tagCount = Object.keys(_this.tags).length;
      return tagCount === 0 || tagCount === 1 && _this.tags.hasOwnProperty("area");
    };
    _this.addable = function(val) {
      if (!arguments.length)
        return _addable;
      _addable = val;
      return _this;
    };
    _this.reference = function() {
      var qid = _this.tags.wikidata || _this.tags["flag:wikidata"] || _this.tags["brand:wikidata"] || _this.tags["network:wikidata"] || _this.tags["operator:wikidata"];
      if (qid) {
        return {
          qid: qid
        };
      }
      var key = _this.originalReference.key || Object.keys(utilObjectOmit(_this.tags, "name"))[0];
      var value2 = _this.originalReference.value || _this.tags[key];
      if (value2 === "*") {
        return {
          key: key
        };
      } else {
        return {
          key: key,
          value: value2
        };
      }
    };
    _this.unsetTags = function(tags, geometry6, ignoringKeys, skipFieldDefaults) {
      var removeTags = ignoringKeys ? utilObjectOmit(_this.removeTags, ignoringKeys) : _this.removeTags;
      tags = utilObjectOmit(tags, Object.keys(removeTags));
      if (geometry6 && !skipFieldDefaults) {
        _this.fields().forEach(function(field) {
          if (field.matchGeometry(geometry6) && field.key && field.default === tags[field.key]) {
            delete tags[field.key];
          }
        });
      }
      delete tags.area;
      return tags;
    };
    _this.setTags = function(tags, geometry6, skipFieldDefaults) {
      var addTags = _this.addTags;
      tags = Object.assign({}, tags);
      for (var k in addTags) {
        if (addTags[k] === "*") {
          if (_this.tags[k] || !tags[k] || tags[k] === "no") {
            tags[k] = "yes";
          }
        } else {
          tags[k] = addTags[k];
        }
      }
      if (!addTags.hasOwnProperty("area")) {
        delete tags.area;
        if (geometry6 === "area") {
          var needsAreaTag = true;
          if (_this.geometry.indexOf("line") === -1) {
            for (var _k2 in addTags) {
              if (_k2 in osmAreaKeys) {
                needsAreaTag = false;
                break;
              }
            }
          }
          if (needsAreaTag) {
            tags.area = "yes";
          }
        }
      }
      if (geometry6 && !skipFieldDefaults) {
        _this.fields().forEach(function(field) {
          if (field.matchGeometry(geometry6) && field.key && !tags[field.key] && field.default) {
            tags[field.key] = field.default;
          }
        });
      }
      return tags;
    };
    function resolve(which) {
      var fieldIDs = which === "fields" ? _this.originalFields : _this.originalMoreFields;
      var resolved = [];
      fieldIDs.forEach(function(fieldID) {
        var match = fieldID.match(/\{(.*)\}/);
        if (match !== null) {
          resolved = resolved.concat(inheritFields(match[1], which));
        } else if (allFields[fieldID]) {
          resolved.push(allFields[fieldID]);
        } else {
          console.log('Cannot resolve "'.concat(fieldID, '" found in ').concat(_this.id, ".").concat(which));
        }
      });
      if (!resolved.length) {
        var endIndex = _this.id.lastIndexOf("/");
        var parentID = endIndex && _this.id.substring(0, endIndex);
        if (parentID) {
          resolved = inheritFields(parentID, which);
        }
      }
      return utilArrayUniq(resolved);
      function inheritFields(presetID2, which2) {
        var parent2 = allPresets[presetID2];
        if (!parent2)
          return [];
        if (which2 === "fields") {
          return parent2.fields().filter(shouldInherit);
        } else if (which2 === "moreFields") {
          return parent2.moreFields();
        } else {
          return [];
        }
      }
      function shouldInherit(f2) {
        if (f2.key && _this.tags[f2.key] !== void 0 && f2.type !== "multiCombo" && f2.type !== "semiCombo" && f2.type !== "manyCombo" && f2.type !== "check")
          return false;
        return true;
      }
    }
    return _this;
  }

  // modules/presets/index.js
  var _mainPresetIndex = presetIndex();
  function presetIndex() {
    var dispatch12 = dispatch_default("favoritePreset", "recentsChange");
    var MAXRECENTS = 30;
    var POINT = presetPreset("point", {
      name: "Point",
      tags: {},
      geometry: ["point", "vertex"],
      matchScore: 0.1
    });
    var LINE = presetPreset("line", {
      name: "Line",
      tags: {},
      geometry: ["line"],
      matchScore: 0.1
    });
    var AREA = presetPreset("area", {
      name: "Area",
      tags: {
        area: "yes"
      },
      geometry: ["area"],
      matchScore: 0.1
    });
    var RELATION = presetPreset("relation", {
      name: "Relation",
      tags: {},
      geometry: ["relation"],
      matchScore: 0.1
    });
    var _this = presetCollection([POINT, LINE, AREA, RELATION]);
    var _presets = {
      point: POINT,
      line: LINE,
      area: AREA,
      relation: RELATION
    };
    var _defaults = {
      point: presetCollection([POINT]),
      vertex: presetCollection([POINT]),
      line: presetCollection([LINE]),
      area: presetCollection([AREA]),
      relation: presetCollection([RELATION])
    };
    var _fields = {};
    var _categories = {};
    var _universal = [];
    var _addablePresetIDs = null;
    var _recents;
    var _favorites;
    var _geometryIndex = {
      point: {},
      vertex: {},
      line: {},
      area: {},
      relation: {}
    };
    var _loadPromise;
    _this.ensureLoaded = function() {
      if (_loadPromise)
        return _loadPromise;
      return _loadPromise = Promise.all([_mainFileFetcher.get("preset_categories"), _mainFileFetcher.get("preset_defaults"), _mainFileFetcher.get("preset_presets"), _mainFileFetcher.get("preset_fields")]).then(function(vals) {
        _this.merge({
          categories: vals[0],
          defaults: vals[1],
          presets: vals[2],
          fields: vals[3]
        });
        osmSetAreaKeys(_this.areaKeys());
        osmSetPointTags(_this.pointTags());
        osmSetVertexTags(_this.vertexTags());
      });
    };
    _this.merge = function(d) {
      var newLocationSets = [];
      if (d.fields) {
        Object.keys(d.fields).forEach(function(fieldID) {
          var f2 = d.fields[fieldID];
          if (f2) {
            f2 = presetField(fieldID, f2);
            if (f2.locationSet)
              newLocationSets.push(f2);
            _fields[fieldID] = f2;
          } else {
            delete _fields[fieldID];
          }
        });
      }
      if (d.presets) {
        Object.keys(d.presets).forEach(function(presetID) {
          var p2 = d.presets[presetID];
          if (p2) {
            var isAddable = !_addablePresetIDs || _addablePresetIDs.has(presetID);
            p2 = presetPreset(presetID, p2, isAddable, _fields, _presets);
            if (p2.locationSet)
              newLocationSets.push(p2);
            _presets[presetID] = p2;
          } else {
            var existing = _presets[presetID];
            if (existing && !existing.isFallback()) {
              delete _presets[presetID];
            }
          }
        });
      }
      if (d.categories) {
        Object.keys(d.categories).forEach(function(categoryID) {
          var c2 = d.categories[categoryID];
          if (c2) {
            c2 = presetCategory(categoryID, c2, _presets);
            if (c2.locationSet)
              newLocationSets.push(c2);
            _categories[categoryID] = c2;
          } else {
            delete _categories[categoryID];
          }
        });
      }
      _this.collection = Object.values(_presets).concat(Object.values(_categories));
      if (d.defaults) {
        Object.keys(d.defaults).forEach(function(geometry6) {
          var def = d.defaults[geometry6];
          if (Array.isArray(def)) {
            _defaults[geometry6] = presetCollection(def.map(function(id2) {
              return _presets[id2] || _categories[id2];
            }).filter(Boolean));
          } else {
            delete _defaults[geometry6];
          }
        });
      }
      _universal = Object.values(_fields).filter(function(field) {
        return field.universal;
      });
      Object.values(_presets).forEach(function(preset) {
        return preset.resetFields();
      });
      _geometryIndex = {
        point: {},
        vertex: {},
        line: {},
        area: {},
        relation: {}
      };
      _this.collection.forEach(function(preset) {
        (preset.geometry || []).forEach(function(geometry6) {
          var g2 = _geometryIndex[geometry6];
          for (var key in preset.tags) {
            g2[key] = g2[key] || {};
            var value2 = preset.tags[key];
            (g2[key][value2] = g2[key][value2] || []).push(preset);
          }
        });
      });
      if (d.featureCollection && Array.isArray(d.featureCollection.features)) {
        _mainLocations.mergeCustomGeoJSON(d.featureCollection);
      }
      if (newLocationSets.length) {
        _mainLocations.mergeLocationSets(newLocationSets);
      }
      return _this;
    };
    _this.match = function(entity2, resolver) {
      return resolver.transient(entity2, "presetMatch", function() {
        var geometry6 = entity2.geometry(resolver);
        if (geometry6 === "vertex" && entity2.isOnAddressLine(resolver)) {
          geometry6 = "point";
        }
        var entityExtent = entity2.extent(resolver);
        return _this.matchTags(entity2.tags, geometry6, entityExtent.center());
      });
    };
    _this.matchTags = function(tags, geometry6, loc) {
      var keyIndex = _geometryIndex[geometry6];
      var bestScore = -1;
      var bestMatch;
      var matchCandidates = [];
      for (var k in tags) {
        var indexMatches = [];
        var valueIndex = keyIndex[k];
        if (!valueIndex)
          continue;
        var keyValueMatches = valueIndex[tags[k]];
        if (keyValueMatches)
          indexMatches.push.apply(indexMatches, _toConsumableArray(keyValueMatches));
        var keyStarMatches = valueIndex["*"];
        if (keyStarMatches)
          indexMatches.push.apply(indexMatches, _toConsumableArray(keyStarMatches));
        if (indexMatches.length === 0)
          continue;
        for (var i2 = 0; i2 < indexMatches.length; i2++) {
          var candidate = indexMatches[i2];
          var score = candidate.matchScore(tags);
          if (score === -1) {
            continue;
          }
          matchCandidates.push({
            score: score,
            candidate: candidate
          });
          if (score > bestScore) {
            bestScore = score;
            bestMatch = candidate;
          }
        }
      }
      if (bestMatch && bestMatch.locationSetID && bestMatch.locationSetID !== "+[Q2]" && Array.isArray(loc)) {
        var validLocations = _mainLocations.locationsAt(loc);
        if (!validLocations[bestMatch.locationSetID]) {
          matchCandidates.sort(function(a, b2) {
            return a.score < b2.score ? 1 : -1;
          });
          for (var _i = 0; _i < matchCandidates.length; _i++) {
            var candidateScore = matchCandidates[_i];
            if (!candidateScore.candidate.locationSetID || validLocations[candidateScore.candidate.locationSetID]) {
              bestMatch = candidateScore.candidate;
              bestScore = candidateScore.score;
              break;
            }
          }
        }
      }
      if (!bestMatch || bestMatch.isFallback()) {
        for (var _k in tags) {
          if (/^addr:/.test(_k) && keyIndex["addr:*"] && keyIndex["addr:*"]["*"]) {
            bestMatch = keyIndex["addr:*"]["*"][0];
            break;
          }
        }
      }
      return bestMatch || _this.fallback(geometry6);
    };
    _this.allowsVertex = function(entity2, resolver) {
      if (entity2.type !== "node")
        return false;
      if (Object.keys(entity2.tags).length === 0)
        return true;
      return resolver.transient(entity2, "vertexMatch", function() {
        if (entity2.isOnAddressLine(resolver))
          return true;
        var geometries = osmNodeGeometriesForTags(entity2.tags);
        if (geometries.vertex)
          return true;
        if (geometries.point)
          return false;
        return true;
      });
    };
    _this.areaKeys = function() {
      var ignore = ["barrier", "highway", "footway", "railway", "junction", "type"];
      var areaKeys = {};
      var presets = _this.collection.filter(function(p2) {
        return !p2.suggestion && !p2.replacement;
      });
      presets.forEach(function(p2) {
        var keys3 = p2.tags && Object.keys(p2.tags);
        var key = keys3 && keys3.length && keys3[0];
        if (!key)
          return;
        if (ignore.indexOf(key) !== -1)
          return;
        if (p2.geometry.indexOf("area") !== -1) {
          areaKeys[key] = areaKeys[key] || {};
        }
      });
      presets.forEach(function(p2) {
        var key;
        for (key in p2.addTags) {
          var value2 = p2.addTags[key];
          if (key in areaKeys && p2.geometry.indexOf("line") !== -1 && value2 !== "*") {
            areaKeys[key][value2] = true;
          }
        }
      });
      return areaKeys;
    };
    _this.pointTags = function() {
      return _this.collection.reduce(function(pointTags, d) {
        if (d.suggestion || d.replacement || d.searchable === false)
          return pointTags;
        var keys3 = d.tags && Object.keys(d.tags);
        var key = keys3 && keys3.length && keys3[0];
        if (!key)
          return pointTags;
        if (d.geometry.indexOf("point") !== -1) {
          pointTags[key] = pointTags[key] || {};
          pointTags[key][d.tags[key]] = true;
        }
        return pointTags;
      }, {});
    };
    _this.vertexTags = function() {
      return _this.collection.reduce(function(vertexTags, d) {
        if (d.suggestion || d.replacement || d.searchable === false)
          return vertexTags;
        var keys3 = d.tags && Object.keys(d.tags);
        var key = keys3 && keys3.length && keys3[0];
        if (!key)
          return vertexTags;
        if (d.geometry.indexOf("vertex") !== -1) {
          vertexTags[key] = vertexTags[key] || {};
          vertexTags[key][d.tags[key]] = true;
        }
        return vertexTags;
      }, {});
    };
    _this.field = function(id2) {
      return _fields[id2];
    };
    _this.universal = function() {
      return _universal;
    };
    _this.defaults = function(geometry6, n2, startWithRecents, loc) {
      var recents = [];
      if (startWithRecents) {
        recents = _this.recent().matchGeometry(geometry6).collection.slice(0, 4);
      }
      var defaults;
      if (_addablePresetIDs) {
        defaults = Array.from(_addablePresetIDs).map(function(id2) {
          var preset = _this.item(id2);
          if (preset && preset.matchGeometry(geometry6))
            return preset;
          return null;
        }).filter(Boolean);
      } else {
        defaults = _defaults[geometry6].collection.concat(_this.fallback(geometry6));
      }
      var result6 = presetCollection(utilArrayUniq(recents.concat(defaults)).slice(0, n2 - 1));
      if (Array.isArray(loc)) {
        var validLocations = _mainLocations.locationsAt(loc);
        result6.collection = result6.collection.filter(function(a) {
          return !a.locationSetID || validLocations[a.locationSetID];
        });
      }
      return result6;
    };
    _this.addablePresetIDs = function(val) {
      if (!arguments.length)
        return _addablePresetIDs;
      if (Array.isArray(val))
        val = new Set(val);
      _addablePresetIDs = val;
      if (_addablePresetIDs) {
        _this.collection.forEach(function(p2) {
          if (p2.addable)
            p2.addable(_addablePresetIDs.has(p2.id));
        });
      } else {
        _this.collection.forEach(function(p2) {
          if (p2.addable)
            p2.addable(true);
        });
      }
      return _this;
    };
    _this.recent = function() {
      return presetCollection(utilArrayUniq(_this.getRecents().map(function(d) {
        return d.preset;
      })));
    };
    function RibbonItem(preset, source) {
      var item = {};
      item.preset = preset;
      item.source = source;
      item.isFavorite = function() {
        return item.source === "favorite";
      };
      item.isRecent = function() {
        return item.source === "recent";
      };
      item.matches = function(preset2) {
        return item.preset.id === preset2.id;
      };
      item.minified = function() {
        return {
          pID: item.preset.id
        };
      };
      return item;
    }
    function ribbonItemForMinified(d, source) {
      if (d && d.pID) {
        var preset = _this.item(d.pID);
        if (!preset)
          return null;
        return RibbonItem(preset, source);
      }
      return null;
    }
    _this.getGenericRibbonItems = function() {
      return ["point", "line", "area"].map(function(id2) {
        return RibbonItem(_this.item(id2), "generic");
      });
    };
    _this.getAddable = function() {
      if (!_addablePresetIDs)
        return [];
      return _addablePresetIDs.map(function(id2) {
        var preset = _this.item(id2);
        if (preset)
          return RibbonItem(preset, "addable");
        return null;
      }).filter(Boolean);
    };
    function setRecents(items) {
      _recents = items;
      var minifiedItems = items.map(function(d) {
        return d.minified();
      });
      corePreferences("preset_recents", JSON.stringify(minifiedItems));
      dispatch12.call("recentsChange");
    }
    _this.getRecents = function() {
      if (!_recents) {
        _recents = (JSON.parse(corePreferences("preset_recents")) || []).reduce(function(acc, d) {
          var item = ribbonItemForMinified(d, "recent");
          if (item && item.preset.addable())
            acc.push(item);
          return acc;
        }, []);
      }
      return _recents;
    };
    _this.addRecent = function(preset, besidePreset, after) {
      var recents = _this.getRecents();
      var beforeItem = _this.recentMatching(besidePreset);
      var toIndex = recents.indexOf(beforeItem);
      if (after)
        toIndex += 1;
      var newItem = RibbonItem(preset, "recent");
      recents.splice(toIndex, 0, newItem);
      setRecents(recents);
    };
    _this.removeRecent = function(preset) {
      var item = _this.recentMatching(preset);
      if (item) {
        var items = _this.getRecents();
        items.splice(items.indexOf(item), 1);
        setRecents(items);
      }
    };
    _this.recentMatching = function(preset) {
      var items = _this.getRecents();
      for (var i2 in items) {
        if (items[i2].matches(preset)) {
          return items[i2];
        }
      }
      return null;
    };
    _this.moveItem = function(items, fromIndex, toIndex) {
      if (fromIndex === toIndex || fromIndex < 0 || toIndex < 0 || fromIndex >= items.length || toIndex >= items.length)
        return null;
      items.splice(toIndex, 0, items.splice(fromIndex, 1)[0]);
      return items;
    };
    _this.moveRecent = function(item, beforeItem) {
      var recents = _this.getRecents();
      var fromIndex = recents.indexOf(item);
      var toIndex = recents.indexOf(beforeItem);
      var items = _this.moveItem(recents, fromIndex, toIndex);
      if (items)
        setRecents(items);
    };
    _this.setMostRecent = function(preset) {
      if (preset.searchable === false)
        return;
      var items = _this.getRecents();
      var item = _this.recentMatching(preset);
      if (item) {
        items.splice(items.indexOf(item), 1);
      } else {
        item = RibbonItem(preset, "recent");
      }
      while (items.length >= MAXRECENTS) {
        items.pop();
      }
      items.unshift(item);
      setRecents(items);
    };
    function setFavorites(items) {
      _favorites = items;
      var minifiedItems = items.map(function(d) {
        return d.minified();
      });
      corePreferences("preset_favorites", JSON.stringify(minifiedItems));
      dispatch12.call("favoritePreset");
    }
    _this.addFavorite = function(preset, besidePreset, after) {
      var favorites = _this.getFavorites();
      var beforeItem = _this.favoriteMatching(besidePreset);
      var toIndex = favorites.indexOf(beforeItem);
      if (after)
        toIndex += 1;
      var newItem = RibbonItem(preset, "favorite");
      favorites.splice(toIndex, 0, newItem);
      setFavorites(favorites);
    };
    _this.toggleFavorite = function(preset) {
      var favs = _this.getFavorites();
      var favorite = _this.favoriteMatching(preset);
      if (favorite) {
        favs.splice(favs.indexOf(favorite), 1);
      } else {
        if (favs.length === 10) {
          favs.pop();
        }
        favs.push(RibbonItem(preset, "favorite"));
      }
      setFavorites(favs);
    };
    _this.removeFavorite = function(preset) {
      var item = _this.favoriteMatching(preset);
      if (item) {
        var items = _this.getFavorites();
        items.splice(items.indexOf(item), 1);
        setFavorites(items);
      }
    };
    _this.getFavorites = function() {
      if (!_favorites) {
        var rawFavorites = JSON.parse(corePreferences("preset_favorites"));
        if (!rawFavorites) {
          rawFavorites = [];
          corePreferences("preset_favorites", JSON.stringify(rawFavorites));
        }
        _favorites = rawFavorites.reduce(function(output4, d) {
          var item = ribbonItemForMinified(d, "favorite");
          if (item && item.preset.addable())
            output4.push(item);
          return output4;
        }, []);
      }
      return _favorites;
    };
    _this.favoriteMatching = function(preset) {
      var favs = _this.getFavorites();
      for (var index in favs) {
        if (favs[index].matches(preset)) {
          return favs[index];
        }
      }
      return null;
    };
    return utilRebind(_this, dispatch12, "on");
  }

  // modules/util/util.js
  function utilTotalExtent(array2, graph3) {
    return array2.reduce(function(extent6, val) {
      var entity2 = typeof val === "string" ? graph3.hasEntity(val) : val;
      if (entity2) {
        var other = entity2.extent(graph3);
        extent6.min = [Math.min(extent6.min[0], other.min[0]), Math.min(extent6.min[1], other.min[1])];
        extent6.max = [Math.max(extent6.max[0], other.max[0]), Math.max(extent6.max[1], other.max[1])];
      }
      return extent6;
    }, new Extent());
  }
  function utilHighlightEntities(ids, highlighted, context) {
    context.surface().selectAll(utilEntityOrDeepMemberSelector(ids, context.graph())).classed("highlighted", highlighted);
  }
  function utilDisplayName(entity2, hideNetwork) {
    var localizedNameKey = "name:" + _mainLocalizer.languageCode().toLowerCase();
    var name = entity2.tags[localizedNameKey] || entity2.tags.name || "";
    var tags = {
      name: name,
      direction: entity2.tags.direction,
      from: entity2.tags.from,
      network: hideNetwork ? void 0 : entity2.tags.cycle_network || entity2.tags.network,
      ref: entity2.tags.ref,
      to: entity2.tags.to,
      via: entity2.tags.via
    };
    if (name && tags.ref && entity2.tags.route) {
      return tags.network ? _t("inspector.display_name.network_ref_name", tags) : _t("inspector.display_name.ref_name", tags);
    }
    if (name)
      return name;
    var keyComponents = [];
    if (tags.network) {
      keyComponents.push("network");
    }
    if (tags.ref) {
      keyComponents.push("ref");
    }
    if (entity2.tags.route) {
      if (tags.direction) {
        keyComponents.push("direction");
      } else if (tags.from && tags.to) {
        keyComponents.push("from");
        keyComponents.push("to");
        if (tags.via) {
          keyComponents.push("via");
        }
      }
    }
    if (keyComponents.length) {
      name = _t("inspector.display_name." + keyComponents.join("_"), tags);
    }
    if (!name && entity2.tags["addr:housename"]) {
      name = entity2.tags["addr:housename"];
    }
    if (!name && entity2.tags["ref:linz:address_id"]) {
      name = "".concat(entity2.tags["addr:housenumber"], " ").concat(entity2.tags["addr:street"], " \uD83E\uDD5D ").concat(entity2.tags["ref:linz:address_id"]);
    }
    if (!name && entity2.tags["addr:housenumber"] && entity2.tags["addr:street"]) {
      name = entity2.tags["addr:housenumber"] + " " + entity2.tags["addr:street"] + " \u274C NO REF";
    }
    return name;
  }
  function utilDisplayNameForPath(entity2) {
    var name = utilDisplayName(entity2);
    var isFirefox = utilDetect().browser.toLowerCase().indexOf("firefox") > -1;
    var isNewChromium = Number(utilDetect().version.split(".")[0]) >= 96;
    if (!isFirefox && !isNewChromium && name && rtlRegex.test(name)) {
      name = fixRTLTextForSvg(name);
    }
    return name;
  }
  function utilDisplayType(id2) {
    return {
      n: _t("inspector.node"),
      w: _t("inspector.way"),
      r: _t("inspector.relation")
    }[id2.charAt(0)];
  }
  function utilDisplayLabel(entity2, graphOrGeometry, verbose) {
    var result6;
    var displayName = utilDisplayName(entity2);
    var preset = typeof graphOrGeometry === "string" ? _mainPresetIndex.matchTags(entity2.tags, graphOrGeometry) : _mainPresetIndex.match(entity2, graphOrGeometry);
    var presetName = preset && (preset.suggestion ? preset.subtitle() : preset.name());
    if (verbose) {
      result6 = [presetName, displayName].filter(Boolean).join(" ");
    } else {
      result6 = displayName || presetName;
    }
    return result6 || utilDisplayType(entity2.id);
  }
  function utilPrefixDOMProperty(property) {
    var prefixes2 = ["webkit", "ms", "moz", "o"];
    var i2 = -1;
    var n2 = prefixes2.length;
    var s = document.body;
    if (property in s)
      return property;
    property = property.substr(0, 1).toUpperCase() + property.substr(1);
    while (++i2 < n2) {
      if (prefixes2[i2] + property in s) {
        return prefixes2[i2] + property;
      }
    }
    return false;
  }
  function utilPrefixCSSProperty(property) {
    var prefixes2 = ["webkit", "ms", "Moz", "O"];
    var i2 = -1;
    var n2 = prefixes2.length;
    var s = document.body.style;
    if (property.toLowerCase() in s) {
      return property.toLowerCase();
    }
    while (++i2 < n2) {
      if (prefixes2[i2] + property in s) {
        return "-" + prefixes2[i2].toLowerCase() + property.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
    return false;
  }
  var transformProperty;
  function utilSetTransform(el, x2, y, scale2) {
    var prop = transformProperty = transformProperty || utilPrefixCSSProperty("Transform");
    var translate2 = utilDetect().opera ? "translate(" + x2 + "px," + y + "px)" : "translate3d(" + x2 + "px," + y + "px,0)";
    return el.style(prop, translate2 + (scale2 ? " scale(" + scale2 + ")" : ""));
  }
  function utilFastMouse(container) {
    var rect = container.getBoundingClientRect();
    var rectLeft = rect.left;
    var rectTop = rect.top;
    var clientLeft = +container.clientLeft;
    var clientTop = +container.clientTop;
    return function(e3) {
      return [e3.clientX - rectLeft - clientLeft, e3.clientY - rectTop - clientTop];
    };
  }
  function utilAsyncMap(inputs, func, callback) {
    var remaining = inputs.length;
    var results = [];
    var errors = [];
    inputs.forEach(function(d, i2) {
      func(d, function done(err, data2) {
        errors[i2] = err;
        results[i2] = data2;
        remaining--;
        if (!remaining)
          callback(errors, results);
      });
    });
  }
  function utilWrap(index, length) {
    if (index < 0) {
      index += Math.ceil(-index / length) * length;
    }
    return index % length;
  }
  function utilFunctor(value2) {
    if (typeof value2 === "function")
      return value2;
    return function() {
      return value2;
    };
  }
  function utilNoAuto(selection2) {
    var isText = selection2.size() && selection2.node().tagName.toLowerCase() === "textarea";
    return selection2.attr("autocomplete", "new-password").attr("autocorrect", "off").attr("autocapitalize", "off").attr("spellcheck", isText ? "true" : "false");
  }

  // modules/util/get_set_value.js
  function utilGetSetValue(selection2, value2) {
    function d3_selection_value(value3) {
      function valueNull() {
        delete this.value;
      }
      function valueConstant() {
        if (this.value !== value3) {
          this.value = value3;
        }
      }
      function valueFunction() {
        var x2 = value3.apply(this, arguments);
        if (x2 === null || x2 === void 0) {
          delete this.value;
        } else if (this.value !== x2) {
          this.value = x2;
        }
      }
      return value3 === null || value3 === void 0 ? valueNull : typeof value3 === "function" ? valueFunction : valueConstant;
    }
    if (arguments.length === 1) {
      return selection2.property("value");
    }
    return selection2.each(d3_selection_value(value2));
  }

  // modules/util/keybinding.js
  function utilKeybinding(namespace) {
    var _keybindings = {};
    function testBindings(d3_event, isCapturing) {
      var didMatch = false;
      var bindings = Object.keys(_keybindings).map(function(id2) {
        return _keybindings[id2];
      });
      var i2, binding;
      for (i2 = 0; i2 < bindings.length; i2++) {
        binding = bindings[i2];
        if (!binding.event.modifiers.shiftKey)
          continue;
        if (!!binding.capture !== isCapturing)
          continue;
        if (matches(d3_event, binding, true)) {
          binding.callback(d3_event);
          didMatch = true;
          break;
        }
      }
      if (didMatch)
        return;
      for (i2 = 0; i2 < bindings.length; i2++) {
        binding = bindings[i2];
        if (binding.event.modifiers.shiftKey)
          continue;
        if (!!binding.capture !== isCapturing)
          continue;
        if (matches(d3_event, binding, false)) {
          binding.callback(d3_event);
          break;
        }
      }
      function matches(d3_event2, binding2, testShift) {
        var event = d3_event2;
        var isMatch = false;
        var tryKeyCode = true;
        if (event.key !== void 0) {
          tryKeyCode = event.key.charCodeAt(0) > 255;
          isMatch = true;
          if (binding2.event.key === void 0) {
            isMatch = false;
          } else if (Array.isArray(binding2.event.key)) {
            if (binding2.event.key.map(function(s) {
              return s.toLowerCase();
            }).indexOf(event.key.toLowerCase()) === -1) {
              isMatch = false;
            }
          } else {
            if (event.key.toLowerCase() !== binding2.event.key.toLowerCase()) {
              isMatch = false;
            }
          }
        }
        if (!isMatch && tryKeyCode) {
          isMatch = event.keyCode === binding2.event.keyCode;
        }
        if (!isMatch)
          return false;
        if (!(event.ctrlKey && event.altKey)) {
          if (event.ctrlKey !== binding2.event.modifiers.ctrlKey)
            return false;
          if (event.altKey !== binding2.event.modifiers.altKey)
            return false;
        }
        if (event.metaKey !== binding2.event.modifiers.metaKey)
          return false;
        if (testShift && event.shiftKey !== binding2.event.modifiers.shiftKey)
          return false;
        return true;
      }
    }
    function capture(d3_event) {
      testBindings(d3_event, true);
    }
    function bubble(d3_event) {
      var tagName = select_default2(d3_event.target).node().tagName;
      if (tagName === "INPUT" || tagName === "SELECT" || tagName === "TEXTAREA") {
        return;
      }
      testBindings(d3_event, false);
    }
    function keybinding(selection2) {
      selection2 = selection2 || select_default2(document);
      selection2.on("keydown.capture." + namespace, capture, true);
      selection2.on("keydown.bubble." + namespace, bubble, false);
      return keybinding;
    }
    keybinding.unbind = function(selection2) {
      _keybindings = [];
      selection2 = selection2 || select_default2(document);
      selection2.on("keydown.capture." + namespace, null);
      selection2.on("keydown.bubble." + namespace, null);
      return keybinding;
    };
    keybinding.clear = function() {
      _keybindings = {};
      return keybinding;
    };
    keybinding.off = function(codes, capture2) {
      var arr = utilArrayUniq([].concat(codes));
      for (var i2 = 0; i2 < arr.length; i2++) {
        var id2 = arr[i2] + (capture2 ? "-capture" : "-bubble");
        delete _keybindings[id2];
      }
      return keybinding;
    };
    keybinding.on = function(codes, callback, capture2) {
      if (typeof callback !== "function") {
        return keybinding.off(codes, capture2);
      }
      var arr = utilArrayUniq([].concat(codes));
      for (var i2 = 0; i2 < arr.length; i2++) {
        var id2 = arr[i2] + (capture2 ? "-capture" : "-bubble");
        var binding = {
          id: id2,
          capture: capture2,
          callback: callback,
          event: {
            key: void 0,
            keyCode: 0,
            modifiers: {
              shiftKey: false,
              ctrlKey: false,
              altKey: false,
              metaKey: false
            }
          }
        };
        if (_keybindings[id2]) {
          console.warn('warning: duplicate keybinding for "' + id2 + '"');
        }
        _keybindings[id2] = binding;
        var matches = arr[i2].toLowerCase().match(/(?:(?:[^+⇧⌃⌥⌘])+|[⇧⌃⌥⌘]|\+\+|^\+$)/g);
        for (var j = 0; j < matches.length; j++) {
          if (matches[j] === "++")
            matches[j] = "+";
          if (matches[j] in utilKeybinding.modifierCodes) {
            var prop = utilKeybinding.modifierProperties[utilKeybinding.modifierCodes[matches[j]]];
            binding.event.modifiers[prop] = true;
          } else {
            binding.event.key = utilKeybinding.keys[matches[j]] || matches[j];
            if (matches[j] in utilKeybinding.keyCodes) {
              binding.event.keyCode = utilKeybinding.keyCodes[matches[j]];
            }
          }
        }
      }
      return keybinding;
    };
    return keybinding;
  }
  utilKeybinding.modifierCodes = {
    "\u21E7": 16,
    shift: 16,
    "\u2303": 17,
    ctrl: 17,
    "\u2325": 18,
    alt: 18,
    option: 18,
    "\u2318": 91,
    meta: 91,
    cmd: 91,
    "super": 91,
    win: 91
  };
  utilKeybinding.modifierProperties = {
    16: "shiftKey",
    17: "ctrlKey",
    18: "altKey",
    91: "metaKey"
  };
  utilKeybinding.plusKeys = ["plus", "ffplus", "=", "ffequals", "\u2260", "\xB1"];
  utilKeybinding.minusKeys = ["_", "-", "ffminus", "dash", "\u2013", "\u2014"];
  utilKeybinding.keys = {
    "\u232B": "Backspace",
    backspace: "Backspace",
    "\u21E5": "Tab",
    "\u21C6": "Tab",
    tab: "Tab",
    "\u21A9": "Enter",
    "\u21B5": "Enter",
    "\u23CE": "Enter",
    "return": "Enter",
    enter: "Enter",
    "\u2305": "Enter",
    "pause": "Pause",
    "pause-break": "Pause",
    "\u21EA": "CapsLock",
    caps: "CapsLock",
    "caps-lock": "CapsLock",
    "\u238B": ["Escape", "Esc"],
    escape: ["Escape", "Esc"],
    esc: ["Escape", "Esc"],
    space: [" ", "Spacebar"],
    "\u2196": "PageUp",
    pgup: "PageUp",
    "page-up": "PageUp",
    "\u2198": "PageDown",
    pgdown: "PageDown",
    "page-down": "PageDown",
    "\u21DF": "End",
    end: "End",
    "\u21DE": "Home",
    home: "Home",
    ins: "Insert",
    insert: "Insert",
    "\u2326": ["Delete", "Del"],
    del: ["Delete", "Del"],
    "delete": ["Delete", "Del"],
    "\u2190": ["ArrowLeft", "Left"],
    left: ["ArrowLeft", "Left"],
    "arrow-left": ["ArrowLeft", "Left"],
    "\u2191": ["ArrowUp", "Up"],
    up: ["ArrowUp", "Up"],
    "arrow-up": ["ArrowUp", "Up"],
    "\u2192": ["ArrowRight", "Right"],
    right: ["ArrowRight", "Right"],
    "arrow-right": ["ArrowRight", "Right"],
    "\u2193": ["ArrowDown", "Down"],
    down: ["ArrowDown", "Down"],
    "arrow-down": ["ArrowDown", "Down"],
    "*": ["*", "Multiply"],
    star: ["*", "Multiply"],
    asterisk: ["*", "Multiply"],
    multiply: ["*", "Multiply"],
    "+": ["+", "Add"],
    "plus": ["+", "Add"],
    "-": ["-", "Subtract"],
    subtract: ["-", "Subtract"],
    "dash": ["-", "Subtract"],
    semicolon: ";",
    equals: "=",
    comma: ",",
    period: ".",
    "full-stop": ".",
    slash: "/",
    "forward-slash": "/",
    tick: "`",
    "back-quote": "`",
    "open-bracket": "[",
    "back-slash": "\\",
    "close-bracket": "]",
    quote: "'",
    apostrophe: "'",
    "num-0": "0",
    "num-1": "1",
    "num-2": "2",
    "num-3": "3",
    "num-4": "4",
    "num-5": "5",
    "num-6": "6",
    "num-7": "7",
    "num-8": "8",
    "num-9": "9",
    f1: "F1",
    f2: "F2",
    f3: "F3",
    f4: "F4",
    f5: "F5",
    f6: "F6",
    f7: "F7",
    f8: "F8",
    f9: "F9",
    f10: "F10",
    f11: "F11",
    f12: "F12",
    f13: "F13",
    f14: "F14",
    f15: "F15",
    f16: "F16",
    f17: "F17",
    f18: "F18",
    f19: "F19",
    f20: "F20",
    f21: "F21",
    f22: "F22",
    f23: "F23",
    f24: "F24",
    f25: "F25"
  };
  utilKeybinding.keyCodes = {
    "\u232B": 8,
    backspace: 8,
    "\u21E5": 9,
    "\u21C6": 9,
    tab: 9,
    "\u21A9": 13,
    "\u21B5": 13,
    "\u23CE": 13,
    "return": 13,
    enter: 13,
    "\u2305": 13,
    "pause": 19,
    "pause-break": 19,
    "\u21EA": 20,
    caps: 20,
    "caps-lock": 20,
    "\u238B": 27,
    escape: 27,
    esc: 27,
    space: 32,
    "\u2196": 33,
    pgup: 33,
    "page-up": 33,
    "\u2198": 34,
    pgdown: 34,
    "page-down": 34,
    "\u21DF": 35,
    end: 35,
    "\u21DE": 36,
    home: 36,
    ins: 45,
    insert: 45,
    "\u2326": 46,
    del: 46,
    "delete": 46,
    "\u2190": 37,
    left: 37,
    "arrow-left": 37,
    "\u2191": 38,
    up: 38,
    "arrow-up": 38,
    "\u2192": 39,
    right: 39,
    "arrow-right": 39,
    "\u2193": 40,
    down: 40,
    "arrow-down": 40,
    "ffequals": 61,
    "*": 106,
    star: 106,
    asterisk: 106,
    multiply: 106,
    "+": 107,
    "plus": 107,
    "-": 109,
    subtract: 109,
    "|": 124,
    "ffplus": 171,
    "ffminus": 173,
    ";": 186,
    semicolon: 186,
    "=": 187,
    "equals": 187,
    ",": 188,
    comma: 188,
    "dash": 189,
    ".": 190,
    period: 190,
    "full-stop": 190,
    "/": 191,
    slash: 191,
    "forward-slash": 191,
    "`": 192,
    tick: 192,
    "back-quote": 192,
    "[": 219,
    "open-bracket": 219,
    "\\": 220,
    "back-slash": 220,
    "]": 221,
    "close-bracket": 221,
    "'": 222,
    quote: 222,
    apostrophe: 222
  };
  var i = 95;
  var n = 0;
  while (++i < 106) {
    utilKeybinding.keyCodes["num-" + n] = i;
    ++n;
  }
  i = 47;
  n = 0;
  while (++i < 58) {
    utilKeybinding.keyCodes[n] = i;
    ++n;
  }
  i = 111;
  n = 1;
  while (++i < 136) {
    utilKeybinding.keyCodes["f" + n] = i;
    ++n;
  }
  i = 64;
  while (++i < 91) {
    utilKeybinding.keyCodes[String.fromCharCode(i).toLowerCase()] = i;
  }

  // modules/util/rebind.js
  function utilRebind(target, source) {
    var i2 = 1, n2 = arguments.length, method;
    while (++i2 < n2) {
      target[method = arguments[i2]] = d3_rebind(target, source, source[method]);
    }
    return target;
  }
  function d3_rebind(target, source, method) {
    return function() {
      var value2 = method.apply(source, arguments);
      return value2 === source ? target : value2;
    };
  }

  // modules/util/trigger_event.js
  function utilTriggerEvent(target, type3) {
    target.each(function() {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type3, true, true);
      this.dispatchEvent(evt);
    });
  }

  // modules/osm/way.js
  function osmWay() {
    if (!(this instanceof osmWay)) {
      return new osmWay().initialize(arguments);
    } else if (arguments.length) {
      this.initialize(arguments);
    }
  }
  osmEntity.way = osmWay;
  osmWay.prototype = Object.create(osmEntity.prototype);
  Object.assign(osmWay.prototype, {
    type: "way",
    nodes: [],
    copy: function copy4(resolver, copies) {
      if (copies[this.id])
        return copies[this.id];
      var copy7 = osmEntity.prototype.copy.call(this, resolver, copies);
      var nodes = this.nodes.map(function(id2) {
        return resolver.entity(id2).copy(resolver, copies).id;
      });
      copy7 = copy7.update({
        nodes: nodes
      });
      copies[this.id] = copy7;
      return copy7;
    },
    extent: function extent(resolver) {
      return resolver.transient(this, "extent", function() {
        return utilTotalExtent(this.nodes, resolver);
      });
    },
    first: function first() {
      return this.nodes[0];
    },
    last: function last() {
      return this.nodes[this.nodes.length - 1];
    },
    contains: function contains2(node) {
      return this.nodes.indexOf(node) >= 0;
    },
    affix: function affix(node) {
      if (this.nodes[0] === node)
        return "prefix";
      if (this.nodes[this.nodes.length - 1] === node)
        return "suffix";
    },
    layer: function layer() {
      if (isFinite(this.tags.layer)) {
        return Math.max(-10, Math.min(+this.tags.layer, 10));
      }
      if (this.tags.covered === "yes")
        return -1;
      if (this.tags.location === "overground")
        return 1;
      if (this.tags.location === "underground")
        return -1;
      if (this.tags.location === "underwater")
        return -10;
      if (this.tags.power === "line")
        return 10;
      if (this.tags.power === "minor_line")
        return 10;
      if (this.tags.aerialway)
        return 10;
      if (this.tags.bridge)
        return 1;
      if (this.tags.cutting)
        return -1;
      if (this.tags.tunnel)
        return -1;
      if (this.tags.waterway)
        return -1;
      if (this.tags.man_made === "pipeline")
        return -10;
      if (this.tags.boundary)
        return -10;
      return 0;
    },
    impliedLineWidthMeters: function impliedLineWidthMeters() {
      var averageWidths = {
        highway: {
          motorway: 5,
          motorway_link: 5,
          trunk: 4.5,
          trunk_link: 4.5,
          primary: 4,
          secondary: 4,
          tertiary: 4,
          primary_link: 4,
          secondary_link: 4,
          tertiary_link: 4,
          unclassified: 4,
          road: 4,
          living_street: 4,
          bus_guideway: 4,
          pedestrian: 4,
          residential: 3.5,
          service: 3.5,
          track: 3,
          cycleway: 2.5,
          bridleway: 2,
          corridor: 2,
          steps: 2,
          path: 1.5,
          footway: 1.5
        },
        railway: {
          rail: 2.5,
          light_rail: 2.5,
          tram: 2.5,
          subway: 2.5,
          monorail: 2.5,
          funicular: 2.5,
          disused: 2.5,
          preserved: 2.5,
          miniature: 1.5,
          narrow_gauge: 1.5
        },
        waterway: {
          river: 50,
          canal: 25,
          stream: 5,
          tidal_channel: 5,
          fish_pass: 2.5,
          drain: 2.5,
          ditch: 1.5
        }
      };
      for (var key in averageWidths) {
        if (this.tags[key] && averageWidths[key][this.tags[key]]) {
          var width = averageWidths[key][this.tags[key]];
          if (key === "highway") {
            var laneCount = this.tags.lanes && parseInt(this.tags.lanes, 10);
            if (!laneCount)
              laneCount = this.isOneWay() ? 1 : 2;
            return width * laneCount;
          }
          return width;
        }
      }
      return null;
    },
    isOneWay: function isOneWay() {
      var values2 = {
        "yes": true,
        "1": true,
        "-1": true,
        "reversible": true,
        "alternating": true,
        "no": false,
        "0": false
      };
      if (values2[this.tags.oneway] !== void 0) {
        return values2[this.tags.oneway];
      }
      for (var key in this.tags) {
        if (key in osmOneWayTags && this.tags[key] in osmOneWayTags[key]) {
          return true;
        }
      }
      return false;
    },
    sidednessIdentifier: function sidednessIdentifier() {
      for (var key in this.tags) {
        var value2 = this.tags[key];
        if (key in osmRightSideIsInsideTags && value2 in osmRightSideIsInsideTags[key]) {
          if (osmRightSideIsInsideTags[key][value2] === true) {
            return key;
          } else {
            return osmRightSideIsInsideTags[key][value2];
          }
        }
      }
      return null;
    },
    isSided: function isSided() {
      if (this.tags.two_sided === "yes") {
        return false;
      }
      return this.sidednessIdentifier() !== null;
    },
    lanes: function lanes() {
      return osmLanes(this);
    },
    isClosed: function isClosed() {
      return this.nodes.length > 1 && this.first() === this.last();
    },
    isConvex: function isConvex(resolver) {
      if (!this.isClosed() || this.isDegenerate())
        return null;
      var nodes = utilArrayUniq(resolver.childNodes(this));
      var coords = nodes.map(function(n2) {
        return n2.loc;
      });
      var curr = 0;
      var prev = 0;
      for (var i2 = 0; i2 < coords.length; i2++) {
        var o2 = coords[(i2 + 1) % coords.length];
        var a = coords[i2];
        var b2 = coords[(i2 + 2) % coords.length];
        var res = vecCross(a, b2, o2);
        curr = res > 0 ? 1 : res < 0 ? -1 : 0;
        if (curr === 0) {
          continue;
        } else if (prev && curr !== prev) {
          return false;
        }
        prev = curr;
      }
      return true;
    },
    tagSuggestingArea: function tagSuggestingArea() {
      return osmTagSuggestingArea(this.tags);
    },
    isArea: function isArea() {
      if (this.tags.area === "yes")
        return true;
      if (!this.isClosed() || this.tags.area === "no")
        return false;
      return this.tagSuggestingArea() !== null;
    },
    isDegenerate: function isDegenerate2() {
      return new Set(this.nodes).size < (this.isArea() ? 3 : 2);
    },
    areAdjacent: function areAdjacent(n1, n2) {
      for (var i2 = 0; i2 < this.nodes.length; i2++) {
        if (this.nodes[i2] === n1) {
          if (this.nodes[i2 - 1] === n2)
            return true;
          if (this.nodes[i2 + 1] === n2)
            return true;
        }
      }
      return false;
    },
    geometry: function geometry(graph3) {
      return graph3.transient(this, "geometry", function() {
        return this.isArea() ? "area" : "line";
      });
    },
    segments: function segments(graph3) {
      function segmentExtent(graph4) {
        var n1 = graph4.hasEntity(this.nodes[0]);
        var n2 = graph4.hasEntity(this.nodes[1]);
        return n1 && n2 && new Extent([Math.min(n1.loc[0], n2.loc[0]), Math.min(n1.loc[1], n2.loc[1])], [Math.max(n1.loc[0], n2.loc[0]), Math.max(n1.loc[1], n2.loc[1])]);
      }
      return graph3.transient(this, "segments", function() {
        var segments2 = [];
        for (var i2 = 0; i2 < this.nodes.length - 1; i2++) {
          segments2.push({
            id: this.id + "-" + i2,
            wayId: this.id,
            index: i2,
            nodes: [this.nodes[i2], this.nodes[i2 + 1]],
            extent: segmentExtent
          });
        }
        return segments2;
      });
    },
    close: function close() {
      if (this.isClosed() || !this.nodes.length)
        return this;
      var nodes = this.nodes.slice();
      nodes = nodes.filter(noRepeatNodes);
      nodes.push(nodes[0]);
      return this.update({
        nodes: nodes
      });
    },
    unclose: function unclose() {
      if (!this.isClosed())
        return this;
      var nodes = this.nodes.slice();
      var connector = this.first();
      var i2 = nodes.length - 1;
      while (i2 > 0 && nodes.length > 1 && nodes[i2] === connector) {
        nodes.splice(i2, 1);
        i2 = nodes.length - 1;
      }
      nodes = nodes.filter(noRepeatNodes);
      return this.update({
        nodes: nodes
      });
    },
    addNode: function addNode(id2, index) {
      var nodes = this.nodes.slice();
      var isClosed2 = this.isClosed();
      var max2 = isClosed2 ? nodes.length - 1 : nodes.length;
      if (index === void 0) {
        index = max2;
      }
      if (index < 0 || index > max2) {
        throw new RangeError("index " + index + " out of range 0.." + max2);
      }
      if (isClosed2) {
        var connector = this.first();
        var i2 = 1;
        while (i2 < nodes.length && nodes.length > 2 && nodes[i2] === connector) {
          nodes.splice(i2, 1);
          if (index > i2)
            index--;
        }
        i2 = nodes.length - 1;
        while (i2 > 0 && nodes.length > 1 && nodes[i2] === connector) {
          nodes.splice(i2, 1);
          if (index > i2)
            index--;
          i2 = nodes.length - 1;
        }
      }
      nodes.splice(index, 0, id2);
      nodes = nodes.filter(noRepeatNodes);
      if (isClosed2 && (nodes.length === 1 || nodes[0] !== nodes[nodes.length - 1])) {
        nodes.push(nodes[0]);
      }
      return this.update({
        nodes: nodes
      });
    },
    updateNode: function updateNode(id2, index) {
      var nodes = this.nodes.slice();
      var isClosed2 = this.isClosed();
      var max2 = nodes.length - 1;
      if (index === void 0 || index < 0 || index > max2) {
        throw new RangeError("index " + index + " out of range 0.." + max2);
      }
      if (isClosed2) {
        var connector = this.first();
        var i2 = 1;
        while (i2 < nodes.length && nodes.length > 2 && nodes[i2] === connector) {
          nodes.splice(i2, 1);
          if (index > i2)
            index--;
        }
        i2 = nodes.length - 1;
        while (i2 > 0 && nodes.length > 1 && nodes[i2] === connector) {
          nodes.splice(i2, 1);
          if (index === i2)
            index = 0;
          i2 = nodes.length - 1;
        }
      }
      nodes.splice(index, 1, id2);
      nodes = nodes.filter(noRepeatNodes);
      if (isClosed2 && (nodes.length === 1 || nodes[0] !== nodes[nodes.length - 1])) {
        nodes.push(nodes[0]);
      }
      return this.update({
        nodes: nodes
      });
    },
    replaceNode: function replaceNode(needleID, replacementID) {
      var nodes = this.nodes.slice();
      var isClosed2 = this.isClosed();
      for (var i2 = 0; i2 < nodes.length; i2++) {
        if (nodes[i2] === needleID) {
          nodes[i2] = replacementID;
        }
      }
      nodes = nodes.filter(noRepeatNodes);
      if (isClosed2 && (nodes.length === 1 || nodes[0] !== nodes[nodes.length - 1])) {
        nodes.push(nodes[0]);
      }
      return this.update({
        nodes: nodes
      });
    },
    removeNode: function removeNode(id2) {
      var nodes = this.nodes.slice();
      var isClosed2 = this.isClosed();
      nodes = nodes.filter(function(node) {
        return node !== id2;
      }).filter(noRepeatNodes);
      if (isClosed2 && (nodes.length === 1 || nodes[0] !== nodes[nodes.length - 1])) {
        nodes.push(nodes[0]);
      }
      return this.update({
        nodes: nodes
      });
    },
    asJXON: function asJXON(changeset_id) {
      var r = {
        way: {
          "@id": this.osmId(),
          "@version": this.version || 0,
          nd: this.nodes.map(function(id2) {
            return {
              keyAttributes: {
                ref: osmEntity.id.toOSM(id2)
              }
            };
          }, this),
          tag: Object.keys(this.tags).map(function(k) {
            return {
              keyAttributes: {
                k: k,
                v: this.tags[k]
              }
            };
          }, this)
        }
      };
      if (changeset_id) {
        r.way["@changeset"] = changeset_id;
      }
      return r;
    },
    asGeoJSON: function asGeoJSON(resolver) {
      return resolver.transient(this, "GeoJSON", function() {
        var coordinates = resolver.childNodes(this).map(function(n2) {
          return n2.loc;
        });
        if (this.isArea() && this.isClosed()) {
          return {
            type: "Polygon",
            coordinates: [coordinates]
          };
        } else {
          return {
            type: "LineString",
            coordinates: coordinates
          };
        }
      });
    },
    area: function area(resolver) {
      return resolver.transient(this, "area", function() {
        var nodes = resolver.childNodes(this);
        var json2 = {
          type: "Polygon",
          coordinates: [nodes.map(function(n2) {
            return n2.loc;
          })]
        };
        if (!this.isClosed() && nodes.length) {
          json2.coordinates[0].push(nodes[0].loc);
        }
        var area3 = area_default(json2);
        if (area3 > 2 * Math.PI) {
          json2.coordinates[0] = json2.coordinates[0].reverse();
          area3 = area_default(json2);
        }
        return isNaN(area3) ? 0 : area3;
      });
    }
  });
  function noRepeatNodes(node, i2, arr) {
    return i2 === 0 || node !== arr[i2 - 1];
  }

  // modules/osm/multipolygon.js
  function osmOldMultipolygonOuterMemberOfRelation(entity2, graph3) {
    if (entity2.type !== "relation" || !entity2.isMultipolygon() || Object.keys(entity2.tags).filter(osmIsInterestingTag).length > 1) {
      return false;
    }
    var outerMember;
    for (var memberIndex in entity2.members) {
      var member = entity2.members[memberIndex];
      if (!member.role || member.role === "outer") {
        if (outerMember)
          return false;
        if (member.type !== "way")
          return false;
        if (!graph3.hasEntity(member.id))
          return false;
        outerMember = graph3.entity(member.id);
        if (Object.keys(outerMember.tags).filter(osmIsInterestingTag).length === 0) {
          return false;
        }
      }
    }
    return outerMember;
  }
  function osmIsOldMultipolygonOuterMember(entity2, graph3) {
    if (entity2.type !== "way" || Object.keys(entity2.tags).filter(osmIsInterestingTag).length === 0) {
      return false;
    }
    var parents = graph3.parentRelations(entity2);
    if (parents.length !== 1)
      return false;
    var parent2 = parents[0];
    if (!parent2.isMultipolygon() || Object.keys(parent2.tags).filter(osmIsInterestingTag).length > 1) {
      return false;
    }
    var members = parent2.members, member;
    for (var i2 = 0; i2 < members.length; i2++) {
      member = members[i2];
      if (member.id === entity2.id && member.role && member.role !== "outer") {
        return false;
      }
      if (member.id !== entity2.id && (!member.role || member.role === "outer")) {
        return false;
      }
    }
    return parent2;
  }
  function osmOldMultipolygonOuterMember(entity2, graph3) {
    if (entity2.type !== "way")
      return false;
    var parents = graph3.parentRelations(entity2);
    if (parents.length !== 1)
      return false;
    var parent2 = parents[0];
    if (!parent2.isMultipolygon() || Object.keys(parent2.tags).filter(osmIsInterestingTag).length > 1) {
      return false;
    }
    var members = parent2.members, member, outerMember;
    for (var i2 = 0; i2 < members.length; i2++) {
      member = members[i2];
      if (!member.role || member.role === "outer") {
        if (outerMember)
          return false;
        outerMember = member;
      }
    }
    if (!outerMember)
      return false;
    var outerEntity = graph3.hasEntity(outerMember.id);
    if (!outerEntity || !Object.keys(outerEntity.tags).filter(osmIsInterestingTag).length) {
      return false;
    }
    return outerEntity;
  }
  function osmJoinWays(toJoin, graph3) {
    function resolve(member) {
      return graph3.childNodes(graph3.entity(member.id));
    }
    function reverse2(item2) {
      var action = actionReverse(item2.id, {
        reverseOneway: true
      });
      sequences4.actions.push(action);
      return item2 instanceof osmWay ? action(graph3).entity(item2.id) : item2;
    }
    toJoin = toJoin.filter(function(member) {
      return member.type === "way" && graph3.hasEntity(member.id);
    });
    var i2;
    var joinAsMembers = true;
    for (i2 = 0; i2 < toJoin.length; i2++) {
      if (toJoin[i2] instanceof osmWay) {
        joinAsMembers = false;
        break;
      }
    }
    var sequences4 = [];
    sequences4.actions = [];
    while (toJoin.length) {
      var item = toJoin.shift();
      var currWays = [item];
      var currNodes = resolve(item).slice();
      while (toJoin.length) {
        var start2 = currNodes[0];
        var end = currNodes[currNodes.length - 1];
        var fn = null;
        var nodes = null;
        for (i2 = 0; i2 < toJoin.length; i2++) {
          item = toJoin[i2];
          nodes = resolve(item);
          if (joinAsMembers && currWays.length === 1 && nodes[0] !== end && nodes[nodes.length - 1] !== end && (nodes[nodes.length - 1] === start2 || nodes[0] === start2)) {
            currWays[0] = reverse2(currWays[0]);
            currNodes.reverse();
            start2 = currNodes[0];
            end = currNodes[currNodes.length - 1];
          }
          if (nodes[0] === end) {
            fn = currNodes.push;
            nodes = nodes.slice(1);
            break;
          } else if (nodes[nodes.length - 1] === end) {
            fn = currNodes.push;
            nodes = nodes.slice(0, -1).reverse();
            item = reverse2(item);
            break;
          } else if (nodes[nodes.length - 1] === start2) {
            fn = currNodes.unshift;
            nodes = nodes.slice(0, -1);
            break;
          } else if (nodes[0] === start2) {
            fn = currNodes.unshift;
            nodes = nodes.slice(1).reverse();
            item = reverse2(item);
            break;
          } else {
            fn = nodes = null;
          }
        }
        if (!nodes) {
          break;
        }
        fn.apply(currWays, [item]);
        fn.apply(currNodes, nodes);
        toJoin.splice(i2, 1);
      }
      currWays.nodes = currNodes;
      sequences4.push(currWays);
    }
    return sequences4;
  }

  // modules/actions/add_member.js
  function actionAddMember(relationId, member, memberIndex, insertPair) {
    return function action(graph3) {
      var relation = graph3.entity(relationId);
      var isPTv2 = /stop|platform/.test(member.role);
      if ((isNaN(memberIndex) || insertPair) && member.type === "way" && !isPTv2) {
        graph3 = addWayMember(relation, graph3);
      } else {
        if (isPTv2 && isNaN(memberIndex)) {
          memberIndex = 0;
        }
        graph3 = graph3.replace(relation.addMember(member, memberIndex));
      }
      return graph3;
    };
    function addWayMember(relation, graph3) {
      var groups, tempWay, item, i2, j, k;
      var PTv2members = [];
      var members = [];
      for (i2 = 0; i2 < relation.members.length; i2++) {
        var m = relation.members[i2];
        if (/stop|platform/.test(m.role)) {
          PTv2members.push(m);
        } else {
          members.push(m);
        }
      }
      relation = relation.update({
        members: members
      });
      if (insertPair) {
        tempWay = osmWay({
          id: "wTemp",
          nodes: insertPair.nodes
        });
        graph3 = graph3.replace(tempWay);
        var tempMember = {
          id: tempWay.id,
          type: "way",
          role: member.role
        };
        var tempRelation = relation.replaceMember({
          id: insertPair.originalID
        }, tempMember, true);
        groups = utilArrayGroupBy(tempRelation.members, "type");
        groups.way = groups.way || [];
      } else {
        groups = utilArrayGroupBy(relation.members, "type");
        groups.way = groups.way || [];
        groups.way.push(member);
      }
      members = withIndex(groups.way);
      var joined = osmJoinWays(members, graph3);
      for (i2 = 0; i2 < joined.length; i2++) {
        var segment = joined[i2];
        var nodes = segment.nodes.slice();
        var startIndex = segment[0].index;
        for (j = 0; j < members.length; j++) {
          if (members[j].index === startIndex) {
            break;
          }
        }
        for (k = 0; k < segment.length; k++) {
          item = segment[k];
          var way = graph3.entity(item.id);
          if (tempWay && item.id === tempWay.id) {
            if (nodes[0].id === insertPair.nodes[0]) {
              item.pair = [{
                id: insertPair.originalID,
                type: "way",
                role: item.role
              }, {
                id: insertPair.insertedID,
                type: "way",
                role: item.role
              }];
            } else {
              item.pair = [{
                id: insertPair.insertedID,
                type: "way",
                role: item.role
              }, {
                id: insertPair.originalID,
                type: "way",
                role: item.role
              }];
            }
          }
          if (k > 0) {
            if (j + k >= members.length || item.index !== members[j + k].index) {
              moveMember2(members, item.index, j + k);
            }
          }
          nodes.splice(0, way.nodes.length - 1);
        }
      }
      if (tempWay) {
        graph3 = graph3.remove(tempWay);
      }
      var wayMembers = [];
      for (i2 = 0; i2 < members.length; i2++) {
        item = members[i2];
        if (item.index === -1)
          continue;
        if (item.pair) {
          wayMembers.push(item.pair[0]);
          wayMembers.push(item.pair[1]);
        } else {
          wayMembers.push(utilObjectOmit(item, ["index"]));
        }
      }
      var newMembers = PTv2members.concat(groups.node || [], wayMembers, groups.relation || []);
      return graph3.replace(relation.update({
        members: newMembers
      }));
      function moveMember2(arr, findIndex, toIndex) {
        var i3;
        for (i3 = 0; i3 < arr.length; i3++) {
          if (arr[i3].index === findIndex) {
            break;
          }
        }
        var item2 = Object.assign({}, arr[i3]);
        arr[i3].index = -1;
        item2.index = toIndex;
        arr.splice(toIndex, 0, item2);
      }
      function withIndex(arr) {
        var result6 = new Array(arr.length);
        for (var i3 = 0; i3 < arr.length; i3++) {
          result6[i3] = Object.assign({}, arr[i3]);
          result6[i3].index = i3;
        }
        return result6;
      }
    }
  }

  // modules/actions/add_midpoint.js
  function actionAddMidpoint(midpoint, node) {
    return function(graph3) {
      graph3 = graph3.replace(node.move(midpoint.loc));
      var parents = utilArrayIntersection(graph3.parentWays(graph3.entity(midpoint.edge[0])), graph3.parentWays(graph3.entity(midpoint.edge[1])));
      parents.forEach(function(way) {
        for (var i2 = 0; i2 < way.nodes.length - 1; i2++) {
          if (geomEdgeEqual([way.nodes[i2], way.nodes[i2 + 1]], midpoint.edge)) {
            graph3 = graph3.replace(graph3.entity(way.id).addNode(node.id, i2 + 1));
            return;
          }
        }
      });
      return graph3;
    };
  }

  // modules/actions/add_vertex.js
  function actionAddVertex(wayId, nodeId, index) {
    return function(graph3) {
      return graph3.replace(graph3.entity(wayId).addNode(nodeId, index));
    };
  }

  // modules/actions/change_member.js
  function actionChangeMember(relationId, member, memberIndex) {
    return function(graph3) {
      return graph3.replace(graph3.entity(relationId).updateMember(member, memberIndex));
    };
  }

  // modules/actions/change_preset.js
  function actionChangePreset(entityID, oldPreset, newPreset, skipFieldDefaults) {
    return function action(graph3) {
      var entity2 = graph3.entity(entityID);
      var geometry6 = entity2.geometry(graph3);
      var tags = entity2.tags;
      if (oldPreset)
        tags = oldPreset.unsetTags(tags, geometry6, newPreset && newPreset.addTags ? Object.keys(newPreset.addTags) : null);
      if (newPreset)
        tags = newPreset.setTags(tags, geometry6, skipFieldDefaults);
      return graph3.replace(entity2.update({
        tags: tags
      }));
    };
  }

  // modules/actions/change_tags.js
  function actionChangeTags(entityId, tags) {
    return function(graph3) {
      var entity2 = graph3.entity(entityId);
      return graph3.replace(entity2.update({
        tags: tags
      }));
    };
  }

  // modules/osm/node.js
  function osmNode() {
    if (!(this instanceof osmNode)) {
      return new osmNode().initialize(arguments);
    } else if (arguments.length) {
      this.initialize(arguments);
    }
  }
  osmEntity.node = osmNode;
  osmNode.prototype = Object.create(osmEntity.prototype);
  Object.assign(osmNode.prototype, {
    type: "node",
    loc: [9999, 9999],
    extent: function extent2() {
      return new Extent(this.loc);
    },
    geometry: function geometry2(graph3) {
      return graph3.transient(this, "geometry", function() {
        return graph3.isPoi(this) ? "point" : "vertex";
      });
    },
    move: function move(loc) {
      return this.update({
        loc: loc
      });
    },
    isDegenerate: function isDegenerate3() {
      return !(Array.isArray(this.loc) && this.loc.length === 2 && this.loc[0] >= -180 && this.loc[0] <= 180 && this.loc[1] >= -90 && this.loc[1] <= 90);
    },
    directions: function directions(resolver, projection2) {
      var val;
      var i2;
      if (this.isHighwayIntersection(resolver) && (this.tags.stop || "").toLowerCase() === "all") {
        val = "all";
      } else {
        val = (this.tags.direction || "").toLowerCase();
        var re2 = /:direction$/i;
        var keys3 = Object.keys(this.tags);
        for (i2 = 0; i2 < keys3.length; i2++) {
          if (re2.test(keys3[i2])) {
            val = this.tags[keys3[i2]].toLowerCase();
            break;
          }
        }
      }
      if (val === "")
        return [];
      var cardinal = {
        north: 0,
        n: 0,
        northnortheast: 22,
        nne: 22,
        northeast: 45,
        ne: 45,
        eastnortheast: 67,
        ene: 67,
        east: 90,
        e: 90,
        eastsoutheast: 112,
        ese: 112,
        southeast: 135,
        se: 135,
        southsoutheast: 157,
        sse: 157,
        south: 180,
        s: 180,
        southsouthwest: 202,
        ssw: 202,
        southwest: 225,
        sw: 225,
        westsouthwest: 247,
        wsw: 247,
        west: 270,
        w: 270,
        westnorthwest: 292,
        wnw: 292,
        northwest: 315,
        nw: 315,
        northnorthwest: 337,
        nnw: 337
      };
      var values2 = val.split(";");
      var results = [];
      values2.forEach(function(v) {
        if (cardinal[v] !== void 0) {
          v = cardinal[v];
        }
        if (v !== "" && !isNaN(+v)) {
          results.push(+v);
          return;
        }
        var lookBackward = this.tags["traffic_sign:backward"] || v === "backward" || v === "both" || v === "all";
        var lookForward = this.tags["traffic_sign:forward"] || v === "forward" || v === "both" || v === "all";
        if (!lookForward && !lookBackward)
          return;
        var nodeIds = {};
        resolver.parentWays(this).forEach(function(parent2) {
          var nodes = parent2.nodes;
          for (i2 = 0; i2 < nodes.length; i2++) {
            if (nodes[i2] === this.id) {
              if (lookForward && i2 > 0) {
                nodeIds[nodes[i2 - 1]] = true;
              }
              if (lookBackward && i2 < nodes.length - 1) {
                nodeIds[nodes[i2 + 1]] = true;
              }
            }
          }
        }, this);
        Object.keys(nodeIds).forEach(function(nodeId) {
          var a = projection2(this.loc);
          var b2 = projection2(resolver.entity(nodeId).loc);
          results.push(vecAngle(a, b2) * 180 / Math.PI + 90);
        }, this);
      }, this);
      return utilArrayUniq(results);
    },
    isCrossing: function isCrossing() {
      return this.tags.highway === "crossing" || this.tags.railway && this.tags.railway.indexOf("crossing") !== -1;
    },
    isEndpoint: function isEndpoint(resolver) {
      return resolver.transient(this, "isEndpoint", function() {
        var id2 = this.id;
        return resolver.parentWays(this).filter(function(parent2) {
          return !parent2.isClosed() && !!parent2.affix(id2);
        }).length > 0;
      });
    },
    isConnected: function isConnected(resolver) {
      return resolver.transient(this, "isConnected", function() {
        var parents = resolver.parentWays(this);
        if (parents.length > 1) {
          for (var i2 in parents) {
            if (parents[i2].geometry(resolver) === "line" && parents[i2].hasInterestingTags())
              return true;
          }
        } else if (parents.length === 1) {
          var way = parents[0];
          var nodes = way.nodes.slice();
          if (way.isClosed()) {
            nodes.pop();
          }
          return nodes.indexOf(this.id) !== nodes.lastIndexOf(this.id);
        }
        return false;
      });
    },
    parentIntersectionWays: function parentIntersectionWays(resolver) {
      return resolver.transient(this, "parentIntersectionWays", function() {
        return resolver.parentWays(this).filter(function(parent2) {
          return (parent2.tags.highway || parent2.tags.waterway || parent2.tags.railway || parent2.tags.aeroway) && parent2.geometry(resolver) === "line";
        });
      });
    },
    isIntersection: function isIntersection(resolver) {
      return this.parentIntersectionWays(resolver).length > 1;
    },
    isHighwayIntersection: function isHighwayIntersection2(resolver) {
      return resolver.transient(this, "isHighwayIntersection", function() {
        return resolver.parentWays(this).filter(function(parent2) {
          return parent2.tags.highway && parent2.geometry(resolver) === "line";
        }).length > 1;
      });
    },
    isOnAddressLine: function isOnAddressLine(resolver) {
      return resolver.transient(this, "isOnAddressLine", function() {
        return resolver.parentWays(this).filter(function(parent2) {
          return parent2.tags.hasOwnProperty("addr:interpolation") && parent2.geometry(resolver) === "line";
        }).length > 0;
      });
    },
    asJXON: function asJXON2(changeset_id) {
      var r = {
        node: {
          "@id": this.osmId(),
          "@lon": this.loc[0],
          "@lat": this.loc[1],
          "@version": this.version || 0,
          tag: Object.keys(this.tags).map(function(k) {
            return {
              keyAttributes: {
                k: k,
                v: this.tags[k]
              }
            };
          }, this)
        }
      };
      if (changeset_id)
        r.node["@changeset"] = changeset_id;
      return r;
    },
    asGeoJSON: function asGeoJSON2() {
      return {
        type: "Point",
        coordinates: this.loc
      };
    }
  });

  // modules/actions/circularize.js
  function actionCircularize(wayId, projection2, maxAngle) {
    maxAngle = (maxAngle || 20) * Math.PI / 180;
    var action = function action2(graph3, t) {
      if (t === null || !isFinite(t))
        t = 1;
      t = Math.min(Math.max(+t, 0), 1);
      var way = graph3.entity(wayId);
      var origNodes = {};
      graph3.childNodes(way).forEach(function(node2) {
        if (!origNodes[node2.id])
          origNodes[node2.id] = node2;
      });
      if (!way.isConvex(graph3)) {
        graph3 = action2.makeConvex(graph3);
      }
      var nodes = utilArrayUniq(graph3.childNodes(way));
      var keyNodes = nodes.filter(function(n2) {
        return graph3.parentWays(n2).length !== 1;
      });
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var keyPoints = keyNodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var centroid = points.length === 2 ? vecInterp(points[0], points[1], 0.5) : centroid_default2(points);
      var radius = median(points, function(p2) {
        return vecLength(centroid, p2);
      });
      var sign2 = area_default3(points) > 0 ? 1 : -1;
      var ids, i2, j, k;
      if (!keyNodes.length) {
        keyNodes = [nodes[0]];
        keyPoints = [points[0]];
      }
      if (keyNodes.length === 1) {
        var index = nodes.indexOf(keyNodes[0]);
        var oppositeIndex = Math.floor((index + nodes.length / 2) % nodes.length);
        keyNodes.push(nodes[oppositeIndex]);
        keyPoints.push(points[oppositeIndex]);
      }
      for (i2 = 0; i2 < keyPoints.length; i2++) {
        var nextKeyNodeIndex = (i2 + 1) % keyNodes.length;
        var startNode = keyNodes[i2];
        var endNode = keyNodes[nextKeyNodeIndex];
        var startNodeIndex = nodes.indexOf(startNode);
        var endNodeIndex = nodes.indexOf(endNode);
        var numberNewPoints = -1;
        var indexRange = endNodeIndex - startNodeIndex;
        var nearNodes = {};
        var inBetweenNodes = [];
        var startAngle, endAngle, totalAngle, eachAngle;
        var angle2, loc, node, origNode;
        if (indexRange < 0) {
          indexRange += nodes.length;
        }
        var distance = vecLength(centroid, keyPoints[i2]) || 1e-4;
        keyPoints[i2] = [centroid[0] + (keyPoints[i2][0] - centroid[0]) / distance * radius, centroid[1] + (keyPoints[i2][1] - centroid[1]) / distance * radius];
        loc = projection2.invert(keyPoints[i2]);
        node = keyNodes[i2];
        origNode = origNodes[node.id];
        node = node.move(vecInterp(origNode.loc, loc, t));
        graph3 = graph3.replace(node);
        startAngle = Math.atan2(keyPoints[i2][1] - centroid[1], keyPoints[i2][0] - centroid[0]);
        endAngle = Math.atan2(keyPoints[nextKeyNodeIndex][1] - centroid[1], keyPoints[nextKeyNodeIndex][0] - centroid[0]);
        totalAngle = endAngle - startAngle;
        if (totalAngle * sign2 > 0) {
          totalAngle = -sign2 * (2 * Math.PI - Math.abs(totalAngle));
        }
        do {
          numberNewPoints++;
          eachAngle = totalAngle / (indexRange + numberNewPoints);
        } while (Math.abs(eachAngle) > maxAngle);
        for (j = 1; j < indexRange; j++) {
          angle2 = startAngle + j * eachAngle;
          loc = projection2.invert([centroid[0] + Math.cos(angle2) * radius, centroid[1] + Math.sin(angle2) * radius]);
          node = nodes[(j + startNodeIndex) % nodes.length];
          origNode = origNodes[node.id];
          nearNodes[node.id] = angle2;
          node = node.move(vecInterp(origNode.loc, loc, t));
          graph3 = graph3.replace(node);
        }
        for (j = 0; j < numberNewPoints; j++) {
          angle2 = startAngle + (indexRange + j) * eachAngle;
          loc = projection2.invert([centroid[0] + Math.cos(angle2) * radius, centroid[1] + Math.sin(angle2) * radius]);
          var min2 = Infinity;
          for (var nodeId in nearNodes) {
            var nearAngle = nearNodes[nodeId];
            var dist = Math.abs(nearAngle - angle2);
            if (dist < min2) {
              min2 = dist;
              origNode = origNodes[nodeId];
            }
          }
          node = osmNode({
            loc: vecInterp(origNode.loc, loc, t)
          });
          graph3 = graph3.replace(node);
          nodes.splice(endNodeIndex + j, 0, node);
          inBetweenNodes.push(node.id);
        }
        if (indexRange === 1 && inBetweenNodes.length) {
          var startIndex1 = way.nodes.lastIndexOf(startNode.id);
          var endIndex1 = way.nodes.lastIndexOf(endNode.id);
          var wayDirection1 = endIndex1 - startIndex1;
          if (wayDirection1 < -1) {
            wayDirection1 = 1;
          }
          var parentWays2 = graph3.parentWays(keyNodes[i2]);
          for (j = 0; j < parentWays2.length; j++) {
            var sharedWay = parentWays2[j];
            if (sharedWay === way)
              continue;
            if (sharedWay.areAdjacent(startNode.id, endNode.id)) {
              var startIndex2 = sharedWay.nodes.lastIndexOf(startNode.id);
              var endIndex2 = sharedWay.nodes.lastIndexOf(endNode.id);
              var wayDirection2 = endIndex2 - startIndex2;
              var insertAt = endIndex2;
              if (wayDirection2 < -1) {
                wayDirection2 = 1;
              }
              if (wayDirection1 !== wayDirection2) {
                inBetweenNodes.reverse();
                insertAt = startIndex2;
              }
              for (k = 0; k < inBetweenNodes.length; k++) {
                sharedWay = sharedWay.addNode(inBetweenNodes[k], insertAt + k);
              }
              graph3 = graph3.replace(sharedWay);
            }
          }
        }
      }
      ids = nodes.map(function(n2) {
        return n2.id;
      });
      ids.push(ids[0]);
      way = way.update({
        nodes: ids
      });
      graph3 = graph3.replace(way);
      return graph3;
    };
    action.makeConvex = function(graph3) {
      var way = graph3.entity(wayId);
      var nodes = utilArrayUniq(graph3.childNodes(way));
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var sign2 = area_default3(points) > 0 ? 1 : -1;
      var hull = hull_default(points);
      var i2, j;
      if (sign2 === -1) {
        nodes.reverse();
        points.reverse();
      }
      for (i2 = 0; i2 < hull.length - 1; i2++) {
        var startIndex = points.indexOf(hull[i2]);
        var endIndex = points.indexOf(hull[i2 + 1]);
        var indexRange = endIndex - startIndex;
        if (indexRange < 0) {
          indexRange += nodes.length;
        }
        for (j = 1; j < indexRange; j++) {
          var point5 = vecInterp(hull[i2], hull[i2 + 1], j / indexRange);
          var node = nodes[(j + startIndex) % nodes.length].move(projection2.invert(point5));
          graph3 = graph3.replace(node);
        }
      }
      return graph3;
    };
    action.disabled = function(graph3) {
      if (!graph3.entity(wayId).isClosed()) {
        return "not_closed";
      }
      var way = graph3.entity(wayId);
      var nodes = utilArrayUniq(graph3.childNodes(way));
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var hull = hull_default(points);
      var epsilonAngle = Math.PI / 180;
      if (hull.length !== points.length || hull.length < 3) {
        return false;
      }
      var centroid = centroid_default2(points);
      var radius = vecLengthSquare(centroid, points[0]);
      var i2, actualPoint;
      for (i2 = 0; i2 < hull.length; i2++) {
        actualPoint = hull[i2];
        var actualDist = vecLengthSquare(actualPoint, centroid);
        var diff = Math.abs(actualDist - radius);
        if (diff > 0.05 * radius) {
          return false;
        }
      }
      for (i2 = 0; i2 < hull.length; i2++) {
        actualPoint = hull[i2];
        var nextPoint = hull[(i2 + 1) % hull.length];
        var startAngle = Math.atan2(actualPoint[1] - centroid[1], actualPoint[0] - centroid[0]);
        var endAngle = Math.atan2(nextPoint[1] - centroid[1], nextPoint[0] - centroid[0]);
        var angle2 = endAngle - startAngle;
        if (angle2 < 0) {
          angle2 = -angle2;
        }
        if (angle2 > Math.PI) {
          angle2 = 2 * Math.PI - angle2;
        }
        if (angle2 > maxAngle + epsilonAngle) {
          return false;
        }
      }
      return "already_circular";
    };
    action.transitionable = true;
    return action;
  }

  // modules/actions/delete_way.js
  function actionDeleteWay(wayID) {
    function canDeleteNode(node, graph3) {
      if (graph3.parentWays(node).length || graph3.parentRelations(node).length)
        return false;
      var geometries = osmNodeGeometriesForTags(node.tags);
      if (geometries.point)
        return false;
      if (geometries.vertex)
        return true;
      return !node.hasInterestingTags();
    }
    var action = function action2(graph3) {
      var way = graph3.entity(wayID);
      graph3.parentRelations(way).forEach(function(parent2) {
        parent2 = parent2.removeMembersWithID(wayID);
        graph3 = graph3.replace(parent2);
        if (parent2.isDegenerate()) {
          graph3 = actionDeleteRelation(parent2.id)(graph3);
        }
      });
      new Set(way.nodes).forEach(function(nodeID) {
        graph3 = graph3.replace(way.removeNode(nodeID));
        var node = graph3.entity(nodeID);
        if (canDeleteNode(node, graph3)) {
          graph3 = graph3.remove(node);
        }
      });
      return graph3.remove(way);
    };
    return action;
  }

  // modules/actions/delete_multiple.js
  function actionDeleteMultiple(ids) {
    var actions = {
      way: actionDeleteWay,
      node: actionDeleteNode,
      relation: actionDeleteRelation
    };
    var action = function action2(graph3) {
      ids.forEach(function(id2) {
        if (graph3.hasEntity(id2)) {
          graph3 = actions[graph3.entity(id2).type](id2)(graph3);
        }
      });
      return graph3;
    };
    return action;
  }

  // modules/actions/delete_relation.js
  function actionDeleteRelation(relationID, allowUntaggedMembers) {
    function canDeleteEntity(entity2, graph3) {
      return !graph3.parentWays(entity2).length && !graph3.parentRelations(entity2).length && !entity2.hasInterestingTags() && !allowUntaggedMembers;
    }
    var action = function action2(graph3) {
      var relation = graph3.entity(relationID);
      graph3.parentRelations(relation).forEach(function(parent2) {
        parent2 = parent2.removeMembersWithID(relationID);
        graph3 = graph3.replace(parent2);
        if (parent2.isDegenerate()) {
          graph3 = actionDeleteRelation(parent2.id)(graph3);
        }
      });
      var memberIDs = utilArrayUniq(relation.members.map(function(m) {
        return m.id;
      }));
      memberIDs.forEach(function(memberID) {
        graph3 = graph3.replace(relation.removeMembersWithID(memberID));
        var entity2 = graph3.entity(memberID);
        if (canDeleteEntity(entity2, graph3)) {
          graph3 = actionDeleteMultiple([memberID])(graph3);
        }
      });
      return graph3.remove(relation);
    };
    return action;
  }

  // modules/actions/delete_node.js
  function actionDeleteNode(nodeId) {
    var action = function action2(graph3) {
      var node = graph3.entity(nodeId);
      graph3.parentWays(node).forEach(function(parent2) {
        parent2 = parent2.removeNode(nodeId);
        graph3 = graph3.replace(parent2);
        if (parent2.isDegenerate()) {
          graph3 = actionDeleteWay(parent2.id)(graph3);
        }
      });
      graph3.parentRelations(node).forEach(function(parent2) {
        parent2 = parent2.removeMembersWithID(nodeId);
        graph3 = graph3.replace(parent2);
        if (parent2.isDegenerate()) {
          graph3 = actionDeleteRelation(parent2.id)(graph3);
        }
      });
      return graph3.remove(node);
    };
    return action;
  }

  // modules/actions/connect.js
  function actionConnect(nodeIDs) {
    var action = function action2(graph3) {
      var survivor;
      var node;
      var parents;
      var i2, j;
      for (i2 = 0; i2 < nodeIDs.length; i2++) {
        survivor = graph3.entity(nodeIDs[i2]);
        if (survivor.version)
          break;
      }
      for (i2 = 0; i2 < nodeIDs.length; i2++) {
        node = graph3.entity(nodeIDs[i2]);
        if (node.id === survivor.id)
          continue;
        parents = graph3.parentWays(node);
        for (j = 0; j < parents.length; j++) {
          graph3 = graph3.replace(parents[j].replaceNode(node.id, survivor.id));
        }
        parents = graph3.parentRelations(node);
        for (j = 0; j < parents.length; j++) {
          graph3 = graph3.replace(parents[j].replaceMember(node, survivor));
        }
        survivor = survivor.mergeTags(node.tags);
        graph3 = actionDeleteNode(node.id)(graph3);
      }
      graph3 = graph3.replace(survivor);
      parents = graph3.parentWays(survivor);
      for (i2 = 0; i2 < parents.length; i2++) {
        if (parents[i2].isDegenerate()) {
          graph3 = actionDeleteWay(parents[i2].id)(graph3);
        }
      }
      return graph3;
    };
    action.disabled = function(graph3) {
      var seen = {};
      var restrictionIDs = [];
      var survivor;
      var node, way;
      var relations, relation, role;
      var i2, j, k;
      for (i2 = 0; i2 < nodeIDs.length; i2++) {
        survivor = graph3.entity(nodeIDs[i2]);
        if (survivor.version)
          break;
      }
      var countWithLinzAddr = 0;
      for (i2 = 0; i2 < nodeIDs.length; i2++) {
        node = graph3.entity(nodeIDs[i2]);
        relations = graph3.parentRelations(node);
        if (node.tags && node.tags["ref:linz:address_id"])
          countWithLinzAddr++;
        for (j = 0; j < relations.length; j++) {
          relation = relations[j];
          role = relation.memberById(node.id).role || "";
          if (relation.hasFromViaTo()) {
            restrictionIDs.push(relation.id);
          }
          if (seen[relation.id] !== void 0 && seen[relation.id] !== role) {
            return "relation";
          } else {
            seen[relation.id] = role;
          }
        }
      }
      if (countWithLinzAddr > 1)
        return "relation";
      for (i2 = 0; i2 < nodeIDs.length; i2++) {
        node = graph3.entity(nodeIDs[i2]);
        var parents = graph3.parentWays(node);
        for (j = 0; j < parents.length; j++) {
          var parent2 = parents[j];
          relations = graph3.parentRelations(parent2);
          for (k = 0; k < relations.length; k++) {
            relation = relations[k];
            if (relation.hasFromViaTo()) {
              restrictionIDs.push(relation.id);
            }
          }
        }
      }
      restrictionIDs = utilArrayUniq(restrictionIDs);
      for (i2 = 0; i2 < restrictionIDs.length; i2++) {
        relation = graph3.entity(restrictionIDs[i2]);
        if (!relation.isComplete(graph3))
          continue;
        var memberWays = relation.members.filter(function(m) {
          return m.type === "way";
        }).map(function(m) {
          return graph3.entity(m.id);
        });
        memberWays = utilArrayUniq(memberWays);
        var f2 = relation.memberByRole("from");
        var t = relation.memberByRole("to");
        var isUturn = f2.id === t.id;
        var nodes = {
          from: [],
          via: [],
          to: [],
          keyfrom: [],
          keyto: []
        };
        for (j = 0; j < relation.members.length; j++) {
          collectNodes(relation.members[j], nodes);
        }
        nodes.keyfrom = utilArrayUniq(nodes.keyfrom.filter(hasDuplicates));
        nodes.keyto = utilArrayUniq(nodes.keyto.filter(hasDuplicates));
        var filter2 = keyNodeFilter(nodes.keyfrom, nodes.keyto);
        nodes.from = nodes.from.filter(filter2);
        nodes.via = nodes.via.filter(filter2);
        nodes.to = nodes.to.filter(filter2);
        var connectFrom = false;
        var connectVia = false;
        var connectTo = false;
        var connectKeyFrom = false;
        var connectKeyTo = false;
        for (j = 0; j < nodeIDs.length; j++) {
          var n2 = nodeIDs[j];
          if (nodes.from.indexOf(n2) !== -1) {
            connectFrom = true;
          }
          if (nodes.via.indexOf(n2) !== -1) {
            connectVia = true;
          }
          if (nodes.to.indexOf(n2) !== -1) {
            connectTo = true;
          }
          if (nodes.keyfrom.indexOf(n2) !== -1) {
            connectKeyFrom = true;
          }
          if (nodes.keyto.indexOf(n2) !== -1) {
            connectKeyTo = true;
          }
        }
        if (connectFrom && connectTo && !isUturn) {
          return "restriction";
        }
        if (connectFrom && connectVia) {
          return "restriction";
        }
        if (connectTo && connectVia) {
          return "restriction";
        }
        if (connectKeyFrom || connectKeyTo) {
          if (nodeIDs.length !== 2) {
            return "restriction";
          }
          var n0 = null;
          var n1 = null;
          for (j = 0; j < memberWays.length; j++) {
            way = memberWays[j];
            if (way.contains(nodeIDs[0])) {
              n0 = nodeIDs[0];
            }
            if (way.contains(nodeIDs[1])) {
              n1 = nodeIDs[1];
            }
          }
          if (n0 && n1) {
            var ok = false;
            for (j = 0; j < memberWays.length; j++) {
              way = memberWays[j];
              if (way.areAdjacent(n0, n1)) {
                ok = true;
                break;
              }
            }
            if (!ok) {
              return "restriction";
            }
          }
        }
        for (j = 0; j < memberWays.length; j++) {
          way = memberWays[j].update({});
          for (k = 0; k < nodeIDs.length; k++) {
            if (nodeIDs[k] === survivor.id)
              continue;
            if (way.areAdjacent(nodeIDs[k], survivor.id)) {
              way = way.removeNode(nodeIDs[k]);
            } else {
              way = way.replaceNode(nodeIDs[k], survivor.id);
            }
          }
          if (way.isDegenerate()) {
            return "restriction";
          }
        }
      }
      return false;
      function hasDuplicates(n3, i3, arr) {
        return arr.indexOf(n3) !== arr.lastIndexOf(n3);
      }
      function keyNodeFilter(froms, tos) {
        return function(n3) {
          return froms.indexOf(n3) === -1 && tos.indexOf(n3) === -1;
        };
      }
      function collectNodes(member, collection) {
        var entity2 = graph3.hasEntity(member.id);
        if (!entity2)
          return;
        var role2 = member.role || "";
        if (!collection[role2]) {
          collection[role2] = [];
        }
        if (member.type === "node") {
          collection[role2].push(member.id);
          if (role2 === "via") {
            collection.keyfrom.push(member.id);
            collection.keyto.push(member.id);
          }
        } else if (member.type === "way") {
          collection[role2].push.apply(collection[role2], entity2.nodes);
          if (role2 === "from" || role2 === "via") {
            collection.keyfrom.push(entity2.first());
            collection.keyfrom.push(entity2.last());
          }
          if (role2 === "to" || role2 === "via") {
            collection.keyto.push(entity2.first());
            collection.keyto.push(entity2.last());
          }
        }
      }
    };
    return action;
  }

  // modules/actions/copy_entities.js
  function actionCopyEntities(ids, fromGraph) {
    var _copies = {};
    var action = function action2(graph3) {
      ids.forEach(function(id3) {
        fromGraph.entity(id3).copy(fromGraph, _copies);
      });
      for (var id2 in _copies) {
        graph3 = graph3.replace(_copies[id2]);
      }
      return graph3;
    };
    action.copies = function() {
      return _copies;
    };
    return action;
  }

  // modules/actions/delete_member.js
  function actionDeleteMember(relationId, memberIndex) {
    return function(graph3) {
      var relation = graph3.entity(relationId).removeMember(memberIndex);
      graph3 = graph3.replace(relation);
      if (relation.isDegenerate()) {
        graph3 = actionDeleteRelation(relation.id)(graph3);
      }
      return graph3;
    };
  }

  // modules/actions/discard_tags.js
  var nzCrap = {
    attribution: {
      "http://wiki.osm.org/wiki/Attribution#LINZ": "LINZ",
      "http://wiki.openstreetmap.org/wiki/Attribution#LINZ": "LINZ",
      "http://www.aucklandcouncil.govt.nz/EN/ratesbuildingproperty/propertyinformation/GIS_maps/Pages/opendata.aspx": "Auckland Council",
      "https://koordinates.com/publisher/wcc/": "Wellington City Council",
      "http://wiki.openstreetmap.org/wiki/Contributors#Statistics_New_Zealand": "Statistics NZ"
    },
    source_ref: {
      "http://www.linz.govt.nz/topography/topo-maps/": "LINZ",
      "http://www.linz.govt.nz/topography/topo-maps/index.aspx": "LINZ",
      "http://www.linz.govt.nz/about-linz/linz-data-service/dataset-information": "LINZ",
      "http://www.stats.govt.nz/browse_for_stats/people_and_communities/Geographic-areas/digital-boundary-files.aspx": "Statistics NZ"
    },
    source: {
      "LINZ & NZ Open GIS": "LINZ",
      "LINZ;NZ Open GIS": "LINZ",
      "LINZ/NZOGPS": "LINZ",
      "LINZ_NZ_Topo50_Gridless_Maps": "LINZ",
      "Sourced from the LINZ Data Service and licensed for reuse under CC BY 4.0": "LINZ"
    },
    "source:ele": {
      "LINZ Topo50": "LINZ",
      "Topo50 gridless": "LINZ"
    }
  };
  var json = {
    "linz2osm:objectid": true,
    "LINZ2OSM:dataset": true,
    "LINZ2OSM:source_version": true,
    "LINZ2OSM:layer": true,
    "LINZ:layer": true,
    "LINZ:source_version": true,
    "LINZ:dataset": true,
    "linz:garmin_type": true,
    "linz:garmin_road_class": true,
    "linz:sufi": true,
    "linz:RoadID": true,
    "seamark": true
  };
  function actionDiscardTags(difference, discardTags) {
    discardTags = discardTags || {};
    Object.assign(discardTags, json);
    return function(graph3) {
      difference.modified().forEach(checkTags);
      difference.created().forEach(checkTags);
      return graph3;
      function checkTags(entity2) {
        var keys3 = Object.keys(entity2.tags);
        var didDiscard = false;
        var didDiscardLinz = false;
        var tags = {};
        for (var i2 = 0; i2 < keys3.length; i2++) {
          var k = keys3[i2];
          var v = entity2.tags[k];
          if (discardTags[k] || !entity2.tags[k]) {
            didDiscard = true;
          } else if (k in nzCrap && v in nzCrap[k]) {
            didDiscard = true;
            didDiscardLinz = nzCrap[k][v];
          } else {
            tags[k] = entity2.tags[k];
          }
        }
        var anyLinzRefTags = tags["ref:linz:topo50_id"] || tags["ref:linz:place_id"] || tags["ref:linz:hydrographic_id"];
        if (didDiscardLinz && !anyLinzRefTags) {
          if (tags.source) {
            tags.source = _toConsumableArray(new Set([didDiscardLinz].concat(_toConsumableArray(tags.source.split(";"))))).join(";");
          } else {
            tags.source = didDiscardLinz;
          }
        }
        if (didDiscard) {
          graph3 = graph3.replace(entity2.update({
            tags: tags
          }));
        }
      }
    };
  }

  // modules/actions/disconnect.js
  function actionDisconnect(nodeId, newNodeId) {
    var wayIds;
    var action = function action2(graph3) {
      var node = graph3.entity(nodeId);
      var connections = action2.connections(graph3);
      connections.forEach(function(connection) {
        var way = graph3.entity(connection.wayID);
        var newNode = osmNode({
          id: newNodeId,
          loc: node.loc,
          tags: node.tags
        });
        graph3 = graph3.replace(newNode);
        if (connection.index === 0 && way.isArea()) {
          graph3 = graph3.replace(way.replaceNode(way.nodes[0], newNode.id));
        } else if (way.isClosed() && connection.index === way.nodes.length - 1) {
          graph3 = graph3.replace(way.unclose().addNode(newNode.id));
        } else {
          graph3 = graph3.replace(way.updateNode(newNode.id, connection.index));
        }
      });
      return graph3;
    };
    action.connections = function(graph3) {
      var candidates = [];
      var keeping = false;
      var parentWays2 = graph3.parentWays(graph3.entity(nodeId));
      var way, waynode;
      for (var i2 = 0; i2 < parentWays2.length; i2++) {
        way = parentWays2[i2];
        if (wayIds && wayIds.indexOf(way.id) === -1) {
          keeping = true;
          continue;
        }
        if (way.isArea() && way.nodes[0] === nodeId) {
          candidates.push({
            wayID: way.id,
            index: 0
          });
        } else {
          for (var j = 0; j < way.nodes.length; j++) {
            waynode = way.nodes[j];
            if (waynode === nodeId) {
              if (way.isClosed() && parentWays2.length > 1 && wayIds && wayIds.indexOf(way.id) !== -1 && j === way.nodes.length - 1) {
                continue;
              }
              candidates.push({
                wayID: way.id,
                index: j
              });
            }
          }
        }
      }
      if (keeping) {
        return candidates;
      } else {
        if (nodeId[1] !== "-" && candidates.length > 1 && candidates[0].wayID[1] === "-") {
          for (var pos = 1; pos < candidates.length; pos++) {
            if (candidates[pos].wayID[1] !== "-") {
              candidates.splice(pos, 1);
              return candidates;
            }
          }
        }
        return candidates.slice(1);
      }
    };
    action.disabled = function(graph3) {
      var connections = action.connections(graph3);
      if (connections.length === 0)
        return "not_connected";
      var parentWays2 = graph3.parentWays(graph3.entity(nodeId));
      var seenRelationIds = {};
      var sharedRelation;
      parentWays2.forEach(function(way) {
        var relations = graph3.parentRelations(way);
        relations.forEach(function(relation) {
          if (relation.id in seenRelationIds) {
            if (wayIds) {
              if (wayIds.indexOf(way.id) !== -1 || wayIds.indexOf(seenRelationIds[relation.id]) !== -1) {
                sharedRelation = relation;
              }
            } else {
              sharedRelation = relation;
            }
          } else {
            seenRelationIds[relation.id] = way.id;
          }
        });
      });
      if (sharedRelation)
        return "relation";
    };
    action.limitWays = function(val) {
      if (!arguments.length)
        return wayIds;
      wayIds = val;
      return action;
    };
    return action;
  }

  // modules/actions/extract.js
  function actionExtract(entityID, projection2) {
    var extractedNodeID;
    var action = function action2(graph3) {
      var entity2 = graph3.entity(entityID);
      if (entity2.type === "node") {
        return extractFromNode(entity2, graph3);
      }
      return extractFromWayOrRelation(entity2, graph3);
    };
    function extractFromNode(node, graph3) {
      extractedNodeID = node.id;
      var replacement = osmNode({
        loc: node.loc
      });
      graph3 = graph3.replace(replacement);
      graph3 = graph3.parentWays(node).reduce(function(accGraph, parentWay) {
        return accGraph.replace(parentWay.replaceNode(entityID, replacement.id));
      }, graph3);
      return graph3.parentRelations(node).reduce(function(accGraph, parentRel) {
        return accGraph.replace(parentRel.replaceMember(node, replacement));
      }, graph3);
    }
    function extractFromWayOrRelation(entity2, graph3) {
      var fromGeometry = entity2.geometry(graph3);
      var keysToCopyAndRetain = ["source", "wheelchair"];
      var keysToRetain = ["area"];
      var buildingKeysToRetain = ["architect", "building", "height", "layer"];
      var extractedLoc = path_default(projection2).centroid(entity2.asGeoJSON(graph3));
      extractedLoc = extractedLoc && projection2.invert(extractedLoc);
      if (!extractedLoc || !isFinite(extractedLoc[0]) || !isFinite(extractedLoc[1])) {
        extractedLoc = entity2.extent(graph3).center();
      }
      var indoorAreaValues = {
        area: true,
        corridor: true,
        elevator: true,
        level: true,
        room: true
      };
      var isBuilding = entity2.tags.building && entity2.tags.building !== "no" || entity2.tags["building:part"] && entity2.tags["building:part"] !== "no";
      var isIndoorArea = fromGeometry === "area" && entity2.tags.indoor && indoorAreaValues[entity2.tags.indoor];
      var entityTags = Object.assign({}, entity2.tags);
      var pointTags = {};
      for (var key in entityTags) {
        if (entity2.type === "relation" && key === "type") {
          continue;
        }
        if (keysToRetain.indexOf(key) !== -1) {
          continue;
        }
        if (isBuilding) {
          if (buildingKeysToRetain.indexOf(key) !== -1 || key.match(/^building:.{1,}/) || key.match(/^roof:.{1,}/))
            continue;
        }
        if (isIndoorArea && key === "indoor") {
          continue;
        }
        pointTags[key] = entityTags[key];
        if (keysToCopyAndRetain.indexOf(key) !== -1 || key.match(/^addr:.{1,}/)) {
          continue;
        } else if (isIndoorArea && key === "level") {
          continue;
        }
        delete entityTags[key];
      }
      if (!isBuilding && !isIndoorArea && fromGeometry === "area") {
        entityTags.area = "yes";
      }
      var replacement = osmNode({
        loc: extractedLoc,
        tags: pointTags
      });
      graph3 = graph3.replace(replacement);
      extractedNodeID = replacement.id;
      return graph3.replace(entity2.update({
        tags: entityTags
      }));
    }
    action.getExtractedNodeID = function() {
      return extractedNodeID;
    };
    return action;
  }

  // modules/actions/join.js
  function actionJoin(ids) {
    function groupEntitiesByGeometry(graph3) {
      var entities = ids.map(function(id2) {
        return graph3.entity(id2);
      });
      return Object.assign({
        line: []
      }, utilArrayGroupBy(entities, function(entity2) {
        return entity2.geometry(graph3);
      }));
    }
    var action = function action2(graph3) {
      var ways = ids.map(graph3.entity, graph3);
      ways.sort(function(a, b2) {
        var aSided = a.isSided();
        var bSided = b2.isSided();
        return aSided && !bSided ? -1 : bSided && !aSided ? 1 : 0;
      });
      var survivorID = (ways.filter(function(way) {
        return !way.isNew();
      }).sort(function(a, b2) {
        return +a.osmId() - +b2.osmId();
      })[0] || ways[0]).id;
      var sequences4 = osmJoinWays(ways, graph3);
      var joined = sequences4[0];
      graph3 = sequences4.actions.reduce(function(g2, action3) {
        return action3(g2);
      }, graph3);
      var survivor = graph3.entity(survivorID);
      survivor = survivor.update({
        nodes: joined.nodes.map(function(n2) {
          return n2.id;
        })
      });
      graph3 = graph3.replace(survivor);
      joined.forEach(function(way) {
        if (way.id === survivorID)
          return;
        graph3.parentRelations(way).forEach(function(parent2) {
          graph3 = graph3.replace(parent2.replaceMember(way, survivor));
        });
        survivor = survivor.mergeTags(way.tags);
        graph3 = graph3.replace(survivor);
        graph3 = actionDeleteWay(way.id)(graph3);
      });
      var tagnosticRoadCombine = corePreferences("rapid-internal-feature.tagnosticRoadCombine") === "true";
      if (tagnosticRoadCombine && ways.length && ways[0].tags.highway) {
        var newTags = Object.assign({}, survivor.tags);
        newTags.highway = ways[0].tags.highway;
        survivor = survivor.update({
          tags: newTags
        });
        graph3 = graph3.replace(survivor);
      }
      function checkForSimpleMultipolygon() {
        if (!survivor.isClosed())
          return;
        var multipolygons = graph3.parentMultipolygons(survivor).filter(function(multipolygon3) {
          return multipolygon3.members.length === 1;
        });
        if (multipolygons.length !== 1)
          return;
        var multipolygon2 = multipolygons[0];
        for (var key in survivor.tags) {
          if (multipolygon2.tags[key] && multipolygon2.tags[key] !== survivor.tags[key])
            return;
        }
        survivor = survivor.mergeTags(multipolygon2.tags);
        graph3 = graph3.replace(survivor);
        graph3 = actionDeleteRelation(multipolygon2.id, true)(graph3);
        var tags = Object.assign({}, survivor.tags);
        if (survivor.geometry(graph3) !== "area") {
          tags.area = "yes";
        }
        delete tags.type;
        survivor = survivor.update({
          tags: tags
        });
        graph3 = graph3.replace(survivor);
      }
      checkForSimpleMultipolygon();
      return graph3;
    };
    action.resultingWayNodesLength = function(graph3) {
      return ids.reduce(function(count, id2) {
        return count + graph3.entity(id2).nodes.length;
      }, 0) - ids.length - 1;
    };
    action.disabled = function(graph3) {
      var geometries = groupEntitiesByGeometry(graph3);
      if (ids.length < 2 || ids.length !== geometries.line.length) {
        return "not_eligible";
      }
      var joined = osmJoinWays(ids.map(graph3.entity, graph3), graph3);
      if (joined.length > 1) {
        return "not_adjacent";
      }
      var i2;
      var sortedParentRelations = function sortedParentRelations2(id2) {
        return graph3.parentRelations(graph3.entity(id2)).filter(function(rel) {
          return !rel.isRestriction() && !rel.isConnectivity();
        }).sort(function(a, b2) {
          return a.id - b2.id;
        });
      };
      var relsA = sortedParentRelations(ids[0]);
      for (i2 = 1; i2 < ids.length; i2++) {
        var relsB = sortedParentRelations(ids[i2]);
        if (!utilArrayIdentical(relsA, relsB)) {
          return "conflicting_relations";
        }
      }
      for (i2 = 0; i2 < ids.length - 1; i2++) {
        for (var j = i2 + 1; j < ids.length; j++) {
          var path1 = graph3.childNodes(graph3.entity(ids[i2])).map(function(e3) {
            return e3.loc;
          });
          var path2 = graph3.childNodes(graph3.entity(ids[j])).map(function(e3) {
            return e3.loc;
          });
          var intersections = geomPathIntersections(path1, path2);
          var common = utilArrayIntersection(joined[0].nodes.map(function(n2) {
            return n2.loc.toString();
          }), intersections.map(function(n2) {
            return n2.toString();
          }));
          if (common.length !== intersections.length) {
            return "paths_intersect";
          }
        }
      }
      var nodeIds = joined[0].nodes.map(function(n2) {
        return n2.id;
      }).slice(1, -1);
      var relation;
      var tags = {};
      var conflicting = false;
      joined[0].forEach(function(way) {
        var parents = graph3.parentRelations(way);
        parents.forEach(function(parent2) {
          if ((parent2.isRestriction() || parent2.isConnectivity()) && parent2.members.some(function(m) {
            return nodeIds.indexOf(m.id) >= 0;
          })) {
            relation = parent2;
          }
        });
        for (var k in way.tags) {
          if (!(k in tags)) {
            tags[k] = way.tags[k];
          } else if (tags[k] && osmIsInterestingTag(k) && tags[k] !== way.tags[k]) {
            conflicting = true;
            var tagnosticRoadCombine = corePreferences("rapid-internal-feature.tagnosticRoadCombine") === "true";
            if (k === "highway" && tagnosticRoadCombine && !window.mocha) {
              conflicting = false;
            }
          }
        }
      });
      if (relation) {
        return relation.isRestriction() ? "restriction" : "connectivity";
      }
      if (conflicting) {
        return "conflicting_tags";
      }
    };
    return action;
  }

  // modules/actions/merge.js
  function actionMerge(ids) {
    function groupEntitiesByGeometry(graph3) {
      var entities = ids.map(function(id2) {
        return graph3.entity(id2);
      });
      return Object.assign({
        point: [],
        area: [],
        line: [],
        relation: []
      }, utilArrayGroupBy(entities, function(entity2) {
        return entity2.geometry(graph3);
      }));
    }
    var action = function action2(graph3) {
      var geometries = groupEntitiesByGeometry(graph3);
      var target = geometries.area[0] || geometries.line[0];
      var points = geometries.point;
      points.forEach(function(point5) {
        target = target.mergeTags(point5.tags);
        graph3 = graph3.replace(target);
        graph3.parentRelations(point5).forEach(function(parent2) {
          graph3 = graph3.replace(parent2.replaceMember(point5, target));
        });
        var nodes = utilArrayUniq(graph3.childNodes(target));
        var removeNode2 = point5;
        for (var i2 = 0; i2 < nodes.length; i2++) {
          var node = nodes[i2];
          if (graph3.parentWays(node).length > 1 || graph3.parentRelations(node).length || node.hasInterestingTags()) {
            continue;
          }
          graph3 = graph3.replace(point5.update({
            tags: {},
            loc: node.loc
          }));
          target = target.replaceNode(node.id, point5.id);
          graph3 = graph3.replace(target);
          removeNode2 = node;
          break;
        }
        graph3 = graph3.remove(removeNode2);
      });
      if (target.tags.area === "yes") {
        var tags = Object.assign({}, target.tags);
        delete tags.area;
        if (osmTagSuggestingArea(tags)) {
          target = target.update({
            tags: tags
          });
          graph3 = graph3.replace(target);
        }
      }
      return graph3;
    };
    action.disabled = function(graph3) {
      var geometries = groupEntitiesByGeometry(graph3);
      if (geometries.point.length === 0 || geometries.area.length + geometries.line.length !== 1 || geometries.relation.length !== 0) {
        return "not_eligible";
      }
    };
    return action;
  }

  // modules/actions/merge_nodes.js
  function actionMergeNodes(nodeIDs, loc) {
    function chooseLoc(graph3) {
      if (!nodeIDs.length)
        return null;
      var sum = [0, 0];
      var interestingCount = 0;
      var interestingLoc;
      for (var i2 = 0; i2 < nodeIDs.length; i2++) {
        var node = graph3.entity(nodeIDs[i2]);
        if (node.hasInterestingTags()) {
          interestingLoc = ++interestingCount === 1 ? node.loc : null;
        }
        sum = vecAdd(sum, node.loc);
      }
      return interestingLoc || vecScale(sum, 1 / nodeIDs.length);
    }
    var action = function action2(graph3) {
      if (nodeIDs.length < 2)
        return graph3;
      var toLoc = loc;
      if (!toLoc) {
        toLoc = chooseLoc(graph3);
      }
      for (var i2 = 0; i2 < nodeIDs.length; i2++) {
        var node = graph3.entity(nodeIDs[i2]);
        if (node.loc !== toLoc) {
          graph3 = graph3.replace(node.move(toLoc));
        }
      }
      return actionConnect(nodeIDs)(graph3);
    };
    action.disabled = function(graph3) {
      if (nodeIDs.length < 2)
        return "not_eligible";
      for (var i2 = 0; i2 < nodeIDs.length; i2++) {
        var entity2 = graph3.entity(nodeIDs[i2]);
        if (entity2.type !== "node")
          return "not_eligible";
      }
      return actionConnect(nodeIDs).disabled(graph3);
    };
    return action;
  }

  // modules/osm/changeset.js
  function osmChangeset() {
    if (!(this instanceof osmChangeset)) {
      return new osmChangeset().initialize(arguments);
    } else if (arguments.length) {
      this.initialize(arguments);
    }
  }
  osmEntity.changeset = osmChangeset;
  osmChangeset.prototype = Object.create(osmEntity.prototype);
  Object.assign(osmChangeset.prototype, {
    type: "changeset",
    extent: function extent3() {
      return new new Extent()();
    },
    geometry: function geometry3() {
      return "changeset";
    },
    asJXON: function asJXON3() {
      return {
        osm: {
          changeset: {
            tag: Object.keys(this.tags).map(function(k) {
              return {
                "@k": k,
                "@v": this.tags[k]
              };
            }, this),
            "@version": 0.6,
            "@generator": "iD"
          }
        }
      };
    },
    osmChangeJXON: function osmChangeJXON(changes) {
      var changeset_id = this.id;
      function nest(x2, order) {
        var groups = {};
        for (var i2 = 0; i2 < x2.length; i2++) {
          var tagName = Object.keys(x2[i2])[0];
          if (!groups[tagName])
            groups[tagName] = [];
          groups[tagName].push(x2[i2][tagName]);
        }
        var ordered = {};
        order.forEach(function(o2) {
          if (groups[o2])
            ordered[o2] = groups[o2];
        });
        return ordered;
      }
      function sort(changes2) {
        function resolve(item) {
          return relations.find(function(relation2) {
            return item.keyAttributes.type === "relation" && item.keyAttributes.ref === relation2["@id"];
          });
        }
        function isNew3(item) {
          return !sorted[item["@id"]] && !processing.find(function(proc) {
            return proc["@id"] === item["@id"];
          });
        }
        var processing = [];
        var sorted = {};
        var relations = changes2.relation;
        if (!relations)
          return changes2;
        for (var i2 = 0; i2 < relations.length; i2++) {
          var relation = relations[i2];
          if (!sorted[relation["@id"]]) {
            processing.push(relation);
          }
          while (processing.length > 0) {
            var next = processing[0], deps = next.member.map(resolve).filter(Boolean).filter(isNew3);
            if (deps.length === 0) {
              sorted[next["@id"]] = next;
              processing.shift();
            } else {
              processing = deps.concat(processing);
            }
          }
        }
        changes2.relation = Object.values(sorted);
        return changes2;
      }
      function rep(entity2) {
        return entity2.asJXON(changeset_id);
      }
      return {
        osmChange: {
          "@version": 0.6,
          "@generator": "iD",
          "create": sort(nest(changes.created.map(rep), ["node", "way", "relation"])),
          "modify": nest(changes.modified.map(rep), ["node", "way", "relation"]),
          "delete": Object.assign(nest(changes.deleted.map(rep), ["relation", "way", "node"]), {
            "@if-unused": true
          })
        }
      };
    },
    asGeoJSON: function asGeoJSON3() {
      return {};
    }
  });

  // modules/osm/note.js
  function osmNote() {
    if (!(this instanceof osmNote)) {
      return new osmNote().initialize(arguments);
    } else if (arguments.length) {
      this.initialize(arguments);
    }
  }
  osmNote.id = function() {
    return osmNote.id.next--;
  };
  osmNote.id.next = -1;
  Object.assign(osmNote.prototype, {
    type: "note",
    initialize: function initialize2(sources) {
      for (var i2 = 0; i2 < sources.length; ++i2) {
        var source = sources[i2];
        for (var prop in source) {
          if (Object.prototype.hasOwnProperty.call(source, prop)) {
            if (source[prop] === void 0) {
              delete this[prop];
            } else {
              this[prop] = source[prop];
            }
          }
        }
      }
      if (!this.id) {
        this.id = osmNote.id().toString();
      }
      return this;
    },
    extent: function extent4() {
      return new Extent(this.loc);
    },
    update: function update2(attrs) {
      return osmNote(this, attrs);
    },
    isNew: function isNew2() {
      return this.id < 0;
    },
    move: function move2(loc) {
      return this.update({
        loc: loc
      });
    }
  });

  // modules/osm/relation.js
  function osmRelation() {
    if (!(this instanceof osmRelation)) {
      return new osmRelation().initialize(arguments);
    } else if (arguments.length) {
      this.initialize(arguments);
    }
  }
  osmEntity.relation = osmRelation;
  osmRelation.prototype = Object.create(osmEntity.prototype);
  osmRelation.creationOrder = function(a, b2) {
    var aId = parseInt(osmEntity.id.toOSM(a.id), 10);
    var bId = parseInt(osmEntity.id.toOSM(b2.id), 10);
    if (aId < 0 || bId < 0)
      return aId - bId;
    return bId - aId;
  };
  Object.assign(osmRelation.prototype, {
    type: "relation",
    members: [],
    copy: function copy5(resolver, copies) {
      if (copies[this.id])
        return copies[this.id];
      var copy7 = osmEntity.prototype.copy.call(this, resolver, copies);
      var members = this.members.map(function(member) {
        return Object.assign({}, member, {
          id: resolver.entity(member.id).copy(resolver, copies).id
        });
      });
      copy7 = copy7.update({
        members: members
      });
      copies[this.id] = copy7;
      return copy7;
    },
    extent: function extent5(resolver, memo) {
      return resolver.transient(this, "extent", function() {
        if (memo && memo[this.id])
          return new Extent();
        memo = memo || {};
        memo[this.id] = true;
        var extent6 = new Extent();
        for (var i2 = 0; i2 < this.members.length; i2++) {
          var member = resolver.hasEntity(this.members[i2].id);
          if (member) {
            extent6 = extent6.extend(member.extent(resolver, memo));
          }
        }
        return extent6;
      });
    },
    geometry: function geometry4(graph3) {
      return graph3.transient(this, "geometry", function() {
        return this.isMultipolygon() ? "area" : "relation";
      });
    },
    isDegenerate: function isDegenerate4() {
      return this.members.length === 0;
    },
    indexedMembers: function indexedMembers() {
      var result6 = new Array(this.members.length);
      for (var i2 = 0; i2 < this.members.length; i2++) {
        result6[i2] = Object.assign({}, this.members[i2], {
          index: i2
        });
      }
      return result6;
    },
    memberByRole: function memberByRole(role) {
      for (var i2 = 0; i2 < this.members.length; i2++) {
        if (this.members[i2].role === role) {
          return Object.assign({}, this.members[i2], {
            index: i2
          });
        }
      }
    },
    membersByRole: function membersByRole(role) {
      var result6 = [];
      for (var i2 = 0; i2 < this.members.length; i2++) {
        if (this.members[i2].role === role) {
          result6.push(Object.assign({}, this.members[i2], {
            index: i2
          }));
        }
      }
      return result6;
    },
    memberById: function memberById(id2) {
      for (var i2 = 0; i2 < this.members.length; i2++) {
        if (this.members[i2].id === id2) {
          return Object.assign({}, this.members[i2], {
            index: i2
          });
        }
      }
    },
    memberByIdAndRole: function memberByIdAndRole(id2, role) {
      for (var i2 = 0; i2 < this.members.length; i2++) {
        if (this.members[i2].id === id2 && this.members[i2].role === role) {
          return Object.assign({}, this.members[i2], {
            index: i2
          });
        }
      }
    },
    addMember: function addMember(member, index) {
      var members = this.members.slice();
      members.splice(index === void 0 ? members.length : index, 0, member);
      return this.update({
        members: members
      });
    },
    updateMember: function updateMember(member, index) {
      var members = this.members.slice();
      members.splice(index, 1, Object.assign({}, members[index], member));
      return this.update({
        members: members
      });
    },
    removeMember: function removeMember(index) {
      var members = this.members.slice();
      members.splice(index, 1);
      return this.update({
        members: members
      });
    },
    removeMembersWithID: function removeMembersWithID(id2) {
      var members = this.members.filter(function(m) {
        return m.id !== id2;
      });
      return this.update({
        members: members
      });
    },
    moveMember: function moveMember(fromIndex, toIndex) {
      var members = this.members.slice();
      members.splice(toIndex, 0, members.splice(fromIndex, 1)[0]);
      return this.update({
        members: members
      });
    },
    replaceMember: function replaceMember(needle, replacement, keepDuplicates) {
      if (!this.memberById(needle.id))
        return this;
      var members = [];
      for (var i2 = 0; i2 < this.members.length; i2++) {
        var member = this.members[i2];
        if (member.id !== needle.id) {
          members.push(member);
        } else if (keepDuplicates || !this.memberByIdAndRole(replacement.id, member.role)) {
          members.push({
            id: replacement.id,
            type: replacement.type,
            role: member.role
          });
        }
      }
      return this.update({
        members: members
      });
    },
    asJXON: function asJXON4(changeset_id) {
      var r = {
        relation: {
          "@id": this.osmId(),
          "@version": this.version || 0,
          member: this.members.map(function(member) {
            return {
              keyAttributes: {
                type: member.type,
                role: member.role,
                ref: osmEntity.id.toOSM(member.id)
              }
            };
          }, this),
          tag: Object.keys(this.tags).map(function(k) {
            return {
              keyAttributes: {
                k: k,
                v: this.tags[k]
              }
            };
          }, this)
        }
      };
      if (changeset_id) {
        r.relation["@changeset"] = changeset_id;
      }
      return r;
    },
    asGeoJSON: function asGeoJSON4(resolver) {
      return resolver.transient(this, "GeoJSON", function() {
        if (this.isMultipolygon()) {
          return {
            type: "MultiPolygon",
            coordinates: this.multipolygon(resolver)
          };
        } else {
          return {
            type: "FeatureCollection",
            properties: this.tags,
            features: this.members.map(function(member) {
              return Object.assign({
                role: member.role
              }, resolver.entity(member.id).asGeoJSON(resolver));
            })
          };
        }
      });
    },
    area: function area2(resolver) {
      return resolver.transient(this, "area", function() {
        return area_default(this.asGeoJSON(resolver));
      });
    },
    isMultipolygon: function isMultipolygon() {
      return this.tags.type === "multipolygon";
    },
    isComplete: function isComplete(resolver) {
      for (var i2 = 0; i2 < this.members.length; i2++) {
        if (!resolver.hasEntity(this.members[i2].id)) {
          return false;
        }
      }
      return true;
    },
    hasFromViaTo: function hasFromViaTo() {
      return this.members.some(function(m) {
        return m.role === "from";
      }) && this.members.some(function(m) {
        return m.role === "via";
      }) && this.members.some(function(m) {
        return m.role === "to";
      });
    },
    isRestriction: function isRestriction() {
      return !!(this.tags.type && this.tags.type.match(/^restriction:?/));
    },
    isValidRestriction: function isValidRestriction() {
      if (!this.isRestriction())
        return false;
      var froms = this.members.filter(function(m) {
        return m.role === "from";
      });
      var vias = this.members.filter(function(m) {
        return m.role === "via";
      });
      var tos = this.members.filter(function(m) {
        return m.role === "to";
      });
      if (froms.length !== 1 && this.tags.restriction !== "no_entry")
        return false;
      if (froms.some(function(m) {
        return m.type !== "way";
      }))
        return false;
      if (tos.length !== 1 && this.tags.restriction !== "no_exit")
        return false;
      if (tos.some(function(m) {
        return m.type !== "way";
      }))
        return false;
      if (vias.length === 0)
        return false;
      if (vias.length > 1 && vias.some(function(m) {
        return m.type !== "way";
      }))
        return false;
      return true;
    },
    isConnectivity: function isConnectivity() {
      return !!(this.tags.type && this.tags.type.match(/^connectivity:?/));
    },
    multipolygon: function multipolygon(resolver) {
      var outers = this.members.filter(function(m) {
        return (m.role || "outer") === "outer";
      });
      var inners = this.members.filter(function(m) {
        return m.role === "inner";
      });
      outers = osmJoinWays(outers, resolver);
      inners = osmJoinWays(inners, resolver);
      var sequenceToLineString = function sequenceToLineString2(sequence) {
        if (sequence.nodes.length > 2 && sequence.nodes[0] !== sequence.nodes[sequence.nodes.length - 1]) {
          sequence.nodes.push(sequence.nodes[0]);
        }
        return sequence.nodes.map(function(node) {
          return node.loc;
        });
      };
      outers = outers.map(sequenceToLineString);
      inners = inners.map(sequenceToLineString);
      var result6 = outers.map(function(o3) {
        return [area_default({
          type: "Polygon",
          coordinates: [o3]
        }) > 2 * Math.PI ? o3.reverse() : o3];
      });
      function findOuter(inner2) {
        var o3, outer;
        for (o3 = 0; o3 < outers.length; o3++) {
          outer = outers[o3];
          if (geomPolygonContainsPolygon(outer, inner2)) {
            return o3;
          }
        }
        for (o3 = 0; o3 < outers.length; o3++) {
          outer = outers[o3];
          if (geomPolygonIntersectsPolygon(outer, inner2, false)) {
            return o3;
          }
        }
      }
      for (var i2 = 0; i2 < inners.length; i2++) {
        var inner = inners[i2];
        if (area_default({
          type: "Polygon",
          coordinates: [inner]
        }) < 2 * Math.PI) {
          inner = inner.reverse();
        }
        var o2 = findOuter(inners[i2]);
        if (o2 !== void 0) {
          result6[o2].push(inners[i2]);
        } else {
          result6.push([inners[i2]]);
        }
      }
      return result6;
    }
  });

  // modules/osm/qa_item.js
  var QAItem = /* @__PURE__ */ function() {
    function QAItem2(loc, service, itemType, id2, props) {
      _classCallCheck(this, QAItem2);
      this.loc = loc;
      this.service = service.title;
      this.itemType = itemType;
      this.id = id2 ? id2 : "".concat(QAItem2.id());
      this.update(props);
      if (service && typeof service.getIcon === "function") {
        this.icon = service.getIcon(itemType);
      }
    }
    _createClass(QAItem2, [{
      key: "update",
      value: function update4(props) {
        var _this = this;
        var loc = this.loc, service = this.service, itemType = this.itemType, id2 = this.id;
        Object.keys(props).forEach(function(prop) {
          return _this[prop] = props[prop];
        });
        this.loc = loc;
        this.service = service;
        this.itemType = itemType;
        this.id = id2;
        return this;
      }
    }], [{
      key: "id",
      value: function id2() {
        return this.nextId--;
      }
    }]);
    return QAItem2;
  }();
  QAItem.nextId = -1;

  // modules/actions/split.js
  function actionSplit(nodeIds, newWayIds) {
    if (typeof nodeIds === "string")
      nodeIds = [nodeIds];
    var _wayIDs;
    var _keepHistoryOn = "longest";
    var _createdWayIDs = [];
    function dist(graph3, nA, nB) {
      var locA = graph3.entity(nA).loc;
      var locB = graph3.entity(nB).loc;
      var epsilon3 = 1e-6;
      return locA && locB ? geoSphericalDistance(locA, locB) : epsilon3;
    }
    function splitArea(nodes, idxA, graph3) {
      var lengths = new Array(nodes.length);
      var length;
      var i2;
      var best = 0;
      var idxB;
      function wrap2(index) {
        return utilWrap(index, nodes.length);
      }
      length = 0;
      for (i2 = wrap2(idxA + 1); i2 !== idxA; i2 = wrap2(i2 + 1)) {
        length += dist(graph3, nodes[i2], nodes[wrap2(i2 - 1)]);
        lengths[i2] = length;
      }
      length = 0;
      for (i2 = wrap2(idxA - 1); i2 !== idxA; i2 = wrap2(i2 - 1)) {
        length += dist(graph3, nodes[i2], nodes[wrap2(i2 + 1)]);
        if (length < lengths[i2]) {
          lengths[i2] = length;
        }
      }
      for (i2 = 0; i2 < nodes.length; i2++) {
        var cost = lengths[i2] / dist(graph3, nodes[idxA], nodes[i2]);
        if (cost > best) {
          idxB = i2;
          best = cost;
        }
      }
      return idxB;
    }
    function totalLengthBetweenNodes(graph3, nodes) {
      var totalLength = 0;
      for (var i2 = 0; i2 < nodes.length - 1; i2++) {
        totalLength += dist(graph3, nodes[i2], nodes[i2 + 1]);
      }
      return totalLength;
    }
    function split(graph3, nodeId, wayA, newWayId) {
      var wayB = osmWay({
        id: newWayId,
        tags: wayA.tags
      });
      var origNodes = wayA.nodes.slice();
      var nodesA;
      var nodesB;
      var isArea2 = wayA.isArea();
      var isOuter = osmIsOldMultipolygonOuterMember(wayA, graph3);
      if (wayA.isClosed()) {
        var nodes = wayA.nodes.slice(0, -1);
        var idxA = nodes.indexOf(nodeId);
        var idxB = splitArea(nodes, idxA, graph3);
        if (idxB < idxA) {
          nodesA = nodes.slice(idxA).concat(nodes.slice(0, idxB + 1));
          nodesB = nodes.slice(idxB, idxA + 1);
        } else {
          nodesA = nodes.slice(idxA, idxB + 1);
          nodesB = nodes.slice(idxB).concat(nodes.slice(0, idxA + 1));
        }
      } else {
        var idx = wayA.nodes.indexOf(nodeId, 1);
        nodesA = wayA.nodes.slice(0, idx + 1);
        nodesB = wayA.nodes.slice(idx);
      }
      var lengthA = totalLengthBetweenNodes(graph3, nodesA);
      var lengthB = totalLengthBetweenNodes(graph3, nodesB);
      if (_keepHistoryOn === "longest" && lengthB > lengthA) {
        wayA = wayA.update({
          nodes: nodesB
        });
        wayB = wayB.update({
          nodes: nodesA
        });
        var temp = lengthA;
        lengthA = lengthB;
        lengthB = temp;
      } else {
        wayA = wayA.update({
          nodes: nodesA
        });
        wayB = wayB.update({
          nodes: nodesB
        });
      }
      if (wayA.tags.step_count) {
        var stepCount = parseFloat(wayA.tags.step_count);
        if (stepCount && isFinite(stepCount) && stepCount > 0 && Math.round(stepCount) === stepCount) {
          var tagsA = Object.assign({}, wayA.tags);
          var tagsB = Object.assign({}, wayB.tags);
          var ratioA = lengthA / (lengthA + lengthB);
          var countA = Math.round(stepCount * ratioA);
          tagsA.step_count = countA.toString();
          tagsB.step_count = (stepCount - countA).toString();
          wayA = wayA.update({
            tags: tagsA
          });
          wayB = wayB.update({
            tags: tagsB
          });
        }
      }
      graph3 = graph3.replace(wayA);
      graph3 = graph3.replace(wayB);
      graph3.parentRelations(wayA).forEach(function(relation) {
        var member;
        if (relation.hasFromViaTo()) {
          var f2 = relation.memberByRole("from");
          var v = relation.membersByRole("via");
          var t = relation.memberByRole("to");
          var i2;
          if (f2.id === wayA.id || t.id === wayA.id) {
            var keepB = false;
            if (v.length === 1 && v[0].type === "node") {
              keepB = wayB.contains(v[0].id);
            } else {
              for (i2 = 0; i2 < v.length; i2++) {
                if (v[i2].type === "way") {
                  var wayVia = graph3.hasEntity(v[i2].id);
                  if (wayVia && utilArrayIntersection(wayB.nodes, wayVia.nodes).length) {
                    keepB = true;
                    break;
                  }
                }
              }
            }
            if (keepB) {
              relation = relation.replaceMember(wayA, wayB);
              graph3 = graph3.replace(relation);
            }
          } else {
            for (i2 = 0; i2 < v.length; i2++) {
              if (v[i2].type === "way" && v[i2].id === wayA.id) {
                member = {
                  id: wayB.id,
                  type: "way",
                  role: "via"
                };
                graph3 = actionAddMember(relation.id, member, v[i2].index + 1)(graph3);
                break;
              }
            }
          }
        } else {
          if (relation === isOuter) {
            graph3 = graph3.replace(relation.mergeTags(wayA.tags));
            graph3 = graph3.replace(wayA.update({
              tags: {}
            }));
            graph3 = graph3.replace(wayB.update({
              tags: {}
            }));
          }
          member = {
            id: wayB.id,
            type: "way",
            role: relation.memberById(wayA.id).role
          };
          var insertPair = {
            originalID: wayA.id,
            insertedID: wayB.id,
            nodes: origNodes
          };
          graph3 = actionAddMember(relation.id, member, void 0, insertPair)(graph3);
        }
      });
      if (!isOuter && isArea2) {
        var multipolygon2 = osmRelation({
          tags: Object.assign({}, wayA.tags, {
            type: "multipolygon"
          }),
          members: [{
            id: wayA.id,
            role: "outer",
            type: "way"
          }, {
            id: wayB.id,
            role: "outer",
            type: "way"
          }]
        });
        graph3 = graph3.replace(multipolygon2);
        graph3 = graph3.replace(wayA.update({
          tags: {}
        }));
        graph3 = graph3.replace(wayB.update({
          tags: {}
        }));
      }
      _createdWayIDs.push(wayB.id);
      return graph3;
    }
    var action = function action2(graph3) {
      _createdWayIDs = [];
      var newWayIndex = 0;
      for (var i2 = 0; i2 < nodeIds.length; i2++) {
        var nodeId = nodeIds[i2];
        var candidates = action2.waysForNode(nodeId, graph3);
        for (var j = 0; j < candidates.length; j++) {
          graph3 = split(graph3, nodeId, candidates[j], newWayIds && newWayIds[newWayIndex]);
          newWayIndex += 1;
        }
      }
      return graph3;
    };
    action.getCreatedWayIDs = function() {
      return _createdWayIDs;
    };
    action.waysForNode = function(nodeId, graph3) {
      var node = graph3.entity(nodeId);
      var splittableParents = graph3.parentWays(node).filter(isSplittable);
      if (!_wayIDs) {
        var hasLine = splittableParents.some(function(parent2) {
          return parent2.geometry(graph3) === "line";
        });
        if (hasLine) {
          return splittableParents.filter(function(parent2) {
            return parent2.geometry(graph3) === "line";
          });
        }
      }
      return splittableParents;
      function isSplittable(parent2) {
        if (_wayIDs && _wayIDs.indexOf(parent2.id) === -1)
          return false;
        if (parent2.isClosed())
          return true;
        for (var i2 = 1; i2 < parent2.nodes.length - 1; i2++) {
          if (parent2.nodes[i2] === nodeId)
            return true;
        }
        return false;
      }
    };
    action.ways = function(graph3) {
      return utilArrayUniq([].concat.apply([], nodeIds.map(function(nodeId) {
        return action.waysForNode(nodeId, graph3);
      })));
    };
    action.disabled = function(graph3) {
      for (var i2 = 0; i2 < nodeIds.length; i2++) {
        var nodeId = nodeIds[i2];
        var candidates = action.waysForNode(nodeId, graph3);
        if (candidates.length === 0 || _wayIDs && _wayIDs.length !== candidates.length) {
          return "not_eligible";
        }
      }
    };
    action.limitWays = function(val) {
      if (!arguments.length)
        return _wayIDs;
      _wayIDs = val;
      return action;
    };
    action.keepHistoryOn = function(val) {
      if (!arguments.length)
        return _keepHistoryOn;
      _keepHistoryOn = val;
      return action;
    };
    return action;
  }

  // modules/core/graph.js
  function coreGraph(other, mutable) {
    if (!(this instanceof coreGraph))
      return new coreGraph(other, mutable);
    if (other instanceof coreGraph) {
      var base2 = other.base();
      this.entities = Object.assign(Object.create(base2.entities), other.entities);
      this._parentWays = Object.assign(Object.create(base2.parentWays), other._parentWays);
      this._parentRels = Object.assign(Object.create(base2.parentRels), other._parentRels);
    } else {
      this.entities = Object.create({});
      this._parentWays = Object.create({});
      this._parentRels = Object.create({});
      this.rebase(other || [], [this]);
    }
    this.transients = {};
    this._childNodes = {};
    this.frozen = !mutable;
  }
  coreGraph.prototype = {
    hasEntity: function hasEntity(id2) {
      return this.entities[id2];
    },
    entity: function entity(id2) {
      var entity2 = this.entities[id2];
      if (!entity2) {
        entity2 = this.entities.__proto__[id2];
      }
      if (!entity2) {
        throw new Error("entity " + id2 + " not found");
      }
      return entity2;
    },
    geometry: function geometry5(id2) {
      return this.entity(id2).geometry(this);
    },
    transient: function transient(entity2, key, fn) {
      var id2 = entity2.id;
      var transients = this.transients[id2] || (this.transients[id2] = {});
      if (transients[key] !== void 0) {
        return transients[key];
      }
      transients[key] = fn.call(entity2);
      return transients[key];
    },
    parentWays: function parentWays(entity2) {
      var parents = this._parentWays[entity2.id];
      var result6 = [];
      if (parents) {
        parents.forEach(function(id2) {
          result6.push(this.entity(id2));
        }, this);
      }
      return result6;
    },
    isPoi: function isPoi(entity2) {
      var parents = this._parentWays[entity2.id];
      return !parents || parents.size === 0;
    },
    isShared: function isShared(entity2) {
      var parents = this._parentWays[entity2.id];
      return parents && parents.size > 1;
    },
    parentRelations: function parentRelations(entity2) {
      var parents = this._parentRels[entity2.id];
      var result6 = [];
      if (parents) {
        parents.forEach(function(id2) {
          result6.push(this.entity(id2));
        }, this);
      }
      return result6;
    },
    parentMultipolygons: function parentMultipolygons(entity2) {
      return this.parentRelations(entity2).filter(function(relation) {
        return relation.isMultipolygon();
      });
    },
    childNodes: function childNodes(entity2) {
      if (this._childNodes[entity2.id])
        return this._childNodes[entity2.id];
      if (!entity2.nodes)
        return [];
      var nodes = [];
      for (var i2 = 0; i2 < entity2.nodes.length; i2++) {
        nodes[i2] = this.entity(entity2.nodes[i2]);
      }
      if (debug)
        Object.freeze(nodes);
      this._childNodes[entity2.id] = nodes;
      return this._childNodes[entity2.id];
    },
    base: function base() {
      return {
        "entities": Object.getPrototypeOf(this.entities),
        "parentWays": Object.getPrototypeOf(this._parentWays),
        "parentRels": Object.getPrototypeOf(this._parentRels)
      };
    },
    rebase: function rebase(entities, stack, force) {
      var base2 = this.base();
      var i2, j, k, id2;
      for (i2 = 0; i2 < entities.length; i2++) {
        var entity2 = entities[i2];
        if (!entity2.visible || !force && base2.entities[entity2.id])
          continue;
        base2.entities[entity2.id] = entity2;
        this._updateCalculated(void 0, entity2, base2.parentWays, base2.parentRels);
        if (entity2.type === "way") {
          for (j = 0; j < entity2.nodes.length; j++) {
            id2 = entity2.nodes[j];
            for (k = 1; k < stack.length; k++) {
              var ents = stack[k].entities;
              if (ents.hasOwnProperty(id2) && ents[id2] === void 0) {
                delete ents[id2];
              }
            }
          }
        }
      }
      for (i2 = 0; i2 < stack.length; i2++) {
        stack[i2]._updateRebased();
      }
    },
    _updateRebased: function _updateRebased() {
      var base2 = this.base();
      Object.keys(this._parentWays).forEach(function(child) {
        if (base2.parentWays[child]) {
          base2.parentWays[child].forEach(function(id2) {
            if (!this.entities.hasOwnProperty(id2)) {
              this._parentWays[child].add(id2);
            }
          }, this);
        }
      }, this);
      Object.keys(this._parentRels).forEach(function(child) {
        if (base2.parentRels[child]) {
          base2.parentRels[child].forEach(function(id2) {
            if (!this.entities.hasOwnProperty(id2)) {
              this._parentRels[child].add(id2);
            }
          }, this);
        }
      }, this);
      this.transients = {};
    },
    _updateCalculated: function _updateCalculated(oldentity, entity2, parentWays2, parentRels) {
      parentWays2 = parentWays2 || this._parentWays;
      parentRels = parentRels || this._parentRels;
      var type3 = entity2 && entity2.type || oldentity && oldentity.type;
      var removed, added, i2;
      if (type3 === "way") {
        if (oldentity && entity2) {
          removed = utilArrayDifference(oldentity.nodes, entity2.nodes);
          added = utilArrayDifference(entity2.nodes, oldentity.nodes);
        } else if (oldentity) {
          removed = oldentity.nodes;
          added = [];
        } else if (entity2) {
          removed = [];
          added = entity2.nodes;
        }
        for (i2 = 0; i2 < removed.length; i2++) {
          parentWays2[removed[i2]] = new Set(parentWays2[removed[i2]]);
          parentWays2[removed[i2]].delete(oldentity.id);
        }
        for (i2 = 0; i2 < added.length; i2++) {
          parentWays2[added[i2]] = new Set(parentWays2[added[i2]]);
          parentWays2[added[i2]].add(entity2.id);
        }
      } else if (type3 === "relation") {
        var oldentityMemberIDs = oldentity ? oldentity.members.map(function(m) {
          return m.id;
        }) : [];
        var entityMemberIDs = entity2 ? entity2.members.map(function(m) {
          return m.id;
        }) : [];
        if (oldentity && entity2) {
          removed = utilArrayDifference(oldentityMemberIDs, entityMemberIDs);
          added = utilArrayDifference(entityMemberIDs, oldentityMemberIDs);
        } else if (oldentity) {
          removed = oldentityMemberIDs;
          added = [];
        } else if (entity2) {
          removed = [];
          added = entityMemberIDs;
        }
        for (i2 = 0; i2 < removed.length; i2++) {
          parentRels[removed[i2]] = new Set(parentRels[removed[i2]]);
          parentRels[removed[i2]].delete(oldentity.id);
        }
        for (i2 = 0; i2 < added.length; i2++) {
          parentRels[added[i2]] = new Set(parentRels[added[i2]]);
          parentRels[added[i2]].add(entity2.id);
        }
      }
    },
    replace: function replace(entity2) {
      if (this.entities[entity2.id] === entity2)
        return this;
      return this.update(function() {
        this._updateCalculated(this.entities[entity2.id], entity2);
        this.entities[entity2.id] = entity2;
      });
    },
    remove: function remove3(entity2) {
      return this.update(function() {
        this._updateCalculated(entity2, void 0);
        this.entities[entity2.id] = void 0;
      });
    },
    revert: function revert(id2) {
      var baseEntity = this.base().entities[id2];
      var headEntity = this.entities[id2];
      if (headEntity === baseEntity)
        return this;
      return this.update(function() {
        this._updateCalculated(headEntity, baseEntity);
        delete this.entities[id2];
      });
    },
    update: function update3() {
      var graph3 = this.frozen ? coreGraph(this, true) : this;
      for (var i2 = 0; i2 < arguments.length; i2++) {
        arguments[i2].call(graph3, graph3);
      }
      if (this.frozen)
        graph3.frozen = true;
      return graph3;
    },
    load: function load(entities) {
      var base2 = this.base();
      this.entities = Object.create(base2.entities);
      for (var i2 in entities) {
        this.entities[i2] = entities[i2];
        this._updateCalculated(base2.entities[i2], this.entities[i2]);
      }
      return this;
    }
  };

  // modules/osm/intersection.js
  function osmTurn(turn) {
    if (!(this instanceof osmTurn)) {
      return new osmTurn(turn);
    }
    Object.assign(this, turn);
  }
  function osmIntersection(graph3, startVertexId, maxDistance) {
    maxDistance = maxDistance || 30;
    var vgraph = coreGraph();
    var i2, j, k;
    function memberOfRestriction(entity2) {
      return graph3.parentRelations(entity2).some(function(r) {
        return r.isRestriction();
      });
    }
    function isRoad(way2) {
      if (way2.isArea() || way2.isDegenerate())
        return false;
      var roads = {
        "motorway": true,
        "motorway_link": true,
        "trunk": true,
        "trunk_link": true,
        "primary": true,
        "primary_link": true,
        "secondary": true,
        "secondary_link": true,
        "tertiary": true,
        "tertiary_link": true,
        "residential": true,
        "unclassified": true,
        "living_street": true,
        "service": true,
        "road": true,
        "track": true
      };
      return roads[way2.tags.highway];
    }
    var startNode = graph3.entity(startVertexId);
    var checkVertices = [startNode];
    var checkWays;
    var vertices = [];
    var vertexIds = [];
    var vertex;
    var ways = [];
    var wayIds = [];
    var way;
    var nodes = [];
    var node;
    var parents = [];
    var parent2;
    var actions = [];
    while (checkVertices.length) {
      vertex = checkVertices.pop();
      checkWays = graph3.parentWays(vertex);
      var hasWays = false;
      for (i2 = 0; i2 < checkWays.length; i2++) {
        way = checkWays[i2];
        if (!isRoad(way) && !memberOfRestriction(way))
          continue;
        ways.push(way);
        hasWays = true;
        nodes = utilArrayUniq(graph3.childNodes(way));
        for (j = 0; j < nodes.length; j++) {
          node = nodes[j];
          if (node === vertex)
            continue;
          if (vertices.indexOf(node) !== -1)
            continue;
          if (geoSphericalDistance(node.loc, startNode.loc) > maxDistance)
            continue;
          var hasParents = false;
          parents = graph3.parentWays(node);
          for (k = 0; k < parents.length; k++) {
            parent2 = parents[k];
            if (parent2 === way)
              continue;
            if (ways.indexOf(parent2) !== -1)
              continue;
            if (!isRoad(parent2))
              continue;
            hasParents = true;
            break;
          }
          if (hasParents) {
            checkVertices.push(node);
          }
        }
      }
      if (hasWays) {
        vertices.push(vertex);
      }
    }
    vertices = utilArrayUniq(vertices);
    ways = utilArrayUniq(ways);
    ways.forEach(function(way2) {
      graph3.childNodes(way2).forEach(function(node2) {
        vgraph = vgraph.replace(node2);
      });
      vgraph = vgraph.replace(way2);
      graph3.parentRelations(way2).forEach(function(relation) {
        if (relation.isRestriction()) {
          if (relation.isValidRestriction(graph3)) {
            vgraph = vgraph.replace(relation);
          } else if (relation.isComplete(graph3)) {
            actions.push(actionDeleteRelation(relation.id));
          }
        }
      });
    });
    ways.forEach(function(w) {
      var way2 = vgraph.entity(w.id);
      if (way2.tags.oneway === "-1") {
        var action = actionReverse(way2.id, {
          reverseOneway: true
        });
        actions.push(action);
        vgraph = action(vgraph);
      }
    });
    var origCount = osmEntity.id.next.way;
    vertices.forEach(function(v) {
      var splitAll = actionSplit([v.id]).keepHistoryOn("first");
      if (!splitAll.disabled(vgraph)) {
        splitAll.ways(vgraph).forEach(function(way2) {
          var splitOne = actionSplit([v.id]).limitWays([way2.id]).keepHistoryOn("first");
          actions.push(splitOne);
          vgraph = splitOne(vgraph);
        });
      }
    });
    osmEntity.id.next.way = origCount;
    vertexIds = vertices.map(function(v) {
      return v.id;
    });
    vertices = [];
    ways = [];
    vertexIds.forEach(function(id2) {
      var vertex2 = vgraph.entity(id2);
      var parents2 = vgraph.parentWays(vertex2);
      vertices.push(vertex2);
      ways = ways.concat(parents2);
    });
    vertices = utilArrayUniq(vertices);
    ways = utilArrayUniq(ways);
    vertexIds = vertices.map(function(v) {
      return v.id;
    });
    wayIds = ways.map(function(w) {
      return w.id;
    });
    function withMetadata(way2, vertexIds2) {
      var __oneWay = way2.isOneWay();
      var __first = vertexIds2.indexOf(way2.first()) !== -1;
      var __last = vertexIds2.indexOf(way2.last()) !== -1;
      var __via = __first && __last;
      var __from = __first && !__oneWay || __last;
      var __to = __first || __last && !__oneWay;
      return way2.update({
        __first: __first,
        __last: __last,
        __from: __from,
        __via: __via,
        __to: __to,
        __oneWay: __oneWay
      });
    }
    ways = [];
    wayIds.forEach(function(id2) {
      var way2 = withMetadata(vgraph.entity(id2), vertexIds);
      vgraph = vgraph.replace(way2);
      ways.push(way2);
    });
    var keepGoing;
    var removeWayIds = [];
    var removeVertexIds = [];
    do {
      keepGoing = false;
      checkVertices = vertexIds.slice();
      for (i2 = 0; i2 < checkVertices.length; i2++) {
        var vertexId = checkVertices[i2];
        vertex = vgraph.hasEntity(vertexId);
        if (!vertex) {
          if (vertexIds.indexOf(vertexId) !== -1) {
            vertexIds.splice(vertexIds.indexOf(vertexId), 1);
          }
          removeVertexIds.push(vertexId);
          continue;
        }
        parents = vgraph.parentWays(vertex);
        if (parents.length < 3) {
          if (vertexIds.indexOf(vertexId) !== -1) {
            vertexIds.splice(vertexIds.indexOf(vertexId), 1);
          }
        }
        if (parents.length === 2) {
          var a = parents[0];
          var b2 = parents[1];
          var aIsLeaf = a && !a.__via;
          var bIsLeaf = b2 && !b2.__via;
          var leaf, survivor;
          if (aIsLeaf && !bIsLeaf) {
            leaf = a;
            survivor = b2;
          } else if (!aIsLeaf && bIsLeaf) {
            leaf = b2;
            survivor = a;
          }
          if (leaf && survivor) {
            survivor = withMetadata(survivor, vertexIds);
            vgraph = vgraph.replace(survivor).remove(leaf);
            removeWayIds.push(leaf.id);
            keepGoing = true;
          }
        }
        parents = vgraph.parentWays(vertex);
        if (parents.length < 2) {
          if (vertexIds.indexOf(vertexId) !== -1) {
            vertexIds.splice(vertexIds.indexOf(vertexId), 1);
          }
          removeVertexIds.push(vertexId);
          keepGoing = true;
        }
        if (parents.length < 1) {
          vgraph = vgraph.remove(vertex);
        }
      }
    } while (keepGoing);
    vertices = vertices.filter(function(vertex2) {
      return removeVertexIds.indexOf(vertex2.id) === -1;
    }).map(function(vertex2) {
      return vgraph.entity(vertex2.id);
    });
    ways = ways.filter(function(way2) {
      return removeWayIds.indexOf(way2.id) === -1;
    }).map(function(way2) {
      return vgraph.entity(way2.id);
    });
    var intersection = {
      graph: vgraph,
      actions: actions,
      vertices: vertices,
      ways: ways
    };
    intersection.turns = function(fromWayId, maxViaWay) {
      if (!fromWayId)
        return [];
      if (!maxViaWay)
        maxViaWay = 0;
      var vgraph2 = intersection.graph;
      var keyVertexIds = intersection.vertices.map(function(v) {
        return v.id;
      });
      var start2 = vgraph2.entity(fromWayId);
      if (!start2 || !(start2.__from || start2.__via))
        return [];
      var maxPathLength = maxViaWay * 2 + 3;
      var turns = [];
      step(start2);
      return turns;
      function step(entity2, currPath, currRestrictions, matchedRestriction) {
        currPath = (currPath || []).slice();
        if (currPath.length >= maxPathLength)
          return;
        currPath.push(entity2.id);
        currRestrictions = (currRestrictions || []).slice();
        var i3, j2;
        if (entity2.type === "node") {
          var parents2 = vgraph2.parentWays(entity2);
          var nextWays = [];
          for (i3 = 0; i3 < parents2.length; i3++) {
            var way2 = parents2[i3];
            if (way2.__oneWay && way2.nodes[0] !== entity2.id)
              continue;
            if (currPath.indexOf(way2.id) !== -1 && currPath.length >= 3)
              continue;
            var restrict = null;
            for (j2 = 0; j2 < currRestrictions.length; j2++) {
              var restriction = currRestrictions[j2];
              var f2 = restriction.memberByRole("from");
              var v = restriction.membersByRole("via");
              var t = restriction.memberByRole("to");
              var isOnly = /^only_/.test(restriction.tags.restriction);
              var matchesFrom = f2.id === fromWayId;
              var matchesViaTo = false;
              var isAlongOnlyPath = false;
              if (t.id === way2.id) {
                if (v.length === 1 && v[0].type === "node") {
                  matchesViaTo = v[0].id === entity2.id && (matchesFrom && currPath.length === 2 || !matchesFrom && currPath.length > 2);
                } else {
                  var pathVias = [];
                  for (k = 2; k < currPath.length; k += 2) {
                    pathVias.push(currPath[k]);
                  }
                  var restrictionVias = [];
                  for (k = 0; k < v.length; k++) {
                    if (v[k].type === "way") {
                      restrictionVias.push(v[k].id);
                    }
                  }
                  var diff = utilArrayDifference(pathVias, restrictionVias);
                  matchesViaTo = !diff.length;
                }
              } else if (isOnly) {
                for (k = 0; k < v.length; k++) {
                  if (v[k].type === "way" && v[k].id === way2.id) {
                    isAlongOnlyPath = true;
                    break;
                  }
                }
              }
              if (matchesViaTo) {
                if (isOnly) {
                  restrict = {
                    id: restriction.id,
                    direct: matchesFrom,
                    from: f2.id,
                    only: true,
                    end: true
                  };
                } else {
                  restrict = {
                    id: restriction.id,
                    direct: matchesFrom,
                    from: f2.id,
                    no: true,
                    end: true
                  };
                }
              } else {
                if (isAlongOnlyPath) {
                  restrict = {
                    id: restriction.id,
                    direct: false,
                    from: f2.id,
                    only: true,
                    end: false
                  };
                } else if (isOnly) {
                  restrict = {
                    id: restriction.id,
                    direct: false,
                    from: f2.id,
                    no: true,
                    end: true
                  };
                }
              }
              if (restrict && restrict.direct)
                break;
            }
            nextWays.push({
              way: way2,
              restrict: restrict
            });
          }
          nextWays.forEach(function(nextWay) {
            step(nextWay.way, currPath, currRestrictions, nextWay.restrict);
          });
        } else {
          if (currPath.length >= 3) {
            var turnPath = currPath.slice();
            if (matchedRestriction && matchedRestriction.direct === false) {
              for (i3 = 0; i3 < turnPath.length; i3++) {
                if (turnPath[i3] === matchedRestriction.from) {
                  turnPath = turnPath.slice(i3);
                  break;
                }
              }
            }
            var turn = pathToTurn(turnPath);
            if (turn) {
              if (matchedRestriction) {
                turn.restrictionID = matchedRestriction.id;
                turn.no = matchedRestriction.no;
                turn.only = matchedRestriction.only;
                turn.direct = matchedRestriction.direct;
              }
              turns.push(osmTurn(turn));
            }
            if (currPath[0] === currPath[2])
              return;
          }
          if (matchedRestriction && matchedRestriction.end)
            return;
          var n1 = vgraph2.entity(entity2.first());
          var n2 = vgraph2.entity(entity2.last());
          var dist = geoSphericalDistance(n1.loc, n2.loc);
          var nextNodes = [];
          if (currPath.length > 1) {
            if (dist > maxDistance)
              return;
            if (!entity2.__via)
              return;
          }
          if (!entity2.__oneWay && keyVertexIds.indexOf(n1.id) !== -1 && currPath.indexOf(n1.id) === -1) {
            nextNodes.push(n1);
          }
          if (keyVertexIds.indexOf(n2.id) !== -1 && currPath.indexOf(n2.id) === -1) {
            nextNodes.push(n2);
          }
          nextNodes.forEach(function(nextNode) {
            var fromRestrictions = vgraph2.parentRelations(entity2).filter(function(r) {
              if (!r.isRestriction())
                return false;
              var f3 = r.memberByRole("from");
              if (!f3 || f3.id !== entity2.id)
                return false;
              var isOnly2 = /^only_/.test(r.tags.restriction);
              if (!isOnly2)
                return true;
              var isOnlyVia = false;
              var v2 = r.membersByRole("via");
              if (v2.length === 1 && v2[0].type === "node") {
                isOnlyVia = v2[0].id === nextNode.id;
              } else {
                for (var i4 = 0; i4 < v2.length; i4++) {
                  if (v2[i4].type !== "way")
                    continue;
                  var viaWay = vgraph2.entity(v2[i4].id);
                  if (viaWay.first() === nextNode.id || viaWay.last() === nextNode.id) {
                    isOnlyVia = true;
                    break;
                  }
                }
              }
              return isOnlyVia;
            });
            step(nextNode, currPath, currRestrictions.concat(fromRestrictions), false);
          });
        }
      }
      function pathToTurn(path) {
        if (path.length < 3)
          return;
        var fromWayId2, fromNodeId, fromVertexId;
        var toWayId, toNodeId, toVertexId;
        var viaWayIds, viaNodeId, isUturn;
        fromWayId2 = path[0];
        toWayId = path[path.length - 1];
        if (path.length === 3 && fromWayId2 === toWayId) {
          var way2 = vgraph2.entity(fromWayId2);
          if (way2.__oneWay)
            return null;
          isUturn = true;
          viaNodeId = fromVertexId = toVertexId = path[1];
          fromNodeId = toNodeId = adjacentNode(fromWayId2, viaNodeId);
        } else {
          isUturn = false;
          fromVertexId = path[1];
          fromNodeId = adjacentNode(fromWayId2, fromVertexId);
          toVertexId = path[path.length - 2];
          toNodeId = adjacentNode(toWayId, toVertexId);
          if (path.length === 3) {
            viaNodeId = path[1];
          } else {
            viaWayIds = path.filter(function(entityId) {
              return entityId[0] === "w";
            });
            viaWayIds = viaWayIds.slice(1, viaWayIds.length - 1);
          }
        }
        return {
          key: path.join("_"),
          path: path,
          from: {
            node: fromNodeId,
            way: fromWayId2,
            vertex: fromVertexId
          },
          via: {
            node: viaNodeId,
            ways: viaWayIds
          },
          to: {
            node: toNodeId,
            way: toWayId,
            vertex: toVertexId
          },
          u: isUturn
        };
        function adjacentNode(wayId, affixId) {
          var nodes2 = vgraph2.entity(wayId).nodes;
          return affixId === nodes2[0] ? nodes2[1] : nodes2[nodes2.length - 2];
        }
      }
    };
    return intersection;
  }
  function osmInferRestriction(graph3, turn, projection2) {
    var fromWay = graph3.entity(turn.from.way);
    var fromNode = graph3.entity(turn.from.node);
    var fromVertex = graph3.entity(turn.from.vertex);
    var toWay = graph3.entity(turn.to.way);
    var toNode = graph3.entity(turn.to.node);
    var toVertex = graph3.entity(turn.to.vertex);
    var fromOneWay = fromWay.tags.oneway === "yes";
    var toOneWay = toWay.tags.oneway === "yes";
    var angle2 = (vecAngle(projection2(fromVertex.loc), projection2(fromNode.loc)) - vecAngle(projection2(toVertex.loc), projection2(toNode.loc))) * (180 / Math.PI);
    while (angle2 < 0) {
      angle2 += 360;
    }
    if (fromNode === toNode) {
      return "no_u_turn";
    }
    if ((angle2 < 23 || angle2 > 336) && fromOneWay && toOneWay) {
      return "no_u_turn";
    }
    if ((angle2 < 40 || angle2 > 319) && fromOneWay && toOneWay && turn.from.vertex !== turn.to.vertex) {
      return "no_u_turn";
    }
    if (angle2 < 158) {
      return "no_right_turn";
    }
    if (angle2 > 202) {
      return "no_left_turn";
    }
    return "no_straight_on";
  }

  // modules/actions/merge_polygon.js
  function actionMergePolygon(ids, newRelationId) {
    function groupEntities(graph3) {
      var entities = ids.map(function(id2) {
        return graph3.entity(id2);
      });
      var geometryGroups = utilArrayGroupBy(entities, function(entity2) {
        if (entity2.type === "way" && entity2.isClosed()) {
          return "closedWay";
        } else if (entity2.type === "relation" && entity2.isMultipolygon()) {
          return "multipolygon";
        } else {
          return "other";
        }
      });
      return Object.assign({
        closedWay: [],
        multipolygon: [],
        other: []
      }, geometryGroups);
    }
    var action = function action2(graph3) {
      var entities = groupEntities(graph3);
      var polygons = entities.multipolygon.reduce(function(polygons2, m) {
        return polygons2.concat(osmJoinWays(m.members, graph3));
      }, []).concat(entities.closedWay.map(function(d) {
        var member = [{
          id: d.id
        }];
        member.nodes = graph3.childNodes(d);
        return member;
      }));
      var contained = polygons.map(function(w, i2) {
        return polygons.map(function(d, n2) {
          if (i2 === n2)
            return null;
          return geomPolygonContainsPolygon(d.nodes.map(function(n3) {
            return n3.loc;
          }), w.nodes.map(function(n3) {
            return n3.loc;
          }));
        });
      });
      var members = [];
      var outer = true;
      while (polygons.length) {
        extractUncontained(polygons);
        polygons = polygons.filter(isContained);
        contained = contained.filter(isContained).map(filterContained);
      }
      function isContained(d, i2) {
        return contained[i2].some(function(val) {
          return val;
        });
      }
      function filterContained(d) {
        return d.filter(isContained);
      }
      function extractUncontained(polygons2) {
        polygons2.forEach(function(d, i2) {
          if (!isContained(d, i2)) {
            d.forEach(function(member) {
              members.push({
                type: "way",
                id: member.id,
                role: outer ? "outer" : "inner"
              });
            });
          }
        });
        outer = !outer;
      }
      var relation = entities.multipolygon[0] || osmRelation({
        id: newRelationId,
        tags: {
          type: "multipolygon"
        }
      });
      entities.multipolygon.slice(1).forEach(function(m) {
        relation = relation.mergeTags(m.tags);
        graph3 = graph3.remove(m);
      });
      entities.closedWay.forEach(function(way) {
        function isThisOuter(m) {
          return m.id === way.id && m.role !== "inner";
        }
        if (members.some(isThisOuter)) {
          relation = relation.mergeTags(way.tags);
          graph3 = graph3.replace(way.update({
            tags: {}
          }));
        }
      });
      return graph3.replace(relation.update({
        members: members,
        tags: utilObjectOmit(relation.tags, ["area"])
      }));
    };
    action.disabled = function(graph3) {
      var entities = groupEntities(graph3);
      if (entities.other.length > 0 || entities.closedWay.length + entities.multipolygon.length < 2) {
        return "not_eligible";
      }
      if (!entities.multipolygon.every(function(r) {
        return r.isComplete(graph3);
      })) {
        return "incomplete_relation";
      }
      if (!entities.multipolygon.length) {
        var sharedMultipolygons = [];
        entities.closedWay.forEach(function(way, i2) {
          if (i2 === 0) {
            sharedMultipolygons = graph3.parentMultipolygons(way);
          } else {
            sharedMultipolygons = utilArrayIntersection(sharedMultipolygons, graph3.parentMultipolygons(way));
          }
        });
        sharedMultipolygons = sharedMultipolygons.filter(function(relation) {
          return relation.members.length === entities.closedWay.length;
        });
        if (sharedMultipolygons.length) {
          return "not_eligible";
        }
      } else if (entities.closedWay.some(function(way) {
        return utilArrayIntersection(graph3.parentMultipolygons(way), entities.multipolygon).length;
      })) {
        return "not_eligible";
      }
    };
    return action;
  }

  // modules/actions/merge_remote_changes.js
  var import_fast_deep_equal = __toModule(require_fast_deep_equal());

  // node_modules/node-diff3/index.mjs
  function LCS(buffer1, buffer2) {
    var equivalenceClasses = {};
    for (var j = 0; j < buffer2.length; j++) {
      var item = buffer2[j];
      if (equivalenceClasses[item]) {
        equivalenceClasses[item].push(j);
      } else {
        equivalenceClasses[item] = [j];
      }
    }
    var NULLRESULT = {
      buffer1index: -1,
      buffer2index: -1,
      chain: null
    };
    var candidates = [NULLRESULT];
    for (var i2 = 0; i2 < buffer1.length; i2++) {
      var _item = buffer1[i2];
      var buffer2indices = equivalenceClasses[_item] || [];
      var r = 0;
      var c2 = candidates[0];
      for (var jx = 0; jx < buffer2indices.length; jx++) {
        var _j = buffer2indices[jx];
        var s = void 0;
        for (s = r; s < candidates.length; s++) {
          if (candidates[s].buffer2index < _j && (s === candidates.length - 1 || candidates[s + 1].buffer2index > _j)) {
            break;
          }
        }
        if (s < candidates.length) {
          var newCandidate = {
            buffer1index: i2,
            buffer2index: _j,
            chain: candidates[s]
          };
          if (r === candidates.length) {
            candidates.push(c2);
          } else {
            candidates[r] = c2;
          }
          r = s + 1;
          c2 = newCandidate;
          if (r === candidates.length) {
            break;
          }
        }
      }
      candidates[r] = c2;
    }
    return candidates[candidates.length - 1];
  }
  function diffIndices(buffer1, buffer2) {
    var lcs = LCS(buffer1, buffer2);
    var result6 = [];
    var tail1 = buffer1.length;
    var tail2 = buffer2.length;
    for (var candidate = lcs; candidate !== null; candidate = candidate.chain) {
      var mismatchLength1 = tail1 - candidate.buffer1index - 1;
      var mismatchLength2 = tail2 - candidate.buffer2index - 1;
      tail1 = candidate.buffer1index;
      tail2 = candidate.buffer2index;
      if (mismatchLength1 || mismatchLength2) {
        result6.push({
          buffer1: [tail1 + 1, mismatchLength1],
          buffer1Content: buffer1.slice(tail1 + 1, tail1 + 1 + mismatchLength1),
          buffer2: [tail2 + 1, mismatchLength2],
          buffer2Content: buffer2.slice(tail2 + 1, tail2 + 1 + mismatchLength2)
        });
      }
    }
    result6.reverse();
    return result6;
  }
  function diff3MergeRegions(a, o2, b2) {
    var hunks = [];
    function addHunk(h, ab) {
      hunks.push({
        ab: ab,
        oStart: h.buffer1[0],
        oLength: h.buffer1[1],
        abStart: h.buffer2[0],
        abLength: h.buffer2[1]
      });
    }
    diffIndices(o2, a).forEach(function(item) {
      return addHunk(item, "a");
    });
    diffIndices(o2, b2).forEach(function(item) {
      return addHunk(item, "b");
    });
    hunks.sort(function(x2, y) {
      return x2.oStart - y.oStart;
    });
    var results = [];
    var currOffset = 0;
    function advanceTo(endOffset) {
      if (endOffset > currOffset) {
        results.push({
          stable: true,
          buffer: "o",
          bufferStart: currOffset,
          bufferLength: endOffset - currOffset,
          bufferContent: o2.slice(currOffset, endOffset)
        });
        currOffset = endOffset;
      }
    }
    while (hunks.length) {
      var hunk = hunks.shift();
      var regionStart = hunk.oStart;
      var regionEnd = hunk.oStart + hunk.oLength;
      var regionHunks = [hunk];
      advanceTo(regionStart);
      while (hunks.length) {
        var nextHunk = hunks[0];
        var nextHunkStart = nextHunk.oStart;
        if (nextHunkStart > regionEnd)
          break;
        regionEnd = Math.max(regionEnd, nextHunkStart + nextHunk.oLength);
        regionHunks.push(hunks.shift());
      }
      if (regionHunks.length === 1) {
        if (hunk.abLength > 0) {
          var buffer = hunk.ab === "a" ? a : b2;
          results.push({
            stable: true,
            buffer: hunk.ab,
            bufferStart: hunk.abStart,
            bufferLength: hunk.abLength,
            bufferContent: buffer.slice(hunk.abStart, hunk.abStart + hunk.abLength)
          });
        }
      } else {
        var bounds = {
          a: [a.length, -1, o2.length, -1],
          b: [b2.length, -1, o2.length, -1]
        };
        while (regionHunks.length) {
          hunk = regionHunks.shift();
          var oStart = hunk.oStart;
          var oEnd = oStart + hunk.oLength;
          var abStart = hunk.abStart;
          var abEnd = abStart + hunk.abLength;
          var _b = bounds[hunk.ab];
          _b[0] = Math.min(abStart, _b[0]);
          _b[1] = Math.max(abEnd, _b[1]);
          _b[2] = Math.min(oStart, _b[2]);
          _b[3] = Math.max(oEnd, _b[3]);
        }
        var aStart = bounds.a[0] + (regionStart - bounds.a[2]);
        var aEnd = bounds.a[1] + (regionEnd - bounds.a[3]);
        var bStart = bounds.b[0] + (regionStart - bounds.b[2]);
        var bEnd = bounds.b[1] + (regionEnd - bounds.b[3]);
        var result6 = {
          stable: false,
          aStart: aStart,
          aLength: aEnd - aStart,
          aContent: a.slice(aStart, aEnd),
          oStart: regionStart,
          oLength: regionEnd - regionStart,
          oContent: o2.slice(regionStart, regionEnd),
          bStart: bStart,
          bLength: bEnd - bStart,
          bContent: b2.slice(bStart, bEnd)
        };
        results.push(result6);
      }
      currOffset = regionEnd;
    }
    advanceTo(o2.length);
    return results;
  }
  function diff3Merge(a, o2, b2, options) {
    var defaults = {
      excludeFalseConflicts: true,
      stringSeparator: /\s+/
    };
    options = Object.assign(defaults, options);
    if (typeof a === "string")
      a = a.split(options.stringSeparator);
    if (typeof o2 === "string")
      o2 = o2.split(options.stringSeparator);
    if (typeof b2 === "string")
      b2 = b2.split(options.stringSeparator);
    var results = [];
    var regions = diff3MergeRegions(a, o2, b2);
    var okBuffer = [];
    function flushOk() {
      if (okBuffer.length) {
        results.push({
          ok: okBuffer
        });
      }
      okBuffer = [];
    }
    function isFalseConflict(a2, b3) {
      if (a2.length !== b3.length)
        return false;
      for (var i2 = 0; i2 < a2.length; i2++) {
        if (a2[i2] !== b3[i2])
          return false;
      }
      return true;
    }
    regions.forEach(function(region) {
      if (region.stable) {
        var _okBuffer;
        (_okBuffer = okBuffer).push.apply(_okBuffer, _toConsumableArray(region.bufferContent));
      } else {
        if (options.excludeFalseConflicts && isFalseConflict(region.aContent, region.bContent)) {
          var _okBuffer2;
          (_okBuffer2 = okBuffer).push.apply(_okBuffer2, _toConsumableArray(region.aContent));
        } else {
          flushOk();
          results.push({
            conflict: {
              a: region.aContent,
              aIndex: region.aStart,
              o: region.oContent,
              oIndex: region.oStart,
              b: region.bContent,
              bIndex: region.bStart
            }
          });
        }
      }
    });
    flushOk();
    return results;
  }

  // modules/actions/merge_remote_changes.js
  function actionMergeRemoteChanges(id2, localGraph, remoteGraph, discardTags, formatUser) {
    discardTags = discardTags || {};
    var _option = "safe";
    var _conflicts = [];
    function user(d) {
      return typeof formatUser === "function" ? formatUser(d) : d;
    }
    function mergeLocation(remote, target) {
      function pointEqual(a, b2) {
        var epsilon3 = 1e-6;
        return Math.abs(a[0] - b2[0]) < epsilon3 && Math.abs(a[1] - b2[1]) < epsilon3;
      }
      if (_option === "force_local" || pointEqual(target.loc, remote.loc)) {
        return target;
      }
      if (_option === "force_remote") {
        return target.update({
          loc: remote.loc
        });
      }
      _conflicts.push(_t("merge_remote_changes.conflict.location", {
        user: user(remote.user)
      }));
      return target;
    }
    function mergeNodes(base2, remote, target) {
      if (_option === "force_local" || (0, import_fast_deep_equal.default)(target.nodes, remote.nodes)) {
        return target;
      }
      if (_option === "force_remote") {
        return target.update({
          nodes: remote.nodes
        });
      }
      var ccount = _conflicts.length;
      var o2 = base2.nodes || [];
      var a = target.nodes || [];
      var b2 = remote.nodes || [];
      var nodes = [];
      var hunks = diff3Merge(a, o2, b2, {
        excludeFalseConflicts: true
      });
      for (var i2 = 0; i2 < hunks.length; i2++) {
        var hunk = hunks[i2];
        if (hunk.ok) {
          nodes.push.apply(nodes, hunk.ok);
        } else {
          var c2 = hunk.conflict;
          if ((0, import_fast_deep_equal.default)(c2.o, c2.a)) {
            nodes.push.apply(nodes, c2.b);
          } else if ((0, import_fast_deep_equal.default)(c2.o, c2.b)) {
            nodes.push.apply(nodes, c2.a);
          } else {
            _conflicts.push(_t("merge_remote_changes.conflict.nodelist", {
              user: user(remote.user)
            }));
            break;
          }
        }
      }
      return _conflicts.length === ccount ? target.update({
        nodes: nodes
      }) : target;
    }
    function mergeChildren(targetWay, children2, updates, graph3) {
      function isUsed(node2, targetWay2) {
        var hasInterestingParent = graph3.parentWays(node2).some(function(way) {
          return way.id !== targetWay2.id;
        });
        return node2.hasInterestingTags() || hasInterestingParent || graph3.parentRelations(node2).length > 0;
      }
      var ccount = _conflicts.length;
      for (var i2 = 0; i2 < children2.length; i2++) {
        var id3 = children2[i2];
        var node = graph3.hasEntity(id3);
        if (targetWay.nodes.indexOf(id3) === -1) {
          if (node && !isUsed(node, targetWay)) {
            updates.removeIds.push(id3);
          }
          continue;
        }
        var local = localGraph.hasEntity(id3);
        var remote = remoteGraph.hasEntity(id3);
        var target;
        if (_option === "force_remote" && remote && remote.visible) {
          updates.replacements.push(remote);
        } else if (_option === "force_local" && local) {
          target = osmEntity(local);
          if (remote) {
            target = target.update({
              version: remote.version
            });
          }
          updates.replacements.push(target);
        } else if (_option === "safe" && local && remote && local.version !== remote.version) {
          target = osmEntity(local, {
            version: remote.version
          });
          if (remote.visible) {
            target = mergeLocation(remote, target);
          } else {
            _conflicts.push(_t("merge_remote_changes.conflict.deleted", {
              user: user(remote.user)
            }));
          }
          if (_conflicts.length !== ccount)
            break;
          updates.replacements.push(target);
        }
      }
      return targetWay;
    }
    function updateChildren(updates, graph3) {
      for (var i2 = 0; i2 < updates.replacements.length; i2++) {
        graph3 = graph3.replace(updates.replacements[i2]);
      }
      if (updates.removeIds.length) {
        graph3 = actionDeleteMultiple(updates.removeIds)(graph3);
      }
      return graph3;
    }
    function mergeMembers(remote, target) {
      if (_option === "force_local" || (0, import_fast_deep_equal.default)(target.members, remote.members)) {
        return target;
      }
      if (_option === "force_remote") {
        return target.update({
          members: remote.members
        });
      }
      _conflicts.push(_t("merge_remote_changes.conflict.memberlist", {
        user: user(remote.user)
      }));
      return target;
    }
    function mergeTags2(base2, remote, target) {
      if (_option === "force_local" || (0, import_fast_deep_equal.default)(target.tags, remote.tags)) {
        return target;
      }
      if (_option === "force_remote") {
        return target.update({
          tags: remote.tags
        });
      }
      var ccount = _conflicts.length;
      var o2 = base2.tags || {};
      var a = target.tags || {};
      var b2 = remote.tags || {};
      var keys3 = utilArrayUnion(utilArrayUnion(Object.keys(o2), Object.keys(a)), Object.keys(b2)).filter(function(k2) {
        return !discardTags[k2];
      });
      var tags = Object.assign({}, a);
      var changed = false;
      for (var i2 = 0; i2 < keys3.length; i2++) {
        var k = keys3[i2];
        if (o2[k] !== b2[k] && a[k] !== b2[k]) {
          if (o2[k] !== a[k]) {
            _conflicts.push(_t("merge_remote_changes.conflict.tags", {
              tag: k,
              local: a[k],
              remote: b2[k],
              user: user(remote.user)
            }));
          } else {
            if (b2.hasOwnProperty(k)) {
              tags[k] = b2[k];
            } else {
              delete tags[k];
            }
            changed = true;
          }
        }
      }
      return changed && _conflicts.length === ccount ? target.update({
        tags: tags
      }) : target;
    }
    var action = function action2(graph3) {
      var updates = {
        replacements: [],
        removeIds: []
      };
      var base2 = graph3.base().entities[id2];
      var local = localGraph.entity(id2);
      var remote = remoteGraph.entity(id2);
      var target = osmEntity(local, {
        version: remote.version
      });
      if (!remote.visible) {
        if (_option === "force_remote") {
          return actionDeleteMultiple([id2])(graph3);
        } else if (_option === "force_local") {
          if (target.type === "way") {
            target = mergeChildren(target, utilArrayUniq(local.nodes), updates, graph3);
            graph3 = updateChildren(updates, graph3);
          }
          return graph3.replace(target);
        } else {
          _conflicts.push(_t("merge_remote_changes.conflict.deleted", {
            user: user(remote.user)
          }));
          return graph3;
        }
      }
      if (target.type === "node") {
        target = mergeLocation(remote, target);
      } else if (target.type === "way") {
        graph3.rebase(remoteGraph.childNodes(remote), [graph3], false);
        target = mergeNodes(base2, remote, target);
        target = mergeChildren(target, utilArrayUnion(local.nodes, remote.nodes), updates, graph3);
      } else if (target.type === "relation") {
        target = mergeMembers(remote, target);
      }
      target = mergeTags2(base2, remote, target);
      if (!_conflicts.length) {
        graph3 = updateChildren(updates, graph3).replace(target);
      }
      return graph3;
    };
    action.withOption = function(opt) {
      _option = opt;
      return action;
    };
    action.conflicts = function() {
      return _conflicts;
    };
    return action;
  }

  // modules/geo/geom.js
  function geoChooseEdge(nodes, point5, projection2, activeID) {
    var dist = vecLength;
    var points = nodes.map(function(n2) {
      return projection2(n2.loc);
    });
    var ids = nodes.map(function(n2) {
      return n2.id;
    });
    var min2 = Infinity;
    var idx;
    var loc;
    for (var i2 = 0; i2 < points.length - 1; i2++) {
      if (ids[i2] === activeID || ids[i2 + 1] === activeID)
        continue;
      var o2 = points[i2];
      var s = vecSubtract(points[i2 + 1], o2);
      var v = vecSubtract(point5, o2);
      var proj = vecDot(v, s) / vecDot(s, s);
      var p2;
      if (proj < 0) {
        p2 = o2;
      } else if (proj > 1) {
        p2 = points[i2 + 1];
      } else {
        p2 = [o2[0] + proj * s[0], o2[1] + proj * s[1]];
      }
      var d = dist(p2, point5);
      if (d < min2) {
        min2 = d;
        idx = i2 + 1;
        loc = projection2.invert(p2);
      }
    }
    if (idx !== void 0) {
      return {
        index: idx,
        distance: min2,
        loc: loc
      };
    } else {
      return null;
    }
  }
  function geoHasLineIntersections(activeNodes, inactiveNodes, activeID) {
    var actives = [];
    var inactives = [];
    var j, k, n1, n2, segment;
    for (j = 0; j < activeNodes.length - 1; j++) {
      n1 = activeNodes[j];
      n2 = activeNodes[j + 1];
      segment = [n1.loc, n2.loc];
      if (n1.id === activeID || n2.id === activeID) {
        actives.push(segment);
      }
    }
    for (j = 0; j < inactiveNodes.length - 1; j++) {
      n1 = inactiveNodes[j];
      n2 = inactiveNodes[j + 1];
      segment = [n1.loc, n2.loc];
      inactives.push(segment);
    }
    for (j = 0; j < actives.length; j++) {
      for (k = 0; k < inactives.length; k++) {
        var p2 = actives[j];
        var q2 = inactives[k];
        var hit = geomLineIntersection(p2, q2);
        if (hit) {
          return true;
        }
      }
    }
    return false;
  }
  function geoHasSelfIntersections(nodes, activeID) {
    var actives = [];
    var inactives = [];
    var j, k;
    for (j = 0; j < nodes.length - 1; j++) {
      var n1 = nodes[j];
      var n2 = nodes[j + 1];
      var segment = [n1.loc, n2.loc];
      if (n1.id === activeID || n2.id === activeID) {
        actives.push(segment);
      } else {
        inactives.push(segment);
      }
    }
    for (j = 0; j < actives.length; j++) {
      for (k = 0; k < inactives.length; k++) {
        var p2 = actives[j];
        var q2 = inactives[k];
        if (vecEqual(p2[1], q2[0]) || vecEqual(p2[0], q2[1]) || vecEqual(p2[0], q2[0]) || vecEqual(p2[1], q2[1])) {
          continue;
        }
        var hit = geomLineIntersection(p2, q2);
        if (hit) {
          var epsilon3 = 1e-8;
          if (vecEqual(p2[1], hit, epsilon3) || vecEqual(p2[0], hit, epsilon3) || vecEqual(q2[1], hit, epsilon3) || vecEqual(q2[0], hit, epsilon3)) {
            continue;
          } else {
            return true;
          }
        }
      }
    }
    return false;
  }

  // modules/geo/raw_mercator.js
  function geoRawMercator() {
    var project = mercatorRaw;
    var k = 512 / Math.PI;
    var x2 = 0;
    var y = 0;
    var clipExtent = [[0, 0], [0, 0]];
    function projection2(point5) {
      point5 = project(point5[0] * Math.PI / 180, point5[1] * Math.PI / 180);
      return [point5[0] * k + x2, y - point5[1] * k];
    }
    projection2.invert = function(point5) {
      point5 = project.invert((point5[0] - x2) / k, (y - point5[1]) / k);
      return point5 && [point5[0] * 180 / Math.PI, point5[1] * 180 / Math.PI];
    };
    projection2.scale = function(_2) {
      if (!arguments.length)
        return k;
      k = +_2;
      return projection2;
    };
    projection2.translate = function(_2) {
      if (!arguments.length)
        return [x2, y];
      x2 = +_2[0];
      y = +_2[1];
      return projection2;
    };
    projection2.clipExtent = function(_2) {
      if (!arguments.length)
        return clipExtent;
      clipExtent = _2;
      return projection2;
    };
    projection2.transform = function(obj) {
      if (!arguments.length)
        return identity2.translate(x2, y).scale(k);
      x2 = +obj.x;
      y = +obj.y;
      k = +obj.k;
      return projection2;
    };
    projection2.stream = transform_default({
      point: function point5(x3, y2) {
        var vec = projection2([x3, y2]);
        this.stream.point(vec[0], vec[1]);
      }
    }).stream;
    return projection2;
  }

  // modules/geo/ortho.js
  function geoOrthoNormalizedDotProduct(a, b2, origin) {
    if (vecEqual(origin, a) || vecEqual(origin, b2)) {
      return 1;
    }
    return vecNormalizedDot(a, b2, origin);
  }
  function geoOrthoFilterDotProduct(dotp, epsilon3, lowerThreshold, upperThreshold, allowStraightAngles) {
    var val = Math.abs(dotp);
    if (val < epsilon3) {
      return 0;
    } else if (allowStraightAngles && Math.abs(val - 1) < epsilon3) {
      return 0;
    } else if (val < lowerThreshold || val > upperThreshold) {
      return dotp;
    } else {
      return null;
    }
  }
  function geoOrthoCalcScore(points, isClosed2, epsilon3, threshold) {
    var score = 0;
    var first2 = isClosed2 ? 0 : 1;
    var last3 = isClosed2 ? points.length : points.length - 1;
    var coords = points.map(function(p2) {
      return p2.coord;
    });
    var lowerThreshold = Math.cos((90 - threshold) * Math.PI / 180);
    var upperThreshold = Math.cos(threshold * Math.PI / 180);
    for (var i2 = first2; i2 < last3; i2++) {
      var a = coords[(i2 - 1 + coords.length) % coords.length];
      var origin = coords[i2];
      var b2 = coords[(i2 + 1) % coords.length];
      var dotp = geoOrthoFilterDotProduct(geoOrthoNormalizedDotProduct(a, b2, origin), epsilon3, lowerThreshold, upperThreshold);
      if (dotp === null)
        continue;
      score = score + 2 * Math.min(Math.abs(dotp - 1), Math.min(Math.abs(dotp), Math.abs(dotp + 1)));
    }
    return score;
  }
  function geoOrthoMaxOffsetAngle(coords, isClosed2, lessThan) {
    var max2 = -Infinity;
    var first2 = isClosed2 ? 0 : 1;
    var last3 = isClosed2 ? coords.length : coords.length - 1;
    for (var i2 = first2; i2 < last3; i2++) {
      var a = coords[(i2 - 1 + coords.length) % coords.length];
      var origin = coords[i2];
      var b2 = coords[(i2 + 1) % coords.length];
      var normalizedDotP = geoOrthoNormalizedDotProduct(a, b2, origin);
      var angle2 = Math.acos(Math.abs(normalizedDotP)) * 180 / Math.PI;
      if (angle2 > 45)
        angle2 = 90 - angle2;
      if (angle2 >= lessThan)
        continue;
      if (angle2 > max2)
        max2 = angle2;
    }
    if (max2 === -Infinity)
      return null;
    return max2;
  }
  function geoOrthoCanOrthogonalize(coords, isClosed2, epsilon3, threshold, allowStraightAngles) {
    var score = null;
    var first2 = isClosed2 ? 0 : 1;
    var last3 = isClosed2 ? coords.length : coords.length - 1;
    var lowerThreshold = Math.cos((90 - threshold) * Math.PI / 180);
    var upperThreshold = Math.cos(threshold * Math.PI / 180);
    for (var i2 = first2; i2 < last3; i2++) {
      var a = coords[(i2 - 1 + coords.length) % coords.length];
      var origin = coords[i2];
      var b2 = coords[(i2 + 1) % coords.length];
      var dotp = geoOrthoFilterDotProduct(geoOrthoNormalizedDotProduct(a, b2, origin), epsilon3, lowerThreshold, upperThreshold, allowStraightAngles);
      if (dotp === null)
        continue;
      if (Math.abs(dotp) > 0)
        return 1;
      score = 0;
    }
    return score;
  }

  // modules/actions/move.js
  function actionMove(moveIDs, tryDelta, projection2, cache7) {
    var _delta = tryDelta;
    function setupCache(graph3) {
      function canMove(nodeID) {
        if (moveIDs.indexOf(nodeID) !== -1)
          return true;
        var parents = graph3.parentWays(graph3.entity(nodeID));
        if (parents.length < 3)
          return true;
        var parentsMoving = parents.every(function(way) {
          return cache7.moving[way.id];
        });
        if (!parentsMoving)
          delete cache7.moving[nodeID];
        return parentsMoving;
      }
      function cacheEntities(ids) {
        for (var i2 = 0; i2 < ids.length; i2++) {
          var id2 = ids[i2];
          if (cache7.moving[id2])
            continue;
          cache7.moving[id2] = true;
          var entity2 = graph3.hasEntity(id2);
          if (!entity2)
            continue;
          if (entity2.type === "node") {
            cache7.nodes.push(id2);
            cache7.startLoc[id2] = entity2.loc;
          } else if (entity2.type === "way") {
            cache7.ways.push(id2);
            cacheEntities(entity2.nodes);
          } else {
            cacheEntities(entity2.members.map(function(member) {
              return member.id;
            }));
          }
        }
      }
      function cacheIntersections(ids) {
        function isEndpoint2(way2, id3) {
          return !way2.isClosed() && !!way2.affix(id3);
        }
        for (var i2 = 0; i2 < ids.length; i2++) {
          var id2 = ids[i2];
          var childNodes2 = graph3.childNodes(graph3.entity(id2));
          for (var j = 0; j < childNodes2.length; j++) {
            var node = childNodes2[j];
            var parents = graph3.parentWays(node);
            if (parents.length !== 2)
              continue;
            var moved = graph3.entity(id2);
            var unmoved = null;
            for (var k = 0; k < parents.length; k++) {
              var way = parents[k];
              if (!cache7.moving[way.id]) {
                unmoved = way;
                break;
              }
            }
            if (!unmoved)
              continue;
            if (utilArrayIntersection(moved.nodes, unmoved.nodes).length > 2)
              continue;
            if (moved.isArea() || unmoved.isArea())
              continue;
            cache7.intersections.push({
              nodeId: node.id,
              movedId: moved.id,
              unmovedId: unmoved.id,
              movedIsEP: isEndpoint2(moved, node.id),
              unmovedIsEP: isEndpoint2(unmoved, node.id)
            });
          }
        }
      }
      if (!cache7) {
        cache7 = {};
      }
      if (!cache7.ok) {
        cache7.moving = {};
        cache7.intersections = [];
        cache7.replacedVertex = {};
        cache7.startLoc = {};
        cache7.nodes = [];
        cache7.ways = [];
        cacheEntities(moveIDs);
        cacheIntersections(cache7.ways);
        cache7.nodes = cache7.nodes.filter(canMove);
        cache7.ok = true;
      }
    }
    function replaceMovedVertex(nodeId, wayId, graph3, delta) {
      var way = graph3.entity(wayId);
      var moved = graph3.entity(nodeId);
      var movedIndex = way.nodes.indexOf(nodeId);
      var len, prevIndex, nextIndex;
      if (way.isClosed()) {
        len = way.nodes.length - 1;
        prevIndex = (movedIndex + len - 1) % len;
        nextIndex = (movedIndex + len + 1) % len;
      } else {
        len = way.nodes.length;
        prevIndex = movedIndex - 1;
        nextIndex = movedIndex + 1;
      }
      var prev = graph3.hasEntity(way.nodes[prevIndex]);
      var next = graph3.hasEntity(way.nodes[nextIndex]);
      if (!prev || !next)
        return graph3;
      var key = wayId + "_" + nodeId;
      var orig = cache7.replacedVertex[key];
      if (!orig) {
        orig = osmNode();
        cache7.replacedVertex[key] = orig;
        cache7.startLoc[orig.id] = cache7.startLoc[nodeId];
      }
      var start2, end;
      if (delta) {
        start2 = projection2(cache7.startLoc[nodeId]);
        end = projection2.invert(vecAdd(start2, delta));
      } else {
        end = cache7.startLoc[nodeId];
      }
      orig = orig.move(end);
      var o2 = projection2(orig.loc);
      var a = projection2(prev.loc);
      var b2 = projection2(next.loc);
      var angle2 = Math.abs(vecAngle(o2, a) - vecAngle(o2, b2)) * (180 / Math.PI);
      if (angle2 > 175 && angle2 < 185)
        return graph3;
      var p1 = [prev.loc, orig.loc, moved.loc, next.loc].map(projection2);
      var p2 = [prev.loc, moved.loc, orig.loc, next.loc].map(projection2);
      var d1 = geomPathLength(p1);
      var d2 = geomPathLength(p2);
      var insertAt = d1 <= d2 ? movedIndex : nextIndex;
      if (way.isClosed() && insertAt === 0)
        insertAt = len;
      way = way.addNode(orig.id, insertAt);
      return graph3.replace(orig).replace(way);
    }
    function removeDuplicateVertices(wayId, graph3) {
      var way = graph3.entity(wayId);
      var epsilon3 = 1e-6;
      var prev, curr;
      function isInteresting(node, graph4) {
        return graph4.parentWays(node).length > 1 || graph4.parentRelations(node).length || node.hasInterestingTags();
      }
      for (var i2 = 0; i2 < way.nodes.length; i2++) {
        curr = graph3.entity(way.nodes[i2]);
        if (prev && curr && vecEqual(prev.loc, curr.loc, epsilon3)) {
          if (!isInteresting(prev, graph3)) {
            way = way.removeNode(prev.id);
            graph3 = graph3.replace(way).remove(prev);
          } else if (!isInteresting(curr, graph3)) {
            way = way.removeNode(curr.id);
            graph3 = graph3.replace(way).remove(curr);
          }
        }
        prev = curr;
      }
      return graph3;
    }
    function unZorroIntersection(intersection, graph3) {
      var vertex = graph3.entity(intersection.nodeId);
      var way1 = graph3.entity(intersection.movedId);
      var way2 = graph3.entity(intersection.unmovedId);
      var isEP1 = intersection.movedIsEP;
      var isEP2 = intersection.unmovedIsEP;
      if (isEP1 && isEP2)
        return graph3;
      var nodes1 = graph3.childNodes(way1).filter(function(n2) {
        return n2 !== vertex;
      });
      var nodes2 = graph3.childNodes(way2).filter(function(n2) {
        return n2 !== vertex;
      });
      if (way1.isClosed() && way1.first() === vertex.id)
        nodes1.push(nodes1[0]);
      if (way2.isClosed() && way2.first() === vertex.id)
        nodes2.push(nodes2[0]);
      var edge1 = !isEP1 && geoChooseEdge(nodes1, projection2(vertex.loc), projection2);
      var edge2 = !isEP2 && geoChooseEdge(nodes2, projection2(vertex.loc), projection2);
      var loc;
      if (!isEP1 && !isEP2) {
        var epsilon3 = 1e-6, maxIter = 10;
        for (var i2 = 0; i2 < maxIter; i2++) {
          loc = vecInterp(edge1.loc, edge2.loc, 0.5);
          edge1 = geoChooseEdge(nodes1, projection2(loc), projection2);
          edge2 = geoChooseEdge(nodes2, projection2(loc), projection2);
          if (Math.abs(edge1.distance - edge2.distance) < epsilon3)
            break;
        }
      } else if (!isEP1) {
        loc = edge1.loc;
      } else {
        loc = edge2.loc;
      }
      graph3 = graph3.replace(vertex.move(loc));
      if (!isEP1 && edge1.index !== way1.nodes.indexOf(vertex.id)) {
        way1 = way1.removeNode(vertex.id).addNode(vertex.id, edge1.index);
        graph3 = graph3.replace(way1);
      }
      if (!isEP2 && edge2.index !== way2.nodes.indexOf(vertex.id)) {
        way2 = way2.removeNode(vertex.id).addNode(vertex.id, edge2.index);
        graph3 = graph3.replace(way2);
      }
      return graph3;
    }
    function cleanupIntersections(graph3) {
      for (var i2 = 0; i2 < cache7.intersections.length; i2++) {
        var obj = cache7.intersections[i2];
        graph3 = replaceMovedVertex(obj.nodeId, obj.movedId, graph3, _delta);
        graph3 = replaceMovedVertex(obj.nodeId, obj.unmovedId, graph3, null);
        graph3 = unZorroIntersection(obj, graph3);
        graph3 = removeDuplicateVertices(obj.movedId, graph3);
        graph3 = removeDuplicateVertices(obj.unmovedId, graph3);
      }
      return graph3;
    }
    function limitDelta(graph3) {
      function moveNode(loc) {
        return vecAdd(projection2(loc), _delta);
      }
      for (var i2 = 0; i2 < cache7.intersections.length; i2++) {
        var obj = cache7.intersections[i2];
        if (obj.movedIsEP && obj.unmovedIsEP)
          continue;
        if (!obj.movedIsEP)
          continue;
        var node = graph3.entity(obj.nodeId);
        var start2 = projection2(node.loc);
        var end = vecAdd(start2, _delta);
        var movedNodes = graph3.childNodes(graph3.entity(obj.movedId));
        var movedPath = movedNodes.map(function(n2) {
          return moveNode(n2.loc);
        });
        var unmovedNodes = graph3.childNodes(graph3.entity(obj.unmovedId));
        var unmovedPath = unmovedNodes.map(function(n2) {
          return projection2(n2.loc);
        });
        var hits = geomPathIntersections(movedPath, unmovedPath);
        for (var j = 0; i2 < hits.length; i2++) {
          if (vecEqual(hits[j], end))
            continue;
          var edge = geoChooseEdge(unmovedNodes, end, projection2);
          _delta = vecSubtract(projection2(edge.loc), start2);
        }
      }
    }
    var action = function action2(graph3) {
      if (_delta[0] === 0 && _delta[1] === 0)
        return graph3;
      setupCache(graph3);
      if (cache7.intersections.length) {
        limitDelta(graph3);
      }
      for (var i2 = 0; i2 < cache7.nodes.length; i2++) {
        var node = graph3.entity(cache7.nodes[i2]);
        var start2 = projection2(node.loc);
        var end = vecAdd(start2, _delta);
        graph3 = graph3.replace(node.move(projection2.invert(end)));
      }
      if (cache7.intersections.length) {
        graph3 = cleanupIntersections(graph3);
      }
      return graph3;
    };
    action.delta = function() {
      return _delta;
    };
    return action;
  }

  // modules/actions/move_member.js
  function actionMoveMember(relationId, fromIndex, toIndex) {
    return function(graph3) {
      return graph3.replace(graph3.entity(relationId).moveMember(fromIndex, toIndex));
    };
  }

  // modules/actions/move_node.js
  function actionMoveNode(nodeID, toLoc) {
    var action = function action2(graph3, t) {
      if (t === null || !isFinite(t))
        t = 1;
      t = Math.min(Math.max(+t, 0), 1);
      var node = graph3.entity(nodeID);
      return graph3.replace(node.move(vecInterp(node.loc, toLoc, t)));
    };
    action.transitionable = true;
    return action;
  }

  // modules/actions/noop.js
  function actionNoop() {
    return function(graph3) {
      return graph3;
    };
  }

  // modules/actions/orthogonalize.js
  function actionOrthogonalize(wayID, projection2, vertexID, degThresh, ep) {
    var epsilon3 = ep || 1e-4;
    var threshold = degThresh || 13;
    var lowerThreshold = Math.cos((90 - threshold) * Math.PI / 180);
    var upperThreshold = Math.cos(threshold * Math.PI / 180);
    var action = function action2(graph3, t) {
      if (t === null || !isFinite(t))
        t = 1;
      t = Math.min(Math.max(+t, 0), 1);
      var way = graph3.entity(wayID);
      way = way.removeNode("");
      if (way.tags.nonsquare) {
        var tags = Object.assign({}, way.tags);
        delete tags.nonsquare;
        way = way.update({
          tags: tags
        });
      }
      graph3 = graph3.replace(way);
      var isClosed2 = way.isClosed();
      var nodes = graph3.childNodes(way).slice();
      if (isClosed2)
        nodes.pop();
      if (vertexID !== void 0) {
        nodes = nodeSubset(nodes, vertexID, isClosed2);
        if (nodes.length !== 3)
          return graph3;
      }
      var nodeCount = {};
      var points = [];
      var corner = {
        i: 0,
        dotp: 1
      };
      var node, point5, loc, score, motions, i2, j;
      for (i2 = 0; i2 < nodes.length; i2++) {
        node = nodes[i2];
        nodeCount[node.id] = (nodeCount[node.id] || 0) + 1;
        points.push({
          id: node.id,
          coord: projection2(node.loc)
        });
      }
      if (points.length === 3) {
        for (i2 = 0; i2 < 1e3; i2++) {
          motions = points.map(calcMotion);
          points[corner.i].coord = vecAdd(points[corner.i].coord, motions[corner.i]);
          score = corner.dotp;
          if (score < epsilon3) {
            break;
          }
        }
        node = graph3.entity(nodes[corner.i].id);
        loc = projection2.invert(points[corner.i].coord);
        graph3 = graph3.replace(node.move(vecInterp(node.loc, loc, t)));
      } else {
        var straights = [];
        var simplified = [];
        for (i2 = 0; i2 < points.length; i2++) {
          point5 = points[i2];
          var dotp = 0;
          if (isClosed2 || i2 > 0 && i2 < points.length - 1) {
            var a = points[(i2 - 1 + points.length) % points.length];
            var b2 = points[(i2 + 1) % points.length];
            dotp = Math.abs(geoOrthoNormalizedDotProduct(a.coord, b2.coord, point5.coord));
          }
          if (dotp > upperThreshold) {
            straights.push(point5);
          } else {
            simplified.push(point5);
          }
        }
        var bestPoints = clonePoints(simplified);
        var originalPoints = clonePoints(simplified);
        score = Infinity;
        for (i2 = 0; i2 < 1e3; i2++) {
          motions = simplified.map(calcMotion);
          for (j = 0; j < motions.length; j++) {
            simplified[j].coord = vecAdd(simplified[j].coord, motions[j]);
          }
          var newScore = geoOrthoCalcScore(simplified, isClosed2, epsilon3, threshold);
          if (newScore < score) {
            bestPoints = clonePoints(simplified);
            score = newScore;
          }
          if (score < epsilon3) {
            break;
          }
        }
        var bestCoords = bestPoints.map(function(p2) {
          return p2.coord;
        });
        if (isClosed2)
          bestCoords.push(bestCoords[0]);
        for (i2 = 0; i2 < bestPoints.length; i2++) {
          point5 = bestPoints[i2];
          if (!vecEqual(originalPoints[i2].coord, point5.coord)) {
            node = graph3.entity(point5.id);
            loc = projection2.invert(point5.coord);
            graph3 = graph3.replace(node.move(vecInterp(node.loc, loc, t)));
          }
        }
        for (i2 = 0; i2 < straights.length; i2++) {
          point5 = straights[i2];
          if (nodeCount[point5.id] > 1)
            continue;
          node = graph3.entity(point5.id);
          if (t === 1 && graph3.parentWays(node).length === 1 && graph3.parentRelations(node).length === 0 && !node.hasInterestingTags()) {
            graph3 = actionDeleteNode(node.id)(graph3);
          } else {
            var choice = vecProject(point5.coord, bestCoords);
            if (choice) {
              loc = projection2.invert(choice.target);
              graph3 = graph3.replace(node.move(vecInterp(node.loc, loc, t)));
            }
          }
        }
      }
      return graph3;
      function clonePoints(array2) {
        return array2.map(function(p2) {
          return {
            id: p2.id,
            coord: [p2.coord[0], p2.coord[1]]
          };
        });
      }
      function calcMotion(point6, i3, array2) {
        if (!isClosed2 && (i3 === 0 || i3 === array2.length - 1))
          return [0, 0];
        if (nodeCount[array2[i3].id] > 1)
          return [0, 0];
        var a2 = array2[(i3 - 1 + array2.length) % array2.length].coord;
        var origin = point6.coord;
        var b3 = array2[(i3 + 1) % array2.length].coord;
        var p2 = vecSubtract(a2, origin);
        var q2 = vecSubtract(b3, origin);
        var scale2 = 2 * Math.min(vecLength(p2), vecLength(q2));
        p2 = vecNormalize(p2);
        q2 = vecNormalize(q2);
        var dotp2 = p2[0] * q2[0] + p2[1] * q2[1];
        var val = Math.abs(dotp2);
        if (val < lowerThreshold) {
          corner.i = i3;
          corner.dotp = val;
          var vec = vecNormalize(vecAdd(p2, q2));
          return vecScale(vec, 0.1 * dotp2 * scale2);
        }
        return [0, 0];
      }
    };
    function nodeSubset(nodes, vertexID2, isClosed2) {
      var first2 = isClosed2 ? 0 : 1;
      var last3 = isClosed2 ? nodes.length : nodes.length - 1;
      for (var i2 = first2; i2 < last3; i2++) {
        if (nodes[i2].id === vertexID2) {
          return [nodes[(i2 - 1 + nodes.length) % nodes.length], nodes[i2], nodes[(i2 + 1) % nodes.length]];
        }
      }
      return [];
    }
    action.disabled = function(graph3) {
      var way = graph3.entity(wayID);
      way = way.removeNode("");
      graph3 = graph3.replace(way);
      var isClosed2 = way.isClosed();
      var nodes = graph3.childNodes(way).slice();
      if (isClosed2)
        nodes.pop();
      var allowStraightAngles = false;
      if (vertexID !== void 0) {
        allowStraightAngles = true;
        nodes = nodeSubset(nodes, vertexID, isClosed2);
        if (nodes.length !== 3)
          return "end_vertex";
      }
      var coords = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var score = geoOrthoCanOrthogonalize(coords, isClosed2, epsilon3, threshold, allowStraightAngles);
      if (score === null) {
        return "not_squarish";
      } else if (score === 0) {
        return "square_enough";
      } else {
        return false;
      }
    };
    action.transitionable = true;
    return action;
  }

  // modules/actions/restrict_turn.js
  function actionRestrictTurn(turn, restrictionType, restrictionID) {
    return function(graph3) {
      var fromWay = graph3.entity(turn.from.way);
      var toWay = graph3.entity(turn.to.way);
      var viaNode = turn.via.node && graph3.entity(turn.via.node);
      var viaWays = turn.via.ways && turn.via.ways.map(function(id2) {
        return graph3.entity(id2);
      });
      var members = [];
      members.push({
        id: fromWay.id,
        type: "way",
        role: "from"
      });
      if (viaNode) {
        members.push({
          id: viaNode.id,
          type: "node",
          role: "via"
        });
      } else if (viaWays) {
        viaWays.forEach(function(viaWay) {
          members.push({
            id: viaWay.id,
            type: "way",
            role: "via"
          });
        });
      }
      members.push({
        id: toWay.id,
        type: "way",
        role: "to"
      });
      return graph3.replace(osmRelation({
        id: restrictionID,
        tags: {
          type: "restriction",
          restriction: restrictionType
        },
        members: members
      }));
    };
  }

  // modules/actions/revert.js
  function actionRevert(id2) {
    var action = function action2(graph3) {
      var entity2 = graph3.hasEntity(id2), base2 = graph3.base().entities[id2];
      if (entity2 && !base2) {
        if (entity2.type === "node") {
          graph3.parentWays(entity2).forEach(function(parent2) {
            parent2 = parent2.removeNode(id2);
            graph3 = graph3.replace(parent2);
            if (parent2.isDegenerate()) {
              graph3 = actionDeleteWay(parent2.id)(graph3);
            }
          });
        }
        graph3.parentRelations(entity2).forEach(function(parent2) {
          parent2 = parent2.removeMembersWithID(id2);
          graph3 = graph3.replace(parent2);
          if (parent2.isDegenerate()) {
            graph3 = actionDeleteRelation(parent2.id)(graph3);
          }
        });
      }
      return graph3.revert(id2);
    };
    return action;
  }

  // modules/actions/rotate.js
  function actionRotate(rotateIds, pivot, angle2, projection2) {
    var action = function action2(graph3) {
      return graph3.update(function(graph4) {
        utilGetAllNodes(rotateIds, graph4).forEach(function(node) {
          var point5 = geomRotatePoints([projection2(node.loc)], angle2, pivot)[0];
          graph4 = graph4.replace(node.move(projection2.invert(point5)));
        });
      });
    };
    return action;
  }

  // modules/actions/scale.js
  function actionScale(ids, pivotLoc, scaleFactor, projection2) {
    return function(graph3) {
      return graph3.update(function(graph4) {
        var point5, radial;
        utilGetAllNodes(ids, graph4).forEach(function(node) {
          point5 = projection2(node.loc);
          radial = [point5[0] - pivotLoc[0], point5[1] - pivotLoc[1]];
          point5 = [pivotLoc[0] + scaleFactor * radial[0], pivotLoc[1] + scaleFactor * radial[1]];
          graph4 = graph4.replace(node.move(projection2.invert(point5)));
        });
      });
    };
  }

  // modules/actions/straighten_nodes.js
  function actionStraightenNodes(nodeIDs, projection2) {
    function positionAlongWay(a, o2, b2) {
      return vecDot(a, b2, o2) / vecDot(b2, b2, o2);
    }
    function getEndpoints(points) {
      var ssr = geomGetSmallestSurroundingRectangle(points);
      var p1 = [(ssr.poly[0][0] + ssr.poly[1][0]) / 2, (ssr.poly[0][1] + ssr.poly[1][1]) / 2];
      var q1 = [(ssr.poly[2][0] + ssr.poly[3][0]) / 2, (ssr.poly[2][1] + ssr.poly[3][1]) / 2];
      var p2 = [(ssr.poly[3][0] + ssr.poly[4][0]) / 2, (ssr.poly[3][1] + ssr.poly[4][1]) / 2];
      var q2 = [(ssr.poly[1][0] + ssr.poly[2][0]) / 2, (ssr.poly[1][1] + ssr.poly[2][1]) / 2];
      var isLong = vecLength(p1, q1) > vecLength(p2, q2);
      if (isLong) {
        return [p1, q1];
      }
      return [p2, q2];
    }
    var action = function action2(graph3, t) {
      if (t === null || !isFinite(t))
        t = 1;
      t = Math.min(Math.max(+t, 0), 1);
      var nodes = nodeIDs.map(function(id2) {
        return graph3.entity(id2);
      });
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var endpoints = getEndpoints(points);
      var startPoint = endpoints[0];
      var endPoint = endpoints[1];
      for (var i2 = 0; i2 < points.length; i2++) {
        var node = nodes[i2];
        var point5 = points[i2];
        var u = positionAlongWay(point5, startPoint, endPoint);
        var point22 = vecInterp(startPoint, endPoint, u);
        var loc2 = projection2.invert(point22);
        graph3 = graph3.replace(node.move(vecInterp(node.loc, loc2, t)));
      }
      return graph3;
    };
    action.disabled = function(graph3) {
      var nodes = nodeIDs.map(function(id2) {
        return graph3.entity(id2);
      });
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var endpoints = getEndpoints(points);
      var startPoint = endpoints[0];
      var endPoint = endpoints[1];
      var maxDistance = 0;
      for (var i2 = 0; i2 < points.length; i2++) {
        var point5 = points[i2];
        var u = positionAlongWay(point5, startPoint, endPoint);
        var p2 = vecInterp(startPoint, endPoint, u);
        var dist = vecLength(p2, point5);
        if (!isNaN(dist) && dist > maxDistance) {
          maxDistance = dist;
        }
      }
      if (maxDistance < 1e-4) {
        return "straight_enough";
      }
    };
    action.transitionable = true;
    return action;
  }

  // modules/actions/straighten_way.js
  function actionStraightenWay(selectedIDs, projection2) {
    function positionAlongWay(a, o2, b2) {
      return vecDot(a, b2, o2) / vecDot(b2, b2, o2);
    }
    function allNodes(graph3) {
      var nodes = [];
      var startNodes = [];
      var endNodes = [];
      var remainingWays = [];
      var selectedWays = selectedIDs.filter(function(w) {
        return graph3.entity(w).type === "way";
      });
      var selectedNodes = selectedIDs.filter(function(n2) {
        return graph3.entity(n2).type === "node";
      });
      for (var i2 = 0; i2 < selectedWays.length; i2++) {
        var way = graph3.entity(selectedWays[i2]);
        nodes = way.nodes.slice(0);
        remainingWays.push(nodes);
        startNodes.push(nodes[0]);
        endNodes.push(nodes[nodes.length - 1]);
      }
      startNodes = startNodes.filter(function(n2) {
        return startNodes.indexOf(n2) === startNodes.lastIndexOf(n2);
      });
      endNodes = endNodes.filter(function(n2) {
        return endNodes.indexOf(n2) === endNodes.lastIndexOf(n2);
      });
      var currNode = utilArrayDifference(startNodes, endNodes).concat(utilArrayDifference(endNodes, startNodes))[0];
      var nextWay = [];
      nodes = [];
      var getNextWay = function getNextWay2(currNode2, remainingWays2) {
        return remainingWays2.filter(function(way2) {
          return way2[0] === currNode2 || way2[way2.length - 1] === currNode2;
        })[0];
      };
      while (remainingWays.length) {
        nextWay = getNextWay(currNode, remainingWays);
        remainingWays = utilArrayDifference(remainingWays, [nextWay]);
        if (nextWay[0] !== currNode) {
          nextWay.reverse();
        }
        nodes = nodes.concat(nextWay);
        currNode = nodes[nodes.length - 1];
      }
      if (selectedNodes.length === 2) {
        var startNodeIdx = nodes.indexOf(selectedNodes[0]);
        var endNodeIdx = nodes.indexOf(selectedNodes[1]);
        var sortedStartEnd = [startNodeIdx, endNodeIdx];
        sortedStartEnd.sort(function(a, b2) {
          return a - b2;
        });
        nodes = nodes.slice(sortedStartEnd[0], sortedStartEnd[1] + 1);
      }
      return nodes.map(function(n2) {
        return graph3.entity(n2);
      });
    }
    function shouldKeepNode(node, graph3) {
      return graph3.parentWays(node).length > 1 || graph3.parentRelations(node).length || node.hasInterestingTags();
    }
    var action = function action2(graph3, t) {
      if (t === null || !isFinite(t))
        t = 1;
      t = Math.min(Math.max(+t, 0), 1);
      var nodes = allNodes(graph3);
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var startPoint = points[0];
      var endPoint = points[points.length - 1];
      var toDelete = [];
      var i2;
      for (i2 = 1; i2 < points.length - 1; i2++) {
        var node = nodes[i2];
        var point5 = points[i2];
        if (t < 1 || shouldKeepNode(node, graph3)) {
          var u = positionAlongWay(point5, startPoint, endPoint);
          var p2 = vecInterp(startPoint, endPoint, u);
          var loc2 = projection2.invert(p2);
          graph3 = graph3.replace(node.move(vecInterp(node.loc, loc2, t)));
        } else {
          if (toDelete.indexOf(node) === -1) {
            toDelete.push(node);
          }
        }
      }
      for (i2 = 0; i2 < toDelete.length; i2++) {
        graph3 = actionDeleteNode(toDelete[i2].id)(graph3);
      }
      return graph3;
    };
    action.disabled = function(graph3) {
      var nodes = allNodes(graph3);
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var startPoint = points[0];
      var endPoint = points[points.length - 1];
      var threshold = 0.2 * vecLength(startPoint, endPoint);
      var i2;
      if (threshold === 0) {
        return "too_bendy";
      }
      var maxDistance = 0;
      for (i2 = 1; i2 < points.length - 1; i2++) {
        var point5 = points[i2];
        var u = positionAlongWay(point5, startPoint, endPoint);
        var p2 = vecInterp(startPoint, endPoint, u);
        var dist = vecLength(p2, point5);
        if (isNaN(dist) || dist > threshold) {
          return "too_bendy";
        } else if (dist > maxDistance) {
          maxDistance = dist;
        }
      }
      var keepingAllNodes = nodes.every(function(node, i3) {
        return i3 === 0 || i3 === nodes.length - 1 || shouldKeepNode(node, graph3);
      });
      if (maxDistance < 1e-4 && keepingAllNodes) {
        return "straight_enough";
      }
    };
    action.transitionable = true;
    return action;
  }

  // modules/actions/unrestrict_turn.js
  function actionUnrestrictTurn(turn) {
    return function(graph3) {
      return actionDeleteRelation(turn.restrictionID)(graph3);
    };
  }

  // modules/actions/reflect.js
  function actionReflect(reflectIds, projection2) {
    var _useLongAxis = true;
    var action = function action2(graph3, t) {
      if (t === null || !isFinite(t))
        t = 1;
      t = Math.min(Math.max(+t, 0), 1);
      var nodes = utilGetAllNodes(reflectIds, graph3);
      var points = nodes.map(function(n2) {
        return projection2(n2.loc);
      });
      var ssr = geomGetSmallestSurroundingRectangle(points);
      var p1 = [(ssr.poly[0][0] + ssr.poly[1][0]) / 2, (ssr.poly[0][1] + ssr.poly[1][1]) / 2];
      var q1 = [(ssr.poly[2][0] + ssr.poly[3][0]) / 2, (ssr.poly[2][1] + ssr.poly[3][1]) / 2];
      var p2 = [(ssr.poly[3][0] + ssr.poly[4][0]) / 2, (ssr.poly[3][1] + ssr.poly[4][1]) / 2];
      var q2 = [(ssr.poly[1][0] + ssr.poly[2][0]) / 2, (ssr.poly[1][1] + ssr.poly[2][1]) / 2];
      var p3, q3;
      var isLong = vecLength(p1, q1) > vecLength(p2, q2);
      if (_useLongAxis && isLong || !_useLongAxis && !isLong) {
        p3 = p1;
        q3 = q1;
      } else {
        p3 = p2;
        q3 = q2;
      }
      var dx = q3[0] - p3[0];
      var dy = q3[1] - p3[1];
      var a = (dx * dx - dy * dy) / (dx * dx + dy * dy);
      var b2 = 2 * dx * dy / (dx * dx + dy * dy);
      for (var i2 = 0; i2 < nodes.length; i2++) {
        var node = nodes[i2];
        var c2 = projection2(node.loc);
        var c22 = [a * (c2[0] - p3[0]) + b2 * (c2[1] - p3[1]) + p3[0], b2 * (c2[0] - p3[0]) - a * (c2[1] - p3[1]) + p3[1]];
        var loc2 = projection2.invert(c22);
        node = node.move(vecInterp(node.loc, loc2, t));
        graph3 = graph3.replace(node);
      }
      return graph3;
    };
    action.useLongAxis = function(val) {
      if (!arguments.length)
        return _useLongAxis;
      _useLongAxis = val;
      return action;
    };
    action.transitionable = true;
    return action;
  }

  // modules/actions/upgrade_tags.js
  function actionUpgradeTags(entityId, oldTags, replaceTags) {
    return function(graph3) {
      var entity2 = graph3.entity(entityId);
      var tags = Object.assign({}, entity2.tags);
      var transferValue;
      var semiIndex;
      for (var oldTagKey in oldTags) {
        if (!(oldTagKey in tags))
          continue;
        if (oldTags[oldTagKey] === "*") {
          transferValue = tags[oldTagKey];
          delete tags[oldTagKey];
        } else if (oldTags[oldTagKey] === tags[oldTagKey]) {
          delete tags[oldTagKey];
        } else {
          var vals = tags[oldTagKey].split(";").filter(Boolean);
          var oldIndex = vals.indexOf(oldTags[oldTagKey]);
          if (vals.length === 1 || oldIndex === -1) {
            delete tags[oldTagKey];
          } else {
            if (replaceTags && replaceTags[oldTagKey]) {
              semiIndex = oldIndex;
            }
            vals.splice(oldIndex, 1);
            tags[oldTagKey] = vals.join(";");
          }
        }
      }
      if (replaceTags) {
        for (var replaceKey in replaceTags) {
          var replaceValue = replaceTags[replaceKey];
          if (replaceValue === "*") {
            if (tags[replaceKey] && tags[replaceKey] !== "no") {
              continue;
            } else {
              tags[replaceKey] = "yes";
            }
          } else if (replaceValue === "$1") {
            tags[replaceKey] = transferValue;
          } else {
            if (tags[replaceKey] && oldTags[replaceKey] && semiIndex !== void 0) {
              var existingVals = tags[replaceKey].split(";").filter(Boolean);
              if (existingVals.indexOf(replaceValue) === -1) {
                existingVals.splice(semiIndex, 0, replaceValue);
                tags[replaceKey] = existingVals.join(";");
              }
            } else {
              tags[replaceKey] = replaceValue;
            }
          }
        }
      }
      return graph3.replace(entity2.update({
        tags: tags
      }));
    };
  }

  // modules/actions/rapid_accept_feature.js
  function findConnectionPoint(graph3, newNode, targetWay, nodeA, nodeB) {
    var sortByLon = Math.abs(nodeA.loc[0] - nodeB.loc[0]) > Math.abs(nodeA.loc[1] - nodeB.loc[1]);
    var sortFunc = sortByLon ? function(n1, n2) {
      return nodeA.loc[0] < nodeB.loc[0] ? n1.loc[0] - n2.loc[0] : n2.loc[0] - n1.loc[0];
    } : function(n1, n2) {
      return nodeA.loc[1] < nodeB.loc[1] ? n1.loc[1] - n2.loc[1] : n2.loc[1] - n1.loc[1];
    };
    var nidList = targetWay.nodes;
    var idxA = nidList.indexOf(nodeA.id);
    var idxB = nidList.indexOf(nodeB.id);
    if (idxA === -1 || idxB === -1 || idxA >= idxB || sortFunc(nodeA, nodeB) >= 0) {
      return null;
    }
    var insertIdx = idxA + 1;
    while (insertIdx < idxB && sortFunc(newNode, graph3.entity(nidList[insertIdx])) > 0) {
      insertIdx++;
    }
    var locA = graph3.entity(nidList[insertIdx - 1]).loc;
    var locB = graph3.entity(nidList[insertIdx]).loc;
    var locN = newNode.loc;
    var coeff = Math.abs(locA[0] - locB[0]) > Math.abs(locA[1] - locB[1]) ? (locN[0] - locA[0]) / (locB[0] - locA[0]) : (locN[1] - locA[1]) / (locB[1] - locA[1]);
    var interpLoc = vecInterp(locA, locB, coeff);
    return {
      insertIdx: insertIdx,
      interpLoc: interpLoc
    };
  }
  function locationChanged(loc1, loc2) {
    return Math.abs(loc1[0] - loc2[0]) > 2e-5 || Math.abs(loc1[1] - loc2[1]) > 2e-5;
  }
  function removeMetadata(entity2) {
    delete entity2.__fbid__;
    delete entity2.__origid__;
    delete entity2.__service__;
    delete entity2.__datasetid__;
    delete entity2.tags.conn;
    delete entity2.tags.dupe;
  }
  function actionRapidAcceptFeature(entityID, extGraph) {
    return function(graph3) {
      var seenRelations = {};
      var extEntity = extGraph.entity(entityID);
      if (extEntity.type === "node") {
        acceptNode(extEntity);
      } else if (extEntity.type === "way") {
        acceptWay(extEntity);
      } else if (extEntity.type === "relation") {
        acceptRelation(extEntity);
      }
      return graph3;
      function acceptNode(extNode) {
        var node = osmNode(extNode);
        node.tags = Object.assign({}, node.tags);
        removeMetadata(node);
        graph3 = graph3.replace(node);
        return node;
      }
      function acceptWay(extWay) {
        var way = osmWay(extWay);
        way.nodes = extWay.nodes.slice();
        way.tags = Object.assign({}, way.tags);
        removeMetadata(way);
        var nodes = way.nodes.map(function(nodeId) {
          var node = osmNode(extGraph.entity(nodeId));
          node.tags = Object.assign({}, node.tags);
          var conn = node.tags.conn && node.tags.conn.split(",");
          var dupeId = node.tags.dupe;
          removeMetadata(node);
          if (dupeId && graph3.hasEntity(dupeId) && !locationChanged(graph3.entity(dupeId).loc, node.loc)) {
            node = graph3.entity(dupeId);
          } else if (graph3.hasEntity(node.id) && locationChanged(graph3.entity(node.id).loc, node.loc)) {
            node = osmNode({
              loc: node.loc
            });
          }
          if (conn && graph3.hasEntity(conn[0])) {
            var targetWay = graph3.entities[conn[0]];
            var nodeA = graph3.entities[conn[1]];
            var nodeB = graph3.entities[conn[2]];
            if (targetWay && nodeA && nodeB) {
              var result6 = findConnectionPoint(graph3, node, targetWay, nodeA, nodeB);
              if (result6 && !locationChanged(result6.interpLoc, node.loc)) {
                node.loc = result6.interpLoc;
                graph3 = graph3.replace(targetWay.addNode(node.id, result6.insertIdx));
              }
            }
          }
          graph3 = graph3.replace(node);
          return node.id;
        });
        way = way.update({
          nodes: nodes
        });
        graph3 = graph3.replace(way);
        return way;
      }
      function acceptRelation(extRelation) {
        var seen = seenRelations[extRelation.id];
        if (seen)
          return seen;
        var relation = osmRelation(extRelation);
        relation.members = extRelation.members.slice();
        relation.tags = Object.assign({}, extRelation.tags);
        removeMetadata(relation);
        var members = relation.members.map(function(member) {
          var extEntity2 = extGraph.entity(member.id);
          var replacement;
          if (extEntity2.type === "node") {
            replacement = acceptNode(extEntity2);
          } else if (extEntity2.type === "way") {
            replacement = acceptWay(extEntity2);
          } else if (extEntity2.type === "relation") {
            replacement = acceptRelation(extEntity2);
          }
          return Object.assign(member, {
            id: replacement.id
          });
        });
        relation = relation.update({
          members: members
        });
        graph3 = graph3.replace(relation);
        seenRelations[extRelation.id] = relation;
        return relation;
      }
    };
  }

  // modules/behavior/edit.js
  function behaviorEdit(context) {
    function behavior() {
      context.map().minzoom(context.minEditableZoom());
    }
    behavior.off = function() {
      context.map().minzoom(0);
    };
    return behavior;
  }

  // modules/behavior/hover.js
  init_typeof();
  function behaviorHover(context) {
    var dispatch12 = dispatch_default("hover");
    var _selection = select_default2(null);
    var _newNodeId = null;
    var _initialNodeID = null;
    var _altDisables;
    var _ignoreVertex;
    var _targets = [];
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function keydown(d3_event) {
      if (_altDisables && d3_event.keyCode === utilKeybinding.modifierCodes.alt) {
        _selection.selectAll(".hover").classed("hover-suppressed", true).classed("hover", false);
        _selection.classed("hover-disabled", true);
        dispatch12.call("hover", this, null);
      }
    }
    function keyup(d3_event) {
      if (_altDisables && d3_event.keyCode === utilKeybinding.modifierCodes.alt) {
        _selection.selectAll(".hover-suppressed").classed("hover-suppressed", false).classed("hover", true);
        _selection.classed("hover-disabled", false);
        dispatch12.call("hover", this, _targets);
      }
    }
    function behavior(selection2) {
      _selection = selection2;
      _targets = [];
      if (_initialNodeID) {
        _newNodeId = _initialNodeID;
        _initialNodeID = null;
      } else {
        _newNodeId = null;
      }
      _selection.on(_pointerPrefix + "over.hover", pointerover).on(_pointerPrefix + "out.hover", pointerout).on(_pointerPrefix + "down.hover", pointerover);
      select_default2(window).on(_pointerPrefix + "up.hover pointercancel.hover", pointerout, true).on("keydown.hover", keydown).on("keyup.hover", keyup);
      function eventTarget(d3_event) {
        var datum2 = d3_event.target && d3_event.target.__data__;
        if (_typeof(datum2) !== "object")
          return null;
        if (!(datum2 instanceof osmEntity) && datum2.properties && datum2.properties.entity instanceof osmEntity) {
          return datum2.properties.entity;
        }
        return datum2;
      }
      function pointerover(d3_event) {
        if (context.mode().id.indexOf("drag") === -1 && (!d3_event.pointerType || d3_event.pointerType === "mouse") && d3_event.buttons)
          return;
        var target = eventTarget(d3_event);
        if (target && _targets.indexOf(target) === -1) {
          _targets.push(target);
          updateHover(d3_event, _targets);
        }
      }
      function pointerout(d3_event) {
        var target = eventTarget(d3_event);
        var index = _targets.indexOf(target);
        if (index !== -1) {
          _targets.splice(index);
          updateHover(d3_event, _targets);
        }
      }
      function allowsVertex(d) {
        return d.geometry(context.graph()) === "vertex" || _mainPresetIndex.allowsVertex(d, context.graph());
      }
      function modeAllowsHover(target) {
        var mode = context.mode();
        if (mode.id === "add-point") {
          return mode.preset.matchGeometry("vertex") || target.type !== "way" && target.geometry(context.graph()) !== "vertex";
        }
        return true;
      }
      function updateHover(d3_event, targets) {
        _selection.selectAll(".hover").classed("hover", false);
        _selection.selectAll(".hover-suppressed").classed("hover-suppressed", false);
        var mode = context.mode();
        if (!_newNodeId && (mode.id === "draw-line" || mode.id === "draw-area")) {
          var node = targets.find(function(target) {
            return target instanceof osmEntity && target.type === "node";
          });
          _newNodeId = node && node.id;
        }
        targets = targets.filter(function(datum3) {
          if (datum3 instanceof osmEntity) {
            return datum3.id !== _newNodeId && (datum3.type !== "node" || !_ignoreVertex || allowsVertex(datum3)) && modeAllowsHover(datum3);
          }
          return true;
        });
        var selector = "";
        for (var i2 in targets) {
          var datum2 = targets[i2];
          if (datum2.__fbid__) {
            selector += ", .data" + window.toBase64(datum2.__fbid__).replace(/\=/g, "");
          } else if (datum2.__featurehash__) {
            selector += ", .data" + window.toBase64(datum2.__featurehash__).replace(/\=/g, "");
          } else if (datum2 instanceof QAItem) {
            selector += ", ." + datum2.service + ".itemId-" + datum2.id;
          } else if (datum2 instanceof osmNote) {
            selector += ", .note-" + datum2.id;
          } else if (datum2 instanceof osmEntity) {
            selector += ", ." + datum2.id;
            if (datum2.type === "relation") {
              for (var j in datum2.members) {
                selector += ", ." + datum2.members[j].id;
              }
            }
          }
        }
        var suppressed = _altDisables && d3_event && d3_event.altKey;
        if (selector.trim().length) {
          selector = selector.slice(1);
          _selection.selectAll(selector).classed(suppressed ? "hover-suppressed" : "hover", true);
        }
        dispatch12.call("hover", this, !suppressed && targets);
      }
    }
    behavior.off = function(selection2) {
      selection2.selectAll(".hover").classed("hover", false);
      selection2.selectAll(".hover-suppressed").classed("hover-suppressed", false);
      selection2.classed("hover-disabled", false);
      selection2.on(_pointerPrefix + "over.hover", null).on(_pointerPrefix + "out.hover", null).on(_pointerPrefix + "down.hover", null);
      select_default2(window).on(_pointerPrefix + "up.hover pointercancel.hover", null, true).on("keydown.hover", null).on("keyup.hover", null);
    };
    behavior.altDisables = function(val) {
      if (!arguments.length)
        return _altDisables;
      _altDisables = val;
      return behavior;
    };
    behavior.ignoreVertex = function(val) {
      if (!arguments.length)
        return _ignoreVertex;
      _ignoreVertex = val;
      return behavior;
    };
    behavior.initialNodeID = function(nodeId) {
      _initialNodeID = nodeId;
      return behavior;
    };
    return utilRebind(behavior, dispatch12, "on");
  }

  // modules/behavior/draw.js
  var _disableSpace = false;
  var _lastSpace = null;
  function behaviorDraw(context) {
    var dispatch12 = dispatch_default("move", "down", "downcancel", "click", "clickWay", "clickNode", "undo", "cancel", "finish");
    var keybinding = utilKeybinding("draw");
    var _hover = behaviorHover(context).altDisables(true).ignoreVertex(true).on("hover", context.ui().sidebar.hover);
    var _edit = behaviorEdit(context);
    var _closeTolerance = 4;
    var _tolerance = 12;
    var _mouseLeave = false;
    var _lastMouse = null;
    var _lastPointerUpEvent;
    var _downPointer;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function datum2(d3_event) {
      var mode = context.mode();
      var isNote = mode && mode.id.indexOf("note") !== -1;
      if (d3_event.altKey || isNote)
        return {};
      var element;
      if (d3_event.type === "keydown") {
        element = _lastMouse && _lastMouse.target;
      } else {
        element = d3_event.target;
      }
      var d = element.__data__;
      return d && d.properties && d.properties.target ? d : {};
    }
    function pointerdown(d3_event) {
      if (_downPointer)
        return;
      var pointerLocGetter = utilFastMouse(this);
      _downPointer = {
        id: d3_event.pointerId || "mouse",
        pointerLocGetter: pointerLocGetter,
        downTime: +new Date(),
        downLoc: pointerLocGetter(d3_event)
      };
      dispatch12.call("down", this, d3_event, datum2(d3_event));
    }
    function pointerup(d3_event) {
      if (!_downPointer || _downPointer.id !== (d3_event.pointerId || "mouse"))
        return;
      var downPointer = _downPointer;
      _downPointer = null;
      _lastPointerUpEvent = d3_event;
      if (downPointer.isCancelled)
        return;
      var t2 = +new Date();
      var p2 = downPointer.pointerLocGetter(d3_event);
      var dist = vecLength(downPointer.downLoc, p2);
      if (dist < _closeTolerance || dist < _tolerance && t2 - downPointer.downTime < 500) {
        select_default2(window).on("click.draw-block", function() {
          d3_event.stopPropagation();
        }, true);
        context.map().dblclickZoomEnable(false);
        window.setTimeout(function() {
          context.map().dblclickZoomEnable(true);
          select_default2(window).on("click.draw-block", null);
        }, 500);
        click(d3_event, p2);
      }
    }
    function pointermove(d3_event) {
      if (_downPointer && _downPointer.id === (d3_event.pointerId || "mouse") && !_downPointer.isCancelled) {
        var p2 = _downPointer.pointerLocGetter(d3_event);
        var dist = vecLength(_downPointer.downLoc, p2);
        if (dist >= _closeTolerance) {
          _downPointer.isCancelled = true;
          dispatch12.call("downcancel", this);
        }
      }
      if (d3_event.pointerType && d3_event.pointerType !== "mouse" || d3_event.buttons || _downPointer)
        return;
      if (_lastPointerUpEvent && _lastPointerUpEvent.pointerType !== "mouse" && d3_event.timeStamp - _lastPointerUpEvent.timeStamp < 100)
        return;
      _lastMouse = d3_event;
      dispatch12.call("move", this, d3_event, datum2(d3_event));
    }
    function pointercancel(d3_event) {
      if (_downPointer && _downPointer.id === (d3_event.pointerId || "mouse")) {
        if (!_downPointer.isCancelled) {
          dispatch12.call("downcancel", this);
        }
        _downPointer = null;
      }
    }
    function mouseenter() {
      _mouseLeave = false;
    }
    function mouseleave() {
      _mouseLeave = true;
    }
    function allowsVertex(d) {
      return d.geometry(context.graph()) === "vertex" || _mainPresetIndex.allowsVertex(d, context.graph());
    }
    function click(d3_event, loc) {
      var d = datum2(d3_event);
      var target = d && d.properties && d.properties.entity;
      var mode = context.mode();
      if (target && target.type === "node" && allowsVertex(target)) {
        dispatch12.call("clickNode", this, target, d);
        return;
      } else if (target && target.type === "way" && (mode.id !== "add-point" || mode.preset.matchGeometry("vertex"))) {
        var choice = geoChooseEdge(context.graph().childNodes(target), loc, context.projection, context.activeID());
        if (choice) {
          var edge = [target.nodes[choice.index - 1], target.nodes[choice.index]];
          dispatch12.call("clickWay", this, choice.loc, edge, d);
          return;
        }
      } else if (mode.id !== "add-point" || mode.preset.matchGeometry("point")) {
        var locLatLng = context.projection.invert(loc);
        dispatch12.call("click", this, locLatLng, d);
      }
    }
    function space(d3_event) {
      d3_event.preventDefault();
      d3_event.stopPropagation();
      var currSpace = context.map().mouse();
      if (_disableSpace && _lastSpace) {
        var dist = vecLength(_lastSpace, currSpace);
        if (dist > _tolerance) {
          _disableSpace = false;
        }
      }
      if (_disableSpace || _mouseLeave || !_lastMouse)
        return;
      _lastSpace = currSpace;
      _disableSpace = true;
      select_default2(window).on("keyup.space-block", function() {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        _disableSpace = false;
        select_default2(window).on("keyup.space-block", null);
      });
      var loc = context.map().mouse() || context.projection(context.map().center());
      click(d3_event, loc);
    }
    function backspace(d3_event) {
      d3_event.preventDefault();
      dispatch12.call("undo");
    }
    function del(d3_event) {
      d3_event.preventDefault();
      dispatch12.call("cancel");
    }
    function ret(d3_event) {
      d3_event.preventDefault();
      dispatch12.call("finish");
    }
    function behavior(selection2) {
      context.install(_hover);
      context.install(_edit);
      _downPointer = null;
      keybinding.on("\u232B", backspace).on("\u2326", del).on("\u238B", ret).on("\u21A9", ret).on("space", space).on("\u2325space", space);
      selection2.on("mouseenter.draw", mouseenter).on("mouseleave.draw", mouseleave).on(_pointerPrefix + "down.draw", pointerdown).on(_pointerPrefix + "move.draw", pointermove);
      select_default2(window).on(_pointerPrefix + "up.draw", pointerup, true).on("pointercancel.draw", pointercancel, true);
      select_default2(document).call(keybinding);
      return behavior;
    }
    behavior.off = function(selection2) {
      context.ui().sidebar.hover.cancel();
      context.uninstall(_hover);
      context.uninstall(_edit);
      selection2.on("mouseenter.draw", null).on("mouseleave.draw", null).on(_pointerPrefix + "down.draw", null).on(_pointerPrefix + "move.draw", null);
      select_default2(window).on(_pointerPrefix + "up.draw", null).on("pointercancel.draw", null);
      select_default2(document).call(keybinding.unbind);
    };
    behavior.hover = function() {
      return _hover;
    };
    return utilRebind(behavior, dispatch12, "on");
  }

  // modules/behavior/breathe.js
  var import_fast_deep_equal2 = __toModule(require_fast_deep_equal());

  // node_modules/d3-scale/src/init.js
  function initRange(domain, range4) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range4).domain(domain);
        break;
    }
    return this;
  }

  // node_modules/d3-scale/src/constant.js
  function constants(x2) {
    return function() {
      return x2;
    };
  }

  // node_modules/d3-scale/src/number.js
  function number2(x2) {
    return +x2;
  }

  // node_modules/d3-scale/src/continuous.js
  var unit = [0, 1];
  function identity3(x2) {
    return x2;
  }
  function normalize(a, b2) {
    return (b2 -= a = +a) ? function(x2) {
      return (x2 - a) / b2;
    } : constants(isNaN(b2) ? NaN : 0.5);
  }
  function clamper(a, b2) {
    var t;
    if (a > b2)
      t = a, a = b2, b2 = t;
    return function(x2) {
      return Math.max(a, Math.min(b2, x2));
    };
  }
  function bimap(domain, range4, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range4[0], r1 = range4[1];
    if (d1 < d0)
      d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else
      d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x2) {
      return r0(d0(x2));
    };
  }
  function polymap(domain, range4, interpolate) {
    var j = Math.min(domain.length, range4.length) - 1, d = new Array(j), r = new Array(j), i2 = -1;
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range4 = range4.slice().reverse();
    }
    while (++i2 < j) {
      d[i2] = normalize(domain[i2], domain[i2 + 1]);
      r[i2] = interpolate(range4[i2], range4[i2 + 1]);
    }
    return function(x2) {
      var i3 = bisect_default(domain, x2, 1, j) - 1;
      return r[i3](d[i3](x2));
    };
  }
  function copy6(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer2() {
    var domain = unit, range4 = unit, interpolate = value_default, transform2, untransform, unknown, clamp4 = identity3, piecewise, output4, input4;
    function rescale() {
      var n2 = Math.min(domain.length, range4.length);
      if (clamp4 !== identity3)
        clamp4 = clamper(domain[0], domain[n2 - 1]);
      piecewise = n2 > 2 ? polymap : bimap;
      output4 = input4 = null;
      return scale2;
    }
    function scale2(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : (output4 || (output4 = piecewise(domain.map(transform2), range4, interpolate)))(transform2(clamp4(x2)));
    }
    scale2.invert = function(y) {
      return clamp4(untransform((input4 || (input4 = piecewise(range4, domain.map(transform2), number_default)))(y)));
    };
    scale2.domain = function(_2) {
      return arguments.length ? (domain = Array.from(_2, number2), rescale()) : domain.slice();
    };
    scale2.range = function(_2) {
      return arguments.length ? (range4 = Array.from(_2), rescale()) : range4.slice();
    };
    scale2.rangeRound = function(_2) {
      return range4 = Array.from(_2), interpolate = round_default, rescale();
    };
    scale2.clamp = function(_2) {
      return arguments.length ? (clamp4 = _2 ? true : identity3, rescale()) : clamp4 !== identity3;
    };
    scale2.interpolate = function(_2) {
      return arguments.length ? (interpolate = _2, rescale()) : interpolate;
    };
    scale2.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale2) : unknown;
    };
    return function(t, u) {
      transform2 = t, untransform = u;
      return rescale();
    };
  }
  function continuous() {
    return transformer2()(identity3, identity3);
  }

  // node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x2) {
    return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
  }
  function formatDecimalParts(x2, p2) {
    if ((i2 = (x2 = p2 ? x2.toExponential(p2 - 1) : x2.toExponential()).indexOf("e")) < 0)
      return null;
    var i2, coefficient = x2.slice(0, i2);
    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x2.slice(i2 + 1)];
  }

  // node_modules/d3-format/src/exponent.js
  function exponent_default(x2) {
    return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
  }

  // node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value2, width) {
      var i2 = value2.length, t = [], j = 0, g2 = grouping[0], length = 0;
      while (i2 > 0 && g2 > 0) {
        if (length + g2 + 1 > width)
          g2 = Math.max(1, width - length);
        t.push(value2.substring(i2 -= g2, i2 + g2));
        if ((length += g2 + 1) > width)
          break;
        g2 = grouping[j = (j + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }

  // node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value2) {
      return value2.replace(/[0-9]/g, function(i2) {
        return numerals[+i2];
      });
    };
  }

  // node_modules/d3-format/src/formatSpecifier.js
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s) {
    out:
      for (var n2 = s.length, i2 = 1, i0 = -1, i1; i2 < n2; ++i2) {
        switch (s[i2]) {
          case ".":
            i0 = i1 = i2;
            break;
          case "0":
            if (i0 === 0)
              i0 = i2;
            i1 = i2;
            break;
          default:
            if (!+s[i2])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }

  // node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x2, p2) {
    var d = formatDecimalParts(x2, p2);
    if (!d)
      return x2 + "";
    var coefficient = d[0], exponent = d[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n2 = coefficient.length;
    return i2 === n2 ? coefficient : i2 > n2 ? coefficient + new Array(i2 - n2 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x2, Math.max(0, p2 + i2 - 1))[0];
  }

  // node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x2, p2) {
    var d = formatDecimalParts(x2, p2);
    if (!d)
      return x2 + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": function _(x2, p2) {
      return (x2 * 100).toFixed(p2);
    },
    "b": function b(x2) {
      return Math.round(x2).toString(2);
    },
    "c": function c(x2) {
      return x2 + "";
    },
    "d": formatDecimal_default,
    "e": function e(x2, p2) {
      return x2.toExponential(p2);
    },
    "f": function f(x2, p2) {
      return x2.toFixed(p2);
    },
    "g": function g(x2, p2) {
      return x2.toPrecision(p2);
    },
    "o": function o(x2) {
      return Math.round(x2).toString(8);
    },
    "p": function p(x2, _p) {
      return formatRounded_default(x2 * 100, _p);
    },
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": function X(x2) {
      return Math.round(x2).toString(16).toUpperCase();
    },
    "x": function x(_x) {
      return Math.round(_x).toString(16);
    }
  };

  // node_modules/d3-format/src/identity.js
  function identity_default3(x2) {
    return x2;
  }

  // node_modules/d3-format/src/locale.js
  var map = Array.prototype.map;
  var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale2) {
    var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default3 : formatGroup_default(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default3 : formatNumerals_default(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision2 = specifier.precision, trim = specifier.trim, type3 = specifier.type;
      if (type3 === "n")
        comma = true, type3 = "g";
      else if (!formatTypes_default[type3])
        precision2 === void 0 && (precision2 = 12), trim = true, type3 = "g";
      if (zero2 || fill === "0" && align === "=")
        zero2 = true, fill = "0", align = "=";
      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type3) ? "0" + type3.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type3) ? percent : "";
      var formatType = formatTypes_default[type3], maybeSuffix = /[defgprs%]/.test(type3);
      precision2 = precision2 === void 0 ? 6 : /[gprs]/.test(type3) ? Math.max(1, Math.min(21, precision2)) : Math.max(0, Math.min(20, precision2));
      function format2(value2) {
        var valuePrefix = prefix, valueSuffix = suffix, i2, n2, c2;
        if (type3 === "c") {
          valueSuffix = formatType(value2) + valueSuffix;
          value2 = "";
        } else {
          value2 = +value2;
          var valueNegative = value2 < 0 || 1 / value2 < 0;
          value2 = isNaN(value2) ? nan : formatType(Math.abs(value2), precision2);
          if (trim)
            value2 = formatTrim_default(value2);
          if (valueNegative && +value2 === 0 && sign2 !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
          valueSuffix = (type3 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
          if (maybeSuffix) {
            i2 = -1, n2 = value2.length;
            while (++i2 < n2) {
              if (c2 = value2.charCodeAt(i2), 48 > c2 || c2 > 57) {
                valueSuffix = (c2 === 46 ? decimal + value2.slice(i2 + 1) : value2.slice(i2)) + valueSuffix;
                value2 = value2.slice(0, i2);
                break;
              }
            }
          }
        }
        if (comma && !zero2)
          value2 = group(value2, Infinity);
        var length = valuePrefix.length + value2.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero2)
          value2 = group(padding + value2, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value2 = valuePrefix + value2 + valueSuffix + padding;
            break;
          case "=":
            value2 = valuePrefix + padding + value2 + valueSuffix;
            break;
          case "^":
            value2 = padding.slice(0, length = padding.length >> 1) + valuePrefix + value2 + valueSuffix + padding.slice(length);
            break;
          default:
            value2 = padding + valuePrefix + value2 + valueSuffix;
            break;
        }
        return numerals(value2);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value2) {
      var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value2) / 3))) * 3, k = Math.pow(10, -e3), prefix = prefixes[8 + e3 / 3];
      return function(value3) {
        return f2(k * value3) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // node_modules/d3-format/src/defaultLocale.js
  var locale;
  var format;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  // node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step) {
    return Math.max(0, -exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step, value2) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value2) / 3))) * 3 - exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step, max2) {
    step = Math.abs(step), max2 = Math.abs(max2) - step;
    return Math.max(0, exponent_default(max2) - exponent_default(step)) + 1;
  }

  // node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start2, stop2, count, specifier) {
    var step = tickStep(start2, stop2, count), precision2;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value2 = Math.max(Math.abs(start2), Math.abs(stop2));
        if (specifier.precision == null && !isNaN(precision2 = precisionPrefix_default(step, value2)))
          specifier.precision = precision2;
        return formatPrefix(specifier, value2);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision2 = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop2)))))
          specifier.precision = precision2 - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision2 = precisionFixed_default(step)))
          specifier.precision = precision2 - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }

  // node_modules/d3-scale/src/linear.js
  function linearish(scale2) {
    var domain = scale2.domain;
    scale2.ticks = function(count) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale2.tickFormat = function(count, specifier) {
      var d = domain();
      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale2.nice = function(count) {
      if (count == null)
        count = 10;
      var d = domain();
      var i0 = 0;
      var i1 = d.length - 1;
      var start2 = d[i0];
      var stop2 = d[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop2 < start2) {
        step = start2, start2 = stop2, stop2 = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start2, stop2, count);
        if (step === prestep) {
          d[i0] = start2;
          d[i1] = stop2;
          return domain(d);
        } else if (step > 0) {
          start2 = Math.floor(start2 / step) * step;
          stop2 = Math.ceil(stop2 / step) * step;
        } else if (step < 0) {
          start2 = Math.ceil(start2 * step) / step;
          stop2 = Math.floor(stop2 * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale2;
    };
    return scale2;
  }
  function linear4() {
    var scale2 = continuous();
    scale2.copy = function() {
      return copy6(scale2, linear4());
    };
    initRange.apply(scale2, arguments);
    return linearish(scale2);
  }

  // node_modules/d3-scale/src/quantize.js
  init_slicedToArray();
  function quantize() {
    var x05 = 0, x12 = 1, n2 = 1, domain = [0.5], range4 = [0, 1], unknown;
    function scale2(x2) {
      return x2 != null && x2 <= x2 ? range4[bisect_default(domain, x2, 0, n2)] : unknown;
    }
    function rescale() {
      var i2 = -1;
      domain = new Array(n2);
      while (++i2 < n2) {
        domain[i2] = ((i2 + 1) * x12 - (i2 - n2) * x05) / (n2 + 1);
      }
      return scale2;
    }
    scale2.domain = function(_2) {
      var _ref, _ref2;
      return arguments.length ? (_ref = _2, _ref2 = _slicedToArray(_ref, 2), x05 = _ref2[0], x12 = _ref2[1], _ref, x05 = +x05, x12 = +x12, rescale()) : [x05, x12];
    };
    scale2.range = function(_2) {
      return arguments.length ? (n2 = (range4 = Array.from(_2)).length - 1, rescale()) : range4.slice();
    };
    scale2.invertExtent = function(y) {
      var i2 = range4.indexOf(y);
      return i2 < 0 ? [NaN, NaN] : i2 < 1 ? [x05, domain[0]] : i2 >= n2 ? [domain[n2 - 1], x12] : [domain[i2 - 1], domain[i2]];
    };
    scale2.unknown = function(_2) {
      return arguments.length ? (unknown = _2, scale2) : scale2;
    };
    scale2.thresholds = function() {
      return domain.slice();
    };
    scale2.copy = function() {
      return quantize().domain([x05, x12]).range(range4).unknown(unknown);
    };
    return initRange.apply(linearish(scale2), arguments);
  }

  // modules/behavior/breathe.js
  function behaviorBreathe() {
    var duration = 800;
    var steps = 4;
    var selector = ".selected.shadow, .selected .shadow";
    var _selected = select_default2(null);
    var _classed = "";
    var _params = {};
    var _done = false;
    var _timer;
    function ratchetyInterpolator(a, b2, steps2, units) {
      a = parseFloat(a);
      b2 = parseFloat(b2);
      var sample = quantize().domain([0, 1]).range(quantize_default(number_default(a, b2), steps2));
      return function(t) {
        return String(sample(t)) + (units || "");
      };
    }
    function reset17(selection2) {
      selection2.style("stroke-opacity", null).style("stroke-width", null).style("fill-opacity", null).style("r", null);
    }
    function setAnimationParams(transition2, fromTo) {
      var toFrom = fromTo === "from" ? "to" : "from";
      transition2.styleTween("stroke-opacity", function(d) {
        return ratchetyInterpolator(_params[d.id][toFrom].opacity, _params[d.id][fromTo].opacity, steps);
      }).styleTween("stroke-width", function(d) {
        return ratchetyInterpolator(_params[d.id][toFrom].width, _params[d.id][fromTo].width, steps, "px");
      }).styleTween("fill-opacity", function(d) {
        return ratchetyInterpolator(_params[d.id][toFrom].opacity, _params[d.id][fromTo].opacity, steps);
      }).styleTween("r", function(d) {
        return ratchetyInterpolator(_params[d.id][toFrom].width, _params[d.id][fromTo].width, steps, "px");
      });
    }
    function calcAnimationParams(selection2) {
      selection2.call(reset17).each(function(d) {
        var s = select_default2(this);
        var tag = s.node().tagName;
        var p2 = {
          "from": {},
          "to": {}
        };
        var opacity;
        var width;
        if (tag === "circle") {
          opacity = parseFloat(s.style("fill-opacity") || 0.5);
          width = parseFloat(s.style("r") || 15.5);
        } else {
          opacity = parseFloat(s.style("stroke-opacity") || 0.7);
          width = parseFloat(s.style("stroke-width") || 10);
        }
        p2.tag = tag;
        p2.from.opacity = opacity * 0.6;
        p2.to.opacity = opacity * 1.25;
        p2.from.width = width * 0.7;
        p2.to.width = width * (tag === "circle" ? 1.5 : 1);
        _params[d.id] = p2;
      });
    }
    function run(surface, fromTo) {
      var toFrom = fromTo === "from" ? "to" : "from";
      var currSelected = surface.selectAll(selector);
      var currClassed = surface.attr("class");
      if (_done || currSelected.empty()) {
        _selected.call(reset17);
        _selected = select_default2(null);
        return;
      }
      if (!(0, import_fast_deep_equal2.default)(currSelected.data(), _selected.data()) || currClassed !== _classed) {
        _selected.call(reset17);
        _classed = currClassed;
        _selected = currSelected.call(calcAnimationParams);
      }
      var didCallNextRun = false;
      _selected.transition().duration(duration).call(setAnimationParams, fromTo).on("end", function() {
        if (!didCallNextRun) {
          surface.call(run, toFrom);
          didCallNextRun = true;
        }
        if (!select_default2(this).classed("selected")) {
          reset17(select_default2(this));
        }
      });
    }
    function behavior(surface) {
      _done = false;
      _timer = timer(function() {
        if (surface.selectAll(selector).empty()) {
          return false;
        }
        surface.call(run, "from");
        _timer.stop();
        return true;
      }, 20);
    }
    behavior.restartIfNeeded = function(surface) {
      if (_selected.empty()) {
        surface.call(run, "from");
        if (_timer) {
          _timer.stop();
        }
      }
    };
    behavior.off = function() {
      _done = true;
      if (_timer) {
        _timer.stop();
      }
      _selected.interrupt().call(reset17);
    };
    return behavior;
  }

  // modules/behavior/operation.js
  function behaviorOperation(context) {
    var _operation;
    function keypress(d3_event) {
      if (!context.map().withinEditableZoom())
        return;
      if (_operation.availableForKeypress && !_operation.availableForKeypress())
        return;
      d3_event.preventDefault();
      var disabled = _operation.disabled();
      if (disabled) {
        context.ui().flash.duration(4e3).iconName("#iD-operation-" + _operation.id).iconClass("operation disabled").label(_operation.tooltip)();
      } else {
        context.ui().flash.duration(2e3).iconName("#iD-operation-" + _operation.id).iconClass("operation").label(_operation.annotation() || _operation.title)();
        if (_operation.point)
          _operation.point(null);
        _operation();
      }
    }
    function behavior() {
      if (_operation && _operation.available()) {
        context.keybinding().on(_operation.keys, keypress);
      }
      return behavior;
    }
    behavior.off = function() {
      context.keybinding().off(_operation.keys);
    };
    behavior.which = function(_2) {
      if (!arguments.length)
        return _operation;
      _operation = _2;
      return behavior;
    };
    return behavior;
  }

  // modules/operations/circularize.js
  function operationCircularize(context, selectedIDs) {
    var _extent;
    var _actions = selectedIDs.map(getAction).filter(Boolean);
    var _amount = _actions.length === 1 ? "single" : "multiple";
    var _coords = utilGetAllNodes(selectedIDs, context.graph()).map(function(n2) {
      return n2.loc;
    });
    function getAction(entityID) {
      var entity2 = context.entity(entityID);
      if (entity2.type !== "way" || new Set(entity2.nodes).size <= 1)
        return null;
      if (!_extent) {
        _extent = entity2.extent(context.graph());
      } else {
        _extent = _extent.extend(entity2.extent(context.graph()));
      }
      return actionCircularize(entityID, context.projection);
    }
    var operation = function operation2() {
      if (!_actions.length)
        return;
      var combinedAction = function combinedAction2(graph3, t) {
        _actions.forEach(function(action) {
          if (!action.disabled(graph3)) {
            graph3 = action(graph3, t);
          }
        });
        return graph3;
      };
      combinedAction.transitionable = true;
      context.perform(combinedAction, operation2.annotation());
      window.setTimeout(function() {
        context.validator().validate();
      }, 300);
    };
    operation.available = function() {
      return _actions.length && selectedIDs.length === _actions.length;
    };
    operation.disabled = function() {
      if (!_actions.length)
        return "";
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      var actionDisableds = _actions.map(function(action) {
        return action.disabled(context.graph());
      }).filter(Boolean);
      if (actionDisableds.length === _actions.length) {
        if (new Set(actionDisableds).size > 1) {
          return "multiple_blockers";
        }
        return actionDisableds[0];
      } else if (!allowLargeEdits && _extent.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = _coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.circularize." + disable + "." + _amount) : _t("operations.circularize.description." + _amount);
    };
    operation.annotation = function() {
      return _t("operations.circularize.annotation.feature", {
        n: _actions.length
      });
    };
    operation.id = "circularize";
    operation.keys = [_t("operations.circularize.key")];
    operation.title = _t("operations.circularize.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/ui/cmd.js
  var uiCmd = function uiCmd2(code) {
    var detected = utilDetect();
    if (detected.os === "mac") {
      return code;
    }
    if (detected.os === "win") {
      if (code === "\u2318\u21E7Z")
        return "Ctrl+Y";
    }
    var result6 = "", replacements = {
      "\u2318": "Ctrl",
      "\u21E7": "Shift",
      "\u2325": "Alt",
      "\u232B": "Backspace",
      "\u2326": "Delete"
    };
    for (var i2 = 0; i2 < code.length; i2++) {
      if (code[i2] in replacements) {
        result6 += replacements[code[i2]] + (i2 < code.length - 1 ? "+" : "");
      } else {
        result6 += code[i2];
      }
    }
    return result6;
  };
  uiCmd.display = function(code) {
    if (code.length !== 1)
      return code;
    var detected = utilDetect();
    var mac = detected.os === "mac";
    var replacements = {
      "\u2318": mac ? "\u2318 " + _t("shortcuts.key.cmd") : _t("shortcuts.key.ctrl"),
      "\u21E7": mac ? "\u21E7 " + _t("shortcuts.key.shift") : _t("shortcuts.key.shift"),
      "\u2325": mac ? "\u2325 " + _t("shortcuts.key.option") : _t("shortcuts.key.alt"),
      "\u2303": mac ? "\u2303 " + _t("shortcuts.key.ctrl") : _t("shortcuts.key.ctrl"),
      "\u232B": mac ? "\u232B " + _t("shortcuts.key.delete") : _t("shortcuts.key.backspace"),
      "\u2326": mac ? "\u2326 " + _t("shortcuts.key.del") : _t("shortcuts.key.del"),
      "\u2196": mac ? "\u2196 " + _t("shortcuts.key.pgup") : _t("shortcuts.key.pgup"),
      "\u2198": mac ? "\u2198 " + _t("shortcuts.key.pgdn") : _t("shortcuts.key.pgdn"),
      "\u21DE": mac ? "\u21DE " + _t("shortcuts.key.home") : _t("shortcuts.key.home"),
      "\u21DF": mac ? "\u21DF " + _t("shortcuts.key.end") : _t("shortcuts.key.end"),
      "\u21B5": mac ? "\u23CE " + _t("shortcuts.key.return") : _t("shortcuts.key.enter"),
      "\u238B": mac ? "\u238B " + _t("shortcuts.key.esc") : _t("shortcuts.key.esc"),
      "\u2630": mac ? "\u2630 " + _t("shortcuts.key.menu") : _t("shortcuts.key.menu")
    };
    return replacements[code] || code;
  };

  // modules/operations/delete.js
  function operationDelete(context, selectedIDs) {
    var multi = selectedIDs.length === 1 ? "single" : "multiple";
    var action = actionDeleteMultiple(selectedIDs);
    var nodes = utilGetAllNodes(selectedIDs, context.graph());
    var coords = nodes.map(function(n2) {
      return n2.loc;
    });
    var extent6 = utilTotalExtent(selectedIDs, context.graph());
    var operation = function operation2() {
      var nextSelectedID;
      var nextSelectedLoc;
      if (selectedIDs.length === 1) {
        var id2 = selectedIDs[0];
        var entity2 = context.entity(id2);
        var geometry6 = entity2.geometry(context.graph());
        var parents = context.graph().parentWays(entity2);
        var parent2 = parents[0];
        if (geometry6 === "vertex") {
          var nodes2 = parent2.nodes;
          var i2 = nodes2.indexOf(id2);
          if (i2 === 0) {
            i2++;
          } else if (i2 === nodes2.length - 1) {
            i2--;
          } else {
            var a = geoSphericalDistance(entity2.loc, context.entity(nodes2[i2 - 1]).loc);
            var b2 = geoSphericalDistance(entity2.loc, context.entity(nodes2[i2 + 1]).loc);
            i2 = a < b2 ? i2 - 1 : i2 + 1;
          }
          nextSelectedID = nodes2[i2];
          nextSelectedLoc = context.entity(nextSelectedID).loc;
        }
      }
      context.perform(action, operation2.annotation());
      context.validator().validate();
      if (nextSelectedID && nextSelectedLoc) {
        if (context.hasEntity(nextSelectedID)) {
          context.enter(modeSelect(context, [nextSelectedID]).follow(true));
        } else {
          context.map().centerEase(nextSelectedLoc);
          context.enter(modeBrowse(context));
        }
      } else {
        context.enter(modeBrowse(context));
      }
    };
    operation.available = function() {
      return true;
    };
    operation.disabled = function() {
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && extent6.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      } else if (selectedIDs.some(protectedMember)) {
        return "part_of_relation";
      } else if (selectedIDs.some(incompleteRelation)) {
        return "incomplete_relation";
      } else if (selectedIDs.some(hasWikidataTag)) {
        return "has_wikidata_tag";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
      function hasWikidataTag(id2) {
        var entity2 = context.entity(id2);
        return entity2.tags.wikidata && entity2.tags.wikidata.trim().length > 0;
      }
      function incompleteRelation(id2) {
        var entity2 = context.entity(id2);
        return entity2.type === "relation" && !entity2.isComplete(context.graph());
      }
      function protectedMember(id2) {
        var entity2 = context.entity(id2);
        if (entity2.type !== "way")
          return false;
        var parents = context.graph().parentRelations(entity2);
        for (var i2 = 0; i2 < parents.length; i2++) {
          var parent2 = parents[i2];
          var type3 = parent2.tags.type;
          var role = parent2.memberById(id2).role || "outer";
          if (type3 === "route" || type3 === "boundary" || type3 === "multipolygon" && role === "outer") {
            return true;
          }
        }
        return false;
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.delete." + disable + "." + multi) : _t("operations.delete.description." + multi);
    };
    operation.annotation = function() {
      return selectedIDs.length === 1 ? _t("operations.delete.annotation." + context.graph().geometry(selectedIDs[0])) : _t("operations.delete.annotation.feature", {
        n: selectedIDs.length
      });
    };
    operation.id = "delete";
    operation.keys = [uiCmd("\u2318\u232B"), uiCmd("\u2318\u2326"), uiCmd("\u2326")];
    operation.title = _t("operations.delete.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/orthogonalize.js
  function operationOrthogonalize(context, selectedIDs) {
    var _extent;
    var _type;
    var _actions = selectedIDs.map(chooseAction).filter(Boolean);
    var _amount = _actions.length === 1 ? "single" : "multiple";
    var _coords = utilGetAllNodes(selectedIDs, context.graph()).map(function(n2) {
      return n2.loc;
    });
    function chooseAction(entityID) {
      var entity2 = context.entity(entityID);
      var geometry6 = entity2.geometry(context.graph());
      if (!_extent) {
        _extent = entity2.extent(context.graph());
      } else {
        _extent = _extent.extend(entity2.extent(context.graph()));
      }
      if (entity2.type === "way" && new Set(entity2.nodes).size > 2) {
        if (_type && _type !== "feature")
          return null;
        _type = "feature";
        return actionOrthogonalize(entityID, context.projection);
      } else if (geometry6 === "vertex") {
        if (_type && _type !== "corner")
          return null;
        _type = "corner";
        var graph3 = context.graph();
        var parents = graph3.parentWays(entity2);
        if (parents.length === 1) {
          var way = parents[0];
          if (way.nodes.indexOf(entityID) !== -1) {
            return actionOrthogonalize(way.id, context.projection, entityID);
          }
        }
      }
      return null;
    }
    var operation = function operation2() {
      if (!_actions.length)
        return;
      var combinedAction = function combinedAction2(graph3, t) {
        _actions.forEach(function(action) {
          if (!action.disabled(graph3)) {
            graph3 = action(graph3, t);
          }
        });
        return graph3;
      };
      combinedAction.transitionable = true;
      context.perform(combinedAction, operation2.annotation());
      window.setTimeout(function() {
        context.validator().validate();
      }, 300);
    };
    operation.available = function() {
      return _actions.length && selectedIDs.length === _actions.length;
    };
    operation.disabled = function() {
      if (!_actions.length)
        return "";
      var actionDisableds = _actions.map(function(action) {
        return action.disabled(context.graph());
      }).filter(Boolean);
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (actionDisableds.length === _actions.length) {
        if (new Set(actionDisableds).size > 1) {
          return "multiple_blockers";
        }
        return actionDisableds[0];
      } else if (!allowLargeEdits && _extent && _extent.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = _coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.orthogonalize." + disable + "." + _amount) : _t("operations.orthogonalize.description." + _type + "." + _amount);
    };
    operation.annotation = function() {
      return _t("operations.orthogonalize.annotation." + _type, {
        n: _actions.length
      });
    };
    operation.id = "orthogonalize";
    operation.keys = [_t("operations.orthogonalize.key")];
    operation.title = _t("operations.orthogonalize.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/reflect.js
  function operationReflectShort(context, selectedIDs) {
    return operationReflect(context, selectedIDs, "short");
  }
  function operationReflectLong(context, selectedIDs) {
    return operationReflect(context, selectedIDs, "long");
  }
  function operationReflect(context, selectedIDs, axis) {
    axis = axis || "long";
    var multi = selectedIDs.length === 1 ? "single" : "multiple";
    var nodes = utilGetAllNodes(selectedIDs, context.graph());
    var coords = nodes.map(function(n2) {
      return n2.loc;
    });
    var extent6 = utilTotalExtent(selectedIDs, context.graph());
    var operation = function operation2() {
      var action = actionReflect(selectedIDs, context.projection).useLongAxis(Boolean(axis === "long"));
      context.perform(action, operation2.annotation());
      window.setTimeout(function() {
        context.validator().validate();
      }, 300);
    };
    operation.available = function() {
      return nodes.length >= 3;
    };
    operation.disabled = function() {
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && extent6.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      } else if (selectedIDs.some(incompleteRelation)) {
        return "incomplete_relation";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
      function incompleteRelation(id2) {
        var entity2 = context.entity(id2);
        return entity2.type === "relation" && !entity2.isComplete(context.graph());
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.reflect." + disable + "." + multi) : _t("operations.reflect.description." + axis + "." + multi);
    };
    operation.annotation = function() {
      return _t("operations.reflect.annotation." + axis + ".feature", {
        n: selectedIDs.length
      });
    };
    operation.id = "reflect-" + axis;
    operation.keys = [_t("operations.reflect.key." + axis)];
    operation.title = _t("operations.reflect.title." + axis);
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/move.js
  function operationMove(context, selectedIDs) {
    var multi = selectedIDs.length === 1 ? "single" : "multiple";
    var nodes = utilGetAllNodes(selectedIDs, context.graph());
    var coords = nodes.map(function(n2) {
      return n2.loc;
    });
    var extent6 = utilTotalExtent(selectedIDs, context.graph());
    var operation = function operation2() {
      context.enter(modeMove(context, selectedIDs));
    };
    operation.available = function() {
      return selectedIDs.length > 0;
    };
    operation.disabled = function() {
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && extent6.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      } else if (selectedIDs.some(incompleteRelation)) {
        return "incomplete_relation";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
      function incompleteRelation(id2) {
        var entity2 = context.entity(id2);
        return entity2.type === "relation" && !entity2.isComplete(context.graph());
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.move." + disable + "." + multi) : _t("operations.move.description." + multi);
    };
    operation.annotation = function() {
      return selectedIDs.length === 1 ? _t("operations.move.annotation." + context.graph().geometry(selectedIDs[0])) : _t("operations.move.annotation.feature", {
        n: selectedIDs.length
      });
    };
    operation.id = "move";
    operation.keys = [_t("operations.move.key")];
    operation.title = _t("operations.move.title");
    operation.behavior = behaviorOperation(context).which(operation);
    operation.mouseOnly = true;
    return operation;
  }

  // modules/modes/rotate.js
  function modeRotate(context, entityIDs) {
    var _tolerancePx = 4;
    var mode = {
      id: "rotate",
      button: "browse"
    };
    var keybinding = utilKeybinding("rotate");
    var behaviors = [behaviorEdit(context), operationCircularize(context, entityIDs).behavior, operationDelete(context, entityIDs).behavior, operationMove(context, entityIDs).behavior, operationOrthogonalize(context, entityIDs).behavior, operationReflectLong(context, entityIDs).behavior, operationReflectShort(context, entityIDs).behavior];
    var annotation = entityIDs.length === 1 ? _t("operations.rotate.annotation." + context.graph().geometry(entityIDs[0])) : _t("operations.rotate.annotation.feature", {
      n: entityIDs.length
    });
    var _prevGraph;
    var _prevAngle;
    var _prevTransform;
    var _pivot;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function doRotate(d3_event) {
      var fn;
      if (context.graph() !== _prevGraph) {
        fn = context.perform;
      } else {
        fn = context.replace;
      }
      var projection2 = context.projection;
      var currTransform = projection2.transform();
      if (!_prevTransform || currTransform.k !== _prevTransform.k || currTransform.x !== _prevTransform.x || currTransform.y !== _prevTransform.y) {
        var nodes = utilGetAllNodes(entityIDs, context.graph());
        var points = nodes.map(function(n2) {
          return projection2(n2.loc);
        });
        _pivot = getPivot(points);
        _prevAngle = void 0;
      }
      var currMouse = context.map().mouse(d3_event);
      var currAngle = Math.atan2(currMouse[1] - _pivot[1], currMouse[0] - _pivot[0]);
      if (typeof _prevAngle === "undefined")
        _prevAngle = currAngle;
      var delta = currAngle - _prevAngle;
      fn(actionRotate(entityIDs, _pivot, delta, projection2));
      _prevTransform = currTransform;
      _prevAngle = currAngle;
      _prevGraph = context.graph();
    }
    function getPivot(points) {
      var _pivot2;
      if (points.length === 1) {
        _pivot2 = points[0];
      } else if (points.length === 2) {
        _pivot2 = vecInterp(points[0], points[1], 0.5);
      } else {
        var polygonHull = hull_default(points);
        if (polygonHull.length === 2) {
          _pivot2 = vecInterp(points[0], points[1], 0.5);
        } else {
          _pivot2 = centroid_default2(hull_default(points));
        }
      }
      return _pivot2;
    }
    function finish(d3_event) {
      d3_event.stopPropagation();
      context.replace(actionNoop(), annotation);
      context.enter(modeSelect(context, entityIDs));
    }
    function cancel() {
      if (_prevGraph)
        context.pop();
      context.enter(modeSelect(context, entityIDs));
    }
    function undone() {
      context.enter(modeBrowse(context));
    }
    mode.enter = function() {
      _prevGraph = null;
      context.features().forceVisible(entityIDs);
      behaviors.forEach(context.install);
      var downEvent;
      context.surface().on(_pointerPrefix + "down.modeRotate", function(d3_event) {
        downEvent = d3_event;
      });
      select_default2(window).on(_pointerPrefix + "move.modeRotate", doRotate, true).on(_pointerPrefix + "up.modeRotate", function(d3_event) {
        if (!downEvent)
          return;
        var mapNode = context.container().select(".main-map").node();
        var pointGetter = utilFastMouse(mapNode);
        var p1 = pointGetter(downEvent);
        var p2 = pointGetter(d3_event);
        var dist = vecLength(p1, p2);
        if (dist <= _tolerancePx)
          finish(d3_event);
        downEvent = null;
      }, true);
      context.history().on("undone.modeRotate", undone);
      keybinding.on("\u238B", cancel).on("\u21A9", finish);
      select_default2(document).call(keybinding);
    };
    mode.exit = function() {
      behaviors.forEach(context.uninstall);
      context.surface().on(_pointerPrefix + "down.modeRotate", null);
      select_default2(window).on(_pointerPrefix + "move.modeRotate", null, true).on(_pointerPrefix + "up.modeRotate", null, true);
      context.history().on("undone.modeRotate", null);
      select_default2(document).call(keybinding.unbind);
      context.features().forceVisible([]);
    };
    mode.selectedIDs = function() {
      if (!arguments.length)
        return entityIDs;
      return mode;
    };
    return mode;
  }

  // modules/operations/rotate.js
  function operationRotate(context, selectedIDs) {
    var multi = selectedIDs.length === 1 ? "single" : "multiple";
    var nodes = utilGetAllNodes(selectedIDs, context.graph());
    var coords = nodes.map(function(n2) {
      return n2.loc;
    });
    var extent6 = utilTotalExtent(selectedIDs, context.graph());
    var operation = function operation2() {
      context.enter(modeRotate(context, selectedIDs));
    };
    operation.available = function() {
      return nodes.length >= 2;
    };
    operation.disabled = function() {
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && extent6.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      } else if (selectedIDs.some(incompleteRelation)) {
        return "incomplete_relation";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
      function incompleteRelation(id2) {
        var entity2 = context.entity(id2);
        return entity2.type === "relation" && !entity2.isComplete(context.graph());
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.rotate." + disable + "." + multi) : _t("operations.rotate.description." + multi);
    };
    operation.annotation = function() {
      return selectedIDs.length === 1 ? _t("operations.rotate.annotation." + context.graph().geometry(selectedIDs[0])) : _t("operations.rotate.annotation.feature", {
        n: selectedIDs.length
      });
    };
    operation.id = "rotate";
    operation.keys = [_t("operations.rotate.key")];
    operation.title = _t("operations.rotate.title");
    operation.behavior = behaviorOperation(context).which(operation);
    operation.mouseOnly = true;
    return operation;
  }

  // modules/modes/move.js
  function modeMove(context, entityIDs, baseGraph) {
    var _tolerancePx = 4;
    var mode = {
      id: "move",
      button: "browse"
    };
    var keybinding = utilKeybinding("move");
    var behaviors = [behaviorEdit(context), operationCircularize(context, entityIDs).behavior, operationDelete(context, entityIDs).behavior, operationOrthogonalize(context, entityIDs).behavior, operationReflectLong(context, entityIDs).behavior, operationReflectShort(context, entityIDs).behavior, operationRotate(context, entityIDs).behavior];
    var annotation = entityIDs.length === 1 ? _t("operations.move.annotation." + context.graph().geometry(entityIDs[0])) : _t("operations.move.annotation.feature", {
      n: entityIDs.length
    });
    var _prevGraph;
    var _cache4;
    var _origin;
    var _nudgeInterval;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function doMove(nudge) {
      nudge = nudge || [0, 0];
      var fn;
      if (_prevGraph !== context.graph()) {
        _cache4 = {};
        _origin = context.map().mouseCoordinates();
        fn = context.perform;
      } else {
        fn = context.overwrite;
      }
      var currMouse = context.map().mouse();
      var origMouse = context.projection(_origin);
      var delta = vecSubtract(vecSubtract(currMouse, origMouse), nudge);
      fn(actionMove(entityIDs, delta, context.projection, _cache4));
      _prevGraph = context.graph();
    }
    function startNudge(nudge) {
      if (_nudgeInterval)
        window.clearInterval(_nudgeInterval);
      _nudgeInterval = window.setInterval(function() {
        context.map().pan(nudge);
        doMove(nudge);
      }, 50);
    }
    function stopNudge() {
      if (_nudgeInterval) {
        window.clearInterval(_nudgeInterval);
        _nudgeInterval = null;
      }
    }
    function move3() {
      doMove();
      var nudge = geomViewportNudge(context.map().mouse(), context.map().dimensions());
      if (nudge) {
        startNudge(nudge);
      } else {
        stopNudge();
      }
    }
    function finish(d3_event) {
      d3_event.stopPropagation();
      context.replace(actionNoop(), annotation);
      context.enter(modeSelect(context, entityIDs));
      stopNudge();
    }
    function cancel() {
      if (baseGraph) {
        while (context.graph() !== baseGraph) {
          context.pop();
        }
        context.enter(modeBrowse(context));
      } else {
        if (_prevGraph)
          context.pop();
        context.enter(modeSelect(context, entityIDs));
      }
      stopNudge();
    }
    function undone() {
      context.enter(modeBrowse(context));
    }
    mode.enter = function() {
      _origin = context.map().mouseCoordinates();
      _prevGraph = null;
      _cache4 = {};
      context.features().forceVisible(entityIDs);
      behaviors.forEach(context.install);
      var downEvent;
      context.surface().on(_pointerPrefix + "down.modeMove", function(d3_event) {
        downEvent = d3_event;
      });
      select_default2(window).on(_pointerPrefix + "move.modeMove", move3, true).on(_pointerPrefix + "up.modeMove", function(d3_event) {
        if (!downEvent)
          return;
        var mapNode = context.container().select(".main-map").node();
        var pointGetter = utilFastMouse(mapNode);
        var p1 = pointGetter(downEvent);
        var p2 = pointGetter(d3_event);
        var dist = vecLength(p1, p2);
        if (dist <= _tolerancePx)
          finish(d3_event);
        downEvent = null;
      }, true);
      context.history().on("undone.modeMove", undone);
      keybinding.on("\u238B", cancel).on("\u21A9", finish);
      select_default2(document).call(keybinding);
    };
    mode.exit = function() {
      stopNudge();
      behaviors.forEach(function(behavior) {
        context.uninstall(behavior);
      });
      context.surface().on(_pointerPrefix + "down.modeMove", null);
      select_default2(window).on(_pointerPrefix + "move.modeMove", null, true).on(_pointerPrefix + "up.modeMove", null, true);
      context.history().on("undone.modeMove", null);
      select_default2(document).call(keybinding.unbind);
      context.features().forceVisible([]);
    };
    mode.selectedIDs = function() {
      if (!arguments.length)
        return entityIDs;
      return mode;
    };
    return mode;
  }

  // modules/behavior/paste.js
  function behaviorPaste(context) {
    function doPaste(d3_event) {
      if (!context.map().withinEditableZoom())
        return;
      d3_event.preventDefault();
      var startGraph = context.graph();
      var mouse = context.map().mouse();
      var projection2 = context.projection;
      var dimensions = projection2.clipExtent();
      var viewport = new Extent(dimensions[0], dimensions[1]).polygon();
      if (!geomPointInPolygon(mouse, viewport))
        return;
      var oldIDs = context.copyIDs();
      if (!oldIDs.length)
        return;
      var extent6 = new Extent();
      var copyGraph = context.copyGraph();
      var newIDs = [];
      var action = actionCopyEntities(oldIDs, copyGraph);
      context.perform(action);
      var copies = action.copies();
      var originals = new Set();
      Object.values(copies).forEach(function(entity2) {
        originals.add(entity2.id);
      });
      for (var id2 in copies) {
        var oldEntity = copyGraph.entity(id2);
        var newEntity = copies[id2];
        extent6 = extent6.extend(oldEntity.extent(copyGraph));
        var parents = context.graph().parentWays(newEntity);
        var parentCopied = parents.some(function(parent2) {
          return originals.has(parent2.id);
        });
        if (!parentCopied) {
          newIDs.push(newEntity.id);
        }
      }
      var copyPoint = context.copyLonLat() && projection2(context.copyLonLat()) || projection2(extent6.center());
      var delta = vecSubtract(mouse, copyPoint);
      context.perform(actionMove(newIDs, delta, projection2));
      context.enter(modeMove(context, newIDs, startGraph));
    }
    function behavior() {
      context.keybinding().on(uiCmd("\u2318V"), doPaste);
      return behavior;
    }
    behavior.off = function() {
      context.keybinding().off(uiCmd("\u2318V"));
    };
    return behavior;
  }

  // modules/behavior/drag.js
  function behaviorDrag() {
    var dispatch12 = dispatch_default("start", "move", "end");
    var _tolerancePx = 1;
    var _penTolerancePx = 4;
    var _origin = null;
    var _selector = "";
    var _targetNode;
    var _targetEntity;
    var _surface;
    var _pointerId;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    var d3_event_userSelectProperty = utilPrefixCSSProperty("UserSelect");
    var d3_event_userSelectSuppress = function d3_event_userSelectSuppress2() {
      var selection2 = selection_default();
      var select = selection2.style(d3_event_userSelectProperty);
      selection2.style(d3_event_userSelectProperty, "none");
      return function() {
        selection2.style(d3_event_userSelectProperty, select);
      };
    };
    function pointerdown(d3_event) {
      if (_pointerId)
        return;
      _pointerId = d3_event.pointerId || "mouse";
      _targetNode = this;
      var pointerLocGetter = utilFastMouse(_surface || _targetNode.parentNode);
      var offset;
      var startOrigin = pointerLocGetter(d3_event);
      var started = false;
      var selectEnable = d3_event_userSelectSuppress();
      select_default2(window).on(_pointerPrefix + "move.drag", pointermove).on(_pointerPrefix + "up.drag pointercancel.drag", pointerup, true);
      if (_origin) {
        offset = _origin.call(_targetNode, _targetEntity);
        offset = [offset[0] - startOrigin[0], offset[1] - startOrigin[1]];
      } else {
        offset = [0, 0];
      }
      d3_event.stopPropagation();
      function pointermove(d3_event2) {
        if (_pointerId !== (d3_event2.pointerId || "mouse"))
          return;
        var p2 = pointerLocGetter(d3_event2);
        if (!started) {
          var dist = vecLength(startOrigin, p2);
          var tolerance = d3_event2.pointerType === "pen" ? _penTolerancePx : _tolerancePx;
          if (dist < tolerance)
            return;
          started = true;
          dispatch12.call("start", this, d3_event2, _targetEntity);
        } else {
          startOrigin = p2;
          d3_event2.stopPropagation();
          d3_event2.preventDefault();
          var dx = p2[0] - startOrigin[0];
          var dy = p2[1] - startOrigin[1];
          dispatch12.call("move", this, d3_event2, _targetEntity, [p2[0] + offset[0], p2[1] + offset[1]], [dx, dy]);
        }
      }
      function pointerup(d3_event2) {
        if (_pointerId !== (d3_event2.pointerId || "mouse"))
          return;
        _pointerId = null;
        if (started) {
          dispatch12.call("end", this, d3_event2, _targetEntity);
          d3_event2.preventDefault();
        }
        select_default2(window).on(_pointerPrefix + "move.drag", null).on(_pointerPrefix + "up.drag pointercancel.drag", null);
        selectEnable();
      }
    }
    function behavior(selection2) {
      var matchesSelector = utilPrefixDOMProperty("matchesSelector");
      var delegate = pointerdown;
      if (_selector) {
        delegate = function delegate2(d3_event) {
          var root3 = this;
          var target = d3_event.target;
          for (; target && target !== root3; target = target.parentNode) {
            var datum2 = target.__data__;
            _targetEntity = datum2 instanceof osmNote ? datum2 : datum2 && datum2.properties && datum2.properties.entity;
            if (_targetEntity && target[matchesSelector](_selector)) {
              return pointerdown.call(target, d3_event);
            }
          }
        };
      }
      selection2.on(_pointerPrefix + "down.drag" + _selector, delegate);
    }
    behavior.off = function(selection2) {
      selection2.on(_pointerPrefix + "down.drag" + _selector, null);
    };
    behavior.selector = function(_2) {
      if (!arguments.length)
        return _selector;
      _selector = _2;
      return behavior;
    };
    behavior.origin = function(_2) {
      if (!arguments.length)
        return _origin;
      _origin = _2;
      return behavior;
    };
    behavior.cancel = function() {
      select_default2(window).on(_pointerPrefix + "move.drag", null).on(_pointerPrefix + "up.drag pointercancel.drag", null);
      return behavior;
    };
    behavior.targetNode = function(_2) {
      if (!arguments.length)
        return _targetNode;
      _targetNode = _2;
      return behavior;
    };
    behavior.targetEntity = function(_2) {
      if (!arguments.length)
        return _targetEntity;
      _targetEntity = _2;
      return behavior;
    };
    behavior.surface = function(_2) {
      if (!arguments.length)
        return _surface;
      _surface = _2;
      return behavior;
    };
    return utilRebind(behavior, dispatch12, "on");
  }

  // modules/modes/drag_node.js
  function modeDragNode(context) {
    var mode = {
      id: "drag-node",
      button: "browse"
    };
    var hover = behaviorHover(context).altDisables(true).on("hover", context.ui().sidebar.hover);
    var edit = behaviorEdit(context);
    var _nudgeInterval;
    var _restoreSelectedIDs = [];
    var _wasMidpoint = false;
    var _isCancelled = false;
    var _activeEntity;
    var _startLoc;
    var _lastLoc;
    function startNudge(d3_event, entity2, nudge, rapidOverideLoc) {
      if (_nudgeInterval)
        window.clearInterval(_nudgeInterval);
      _nudgeInterval = window.setInterval(function() {
        context.map().pan(nudge);
        doMove(d3_event, entity2, nudge, rapidOverideLoc);
      }, 50);
    }
    function stopNudge() {
      if (_nudgeInterval) {
        window.clearInterval(_nudgeInterval);
        _nudgeInterval = null;
      }
    }
    function moveAnnotation(entity2) {
      return _t("operations.move.annotation." + entity2.geometry(context.graph()));
    }
    function connectAnnotation(nodeEntity, targetEntity) {
      var nodeGeometry = nodeEntity.geometry(context.graph());
      var targetGeometry = targetEntity.geometry(context.graph());
      if (nodeGeometry === "vertex" && targetGeometry === "vertex") {
        var nodeParentWayIDs = context.graph().parentWays(nodeEntity);
        var targetParentWayIDs = context.graph().parentWays(targetEntity);
        var sharedParentWays = utilArrayIntersection(nodeParentWayIDs, targetParentWayIDs);
        if (sharedParentWays.length !== 0) {
          if (sharedParentWays[0].areAdjacent(nodeEntity.id, targetEntity.id)) {
            return _t("operations.connect.annotation.from_vertex.to_adjacent_vertex");
          }
          return _t("operations.connect.annotation.from_vertex.to_sibling_vertex");
        }
      }
      return _t("operations.connect.annotation.from_" + nodeGeometry + ".to_" + targetGeometry);
    }
    function shouldSnapToNode(target) {
      if (!_activeEntity)
        return false;
      return _activeEntity.geometry(context.graph()) !== "vertex" || target.geometry(context.graph()) === "vertex" || _mainPresetIndex.allowsVertex(target, context.graph());
    }
    function origin(entity2) {
      return context.projection(entity2.loc);
    }
    function keydown(d3_event) {
      if (d3_event.keyCode === utilKeybinding.modifierCodes.alt) {
        if (context.surface().classed("nope")) {
          context.surface().classed("nope-suppressed", true);
        }
        context.surface().classed("nope", false).classed("nope-disabled", true);
      }
    }
    function keyup(d3_event) {
      if (d3_event.keyCode === utilKeybinding.modifierCodes.alt) {
        if (context.surface().classed("nope-suppressed")) {
          context.surface().classed("nope", true);
        }
        context.surface().classed("nope-suppressed", false).classed("nope-disabled", false);
      }
    }
    function start2(d3_event, entity2) {
      _wasMidpoint = entity2.type === "midpoint";
      var hasHidden = context.features().hasHiddenConnections(entity2, context.graph());
      _isCancelled = !context.editable() || d3_event.shiftKey || hasHidden;
      if (_isCancelled) {
        if (hasHidden) {
          context.ui().flash.duration(4e3).iconName("#iD-icon-no").label(_t("modes.drag_node.connected_to_hidden"))();
        }
        return drag.cancel();
      }
      if (_wasMidpoint) {
        var midpoint = entity2;
        entity2 = osmNode();
        context.perform(actionAddMidpoint(midpoint, entity2));
        entity2 = context.entity(entity2.id);
        var vertex = context.surface().selectAll("." + entity2.id);
        drag.targetNode(vertex.node()).targetEntity(entity2);
      } else {
        context.perform(actionNoop());
      }
      _activeEntity = entity2;
      _startLoc = entity2.loc;
      hover.ignoreVertex(entity2.geometry(context.graph()) === "vertex");
      context.surface().selectAll("." + _activeEntity.id).classed("active", true);
      context.enter(mode);
    }
    window.__moveNodeHook = function(entity2, fromLoc, toLoc) {
      if (!entity2) {
        alert("Node hasn't loaded yet, try again once it loads");
        return false;
      }
      if (entity2.id[0] !== "n") {
        alert("Can't move entity beacuse it's not a node (It's ".concat(entity2.id, ")"));
        return false;
      }
      var d3_event = {
        point: fromLoc,
        target: {},
        stopPropagation: function stopPropagation() {
        }
      };
      start2(d3_event, entity2);
      move3(d3_event, entity2, toLoc, toLoc);
      end(d3_event, entity2);
      return true;
    };
    function datum2(d3_event) {
      if (!d3_event || d3_event.altKey) {
        return {};
      } else {
        var d = d3_event.target.__data__;
        return d && d.properties && d.properties.target ? d : {};
      }
    }
    function doMove(d3_event, entity2, nudge, rapidOverideLoc) {
      nudge = nudge || [0, 0];
      var currPoint = d3_event && d3_event.point || context.projection(_lastLoc);
      var currMouse = vecSubtract(currPoint, nudge);
      var loc = context.projection.invert(currMouse);
      var target, edge;
      if (!_nudgeInterval) {
        var d = datum2(d3_event);
        target = d && d.properties && d.properties.entity;
        var targetLoc = target && target.loc;
        var targetNodes = d && d.properties && d.properties.nodes;
        if (targetLoc) {
          if (shouldSnapToNode(target)) {
            loc = targetLoc;
          }
        } else if (targetNodes) {
          edge = geoChooseEdge(targetNodes, context.map().mouse(), context.projection, end.id);
          if (edge) {
            loc = edge.loc;
          }
        }
      }
      var originalLoc = _toConsumableArray(loc);
      if (rapidOverideLoc)
        loc = rapidOverideLoc;
      context.replace(actionMoveNode(entity2.id, loc));
      var isInvalid = false;
      if (target) {
        isInvalid = hasRelationConflict(entity2, target, edge, context.graph());
      }
      if (!isInvalid) {
        isInvalid = hasInvalidGeometry(entity2, context.graph());
      }
      var nope = context.surface().classed("nope");
      if (isInvalid === "relation" || isInvalid === "restriction") {
        if (!nope) {
          context.ui().flash.duration(4e3).iconName("#iD-icon-no").label(_t("operations.connect." + isInvalid, {
            relation: _mainPresetIndex.item("type/restriction").name()
          }))();
        }
      } else if (isInvalid) {
        var errorID = isInvalid === "line" ? "lines" : "areas";
        context.ui().flash.duration(3e3).iconName("#iD-icon-no").label(_t("self_intersection.error." + errorID))();
      } else {
        if (nope) {
          context.ui().flash.duration(1).label("")();
        }
      }
      var nopeDisabled = context.surface().classed("nope-disabled");
      if (nopeDisabled) {
        context.surface().classed("nope", false).classed("nope-suppressed", isInvalid);
      } else {
        context.surface().classed("nope", isInvalid).classed("nope-suppressed", false);
      }
      _lastLoc = originalLoc;
    }
    function hasRelationConflict(entity2, target, edge, graph3) {
      var testGraph = graph3.update();
      if (edge) {
        var midpoint = osmNode();
        var action = actionAddMidpoint({
          loc: edge.loc,
          edge: [target.nodes[edge.index - 1], target.nodes[edge.index]]
        }, midpoint);
        testGraph = action(testGraph);
        target = midpoint;
      }
      var ids = [entity2.id, target.id];
      return actionConnect(ids).disabled(testGraph);
    }
    function hasInvalidGeometry(entity2, graph3) {
      var parents = graph3.parentWays(entity2);
      var i2, j, k;
      for (i2 = 0; i2 < parents.length; i2++) {
        var parent2 = parents[i2];
        var nodes = [];
        var activeIndex = null;
        var relations = graph3.parentRelations(parent2);
        for (j = 0; j < relations.length; j++) {
          if (!relations[j].isMultipolygon())
            continue;
          var rings = osmJoinWays(relations[j].members, graph3);
          for (k = 0; k < rings.length; k++) {
            nodes = rings[k].nodes;
            if (nodes.find(function(n2) {
              return n2.id === entity2.id;
            })) {
              activeIndex = k;
              if (geoHasSelfIntersections(nodes, entity2.id)) {
                return "multipolygonMember";
              }
            }
            rings[k].coords = nodes.map(function(n2) {
              return n2.loc;
            });
          }
          for (k = 0; k < rings.length; k++) {
            if (k === activeIndex)
              continue;
            if (geoHasLineIntersections(rings[activeIndex].nodes, rings[k].nodes, entity2.id)) {
              return "multipolygonRing";
            }
          }
        }
        if (activeIndex === null) {
          nodes = parent2.nodes.map(function(nodeID) {
            return graph3.entity(nodeID);
          });
          if (nodes.length && geoHasSelfIntersections(nodes, entity2.id)) {
            return parent2.geometry(graph3);
          }
        }
      }
      return false;
    }
    function move3(d3_event, entity2, point5, arg4) {
      var rapidOverideLoc = Array.isArray(arg4) && arg4[0] && arg4[1] ? arg4 : void 0;
      if (_isCancelled)
        return;
      d3_event.stopPropagation();
      context.surface().classed("nope-disabled", d3_event.altKey);
      _lastLoc = context.projection.invert(point5);
      doMove(d3_event, entity2, void 0, rapidOverideLoc);
      var nudge = geomViewportNudge(point5, context.map().dimensions());
      if (nudge) {
        startNudge(d3_event, entity2, nudge, rapidOverideLoc);
      } else {
        stopNudge();
      }
    }
    function end(d3_event, entity2) {
      if (_isCancelled)
        return;
      var wasPoint = entity2.geometry(context.graph()) === "point";
      var d = datum2(d3_event);
      var nope = d && d.properties && d.properties.nope || context.surface().classed("nope");
      var target = d && d.properties && d.properties.entity;
      if (nope) {
        context.perform(_actionBounceBack(entity2.id, _startLoc));
      } else if (target && target.type === "way") {
        var choice = geoChooseEdge(context.graph().childNodes(target), context.map().mouse(), context.projection, entity2.id);
        context.replace(actionAddMidpoint({
          loc: choice.loc,
          edge: [target.nodes[choice.index - 1], target.nodes[choice.index]]
        }, entity2), connectAnnotation(entity2, target));
      } else if (target && target.type === "node" && shouldSnapToNode(target)) {
        context.replace(actionConnect([target.id, entity2.id]), connectAnnotation(entity2, target));
      } else if (_wasMidpoint) {
        context.replace(actionNoop(), _t("operations.add.annotation.vertex"));
      } else {
        context.replace(actionNoop(), moveAnnotation(entity2));
      }
      if (wasPoint) {
        context.enter(modeSelect(context, [entity2.id]));
      } else {
        var reselection = _restoreSelectedIDs.filter(function(id2) {
          return context.graph().hasEntity(id2);
        });
        if (reselection.length) {
          context.enter(modeSelect(context, reselection));
        } else {
          context.enter(modeBrowse(context));
        }
      }
    }
    function _actionBounceBack(nodeID, toLoc) {
      var moveNode = actionMoveNode(nodeID, toLoc);
      var action = function action2(graph3, t) {
        if (t === 1)
          context.pop();
        return moveNode(graph3, t);
      };
      action.transitionable = true;
      return action;
    }
    function cancel() {
      drag.cancel();
      context.enter(modeBrowse(context));
    }
    var drag = behaviorDrag().selector(".layer-touch.points .target").surface(context.container().select(".main-map").node()).origin(origin).on("start", start2).on("move", move3).on("end", end);
    mode.enter = function() {
      context.install(hover);
      context.install(edit);
      select_default2(window).on("keydown.dragNode", keydown).on("keyup.dragNode", keyup);
      context.history().on("undone.drag-node", cancel);
    };
    mode.exit = function() {
      context.ui().sidebar.hover.cancel();
      context.uninstall(hover);
      context.uninstall(edit);
      select_default2(window).on("keydown.dragNode", null).on("keyup.dragNode", null);
      context.history().on("undone.drag-node", null);
      _activeEntity = null;
      context.surface().classed("nope", false).classed("nope-suppressed", false).classed("nope-disabled", false).selectAll(".active").classed("active", false);
      stopNudge();
    };
    mode.selectedIDs = function() {
      if (!arguments.length)
        return _activeEntity ? [_activeEntity.id] : [];
      return mode;
    };
    mode.activeID = function() {
      if (!arguments.length)
        return _activeEntity && _activeEntity.id;
      return mode;
    };
    mode.restoreSelectedIDs = function(_2) {
      if (!arguments.length)
        return _restoreSelectedIDs;
      _restoreSelectedIDs = _2;
      return mode;
    };
    mode.behavior = drag;
    return mode;
  }

  // modules/services/esri_data.js
  init_slicedToArray();

  // node_modules/d3-fetch/src/text.js
  function responseText(response) {
    if (!response.ok)
      throw new Error(response.status + " " + response.statusText);
    return response.text();
  }
  function text_default3(input4, init19) {
    return fetch(input4, init19).then(responseText);
  }

  // node_modules/d3-fetch/src/json.js
  function responseJson(response) {
    if (!response.ok)
      throw new Error(response.status + " " + response.statusText);
    if (response.status === 204 || response.status === 205)
      return;
    return response.json();
  }
  function json_default(input4, init19) {
    return fetch(input4, init19).then(responseJson);
  }

  // node_modules/d3-fetch/src/xml.js
  function parser(type3) {
    return function(input4, init19) {
      return text_default3(input4, init19).then(function(text) {
        return new DOMParser().parseFromString(text, type3);
      });
    };
  }
  var xml_default = parser("application/xml");
  var html = parser("text/html");
  var svg = parser("image/svg+xml");

  // node_modules/lodash-es/isObject.js
  init_typeof();
  function isObject(value2) {
    var type3 = _typeof(value2);
    return value2 != null && (type3 == "object" || type3 == "function");
  }
  var isObject_default = isObject;

  // node_modules/lodash-es/_root.js
  init_typeof();

  // node_modules/lodash-es/_freeGlobal.js
  init_typeof();
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == "object" && global && global.Object === Object && global;
  var freeGlobal_default = freeGlobal;

  // node_modules/lodash-es/_root.js
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == "object" && self && self.Object === Object && self;
  var root2 = freeGlobal_default || freeSelf || Function("return this")();
  var root_default = root2;

  // node_modules/lodash-es/now.js
  var now2 = function now3() {
    return root_default.Date.now();
  };
  var now_default = now2;

  // node_modules/lodash-es/_trimmedEndIndex.js
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  var trimmedEndIndex_default = trimmedEndIndex;

  // node_modules/lodash-es/_baseTrim.js
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
  }
  var baseTrim_default = baseTrim;

  // node_modules/lodash-es/isSymbol.js
  init_typeof();

  // node_modules/lodash-es/_Symbol.js
  var _Symbol = root_default.Symbol;
  var Symbol_default = _Symbol;

  // node_modules/lodash-es/_getRawTag.js
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
  function getRawTag(value2) {
    var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
    try {
      value2[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e3) {
    }
    var result6 = nativeObjectToString.call(value2);
    if (unmasked) {
      if (isOwn) {
        value2[symToStringTag] = tag;
      } else {
        delete value2[symToStringTag];
      }
    }
    return result6;
  }
  var getRawTag_default = getRawTag;

  // node_modules/lodash-es/_objectToString.js
  var objectProto2 = Object.prototype;
  var nativeObjectToString2 = objectProto2.toString;
  function objectToString(value2) {
    return nativeObjectToString2.call(value2);
  }
  var objectToString_default = objectToString;

  // node_modules/lodash-es/_baseGetTag.js
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
  function baseGetTag(value2) {
    if (value2 == null) {
      return value2 === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag2 && symToStringTag2 in Object(value2) ? getRawTag_default(value2) : objectToString_default(value2);
  }
  var baseGetTag_default = baseGetTag;

  // node_modules/lodash-es/isObjectLike.js
  init_typeof();
  function isObjectLike(value2) {
    return value2 != null && _typeof(value2) == "object";
  }
  var isObjectLike_default = isObjectLike;

  // node_modules/lodash-es/isSymbol.js
  var symbolTag = "[object Symbol]";
  function isSymbol(value2) {
    return _typeof(value2) == "symbol" || isObjectLike_default(value2) && baseGetTag_default(value2) == symbolTag;
  }
  var isSymbol_default = isSymbol;

  // node_modules/lodash-es/toNumber.js
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value2) {
    if (typeof value2 == "number") {
      return value2;
    }
    if (isSymbol_default(value2)) {
      return NAN;
    }
    if (isObject_default(value2)) {
      var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
      value2 = isObject_default(other) ? other + "" : other;
    }
    if (typeof value2 != "string") {
      return value2 === 0 ? value2 : +value2;
    }
    value2 = baseTrim_default(value2);
    var isBinary = reIsBinary.test(value2);
    return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
  }
  var toNumber_default = toNumber;

  // node_modules/lodash-es/debounce.js
  var FUNC_ERROR_TEXT = "Expected a function";
  var nativeMax = Math.max;
  var nativeMin = Math.min;
  function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result6, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber_default(wait) || 0;
    if (isObject_default(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax(toNumber_default(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time;
      result6 = func.apply(thisArg, args);
      return result6;
    }
    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time) : result6;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now_default();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = void 0;
      return result6;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result6 : trailingEdge(now_default());
    }
    function debounced() {
      var time = now_default(), isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result6;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  var debounce_default = debounce;

  // modules/core/rapid_context.js
  var import_togeojson = __toModule(require_togeojson_umd());
  function coreRapidContext(context) {
    var dispatch12 = dispatch_default("task_extent_set");
    var _rapidContext = {};
    _rapidContext.version = "2.0.0";
    _rapidContext.showPowerUser = context.initialHashParams.poweruser === "true";
    function distinct(value2, index, self2) {
      return self2.indexOf(value2) === index;
    }
    var _taskExtent;
    var _isTaskBoundsRect;
    _rapidContext.setTaskExtentByGpxData = function(gpxData) {
      var dom = new DOMParser().parseFromString(gpxData, "text/xml");
      var gj = (0, import_togeojson.gpx)(dom);
      var lineStringCount = gj.features.reduce(function(accumulator, currentValue) {
        return accumulator + (currentValue.geometry.type === "LineString" ? 1 : 0);
      }, 0);
      if (gj.type === "FeatureCollection") {
        var minlat, minlon, maxlat, maxlon;
        gj.features.forEach(function(f2) {
          if (f2.geometry.type === "Point") {
            var lon = f2.geometry.coordinates[0];
            var lat = f2.geometry.coordinates[1];
            if (minlat === void 0 || lat < minlat)
              minlat = lat;
            if (minlon === void 0 || lon < minlon)
              minlon = lon;
            if (maxlat === void 0 || lat > maxlat)
              maxlat = lat;
            if (maxlon === void 0 || lon > maxlon)
              maxlon = lon;
          } else if (f2.geometry.type === "LineString" && lineStringCount === 1) {
            var lats = f2.geometry.coordinates.map(function(f3) {
              return f3[0];
            });
            var lngs = f2.geometry.coordinates.map(function(f3) {
              return f3[1];
            });
            var uniqueLats = lats.filter(distinct);
            var uniqueLngs = lngs.filter(distinct);
            var eachLatHas2Lngs = true;
            uniqueLats.forEach(function(lat2) {
              var lngsForThisLat = f2.geometry.coordinates.filter(function(coord) {
                return coord[0] === lat2;
              }).map(function(coord) {
                return coord[1];
              }).filter(distinct);
              if (lngsForThisLat.length !== 2) {
                eachLatHas2Lngs = false;
              }
            });
            if (uniqueLats.length === 2 && uniqueLngs.length === 2 && eachLatHas2Lngs) {
              _isTaskBoundsRect = true;
            } else {
              _isTaskBoundsRect = false;
            }
          }
        });
        _taskExtent = new Extent([minlon, minlat], [maxlon, maxlat]);
        dispatch12.call("task_extent_set");
      }
    };
    _rapidContext.getTaskExtent = function() {
      return _taskExtent;
    };
    _rapidContext.isTaskRectangular = function() {
      return !!_taskExtent && _isTaskBoundsRect;
    };
    _rapidContext.sources = new Set();
    var RAPID_MAGENTA = "#da26d3";
    var COLORS = [
      "#ff0000",
      "#ffa500",
      "#ffd700",
      "#00ff00",
      "#00ffff",
      "#1e90ff",
      "#da26d3",
      "#ffc0cb",
      "#d3d3d3",
      "#faf0e6"
    ];
    _rapidContext.colors = function() {
      return COLORS;
    };
    var _datasets3 = {};
    _rapidContext.datasets = function() {
      return _datasets3;
    };
    _rapidContext.init = function() {
      _mainLocalizer.ensureLoaded().then(function() {
        _datasets3 = {
          "fbRoads": {
            id: "fbRoads",
            beta: false,
            added: false,
            enabled: false,
            conflated: true,
            service: "fbml",
            color: RAPID_MAGENTA,
            label: _t("rapid_feature_toggle.fbRoads.label"),
            license_markdown: _t("rapid_feature_toggle.fbRoads.license_markdown")
          },
          "msBuildings": {
            id: "msBuildings",
            beta: false,
            added: false,
            enabled: false,
            conflated: true,
            service: "fbml",
            color: RAPID_MAGENTA,
            label: _t("rapid_feature_toggle.msBuildings.label"),
            license_markdown: _t("rapid_feature_toggle.msBuildings.license_markdown")
          }
        };
        var enabled = "";
        var toLoad = new Set();
        enabled.split(",").forEach(function(id2) {
          id2 = id2.trim();
          if (_datasets3[id2]) {
            _datasets3[id2].enabled = true;
          } else {
            toLoad.add(id2);
          }
        });
        var service = services.esriData;
        if (!service || !toLoad.size)
          return;
        service.loadDatasets().then(function(results) {
          toLoad.forEach(function(id2) {
            var d = results[id2];
            if (!d)
              return;
            service.loadLayer(d.id);
            var isBeta = d.groupCategories.some(function(cat) {
              return cat.toLowerCase() === "/categories/preview";
            });
            var isBuildings = d.groupCategories.some(function(cat) {
              return cat.toLowerCase() === "/categories/buildings";
            });
            var nextColor = Object.keys(_datasets3).length % COLORS.length;
            var dataset = {
              id: d.id,
              beta: isBeta,
              added: true,
              enabled: true,
              conflated: false,
              service: "esri",
              color: COLORS[nextColor],
              label: d.title,
              license_markdown: _t("rapid_feature_toggle.esri.license_markdown")
            };
            if (d.extent) {
              dataset.extent = new Extent(d.extent[0], d.extent[1]);
            }
            if (isBuildings) {
              dataset.conflated = true;
              dataset.service = "fbml";
            }
            _datasets3[d.id] = dataset;
          });
        });
      });
    };
    _rapidContext.reset = function() {
      _rapidContext.sources = new Set();
    };
    return utilRebind(_rapidContext, dispatch12, "on");
  }

  // modules/core/difference.js
  var import_fast_deep_equal3 = __toModule(require_fast_deep_equal());
  function coreDifference(base2, head) {
    var _changes = {};
    var _didChange = {};
    var _diff = {};
    function checkEntityID(id2) {
      var h = head.entities[id2];
      var b2 = base2.entities[id2];
      if (h === b2)
        return;
      if (_changes[id2])
        return;
      if (!h && b2) {
        _changes[id2] = {
          base: b2,
          head: h
        };
        _didChange.deletion = true;
        return;
      }
      if (h && !b2) {
        _changes[id2] = {
          base: b2,
          head: h
        };
        _didChange.addition = true;
        return;
      }
      if (h && b2) {
        if (h.members && b2.members && !(0, import_fast_deep_equal3.default)(h.members, b2.members)) {
          _changes[id2] = {
            base: b2,
            head: h
          };
          _didChange.geometry = true;
          _didChange.properties = true;
          return;
        }
        if (h.loc && b2.loc && !vecEqual(h.loc, b2.loc)) {
          _changes[id2] = {
            base: b2,
            head: h
          };
          _didChange.geometry = true;
        }
        if (h.nodes && b2.nodes && !(0, import_fast_deep_equal3.default)(h.nodes, b2.nodes)) {
          _changes[id2] = {
            base: b2,
            head: h
          };
          _didChange.geometry = true;
        }
        if (h.tags && b2.tags && !(0, import_fast_deep_equal3.default)(h.tags, b2.tags)) {
          _changes[id2] = {
            base: b2,
            head: h
          };
          _didChange.properties = true;
        }
      }
    }
    function load2() {
      var ids = utilArrayUniq(Object.keys(head.entities).concat(Object.keys(base2.entities)));
      for (var i2 = 0; i2 < ids.length; i2++) {
        checkEntityID(ids[i2]);
      }
    }
    load2();
    _diff.length = function length() {
      return Object.keys(_changes).length;
    };
    _diff.changes = function changes() {
      return _changes;
    };
    _diff.didChange = _didChange;
    _diff.extantIDs = function extantIDs(includeRelMembers) {
      var result6 = new Set();
      Object.keys(_changes).forEach(function(id2) {
        if (_changes[id2].head) {
          result6.add(id2);
        }
        var h = _changes[id2].head;
        var b2 = _changes[id2].base;
        var entity2 = h || b2;
        if (includeRelMembers && entity2.type === "relation") {
          var mh = h ? h.members.map(function(m) {
            return m.id;
          }) : [];
          var mb = b2 ? b2.members.map(function(m) {
            return m.id;
          }) : [];
          utilArrayUnion(mh, mb).forEach(function(memberID) {
            if (head.hasEntity(memberID)) {
              result6.add(memberID);
            }
          });
        }
      });
      return Array.from(result6);
    };
    _diff.modified = function modified() {
      var result6 = [];
      Object.values(_changes).forEach(function(change) {
        if (change.base && change.head) {
          result6.push(change.head);
        }
      });
      return result6;
    };
    _diff.created = function created() {
      var result6 = [];
      Object.values(_changes).forEach(function(change) {
        if (!change.base && change.head) {
          result6.push(change.head);
        }
      });
      return result6;
    };
    _diff.deleted = function deleted() {
      var result6 = [];
      Object.values(_changes).forEach(function(change) {
        if (change.base && !change.head) {
          result6.push(change.base);
        }
      });
      return result6;
    };
    _diff.summary = function summary() {
      var relevant = {};
      var keys3 = Object.keys(_changes);
      for (var i2 = 0; i2 < keys3.length; i2++) {
        var change = _changes[keys3[i2]];
        if (change.head && change.head.geometry(head) !== "vertex") {
          addEntity(change.head, head, change.base ? "modified" : "created");
        } else if (change.base && change.base.geometry(base2) !== "vertex") {
          addEntity(change.base, base2, "deleted");
        } else if (change.base && change.head) {
          var moved = !(0, import_fast_deep_equal3.default)(change.base.loc, change.head.loc);
          var retagged = !(0, import_fast_deep_equal3.default)(change.base.tags, change.head.tags);
          if (moved) {
            addParents(change.head);
          }
          if (retagged || moved && change.head.hasInterestingTags()) {
            addEntity(change.head, head, "modified");
          }
        } else if (change.head && change.head.hasInterestingTags()) {
          addEntity(change.head, head, "created");
        } else if (change.base && change.base.hasInterestingTags()) {
          addEntity(change.base, base2, "deleted");
        }
      }
      return Object.values(relevant);
      function addEntity(entity2, graph3, changeType) {
        relevant[entity2.id] = {
          entity: entity2,
          graph: graph3,
          changeType: changeType
        };
      }
      function addParents(entity2) {
        var parents = head.parentWays(entity2);
        for (var j = parents.length - 1; j >= 0; j--) {
          var parent2 = parents[j];
          if (!(parent2.id in relevant)) {
            addEntity(parent2, head, "modified");
          }
        }
      }
    };
    _diff.complete = function complete(extent6) {
      var result6 = {};
      var id2, change;
      for (id2 in _changes) {
        change = _changes[id2];
        var h = change.head;
        var b2 = change.base;
        var entity2 = h || b2;
        var i2;
        if (extent6 && (!h || !h.intersects(extent6, head)) && (!b2 || !b2.intersects(extent6, base2))) {
          continue;
        }
        result6[id2] = h;
        if (entity2.type === "way") {
          var nh = h ? h.nodes : [];
          var nb = b2 ? b2.nodes : [];
          var diff;
          diff = utilArrayDifference(nh, nb);
          for (i2 = 0; i2 < diff.length; i2++) {
            result6[diff[i2]] = head.hasEntity(diff[i2]);
          }
          diff = utilArrayDifference(nb, nh);
          for (i2 = 0; i2 < diff.length; i2++) {
            result6[diff[i2]] = head.hasEntity(diff[i2]);
          }
        }
        if (entity2.type === "relation" && entity2.isMultipolygon()) {
          var mh = h ? h.members.map(function(m) {
            return m.id;
          }) : [];
          var mb = b2 ? b2.members.map(function(m) {
            return m.id;
          }) : [];
          var ids = utilArrayUnion(mh, mb);
          for (i2 = 0; i2 < ids.length; i2++) {
            var member = head.hasEntity(ids[i2]);
            if (!member)
              continue;
            if (extent6 && !member.intersects(extent6, head))
              continue;
            result6[ids[i2]] = member;
          }
        }
        addParents(head.parentWays(entity2), result6);
        addParents(head.parentRelations(entity2), result6);
      }
      return result6;
      function addParents(parents, result7) {
        for (var i3 = 0; i3 < parents.length; i3++) {
          var parent2 = parents[i3];
          if (parent2.id in result7)
            continue;
          result7[parent2.id] = parent2;
          addParents(head.parentRelations(parent2), result7);
        }
      }
    };
    return _diff;
  }

  // modules/core/tree.js
  var import_rbush = __toModule(require_rbush_min());
  function coreTree(head) {
    var _rtree = new import_rbush.default();
    var _bboxes = {};
    var _segmentsRTree = new import_rbush.default();
    var _segmentsBBoxes = {};
    var _segmentsByWayId = {};
    var tree = {};
    function entityBBox(entity2) {
      var bbox = entity2.extent(head).bbox();
      bbox.id = entity2.id;
      _bboxes[entity2.id] = bbox;
      return bbox;
    }
    function segmentBBox(segment) {
      var extent6 = segment.extent(head);
      if (!extent6)
        return null;
      var bbox = extent6.bbox();
      bbox.segment = segment;
      _segmentsBBoxes[segment.id] = bbox;
      return bbox;
    }
    function removeEntity(entity2) {
      _rtree.remove(_bboxes[entity2.id]);
      delete _bboxes[entity2.id];
      if (_segmentsByWayId[entity2.id]) {
        _segmentsByWayId[entity2.id].forEach(function(segment) {
          _segmentsRTree.remove(_segmentsBBoxes[segment.id]);
          delete _segmentsBBoxes[segment.id];
        });
        delete _segmentsByWayId[entity2.id];
      }
    }
    function loadEntities(entities) {
      _rtree.load(entities.map(entityBBox));
      var segments2 = [];
      entities.forEach(function(entity2) {
        if (entity2.segments) {
          var entitySegments = entity2.segments(head);
          _segmentsByWayId[entity2.id] = entitySegments;
          segments2 = segments2.concat(entitySegments);
        }
      });
      if (segments2.length)
        _segmentsRTree.load(segments2.map(segmentBBox).filter(Boolean));
    }
    function updateParents(entity2, insertions, memo) {
      head.parentWays(entity2).forEach(function(way) {
        if (_bboxes[way.id]) {
          removeEntity(way);
          insertions[way.id] = way;
        }
        updateParents(way, insertions, memo);
      });
      head.parentRelations(entity2).forEach(function(relation) {
        if (memo[entity2.id])
          return;
        memo[entity2.id] = true;
        if (_bboxes[relation.id]) {
          removeEntity(relation);
          insertions[relation.id] = relation;
        }
        updateParents(relation, insertions, memo);
      });
    }
    tree.rebase = function(entities, force) {
      var insertions = {};
      for (var i2 = 0; i2 < entities.length; i2++) {
        var entity2 = entities[i2];
        if (!entity2.visible)
          continue;
        if (head.entities.hasOwnProperty(entity2.id) || _bboxes[entity2.id]) {
          if (!force) {
            continue;
          } else if (_bboxes[entity2.id]) {
            removeEntity(entity2);
          }
        }
        insertions[entity2.id] = entity2;
        updateParents(entity2, insertions, {});
      }
      loadEntities(Object.values(insertions));
      return tree;
    };
    function updateToGraph(graph3) {
      if (graph3 === head)
        return;
      var diff = coreDifference(head, graph3);
      head = graph3;
      var changed = diff.didChange;
      if (!changed.addition && !changed.deletion && !changed.geometry)
        return;
      var insertions = {};
      if (changed.deletion) {
        diff.deleted().forEach(function(entity2) {
          removeEntity(entity2);
        });
      }
      if (changed.geometry) {
        diff.modified().forEach(function(entity2) {
          removeEntity(entity2);
          insertions[entity2.id] = entity2;
          updateParents(entity2, insertions, {});
        });
      }
      if (changed.addition) {
        diff.created().forEach(function(entity2) {
          insertions[entity2.id] = entity2;
        });
      }
      loadEntities(Object.values(insertions));
    }
    tree.intersects = function(extent6, graph3) {
      updateToGraph(graph3);
      return _rtree.search(extent6.bbox()).map(function(bbox) {
        return graph3.entity(bbox.id);
      });
    };
    tree.waySegments = function(extent6, graph3) {
      updateToGraph(graph3);
      return _segmentsRTree.search(extent6.bbox()).map(function(bbox) {
        return bbox.segment;
      });
    };
    return tree;
  }

  // modules/svg/icon.js
  function svgIcon(name, svgklass, useklass) {
    return function drawIcon(selection2) {
      selection2.selectAll("svg.icon" + (svgklass ? "." + svgklass.split(" ")[0] : "")).data([0]).enter().append("svg").attr("class", "icon " + (svgklass || "")).append("use").attr("xlink:href", name).attr("class", useklass);
    };
  }

  // modules/ui/modal.js
  function uiModal(selection2, blocking) {
    var _this = this;
    var keybinding = utilKeybinding("modal");
    var previous = selection2.select("div.modal");
    var animate = previous.empty();
    previous.transition().duration(200).style("opacity", 0).remove();
    var shaded = selection2.append("div").attr("class", "shaded").style("opacity", 0);
    shaded.close = function() {
      shaded.transition().duration(200).style("opacity", 0).remove();
      modal.transition().duration(200).style("top", "0px");
      select_default2(document).call(keybinding.unbind);
    };
    var modal = shaded.append("div").attr("class", "modal fillL");
    modal.append("input").attr("class", "keytrap keytrap-first").on("focus.keytrap", moveFocusToLast);
    if (!blocking) {
      shaded.on("click.remove-modal", function(d3_event) {
        if (d3_event.target === _this) {
          shaded.close();
        }
      });
      modal.append("button").attr("class", "close").on("click", shaded.close).call(svgIcon("#iD-icon-close"));
      keybinding.on("\u232B", shaded.close).on("\u238B", shaded.close);
      select_default2(document).call(keybinding);
    }
    modal.append("div").attr("class", "content");
    modal.append("input").attr("class", "keytrap keytrap-last").on("focus.keytrap", moveFocusToFirst);
    if (animate) {
      shaded.transition().style("opacity", 1);
    } else {
      shaded.style("opacity", 1);
    }
    return shaded;
    function moveFocusToFirst() {
      var node = modal.select("a, button, input:not(.keytrap), select, textarea").node();
      if (node) {
        node.focus();
      } else {
        select_default2(this).node().blur();
      }
    }
    function moveFocusToLast() {
      var nodes = modal.selectAll("a, button, input:not(.keytrap), select, textarea").nodes();
      if (nodes.length) {
        nodes[nodes.length - 1].focus();
      } else {
        select_default2(this).node().blur();
      }
    }
  }

  // modules/ui/loading.js
  function uiLoading(context) {
    var _modalSelection = select_default2(null);
    var _message = "";
    var _blocking = false;
    var loading = function loading2(selection2) {
      _modalSelection = uiModal(selection2, _blocking);
      var loadertext = _modalSelection.select(".content").classed("loading-modal", true).append("div").attr("class", "modal-section fillL");
      loadertext.append("img").attr("class", "loader").attr("src", context.imagePath("loader-white.gif"));
      loadertext.append("h3").html(_message);
      _modalSelection.select("button.close").attr("class", "hide");
      return loading2;
    };
    loading.message = function(val) {
      if (!arguments.length)
        return _message;
      _message = val;
      return loading;
    };
    loading.blocking = function(val) {
      if (!arguments.length)
        return _blocking;
      _blocking = val;
      return loading;
    };
    loading.close = function() {
      _modalSelection.remove();
    };
    loading.isShown = function() {
      return _modalSelection && !_modalSelection.empty() && _modalSelection.node().parentNode;
    };
    return loading;
  }

  // modules/core/history.js
  function coreHistory(context) {
    var dispatch12 = dispatch_default("reset", "change", "merge", "restore", "undone", "redone", "storage_error");
    var _lock = utilSessionMutex("lock");
    var _hasUnresolvedRestorableChanges = _lock.lock() && !!corePreferences(getKey("saved_history"));
    var duration = 150;
    var _imageryUsed = [];
    var _photoOverlaysUsed = [];
    var _checkpoints = {};
    var _pausedGraph;
    var _stack;
    var _index;
    var _tree;
    function _act(actions, t) {
      actions = Array.prototype.slice.call(actions);
      var annotation;
      if (typeof actions[actions.length - 1] !== "function") {
        annotation = actions.pop();
      }
      var graph3 = _stack[_index].graph;
      for (var i2 = 0; i2 < actions.length; i2++) {
        graph3 = actions[i2](graph3, t);
      }
      return {
        graph: graph3,
        annotation: annotation,
        imageryUsed: _imageryUsed,
        photoOverlaysUsed: _photoOverlaysUsed,
        transform: context.projection.transform(),
        selectedIDs: context.selectedIDs()
      };
    }
    function _perform(args, t) {
      var previous = _stack[_index].graph;
      _stack = _stack.slice(0, _index + 1);
      var actionResult = _act(args, t);
      _stack.push(actionResult);
      _index++;
      return change(previous);
    }
    function _replace(args, t) {
      var previous = _stack[_index].graph;
      var actionResult = _act(args, t);
      _stack[_index] = actionResult;
      return change(previous);
    }
    function _overwrite(args, t) {
      var previous = _stack[_index].graph;
      if (_index > 0) {
        _index--;
        _stack.pop();
      }
      _stack = _stack.slice(0, _index + 1);
      var actionResult = _act(args, t);
      _stack.push(actionResult);
      _index++;
      return change(previous);
    }
    function change(previous) {
      var difference = coreDifference(previous, history.graph());
      if (!_pausedGraph) {
        dispatch12.call("change", this, difference);
      }
      return difference;
    }
    function getKey(n2) {
      return "iD_" + window.location.origin + "_" + n2;
    }
    var history = {
      graph: function graph3() {
        return _stack[_index].graph;
      },
      tree: function tree() {
        return _tree;
      },
      base: function base2() {
        return _stack[0].graph;
      },
      peekAnnotation: function peekAnnotation() {
        return _stack[_index].annotation;
      },
      peekAllAnnotations: function peekAllAnnotations() {
        var result6 = [];
        for (var i2 = 0; i2 <= _index; i2++) {
          if (_stack[i2].annotation) {
            result6.push(_stack[i2].annotation);
          }
        }
        return result6;
      },
      merge: function merge3(entities) {
        var stack = _stack.map(function(state) {
          return state.graph;
        });
        _stack[0].graph.rebase(entities, stack, false);
        _tree.rebase(entities, false);
        dispatch12.call("merge", this, entities);
      },
      perform: function perform() {
        select_default2(document).interrupt("history.perform");
        var transitionable = false;
        var action0 = arguments[0];
        if (arguments.length === 1 || arguments.length === 2 && typeof arguments[1] !== "function") {
          transitionable = !!action0.transitionable;
        }
        if (transitionable) {
          var origArguments = arguments;
          select_default2(document).transition("history.perform").duration(duration).ease(linear2).tween("history.tween", function() {
            return function(t) {
              if (t < 1)
                _overwrite([action0], t);
            };
          }).on("start", function() {
            _perform([action0], 0);
          }).on("end interrupt", function() {
            _overwrite(origArguments, 1);
          });
        } else {
          return _perform(arguments);
        }
      },
      replace: function replace2() {
        select_default2(document).interrupt("history.perform");
        return _replace(arguments, 1);
      },
      overwrite: function overwrite() {
        select_default2(document).interrupt("history.perform");
        return _overwrite(arguments, 1);
      },
      pop: function pop(n2) {
        select_default2(document).interrupt("history.perform");
        var previous = _stack[_index].graph;
        if (isNaN(+n2) || +n2 < 0) {
          n2 = 1;
        }
        while (n2-- > 0 && _index > 0) {
          _index--;
          _stack.pop();
        }
        return change(previous);
      },
      undo: function undo() {
        select_default2(document).interrupt("history.perform");
        var previousStack = _stack[_index];
        var previous = previousStack.graph;
        while (_index > 0) {
          _index--;
          if (_stack[_index].annotation)
            break;
        }
        dispatch12.call("undone", this, _stack[_index], previousStack);
        return change(previous);
      },
      redo: function redo() {
        select_default2(document).interrupt("history.perform");
        var previousStack = _stack[_index];
        var previous = previousStack.graph;
        var tryIndex = _index;
        while (tryIndex < _stack.length - 1) {
          tryIndex++;
          if (_stack[tryIndex].annotation) {
            _index = tryIndex;
            dispatch12.call("redone", this, _stack[_index], previousStack);
            break;
          }
        }
        return change(previous);
      },
      pauseChangeDispatch: function pauseChangeDispatch() {
        if (!_pausedGraph) {
          _pausedGraph = _stack[_index].graph;
        }
      },
      resumeChangeDispatch: function resumeChangeDispatch() {
        if (_pausedGraph) {
          var previous = _pausedGraph;
          _pausedGraph = null;
          return change(previous);
        }
      },
      undoAnnotation: function undoAnnotation() {
        var i2 = _index;
        while (i2 >= 0) {
          if (_stack[i2].annotation)
            return _stack[i2].annotation;
          i2--;
        }
      },
      redoAnnotation: function redoAnnotation() {
        var i2 = _index + 1;
        while (i2 <= _stack.length - 1) {
          if (_stack[i2].annotation)
            return _stack[i2].annotation;
          i2++;
        }
      },
      intersects: function intersects4(extent6) {
        return _tree.intersects(extent6, _stack[_index].graph);
      },
      difference: function difference() {
        var base2 = _stack[0].graph;
        var head = _stack[_index].graph;
        return coreDifference(base2, head);
      },
      changes: function changes(action) {
        var base2 = _stack[0].graph;
        var head = _stack[_index].graph;
        if (action) {
          head = action(head);
        }
        var difference = coreDifference(base2, head);
        return {
          modified: difference.modified(),
          created: difference.created(),
          deleted: difference.deleted()
        };
      },
      hasChanges: function hasChanges() {
        return this.difference().length() > 0;
      },
      imageryUsed: function imageryUsed(sources) {
        if (sources) {
          _imageryUsed = sources;
          return history;
        } else {
          var s = new Set();
          _stack.slice(1, _index + 1).forEach(function(state) {
            state.imageryUsed.forEach(function(source) {
              if (source !== "Custom") {
                s.add(source);
              }
            });
          });
          return Array.from(s);
        }
      },
      photoOverlaysUsed: function photoOverlaysUsed(sources) {
        if (sources) {
          _photoOverlaysUsed = sources;
          return history;
        } else {
          var s = new Set();
          _stack.slice(1, _index + 1).forEach(function(state) {
            if (state.photoOverlaysUsed && Array.isArray(state.photoOverlaysUsed)) {
              state.photoOverlaysUsed.forEach(function(photoOverlay) {
                s.add(photoOverlay);
              });
            }
          });
          return Array.from(s);
        }
      },
      checkpoint: function checkpoint(key) {
        _checkpoints[key] = {
          stack: _stack,
          index: _index
        };
        return history;
      },
      reset: function reset17(key) {
        if (key !== void 0 && _checkpoints.hasOwnProperty(key)) {
          _stack = _checkpoints[key].stack;
          _index = _checkpoints[key].index;
        } else {
          _stack = [{
            graph: coreGraph()
          }];
          _index = 0;
          _tree = coreTree(_stack[0].graph);
          _checkpoints = {};
        }
        dispatch12.call("reset");
        dispatch12.call("change");
        dispatch12.call("restore");
        return history;
      },
      toIntroGraph: function toIntroGraph() {
        var nextID = {
          n: 0,
          r: 0,
          w: 0
        };
        var permIDs = {};
        var graph3 = this.graph();
        var baseEntities = {};
        Object.values(graph3.base().entities).forEach(function(entity2) {
          var copy7 = copyIntroEntity(entity2);
          baseEntities[copy7.id] = copy7;
        });
        Object.keys(graph3.entities).forEach(function(id2) {
          var entity2 = graph3.entities[id2];
          if (entity2) {
            var copy7 = copyIntroEntity(entity2);
            baseEntities[copy7.id] = copy7;
          } else {
            delete baseEntities[id2];
          }
        });
        Object.values(baseEntities).forEach(function(entity2) {
          if (Array.isArray(entity2.nodes)) {
            entity2.nodes = entity2.nodes.map(function(node) {
              return permIDs[node] || node;
            });
          }
          if (Array.isArray(entity2.members)) {
            entity2.members = entity2.members.map(function(member) {
              member.id = permIDs[member.id] || member.id;
              return member;
            });
          }
        });
        return JSON.stringify({
          dataIntroGraph: baseEntities
        });
        function copyIntroEntity(source) {
          var copy7 = utilObjectOmit(source, ["type", "user", "v", "version", "visible"]);
          if (copy7.tags && !Object.keys(copy7.tags)) {
            delete copy7.tags;
          }
          if (Array.isArray(copy7.loc)) {
            copy7.loc[0] = +copy7.loc[0].toFixed(6);
            copy7.loc[1] = +copy7.loc[1].toFixed(6);
          }
          var match = source.id.match(/([nrw])-\d*/);
          if (match !== null) {
            var nrw = match[1];
            var permID;
            do {
              permID = nrw + ++nextID[nrw];
            } while (baseEntities.hasOwnProperty(permID));
            copy7.id = permIDs[source.id] = permID;
          }
          return copy7;
        }
      },
      toJSON: function toJSON() {
        if (!this.hasChanges())
          return;
        var allEntities = {};
        var baseEntities = {};
        var base2 = _stack[0];
        var s = _stack.map(function(i2) {
          var modified = [];
          var deleted = [];
          Object.keys(i2.graph.entities).forEach(function(id2) {
            var entity2 = i2.graph.entities[id2];
            if (entity2) {
              var key = osmEntity.key(entity2);
              allEntities[key] = entity2;
              modified.push(key);
            } else {
              deleted.push(id2);
            }
            if (id2 in base2.graph.entities) {
              baseEntities[id2] = base2.graph.entities[id2];
            }
            if (entity2 && entity2.nodes) {
              entity2.nodes.forEach(function(nodeID) {
                if (nodeID in base2.graph.entities) {
                  baseEntities[nodeID] = base2.graph.entities[nodeID];
                }
              });
            }
            var baseParents = base2.graph._parentWays[id2];
            if (baseParents) {
              baseParents.forEach(function(parentID) {
                if (parentID in base2.graph.entities) {
                  baseEntities[parentID] = base2.graph.entities[parentID];
                }
              });
            }
          });
          var x2 = {};
          if (modified.length)
            x2.modified = modified;
          if (deleted.length)
            x2.deleted = deleted;
          if (i2.imageryUsed)
            x2.imageryUsed = i2.imageryUsed;
          if (i2.photoOverlaysUsed)
            x2.photoOverlaysUsed = i2.photoOverlaysUsed;
          if (i2.annotation)
            x2.annotation = i2.annotation;
          if (i2.transform)
            x2.transform = i2.transform;
          if (i2.selectedIDs)
            x2.selectedIDs = i2.selectedIDs;
          return x2;
        });
        return JSON.stringify({
          version: 3,
          entities: Object.values(allEntities),
          baseEntities: Object.values(baseEntities),
          stack: s,
          nextIDs: osmEntity.id.next,
          index: _index,
          timestamp: new Date().getTime()
        });
      },
      fromJSON: function fromJSON(json2, loadChildNodes) {
        var h = JSON.parse(json2);
        var loadComplete = true;
        osmEntity.id.next = h.nextIDs;
        _index = h.index;
        if (h.version === 2 || h.version === 3) {
          var allEntities = {};
          h.entities.forEach(function(entity2) {
            allEntities[osmEntity.key(entity2)] = osmEntity(entity2);
          });
          if (h.version === 3) {
            var baseEntities = h.baseEntities.map(function(d) {
              return osmEntity(d);
            });
            var stack = _stack.map(function(state) {
              return state.graph;
            });
            _stack[0].graph.rebase(baseEntities, stack, true);
            _tree.rebase(baseEntities, true);
            if (loadChildNodes) {
              var osm = context.connection();
              var baseWays = baseEntities.filter(function(e3) {
                return e3.type === "way";
              });
              var nodeIDs = baseWays.reduce(function(acc, way) {
                return utilArrayUnion(acc, way.nodes);
              }, []);
              var missing = nodeIDs.filter(function(n2) {
                return !_stack[0].graph.hasEntity(n2);
              });
              if (missing.length && osm) {
                loadComplete = false;
                context.map().redrawEnable(false);
                var loading = uiLoading(context).blocking(true);
                context.container().call(loading);
                var childNodesLoaded = function childNodesLoaded2(err, result6) {
                  if (!err) {
                    var visibleGroups = utilArrayGroupBy(result6.data, "visible");
                    var visibles = visibleGroups.true || [];
                    var invisibles = visibleGroups.false || [];
                    if (visibles.length) {
                      var visibleIDs = visibles.map(function(entity2) {
                        return entity2.id;
                      });
                      var stack2 = _stack.map(function(state) {
                        return state.graph;
                      });
                      missing = utilArrayDifference(missing, visibleIDs);
                      _stack[0].graph.rebase(visibles, stack2, true);
                      _tree.rebase(visibles, true);
                    }
                    invisibles.forEach(function(entity2) {
                      osm.loadEntityVersion(entity2.id, +entity2.version - 1, childNodesLoaded2);
                    });
                  }
                  if (err || !missing.length) {
                    loading.close();
                    context.map().redrawEnable(true);
                    dispatch12.call("change");
                    dispatch12.call("restore", this);
                  }
                };
                osm.loadMultiple(missing, childNodesLoaded);
              }
            }
          }
          _stack = h.stack.map(function(d) {
            var entities = {}, entity2;
            if (d.modified) {
              d.modified.forEach(function(key) {
                entity2 = allEntities[key];
                entities[entity2.id] = entity2;
              });
            }
            if (d.deleted) {
              d.deleted.forEach(function(id2) {
                entities[id2] = void 0;
              });
            }
            if (d.annotation && d.annotation.type === "rapid_accept_feature") {
              var rapidContext = context.rapidContext();
              var sourceTag = d.annotation.source;
              rapidContext.sources.add("mapwithai");
              if (sourceTag && /^esri/.test(sourceTag)) {
                rapidContext.sources.add("esri");
              }
            }
            return {
              graph: coreGraph(_stack[0].graph).load(entities),
              annotation: d.annotation,
              imageryUsed: d.imageryUsed,
              photoOverlaysUsed: d.photoOverlaysUsed,
              transform: d.transform,
              selectedIDs: d.selectedIDs
            };
          });
        } else {
          _stack = h.stack.map(function(d) {
            var entities = {};
            for (var i2 in d.entities) {
              var entity2 = d.entities[i2];
              entities[i2] = entity2 === "undefined" ? void 0 : osmEntity(entity2);
            }
            d.graph = coreGraph(_stack[0].graph).load(entities);
            return d;
          });
        }
        var transform2 = _stack[_index].transform;
        if (transform2) {
          context.map().transformEase(transform2, 0);
        }
        if (loadComplete) {
          dispatch12.call("change");
          dispatch12.call("restore", this);
        }
        return history;
      },
      lock: function lock() {
        return _lock.lock();
      },
      unlock: function unlock() {
        _lock.unlock();
      },
      save: function save() {
        if (_lock.locked() && !_hasUnresolvedRestorableChanges) {
          var success = corePreferences(getKey("saved_history"), history.toJSON() || null);
          if (!success)
            dispatch12.call("storage_error");
        }
        return history;
      },
      clearSaved: function clearSaved() {
        context.debouncedSave.cancel();
        if (_lock.locked()) {
          _hasUnresolvedRestorableChanges = false;
          corePreferences(getKey("saved_history"), null);
          corePreferences("comment", null);
          corePreferences("hashtags", null);
          corePreferences("source", null);
        }
        return history;
      },
      savedHistoryJSON: function savedHistoryJSON() {
        return corePreferences(getKey("saved_history"));
      },
      hasRestorableChanges: function hasRestorableChanges() {
        return _hasUnresolvedRestorableChanges;
      },
      restore: function restore() {
        if (_lock.locked()) {
          _hasUnresolvedRestorableChanges = false;
          var json2 = this.savedHistoryJSON();
          if (json2)
            history.fromJSON(json2, true);
        }
      },
      _getKey: getKey
    };
    history.reset();
    return utilRebind(history, dispatch12, "on");
  }

  // modules/validations/index.js
  var validations_exports = {};
  __export(validations_exports, {
    validationAlmostJunction: function() {
      return validationAlmostJunction;
    },
    validationCloseNodes: function() {
      return validationCloseNodes;
    },
    validationCrossingWays: function() {
      return validationCrossingWays;
    },
    validationDisconnectedWay: function() {
      return validationDisconnectedWay;
    },
    validationDuplicateWaySegments: function() {
      return validationDuplicateWaySegments;
    },
    validationFormatting: function() {
      return validationFormatting;
    },
    validationHelpRequest: function() {
      return validationHelpRequest;
    },
    validationImpossibleOneway: function() {
      return validationImpossibleOneway;
    },
    validationIncompatibleSource: function() {
      return validationIncompatibleSource;
    },
    validationMaprules: function() {
      return validationMaprules;
    },
    validationMismatchedGeometry: function() {
      return validationMismatchedGeometry;
    },
    validationMissingRole: function() {
      return validationMissingRole;
    },
    validationMissingTag: function() {
      return validationMissingTag;
    },
    validationOutdatedTags: function() {
      return validationOutdatedTags;
    },
    validationPrivateData: function() {
      return validationPrivateData;
    },
    validationSuspiciousName: function() {
      return validationSuspiciousName;
    },
    validationUnsquareWay: function() {
      return validationUnsquareWay;
    },
    validationYShapedConnection: function() {
      return validationYShapedConnection;
    }
  });

  // modules/validations/almost_junction.js
  init_slicedToArray();

  // modules/core/validation/models.js
  function validationIssue(attrs) {
    this.type = attrs.type;
    this.subtype = attrs.subtype;
    this.severity = attrs.severity;
    this.message = attrs.message;
    this.reference = attrs.reference;
    this.entityIds = attrs.entityIds;
    this.loc = attrs.loc;
    this.data = attrs.data;
    this.dynamicFixes = attrs.dynamicFixes;
    this.hash = attrs.hash;
    this.id = generateID.apply(this);
    this.key = generateKey.apply(this);
    this.autoArgs = attrs.autoArgs;
    function generateID() {
      var parts = [this.type];
      if (this.hash) {
        parts.push(this.hash);
      }
      if (this.subtype) {
        parts.push(this.subtype);
      }
      if (this.entityIds) {
        var entityKeys = this.entityIds.slice().sort();
        parts.push.apply(parts, entityKeys);
      }
      return parts.join(":");
    }
    function generateKey() {
      return this.id + ":" + Date.now().toString();
    }
    this.extent = function(resolver) {
      if (this.loc) {
        return new Extent(this.loc);
      }
      if (this.entityIds && this.entityIds.length) {
        return utilTotalExtent(this.entityIds, resolver);
      }
      return null;
    };
    this.fixes = function(context) {
      var fixes = this.dynamicFixes ? this.dynamicFixes(context) : [];
      var issue = this;
      if (issue.severity === "warning") {
        fixes.push(new validationIssueFix({
          title: _t.html("issues.fix.ignore_issue.title"),
          icon: "iD-icon-close",
          onClick: function onClick() {
            context.validator().ignoreIssue(this.issue.id);
          }
        }));
      }
      fixes.forEach(function(fix) {
        fix.id = fix.title;
        fix.issue = issue;
      });
      return fixes;
    };
  }
  function validationIssueFix(attrs) {
    this.title = attrs.title;
    this.onClick = attrs.onClick;
    this.disabledReason = attrs.disabledReason;
    this.icon = attrs.icon;
    this.entityIds = attrs.entityIds || [];
    this.issue = null;
  }

  // modules/validations/almost_junction.js
  function validationAlmostJunction(context) {
    var type3 = "almost_junction";
    var EXTEND_TH_METERS = 5;
    var WELD_TH_METERS = 0.75;
    var CLOSE_NODE_TH = EXTEND_TH_METERS - WELD_TH_METERS;
    var SIG_ANGLE_TH = Math.atan(WELD_TH_METERS / EXTEND_TH_METERS);
    function isHighway(entity2) {
      return entity2.type === "way" && osmRoutableHighwayTagValues[entity2.tags.highway];
    }
    function isTaggedAsNotContinuing(node) {
      return node.tags.noexit === "yes" || node.tags.amenity === "parking_entrance" || node.tags.entrance && node.tags.entrance !== "no";
    }
    var validation = function checkAlmostJunction(entity2, graph3) {
      if (!isHighway(entity2))
        return [];
      if (entity2.isDegenerate())
        return [];
      var tree = context.history().tree();
      var extendableNodeInfos = findConnectableEndNodesByExtension(entity2);
      var issues = [];
      extendableNodeInfos.forEach(function(extendableNodeInfo) {
        issues.push(new validationIssue({
          type: type3,
          subtype: "highway-highway",
          severity: "warning",
          message: function message(context2) {
            var entity1 = context2.hasEntity(this.entityIds[0]);
            if (this.entityIds[0] === this.entityIds[2]) {
              return entity1 ? _t.html("issues.almost_junction.self.message", {
                feature: utilDisplayLabel(entity1, context2.graph())
              }) : "";
            } else {
              var entity22 = context2.hasEntity(this.entityIds[2]);
              return entity1 && entity22 ? _t.html("issues.almost_junction.message", {
                feature: utilDisplayLabel(entity1, context2.graph()),
                feature2: utilDisplayLabel(entity22, context2.graph())
              }) : "";
            }
          },
          reference: showReference,
          entityIds: [entity2.id, extendableNodeInfo.node.id, extendableNodeInfo.wid],
          loc: extendableNodeInfo.node.loc,
          hash: JSON.stringify(extendableNodeInfo.node.loc),
          data: {
            midId: extendableNodeInfo.mid.id,
            edge: extendableNodeInfo.edge,
            cross_loc: extendableNodeInfo.cross_loc
          },
          dynamicFixes: makeFixes
        }));
      });
      return issues;
      function makeFixes(context2) {
        var fixes = [new validationIssueFix({
          icon: "iD-icon-abutment",
          title: _t.html("issues.fix.connect_features.title"),
          onClick: function onClick(context3) {
            var annotation = _t("issues.fix.connect_almost_junction.annotation");
            var _this$issue$entityIds = _slicedToArray(this.issue.entityIds, 3), endNodeId = _this$issue$entityIds[1], crossWayId = _this$issue$entityIds[2];
            var midNode = context3.entity(this.issue.data.midId);
            var endNode = context3.entity(endNodeId);
            var crossWay = context3.entity(crossWayId);
            var nearEndNodes = findNearbyEndNodes(endNode, crossWay);
            if (nearEndNodes.length > 0) {
              var collinear = findSmallJoinAngle(midNode, endNode, nearEndNodes);
              if (collinear) {
                context3.perform(actionMergeNodes([collinear.id, endNode.id], collinear.loc), annotation);
                return;
              }
            }
            var targetEdge = this.issue.data.edge;
            var crossLoc = this.issue.data.cross_loc;
            var edgeNodes = [context3.entity(targetEdge[0]), context3.entity(targetEdge[1])];
            var points = edgeNodes.map(function(node2) {
              return node2.loc;
            });
            var closestPointInfo = geoSphericalClosestPoint(points, crossLoc);
            if (closestPointInfo.distance < WELD_TH_METERS) {
              context3.perform(actionMergeNodes([closestPointInfo.id, endNode.id], closestPointInfo.loc), annotation);
            } else {
              context3.perform(actionAddMidpoint({
                loc: crossLoc,
                edge: targetEdge
              }, endNode), annotation);
            }
          }
        })];
        var node = context2.hasEntity(this.entityIds[1]);
        if (node && !node.hasInterestingTags()) {
          fixes.push(new validationIssueFix({
            icon: "maki-barrier",
            title: _t.html("issues.fix.tag_as_disconnected.title"),
            onClick: function onClick(context3) {
              var nodeID = this.issue.entityIds[1];
              var tags = Object.assign({}, context3.entity(nodeID).tags);
              tags.noexit = "yes";
              context3.perform(actionChangeTags(nodeID, tags), _t("issues.fix.tag_as_disconnected.annotation"));
            }
          }));
        }
        return fixes;
      }
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.almost_junction.highway-highway.reference"));
      }
      function isExtendableCandidate(node, way) {
        var osm = services.osm;
        if (osm && !osm.isDataLoaded(node.loc)) {
          return false;
        }
        if (isTaggedAsNotContinuing(node) || graph3.parentWays(node).length !== 1) {
          return false;
        }
        var occurrences = 0;
        for (var index in way.nodes) {
          if (way.nodes[index] === node.id) {
            occurrences += 1;
            if (occurrences > 1) {
              return false;
            }
          }
        }
        return true;
      }
      function findConnectableEndNodesByExtension(way) {
        var results = [];
        if (way.isClosed())
          return results;
        var testNodes;
        var indices = [0, way.nodes.length - 1];
        indices.forEach(function(nodeIndex) {
          var nodeID = way.nodes[nodeIndex];
          var node = graph3.entity(nodeID);
          if (!isExtendableCandidate(node, way))
            return;
          var connectionInfo = canConnectByExtend(way, nodeIndex);
          if (!connectionInfo)
            return;
          testNodes = graph3.childNodes(way).slice();
          testNodes[nodeIndex] = testNodes[nodeIndex].move(connectionInfo.cross_loc);
          if (geoHasSelfIntersections(testNodes, nodeID))
            return;
          results.push(connectionInfo);
        });
        return results;
      }
      function findNearbyEndNodes(node, way) {
        return [way.nodes[0], way.nodes[way.nodes.length - 1]].map(function(d) {
          return graph3.entity(d);
        }).filter(function(d) {
          return d.id !== node.id && geoSphericalDistance(node.loc, d.loc) <= CLOSE_NODE_TH;
        });
      }
      function findSmallJoinAngle(midNode, tipNode, endNodes) {
        var joinTo;
        var minAngle = Infinity;
        endNodes.forEach(function(endNode) {
          var mid = context.projection(midNode.loc);
          var tip = context.projection(tipNode.loc);
          var end = context.projection(endNode.loc);
          var a1 = vecAngle(mid, tip) + Math.PI;
          var a2 = vecAngle(mid, end) + Math.PI;
          var diff = Math.max(a1, a2) - Math.min(a1, a2);
          if (diff < minAngle) {
            joinTo = endNode;
            minAngle = diff;
          }
        });
        if (minAngle <= SIG_ANGLE_TH)
          return joinTo;
        return null;
      }
      function hasTag(tags, key) {
        return tags[key] !== void 0 && tags[key] !== "no";
      }
      function canConnectWays(way, way2) {
        if (way.id === way2.id)
          return true;
        if ((hasTag(way.tags, "bridge") || hasTag(way2.tags, "bridge")) && !(hasTag(way.tags, "bridge") && hasTag(way2.tags, "bridge")))
          return false;
        if ((hasTag(way.tags, "tunnel") || hasTag(way2.tags, "tunnel")) && !(hasTag(way.tags, "tunnel") && hasTag(way2.tags, "tunnel")))
          return false;
        var layer1 = way.tags.layer || "0", layer2 = way2.tags.layer || "0";
        if (layer1 !== layer2)
          return false;
        var level1 = way.tags.level || "0", level2 = way2.tags.level || "0";
        if (level1 !== level2)
          return false;
        return true;
      }
      function canConnectByExtend(way, endNodeIdx) {
        var tipNid = way.nodes[endNodeIdx];
        var midNid = endNodeIdx === 0 ? way.nodes[1] : way.nodes[way.nodes.length - 2];
        var tipNode = graph3.entity(tipNid);
        var midNode = graph3.entity(midNid);
        var lon = tipNode.loc[0];
        var lat = tipNode.loc[1];
        var lon_range = geoMetersToLon(EXTEND_TH_METERS, lat) / 2;
        var lat_range = geoMetersToLat(EXTEND_TH_METERS) / 2;
        var queryExtent = new Extent([lon - lon_range, lat - lat_range], [lon + lon_range, lat + lat_range]);
        var edgeLen = geoSphericalDistance(midNode.loc, tipNode.loc);
        var t = EXTEND_TH_METERS / edgeLen + 1;
        var extTipLoc = vecInterp(midNode.loc, tipNode.loc, t);
        var segmentInfos = tree.waySegments(queryExtent, graph3);
        for (var i2 = 0; i2 < segmentInfos.length; i2++) {
          var segmentInfo = segmentInfos[i2];
          var way2 = graph3.entity(segmentInfo.wayId);
          if (!isHighway(way2))
            continue;
          if (!canConnectWays(way, way2))
            continue;
          var nAid = segmentInfo.nodes[0], nBid = segmentInfo.nodes[1];
          if (nAid === tipNid || nBid === tipNid)
            continue;
          var nA = graph3.entity(nAid), nB = graph3.entity(nBid);
          var crossLoc = geomLineIntersection([tipNode.loc, extTipLoc], [nA.loc, nB.loc]);
          if (crossLoc) {
            return {
              mid: midNode,
              node: tipNode,
              wid: way2.id,
              edge: [nA.id, nB.id],
              cross_loc: crossLoc
            };
          }
        }
        return null;
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/close_nodes.js
  function validationCloseNodes(context) {
    var type3 = "close_nodes";
    var pointThresholdMeters = 0.5;
    var validation = function validation2(entity2, graph3) {
      if (entity2.type === "node") {
        return getIssuesForNode(entity2);
      } else if (entity2.type === "way") {
        return getIssuesForWay(entity2);
      }
      return [];
      function getIssuesForNode(node) {
        var parentWays2 = graph3.parentWays(node);
        if (parentWays2.length) {
          return getIssuesForVertex(node, parentWays2);
        } else {
          return getIssuesForDetachedPoint(node);
        }
      }
      function wayTypeFor(way) {
        if (way.tags.boundary && way.tags.boundary !== "no")
          return "boundary";
        if (way.tags.indoor && way.tags.indoor !== "no")
          return "indoor";
        if (way.tags.building && way.tags.building !== "no" || way.tags["building:part"] && way.tags["building:part"] !== "no")
          return "building";
        if (osmPathHighwayTagValues[way.tags.highway])
          return "path";
        var parentRelations2 = graph3.parentRelations(way);
        for (var i2 in parentRelations2) {
          var relation = parentRelations2[i2];
          if (relation.tags.type === "boundary")
            return "boundary";
          if (relation.isMultipolygon()) {
            if (relation.tags.indoor && relation.tags.indoor !== "no")
              return "indoor";
            if (relation.tags.building && relation.tags.building !== "no" || relation.tags["building:part"] && relation.tags["building:part"] !== "no")
              return "building";
          }
        }
        return "other";
      }
      function shouldCheckWay(way) {
        if (way.nodes.length <= 2 || way.isClosed() && way.nodes.length <= 4)
          return false;
        var bbox = way.extent(graph3).bbox();
        var hypotenuseMeters = geoSphericalDistance([bbox.minX, bbox.minY], [bbox.maxX, bbox.maxY]);
        if (hypotenuseMeters < 1.5)
          return false;
        return true;
      }
      function getIssuesForWay(way) {
        if (!shouldCheckWay(way))
          return [];
        var issues = [], nodes = graph3.childNodes(way);
        for (var i2 = 0; i2 < nodes.length - 1; i2++) {
          var node1 = nodes[i2];
          var node2 = nodes[i2 + 1];
          var issue = getWayIssueIfAny(node1, node2, way);
          if (issue)
            issues.push(issue);
        }
        return issues;
      }
      function getIssuesForVertex(node, parentWays2) {
        var issues = [];
        function checkForCloseness(node1, node2, way) {
          var issue = getWayIssueIfAny(node1, node2, way);
          if (issue)
            issues.push(issue);
        }
        for (var i2 = 0; i2 < parentWays2.length; i2++) {
          var parentWay = parentWays2[i2];
          if (!shouldCheckWay(parentWay))
            continue;
          var lastIndex = parentWay.nodes.length - 1;
          for (var j = 0; j < parentWay.nodes.length; j++) {
            if (j !== 0) {
              if (parentWay.nodes[j - 1] === node.id) {
                checkForCloseness(node, graph3.entity(parentWay.nodes[j]), parentWay);
              }
            }
            if (j !== lastIndex) {
              if (parentWay.nodes[j + 1] === node.id) {
                checkForCloseness(graph3.entity(parentWay.nodes[j]), node, parentWay);
              }
            }
          }
        }
        return issues;
      }
      function thresholdMetersForWay(way) {
        if (!shouldCheckWay(way))
          return 0;
        var wayType = wayTypeFor(way);
        if (wayType === "boundary")
          return 0;
        if (wayType === "indoor")
          return 0.01;
        if (wayType === "building")
          return 0.05;
        if (wayType === "path")
          return 0.1;
        return 0.2;
      }
      function getIssuesForDetachedPoint(node) {
        var issues = [];
        var lon = node.loc[0];
        var lat = node.loc[1];
        var lon_range = geoMetersToLon(pointThresholdMeters, lat) / 2;
        var lat_range = geoMetersToLat(pointThresholdMeters) / 2;
        var queryExtent = new Extent([lon - lon_range, lat - lat_range], [lon + lon_range, lat + lat_range]);
        var intersected = context.history().tree().intersects(queryExtent, graph3);
        for (var j = 0; j < intersected.length; j++) {
          var nearby = intersected[j];
          if (nearby.id === node.id)
            continue;
          if (nearby.type !== "node" || nearby.geometry(graph3) !== "point")
            continue;
          if (nearby.loc === node.loc || geoSphericalDistance(node.loc, nearby.loc) < pointThresholdMeters) {
            var zAxisKeys = {
              layer: true,
              level: true,
              "addr:unit": true
            };
            var zAxisDifferentiates = false;
            for (var key in zAxisKeys) {
              var nodeValue = node.tags[key] || "0";
              var nearbyValue = nearby.tags[key] || "0";
              if (nodeValue !== nearbyValue) {
                zAxisDifferentiates = true;
                break;
              }
            }
            if (zAxisDifferentiates)
              continue;
            issues.push(new validationIssue({
              type: type3,
              subtype: "detached",
              severity: "warning",
              message: function message(context2) {
                var entity3 = context2.hasEntity(this.entityIds[0]), entity22 = context2.hasEntity(this.entityIds[1]);
                return entity3 && entity22 ? _t.html("issues.close_nodes.detached.message", {
                  feature: utilDisplayLabel(entity3, context2.graph()),
                  feature2: utilDisplayLabel(entity22, context2.graph())
                }) : "";
              },
              reference: showReference,
              entityIds: [node.id, nearby.id],
              dynamicFixes: function dynamicFixes() {
                return [new validationIssueFix({
                  icon: "iD-operation-disconnect",
                  title: _t.html("issues.fix.move_points_apart.title")
                }), new validationIssueFix({
                  icon: "iD-icon-layers",
                  title: _t.html("issues.fix.use_different_layers_or_levels.title")
                })];
              }
            }));
          }
        }
        return issues;
        function showReference(selection2) {
          var referenceText = _t("issues.close_nodes.detached.reference");
          selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(referenceText);
        }
      }
      function getWayIssueIfAny(node1, node2, way) {
        if (node1.id === node2.id || node1.hasInterestingTags() && node2.hasInterestingTags()) {
          return null;
        }
        if (node1.loc !== node2.loc) {
          var parentWays1 = graph3.parentWays(node1);
          var parentWays2 = new Set(graph3.parentWays(node2));
          var sharedWays = parentWays1.filter(function(parentWay) {
            return parentWays2.has(parentWay);
          });
          var thresholds = sharedWays.map(function(parentWay) {
            return thresholdMetersForWay(parentWay);
          });
          var threshold = Math.min.apply(Math, _toConsumableArray(thresholds));
          var distance = geoSphericalDistance(node1.loc, node2.loc);
          if (distance > threshold)
            return null;
        }
        return new validationIssue({
          type: type3,
          subtype: "vertices",
          severity: "warning",
          message: function message(context2) {
            var entity3 = context2.hasEntity(this.entityIds[0]);
            return entity3 ? _t.html("issues.close_nodes.message", {
              way: utilDisplayLabel(entity3, context2.graph())
            }) : "";
          },
          reference: showReference,
          entityIds: [way.id, node1.id, node2.id],
          loc: node1.loc,
          dynamicFixes: function dynamicFixes() {
            return [new validationIssueFix({
              icon: "iD-icon-plus",
              title: _t.html("issues.fix.merge_points.title"),
              onClick: function onClick(context2) {
                var entityIds = this.issue.entityIds;
                var action = actionMergeNodes([entityIds[1], entityIds[2]]);
                context2.perform(action, _t("issues.fix.merge_close_vertices.annotation"));
              }
            }), new validationIssueFix({
              icon: "iD-operation-disconnect",
              title: _t.html("issues.fix.move_points_apart.title")
            })];
          }
        });
        function showReference(selection2) {
          var referenceText = _t("issues.close_nodes.reference");
          selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(referenceText);
        }
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/crossing_ways.js
  function validationCrossingWays(context) {
    var type3 = "crossing_ways";
    function getFeatureWithFeatureTypeTagsForWay(way, graph3) {
      if (getFeatureType(way, graph3) === null) {
        var parentRels = graph3.parentRelations(way);
        for (var i2 = 0; i2 < parentRels.length; i2++) {
          var rel = parentRels[i2];
          if (getFeatureType(rel, graph3) !== null) {
            return rel;
          }
        }
      }
      return way;
    }
    function hasTag(tags, key) {
      return tags[key] !== void 0 && tags[key] !== "no";
    }
    function taggedAsIndoor(tags) {
      return hasTag(tags, "indoor") || hasTag(tags, "level") || tags.highway === "corridor";
    }
    function allowsBridge(featureType) {
      return featureType === "highway" || featureType === "railway" || featureType === "waterway";
    }
    function allowsTunnel(featureType) {
      return featureType === "highway" || featureType === "railway" || featureType === "waterway";
    }
    var ignoredBuildings = {
      demolished: true,
      dismantled: true,
      proposed: true,
      razed: true
    };
    function getFeatureType(entity2, graph3) {
      var geometry6 = entity2.geometry(graph3);
      if (geometry6 !== "line" && geometry6 !== "area")
        return null;
      var tags = entity2.tags;
      if (hasTag(tags, "building") && !ignoredBuildings[tags.building])
        return "building";
      if (hasTag(tags, "highway") && osmRoutableHighwayTagValues[tags.highway])
        return "highway";
      if (geometry6 !== "line")
        return null;
      if (hasTag(tags, "railway") && osmRailwayTrackTagValues[tags.railway])
        return "railway";
      if (hasTag(tags, "waterway") && osmFlowingWaterwayTagValues[tags.waterway])
        return "waterway";
      return null;
    }
    function isLegitCrossing(tags1, featureType1, tags2, featureType2) {
      var level1 = tags1.level || "0";
      var level2 = tags2.level || "0";
      if (taggedAsIndoor(tags1) && taggedAsIndoor(tags2) && level1 !== level2) {
        return true;
      }
      var layer1 = tags1.layer || "0";
      var layer2 = tags2.layer || "0";
      if (allowsBridge(featureType1) && allowsBridge(featureType2)) {
        if (hasTag(tags1, "bridge") && !hasTag(tags2, "bridge"))
          return true;
        if (!hasTag(tags1, "bridge") && hasTag(tags2, "bridge"))
          return true;
        if (hasTag(tags1, "bridge") && hasTag(tags2, "bridge") && layer1 !== layer2)
          return true;
      } else if (allowsBridge(featureType1) && hasTag(tags1, "bridge"))
        return true;
      else if (allowsBridge(featureType2) && hasTag(tags2, "bridge"))
        return true;
      if (allowsTunnel(featureType1) && allowsTunnel(featureType2)) {
        if (hasTag(tags1, "tunnel") && !hasTag(tags2, "tunnel"))
          return true;
        if (!hasTag(tags1, "tunnel") && hasTag(tags2, "tunnel"))
          return true;
        if (hasTag(tags1, "tunnel") && hasTag(tags2, "tunnel") && layer1 !== layer2)
          return true;
      } else if (allowsTunnel(featureType1) && hasTag(tags1, "tunnel"))
        return true;
      else if (allowsTunnel(featureType2) && hasTag(tags2, "tunnel"))
        return true;
      if (featureType1 === "waterway" && featureType2 === "highway" && tags2.man_made === "pier")
        return true;
      if (featureType2 === "waterway" && featureType1 === "highway" && tags1.man_made === "pier")
        return true;
      if (featureType1 === "building" || featureType2 === "building") {
        if (layer1 !== layer2)
          return true;
      }
      return false;
    }
    var highwaysDisallowingFords = {
      motorway: true,
      motorway_link: true,
      trunk: true,
      trunk_link: true,
      primary: true,
      primary_link: true,
      secondary: true,
      secondary_link: true
    };
    var nonCrossingHighways = {
      track: true
    };
    function tagsForConnectionNodeIfAllowed(entity1, entity2, graph3) {
      var featureType1 = getFeatureType(entity1, graph3);
      var featureType2 = getFeatureType(entity2, graph3);
      var geometry1 = entity1.geometry(graph3);
      var geometry22 = entity2.geometry(graph3);
      var bothLines = geometry1 === "line" && geometry22 === "line";
      if (featureType1 === featureType2) {
        if (featureType1 === "highway") {
          var entity1IsPath = osmPathHighwayTagValues[entity1.tags.highway];
          var entity2IsPath = osmPathHighwayTagValues[entity2.tags.highway];
          if ((entity1IsPath || entity2IsPath) && entity1IsPath !== entity2IsPath) {
            var roadFeature = entity1IsPath ? entity2 : entity1;
            if (nonCrossingHighways[roadFeature.tags.highway]) {
              return {};
            }
            var pathFeature = entity1IsPath ? entity1 : entity2;
            if (["marked", "unmarked"].indexOf(pathFeature.tags.crossing) !== -1) {
              return bothLines ? {
                highway: "crossing",
                crossing: pathFeature.tags.crossing
              } : {};
            }
            return bothLines ? {
              highway: "crossing"
            } : {};
          }
          return {};
        }
        if (featureType1 === "waterway")
          return {};
        if (featureType1 === "railway")
          return {};
      } else {
        var featureTypes = [featureType1, featureType2];
        if (featureTypes.indexOf("highway") !== -1) {
          if (featureTypes.indexOf("railway") !== -1) {
            if (!bothLines)
              return {};
            var isTram = entity1.tags.railway === "tram" || entity2.tags.railway === "tram";
            if (osmPathHighwayTagValues[entity1.tags.highway] || osmPathHighwayTagValues[entity2.tags.highway]) {
              if (isTram)
                return {
                  railway: "tram_crossing"
                };
              return {
                railway: "crossing"
              };
            } else {
              if (isTram)
                return {
                  railway: "tram_level_crossing"
                };
              return {
                railway: "level_crossing"
              };
            }
          }
          if (featureTypes.indexOf("waterway") !== -1) {
            if (hasTag(entity1.tags, "tunnel") && hasTag(entity2.tags, "tunnel"))
              return null;
            if (hasTag(entity1.tags, "bridge") && hasTag(entity2.tags, "bridge"))
              return null;
            if (highwaysDisallowingFords[entity1.tags.highway] || highwaysDisallowingFords[entity2.tags.highway]) {
              return null;
            }
            return bothLines ? {
              ford: "yes"
            } : {};
          }
        }
      }
      return null;
    }
    function findCrossingsByWay(way1, graph3, tree) {
      var edgeCrossInfos = [];
      if (way1.type !== "way")
        return edgeCrossInfos;
      var taggedFeature1 = getFeatureWithFeatureTypeTagsForWay(way1, graph3);
      var way1FeatureType = getFeatureType(taggedFeature1, graph3);
      if (way1FeatureType === null)
        return edgeCrossInfos;
      var checkedSingleCrossingWays = {};
      var i2, j;
      var extent6;
      var n1, n2, nA, nB, nAId, nBId;
      var segment1, segment2;
      var oneOnly;
      var segmentInfos, segment2Info, way2, taggedFeature2, way2FeatureType;
      var way1Nodes = graph3.childNodes(way1);
      var comparedWays = {};
      for (i2 = 0; i2 < way1Nodes.length - 1; i2++) {
        n1 = way1Nodes[i2];
        n2 = way1Nodes[i2 + 1];
        extent6 = new Extent([Math.min(n1.loc[0], n2.loc[0]), Math.min(n1.loc[1], n2.loc[1])], [Math.max(n1.loc[0], n2.loc[0]), Math.max(n1.loc[1], n2.loc[1])]);
        segmentInfos = tree.waySegments(extent6, graph3);
        for (j = 0; j < segmentInfos.length; j++) {
          segment2Info = segmentInfos[j];
          if (segment2Info.wayId === way1.id)
            continue;
          if (checkedSingleCrossingWays[segment2Info.wayId])
            continue;
          comparedWays[segment2Info.wayId] = true;
          way2 = graph3.hasEntity(segment2Info.wayId);
          if (!way2)
            continue;
          taggedFeature2 = getFeatureWithFeatureTypeTagsForWay(way2, graph3);
          way2FeatureType = getFeatureType(taggedFeature2, graph3);
          if (way2FeatureType === null || isLegitCrossing(taggedFeature1.tags, way1FeatureType, taggedFeature2.tags, way2FeatureType)) {
            continue;
          }
          oneOnly = way1FeatureType === "building" || way2FeatureType === "building";
          nAId = segment2Info.nodes[0];
          nBId = segment2Info.nodes[1];
          if (nAId === n1.id || nAId === n2.id || nBId === n1.id || nBId === n2.id) {
            continue;
          }
          nA = graph3.hasEntity(nAId);
          if (!nA)
            continue;
          nB = graph3.hasEntity(nBId);
          if (!nB)
            continue;
          segment1 = [n1.loc, n2.loc];
          segment2 = [nA.loc, nB.loc];
          var point5 = geomLineIntersection(segment1, segment2);
          if (point5) {
            edgeCrossInfos.push({
              wayInfos: [{
                way: way1,
                featureType: way1FeatureType,
                edge: [n1.id, n2.id]
              }, {
                way: way2,
                featureType: way2FeatureType,
                edge: [nA.id, nB.id]
              }],
              crossPoint: point5
            });
            if (oneOnly) {
              checkedSingleCrossingWays[way2.id] = true;
              break;
            }
          }
        }
      }
      return edgeCrossInfos;
    }
    function waysToCheck(entity2, graph3) {
      var featureType = getFeatureType(entity2, graph3);
      if (!featureType)
        return [];
      if (entity2.type === "way") {
        return [entity2];
      } else if (entity2.type === "relation") {
        return entity2.members.reduce(function(array2, member) {
          if (member.type === "way" && (!member.role || member.role === "outer" || member.role === "inner")) {
            var entity3 = graph3.hasEntity(member.id);
            if (entity3 && array2.indexOf(entity3) === -1) {
              array2.push(entity3);
            }
          }
          return array2;
        }, []);
      }
      return [];
    }
    var validation = function checkCrossingWays(entity2, graph3) {
      var tree = context.history().tree();
      var ways = waysToCheck(entity2, graph3);
      var issues = [];
      var wayIndex, crossingIndex, crossings;
      for (wayIndex in ways) {
        crossings = findCrossingsByWay(ways[wayIndex], graph3, tree);
        for (crossingIndex in crossings) {
          issues.push(createIssue(crossings[crossingIndex], graph3));
        }
      }
      return issues;
    };
    function createIssue(crossing, graph3) {
      crossing.wayInfos.sort(function(way1Info, way2Info) {
        var type1 = way1Info.featureType;
        var type22 = way2Info.featureType;
        if (type1 === type22) {
          return utilDisplayLabel(way1Info.way, graph3) > utilDisplayLabel(way2Info.way, graph3);
        } else if (type1 === "waterway") {
          return true;
        } else if (type22 === "waterway") {
          return false;
        }
        return type1 < type22;
      });
      var entities = crossing.wayInfos.map(function(wayInfo) {
        return getFeatureWithFeatureTypeTagsForWay(wayInfo.way, graph3);
      });
      var edges = [crossing.wayInfos[0].edge, crossing.wayInfos[1].edge];
      var featureTypes = [crossing.wayInfos[0].featureType, crossing.wayInfos[1].featureType];
      var connectionTags = tagsForConnectionNodeIfAllowed(entities[0], entities[1], graph3);
      var featureType1 = crossing.wayInfos[0].featureType;
      var featureType2 = crossing.wayInfos[1].featureType;
      var isCrossingIndoors = taggedAsIndoor(entities[0].tags) && taggedAsIndoor(entities[1].tags);
      var isCrossingTunnels = allowsTunnel(featureType1) && hasTag(entities[0].tags, "tunnel") && allowsTunnel(featureType2) && hasTag(entities[1].tags, "tunnel");
      var isCrossingBridges = allowsBridge(featureType1) && hasTag(entities[0].tags, "bridge") && allowsBridge(featureType2) && hasTag(entities[1].tags, "bridge");
      var subtype = [featureType1, featureType2].sort().join("-");
      var crossingTypeID = subtype;
      if (isCrossingIndoors) {
        crossingTypeID = "indoor-indoor";
      } else if (isCrossingTunnels) {
        crossingTypeID = "tunnel-tunnel";
      } else if (isCrossingBridges) {
        crossingTypeID = "bridge-bridge";
      }
      if (connectionTags && (isCrossingIndoors || isCrossingTunnels || isCrossingBridges)) {
        crossingTypeID += "_connectable";
      }
      var uniqueID = "" + crossing.crossPoint[0].toFixed(4) + "," + crossing.crossPoint[1].toFixed(4);
      return new validationIssue({
        type: type3,
        subtype: subtype,
        severity: "warning",
        message: function message(context2) {
          var graph4 = context2.graph();
          var entity1 = graph4.hasEntity(this.entityIds[0]), entity2 = graph4.hasEntity(this.entityIds[1]);
          return entity1 && entity2 ? _t.html("issues.crossing_ways.message", {
            feature: utilDisplayLabel(entity1, graph4),
            feature2: utilDisplayLabel(entity2, graph4)
          }) : "";
        },
        reference: showReference,
        entityIds: entities.map(function(entity2) {
          return entity2.id;
        }),
        data: {
          edges: edges,
          featureTypes: featureTypes,
          connectionTags: connectionTags
        },
        hash: uniqueID,
        loc: crossing.crossPoint,
        autoArgs: connectionTags && !connectionTags.ford && getConnectWaysAction(crossing.crossPoint, edges, connectionTags),
        dynamicFixes: function dynamicFixes(context2) {
          var mode = context2.mode();
          if (!mode || mode.id !== "select" || mode.selectedIDs().length !== 1)
            return [];
          var selectedIndex = this.entityIds[0] === mode.selectedIDs()[0] ? 0 : 1;
          var selectedFeatureType = this.data.featureTypes[selectedIndex];
          var otherFeatureType = this.data.featureTypes[selectedIndex === 0 ? 1 : 0];
          var fixes = [];
          if (connectionTags) {
            fixes.push(makeConnectWaysFix(this.data.connectionTags));
          }
          if (isCrossingIndoors) {
            fixes.push(new validationIssueFix({
              icon: "iD-icon-layers",
              title: _t.html("issues.fix.use_different_levels.title")
            }));
          } else if (isCrossingTunnels || isCrossingBridges || featureType1 === "building" || featureType2 === "building") {
            fixes.push(makeChangeLayerFix("higher"));
            fixes.push(makeChangeLayerFix("lower"));
          } else if (context2.graph().geometry(this.entityIds[0]) === "line" && context2.graph().geometry(this.entityIds[1]) === "line") {
            if (allowsBridge(selectedFeatureType) && selectedFeatureType !== "waterway") {
              fixes.push(makeAddBridgeOrTunnelFix("add_a_bridge", "temaki-bridge", "bridge"));
            }
            var skipTunnelFix = otherFeatureType === "waterway" && selectedFeatureType !== "waterway";
            if (allowsTunnel(selectedFeatureType) && !skipTunnelFix) {
              fixes.push(makeAddBridgeOrTunnelFix("add_a_tunnel", "temaki-tunnel", "tunnel"));
            }
          }
          fixes.push(new validationIssueFix({
            icon: "iD-operation-move",
            title: _t.html("issues.fix.reposition_features.title")
          }));
          return fixes;
        }
      });
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.crossing_ways." + crossingTypeID + ".reference"));
      }
    }
    function makeAddBridgeOrTunnelFix(fixTitleID, iconName, bridgeOrTunnel) {
      return new validationIssueFix({
        icon: iconName,
        title: _t.html("issues.fix." + fixTitleID + ".title"),
        onClick: function onClick(context2) {
          var mode = context2.mode();
          if (!mode || mode.id !== "select")
            return;
          var selectedIDs = mode.selectedIDs();
          if (selectedIDs.length !== 1)
            return;
          var selectedWayID = selectedIDs[0];
          if (!context2.hasEntity(selectedWayID))
            return;
          var resultWayIDs = [selectedWayID];
          var edge, crossedEdge, crossedWayID;
          if (this.issue.entityIds[0] === selectedWayID) {
            edge = this.issue.data.edges[0];
            crossedEdge = this.issue.data.edges[1];
            crossedWayID = this.issue.entityIds[1];
          } else {
            edge = this.issue.data.edges[1];
            crossedEdge = this.issue.data.edges[0];
            crossedWayID = this.issue.entityIds[0];
          }
          var crossingLoc = this.issue.loc;
          var projection2 = context2.projection;
          var action = function actionAddStructure(graph3) {
            var edgeNodes = [graph3.entity(edge[0]), graph3.entity(edge[1])];
            var crossedWay = graph3.hasEntity(crossedWayID);
            var structLengthMeters = crossedWay && crossedWay.tags.width && parseFloat(crossedWay.tags.width);
            if (!structLengthMeters) {
              structLengthMeters = crossedWay && crossedWay.impliedLineWidthMeters();
            }
            if (structLengthMeters) {
              if (getFeatureType(crossedWay, graph3) === "railway") {
                structLengthMeters *= 2;
              }
            } else {
              structLengthMeters = 8;
            }
            var a1 = vecAngle(projection2(edgeNodes[0].loc), projection2(edgeNodes[1].loc)) + Math.PI;
            var a2 = vecAngle(projection2(graph3.entity(crossedEdge[0]).loc), projection2(graph3.entity(crossedEdge[1]).loc)) + Math.PI;
            var crossingAngle = Math.max(a1, a2) - Math.min(a1, a2);
            if (crossingAngle > Math.PI)
              crossingAngle -= Math.PI;
            structLengthMeters = structLengthMeters / 2 / Math.sin(crossingAngle) * 2;
            structLengthMeters += 4;
            structLengthMeters = Math.min(Math.max(structLengthMeters, 4), 50);
            function geomToProj(geoPoint) {
              return [geoLonToMeters(geoPoint[0], geoPoint[1]), geoLatToMeters(geoPoint[1])];
            }
            function projToGeom(projPoint) {
              var lat = geoMetersToLat(projPoint[1]);
              return [geoMetersToLon(projPoint[0], lat), lat];
            }
            var projEdgeNode1 = geomToProj(edgeNodes[0].loc);
            var projEdgeNode2 = geomToProj(edgeNodes[1].loc);
            var projectedAngle = vecAngle(projEdgeNode1, projEdgeNode2);
            var projectedCrossingLoc = geomToProj(crossingLoc);
            var linearToSphericalMetersRatio = vecLength(projEdgeNode1, projEdgeNode2) / geoSphericalDistance(edgeNodes[0].loc, edgeNodes[1].loc);
            function locSphericalDistanceFromCrossingLoc(angle2, distanceMeters) {
              var lengthSphericalMeters = distanceMeters * linearToSphericalMetersRatio;
              return projToGeom([projectedCrossingLoc[0] + Math.cos(angle2) * lengthSphericalMeters, projectedCrossingLoc[1] + Math.sin(angle2) * lengthSphericalMeters]);
            }
            var endpointLocGetter1 = function endpointLocGetter12(lengthMeters) {
              return locSphericalDistanceFromCrossingLoc(projectedAngle, lengthMeters);
            };
            var endpointLocGetter2 = function endpointLocGetter22(lengthMeters) {
              return locSphericalDistanceFromCrossingLoc(projectedAngle + Math.PI, lengthMeters);
            };
            var minEdgeLengthMeters = 0.55;
            function determineEndpoint(edge2, endNode, locGetter) {
              var newNode;
              var idealLengthMeters = structLengthMeters / 2;
              var crossingToEdgeEndDistance = geoSphericalDistance(crossingLoc, endNode.loc);
              if (crossingToEdgeEndDistance - idealLengthMeters > minEdgeLengthMeters) {
                var idealNodeLoc = locGetter(idealLengthMeters);
                newNode = osmNode();
                graph3 = actionAddMidpoint({
                  loc: idealNodeLoc,
                  edge: edge2
                }, newNode)(graph3);
              } else {
                var edgeCount = 0;
                endNode.parentIntersectionWays(graph3).forEach(function(way) {
                  way.nodes.forEach(function(nodeID) {
                    if (nodeID === endNode.id) {
                      if (endNode.id === way.first() && endNode.id !== way.last() || endNode.id === way.last() && endNode.id !== way.first()) {
                        edgeCount += 1;
                      } else {
                        edgeCount += 2;
                      }
                    }
                  });
                });
                if (edgeCount >= 3) {
                  var insetLength = crossingToEdgeEndDistance - minEdgeLengthMeters;
                  if (insetLength > minEdgeLengthMeters) {
                    var insetNodeLoc = locGetter(insetLength);
                    newNode = osmNode();
                    graph3 = actionAddMidpoint({
                      loc: insetNodeLoc,
                      edge: edge2
                    }, newNode)(graph3);
                  }
                }
              }
              if (!newNode)
                newNode = endNode;
              var splitAction = actionSplit([newNode.id]).limitWays(resultWayIDs);
              graph3 = splitAction(graph3);
              if (splitAction.getCreatedWayIDs().length) {
                resultWayIDs.push(splitAction.getCreatedWayIDs()[0]);
              }
              return newNode;
            }
            var structEndNode1 = determineEndpoint(edge, edgeNodes[1], endpointLocGetter1);
            var structEndNode2 = determineEndpoint([edgeNodes[0].id, structEndNode1.id], edgeNodes[0], endpointLocGetter2);
            var structureWay = resultWayIDs.map(function(id2) {
              return graph3.entity(id2);
            }).find(function(way) {
              return way.nodes.indexOf(structEndNode1.id) !== -1 && way.nodes.indexOf(structEndNode2.id) !== -1;
            });
            var tags = Object.assign({}, structureWay.tags);
            if (bridgeOrTunnel === "bridge") {
              tags.bridge = "yes";
              tags.layer = "1";
            } else {
              var tunnelValue = "yes";
              if (getFeatureType(structureWay, graph3) === "waterway") {
                tunnelValue = "culvert";
              }
              tags.tunnel = tunnelValue;
              tags.layer = "-1";
            }
            graph3 = actionChangeTags(structureWay.id, tags)(graph3);
            return graph3;
          };
          context2.perform(action, _t("issues.fix." + fixTitleID + ".annotation"));
          context2.enter(modeSelect(context2, resultWayIDs));
        }
      });
    }
    function getConnectWaysAction(loc, edges, connectionTags) {
      var fn = function actionConnectCrossingWays(graph3) {
        var didSomething = false;
        var newNode = osmNode({
          loc: loc,
          tags: connectionTags
        });
        var newGraph = graph3.replace(newNode);
        var nodesToMerge = [newNode.id];
        var mergeThresholdInMeters = 0.75;
        edges.forEach(function(edge) {
          var n0 = newGraph.hasEntity(edge[0]);
          var n1 = newGraph.hasEntity(edge[1]);
          if (!n0 || !n1)
            return;
          var canReuse = false;
          var edgeNodes = [n0, n1];
          var closest = geoSphericalClosestPoint([n0.loc, n1.loc], loc);
          if (closest && closest.distance < mergeThresholdInMeters) {
            var closeNode = edgeNodes[closest.index];
            if (!closeNode.hasInterestingTags() || closeNode.isCrossing()) {
              canReuse = true;
              nodesToMerge.push(closeNode.id);
            }
          }
          if (!canReuse) {
            newGraph = actionAddMidpoint({
              loc: loc,
              edge: edge
            }, newNode)(newGraph);
            didSomething = true;
          }
        });
        if (nodesToMerge.length > 1) {
          newGraph = actionMergeNodes(nodesToMerge, loc)(newGraph);
          didSomething = true;
        }
        return didSomething ? newGraph : graph3;
      };
      return [fn, _t("issues.fix.connect_crossing_features.annotation")];
    }
    function makeConnectWaysFix(connectionTags) {
      var fixTitleID = "connect_features";
      if (connectionTags.ford) {
        fixTitleID = "connect_using_ford";
      }
      return new validationIssueFix({
        icon: "iD-icon-crossing",
        title: _t.html("issues.fix." + fixTitleID + ".title"),
        onClick: function onClick(context2) {
          var loc = this.issue.loc;
          var edges = this.issue.data.edges;
          var connectionTags2 = this.issue.data.connectionTags;
          var action = getConnectWaysAction(loc, edges, connectionTags2);
          context2.perform(action[0], action[1]);
        }
      });
    }
    function makeChangeLayerFix(higherOrLower) {
      return new validationIssueFix({
        icon: "iD-icon-" + (higherOrLower === "higher" ? "up" : "down"),
        title: _t.html("issues.fix.tag_this_as_" + higherOrLower + ".title"),
        onClick: function onClick(context2) {
          var mode = context2.mode();
          if (!mode || mode.id !== "select")
            return;
          var selectedIDs = mode.selectedIDs();
          if (selectedIDs.length !== 1)
            return;
          var selectedID = selectedIDs[0];
          if (!this.issue.entityIds.some(function(entityId) {
            return entityId === selectedID;
          }))
            return;
          var entity2 = context2.hasEntity(selectedID);
          if (!entity2)
            return;
          var tags = Object.assign({}, entity2.tags);
          var layer2 = tags.layer && Number(tags.layer);
          if (layer2 && !isNaN(layer2)) {
            if (higherOrLower === "higher") {
              layer2 += 1;
            } else {
              layer2 -= 1;
            }
          } else {
            if (higherOrLower === "higher") {
              layer2 = 1;
            } else {
              layer2 = -1;
            }
          }
          tags.layer = layer2.toString();
          context2.perform(actionChangeTags(entity2.id, tags), _t("operations.change_tags.annotation"));
        }
      });
    }
    validation.type = type3;
    return validation;
  }

  // modules/behavior/draw_way.js
  init_slicedToArray();
  function behaviorDrawWay(context, wayID, mode, startGraph) {
    var keybinding = utilKeybinding("drawWay");
    var dispatch12 = dispatch_default("rejectedSelfIntersection");
    var behavior = behaviorDraw(context);
    var _nodeIndex;
    var _origWay;
    var _wayGeometry;
    var _headNodeID;
    var _annotation;
    var _pointerHasMoved = false;
    var _drawNode;
    var _didResolveTempEdit = false;
    function createDrawNode(loc) {
      _drawNode = osmNode({
        loc: loc
      });
      context.pauseChangeDispatch();
      context.replace(function actionAddDrawNode(graph3) {
        var way = graph3.entity(wayID);
        return graph3.replace(_drawNode).replace(way.addNode(_drawNode.id, _nodeIndex));
      }, _annotation);
      context.resumeChangeDispatch();
      setActiveElements();
    }
    function removeDrawNode() {
      context.pauseChangeDispatch();
      context.replace(function actionDeleteDrawNode(graph3) {
        var way = graph3.entity(wayID);
        return graph3.replace(way.removeNode(_drawNode.id)).remove(_drawNode);
      }, _annotation);
      _drawNode = void 0;
      context.resumeChangeDispatch();
    }
    function keydown(d3_event) {
      if (d3_event.keyCode === utilKeybinding.modifierCodes.alt) {
        if (context.surface().classed("nope")) {
          context.surface().classed("nope-suppressed", true);
        }
        context.surface().classed("nope", false).classed("nope-disabled", true);
      }
    }
    function keyup(d3_event) {
      if (d3_event.keyCode === utilKeybinding.modifierCodes.alt) {
        if (context.surface().classed("nope-suppressed")) {
          context.surface().classed("nope", true);
        }
        context.surface().classed("nope-suppressed", false).classed("nope-disabled", false);
      }
    }
    function allowsVertex(d) {
      return d.geometry(context.graph()) === "vertex" || _mainPresetIndex.allowsVertex(d, context.graph());
    }
    function move3(d3_event, datum2) {
      var loc = context.map().mouseCoordinates();
      if (!_drawNode)
        createDrawNode(loc);
      context.surface().classed("nope-disabled", d3_event.altKey);
      var targetLoc = datum2 && datum2.properties && datum2.properties.entity && allowsVertex(datum2.properties.entity) && datum2.properties.entity.loc;
      var targetNodes = datum2 && datum2.properties && datum2.properties.nodes;
      if (targetLoc) {
        loc = targetLoc;
      } else if (targetNodes) {
        var choice = geoChooseEdge(targetNodes, context.map().mouse(), context.projection, _drawNode.id);
        if (choice) {
          loc = choice.loc;
        }
      }
      context.replace(actionMoveNode(_drawNode.id, loc), _annotation);
      _drawNode = context.entity(_drawNode.id);
      checkGeometry(true);
    }
    function checkGeometry(includeDrawNode) {
      var nopeDisabled = context.surface().classed("nope-disabled");
      var isInvalid = isInvalidGeometry(includeDrawNode);
      if (nopeDisabled) {
        context.surface().classed("nope", false).classed("nope-suppressed", isInvalid);
      } else {
        context.surface().classed("nope", isInvalid).classed("nope-suppressed", false);
      }
    }
    function isInvalidGeometry(includeDrawNode) {
      var testNode = _drawNode;
      var parentWay = context.graph().entity(wayID);
      var nodes = context.graph().childNodes(parentWay).slice();
      if (includeDrawNode) {
        if (parentWay.isClosed()) {
          nodes.pop();
        }
      } else {
        if (parentWay.isClosed()) {
          if (nodes.length < 3)
            return false;
          if (_drawNode)
            nodes.splice(-2, 1);
          testNode = nodes[nodes.length - 2];
        } else {
          return false;
        }
      }
      return testNode && geoHasSelfIntersections(nodes, testNode.id);
    }
    function undone() {
      _didResolveTempEdit = true;
      context.pauseChangeDispatch();
      var nextMode;
      if (context.graph() === startGraph) {
        nextMode = modeSelect(context, [wayID]);
      } else {
        context.pop(1);
        nextMode = mode;
      }
      context.perform(actionNoop());
      context.pop(1);
      context.resumeChangeDispatch();
      context.enter(nextMode);
    }
    function setActiveElements() {
      if (!_drawNode)
        return;
      context.surface().selectAll("." + _drawNode.id).classed("active", true);
    }
    function resetToStartGraph() {
      while (context.graph() !== startGraph) {
        context.pop();
      }
    }
    var drawWay = function drawWay2(surface) {
      _drawNode = void 0;
      _didResolveTempEdit = false;
      _origWay = context.entity(wayID);
      if (typeof _nodeIndex === "number") {
        _headNodeID = _origWay.nodes[_nodeIndex];
      } else if (_origWay.isClosed()) {
        _headNodeID = _origWay.nodes[_origWay.nodes.length - 2];
      } else {
        _headNodeID = _origWay.nodes[_origWay.nodes.length - 1];
      }
      _wayGeometry = _origWay.geometry(context.graph());
      _annotation = _t((_origWay.nodes.length === (_origWay.isClosed() ? 2 : 1) ? "operations.start.annotation." : "operations.continue.annotation.") + _wayGeometry);
      _pointerHasMoved = false;
      context.pauseChangeDispatch();
      context.perform(actionNoop(), _annotation);
      context.resumeChangeDispatch();
      behavior.hover().initialNodeID(_headNodeID);
      behavior.on("move", function() {
        _pointerHasMoved = true;
        move3.apply(this, arguments);
      }).on("down", function() {
        move3.apply(this, arguments);
      }).on("downcancel", function() {
        if (_drawNode)
          removeDrawNode();
      }).on("click", drawWay2.add).on("clickWay", drawWay2.addWay).on("clickNode", drawWay2.addNode).on("undo", context.undo).on("cancel", drawWay2.cancel).on("finish", drawWay2.finish);
      select_default2(window).on("keydown.drawWay", keydown).on("keyup.drawWay", keyup);
      context.map().dblclickZoomEnable(false).on("drawn.draw", setActiveElements);
      setActiveElements();
      surface.call(behavior);
      context.history().on("undone.draw", undone);
    };
    drawWay.off = function(surface) {
      if (!_didResolveTempEdit) {
        context.pauseChangeDispatch();
        resetToStartGraph();
        context.resumeChangeDispatch();
      }
      _drawNode = void 0;
      _nodeIndex = void 0;
      context.map().on("drawn.draw", null);
      surface.call(behavior.off).selectAll(".active").classed("active", false);
      surface.classed("nope", false).classed("nope-suppressed", false).classed("nope-disabled", false);
      select_default2(window).on("keydown.drawWay", null).on("keyup.drawWay", null);
      context.history().on("undone.draw", null);
    };
    function attemptAdd(d, loc, doAdd) {
      if (_drawNode) {
        context.replace(actionMoveNode(_drawNode.id, loc), _annotation);
        _drawNode = context.entity(_drawNode.id);
      } else {
        createDrawNode(loc);
      }
      checkGeometry(true);
      if (d && d.properties && d.properties.nope || context.surface().classed("nope")) {
        if (!_pointerHasMoved) {
          removeDrawNode();
        }
        dispatch12.call("rejectedSelfIntersection", this);
        return;
      }
      context.pauseChangeDispatch();
      doAdd();
      _didResolveTempEdit = true;
      context.resumeChangeDispatch();
      context.enter(mode);
    }
    drawWay.add = function(loc, d) {
      attemptAdd(d, loc, function() {
      });
    };
    drawWay.addWay = function(loc, edge, d) {
      attemptAdd(d, loc, function() {
        context.replace(actionAddMidpoint({
          loc: loc,
          edge: edge
        }, _drawNode), _annotation);
      });
    };
    drawWay.addNode = function(node, d) {
      if (node.id === _headNodeID || _origWay.isClosed() && node.id === _origWay.first()) {
        drawWay.finish();
        return;
      }
      attemptAdd(d, node.loc, function() {
        context.replace(function actionReplaceDrawNode(graph3) {
          graph3 = graph3.replace(graph3.entity(wayID).removeNode(_drawNode.id)).remove(_drawNode);
          return graph3.replace(graph3.entity(wayID).addNode(node.id, _nodeIndex));
        }, _annotation);
      });
    };
    function getFeatureType(ways) {
      if (ways.every(function(way) {
        return way.isClosed();
      }))
        return "area";
      if (ways.every(function(way) {
        return !way.isClosed();
      }))
        return "line";
      return "generic";
    }
    function followMode() {
      if (_didResolveTempEdit)
        return;
      try {
        var isDrawingArea = _origWay.nodes[0] === _origWay.nodes.slice(-1)[0];
        var _origWay$nodes$slice = _origWay.nodes.slice(isDrawingArea ? -3 : -2), _origWay$nodes$slice2 = _slicedToArray(_origWay$nodes$slice, 2), secondLastNodeId = _origWay$nodes$slice2[0], lastNodeId = _origWay$nodes$slice2[1];
        var historyGraph = context.history().graph();
        if (!lastNodeId || !secondLastNodeId || !historyGraph.hasEntity(lastNodeId) || !historyGraph.hasEntity(secondLastNodeId)) {
          context.ui().flash.duration(4e3).iconName("#iD-icon-no").label(_t("operations.follow.error.needs_more_initial_nodes"))();
          return;
        }
        var lastNodesParents = historyGraph.parentWays(historyGraph.entity(lastNodeId)).filter(function(w) {
          return w.id !== wayID;
        });
        var secondLastNodesParents = historyGraph.parentWays(historyGraph.entity(secondLastNodeId)).filter(function(w) {
          return w.id !== wayID;
        });
        var featureType = getFeatureType(lastNodesParents);
        if (lastNodesParents.length !== 1 || secondLastNodesParents.length === 0) {
          context.ui().flash.duration(4e3).iconName("#iD-icon-no").label(_t("operations.follow.error.intersection_of_multiple_ways.".concat(featureType)))();
          return;
        }
        if (!secondLastNodesParents.some(function(n2) {
          return n2.id === lastNodesParents[0].id;
        })) {
          context.ui().flash.duration(4e3).iconName("#iD-icon-no").label(_t("operations.follow.error.intersection_of_different_ways.".concat(featureType)))();
          return;
        }
        var way = lastNodesParents[0];
        var indexOfLast = way.nodes.indexOf(lastNodeId);
        var indexOfSecondLast = way.nodes.indexOf(secondLastNodeId);
        var isDescendingPastZero = indexOfLast === way.nodes.length - 2 && indexOfSecondLast === 0;
        var nextNodeIndex = indexOfLast + (indexOfLast > indexOfSecondLast && !isDescendingPastZero ? 1 : -1);
        if (nextNodeIndex === -1)
          nextNodeIndex = indexOfSecondLast === 1 ? way.nodes.length - 2 : 1;
        var nextNode = historyGraph.entity(way.nodes[nextNodeIndex]);
        drawWay.addNode(nextNode, {
          geometry: {
            type: "Point",
            coordinates: nextNode.loc
          },
          id: nextNode.id,
          properties: {
            target: true,
            entity: nextNode
          }
        });
      } catch (ex) {
        context.ui().flash.duration(4e3).iconName("#iD-icon-no").label(_t("operations.follow.error.unknown"))();
      }
    }
    keybinding.on(_t("operations.follow.key"), followMode);
    select_default2(document).call(keybinding);
    drawWay.finish = function() {
      checkGeometry(false);
      if (context.surface().classed("nope")) {
        dispatch12.call("rejectedSelfIntersection", this);
        return;
      }
      context.pauseChangeDispatch();
      context.pop(1);
      _didResolveTempEdit = true;
      context.resumeChangeDispatch();
      var way = context.hasEntity(wayID);
      if (!way || way.isDegenerate()) {
        drawWay.cancel();
        return;
      }
      window.setTimeout(function() {
        context.map().dblclickZoomEnable(true);
      }, 1e3);
      var isNewFeature = !mode.isContinuing;
      context.enter(modeSelect(context, [wayID]).newFeature(isNewFeature));
    };
    drawWay.cancel = function() {
      context.pauseChangeDispatch();
      resetToStartGraph();
      context.resumeChangeDispatch();
      window.setTimeout(function() {
        context.map().dblclickZoomEnable(true);
      }, 1e3);
      context.surface().classed("nope", false).classed("nope-disabled", false).classed("nope-suppressed", false);
      context.enter(modeBrowse(context));
    };
    drawWay.nodeIndex = function(val) {
      if (!arguments.length)
        return _nodeIndex;
      _nodeIndex = val;
      return drawWay;
    };
    drawWay.activeID = function() {
      if (!arguments.length)
        return _drawNode && _drawNode.id;
      return drawWay;
    };
    return utilRebind(drawWay, dispatch12, "on");
  }

  // modules/modes/draw_line.js
  function modeDrawLine(context, wayID, startGraph, button, affix2, continuing) {
    var mode = {
      button: button,
      id: "draw-line"
    };
    var behavior = behaviorDrawWay(context, wayID, mode, startGraph).on("rejectedSelfIntersection.modeDrawLine", function() {
      context.ui().flash.iconName("#iD-icon-no").label(_t("self_intersection.error.lines"))();
    });
    mode.wayID = wayID;
    mode.isContinuing = continuing;
    mode.enter = function() {
      behavior.nodeIndex(affix2 === "prefix" ? 0 : void 0);
      context.install(behavior);
    };
    mode.exit = function() {
      context.uninstall(behavior);
    };
    mode.selectedIDs = function() {
      return [wayID];
    };
    mode.activeID = function() {
      return behavior && behavior.activeID() || [];
    };
    return mode;
  }

  // modules/validations/disconnected_way.js
  function validationDisconnectedWay() {
    var type3 = "disconnected_way";
    function isTaggedAsHighway(entity2) {
      return osmRoutableHighwayTagValues[entity2.tags.highway];
    }
    var validation = function checkDisconnectedWay(entity2, graph3) {
      var routingIslandWays = routingIslandForEntity(entity2);
      if (!routingIslandWays)
        return [];
      return [new validationIssue({
        type: type3,
        subtype: "highway",
        severity: "warning",
        message: function message(context) {
          var entity3 = this.entityIds.length && context.hasEntity(this.entityIds[0]);
          var label = entity3 && utilDisplayLabel(entity3, context.graph());
          return _t.html("issues.disconnected_way.routable.message", {
            count: this.entityIds.length,
            highway: label
          });
        },
        reference: showReference,
        entityIds: Array.from(routingIslandWays).map(function(way) {
          return way.id;
        }),
        dynamicFixes: makeFixes
      })];
      function makeFixes(context) {
        var fixes = [];
        var singleEntity = this.entityIds.length === 1 && context.hasEntity(this.entityIds[0]);
        if (singleEntity) {
          if (singleEntity.type === "way" && !singleEntity.isClosed()) {
            var textDirection = _mainLocalizer.textDirection();
            var startFix = makeContinueDrawingFixIfAllowed(textDirection, singleEntity.first(), "start");
            if (startFix)
              fixes.push(startFix);
            var endFix = makeContinueDrawingFixIfAllowed(textDirection, singleEntity.last(), "end");
            if (endFix)
              fixes.push(endFix);
          }
          if (!fixes.length) {
            fixes.push(new validationIssueFix({
              title: _t.html("issues.fix.connect_feature.title")
            }));
          }
          fixes.push(new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix.delete_feature.title"),
            entityIds: [singleEntity.id],
            onClick: function onClick(context2) {
              var id2 = this.issue.entityIds[0];
              var operation = operationDelete(context2, [id2]);
              if (!operation.disabled()) {
                operation();
              }
            }
          }));
        } else {
          fixes.push(new validationIssueFix({
            title: _t.html("issues.fix.connect_features.title")
          }));
        }
        return fixes;
      }
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.disconnected_way.routable.reference"));
      }
      function routingIslandForEntity(entity3) {
        var routingIsland = new Set();
        var waysToCheck = [];
        function queueParentWays(node) {
          graph3.parentWays(node).forEach(function(parentWay) {
            if (!routingIsland.has(parentWay) && isRoutableWay(parentWay, false)) {
              routingIsland.add(parentWay);
              waysToCheck.push(parentWay);
            }
          });
        }
        if (entity3.type === "way" && isRoutableWay(entity3, true)) {
          routingIsland.add(entity3);
          waysToCheck.push(entity3);
        } else if (entity3.type === "node" && isRoutableNode(entity3)) {
          routingIsland.add(entity3);
          queueParentWays(entity3);
        } else {
          return null;
        }
        while (waysToCheck.length) {
          var wayToCheck = waysToCheck.pop();
          var childNodes2 = graph3.childNodes(wayToCheck);
          for (var i2 in childNodes2) {
            var vertex = childNodes2[i2];
            if (isConnectedVertex(vertex)) {
              return null;
            }
            if (isRoutableNode(vertex)) {
              routingIsland.add(vertex);
            }
            queueParentWays(vertex);
          }
        }
        return routingIsland;
      }
      function isConnectedVertex(vertex) {
        var osm = services.osm;
        if (osm && !osm.isDataLoaded(vertex.loc))
          return true;
        if (vertex.tags.entrance && vertex.tags.entrance !== "no")
          return true;
        if (vertex.tags.amenity === "parking_entrance")
          return true;
        return false;
      }
      function isRoutableNode(node) {
        if (node.tags.highway === "elevator")
          return true;
        return false;
      }
      function isRoutableWay(way, ignoreInnerWays) {
        if (isTaggedAsHighway(way) || way.tags.route === "ferry")
          return true;
        return graph3.parentRelations(way).some(function(parentRelation) {
          if (parentRelation.tags.type === "route" && parentRelation.tags.route === "ferry")
            return true;
          if (parentRelation.isMultipolygon() && isTaggedAsHighway(parentRelation) && (!ignoreInnerWays || parentRelation.memberById(way.id).role !== "inner"))
            return true;
          return false;
        });
      }
      function makeContinueDrawingFixIfAllowed(textDirection, vertexID, whichEnd) {
        var vertex = graph3.hasEntity(vertexID);
        if (!vertex || vertex.tags.noexit === "yes")
          return null;
        var useLeftContinue = whichEnd === "start" && textDirection === "ltr" || whichEnd === "end" && textDirection === "rtl";
        return new validationIssueFix({
          icon: "iD-operation-continue" + (useLeftContinue ? "-left" : ""),
          title: _t.html("issues.fix.continue_from_" + whichEnd + ".title"),
          entityIds: [vertexID],
          onClick: function onClick(context) {
            var wayId = this.issue.entityIds[0];
            var way = context.hasEntity(wayId);
            var vertexId = this.entityIds[0];
            var vertex2 = context.hasEntity(vertexId);
            if (!way || !vertex2)
              return;
            var map2 = context.map();
            if (!context.editable() || !map2.trimmedExtent().contains(new Extent(vertex2.loc))) {
              map2.zoomToEase(vertex2);
            }
            context.enter(modeDrawLine(context, wayId, context.graph(), "line", way.affix(vertexId), true));
          }
        });
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/duplicate_way_segments.js
  function validationDuplicateWaySegments() {
    var type3 = "duplicate_way_segments";
    var validation = function validation2(entity2, graph3) {
      if (entity2.type === "way") {
        return getIssuesForWay(entity2);
      }
      return [];
      function isRoutableTag(key) {
        return key === "highway" || key === "railway" || key === "waterway";
      }
      function hasRoutableTags(way) {
        if (way.isArea())
          return false;
        return Object.keys(way.tags).some(isRoutableTag);
      }
      function adjacentNodes(node1, node2, way) {
        var nodes = graph3.childNodes(way);
        return Math.abs(nodes.findIndex(function(node) {
          return node.id === node1.id;
        }) - nodes.findIndex(function(node) {
          return node.id === node2.id;
        })) === 1;
      }
      function getIssuesForWay(way) {
        var issues = [];
        if (!hasRoutableTags(way))
          return issues;
        var nodes = graph3.childNodes(way);
        for (var i2 = 0; i2 < nodes.length - 1; i2++) {
          var node1 = nodes[i2];
          var node2 = nodes[i2 + 1];
          var issue = getWayIssueIfAny(node1, node2, way);
          if (issue)
            issues.push(issue);
        }
        return issues;
      }
      function getWayIssueIfAny(node1, node2, way) {
        if (node1.id === node2.id) {
          return null;
        }
        if (node1.loc !== node2.loc) {
          var parentWays1 = graph3.parentWays(node1);
          var parentWays2 = new Set(graph3.parentWays(node2));
          var sharedWays = parentWays1.filter(function(parentWay) {
            return parentWays2.has(parentWay);
          });
          var remainingSharedWays = sharedWays.filter(function(way2) {
            return hasRoutableTags(way2);
          });
          var waysWithContiguousNodes = remainingSharedWays.filter(function(way2) {
            return adjacentNodes(node1, node2, way2);
          });
          if (waysWithContiguousNodes.length <= 1)
            return null;
        }
        return new validationIssue({
          type: type3,
          subtype: "vertices",
          severity: "warning",
          message: function message(context) {
            var entity3 = context.hasEntity(this.entityIds[0]);
            return entity3 ? _t.html("issues.duplicate_way_segments.message", {
              way: utilDisplayLabel(entity3, context.graph())
            }) : "";
          },
          reference: showReference,
          entityIds: [way.id, node1.id, node2.id],
          loc: node1.loc,
          dynamicFixes: function dynamicFixes() {
            return [new validationIssueFix({
              icon: "iD-icon-plus",
              title: _t.html("issues.fix.merge_points.title")
            }), new validationIssueFix({
              icon: "iD-operation-delete",
              title: _t.html("issues.fix.remove_way_segments.title")
            }), new validationIssueFix({
              icon: "iD-operation-disconnect",
              title: _t.html("issues.fix.move_way_segments_apart.title")
            })];
          }
        });
        function showReference(selection2) {
          var referenceText = _t("issues.duplicate_way_segments.reference");
          selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(referenceText);
        }
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/invalid_format.js
  function validationFormatting() {
    var type3 = "invalid_format";
    var validation = function validation2(entity2) {
      var issues = [];
      function isValidEmail(email) {
        var valid_email = /^[^\(\)\\,":;<>@\[\]]+@[^\(\)\\,":;<>@\[\]\.]+(?:\.[a-z0-9-]+)*$/i;
        return !email || valid_email.test(email);
      }
      function showReferenceEmail(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.invalid_format.email.reference"));
      }
      if (entity2.tags.email) {
        var emails = entity2.tags.email.split(";").map(function(s) {
          return s.trim();
        }).filter(function(x2) {
          return !isValidEmail(x2);
        });
        if (emails.length) {
          issues.push(new validationIssue({
            type: type3,
            subtype: "email",
            severity: "warning",
            message: function message(context) {
              var entity3 = context.hasEntity(this.entityIds[0]);
              return entity3 ? _t.html("issues.invalid_format.email.message" + this.data, {
                feature: utilDisplayLabel(entity3, context.graph()),
                email: emails.join(", ")
              }) : "";
            },
            reference: showReferenceEmail,
            entityIds: [entity2.id],
            hash: emails.join(),
            data: emails.length > 1 ? "_multi" : ""
          }));
        }
      }
      return issues;
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/help_request.js
  function validationHelpRequest(context) {
    var type3 = "help_request";
    var validation = function checkFixmeTag(entity2) {
      if (!entity2.tags.fixme)
        return [];
      if (entity2.version === void 0)
        return [];
      if (entity2.v !== void 0) {
        var baseEntity = context.history().base().hasEntity(entity2.id);
        if (!baseEntity || !baseEntity.tags.fixme)
          return [];
      }
      return [new validationIssue({
        type: type3,
        subtype: "fixme_tag",
        severity: "warning",
        message: function message(context2) {
          var entity3 = context2.hasEntity(this.entityIds[0]);
          return entity3 ? _t.html("issues.fixme_tag.message", {
            feature: utilDisplayLabel(entity3, context2.graph(), true)
          }) : "";
        },
        dynamicFixes: function dynamicFixes() {
          return [new validationIssueFix({
            title: _t.html("issues.fix.address_the_concern.title")
          })];
        },
        reference: showReference,
        entityIds: [entity2.id]
      })];
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.fixme_tag.reference"));
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/impossible_oneway.js
  function validationImpossibleOneway() {
    var type3 = "impossible_oneway";
    var validation = function checkImpossibleOneway(entity2, graph3) {
      if (entity2.type !== "way" || entity2.geometry(graph3) !== "line")
        return [];
      if (entity2.isClosed())
        return [];
      if (!typeForWay(entity2))
        return [];
      if (!isOneway(entity2))
        return [];
      var firstIssues = issuesForNode(entity2, entity2.first());
      var lastIssues = issuesForNode(entity2, entity2.last());
      return firstIssues.concat(lastIssues);
      function typeForWay(way) {
        if (way.geometry(graph3) !== "line")
          return null;
        if (osmRoutableHighwayTagValues[way.tags.highway])
          return "highway";
        if (osmFlowingWaterwayTagValues[way.tags.waterway])
          return "waterway";
        return null;
      }
      function isOneway(way) {
        if (way.tags.oneway === "yes")
          return true;
        if (way.tags.oneway)
          return false;
        for (var key in way.tags) {
          if (osmOneWayTags[key] && osmOneWayTags[key][way.tags[key]]) {
            return true;
          }
        }
        return false;
      }
      function nodeOccursMoreThanOnce(way, nodeID) {
        var occurrences = 0;
        for (var index in way.nodes) {
          if (way.nodes[index] === nodeID) {
            occurrences += 1;
            if (occurrences > 1)
              return true;
          }
        }
        return false;
      }
      function isConnectedViaOtherTypes(way, node) {
        var wayType = typeForWay(way);
        if (wayType === "highway") {
          if (node.tags.entrance && node.tags.entrance !== "no")
            return true;
          if (node.tags.amenity === "parking_entrance")
            return true;
        } else if (wayType === "waterway") {
          if (node.id === way.first()) {
            if (node.tags.natural === "spring")
              return true;
          } else {
            if (node.tags.manhole === "drain")
              return true;
          }
        }
        return graph3.parentWays(node).some(function(parentWay) {
          if (parentWay.id === way.id)
            return false;
          if (wayType === "highway") {
            if (parentWay.geometry(graph3) === "area" && osmRoutableHighwayTagValues[parentWay.tags.highway])
              return true;
            if (parentWay.tags.route === "ferry")
              return true;
            return graph3.parentRelations(parentWay).some(function(parentRelation) {
              if (parentRelation.tags.type === "route" && parentRelation.tags.route === "ferry")
                return true;
              return parentRelation.isMultipolygon() && osmRoutableHighwayTagValues[parentRelation.tags.highway];
            });
          } else if (wayType === "waterway") {
            if (parentWay.tags.natural === "water" || parentWay.tags.natural === "coastline")
              return true;
          }
          return false;
        });
      }
      function issuesForNode(way, nodeID) {
        var isFirst = nodeID === way.first();
        var wayType = typeForWay(way);
        if (nodeOccursMoreThanOnce(way, nodeID))
          return [];
        var osm = services.osm;
        if (!osm)
          return [];
        var node = graph3.hasEntity(nodeID);
        if (!node || !osm.isDataLoaded(node.loc))
          return [];
        if (isConnectedViaOtherTypes(way, node))
          return [];
        var attachedWaysOfSameType = graph3.parentWays(node).filter(function(parentWay) {
          if (parentWay.id === way.id)
            return false;
          return typeForWay(parentWay) === wayType;
        });
        if (wayType === "waterway" && attachedWaysOfSameType.length === 0)
          return [];
        var attachedOneways = attachedWaysOfSameType.filter(function(attachedWay) {
          return isOneway(attachedWay);
        });
        if (attachedOneways.length < attachedWaysOfSameType.length)
          return [];
        if (attachedOneways.length) {
          var connectedEndpointsOkay = attachedOneways.some(function(attachedOneway) {
            if ((isFirst ? attachedOneway.first() : attachedOneway.last()) !== nodeID)
              return true;
            if (nodeOccursMoreThanOnce(attachedOneway, nodeID))
              return true;
            return false;
          });
          if (connectedEndpointsOkay)
            return [];
        }
        var placement = isFirst ? "start" : "end", messageID = wayType + ".", referenceID = wayType + ".";
        if (wayType === "waterway") {
          messageID += "connected." + placement;
          referenceID += "connected";
        } else {
          messageID += placement;
          referenceID += placement;
        }
        return [new validationIssue({
          type: type3,
          subtype: wayType,
          severity: "warning",
          message: function message(context) {
            var entity3 = context.hasEntity(this.entityIds[0]);
            return entity3 ? _t.html("issues.impossible_oneway." + messageID + ".message", {
              feature: utilDisplayLabel(entity3, context.graph())
            }) : "";
          },
          reference: getReference(referenceID),
          entityIds: [way.id, node.id],
          dynamicFixes: function dynamicFixes() {
            var fixes = [];
            if (attachedOneways.length) {
              fixes.push(new validationIssueFix({
                icon: "iD-operation-reverse",
                title: _t.html("issues.fix.reverse_feature.title"),
                entityIds: [way.id],
                onClick: function onClick(context) {
                  var id2 = this.issue.entityIds[0];
                  context.perform(actionReverse(id2), _t("operations.reverse.annotation.line", {
                    n: 1
                  }));
                }
              }));
            }
            if (node.tags.noexit !== "yes") {
              var textDirection = _mainLocalizer.textDirection();
              var useLeftContinue = isFirst && textDirection === "ltr" || !isFirst && textDirection === "rtl";
              fixes.push(new validationIssueFix({
                icon: "iD-operation-continue" + (useLeftContinue ? "-left" : ""),
                title: _t.html("issues.fix.continue_from_" + (isFirst ? "start" : "end") + ".title"),
                onClick: function onClick(context) {
                  var entityID = this.issue.entityIds[0];
                  var vertexID = this.issue.entityIds[1];
                  var way2 = context.entity(entityID);
                  var vertex = context.entity(vertexID);
                  continueDrawing(way2, vertex, context);
                }
              }));
            }
            return fixes;
          },
          loc: node.loc
        })];
        function getReference(referenceID2) {
          return function showReference(selection2) {
            selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.impossible_oneway." + referenceID2 + ".reference"));
          };
        }
      }
    };
    function continueDrawing(way, vertex, context) {
      var map2 = context.map();
      if (!context.editable() || !map2.trimmedExtent().contains(new Extent(vertex.loc))) {
        map2.zoomToEase(vertex);
      }
      context.enter(modeDrawLine(context, way.id, context.graph(), "line", way.affix(vertex.id), true));
    }
    validation.type = type3;
    return validation;
  }

  // modules/validations/incompatible_source.js
  function validationIncompatibleSource() {
    var type3 = "incompatible_source";
    var incompatibleRules = [{
      id: "amap",
      regex: /(amap|autonavi|mapabc|高德)/i
    }, {
      id: "baidu",
      regex: /(baidu|mapbar|百度)/i
    }, {
      id: "google",
      regex: /google/i,
      exceptRegex: /((books|drive)\.google|google\s?(books|drive|plus))|(esri\/Google_Africa_Buildings)/i
    }];
    var validation = function checkIncompatibleSource(entity2) {
      var entitySources = entity2.tags && entity2.tags.source && entity2.tags.source.split(";");
      if (!entitySources)
        return [];
      var entityID = entity2.id;
      return entitySources.map(function(source) {
        var matchRule = incompatibleRules.find(function(rule) {
          if (!rule.regex.test(source))
            return false;
          if (rule.exceptRegex && rule.exceptRegex.test(source))
            return false;
          return true;
        });
        if (!matchRule)
          return null;
        return new validationIssue({
          type: type3,
          severity: "warning",
          message: function message(context) {
            var entity3 = context.hasEntity(entityID);
            return entity3 ? _t.html("issues.incompatible_source.feature.message", {
              feature: utilDisplayLabel(entity3, context.graph(), true),
              value: source
            }) : "";
          },
          reference: getReference(matchRule.id),
          entityIds: [entityID],
          hash: source,
          dynamicFixes: function dynamicFixes() {
            return [new validationIssueFix({
              title: _t.html("issues.fix.remove_proprietary_data.title")
            })];
          }
        });
      }).filter(Boolean);
      function getReference(id2) {
        return function showReference(selection2) {
          selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.incompatible_source.reference.".concat(id2)));
        };
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/maprules.js
  function validationMaprules() {
    var type3 = "maprules";
    var validation = function checkMaprules(entity2, graph3) {
      if (!services.maprules)
        return [];
      var rules = services.maprules.validationRules();
      var issues = [];
      for (var i2 = 0; i2 < rules.length; i2++) {
        var rule = rules[i2];
        rule.findIssues(entity2, graph3, issues);
      }
      return issues;
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/mismatched_geometry.js
  var import_fast_deep_equal4 = __toModule(require_fast_deep_equal());
  function validationMismatchedGeometry() {
    var type3 = "mismatched_geometry";
    function tagSuggestingLineIsArea(entity2) {
      if (entity2.type !== "way" || entity2.isClosed())
        return null;
      var tagSuggestingArea2 = entity2.tagSuggestingArea();
      if (!tagSuggestingArea2) {
        return null;
      }
      var asLine = _mainPresetIndex.matchTags(tagSuggestingArea2, "line");
      var asArea = _mainPresetIndex.matchTags(tagSuggestingArea2, "area");
      if (asLine && asArea && asLine === asArea) {
        return null;
      }
      return tagSuggestingArea2;
    }
    function makeConnectEndpointsFixOnClick(way, graph3) {
      if (way.nodes.length < 3)
        return null;
      var nodes = graph3.childNodes(way), testNodes;
      var firstToLastDistanceMeters = geoSphericalDistance(nodes[0].loc, nodes[nodes.length - 1].loc);
      if (firstToLastDistanceMeters < 0.75) {
        testNodes = nodes.slice();
        testNodes.pop();
        testNodes.push(testNodes[0]);
        if (!geoHasSelfIntersections(testNodes, testNodes[0].id)) {
          return function(context) {
            var way2 = context.entity(this.issue.entityIds[0]);
            context.perform(actionMergeNodes([way2.nodes[0], way2.nodes[way2.nodes.length - 1]], nodes[0].loc), _t("issues.fix.connect_endpoints.annotation"));
          };
        }
      }
      testNodes = nodes.slice();
      testNodes.push(testNodes[0]);
      if (!geoHasSelfIntersections(testNodes, testNodes[0].id)) {
        return function(context) {
          var wayId = this.issue.entityIds[0];
          var way2 = context.entity(wayId);
          var nodeId = way2.nodes[0];
          var index = way2.nodes.length;
          context.perform(actionAddVertex(wayId, nodeId, index), _t("issues.fix.connect_endpoints.annotation"));
        };
      }
    }
    function lineTaggedAsAreaIssue(entity2) {
      var tagSuggestingArea2 = tagSuggestingLineIsArea(entity2);
      if (!tagSuggestingArea2)
        return null;
      return new validationIssue({
        type: type3,
        subtype: "area_as_line",
        severity: "warning",
        message: function message(context) {
          var entity3 = context.hasEntity(this.entityIds[0]);
          return entity3 ? _t.html("issues.tag_suggests_area.message", {
            feature: utilDisplayLabel(entity3, "area", true),
            tag: utilTagText({
              tags: tagSuggestingArea2
            })
          }) : "";
        },
        reference: showReference,
        entityIds: [entity2.id],
        hash: JSON.stringify(tagSuggestingArea2),
        dynamicFixes: function dynamicFixes(context) {
          var fixes = [];
          var entity3 = context.entity(this.entityIds[0]);
          var connectEndsOnClick = makeConnectEndpointsFixOnClick(entity3, context.graph());
          fixes.push(new validationIssueFix({
            title: _t.html("issues.fix.connect_endpoints.title"),
            onClick: connectEndsOnClick
          }));
          fixes.push(new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix.remove_tag.title"),
            onClick: function onClick(context2) {
              var entityId = this.issue.entityIds[0];
              var entity4 = context2.entity(entityId);
              var tags = Object.assign({}, entity4.tags);
              for (var key in tagSuggestingArea2) {
                delete tags[key];
              }
              context2.perform(actionChangeTags(entityId, tags), _t("issues.fix.remove_tag.annotation"));
            }
          }));
          return fixes;
        }
      });
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.tag_suggests_area.reference"));
      }
    }
    function vertexPointIssue(entity2, graph3) {
      if (entity2.type !== "node")
        return null;
      if (Object.keys(entity2.tags).length === 0)
        return null;
      if (entity2.isOnAddressLine(graph3))
        return null;
      var geometry6 = entity2.geometry(graph3);
      var allowedGeometries = osmNodeGeometriesForTags(entity2.tags);
      if (geometry6 === "point" && !allowedGeometries.point && allowedGeometries.vertex) {
        return new validationIssue({
          type: type3,
          subtype: "vertex_as_point",
          severity: "warning",
          message: function message(context) {
            var entity3 = context.hasEntity(this.entityIds[0]);
            return entity3 ? _t.html("issues.vertex_as_point.message", {
              feature: utilDisplayLabel(entity3, "vertex", true)
            }) : "";
          },
          reference: function showReference(selection2) {
            selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.vertex_as_point.reference"));
          },
          entityIds: [entity2.id]
        });
      } else if (geometry6 === "vertex" && !allowedGeometries.vertex && allowedGeometries.point) {
        return new validationIssue({
          type: type3,
          subtype: "point_as_vertex",
          severity: "warning",
          message: function message(context) {
            var entity3 = context.hasEntity(this.entityIds[0]);
            return entity3 ? _t.html("issues.point_as_vertex.message", {
              feature: utilDisplayLabel(entity3, "point", true)
            }) : "";
          },
          reference: function showReference(selection2) {
            selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.point_as_vertex.reference"));
          },
          entityIds: [entity2.id],
          dynamicFixes: extractPointDynamicFixes
        });
      }
      return null;
    }
    function otherMismatchIssue(entity2, graph3) {
      if (!entity2.hasInterestingTags())
        return null;
      if (entity2.type !== "node" && entity2.type !== "way")
        return null;
      if (entity2.type === "node" && entity2.isOnAddressLine(graph3))
        return null;
      var sourceGeom = entity2.geometry(graph3);
      var targetGeoms = entity2.type === "way" ? ["point", "vertex"] : ["line", "area"];
      if (sourceGeom === "area")
        targetGeoms.unshift("line");
      var asSource = _mainPresetIndex.match(entity2, graph3);
      var targetGeom = targetGeoms.find(function(nodeGeom) {
        var asTarget = _mainPresetIndex.matchTags(entity2.tags, nodeGeom);
        if (!asSource || !asTarget || asSource === asTarget || (0, import_fast_deep_equal4.default)(asSource.tags, asTarget.tags))
          return false;
        if (asTarget.isFallback())
          return false;
        var primaryKey = Object.keys(asTarget.tags)[0];
        if (primaryKey === "building")
          return false;
        if (asTarget.tags[primaryKey] === "*")
          return false;
        return asSource.isFallback() || asSource.tags[primaryKey] === "*";
      });
      if (!targetGeom)
        return null;
      var subtype = targetGeom + "_as_" + sourceGeom;
      if (targetGeom === "vertex")
        targetGeom = "point";
      if (sourceGeom === "vertex")
        sourceGeom = "point";
      var referenceId = targetGeom + "_as_" + sourceGeom;
      var dynamicFixes;
      if (targetGeom === "point") {
        dynamicFixes = extractPointDynamicFixes;
      } else if (sourceGeom === "area" && targetGeom === "line") {
        dynamicFixes = lineToAreaDynamicFixes;
      }
      return new validationIssue({
        type: type3,
        subtype: subtype,
        severity: "warning",
        message: function message(context) {
          var entity3 = context.hasEntity(this.entityIds[0]);
          return entity3 ? _t.html("issues." + referenceId + ".message", {
            feature: utilDisplayLabel(entity3, targetGeom, true)
          }) : "";
        },
        reference: function showReference(selection2) {
          selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.mismatched_geometry.reference"));
        },
        entityIds: [entity2.id],
        dynamicFixes: dynamicFixes
      });
    }
    function lineToAreaDynamicFixes(context) {
      var convertOnClick;
      var entityId = this.entityIds[0];
      var entity2 = context.entity(entityId);
      var tags = Object.assign({}, entity2.tags);
      delete tags.area;
      if (!osmTagSuggestingArea(tags)) {
        convertOnClick = function convertOnClick2(context2) {
          var entityId2 = this.issue.entityIds[0];
          var entity3 = context2.entity(entityId2);
          var tags2 = Object.assign({}, entity3.tags);
          if (tags2.area) {
            delete tags2.area;
          }
          context2.perform(actionChangeTags(entityId2, tags2), _t("issues.fix.convert_to_line.annotation"));
        };
      }
      return [new validationIssueFix({
        icon: "iD-icon-line",
        title: _t.html("issues.fix.convert_to_line.title"),
        onClick: convertOnClick
      })];
    }
    function extractPointDynamicFixes(context) {
      var entityId = this.entityIds[0];
      var extractOnClick = null;
      if (!context.hasHiddenConnections(entityId)) {
        extractOnClick = function extractOnClick2(context2) {
          var entityId2 = this.issue.entityIds[0];
          var action = actionExtract(entityId2, context2.projection);
          context2.perform(action, _t("operations.extract.annotation", {
            n: 1
          }));
          context2.enter(modeSelect(context2, [action.getExtractedNodeID()]));
        };
      }
      return [new validationIssueFix({
        icon: "iD-operation-extract",
        title: _t.html("issues.fix.extract_point.title"),
        onClick: extractOnClick
      })];
    }
    function unclosedMultipolygonPartIssues(entity2, graph3) {
      if (entity2.type !== "relation" || !entity2.isMultipolygon() || entity2.isDegenerate() || !entity2.isComplete(graph3))
        return [];
      var sequences4 = osmJoinWays(entity2.members, graph3);
      var issues = [];
      for (var i2 in sequences4) {
        var sequence = sequences4[i2];
        if (!sequence.nodes)
          continue;
        var firstNode = sequence.nodes[0];
        var lastNode = sequence.nodes[sequence.nodes.length - 1];
        if (firstNode === lastNode)
          continue;
        var issue = new validationIssue({
          type: type3,
          subtype: "unclosed_multipolygon_part",
          severity: "warning",
          message: function message(context) {
            var entity3 = context.hasEntity(this.entityIds[0]);
            return entity3 ? _t.html("issues.unclosed_multipolygon_part.message", {
              feature: utilDisplayLabel(entity3, context.graph(), true)
            }) : "";
          },
          reference: showReference,
          loc: sequence.nodes[0].loc,
          entityIds: [entity2.id],
          hash: sequence.map(function(way) {
            return way.id;
          }).join()
        });
        issues.push(issue);
      }
      return issues;
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.unclosed_multipolygon_part.reference"));
      }
    }
    var validation = function checkMismatchedGeometry(entity2, graph3) {
      var vertexPoint = vertexPointIssue(entity2, graph3);
      if (vertexPoint)
        return [vertexPoint];
      var lineAsArea = lineTaggedAsAreaIssue(entity2);
      if (lineAsArea)
        return [lineAsArea];
      var mismatch = otherMismatchIssue(entity2, graph3);
      if (mismatch)
        return [mismatch];
      return unclosedMultipolygonPartIssues(entity2, graph3);
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/missing_role.js
  function validationMissingRole() {
    var type3 = "missing_role";
    var validation = function checkMissingRole(entity2, graph3) {
      var issues = [];
      if (entity2.type === "way") {
        graph3.parentRelations(entity2).forEach(function(relation) {
          if (!relation.isMultipolygon())
            return;
          var member = relation.memberById(entity2.id);
          if (member && isMissingRole(member)) {
            issues.push(makeIssue(entity2, relation, member));
          }
        });
      } else if (entity2.type === "relation" && entity2.isMultipolygon()) {
        entity2.indexedMembers().forEach(function(member) {
          var way = graph3.hasEntity(member.id);
          if (way && isMissingRole(member)) {
            issues.push(makeIssue(way, entity2, member));
          }
        });
      }
      return issues;
    };
    function isMissingRole(member) {
      return !member.role || !member.role.trim().length;
    }
    function makeIssue(way, relation, member) {
      return new validationIssue({
        type: type3,
        severity: "warning",
        message: function message(context) {
          var member2 = context.hasEntity(this.entityIds[1]), relation2 = context.hasEntity(this.entityIds[0]);
          return member2 && relation2 ? _t.html("issues.missing_role.message", {
            member: utilDisplayLabel(member2, context.graph()),
            relation: utilDisplayLabel(relation2, context.graph())
          }) : "";
        },
        reference: showReference,
        entityIds: [relation.id, way.id],
        data: {
          member: member
        },
        hash: member.index.toString(),
        dynamicFixes: function dynamicFixes() {
          return [makeAddRoleFix("inner"), makeAddRoleFix("outer"), new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix.remove_from_relation.title"),
            onClick: function onClick(context) {
              context.perform(actionDeleteMember(this.issue.entityIds[0], this.issue.data.member.index), _t("operations.delete_member.annotation", {
                n: 1
              }));
            }
          })];
        }
      });
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.missing_role.multipolygon.reference"));
      }
    }
    function makeAddRoleFix(role) {
      return new validationIssueFix({
        title: _t.html("issues.fix.set_as_" + role + ".title"),
        onClick: function onClick(context) {
          var oldMember = this.issue.data.member;
          var member = {
            id: this.issue.entityIds[1],
            type: oldMember.type,
            role: role
          };
          context.perform(actionChangeMember(this.issue.entityIds[0], member, oldMember.index), _t("operations.change_role.annotation", {
            n: 1
          }));
        }
      });
    }
    validation.type = type3;
    return validation;
  }

  // modules/validations/missing_tag.js
  function validationMissingTag(context) {
    var type3 = "missing_tag";
    function hasDescriptiveTags(entity2, graph3) {
      var onlyAttributeKeys = ["description", "name", "note", "start_date"];
      var entityDescriptiveKeys = Object.keys(entity2.tags).filter(function(k) {
        if (k === "area" || !osmIsInterestingTag(k))
          return false;
        return !onlyAttributeKeys.some(function(attributeKey) {
          return k === attributeKey || k.indexOf(attributeKey + ":") === 0;
        });
      });
      if (entity2.type === "relation" && entityDescriptiveKeys.length === 1 && entity2.tags.type === "multipolygon") {
        return osmOldMultipolygonOuterMemberOfRelation(entity2, graph3);
      }
      return entityDescriptiveKeys.length > 0;
    }
    function isUnknownRoad(entity2) {
      return entity2.type === "way" && entity2.tags.highway === "road";
    }
    function isUntypedRelation(entity2) {
      return entity2.type === "relation" && !entity2.tags.type;
    }
    var validation = function checkMissingTag(entity2, graph3) {
      var subtype;
      var osm = context.connection();
      var isUnloadedNode = entity2.type === "node" && osm && !osm.isDataLoaded(entity2.loc);
      if (!isUnloadedNode && entity2.geometry(graph3) !== "vertex" && !entity2.hasParentRelations(graph3)) {
        if (Object.keys(entity2.tags).length === 0) {
          subtype = "any";
        } else if (!hasDescriptiveTags(entity2, graph3)) {
          subtype = "descriptive";
        } else if (isUntypedRelation(entity2)) {
          subtype = "relation_type";
        }
      }
      if (!subtype && isUnknownRoad(entity2)) {
        subtype = "highway_classification";
      }
      if (!subtype)
        return [];
      var messageID = subtype === "highway_classification" ? "unknown_road" : "missing_tag." + subtype;
      var referenceID = subtype === "highway_classification" ? "unknown_road" : "missing_tag";
      var canDelete = entity2.version === void 0 || entity2.v !== void 0;
      var severity = canDelete && subtype !== "highway_classification" ? "error" : "warning";
      return [new validationIssue({
        type: type3,
        subtype: subtype,
        severity: severity,
        message: function message(context2) {
          var entity3 = context2.hasEntity(this.entityIds[0]);
          return entity3 ? _t.html("issues." + messageID + ".message", {
            feature: utilDisplayLabel(entity3, context2.graph())
          }) : "";
        },
        reference: showReference,
        entityIds: [entity2.id],
        dynamicFixes: function dynamicFixes(context2) {
          var fixes = [];
          var selectFixType = subtype === "highway_classification" ? "select_road_type" : "select_preset";
          fixes.push(new validationIssueFix({
            icon: "iD-icon-search",
            title: _t.html("issues.fix." + selectFixType + ".title"),
            onClick: function onClick(context3) {
              context3.ui().sidebar.showPresetList();
            }
          }));
          var deleteOnClick;
          var id2 = this.entityIds[0];
          var operation = operationDelete(context2, [id2]);
          var disabledReasonID = operation.disabled();
          if (!disabledReasonID) {
            deleteOnClick = function deleteOnClick2(context3) {
              var id3 = this.issue.entityIds[0];
              var operation2 = operationDelete(context3, [id3]);
              if (!operation2.disabled()) {
                operation2();
              }
            };
          }
          fixes.push(new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix.delete_feature.title"),
            disabledReason: disabledReasonID ? _t("operations.delete." + disabledReasonID + ".single") : void 0,
            onClick: deleteOnClick
          }));
          return fixes;
        }
      })];
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues." + referenceID + ".reference"));
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/outdated_tags.js
  function validationOutdatedTags() {
    var type3 = "outdated_tags";
    var _waitingForDeprecated = true;
    var _dataDeprecated;
    _mainFileFetcher.get("deprecated").then(function(d) {
      return _dataDeprecated = d;
    }).catch(function() {
    }).finally(function() {
      return _waitingForDeprecated = false;
    });
    function oldTagIssues(entity2, graph3) {
      var oldTags = Object.assign({}, entity2.tags);
      var preset = _mainPresetIndex.match(entity2, graph3);
      var subtype = "deprecated_tags";
      if (!preset)
        return [];
      if (!entity2.hasInterestingTags())
        return [];
      if (preset.replacement) {
        var newPreset = _mainPresetIndex.item(preset.replacement);
        graph3 = actionChangePreset(entity2.id, preset, newPreset, true)(graph3);
        entity2 = graph3.entity(entity2.id);
        preset = newPreset;
      }
      if (_dataDeprecated) {
        var deprecatedTags2 = entity2.deprecatedTags(_dataDeprecated);
        if (deprecatedTags2.length) {
          deprecatedTags2.forEach(function(tag) {
            graph3 = actionUpgradeTags(entity2.id, tag.old, tag.replace)(graph3);
          });
          entity2 = graph3.entity(entity2.id);
        }
      }
      var newTags = Object.assign({}, entity2.tags);
      if (preset.tags !== preset.addTags) {
        Object.keys(preset.addTags).forEach(function(k) {
          if (!newTags[k]) {
            if (preset.addTags[k] === "*") {
              newTags[k] = "yes";
            } else {
              newTags[k] = preset.addTags[k];
            }
          }
        });
      }
      var nsi = services.nsi;
      var waitingForNsi = false;
      var nsiResult;
      if (nsi) {
        waitingForNsi = nsi.status() === "loading";
        if (!waitingForNsi) {
          var loc = entity2.extent(graph3).center();
          nsiResult = nsi.upgradeTags(newTags, loc);
          if (nsiResult) {
            newTags = nsiResult.newTags;
            subtype = "noncanonical_brand";
          }
        }
      }
      var issues = [];
      issues.provisional = _waitingForDeprecated || waitingForNsi;
      var tagDiff = utilTagDiff(oldTags, newTags);
      if (!tagDiff.length)
        return issues;
      var isOnlyAddingTags = tagDiff.every(function(d) {
        return d.type === "+";
      });
      var prefix = "";
      if (nsiResult) {
        prefix = "noncanonical_brand.";
      } else if (subtype === "deprecated_tags" && isOnlyAddingTags) {
        subtype = "incomplete_tags";
        prefix = "incomplete.";
      }
      var autoArgs = [doUpgrade, _t("issues.fix.upgrade_tags.annotation")];
      issues.push(new validationIssue({
        type: type3,
        subtype: subtype,
        severity: "warning",
        message: showMessage,
        reference: showReference,
        entityIds: [entity2.id],
        hash: utilHashcode(JSON.stringify(tagDiff)),
        autoArgs: autoArgs,
        dynamicFixes: function dynamicFixes() {
          var fixes = [new validationIssueFix({
            autoArgs: autoArgs,
            title: _t.html("issues.fix.upgrade_tags.title"),
            onClick: function onClick(context) {
              context.perform(doUpgrade, _t("issues.fix.upgrade_tags.annotation"));
            }
          })];
          var item = nsiResult && nsiResult.matched;
          if (item) {
            fixes.push(new validationIssueFix({
              title: _t.html("issues.fix.tag_as_not.title", {
                name: item.displayName
              }),
              onClick: function onClick(context) {
                context.perform(addNotTag, _t("issues.fix.tag_as_not.annotation"));
              }
            }));
          }
          return fixes;
        }
      }));
      return issues;
      function doUpgrade(graph4) {
        var currEntity = graph4.hasEntity(entity2.id);
        if (!currEntity)
          return graph4;
        var newTags2 = Object.assign({}, currEntity.tags);
        tagDiff.forEach(function(diff) {
          if (diff.type === "-") {
            delete newTags2[diff.key];
          } else if (diff.type === "+") {
            newTags2[diff.key] = diff.newVal;
          }
        });
        return actionChangeTags(currEntity.id, newTags2)(graph4);
      }
      function addNotTag(graph4) {
        var currEntity = graph4.hasEntity(entity2.id);
        if (!currEntity)
          return graph4;
        var item = nsiResult && nsiResult.matched;
        if (!item)
          return graph4;
        var newTags2 = Object.assign({}, currEntity.tags);
        var wd = item.mainTag;
        var notwd = "not:".concat(wd);
        var qid = item.tags[wd];
        newTags2[notwd] = qid;
        if (newTags2[wd] === qid) {
          var wp = item.mainTag.replace("wikidata", "wikipedia");
          delete newTags2[wd];
          delete newTags2[wp];
        }
        return actionChangeTags(currEntity.id, newTags2)(graph4);
      }
      function showMessage(context) {
        var currEntity = context.hasEntity(entity2.id);
        if (!currEntity)
          return "";
        var messageID = "issues.outdated_tags.".concat(prefix, "message");
        if (subtype === "noncanonical_brand" && isOnlyAddingTags) {
          messageID += "_incomplete";
        }
        return _t.html(messageID, {
          feature: utilDisplayLabel(currEntity, context.graph(), true)
        });
      }
      function showReference(selection2) {
        var enter = selection2.selectAll(".issue-reference").data([0]).enter();
        enter.append("div").attr("class", "issue-reference").html(_t.html("issues.outdated_tags.".concat(prefix, "reference")));
        enter.append("strong").html(_t.html("issues.suggested"));
        enter.append("table").attr("class", "tagDiff-table").selectAll(".tagDiff-row").data(tagDiff).enter().append("tr").attr("class", "tagDiff-row").append("td").attr("class", function(d) {
          var klass = d.type === "+" ? "add" : "remove";
          return "tagDiff-cell tagDiff-cell-".concat(klass);
        }).html(function(d) {
          return d.display;
        });
      }
    }
    function oldMultipolygonIssues(entity2, graph3) {
      var multipolygon2, outerWay;
      if (entity2.type === "relation") {
        outerWay = osmOldMultipolygonOuterMemberOfRelation(entity2, graph3);
        multipolygon2 = entity2;
      } else if (entity2.type === "way") {
        multipolygon2 = osmIsOldMultipolygonOuterMember(entity2, graph3);
        outerWay = entity2;
      } else {
        return [];
      }
      if (!multipolygon2 || !outerWay)
        return [];
      return [new validationIssue({
        type: type3,
        subtype: "old_multipolygon",
        severity: "warning",
        message: showMessage,
        reference: showReference,
        entityIds: [outerWay.id, multipolygon2.id],
        autoArgs: [doUpgrade, _t("issues.fix.move_tags.annotation")],
        dynamicFixes: function dynamicFixes() {
          return [new validationIssueFix({
            title: _t("issues.fix.move_tags.title"),
            onClick: function onClick(context) {
              context.perform(doUpgrade, _t("issues.fix.move_tags.annotation"));
            }
          })];
        }
      })];
      function doUpgrade(graph4) {
        var currMultipolygon = graph4.hasEntity(multipolygon2.id);
        var currOuterWay = graph4.hasEntity(outerWay.id);
        if (!currMultipolygon || !currOuterWay)
          return graph4;
        currMultipolygon = currMultipolygon.mergeTags(currOuterWay.tags);
        graph4 = graph4.replace(currMultipolygon);
        return actionChangeTags(currOuterWay.id, {})(graph4);
      }
      function showMessage(context) {
        var currMultipolygon = context.hasEntity(multipolygon2.id);
        if (!currMultipolygon)
          return "";
        return _t.html("issues.old_multipolygon.message", {
          multipolygon: utilDisplayLabel(currMultipolygon, context.graph(), true)
        });
      }
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.old_multipolygon.reference"));
      }
    }
    var validation = function checkOutdatedTags(entity2, graph3) {
      var issues = oldMultipolygonIssues(entity2, graph3);
      if (!issues.length)
        issues = oldTagIssues(entity2, graph3);
      return issues;
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/private_data.js
  function validationPrivateData() {
    var type3 = "private_data";
    var privateBuildingValues = {
      detached: true,
      farm: true,
      house: true,
      houseboat: true,
      residential: true,
      semidetached_house: true,
      static_caravan: true
    };
    var publicKeys = {
      amenity: true,
      craft: true,
      historic: true,
      leisure: true,
      office: true,
      shop: true,
      tourism: true
    };
    var personalTags = {
      "contact:email": true,
      "contact:fax": true,
      "contact:phone": true,
      email: true,
      fax: true,
      phone: true
    };
    var validation = function checkPrivateData(entity2) {
      var tags = entity2.tags;
      if (!tags.building || !privateBuildingValues[tags.building])
        return [];
      var keepTags = {};
      for (var k in tags) {
        if (publicKeys[k])
          return [];
        if (!personalTags[k]) {
          keepTags[k] = tags[k];
        }
      }
      var tagDiff = utilTagDiff(tags, keepTags);
      if (!tagDiff.length)
        return [];
      var fixID = tagDiff.length === 1 ? "remove_tag" : "remove_tags";
      return [new validationIssue({
        type: type3,
        severity: "warning",
        message: showMessage,
        reference: showReference,
        entityIds: [entity2.id],
        dynamicFixes: function dynamicFixes() {
          return [new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix." + fixID + ".title"),
            onClick: function onClick(context) {
              context.perform(doUpgrade, _t("issues.fix.upgrade_tags.annotation"));
            }
          })];
        }
      })];
      function doUpgrade(graph3) {
        var currEntity = graph3.hasEntity(entity2.id);
        if (!currEntity)
          return graph3;
        var newTags = Object.assign({}, currEntity.tags);
        tagDiff.forEach(function(diff) {
          if (diff.type === "-") {
            delete newTags[diff.key];
          } else if (diff.type === "+") {
            newTags[diff.key] = diff.newVal;
          }
        });
        return actionChangeTags(currEntity.id, newTags)(graph3);
      }
      function showMessage(context) {
        var currEntity = context.hasEntity(this.entityIds[0]);
        if (!currEntity)
          return "";
        return _t.html("issues.private_data.contact.message", {
          feature: utilDisplayLabel(currEntity, context.graph())
        });
      }
      function showReference(selection2) {
        var enter = selection2.selectAll(".issue-reference").data([0]).enter();
        enter.append("div").attr("class", "issue-reference").html(_t.html("issues.private_data.reference"));
        enter.append("strong").html(_t.html("issues.suggested"));
        enter.append("table").attr("class", "tagDiff-table").selectAll(".tagDiff-row").data(tagDiff).enter().append("tr").attr("class", "tagDiff-row").append("td").attr("class", function(d) {
          var klass = d.type === "+" ? "add" : "remove";
          return "tagDiff-cell tagDiff-cell-" + klass;
        }).html(function(d) {
          return d.display;
        });
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/operations/index.js
  var operations_exports = {};
  __export(operations_exports, {
    operationCircularize: function() {
      return operationCircularize;
    },
    operationContinue: function() {
      return operationContinue;
    },
    operationCopy: function() {
      return operationCopy;
    },
    operationCycleHighwayTag: function() {
      return operationCycleHighwayTag;
    },
    operationDelete: function() {
      return operationDelete;
    },
    operationDisconnect: function() {
      return operationDisconnect;
    },
    operationDowngrade: function() {
      return operationDowngrade;
    },
    operationExtract: function() {
      return operationExtract;
    },
    operationMerge: function() {
      return operationMerge;
    },
    operationMove: function() {
      return operationMove;
    },
    operationOrthogonalize: function() {
      return operationOrthogonalize;
    },
    operationPaste: function() {
      return operationPaste;
    },
    operationReflectLong: function() {
      return operationReflectLong;
    },
    operationReflectShort: function() {
      return operationReflectShort;
    },
    operationReverse: function() {
      return operationReverse;
    },
    operationRotate: function() {
      return operationRotate;
    },
    operationSplit: function() {
      return operationSplit;
    },
    operationStraighten: function() {
      return operationStraighten;
    }
  });

  // modules/operations/continue.js
  function operationContinue(context, selectedIDs) {
    var _entities = selectedIDs.map(function(id2) {
      return context.graph().entity(id2);
    });
    var _geometries = Object.assign({
      line: [],
      vertex: []
    }, utilArrayGroupBy(_entities, function(entity2) {
      return entity2.geometry(context.graph());
    }));
    var _vertex = _geometries.vertex.length && _geometries.vertex[0];
    function candidateWays() {
      return _vertex ? context.graph().parentWays(_vertex).filter(function(parent2) {
        return parent2.geometry(context.graph()) === "line" && !parent2.isClosed() && parent2.affix(_vertex.id) && (_geometries.line.length === 0 || _geometries.line[0] === parent2);
      }) : [];
    }
    var _candidates = candidateWays();
    var operation = function operation2() {
      var candidate = _candidates[0];
      context.enter(modeDrawLine(context, candidate.id, context.graph(), "line", candidate.affix(_vertex.id), true));
    };
    operation.relatedEntityIds = function() {
      return _candidates.length ? [_candidates[0].id] : [];
    };
    operation.available = function() {
      return _geometries.vertex.length === 1 && _geometries.line.length <= 1 && !context.features().hasHiddenConnections(_vertex, context.graph());
    };
    operation.disabled = function() {
      if (_candidates.length === 0) {
        return "not_eligible";
      } else if (_candidates.length > 1) {
        return "multiple";
      }
      return false;
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.continue." + disable) : _t("operations.continue.description");
    };
    operation.annotation = function() {
      return _t("operations.continue.annotation.line");
    };
    operation.id = "continue";
    operation.keys = [_t("operations.continue.key")];
    operation.title = _t("operations.continue.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/cycle_highway_tag.js
  function operationCycleHighwayTag(context, selectedIDs) {
    var _entityID = selectedIDs[0];
    var _entity = context.entity(_entityID);
    var _prevSelectedIDs;
    var ROAD_TYPES = ["residential", "service", "track", "unclassified", "tertiary"];
    var updateHighwayTag = function updateHighwayTag2(tags) {
      var idx = tags.highway ? ROAD_TYPES.indexOf(tags.highway) : -1;
      tags.highway = ROAD_TYPES[(idx + 1) % ROAD_TYPES.length];
      if (tags.highway === "track") {
        tags.surface = "unpaved";
      } else {
        delete tags.surface;
      }
    };
    var operation = function operation2() {
      _entity = context.entity(_entityID);
      var sameSelection;
      if (_prevSelectedIDs) {
        sameSelection = _prevSelectedIDs ? _prevSelectedIDs[0] === selectedIDs[0] : false;
      }
      var tags = Object.assign({}, _entity.tags);
      updateHighwayTag(tags);
      _prevSelectedIDs = selectedIDs;
      if (sameSelection && context.history().peekAnnotation() === operation2.annotation()) {
        context.replace(actionChangeTags(_entityID, tags), operation2.annotation());
      } else {
        context.perform(actionChangeTags(_entityID, tags), operation2.annotation());
      }
    };
    operation.available = function() {
      return selectedIDs.length === 1 && _entity.type === "way" && new Set(_entity.nodes).size > 1;
    };
    operation.disabled = function() {
      if (Object.keys(_entity.tags).length > 0 && !_entity.tags.highway) {
        return "restriction";
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.cycle_highway_tag." + disable) : _t("operations.cycle_highway_tag.description");
    };
    operation.annotation = function() {
      return _t("operations.cycle_highway_tag.annotation");
    };
    operation.id = "cycle_highway_tag";
    operation.keys = ["\u21E7" + _t("operations.cycle_highway_tag.key")];
    operation.title = _t("operations.cycle_highway_tag.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/copy.js
  function operationCopy(context, selectedIDs) {
    function getFilteredIdsToCopy() {
      return selectedIDs.filter(function(selectedID) {
        var entity2 = context.graph().hasEntity(selectedID);
        return entity2.hasInterestingTags() || entity2.geometry(context.graph()) !== "vertex";
      });
    }
    var operation = function operation2() {
      var graph3 = context.graph();
      var selected = groupEntities(getFilteredIdsToCopy(), graph3);
      var canCopy = [];
      var skip = {};
      var entity2;
      var i2;
      for (i2 = 0; i2 < selected.relation.length; i2++) {
        entity2 = selected.relation[i2];
        if (!skip[entity2.id] && entity2.isComplete(graph3)) {
          canCopy.push(entity2.id);
          skip = getDescendants(entity2.id, graph3, skip);
        }
      }
      for (i2 = 0; i2 < selected.way.length; i2++) {
        entity2 = selected.way[i2];
        if (!skip[entity2.id]) {
          canCopy.push(entity2.id);
          skip = getDescendants(entity2.id, graph3, skip);
        }
      }
      for (i2 = 0; i2 < selected.node.length; i2++) {
        entity2 = selected.node[i2];
        if (!skip[entity2.id]) {
          canCopy.push(entity2.id);
        }
      }
      context.copyIDs(canCopy);
      if (_point && (canCopy.length !== 1 || graph3.entity(canCopy[0]).type !== "node")) {
        context.copyLonLat(context.projection.invert(_point));
      } else {
        context.copyLonLat(null);
      }
    };
    function groupEntities(ids, graph3) {
      var entities = ids.map(function(id2) {
        return graph3.entity(id2);
      });
      return Object.assign({
        relation: [],
        way: [],
        node: []
      }, utilArrayGroupBy(entities, "type"));
    }
    function getDescendants(id2, graph3, descendants) {
      var entity2 = graph3.entity(id2);
      var children2;
      descendants = descendants || {};
      if (entity2.type === "relation") {
        children2 = entity2.members.map(function(m) {
          return m.id;
        });
      } else if (entity2.type === "way") {
        children2 = entity2.nodes;
      } else {
        children2 = [];
      }
      for (var i2 = 0; i2 < children2.length; i2++) {
        if (!descendants[children2[i2]]) {
          descendants[children2[i2]] = true;
          descendants = getDescendants(children2[i2], graph3, descendants);
        }
      }
      return descendants;
    }
    operation.available = function() {
      return getFilteredIdsToCopy().length > 0;
    };
    operation.disabled = function() {
      var extent6 = utilTotalExtent(getFilteredIdsToCopy(), context.graph());
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && extent6.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      }
      return false;
    };
    operation.availableForKeypress = function() {
      var selection2 = window.getSelection && window.getSelection();
      return !selection2 || !selection2.toString();
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.copy." + disable, {
        n: selectedIDs.length
      }) : _t("operations.copy.description", {
        n: selectedIDs.length
      });
    };
    operation.annotation = function() {
      return _t("operations.copy.annotation", {
        n: selectedIDs.length
      });
    };
    var _point;
    operation.point = function(val) {
      _point = val;
      return operation;
    };
    operation.id = "copy";
    operation.keys = [uiCmd("\u2318C")];
    operation.title = _t("operations.copy.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/disconnect.js
  function operationDisconnect(context, selectedIDs) {
    var _vertexIDs = [];
    var _wayIDs = [];
    var _otherIDs = [];
    var _actions = [];
    selectedIDs.forEach(function(id2) {
      var entity2 = context.entity(id2);
      if (entity2.type === "way") {
        _wayIDs.push(id2);
      } else if (entity2.geometry(context.graph()) === "vertex") {
        _vertexIDs.push(id2);
      } else {
        _otherIDs.push(id2);
      }
    });
    var _coords, _descriptionID = "", _annotationID = "features";
    var _disconnectingVertexIds = [];
    var _disconnectingWayIds = [];
    if (_vertexIDs.length > 0) {
      _disconnectingVertexIds = _vertexIDs;
      _vertexIDs.forEach(function(vertexID) {
        var action = actionDisconnect(vertexID);
        if (_wayIDs.length > 0) {
          var waysIDsForVertex = _wayIDs.filter(function(wayID) {
            var way = context.entity(wayID);
            return way.nodes.indexOf(vertexID) !== -1;
          });
          action.limitWays(waysIDsForVertex);
        }
        _actions.push(action);
        _disconnectingWayIds = _disconnectingWayIds.concat(context.graph().parentWays(context.graph().entity(vertexID)).map(function(d) {
          return d.id;
        }));
      });
      _disconnectingWayIds = utilArrayUniq(_disconnectingWayIds).filter(function(id2) {
        return _wayIDs.indexOf(id2) === -1;
      });
      _descriptionID += _actions.length === 1 ? "single_point." : "multiple_points.";
      if (_wayIDs.length === 1) {
        _descriptionID += "single_way." + context.graph().geometry(_wayIDs[0]);
      } else {
        _descriptionID += _wayIDs.length === 0 ? "no_ways" : "multiple_ways";
      }
    } else if (_wayIDs.length > 0) {
      var ways = _wayIDs.map(function(id2) {
        return context.entity(id2);
      });
      var nodes = utilGetAllNodes(_wayIDs, context.graph());
      _coords = nodes.map(function(n2) {
        return n2.loc;
      });
      var sharedActions = [];
      var sharedNodes = [];
      var unsharedActions = [];
      var unsharedNodes = [];
      nodes.forEach(function(node) {
        var action = actionDisconnect(node.id).limitWays(_wayIDs);
        if (action.disabled(context.graph()) !== "not_connected") {
          var count = 0;
          for (var i2 in ways) {
            var way = ways[i2];
            if (way.nodes.indexOf(node.id) !== -1) {
              count += 1;
            }
            if (count > 1)
              break;
          }
          if (count > 1) {
            sharedActions.push(action);
            sharedNodes.push(node);
          } else {
            unsharedActions.push(action);
            unsharedNodes.push(node);
          }
        }
      });
      _descriptionID += "no_points.";
      _descriptionID += _wayIDs.length === 1 ? "single_way." : "multiple_ways.";
      if (sharedActions.length) {
        _actions = sharedActions;
        _disconnectingVertexIds = sharedNodes.map(function(node) {
          return node.id;
        });
        _descriptionID += "conjoined";
        _annotationID = "from_each_other";
      } else {
        _actions = unsharedActions;
        _disconnectingVertexIds = unsharedNodes.map(function(node) {
          return node.id;
        });
        if (_wayIDs.length === 1) {
          _descriptionID += context.graph().geometry(_wayIDs[0]);
        } else {
          _descriptionID += "separate";
        }
      }
    }
    var _extent = utilTotalExtent(_disconnectingVertexIds, context.graph());
    var operation = function operation2() {
      context.perform(function(graph3) {
        return _actions.reduce(function(graph4, action) {
          return action(graph4);
        }, graph3);
      }, operation2.annotation());
      context.validator().validate();
    };
    operation.relatedEntityIds = function() {
      if (_vertexIDs.length) {
        return _disconnectingWayIds;
      }
      return _disconnectingVertexIds;
    };
    operation.available = function() {
      if (_actions.length === 0)
        return false;
      if (_otherIDs.length !== 0)
        return false;
      if (_vertexIDs.length !== 0 && _wayIDs.length !== 0 && !_wayIDs.every(function(wayID) {
        return _vertexIDs.some(function(vertexID) {
          var way = context.entity(wayID);
          return way.nodes.indexOf(vertexID) !== -1;
        });
      }))
        return false;
      return true;
    };
    operation.disabled = function() {
      var reason;
      for (var actionIndex in _actions) {
        reason = _actions[actionIndex].disabled(context.graph());
        if (reason)
          return reason;
      }
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && _extent && _extent.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large." + ((_vertexIDs.length ? _vertexIDs : _wayIDs).length === 1 ? "single" : "multiple");
      } else if (_coords && someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = _coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      if (disable) {
        return _t("operations.disconnect." + disable);
      }
      return _t("operations.disconnect.description." + _descriptionID);
    };
    operation.annotation = function() {
      return _t("operations.disconnect.annotation." + _annotationID);
    };
    operation.id = "disconnect";
    operation.keys = [_t("operations.disconnect.key")];
    operation.title = _t("operations.disconnect.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/downgrade.js
  function operationDowngrade(context, selectedIDs) {
    var _affectedFeatureCount = 0;
    var _downgradeType = downgradeTypeForEntityIDs(selectedIDs);
    var _multi = _affectedFeatureCount === 1 ? "single" : "multiple";
    function downgradeTypeForEntityIDs(entityIds) {
      var downgradeType;
      _affectedFeatureCount = 0;
      for (var i2 in entityIds) {
        var entityID = entityIds[i2];
        var type3 = downgradeTypeForEntityID(entityID);
        if (type3) {
          _affectedFeatureCount += 1;
          if (downgradeType && type3 !== downgradeType) {
            if (downgradeType !== "generic" && type3 !== "generic") {
              downgradeType = "building_address";
            } else {
              downgradeType = "generic";
            }
          } else {
            downgradeType = type3;
          }
        }
      }
      return downgradeType;
    }
    function downgradeTypeForEntityID(entityID) {
      var graph3 = context.graph();
      var entity2 = graph3.entity(entityID);
      var preset = _mainPresetIndex.match(entity2, graph3);
      if (!preset || preset.isFallback())
        return null;
      if (entity2.type === "node" && preset.id !== "address" && Object.keys(entity2.tags).some(function(key) {
        return key.match(/^addr:.{1,}/);
      })) {
        return "address";
      }
      var geometry6 = entity2.geometry(graph3);
      if (geometry6 === "area" && entity2.tags.building && !preset.tags.building) {
        return "building";
      }
      if (geometry6 === "vertex" && Object.keys(entity2.tags).length) {
        return "generic";
      }
      return null;
    }
    var buildingKeysToKeep = ["architect", "building", "height", "layer", "source", "type", "wheelchair"];
    var addressKeysToKeep = ["source"];
    var operation = function operation2() {
      context.perform(function(graph3) {
        for (var i2 in selectedIDs) {
          var entityID = selectedIDs[i2];
          var type3 = downgradeTypeForEntityID(entityID);
          if (!type3)
            continue;
          var tags = Object.assign({}, graph3.entity(entityID).tags);
          for (var key in tags) {
            if (type3 === "address" && addressKeysToKeep.indexOf(key) !== -1)
              continue;
            if (type3 === "building") {
              if (buildingKeysToKeep.indexOf(key) !== -1 || key.match(/^building:.{1,}/) || key.match(/^roof:.{1,}/))
                continue;
            }
            if (type3 !== "generic") {
              if (key.match(/^addr:.{1,}/) || key.match(/^source:.{1,}/))
                continue;
            }
            delete tags[key];
          }
          graph3 = actionChangeTags(entityID, tags)(graph3);
        }
        return graph3;
      }, operation2.annotation());
      context.validator().validate();
      context.enter(modeSelect(context, selectedIDs));
    };
    operation.available = function() {
      return _downgradeType;
    };
    operation.disabled = function() {
      if (selectedIDs.some(hasWikidataTag)) {
        return "has_wikidata_tag";
      }
      return false;
      function hasWikidataTag(id2) {
        var entity2 = context.entity(id2);
        return entity2.tags.wikidata && entity2.tags.wikidata.trim().length > 0;
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.downgrade." + disable + "." + _multi) : _t("operations.downgrade.description." + _downgradeType);
    };
    operation.annotation = function() {
      var suffix;
      if (_downgradeType === "building_address") {
        suffix = "generic";
      } else {
        suffix = _downgradeType;
      }
      return _t("operations.downgrade.annotation." + suffix, {
        n: _affectedFeatureCount
      });
    };
    operation.id = "downgrade";
    operation.keys = [uiCmd("\u232B")];
    operation.title = _t("operations.downgrade.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/extract.js
  function operationExtract(context, selectedIDs) {
    var _amount = selectedIDs.length === 1 ? "single" : "multiple";
    var _geometries = utilArrayUniq(selectedIDs.map(function(entityID) {
      return context.graph().hasEntity(entityID) && context.graph().geometry(entityID);
    }).filter(Boolean));
    var _geometryID = _geometries.length === 1 ? _geometries[0] : "feature";
    var _extent;
    var _actions = selectedIDs.map(function(entityID) {
      var graph3 = context.graph();
      var entity2 = graph3.hasEntity(entityID);
      if (!entity2 || !entity2.hasInterestingTags())
        return null;
      if (entity2.type === "node" && graph3.parentWays(entity2).length === 0)
        return null;
      if (entity2.type !== "node") {
        var preset = _mainPresetIndex.match(entity2, graph3);
        if (preset.geometry.indexOf("point") === -1)
          return null;
      }
      _extent = _extent ? _extent.extend(entity2.extent(graph3)) : entity2.extent(graph3);
      return actionExtract(entityID, context.projection);
    }).filter(Boolean);
    var operation = function operation2() {
      var combinedAction = function combinedAction2(graph3) {
        _actions.forEach(function(action) {
          graph3 = action(graph3);
        });
        return graph3;
      };
      context.perform(combinedAction, operation2.annotation());
      var extractedNodeIDs = _actions.map(function(action) {
        return action.getExtractedNodeID();
      });
      context.enter(modeSelect(context, extractedNodeIDs));
    };
    operation.available = function() {
      return _actions.length && selectedIDs.length === _actions.length;
    };
    operation.disabled = function() {
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      if (!allowLargeEdits && _extent && _extent.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (selectedIDs.some(function(entityID) {
        return context.graph().geometry(entityID) === "vertex" && context.hasHiddenConnections(entityID);
      })) {
        return "connected_to_hidden";
      }
      return false;
    };
    operation.tooltip = function() {
      var disableReason = operation.disabled();
      if (disableReason) {
        return _t("operations.extract." + disableReason + "." + _amount);
      } else {
        return _t("operations.extract.description." + _geometryID + "." + _amount);
      }
    };
    operation.annotation = function() {
      return _t("operations.extract.annotation", {
        n: selectedIDs.length
      });
    };
    operation.id = "extract";
    operation.keys = [_t("operations.extract.key")];
    operation.title = _t("operations.extract.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/merge.js
  function operationMerge(context, selectedIDs) {
    var _action = getAction();
    function getAction() {
      var join = actionJoin(selectedIDs);
      if (!join.disabled(context.graph()))
        return join;
      var merge3 = actionMerge(selectedIDs);
      if (!merge3.disabled(context.graph()))
        return merge3;
      var mergePolygon = actionMergePolygon(selectedIDs);
      if (!mergePolygon.disabled(context.graph()))
        return mergePolygon;
      var mergeNodes = actionMergeNodes(selectedIDs);
      if (!mergeNodes.disabled(context.graph()))
        return mergeNodes;
      if (join.disabled(context.graph()) !== "not_eligible")
        return join;
      if (merge3.disabled(context.graph()) !== "not_eligible")
        return merge3;
      if (mergePolygon.disabled(context.graph()) !== "not_eligible")
        return mergePolygon;
      return mergeNodes;
    }
    var operation = function operation2() {
      if (operation2.disabled())
        return;
      context.perform(_action, operation2.annotation());
      context.validator().validate();
      var resultIDs = selectedIDs.filter(context.hasEntity);
      if (resultIDs.length > 1) {
        var interestingIDs = resultIDs.filter(function(id2) {
          return context.entity(id2).hasInterestingTags();
        });
        if (interestingIDs.length)
          resultIDs = interestingIDs;
      }
      context.enter(modeSelect(context, resultIDs));
    };
    operation.available = function() {
      return selectedIDs.length >= 2;
    };
    operation.disabled = function() {
      var actionDisabled = _action.disabled(context.graph());
      if (actionDisabled)
        return actionDisabled;
      var osm = context.connection();
      if (osm && _action.resultingWayNodesLength && _action.resultingWayNodesLength(context.graph()) > osm.maxWayNodes()) {
        return "too_many_vertices";
      }
      return false;
    };
    operation.tooltip = function() {
      var disabled = operation.disabled();
      if (disabled) {
        if (disabled === "conflicting_relations") {
          return _t("operations.merge.conflicting_relations");
        }
        if (disabled === "restriction" || disabled === "connectivity") {
          return _t("operations.merge.damage_relation", {
            relation: _mainPresetIndex.item("type/" + disabled).name()
          });
        }
        return _t("operations.merge." + disabled);
      }
      return _t("operations.merge.description");
    };
    operation.annotation = function() {
      return _t("operations.merge.annotation", {
        n: selectedIDs.length
      });
    };
    operation.id = "merge";
    operation.keys = [_t("operations.merge.key")];
    operation.title = _t("operations.merge.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/paste.js
  function operationPaste(context) {
    var _pastePoint;
    var operation = function operation2() {
      if (!_pastePoint)
        return;
      var oldIDs = context.copyIDs();
      if (!oldIDs.length)
        return;
      var projection2 = context.projection;
      var extent6 = new Extent();
      var oldGraph = context.copyGraph();
      var newIDs = [];
      var action = actionCopyEntities(oldIDs, oldGraph);
      context.perform(action);
      var copies = action.copies();
      var originals = new Set();
      Object.values(copies).forEach(function(entity2) {
        originals.add(entity2.id);
      });
      for (var id2 in copies) {
        var oldEntity = oldGraph.entity(id2);
        var newEntity = copies[id2];
        extent6 = extent6.extend(oldEntity.extent(oldGraph));
        var parents = context.graph().parentWays(newEntity);
        var parentCopied = parents.some(function(parent2) {
          return originals.has(parent2.id);
        });
        if (!parentCopied) {
          newIDs.push(newEntity.id);
        }
      }
      var copyPoint = context.copyLonLat() && projection2(context.copyLonLat()) || projection2(extent6.center());
      var delta = vecSubtract(_pastePoint, copyPoint);
      context.replace(actionMove(newIDs, delta, projection2), operation2.annotation());
      context.enter(modeSelect(context, newIDs));
    };
    operation.point = function(val) {
      _pastePoint = val;
      return operation;
    };
    operation.available = function() {
      return context.mode().id === "browse";
    };
    operation.disabled = function() {
      return !context.copyIDs().length;
    };
    operation.tooltip = function() {
      var oldGraph = context.copyGraph();
      var ids = context.copyIDs();
      if (!ids.length) {
        return _t("operations.paste.nothing_copied");
      }
      return _t("operations.paste.description", {
        feature: utilDisplayLabel(oldGraph.entity(ids[0]), oldGraph),
        n: ids.length
      });
    };
    operation.annotation = function() {
      var ids = context.copyIDs();
      return _t("operations.paste.annotation", {
        n: ids.length
      });
    };
    operation.id = "paste";
    operation.keys = [uiCmd("\u2318V")];
    operation.title = _t("operations.paste.title");
    return operation;
  }

  // modules/operations/reverse.js
  function operationReverse(context, selectedIDs) {
    var operation = function operation2() {
      context.perform(function combinedReverseAction(graph3) {
        actions().forEach(function(action) {
          graph3 = action(graph3);
        });
        return graph3;
      }, operation2.annotation());
      context.validator().validate();
    };
    function actions(situation) {
      return selectedIDs.map(function(entityID) {
        var entity2 = context.hasEntity(entityID);
        if (!entity2)
          return null;
        if (situation === "toolbar") {
          if (entity2.type === "way" && !entity2.isOneWay() && !entity2.isSided())
            return null;
        }
        var geometry6 = entity2.geometry(context.graph());
        if (entity2.type !== "node" && geometry6 !== "line")
          return null;
        var action = actionReverse(entityID);
        if (action.disabled(context.graph()))
          return null;
        return action;
      }).filter(Boolean);
    }
    function reverseTypeID() {
      var acts = actions();
      var nodeActionCount = acts.filter(function(act) {
        var entity2 = context.hasEntity(act.entityID());
        return entity2 && entity2.type === "node";
      }).length;
      if (nodeActionCount === 0)
        return "line";
      if (nodeActionCount === acts.length)
        return "point";
      return "feature";
    }
    operation.available = function(situation) {
      return actions(situation).length > 0;
    };
    operation.disabled = function() {
      return false;
    };
    operation.tooltip = function() {
      return _t("operations.reverse.description." + reverseTypeID());
    };
    operation.annotation = function() {
      var acts = actions();
      return _t("operations.reverse.annotation." + reverseTypeID(), {
        n: acts.length
      });
    };
    operation.id = "reverse";
    operation.keys = [_t("operations.reverse.key")];
    operation.title = _t("operations.reverse.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/split.js
  function operationSplit(context, selectedIDs) {
    var _vertexIds = selectedIDs.filter(function(id2) {
      return context.graph().geometry(id2) === "vertex";
    });
    var _selectedWayIds = selectedIDs.filter(function(id2) {
      var entity2 = context.graph().hasEntity(id2);
      return entity2 && entity2.type === "way";
    });
    var _isAvailable = _vertexIds.length > 0 && _vertexIds.length + _selectedWayIds.length === selectedIDs.length;
    var _action = actionSplit(_vertexIds);
    var _ways = [];
    var _geometry = "feature";
    var _waysAmount = "single";
    var _nodesAmount = _vertexIds.length === 1 ? "single" : "multiple";
    if (_isAvailable) {
      if (_selectedWayIds.length)
        _action.limitWays(_selectedWayIds);
      _ways = _action.ways(context.graph());
      var geometries = {};
      _ways.forEach(function(way) {
        geometries[way.geometry(context.graph())] = true;
      });
      if (Object.keys(geometries).length === 1) {
        _geometry = Object.keys(geometries)[0];
      }
      _waysAmount = _ways.length === 1 ? "single" : "multiple";
    }
    var operation = function operation2() {
      var difference = context.perform(_action, operation2.annotation());
      var idsToSelect = _vertexIds.concat(difference.extantIDs().filter(function(id2) {
        return context.entity(id2).type === "way";
      }));
      context.enter(modeSelect(context, idsToSelect));
    };
    operation.relatedEntityIds = function() {
      return _selectedWayIds.length ? [] : _ways.map(function(way) {
        return way.id;
      });
    };
    operation.available = function() {
      return _isAvailable;
    };
    operation.disabled = function() {
      var reason = _action.disabled(context.graph());
      if (reason) {
        return reason;
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      }
      return false;
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      if (disable)
        return _t("operations.split." + disable);
      return _t("operations.split.description." + _geometry + "." + _waysAmount + "." + _nodesAmount + "_node");
    };
    operation.annotation = function() {
      return _t("operations.split.annotation." + _geometry, {
        n: _ways.length
      });
    };
    operation.id = "split";
    operation.keys = [_t("operations.split.key")];
    operation.title = _t("operations.split.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/operations/straighten.js
  function operationStraighten(context, selectedIDs) {
    var _wayIDs = selectedIDs.filter(function(id2) {
      return id2.charAt(0) === "w";
    });
    var _nodeIDs = selectedIDs.filter(function(id2) {
      return id2.charAt(0) === "n";
    });
    var _amount = (_wayIDs.length ? _wayIDs : _nodeIDs).length === 1 ? "single" : "multiple";
    var _nodes = utilGetAllNodes(selectedIDs, context.graph());
    var _coords = _nodes.map(function(n2) {
      return n2.loc;
    });
    var _extent = utilTotalExtent(selectedIDs, context.graph());
    var _action = chooseAction();
    var _geometry;
    function chooseAction() {
      if (_wayIDs.length === 0 && _nodeIDs.length > 2) {
        _geometry = "point";
        return actionStraightenNodes(_nodeIDs, context.projection);
      } else if (_wayIDs.length > 0 && (_nodeIDs.length === 0 || _nodeIDs.length === 2)) {
        var startNodeIDs = [];
        var endNodeIDs = [];
        for (var i2 = 0; i2 < selectedIDs.length; i2++) {
          var entity2 = context.entity(selectedIDs[i2]);
          if (entity2.type === "node") {
            continue;
          } else if (entity2.type !== "way" || entity2.isClosed()) {
            return null;
          }
          startNodeIDs.push(entity2.first());
          endNodeIDs.push(entity2.last());
        }
        startNodeIDs = startNodeIDs.filter(function(n2) {
          return startNodeIDs.indexOf(n2) === startNodeIDs.lastIndexOf(n2);
        });
        endNodeIDs = endNodeIDs.filter(function(n2) {
          return endNodeIDs.indexOf(n2) === endNodeIDs.lastIndexOf(n2);
        });
        if (utilArrayDifference(startNodeIDs, endNodeIDs).length + utilArrayDifference(endNodeIDs, startNodeIDs).length !== 2)
          return null;
        var wayNodeIDs = utilGetAllNodes(_wayIDs, context.graph()).map(function(node) {
          return node.id;
        });
        if (wayNodeIDs.length <= 2)
          return null;
        if (_nodeIDs.length === 2 && (wayNodeIDs.indexOf(_nodeIDs[0]) === -1 || wayNodeIDs.indexOf(_nodeIDs[1]) === -1))
          return null;
        if (_nodeIDs.length) {
          _extent = utilTotalExtent(_nodeIDs, context.graph());
        }
        _geometry = "line";
        return actionStraightenWay(selectedIDs, context.projection);
      }
      return null;
    }
    function operation() {
      if (!_action)
        return;
      context.perform(_action, operation.annotation());
      window.setTimeout(function() {
        context.validator().validate();
      }, 300);
    }
    operation.available = function() {
      return Boolean(_action);
    };
    operation.disabled = function() {
      var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
      var reason = _action.disabled(context.graph());
      if (reason) {
        return reason;
      } else if (!allowLargeEdits && _extent.percentContainedIn(context.map().extent()) < 0.8) {
        return "too_large";
      } else if (someMissing()) {
        return "not_downloaded";
      } else if (selectedIDs.some(context.hasHiddenConnections)) {
        return "connected_to_hidden";
      }
      return false;
      function someMissing() {
        if (context.inIntro())
          return false;
        var osm = context.connection();
        if (osm) {
          var missing = _coords.filter(function(loc) {
            return !osm.isDataLoaded(loc);
          });
          if (missing.length) {
            missing.forEach(function(loc) {
              context.loadTileAtLoc(loc);
            });
            return true;
          }
        }
        return false;
      }
    };
    operation.tooltip = function() {
      var disable = operation.disabled();
      return disable ? _t("operations.straighten." + disable + "." + _amount) : _t("operations.straighten.description." + _geometry + (_wayIDs.length === 1 ? "" : "s"));
    };
    operation.annotation = function() {
      return _t("operations.straighten.annotation." + _geometry, {
        n: _wayIDs.length ? _wayIDs.length : _nodeIDs.length
      });
    };
    operation.id = "straighten";
    operation.keys = [_t("operations.straighten.key")];
    operation.title = _t("operations.straighten.title");
    operation.behavior = behaviorOperation(context).which(operation);
    return operation;
  }

  // modules/validations/y_shaped_connection.js
  function validationYShapedConnection(context) {
    var type3 = "y_shaped_connection";
    var SHORT_EDGE_THD_METERS = 12;
    var NON_FLAT_ANGLE_THD_DEGREES = 5;
    var relatedHighways = {
      residential: true,
      service: true,
      track: true,
      unclassified: true,
      tertiary: true,
      secondary: true,
      primary: true,
      living_street: true,
      cycleway: true,
      trunk: true,
      motorway: true,
      road: true,
      raceway: true
    };
    function isTaggedAsRelatedHighway(entity2) {
      return relatedHighways[entity2.tags.highway];
    }
    function getRelatedHighwayParents(node, graph3) {
      var parentWays2 = graph3.parentWays(node);
      return parentWays2.filter(function(way) {
        return isTaggedAsRelatedHighway(way);
      });
    }
    function createIssueAndFixForNode(node, context2) {
      var deletable = !operationDelete(context2, [node.id]).disabled();
      var fix;
      if (deletable) {
        fix = new validationIssueFix({
          icon: "iD-operation-delete",
          title: _t("issues.fix.delete_node_around_conn.title"),
          entityIds: [node.id],
          onClick: function onClick() {
            var id2 = this.entityIds[0];
            var operation = operationDelete(context2, [id2]);
            if (!operation.disabled()) {
              operation();
            }
          }
        });
      } else {
        fix = new validationIssueFix({
          icon: "iD-operation-move",
          title: _t("issues.fix.move_node_around_conn.title"),
          entityIds: [node.id]
        });
      }
      return new validationIssue({
        type: type3,
        severity: "warning",
        message: function message() {
          return _t("issues.y_shaped_connection.message");
        },
        reference: function reference(selection2) {
          selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").text(_t("issues.y_shaped_connection.reference"));
        },
        entityIds: [node.id],
        fixes: [fix]
      });
    }
    function isShortEdgeAndYShapedConnection(graph3, way, connNodeIdx, edgeNodeIdx) {
      if (connNodeIdx <= 0 || connNodeIdx >= way.nodes.length - 1)
        return false;
      var connNid = way.nodes[connNodeIdx];
      var connNode = graph3.entity(connNid);
      var pways = getRelatedHighwayParents(connNode, graph3);
      if (pways.length < 2)
        return false;
      var edgeNid = way.nodes[edgeNodeIdx];
      var edgeNode = graph3.entity(edgeNid);
      var edgeLen = geoSphericalDistance(connNode.loc, edgeNode.loc);
      if (edgeLen > SHORT_EDGE_THD_METERS)
        return false;
      var prevEdgeAngle = 0;
      var nextEdgeAngle = 0;
      var angleBetweenEdges = 0;
      var otherNodeIdx = connNodeIdx < edgeNodeIdx ? connNodeIdx - 1 : connNodeIdx + 1;
      var otherNid = way.nodes[otherNodeIdx];
      var otherNode = graph3.entity(otherNid);
      var other = context.projection(otherNode.loc);
      var conn = context.projection(connNode.loc);
      var edge = context.projection(edgeNode.loc);
      if (otherNodeIdx < edgeNodeIdx) {
        prevEdgeAngle = vecAngle(other, conn);
        nextEdgeAngle = vecAngle(conn, edge);
        angleBetweenEdges = Math.abs(nextEdgeAngle - prevEdgeAngle) / Math.PI * 180;
      } else {
        prevEdgeAngle = vecAngle(edge, conn);
        nextEdgeAngle = vecAngle(conn, other);
        angleBetweenEdges = Math.abs(nextEdgeAngle - prevEdgeAngle) / Math.PI * 180;
      }
      return angleBetweenEdges > NON_FLAT_ANGLE_THD_DEGREES;
    }
    var validation = function validation2(entity2, graph3) {
      if (entity2.type !== "node")
        return [];
      var pways = getRelatedHighwayParents(entity2, graph3);
      if (pways.length !== 1 || !pways[0].id.startsWith("w-"))
        return [];
      var issues = [];
      var way = pways[0];
      var idx = way.nodes.indexOf(entity2.id);
      if (idx <= 0)
        return issues;
      if (isShortEdgeAndYShapedConnection(graph3, way, idx - 1, idx) || isShortEdgeAndYShapedConnection(graph3, way, idx + 1, idx)) {
        issues.push(createIssueAndFixForNode(entity2, context));
      }
      return issues;
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/suspicious_name.js
  function validationSuspiciousName() {
    var type3 = "suspicious_name";
    var keysToTestForGenericValues = ["aerialway", "aeroway", "amenity", "building", "craft", "highway", "leisure", "railway", "man_made", "office", "shop", "tourism", "waterway"];
    var _waitingForNsi = false;
    function isGenericMatchInNsi(tags) {
      var nsi = services.nsi;
      if (nsi) {
        _waitingForNsi = nsi.status() === "loading";
        if (!_waitingForNsi) {
          return nsi.isGenericName(tags);
        }
      }
      return false;
    }
    function nameMatchesRawTag(lowercaseName, tags) {
      for (var i2 = 0; i2 < keysToTestForGenericValues.length; i2++) {
        var key = keysToTestForGenericValues[i2];
        var val = tags[key];
        if (val) {
          val = val.toLowerCase();
          if (key === lowercaseName || val === lowercaseName || key.replace(/\_/g, " ") === lowercaseName || val.replace(/\_/g, " ") === lowercaseName) {
            return true;
          }
        }
      }
      return false;
    }
    function isGenericName2(name, tags) {
      name = name.toLowerCase();
      return nameMatchesRawTag(name, tags) || isGenericMatchInNsi(tags);
    }
    function makeGenericNameIssue(entityId, nameKey, genericName, langCode) {
      return new validationIssue({
        type: type3,
        subtype: "generic_name",
        severity: "warning",
        message: function message(context) {
          var entity2 = context.hasEntity(this.entityIds[0]);
          if (!entity2)
            return "";
          var preset = _mainPresetIndex.match(entity2, context.graph());
          var langName = langCode && _mainLocalizer.languageName(langCode);
          return _t.html("issues.generic_name.message" + (langName ? "_language" : ""), {
            feature: preset.name(),
            name: genericName,
            language: langName
          });
        },
        reference: showReference,
        entityIds: [entityId],
        hash: "".concat(nameKey, "=").concat(genericName),
        dynamicFixes: function dynamicFixes() {
          return [new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix.remove_the_name.title"),
            onClick: function onClick(context) {
              var entityId2 = this.issue.entityIds[0];
              var entity2 = context.entity(entityId2);
              var tags = Object.assign({}, entity2.tags);
              delete tags[nameKey];
              context.perform(actionChangeTags(entityId2, tags), _t("issues.fix.remove_generic_name.annotation"));
            }
          })];
        }
      });
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.generic_name.reference"));
      }
    }
    function makeIncorrectNameIssue(entityId, nameKey, incorrectName, langCode) {
      return new validationIssue({
        type: type3,
        subtype: "not_name",
        severity: "warning",
        message: function message(context) {
          var entity2 = context.hasEntity(this.entityIds[0]);
          if (!entity2)
            return "";
          var preset = _mainPresetIndex.match(entity2, context.graph());
          var langName = langCode && _mainLocalizer.languageName(langCode);
          return _t.html("issues.incorrect_name.message" + (langName ? "_language" : ""), {
            feature: preset.name(),
            name: incorrectName,
            language: langName
          });
        },
        reference: showReference,
        entityIds: [entityId],
        hash: "".concat(nameKey, "=").concat(incorrectName),
        dynamicFixes: function dynamicFixes() {
          return [new validationIssueFix({
            icon: "iD-operation-delete",
            title: _t.html("issues.fix.remove_the_name.title"),
            onClick: function onClick(context) {
              var entityId2 = this.issue.entityIds[0];
              var entity2 = context.entity(entityId2);
              var tags = Object.assign({}, entity2.tags);
              delete tags[nameKey];
              context.perform(actionChangeTags(entityId2, tags), _t("issues.fix.remove_mistaken_name.annotation"));
            }
          })];
        }
      });
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.generic_name.reference"));
      }
    }
    var validation = function checkGenericName(entity2) {
      var tags = entity2.tags;
      var hasWikidata = !!tags.wikidata || !!tags["brand:wikidata"] || !!tags["operator:wikidata"];
      if (hasWikidata)
        return [];
      var issues = [];
      var notNames2 = (tags["not:name"] || "").split(";");
      for (var key in tags) {
        var m = key.match(/^name(?:(?::)([a-zA-Z_-]+))?$/);
        if (!m)
          continue;
        var langCode = m.length >= 2 ? m[1] : null;
        var value2 = tags[key];
        if (notNames2.length) {
          for (var i2 in notNames2) {
            var notName = notNames2[i2];
            if (notName && value2 === notName) {
              issues.push(makeIncorrectNameIssue(entity2.id, key, value2, langCode));
              continue;
            }
          }
        }
        if (isGenericName2(value2, tags)) {
          issues.provisional = _waitingForNsi;
          issues.push(makeGenericNameIssue(entity2.id, key, value2, langCode));
        }
      }
      return issues;
    };
    validation.type = type3;
    return validation;
  }

  // modules/validations/unsquare_way.js
  function validationUnsquareWay(context) {
    var type3 = "unsquare_way";
    var DEFAULT_DEG_THRESHOLD = 5;
    var epsilon3 = 0.05;
    var nodeThreshold = 10;
    function isBuilding(entity2, graph3) {
      if (entity2.type !== "way" || entity2.geometry(graph3) !== "area")
        return false;
      return entity2.tags.building && entity2.tags.building !== "no";
    }
    var validation = function checkUnsquareWay(entity2, graph3) {
      if (!isBuilding(entity2, graph3))
        return [];
      if (entity2.tags.nonsquare === "yes")
        return [];
      var isClosed2 = entity2.isClosed();
      if (!isClosed2)
        return [];
      var nodes = graph3.childNodes(entity2).slice();
      if (nodes.length > nodeThreshold + 1)
        return [];
      var osm = services.osm;
      if (!osm || nodes.some(function(node) {
        return !osm.isDataLoaded(node.loc);
      }))
        return [];
      var hasConnectedSquarableWays = nodes.some(function(node) {
        return graph3.parentWays(node).some(function(way) {
          if (way.id === entity2.id)
            return false;
          if (isBuilding(way, graph3))
            return true;
          return graph3.parentRelations(way).some(function(parentRelation) {
            return parentRelation.isMultipolygon() && parentRelation.tags.building && parentRelation.tags.building !== "no";
          });
        });
      });
      if (hasConnectedSquarableWays)
        return [];
      var storedDegreeThreshold = corePreferences("validate-square-degrees");
      var degreeThreshold = isNaN(storedDegreeThreshold) ? DEFAULT_DEG_THRESHOLD : parseFloat(storedDegreeThreshold);
      var points = nodes.map(function(node) {
        return context.projection(node.loc);
      });
      if (!geoOrthoCanOrthogonalize(points, isClosed2, epsilon3, degreeThreshold, true))
        return [];
      var autoArgs;
      if (!entity2.tags.wikidata) {
        var autoAction = actionOrthogonalize(entity2.id, context.projection, void 0, degreeThreshold);
        autoAction.transitionable = false;
        autoArgs = [autoAction, _t("operations.orthogonalize.annotation.feature", {
          n: 1
        })];
      }
      return [new validationIssue({
        type: type3,
        subtype: "building",
        severity: "warning",
        message: function message(context2) {
          var entity3 = context2.hasEntity(this.entityIds[0]);
          return entity3 ? _t.html("issues.unsquare_way.message", {
            feature: utilDisplayLabel(entity3, context2.graph())
          }) : "";
        },
        reference: showReference,
        entityIds: [entity2.id],
        hash: degreeThreshold,
        autoArgs: autoArgs,
        dynamicFixes: function dynamicFixes() {
          return [
            new validationIssueFix({
              icon: "iD-operation-orthogonalize",
              title: _t("issues.fix.square_feature.title"),
              onClick: function onClick(context2, completionHandler) {
                var entityId = this.issue.entityIds[0];
                context2.perform(actionOrthogonalize(entityId, context2.projection, void 0, degreeThreshold), _t("operations.orthogonalize.annotation.feature", {
                  n: 1
                }));
                window.setTimeout(function() {
                  completionHandler();
                }, 175);
              }
            })
          ];
        }
      })];
      function showReference(selection2) {
        selection2.selectAll(".issue-reference").data([0]).enter().append("div").attr("class", "issue-reference").html(_t.html("issues.unsquare_way.buildings.reference"));
      }
    };
    validation.type = type3;
    return validation;
  }

  // modules/core/validator.js
  function coreValidator(context) {
    var _this = this;
    var dispatch12 = dispatch_default("validated", "focusedIssue");
    var validator = utilRebind({}, dispatch12, "on");
    var _rules = {};
    var _disabledRules = {};
    var _ignoredIssueIDs = new Set();
    var _resolvedIssueIDs = new Set();
    var _baseCache = validationCache("base");
    var _headCache = validationCache("head");
    var _completeDiff = {};
    var _headIsCurrent = false;
    var _deferredRIC = new Set();
    var _deferredST = new Set();
    var _headPromise;
    var RETRY = 5e3;
    var _errorOverrides = parseHashParam(context.initialHashParams.validationError);
    var _warningOverrides = parseHashParam(context.initialHashParams.validationWarning);
    var _disableOverrides = parseHashParam(context.initialHashParams.validationDisable);
    function parseHashParam(param) {
      var result6 = [];
      var rules = (param || "").split(",");
      rules.forEach(function(rule) {
        rule = rule.trim();
        var parts = rule.split("/", 2);
        var type3 = parts[0];
        var subtype = parts[1] || "*";
        if (!type3 || !subtype)
          return;
        result6.push({
          type: makeRegExp(type3),
          subtype: makeRegExp(subtype)
        });
      });
      return result6;
      function makeRegExp(str) {
        var escaped = str.replace(/[-\/\\^$+?.()|[\]{}]/g, "\\$&").replace(/\*/g, ".*");
        return new RegExp("^" + escaped + "$");
      }
    }
    validator.init = function() {
      Object.values(validations_exports).forEach(function(validation) {
        if (typeof validation !== "function")
          return;
        var fn = validation(context);
        var key = fn.type;
        _rules[key] = fn;
      });
      var disabledRules = corePreferences("validate-disabledRules");
      if (disabledRules) {
        disabledRules.split(",").forEach(function(k) {
          return _disabledRules[k] = true;
        });
      }
    };
    function reset17(resetIgnored) {
      _deferredRIC.forEach(window.cancelIdleCallback);
      _deferredRIC.clear();
      _deferredST.forEach(window.clearTimeout);
      _deferredST.clear();
      _baseCache.queue = [];
      _headCache.queue = [];
      processQueue(_headCache);
      processQueue(_baseCache);
      if (resetIgnored)
        _ignoredIssueIDs.clear();
      _resolvedIssueIDs.clear();
      _baseCache = validationCache("base");
      _headCache = validationCache("head");
      _completeDiff = {};
      _headIsCurrent = false;
    }
    validator.reset = function() {
      reset17(true);
    };
    validator.resetIgnoredIssues = function() {
      _ignoredIssueIDs.clear();
      dispatch12.call("validated");
    };
    validator.revalidateUnsquare = function() {
      revalidateUnsquare(_headCache);
      revalidateUnsquare(_baseCache);
      dispatch12.call("validated");
    };
    function revalidateUnsquare(cache7) {
      var checkUnsquareWay = _rules.unsquare_way;
      if (!cache7.graph || typeof checkUnsquareWay !== "function")
        return;
      cache7.uncacheIssuesOfType("unsquare_way");
      var buildings = context.history().tree().intersects(new Extent([-180, -90], [180, 90]), cache7.graph).filter(function(entity2) {
        return entity2.type === "way" && entity2.tags.building && entity2.tags.building !== "no";
      });
      buildings.forEach(function(entity2) {
        var detected = checkUnsquareWay(entity2, cache7.graph);
        if (!detected.length)
          return;
        cache7.cacheIssues(detected);
      });
    }
    validator.getIssues = function(options) {
      var opts = Object.assign({
        what: "all",
        where: "all",
        includeIgnored: false,
        includeDisabledRules: false
      }, options);
      var view = context.map().extent();
      var seen = new Set();
      var results = [];
      if (_headCache.graph && _headCache.graph !== _baseCache.graph) {
        Object.values(_headCache.issuesByIssueID).forEach(function(issue) {
          var userModified = (issue.entityIds || []).some(function(id2) {
            return _completeDiff.hasOwnProperty(id2);
          });
          if (opts.what === "edited" && !userModified)
            return;
          if (!filter2(issue))
            return;
          seen.add(issue.id);
          results.push(issue);
        });
      }
      if (opts.what === "all") {
        Object.values(_baseCache.issuesByIssueID).forEach(function(issue) {
          if (!filter2(issue))
            return;
          seen.add(issue.id);
          results.push(issue);
        });
      }
      return results;
      function filter2(issue) {
        if (!issue)
          return false;
        if (seen.has(issue.id))
          return false;
        if (_resolvedIssueIDs.has(issue.id))
          return false;
        if (opts.includeDisabledRules === "only" && !_disabledRules[issue.type])
          return false;
        if (!opts.includeDisabledRules && _disabledRules[issue.type])
          return false;
        if (opts.includeIgnored === "only" && !_ignoredIssueIDs.has(issue.id))
          return false;
        if (!opts.includeIgnored && _ignoredIssueIDs.has(issue.id))
          return false;
        if ((issue.entityIds || []).some(function(id2) {
          return !context.hasEntity(id2);
        }))
          return false;
        if (opts.where === "visible") {
          var extent6 = issue.extent(context.graph());
          if (!view.intersects(extent6))
            return false;
        }
        return true;
      }
    };
    validator.getResolvedIssues = function() {
      return Array.from(_resolvedIssueIDs).map(function(issueID) {
        return _baseCache.issuesByIssueID[issueID];
      }).filter(Boolean);
    };
    validator.focusIssue = function(issue) {
      var graph3 = context.graph();
      var selectID;
      var focusCenter;
      var issueExtent = issue.extent(graph3);
      if (issueExtent) {
        focusCenter = issueExtent.center();
      }
      if (issue.entityIds && issue.entityIds.length) {
        selectID = issue.entityIds[0];
        if (selectID && selectID.charAt(0) === "r") {
          var ids = utilEntityAndDeepMemberIDs([selectID], graph3);
          var nodeID = ids.find(function(id2) {
            return id2.charAt(0) === "n" && graph3.hasEntity(id2);
          });
          if (!nodeID) {
            var wayID = ids.find(function(id2) {
              return id2.charAt(0) === "w" && graph3.hasEntity(id2);
            });
            if (wayID) {
              nodeID = graph3.entity(wayID).first();
            }
          }
          if (nodeID) {
            focusCenter = graph3.entity(nodeID).loc;
          }
        }
      }
      if (focusCenter) {
        var setZoom = Math.max(context.map().zoom(), 19);
        context.map().unobscuredCenterZoomEase(focusCenter, setZoom);
      }
      if (selectID) {
        window.setTimeout(function() {
          context.enter(modeSelect(context, [selectID]));
          dispatch12.call("focusedIssue", _this, issue);
        }, 250);
      }
    };
    validator.getIssuesBySeverity = function(options) {
      var groups = utilArrayGroupBy(validator.getIssues(options), "severity");
      groups.error = groups.error || [];
      groups.warning = groups.warning || [];
      return groups;
    };
    validator.getSharedEntityIssues = function(entityIDs, options) {
      var orderedIssueTypes = [
        "missing_tag",
        "missing_role",
        "outdated_tags",
        "mismatched_geometry",
        "crossing_ways",
        "almost_junction",
        "disconnected_way",
        "impossible_oneway"
      ];
      var allIssues = validator.getIssues(options);
      var forEntityIDs = new Set(entityIDs);
      return allIssues.filter(function(issue) {
        return (issue.entityIds || []).some(function(entityID) {
          return forEntityIDs.has(entityID);
        });
      }).sort(function(issue1, issue2) {
        if (issue1.type === issue2.type) {
          return issue1.id < issue2.id ? -1 : 1;
        }
        var index1 = orderedIssueTypes.indexOf(issue1.type);
        var index2 = orderedIssueTypes.indexOf(issue2.type);
        if (index1 !== -1 && index2 !== -1) {
          return index1 - index2;
        } else if (index1 === -1 && index2 === -1) {
          return issue1.type < issue2.type ? -1 : 1;
        } else {
          return index1 !== -1 ? -1 : 1;
        }
      });
    };
    validator.getEntityIssues = function(entityID, options) {
      return validator.getSharedEntityIssues([entityID], options);
    };
    validator.getRuleKeys = function() {
      return Object.keys(_rules);
    };
    validator.isRuleEnabled = function(key) {
      return !_disabledRules[key];
    };
    validator.toggleRule = function(key) {
      if (_disabledRules[key]) {
        delete _disabledRules[key];
      } else {
        _disabledRules[key] = true;
      }
      corePreferences("validate-disabledRules", Object.keys(_disabledRules).join(","));
      validator.validate();
    };
    validator.disableRules = function(keys3) {
      _disabledRules = {};
      keys3.forEach(function(k) {
        return _disabledRules[k] = true;
      });
      corePreferences("validate-disabledRules", Object.keys(_disabledRules).join(","));
      validator.validate();
    };
    validator.ignoreIssue = function(issueID) {
      _ignoredIssueIDs.add(issueID);
    };
    validator.validate = function() {
      var baseGraph = context.history().base();
      if (!_headCache.graph)
        _headCache.graph = baseGraph;
      if (!_baseCache.graph)
        _baseCache.graph = baseGraph;
      var prevGraph = _headCache.graph;
      var currGraph = context.graph();
      if (currGraph === prevGraph) {
        _headIsCurrent = true;
        dispatch12.call("validated");
        return Promise.resolve();
      }
      if (_headPromise) {
        _headIsCurrent = false;
        return _headPromise;
      }
      _headCache.graph = currGraph;
      _completeDiff = context.history().difference().complete();
      var incrementalDiff = coreDifference(prevGraph, currGraph);
      var entityIDs = Object.keys(incrementalDiff.complete());
      entityIDs = _headCache.withAllRelatedEntities(entityIDs);
      if (!entityIDs.size) {
        dispatch12.call("validated");
        return Promise.resolve();
      }
      _headPromise = validateEntitiesAsync(entityIDs, _headCache).then(function() {
        return updateResolvedIssues(entityIDs);
      }).then(function() {
        return dispatch12.call("validated");
      }).catch(function() {
      }).then(function() {
        _headPromise = null;
        if (!_headIsCurrent) {
          validator.validate();
        }
      });
      return _headPromise;
    };
    context.history().on("restore.validator", validator.validate).on("undone.validator", validator.validate).on("redone.validator", validator.validate).on("reset.validator", function() {
      reset17(false);
      validator.validate();
    });
    context.on("exit.validator", validator.validate);
    context.history().on("merge.validator", function(entities) {
      if (!entities)
        return;
      var baseGraph = context.history().base();
      if (!_headCache.graph)
        _headCache.graph = baseGraph;
      if (!_baseCache.graph)
        _baseCache.graph = baseGraph;
      var entityIDs = entities.map(function(entity2) {
        return entity2.id;
      });
      entityIDs = _baseCache.withAllRelatedEntities(entityIDs);
      validateEntitiesAsync(entityIDs, _baseCache);
    });
    function validateEntity(entity2, graph3) {
      var result6 = {
        issues: [],
        provisional: false
      };
      Object.keys(_rules).forEach(runValidation);
      return result6;
      function runValidation(key) {
        var fn = _rules[key];
        if (typeof fn !== "function") {
          console.error("no such validation rule = " + key);
          return;
        }
        var detected = fn(entity2, graph3);
        if (detected.provisional) {
          result6.provisional = true;
        }
        detected = detected.filter(applySeverityOverrides);
        result6.issues = result6.issues.concat(detected);
        function applySeverityOverrides(issue) {
          var type3 = issue.type;
          var subtype = issue.subtype || "";
          var i2;
          for (i2 = 0; i2 < _errorOverrides.length; i2++) {
            if (_errorOverrides[i2].type.test(type3) && _errorOverrides[i2].subtype.test(subtype)) {
              issue.severity = "error";
              return true;
            }
          }
          for (i2 = 0; i2 < _warningOverrides.length; i2++) {
            if (_warningOverrides[i2].type.test(type3) && _warningOverrides[i2].subtype.test(subtype)) {
              issue.severity = "warning";
              return true;
            }
          }
          for (i2 = 0; i2 < _disableOverrides.length; i2++) {
            if (_disableOverrides[i2].type.test(type3) && _disableOverrides[i2].subtype.test(subtype)) {
              return false;
            }
          }
          return true;
        }
      }
    }
    function updateResolvedIssues(entityIDs) {
      entityIDs.forEach(function(entityID) {
        var baseIssues = _baseCache.issuesByEntityID[entityID];
        if (!baseIssues)
          return;
        baseIssues.forEach(function(issueID) {
          var issue = _baseCache.issuesByIssueID[issueID];
          var userModified = (issue.entityIds || []).some(function(id2) {
            return _completeDiff.hasOwnProperty(id2);
          });
          if (userModified && !_headCache.issuesByIssueID[issueID]) {
            _resolvedIssueIDs.add(issueID);
          } else {
            _resolvedIssueIDs.delete(issueID);
          }
        });
      });
    }
    function validateEntitiesAsync(entityIDs, cache7) {
      var jobs = Array.from(entityIDs).map(function(entityID) {
        if (cache7.queuedEntityIDs.has(entityID))
          return null;
        cache7.queuedEntityIDs.add(entityID);
        cache7.uncacheEntityID(entityID);
        return function() {
          cache7.queuedEntityIDs.delete(entityID);
          var graph3 = cache7.graph;
          if (!graph3)
            return;
          var entity2 = graph3.hasEntity(entityID);
          if (!entity2)
            return;
          var result6 = validateEntity(entity2, graph3);
          if (result6.provisional) {
            cache7.provisionalEntityIDs.add(entityID);
          }
          cache7.cacheIssues(result6.issues);
        };
      }).filter(Boolean);
      cache7.queue = cache7.queue.concat(utilArrayChunk(jobs, 100));
      if (cache7.queuePromise)
        return cache7.queuePromise;
      cache7.queuePromise = processQueue(cache7).then(function() {
        return revalidateProvisionalEntities(cache7);
      }).catch(function() {
      }).finally(function() {
        return cache7.queuePromise = null;
      });
      return cache7.queuePromise;
    }
    function revalidateProvisionalEntities(cache7) {
      if (!cache7.provisionalEntityIDs.size)
        return;
      var handle = window.setTimeout(function() {
        _deferredST.delete(handle);
        if (!cache7.provisionalEntityIDs.size)
          return;
        validateEntitiesAsync(Array.from(cache7.provisionalEntityIDs), cache7);
      }, RETRY);
      _deferredST.add(handle);
    }
    function processQueue(cache7) {
      if (!cache7.queue.length)
        return Promise.resolve();
      var chunk = cache7.queue.pop();
      return new Promise(function(resolvePromise) {
        var handle = window.requestIdleCallback(function() {
          _deferredRIC.delete(handle);
          chunk.forEach(function(job) {
            return job();
          });
          resolvePromise();
        });
        _deferredRIC.add(handle);
      }).then(function() {
        if (cache7.queue.length % 25 === 0)
          dispatch12.call("validated");
      }).then(function() {
        return processQueue(cache7);
      });
    }
    return validator;
  }
  function validationCache(which) {
    var cache7 = {
      which: which,
      graph: null,
      queue: [],
      queuePromise: null,
      queuedEntityIDs: new Set(),
      provisionalEntityIDs: new Set(),
      issuesByIssueID: {},
      issuesByEntityID: {}
    };
    cache7.cacheIssue = function(issue) {
      (issue.entityIds || []).forEach(function(entityID) {
        if (!cache7.issuesByEntityID[entityID]) {
          cache7.issuesByEntityID[entityID] = new Set();
        }
        cache7.issuesByEntityID[entityID].add(issue.id);
      });
      cache7.issuesByIssueID[issue.id] = issue;
    };
    cache7.uncacheIssue = function(issue) {
      (issue.entityIds || []).forEach(function(entityID) {
        if (cache7.issuesByEntityID[entityID]) {
          cache7.issuesByEntityID[entityID].delete(issue.id);
        }
      });
      delete cache7.issuesByIssueID[issue.id];
    };
    cache7.cacheIssues = function(issues) {
      issues.forEach(cache7.cacheIssue);
    };
    cache7.uncacheIssues = function(issues) {
      issues.forEach(cache7.uncacheIssue);
    };
    cache7.uncacheIssuesOfType = function(type3) {
      var issuesOfType = Object.values(cache7.issuesByIssueID).filter(function(issue) {
        return issue.type === type3;
      });
      cache7.uncacheIssues(issuesOfType);
    };
    cache7.uncacheEntityID = function(entityID) {
      var entityIssueIDs = cache7.issuesByEntityID[entityID];
      if (entityIssueIDs) {
        entityIssueIDs.forEach(function(issueID) {
          var issue = cache7.issuesByIssueID[issueID];
          if (issue) {
            cache7.uncacheIssue(issue);
          } else {
            delete cache7.issuesByIssueID[issueID];
          }
        });
      }
      delete cache7.issuesByEntityID[entityID];
      cache7.provisionalEntityIDs.delete(entityID);
    };
    cache7.withAllRelatedEntities = function(entityIDs) {
      var result6 = new Set();
      (entityIDs || []).forEach(function(entityID) {
        result6.add(entityID);
        var entityIssueIDs = cache7.issuesByEntityID[entityID];
        if (entityIssueIDs) {
          entityIssueIDs.forEach(function(issueID) {
            var issue = cache7.issuesByIssueID[issueID];
            if (issue) {
              (issue.entityIds || []).forEach(function(relatedID) {
                return result6.add(relatedID);
              });
            } else {
              delete cache7.issuesByIssueID[issueID];
            }
          });
        }
      });
      return result6;
    };
    return cache7;
  }

  // modules/core/uploader.js
  function coreUploader(context) {
    var dispatch12 = dispatch_default("saveStarted", "saveEnded", "willAttemptUpload", "progressChanged", "resultNoChanges", "resultErrors", "resultConflicts", "resultSuccess");
    var _isSaving = false;
    var _conflicts = [];
    var _errors = [];
    var _origChanges;
    var _discardTags = {};
    _mainFileFetcher.get("discarded").then(function(d) {
      _discardTags = d;
    }).catch(function() {
    });
    var uploader = utilRebind({}, dispatch12, "on");
    uploader.isSaving = function() {
      return _isSaving;
    };
    uploader.save = function(changeset, tryAgain, checkConflicts) {
      if (_isSaving && !tryAgain) {
        return;
      }
      var osm = context.connection();
      if (!osm)
        return;
      if (!osm.authenticated()) {
        osm.authenticate(function(err) {
          if (!err) {
            uploader.save(changeset, tryAgain, checkConflicts);
          }
        });
        return;
      }
      if (!_isSaving) {
        _isSaving = true;
        dispatch12.call("saveStarted", this);
      }
      var history = context.history();
      _conflicts = [];
      _errors = [];
      _origChanges = history.changes(actionDiscardTags(history.difference(), _discardTags));
      if (!tryAgain) {
        history.perform(actionNoop());
      }
      if (!checkConflicts) {
        upload(changeset);
      } else {
        performFullConflictCheck(changeset);
      }
    };
    function performFullConflictCheck(changeset) {
      var osm = context.connection();
      if (!osm)
        return;
      var history = context.history();
      var localGraph = context.graph();
      var remoteGraph = coreGraph(history.base(), true);
      var summary = history.difference().summary();
      var _toCheck = [];
      for (var i2 = 0; i2 < summary.length; i2++) {
        var item = summary[i2];
        if (item.changeType === "modified") {
          _toCheck.push(item.entity.id);
        }
      }
      var _toLoad = withChildNodes(_toCheck, localGraph);
      var _loaded2 = {};
      var _toLoadCount = 0;
      var _toLoadTotal = _toLoad.length;
      if (_toCheck.length) {
        dispatch12.call("progressChanged", this, _toLoadCount, _toLoadTotal);
        _toLoad.forEach(function(id2) {
          _loaded2[id2] = false;
        });
        osm.loadMultiple(_toLoad, loaded);
      } else {
        upload(changeset);
      }
      return;
      function withChildNodes(ids, graph3) {
        var s = new Set(ids);
        ids.forEach(function(id2) {
          var entity2 = graph3.entity(id2);
          if (entity2.type !== "way")
            return;
          graph3.childNodes(entity2).forEach(function(child) {
            if (child.version !== void 0) {
              s.add(child.id);
            }
          });
        });
        return Array.from(s);
      }
      function loaded(err, result6) {
        if (_errors.length)
          return;
        if (err) {
          _errors.push({
            msg: err.message || err.responseText,
            details: [_t("save.status_code", {
              code: err.status
            })]
          });
          didResultInErrors();
        } else {
          var loadMore = [];
          result6.data.forEach(function(entity2) {
            remoteGraph.replace(entity2);
            _loaded2[entity2.id] = true;
            _toLoad = _toLoad.filter(function(val) {
              return val !== entity2.id;
            });
            if (!entity2.visible)
              return;
            var i3, id2;
            if (entity2.type === "way") {
              for (i3 = 0; i3 < entity2.nodes.length; i3++) {
                id2 = entity2.nodes[i3];
                if (_loaded2[id2] === void 0) {
                  _loaded2[id2] = false;
                  loadMore.push(id2);
                }
              }
            } else if (entity2.type === "relation" && entity2.isMultipolygon()) {
              for (i3 = 0; i3 < entity2.members.length; i3++) {
                id2 = entity2.members[i3].id;
                if (_loaded2[id2] === void 0) {
                  _loaded2[id2] = false;
                  loadMore.push(id2);
                }
              }
            }
          });
          _toLoadCount += result6.data.length;
          _toLoadTotal += loadMore.length;
          dispatch12.call("progressChanged", this, _toLoadCount, _toLoadTotal);
          if (loadMore.length) {
            _toLoad.push.apply(_toLoad, loadMore);
            osm.loadMultiple(loadMore, loaded);
          }
          if (!_toLoad.length) {
            detectConflicts();
            upload(changeset);
          }
        }
      }
      function detectConflicts() {
        function choice(id2, text, _action) {
          return {
            id: id2,
            text: text,
            action: function action() {
              history.replace(_action);
            }
          };
        }
        function formatUser(d) {
          return '<a href="' + osm.userURL(d) + '" target="_blank">' + d + "</a>";
        }
        function entityName(entity2) {
          return utilDisplayName(entity2) || utilDisplayType(entity2.id) + " " + entity2.id;
        }
        function sameVersions(local, remote) {
          if (local.version !== remote.version)
            return false;
          if (local.type === "way") {
            var children2 = utilArrayUnion(local.nodes, remote.nodes);
            for (var i3 = 0; i3 < children2.length; i3++) {
              var a = localGraph.hasEntity(children2[i3]);
              var b2 = remoteGraph.hasEntity(children2[i3]);
              if (a && b2 && a.version !== b2.version)
                return false;
            }
          }
          return true;
        }
        _toCheck.forEach(function(id2) {
          var local = localGraph.entity(id2);
          var remote = remoteGraph.entity(id2);
          if (sameVersions(local, remote))
            return;
          var merge3 = actionMergeRemoteChanges(id2, localGraph, remoteGraph, _discardTags, formatUser);
          history.replace(merge3);
          var mergeConflicts = merge3.conflicts();
          if (!mergeConflicts.length)
            return;
          var forceLocal = actionMergeRemoteChanges(id2, localGraph, remoteGraph, _discardTags).withOption("force_local");
          var forceRemote = actionMergeRemoteChanges(id2, localGraph, remoteGraph, _discardTags).withOption("force_remote");
          var keepMine = _t("save.conflict." + (remote.visible ? "keep_local" : "restore"));
          var keepTheirs = _t("save.conflict." + (remote.visible ? "keep_remote" : "delete"));
          _conflicts.push({
            id: id2,
            name: entityName(local),
            details: mergeConflicts,
            chosen: 1,
            choices: [choice(id2, keepMine, forceLocal), choice(id2, keepTheirs, forceRemote)]
          });
        });
      }
    }
    function upload(changeset) {
      var osm = context.connection();
      if (!osm) {
        _errors.push({
          msg: "No OSM Service"
        });
      }
      if (_conflicts.length) {
        didResultInConflicts(changeset);
      } else if (_errors.length) {
        didResultInErrors();
      } else {
        var history = context.history();
        var changes = history.changes(actionDiscardTags(history.difference(), _discardTags));
        if (changes.modified.length || changes.created.length || changes.deleted.length) {
          dispatch12.call("willAttemptUpload", this);
          osm.putChangeset(changeset, changes, uploadCallback);
        } else {
          didResultInNoChanges();
        }
      }
    }
    function uploadCallback(err, changeset) {
      if (err) {
        if (err.status === 409) {
          uploader.save(changeset, true, true);
        } else {
          _errors.push({
            msg: err.message || err.responseText,
            details: [_t("save.status_code", {
              code: err.status
            })]
          });
          didResultInErrors();
        }
      } else {
        didResultInSuccess(changeset);
      }
    }
    function didResultInNoChanges() {
      dispatch12.call("resultNoChanges", this);
      endSave();
      context.flush();
    }
    function didResultInErrors() {
      context.history().pop();
      dispatch12.call("resultErrors", this, _errors);
      endSave();
    }
    function didResultInConflicts(changeset) {
      _conflicts.sort(function(a, b2) {
        return b2.id.localeCompare(a.id);
      });
      dispatch12.call("resultConflicts", this, changeset, _conflicts, _origChanges);
      endSave();
    }
    function didResultInSuccess(changeset) {
      context.history().clearSaved();
      dispatch12.call("resultSuccess", this, changeset);
      window.setTimeout(function() {
        endSave();
        context.flush();
      }, 2500);
    }
    function endSave() {
      _isSaving = false;
      dispatch12.call("saveEnded", this);
    }
    uploader.cancelConflictResolution = function() {
      context.history().pop();
    };
    uploader.processResolvedConflicts = function(changeset) {
      var history = context.history();
      for (var i2 = 0; i2 < _conflicts.length; i2++) {
        if (_conflicts[i2].chosen === 1) {
          var entity2 = context.hasEntity(_conflicts[i2].id);
          if (entity2 && entity2.type === "way") {
            var children2 = utilArrayUniq(entity2.nodes);
            for (var j = 0; j < children2.length; j++) {
              history.replace(actionRevert(children2[j]));
            }
          }
          history.replace(actionRevert(_conflicts[i2].id));
        }
      }
      uploader.save(changeset, true, false);
    };
    uploader.reset = function() {
    };
    return uploader;
  }

  // modules/renderer/background_source.js
  var isRetina = window.devicePixelRatio && window.devicePixelRatio >= 2;
  window.matchMedia("\n        (-webkit-min-device-pixel-ratio: 2), /* Safari */\n        (min-resolution: 2dppx),             /* standard */\n        (min-resolution: 192dpi)             /* fallback */\n    ").addListener(function() {
    isRetina = window.devicePixelRatio && window.devicePixelRatio >= 2;
  });
  function localeDateString(s) {
    if (!s)
      return null;
    var options = {
      day: "numeric",
      month: "short",
      year: "numeric"
    };
    var d = new Date(s);
    if (isNaN(d.getTime()))
      return null;
    return d.toLocaleDateString(_mainLocalizer.localeCode(), options);
  }
  function vintageRange(vintage) {
    var s;
    if (vintage.start || vintage.end) {
      s = vintage.start || "?";
      if (vintage.start !== vintage.end) {
        s += " - " + (vintage.end || "?");
      }
    }
    return s;
  }
  function rendererBackgroundSource(data2) {
    var source = Object.assign({}, data2);
    var _offset = [0, 0];
    var _name = source.name;
    var _description = source.description;
    var _best = !!source.best;
    var _template = source.encrypted ? utilAesDecrypt(source.template) : source.template;
    source.tileSize = data2.tileSize || 256;
    source.zoomExtent = data2.zoomExtent || [0, 22];
    source.overzoom = data2.overzoom !== false;
    source.offset = function(val) {
      if (!arguments.length)
        return _offset;
      _offset = val;
      return source;
    };
    source.nudge = function(val, zoomlevel) {
      _offset[0] += val[0] / Math.pow(2, zoomlevel);
      _offset[1] += val[1] / Math.pow(2, zoomlevel);
      return source;
    };
    source.name = function() {
      var id_safe = source.id.replace(/\./g, "<TX_DOT>");
      return _t("imagery." + id_safe + ".name", {
        default: _name
      });
    };
    source.label = function() {
      var id_safe = source.id.replace(/\./g, "<TX_DOT>");
      return _t.html("imagery." + id_safe + ".name", {
        default: _name
      });
    };
    source.description = function() {
      var id_safe = source.id.replace(/\./g, "<TX_DOT>");
      return _t.html("imagery." + id_safe + ".description", {
        default: _description
      });
    };
    source.best = function() {
      return _best;
    };
    source.area = function() {
      if (!data2.polygon)
        return Number.MAX_VALUE;
      var area3 = area_default({
        type: "MultiPolygon",
        coordinates: [data2.polygon]
      });
      return isNaN(area3) ? 0 : area3;
    };
    source.imageryUsed = function() {
      return _name || source.id;
    };
    source.template = function(val) {
      if (!arguments.length)
        return _template;
      if (source.id === "custom" || source.id === "Bing") {
        _template = val;
      }
      return source;
    };
    source.url = function(coord) {
      var result6 = _template;
      if (result6 === "")
        return result6;
      if (!source.type) {
        if (/SERVICE=WMS|\{(proj|wkid|bbox)\}/.test(_template)) {
          source.type = "wms";
          source.projection = "EPSG:3857";
        } else if (/\{(x|y)\}/.test(_template)) {
          source.type = "tms";
        } else if (/\{u\}/.test(_template)) {
          source.type = "bing";
        }
      }
      if (source.type === "wms") {
        var tileToProjectedCoords = function tileToProjectedCoords2(x2, y, z) {
          var sinh2 = Math.sinh || function(x3) {
            var y2 = Math.exp(x3);
            return (y2 - 1 / y2) / 2;
          };
          var zoomSize = Math.pow(2, z);
          var lon = x2 / zoomSize * Math.PI * 2 - Math.PI;
          var lat = Math.atan(sinh2(Math.PI * (1 - 2 * y / zoomSize)));
          switch (source.projection) {
            case "EPSG:4326":
              return {
                x: lon * 180 / Math.PI,
                y: lat * 180 / Math.PI
              };
            default:
              var mercCoords = mercatorRaw(lon, lat);
              return {
                x: 2003750834e-2 / Math.PI * mercCoords[0],
                y: 2003750834e-2 / Math.PI * mercCoords[1]
              };
          }
        };
        var tileSize = source.tileSize;
        var projection2 = source.projection;
        var minXmaxY = tileToProjectedCoords(coord[0], coord[1], coord[2]);
        var maxXminY = tileToProjectedCoords(coord[0] + 1, coord[1] + 1, coord[2]);
        result6 = result6.replace(/\{(\w+)\}/g, function(token, key) {
          switch (key) {
            case "width":
            case "height":
              return tileSize;
            case "proj":
              return projection2;
            case "wkid":
              return projection2.replace(/^EPSG:/, "");
            case "bbox":
              if (projection2 === "EPSG:4326" && /VERSION=1.3|CRS={proj}/.test(source.template().toUpperCase())) {
                return maxXminY.y + "," + minXmaxY.x + "," + minXmaxY.y + "," + maxXminY.x;
              } else {
                return minXmaxY.x + "," + maxXminY.y + "," + maxXminY.x + "," + minXmaxY.y;
              }
            case "w":
              return minXmaxY.x;
            case "s":
              return maxXminY.y;
            case "n":
              return maxXminY.x;
            case "e":
              return minXmaxY.y;
            default:
              return token;
          }
        });
      } else if (source.type === "tms") {
        result6 = result6.replace("{x}", coord[0]).replace("{y}", coord[1]).replace(/\{[t-]y\}/, Math.pow(2, coord[2]) - coord[1] - 1).replace(/\{z(oom)?\}/, coord[2]).replace(/\{@2x\}|\{r\}/, isRetina ? "@2x" : "");
      } else if (source.type === "bing") {
        result6 = result6.replace("{u}", function() {
          var u = "";
          for (var zoom = coord[2]; zoom > 0; zoom--) {
            var b2 = 0;
            var mask = 1 << zoom - 1;
            if ((coord[0] & mask) !== 0)
              b2++;
            if ((coord[1] & mask) !== 0)
              b2 += 2;
            u += b2.toString();
          }
          return u;
        });
      }
      result6 = result6.replace(/\{switch:([^}]+)\}/, function(s, r) {
        var subdomains = r.split(",");
        return subdomains[(coord[0] + coord[1]) % subdomains.length];
      });
      return result6;
    };
    source.validZoom = function(z) {
      return source.zoomExtent[0] <= z && (source.overzoom || source.zoomExtent[1] > z);
    };
    source.isLocatorOverlay = function() {
      return source.id === "mapbox_locator_overlay";
    };
    source.isHidden = function() {
      return source.id === "DigitalGlobe-Premium-vintage" || source.id === "DigitalGlobe-Standard-vintage";
    };
    source.copyrightNotices = function() {
    };
    source.getMetadata = function(center, tileCoord, callback) {
      var vintage = {
        start: localeDateString(source.startDate),
        end: localeDateString(source.endDate)
      };
      vintage.range = vintageRange(vintage);
      var metadata = {
        vintage: vintage
      };
      callback(null, metadata);
    };
    return source;
  }
  rendererBackgroundSource.Bing = function(data2, dispatch12) {
    data2.template = "https://ecn.t{switch:0,1,2,3}.tiles.virtualearth.net/tiles/a{u}.jpeg?g=587&n=z";
    var bing = rendererBackgroundSource(data2);
    var key = "Ak5oTE46TUbjRp08OFVcGpkARErDobfpuyNKa-W2mQ8wbt1K1KL8p1bIRwWwcF-Q";
    var strictParam = "n";
    var url = "https://dev.virtualearth.net/REST/v1/Imagery/Metadata/Aerial?include=ImageryProviders&uriScheme=https&key=" + key;
    var cache7 = {};
    var inflight = {};
    var providers = [];
    json_default(url).then(function(json2) {
      var imageryResource = json2.resourceSets[0].resources[0];
      var template = imageryResource.imageUrl;
      var subDomains = imageryResource.imageUrlSubdomains;
      var subDomainNumbers = subDomains.map(function(subDomain) {
        return subDomain.substring(1);
      }).join(",");
      template = template.replace("{subdomain}", "t{switch:".concat(subDomainNumbers, "}")).replace("{quadkey}", "{u}");
      if (!new URLSearchParams(template).has(strictParam)) {
        template += "&".concat(strictParam, "=z");
      }
      bing.template(template);
      providers = imageryResource.imageryProviders.map(function(provider) {
        return {
          attribution: provider.attribution,
          areas: provider.coverageAreas.map(function(area3) {
            return {
              zoom: [area3.zoomMin, area3.zoomMax],
              extent: new Extent([area3.bbox[1], area3.bbox[0]], [area3.bbox[3], area3.bbox[2]])
            };
          })
        };
      });
      dispatch12.call("change");
    }).catch(function() {
    });
    bing.copyrightNotices = function(zoom, extent6) {
      zoom = Math.min(zoom, 21);
      return providers.filter(function(provider) {
        return provider.areas.some(function(area3) {
          return extent6.intersects(area3.extent) && area3.zoom[0] <= zoom && area3.zoom[1] >= zoom;
        });
      }).map(function(provider) {
        return provider.attribution;
      }).join(", ");
    };
    bing.getMetadata = function(center, tileCoord, callback) {
      var tileID = tileCoord.slice(0, 3).join("/");
      var zoom = Math.min(tileCoord[2], 21);
      var centerPoint = center[1] + "," + center[0];
      var url2 = "https://dev.virtualearth.net/REST/v1/Imagery/Metadata/Aerial/" + centerPoint + "?zl=" + zoom + "&key=" + key;
      if (inflight[tileID])
        return;
      if (!cache7[tileID]) {
        cache7[tileID] = {};
      }
      if (cache7[tileID] && cache7[tileID].metadata) {
        return callback(null, cache7[tileID].metadata);
      }
      inflight[tileID] = true;
      json_default(url2).then(function(result6) {
        delete inflight[tileID];
        if (!result6) {
          throw new Error("Unknown Error");
        }
        var vintage = {
          start: localeDateString(result6.resourceSets[0].resources[0].vintageStart),
          end: localeDateString(result6.resourceSets[0].resources[0].vintageEnd)
        };
        vintage.range = vintageRange(vintage);
        var metadata = {
          vintage: vintage
        };
        cache7[tileID].metadata = metadata;
        if (callback)
          callback(null, metadata);
      }).catch(function(err) {
        delete inflight[tileID];
        if (callback)
          callback(err.message);
      });
    };
    bing.terms_url = "https://blog.openstreetmap.org/2010/11/30/microsoft-imagery-details";
    return bing;
  };
  rendererBackgroundSource.Esri = function(data2) {
    if (data2.template.match(/blankTile/) === null) {
      data2.template = data2.template + "?blankTile=false";
    }
    var esri = rendererBackgroundSource(data2);
    var cache7 = {};
    var inflight = {};
    var _prevCenter;
    esri.fetchTilemap = function(center) {
      if (_prevCenter && geoSphericalDistance(center, _prevCenter) < 5e3)
        return;
      _prevCenter = center;
      var z = 20;
      var dummyUrl = esri.url([1, 2, 3]);
      var x2 = Math.floor((center[0] + 180) / 360 * Math.pow(2, z));
      var y = Math.floor((1 - Math.log(Math.tan(center[1] * Math.PI / 180) + 1 / Math.cos(center[1] * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, z));
      var tilemapUrl = dummyUrl.replace(/tile\/[0-9]+\/[0-9]+\/[0-9]+\?blankTile=false/, "tilemap") + "/" + z + "/" + y + "/" + x2 + "/8/8";
      json_default(tilemapUrl).then(function(tilemap) {
        if (!tilemap) {
          throw new Error("Unknown Error");
        }
        var hasTiles = true;
        for (var i2 = 0; i2 < tilemap.data.length; i2++) {
          if (!tilemap.data[i2]) {
            hasTiles = false;
            break;
          }
        }
        esri.zoomExtent[1] = hasTiles ? 22 : 19;
      }).catch(function() {
      });
    };
    esri.getMetadata = function(center, tileCoord, callback) {
      var tileID = tileCoord.slice(0, 3).join("/");
      var zoom = Math.min(tileCoord[2], esri.zoomExtent[1]);
      var centerPoint = center[0] + "," + center[1];
      var unknown = _t("info_panels.background.unknown");
      var metadataLayer;
      var vintage = {};
      var metadata = {};
      if (inflight[tileID])
        return;
      switch (true) {
        case (zoom >= 20 && esri.id === "EsriWorldImageryClarity"):
          metadataLayer = 4;
          break;
        case zoom >= 19:
          metadataLayer = 3;
          break;
        case zoom >= 17:
          metadataLayer = 2;
          break;
        case zoom >= 13:
          metadataLayer = 0;
          break;
        default:
          metadataLayer = 99;
      }
      var url;
      if (esri.id === "EsriWorldImagery") {
        url = "https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/";
      } else if (esri.id === "EsriWorldImageryClarity") {
        url = "https://serviceslab.arcgisonline.com/arcgis/rest/services/Clarity_World_Imagery/MapServer/";
      }
      url += metadataLayer + "/query?returnGeometry=false&geometry=" + centerPoint + "&inSR=4326&geometryType=esriGeometryPoint&outFields=*&f=json";
      if (!cache7[tileID]) {
        cache7[tileID] = {};
      }
      if (cache7[tileID] && cache7[tileID].metadata) {
        return callback(null, cache7[tileID].metadata);
      }
      if (metadataLayer === 99) {
        vintage = {
          start: null,
          end: null,
          range: null
        };
        metadata = {
          vintage: null,
          source: unknown,
          description: unknown,
          resolution: unknown,
          accuracy: unknown
        };
        callback(null, metadata);
      } else {
        inflight[tileID] = true;
        json_default(url).then(function(result6) {
          delete inflight[tileID];
          if (!result6) {
            throw new Error("Unknown Error");
          } else if (result6.features && result6.features.length < 1) {
            throw new Error("No Results");
          } else if (result6.error && result6.error.message) {
            throw new Error(result6.error.message);
          }
          var captureDate = localeDateString(result6.features[0].attributes.SRC_DATE2);
          vintage = {
            start: captureDate,
            end: captureDate,
            range: captureDate
          };
          metadata = {
            vintage: vintage,
            source: clean2(result6.features[0].attributes.NICE_NAME),
            description: clean2(result6.features[0].attributes.NICE_DESC),
            resolution: clean2(+parseFloat(result6.features[0].attributes.SRC_RES).toFixed(4)),
            accuracy: clean2(+parseFloat(result6.features[0].attributes.SRC_ACC).toFixed(4))
          };
          if (isFinite(metadata.resolution)) {
            metadata.resolution += " m";
          }
          if (isFinite(metadata.accuracy)) {
            metadata.accuracy += " m";
          }
          cache7[tileID].metadata = metadata;
          if (callback)
            callback(null, metadata);
        }).catch(function(err) {
          delete inflight[tileID];
          if (callback)
            callback(err.message);
        });
      }
      function clean2(val) {
        return String(val).trim() || unknown;
      }
    };
    return esri;
  };
  rendererBackgroundSource.None = function() {
    var source = rendererBackgroundSource({
      id: "none",
      template: ""
    });
    source.name = function() {
      return _t("background.none");
    };
    source.label = function() {
      return _t.html("background.none");
    };
    source.imageryUsed = function() {
      return null;
    };
    source.area = function() {
      return -1;
    };
    return source;
  };
  rendererBackgroundSource.Custom = function(template) {
    var source = rendererBackgroundSource({
      id: "custom",
      template: template
    });
    source.name = function() {
      return _t("background.custom");
    };
    source.label = function() {
      return _t.html("background.custom");
    };
    source.imageryUsed = function() {
      var cleaned = source.template();
      if (cleaned.indexOf("?") !== -1) {
        var parts = cleaned.split("?", 2);
        var qs = utilStringQs(parts[1]);
        ["access_token", "connectId", "token"].forEach(function(param) {
          if (qs[param]) {
            qs[param] = "{apikey}";
          }
        });
        cleaned = parts[0] + "?" + utilQsString(qs, true);
      }
      cleaned = cleaned.replace(/token\/(\w+)/, "token/{apikey}");
      return "Custom (" + cleaned + " )";
    };
    source.area = function() {
      return -2;
    };
    return source;
  };

  // modules/renderer/background.js
  var import_which_polygon3 = __toModule(require_which_polygon());

  // modules/renderer/tile_layer.js
  function rendererTileLayer(context) {
    var transformProp = utilPrefixCSSProperty("Transform");
    var _tiler = new Tiler();
    var _internal = new Projection();
    var _projection;
    var _tileSize = 256;
    var _failures = {};
    var _tileOrigin;
    var _zoom;
    var _source;
    function tileSizeAtZoom(d, z) {
      var EPSILON = 2e-3;
      return _tileSize * Math.pow(2, z - d[2]) / _tileSize + EPSILON;
    }
    function background(selection2) {
      var k = _projection.scale();
      _zoom = geoScaleToZoom(k, _tileSize);
      var pixelOffset;
      if (_source) {
        pixelOffset = [_source.offset()[0] * Math.pow(2, _zoom), _source.offset()[1] * Math.pow(2, _zoom)];
      } else {
        pixelOffset = [0, 0];
      }
      var translate2 = [_projection.translate()[0] + pixelOffset[0], _projection.translate()[1] + pixelOffset[1]];
      _internal.scale(k).translate(translate2);
      _tileOrigin = [k * Math.PI - translate2[0], k * Math.PI - translate2[1]];
      render(selection2);
    }
    function render(selection2) {
      if (!_source)
        return;
      var tiles = [];
      var showDebug = context.getDebug("tile") && !_source.overlay;
      var maxZoom2 = Math.round(_zoom);
      var minZoom3 = Math.max(0, maxZoom2 - 5);
      if (!_source.overzoom) {
        maxZoom2 = minZoom3 = Math.floor(_zoom);
      }
      var covered = false;
      for (var z = maxZoom2; !covered && z >= minZoom3; z--) {
        if (!_source.validZoom(z))
          continue;
        _tiler.skipNullIsland(!!_source.overlay).zoomRange(z);
        var result6 = _tiler.getTiles(_internal);
        var holes = false;
        for (var i2 = 0; i2 < result6.tiles.length; i2++) {
          var tile = result6.tiles[i2];
          tile.url = _source.url(tile.xyz);
          if (!tile.url || typeof tile.url !== "string" || _failures[tile.url]) {
            holes = true;
          } else {
            tiles.push(tile);
          }
        }
        covered = !holes;
      }
      function load2(d3_event, tile2) {
        delete _failures[tile2.url];
        select_default2(this).on("error", null).on("load", null).classed("tile-loaded", true);
        render(selection2);
      }
      function error(d3_event, tile2) {
        _failures[tile2.url] = (_failures[tile2.url] || 0) + 1;
        select_default2(this).on("error", null).on("load", null).remove();
        render(selection2);
      }
      function imageTransform(tile2) {
        var d = tile2.xyz;
        var ts = _tileSize * Math.pow(2, _zoom - d[2]);
        var scale2 = tileSizeAtZoom(d, _zoom);
        return "translate(" + (d[0] * ts - _tileOrigin[0]) + "px," + (d[1] * ts - _tileOrigin[1]) + "px) scale(" + scale2 + "," + scale2 + ")";
      }
      function tileCenter(tile2) {
        var d = tile2.xyz;
        var ts = _tileSize * Math.pow(2, _zoom - d[2]);
        return [d[0] * ts - _tileOrigin[0] + ts / 2, d[1] * ts - _tileOrigin[1] + ts / 2];
      }
      function debugTransform(tile2) {
        var coord = tileCenter(tile2);
        return "translate(" + coord[0] + "px," + coord[1] + "px)";
      }
      var dims = _internal.dimensions();
      var min2 = dims[0];
      var max2 = dims[1];
      var mapCenter = [(max2[0] - min2[0]) / 2, (max2[1] - min2[1]) / 2];
      var minDist = Math.max(max2[0], max2[1]);
      var nearCenter;
      tiles.forEach(function(tile2) {
        var c2 = tileCenter(tile2);
        var dist = vecLength(c2, mapCenter);
        if (dist < minDist) {
          minDist = dist;
          nearCenter = tile2;
        }
      });
      var image = selection2.selectAll("img").data(tiles, function(tile2) {
        return tile2.url;
      });
      image.exit().style(transformProp, imageTransform).classed("tile-removing", true).classed("tile-center", false).each(function() {
        var img = select_default2(this);
        window.setTimeout(function() {
          if (img.classed("tile-removing")) {
            img.remove();
          }
        }, 300);
      });
      image.enter().append("img").attr("class", "tile").attr("draggable", "false").style("width", _tileSize + "px").style("height", _tileSize + "px").style("z-index", function(d) {
        return d.xyz[2];
      }).attr("src", function(d) {
        return d.url;
      }).on("error", error).on("load", load2).merge(image).style(transformProp, imageTransform).classed("tile-debug", showDebug).classed("tile-removing", false).classed("tile-center", function(d) {
        return d === nearCenter;
      });
      var debug2 = selection2.selectAll(".tile-label-debug").data(showDebug ? tiles : [], function(tile2) {
        return tile2.url;
      });
      debug2.exit().remove();
      if (showDebug) {
        var debugEnter = debug2.enter().append("div").style("z-index", function(tile2) {
          return tile2.xyz[2];
        }).attr("class", "tile-label-debug");
        debugEnter.append("div").attr("class", "tile-label-debug-coord");
        debugEnter.append("div").attr("class", "tile-label-debug-vintage");
        debug2 = debug2.merge(debugEnter);
        debug2.style(transformProp, debugTransform);
        debug2.selectAll(".tile-label-debug-coord").html(function(tile2) {
          var d = tile2.xyz;
          return d[2] + " / " + d[0] + " / " + d[1];
        });
        debug2.selectAll(".tile-label-debug-vintage").each(function(tile2) {
          var span = select_default2(this);
          var center = context.projection.invert(tileCenter(tile2));
          _source.getMetadata(center, tile2.xyz, function(err, result7) {
            span.html(result7 && result7.vintage && result7.vintage.range || _t("info_panels.background.vintage") + ": " + _t("info_panels.background.unknown"));
          });
        });
      }
    }
    background.projection = function(val) {
      if (!arguments.length)
        return _projection;
      _projection = val;
      return background;
    };
    background.dimensions = function(val) {
      if (!arguments.length)
        return _internal.dimensions()[1];
      _internal.dimensions([[0, 0], val]);
      return background;
    };
    background.source = function(val) {
      if (!arguments.length)
        return _source;
      _source = val;
      _tileSize = _source.tileSize;
      _failures = {};
      _tiler.tileSize(_source.tileSize);
      return background;
    };
    return background;
  }

  // modules/renderer/background.js
  var _imageryIndex = null;
  function rendererBackground(context) {
    var dispatch12 = dispatch_default("change");
    var detected = utilDetect();
    var baseLayer = rendererTileLayer(context).projection(context.projection);
    var _checkedBlocklists = [];
    var _isValid = true;
    var _overlayLayers = [];
    var _brightness = 1;
    var _contrast = 1;
    var _saturation = 1;
    var _sharpness = 1;
    var _numGridSplits = 0;
    function ensureImageryIndex() {
      return _mainFileFetcher.get("imagery").then(function(sources) {
        if (_imageryIndex)
          return _imageryIndex;
        _imageryIndex = {
          imagery: sources,
          features: {}
        };
        var features2 = sources.map(function(source) {
          if (!source.polygon)
            return null;
          var rings = source.polygon.map(function(ring) {
            return [ring];
          });
          var feature3 = {
            type: "Feature",
            properties: {
              id: source.id
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: rings
            }
          };
          _imageryIndex.features[source.id] = feature3;
          return feature3;
        }).filter(Boolean);
        _imageryIndex.query = (0, import_which_polygon3.default)({
          type: "FeatureCollection",
          features: features2
        });
        _imageryIndex.backgrounds = sources.map(function(source) {
          if (source.type === "bing") {
            return rendererBackgroundSource.Bing(source, dispatch12);
          } else if (/^EsriWorldImagery/.test(source.id)) {
            return rendererBackgroundSource.Esri(source);
          } else {
            return rendererBackgroundSource(source);
          }
        });
        _imageryIndex.backgrounds.unshift(rendererBackgroundSource.None());
        var template = corePreferences("background-custom-template") || "";
        var custom = rendererBackgroundSource.Custom(template);
        _imageryIndex.backgrounds.unshift(custom);
        return _imageryIndex;
      });
    }
    function background(selection2) {
      var currSource = baseLayer.source();
      if (context.map().zoom() > 18) {
        if (currSource && /^EsriWorldImagery/.test(currSource.id)) {
          var center = context.map().center();
          currSource.fetchTilemap(center);
        }
      }
      var sources = background.sources(context.map().extent());
      var wasValid = _isValid;
      _isValid = !!sources.filter(function(d) {
        return d === currSource;
      }).length;
      if (wasValid !== _isValid) {
        background.updateImagery();
      }
      var baseFilter = "";
      if (detected.cssfilters) {
        if (_brightness !== 1) {
          baseFilter += " brightness(".concat(_brightness, ")");
        }
        if (_contrast !== 1) {
          baseFilter += " contrast(".concat(_contrast, ")");
        }
        if (_saturation !== 1) {
          baseFilter += " saturate(".concat(_saturation, ")");
        }
        if (_sharpness < 1) {
          var blur = number_default(0.5, 5)(1 - _sharpness);
          baseFilter += " blur(".concat(blur, "px)");
        }
      }
      var base2 = selection2.selectAll(".layer-background").data([0]);
      base2 = base2.enter().insert("div", ".layer-data").attr("class", "layer layer-background").merge(base2);
      if (detected.cssfilters) {
        base2.style("filter", baseFilter || null);
      } else {
        base2.style("opacity", _brightness);
      }
      var imagery = base2.selectAll(".layer-imagery").data([0]);
      imagery.enter().append("div").attr("class", "layer layer-imagery").merge(imagery).call(baseLayer);
      var maskFilter = "";
      var mixBlendMode = "";
      if (detected.cssfilters && _sharpness > 1) {
        mixBlendMode = "overlay";
        maskFilter = "saturate(0) blur(3px) invert(1)";
        var contrast = _sharpness - 1;
        maskFilter += " contrast(".concat(contrast, ")");
        var brightness = number_default(1, 0.85)(_sharpness - 1);
        maskFilter += " brightness(".concat(brightness, ")");
      }
      var mask = base2.selectAll(".layer-unsharp-mask").data(detected.cssfilters && _sharpness > 1 ? [0] : []);
      mask.exit().remove();
      mask.enter().append("div").attr("class", "layer layer-mask layer-unsharp-mask").merge(mask).call(baseLayer).style("filter", maskFilter || null).style("mix-blend-mode", mixBlendMode || null);
      var overlays = selection2.selectAll(".layer-overlay").data(_overlayLayers, function(d) {
        return d.source().name();
      });
      overlays.exit().remove();
      overlays.enter().insert("div", ".layer-data").attr("class", "layer layer-overlay").merge(overlays).each(function(layer2, i2, nodes) {
        return select_default2(nodes[i2]).call(layer2);
      });
    }
    background.numGridSplits = function(_2) {
      if (!arguments.length)
        return _numGridSplits;
      _numGridSplits = _2;
      dispatch12.call("change");
      return background;
    };
    background.updateImagery = function() {
      var currSource = baseLayer.source();
      if (context.inIntro() || !currSource)
        return;
      var o2 = _overlayLayers.filter(function(d) {
        return !d.source().isLocatorOverlay() && !d.source().isHidden();
      }).map(function(d) {
        return d.source().id;
      }).join(",");
      var meters = geoOffsetToMeters(currSource.offset());
      var EPSILON = 0.01;
      var x2 = +meters[0].toFixed(2);
      var y = +meters[1].toFixed(2);
      var hash = utilStringQs(window.location.hash);
      var id2 = currSource.id;
      if (id2 === "custom") {
        id2 = "custom:".concat(currSource.template());
      }
      if (id2) {
        hash.background = id2;
      } else {
        delete hash.background;
      }
      if (o2) {
        hash.overlays = o2;
      } else {
        delete hash.overlays;
      }
      if (Math.abs(x2) > EPSILON || Math.abs(y) > EPSILON) {
        hash.offset = "".concat(x2, ",").concat(y);
      } else {
        delete hash.offset;
      }
      if (!window.mocha) {
        window.location.replace("#" + utilQsString(hash, true));
      }
      var imageryUsed = [];
      var photoOverlaysUsed = [];
      var currUsed = currSource.imageryUsed();
      if (currUsed && _isValid) {
        imageryUsed.push(currUsed);
      }
      _overlayLayers.filter(function(d) {
        return !d.source().isLocatorOverlay() && !d.source().isHidden();
      }).forEach(function(d) {
        return imageryUsed.push(d.source().imageryUsed());
      });
      var dataLayer = context.layers().layer("data");
      if (dataLayer && dataLayer.enabled() && dataLayer.hasData()) {
        imageryUsed.push(dataLayer.getSrc());
      }
      var photoOverlayLayers = {
        streetside: "Bing Streetside",
        mapillary: "Mapillary Images",
        "mapillary-map-features": "Mapillary Map Features",
        "mapillary-signs": "Mapillary Signs",
        openstreetcam: "OpenStreetCam Images"
      };
      for (var layerID in photoOverlayLayers) {
        var layer2 = context.layers().layer(layerID);
        if (layer2 && layer2.enabled()) {
          photoOverlaysUsed.push(layerID);
          imageryUsed.push(photoOverlayLayers[layerID]);
        }
      }
      context.history().imageryUsed(imageryUsed);
      context.history().photoOverlaysUsed(photoOverlaysUsed);
    };
    background.sources = function(extent6, zoom, includeCurrent) {
      if (!_imageryIndex)
        return [];
      var visible = {};
      (_imageryIndex.query.bbox(extent6.rectangle(), true) || []).forEach(function(d) {
        return visible[d.id] = true;
      });
      var currSource = baseLayer.source();
      var osm = context.connection();
      var blocklists = osm && osm.imageryBlocklists() || [];
      var blocklistChanged = blocklists.length !== _checkedBlocklists.length || blocklists.some(function(regex, index) {
        return String(regex) !== _checkedBlocklists[index];
      });
      if (blocklistChanged) {
        _imageryIndex.backgrounds.forEach(function(source) {
          source.isBlocked = blocklists.some(function(regex) {
            return regex.test(source.template());
          });
        });
        _checkedBlocklists = blocklists.map(function(regex) {
          return String(regex);
        });
      }
      return _imageryIndex.backgrounds.filter(function(source) {
        if (includeCurrent && currSource === source)
          return true;
        if (source.isBlocked)
          return false;
        if (!source.polygon)
          return true;
        if (zoom && zoom < 6)
          return false;
        return visible[source.id];
      });
    };
    background.dimensions = function(val) {
      if (!val)
        return;
      baseLayer.dimensions(val);
      _overlayLayers.forEach(function(layer2) {
        return layer2.dimensions(val);
      });
    };
    background.baseLayerSource = function(d) {
      if (!arguments.length)
        return baseLayer.source();
      var osm = context.connection();
      if (!osm)
        return background;
      var blocklists = osm.imageryBlocklists();
      var template = d.template();
      var fail = false;
      var tested = 0;
      var regex;
      for (var i2 = 0; i2 < blocklists.length; i2++) {
        regex = blocklists[i2];
        fail = regex.test(template);
        tested++;
        if (fail)
          break;
      }
      if (!tested) {
        regex = /.*\.google(apis)?\..*\/(vt|kh)[\?\/].*([xyz]=.*){3}.*/;
        fail = regex.test(template);
      }
      baseLayer.source(!fail ? d : background.findSource("none"));
      dispatch12.call("change");
      background.updateImagery();
      return background;
    };
    background.findSource = function(id2) {
      if (!id2 || !_imageryIndex)
        return null;
      return _imageryIndex.backgrounds.find(function(d) {
        return d.id && d.id === id2;
      });
    };
    background.bing = function() {
      background.baseLayerSource(background.findSource("Bing"));
    };
    background.showsLayer = function(d) {
      var currSource = baseLayer.source();
      if (!d || !currSource)
        return false;
      return d.id === currSource.id || _overlayLayers.some(function(layer2) {
        return d.id === layer2.source().id;
      });
    };
    background.overlayLayerSources = function() {
      return _overlayLayers.map(function(layer2) {
        return layer2.source();
      });
    };
    background.toggleOverlayLayer = function(d) {
      var layer2;
      for (var i2 = 0; i2 < _overlayLayers.length; i2++) {
        layer2 = _overlayLayers[i2];
        if (layer2.source() === d) {
          _overlayLayers.splice(i2, 1);
          dispatch12.call("change");
          background.updateImagery();
          return;
        }
      }
      layer2 = rendererTileLayer(context).source(d).projection(context.projection).dimensions(baseLayer.dimensions());
      _overlayLayers.push(layer2);
      dispatch12.call("change");
      background.updateImagery();
    };
    background.nudge = function(d, zoom) {
      var currSource = baseLayer.source();
      if (currSource) {
        currSource.nudge(d, zoom);
        dispatch12.call("change");
        background.updateImagery();
      }
      return background;
    };
    background.offset = function(d) {
      var currSource = baseLayer.source();
      if (!arguments.length) {
        return currSource && currSource.offset() || [0, 0];
      }
      if (currSource) {
        currSource.offset(d);
        dispatch12.call("change");
        background.updateImagery();
      }
      return background;
    };
    background.brightness = function(d) {
      if (!arguments.length)
        return _brightness;
      _brightness = d;
      if (context.mode())
        dispatch12.call("change");
      return background;
    };
    background.contrast = function(d) {
      if (!arguments.length)
        return _contrast;
      _contrast = d;
      if (context.mode())
        dispatch12.call("change");
      return background;
    };
    background.saturation = function(d) {
      if (!arguments.length)
        return _saturation;
      _saturation = d;
      if (context.mode())
        dispatch12.call("change");
      return background;
    };
    background.sharpness = function(d) {
      if (!arguments.length)
        return _sharpness;
      _sharpness = d;
      if (context.mode())
        dispatch12.call("change");
      return background;
    };
    var _loadPromise;
    background.ensureLoaded = function() {
      if (_loadPromise)
        return _loadPromise;
      function parseMapParams(qmap) {
        if (!qmap)
          return false;
        var params = qmap.split("/").map(Number);
        if (params.length < 3 || params.some(isNaN))
          return false;
        return new Extent([params[2], params[1]]);
      }
      var hash = utilStringQs(window.location.hash);
      var requested = hash.background || hash.layer;
      var extent6 = parseMapParams(hash.map);
      return _loadPromise = ensureImageryIndex().then(function(imageryIndex) {
        var first2 = imageryIndex.backgrounds.length && imageryIndex.backgrounds[0];
        var best;
        if (!requested && extent6) {
          best = background.sources(extent6).find(function(s) {
            return s.best();
          });
        }
        if (requested && requested.indexOf("custom:") === 0) {
          var template = requested.replace(/^custom:/, "");
          var custom = background.findSource("custom");
          background.baseLayerSource(custom.template(template));
          corePreferences("background-custom-template", template);
        } else {
          background.baseLayerSource(background.findSource(requested) || best || background.findSource(corePreferences("background-last-used")) || background.findSource("Maxar-Premium") || background.findSource("Bing") || first2 || background.findSource("none"));
        }
        var locator = imageryIndex.backgrounds.find(function(d) {
          return d.overlay && d.default;
        });
        if (locator) {
          background.toggleOverlayLayer(locator);
        }
        var overlays = (hash.overlays || "").split(",");
        overlays.forEach(function(overlay) {
          overlay = background.findSource(overlay);
          if (overlay) {
            background.toggleOverlayLayer(overlay);
          }
        });
        if (hash.gpx) {
          var gpx3 = context.layers().layer("data");
          if (gpx3) {
            gpx3.url(hash.gpx, ".gpx");
          }
        }
        if (hash.offset) {
          var offset = hash.offset.replace(/;/g, ",").split(",").map(function(n2) {
            return !isNaN(n2) && n2;
          });
          if (offset.length === 2) {
            background.offset(geoMetersToOffset(offset));
          }
        }
      }).catch(function() {
      });
    };
    return utilRebind(background, dispatch12, "on");
  }

  // modules/renderer/features.js
  function rendererFeatures(context) {
    var dispatch12 = dispatch_default("change", "redraw");
    var features2 = utilRebind({}, dispatch12, "on");
    var _deferred2 = new Set();
    var traffic_roads = {
      "motorway": true,
      "motorway_link": true,
      "trunk": true,
      "trunk_link": true,
      "primary": true,
      "primary_link": true,
      "secondary": true,
      "secondary_link": true,
      "tertiary": true,
      "tertiary_link": true,
      "residential": true,
      "unclassified": true,
      "living_street": true
    };
    var service_roads = {
      "service": true,
      "road": true,
      "track": true
    };
    var paths = {
      "path": true,
      "footway": true,
      "cycleway": true,
      "bridleway": true,
      "steps": true,
      "pedestrian": true
    };
    var past_futures = {
      "proposed": true,
      "construction": true,
      "abandoned": true,
      "dismantled": true,
      "disused": true,
      "razed": true,
      "demolished": true,
      "obliterated": true
    };
    var _cullFactor = 1;
    var _cache4 = {};
    var _rules = {};
    var _stats = {};
    var _keys = [];
    var _hidden = [];
    var _forceVisible = {};
    function update4() {
      if (!window.mocha) {
        var hash = utilStringQs(window.location.hash);
        var disabled = features2.disabled();
        if (disabled.length) {
          hash.disable_features = disabled.join(",");
        } else {
          delete hash.disable_features;
        }
        window.location.replace("#" + utilQsString(hash, true));
        corePreferences("disabled-features", disabled.join(","));
      }
      _hidden = features2.hidden();
      dispatch12.call("change");
      dispatch12.call("redraw");
    }
    function defineRule(k, filter2, max2) {
      var isEnabled = true;
      _keys.push(k);
      _rules[k] = {
        filter: filter2,
        enabled: isEnabled,
        count: 0,
        currentMax: max2 || Infinity,
        defaultMax: max2 || Infinity,
        enable: function enable() {
          this.enabled = true;
          this.currentMax = this.defaultMax;
        },
        disable: function disable() {
          this.enabled = false;
          this.currentMax = 0;
        },
        hidden: function hidden() {
          return this.count === 0 && !this.enabled || this.count > this.currentMax * _cullFactor;
        },
        autoHidden: function autoHidden() {
          return this.hidden() && this.currentMax > 0;
        }
      };
    }
    defineRule("points", function isPoint(tags, geometry6) {
      return geometry6 === "point";
    }, 300);
    defineRule("traffic_roads", function isTrafficRoad(tags) {
      return traffic_roads[tags.highway];
    });
    defineRule("service_roads", function isServiceRoad(tags) {
      return service_roads[tags.highway];
    });
    defineRule("paths", function isPath(tags) {
      return paths[tags.highway];
    });
    defineRule("buildings", function isBuilding(tags) {
      return !!tags.building && tags.building !== "no" || tags.parking === "multi-storey" || tags.parking === "sheds" || tags.parking === "carports" || tags.parking === "garage_boxes";
    }, 250);
    defineRule("building_parts", function isBuildingPart(tags) {
      return tags["building:part"];
    });
    defineRule("indoor", function isIndoor(tags) {
      return tags.indoor;
    });
    defineRule("landuse", function isLanduse(tags, geometry6) {
      return geometry6 === "area" && !_rules.buildings.filter(tags) && !_rules.building_parts.filter(tags) && !_rules.indoor.filter(tags) && !_rules.water.filter(tags) && !_rules.pistes.filter(tags);
    });
    defineRule("boundaries", function isBoundary(tags) {
      return !!tags.boundary && !(traffic_roads[tags.highway] || service_roads[tags.highway] || paths[tags.highway] || tags.waterway || tags.railway || tags.landuse || tags.natural || tags.building || tags.power);
    });
    defineRule("water", function isWater(tags) {
      return !!tags.waterway || tags.natural === "water" || tags.natural === "coastline" || tags.natural === "bay" || tags.landuse === "pond" || tags.landuse === "basin" || tags.landuse === "reservoir" || tags.landuse === "salt_pond";
    });
    defineRule("rail", function isRail(tags) {
      return (!!tags.railway || tags.landuse === "railway") && !(traffic_roads[tags.highway] || service_roads[tags.highway] || paths[tags.highway]);
    });
    defineRule("pistes", function isPiste(tags) {
      return tags["piste:type"];
    });
    defineRule("aerialways", function isPiste(tags) {
      return tags.aerialway && tags.aerialway !== "yes" && tags.aerialway !== "station";
    });
    defineRule("power", function isPower(tags) {
      return !!tags.power;
    });
    defineRule("past_future", function isPastFuture(tags) {
      if (traffic_roads[tags.highway] || service_roads[tags.highway] || paths[tags.highway]) {
        return false;
      }
      var strings = Object.keys(tags);
      for (var i2 = 0; i2 < strings.length; i2++) {
        var s = strings[i2];
        if (past_futures[s] || past_futures[tags[s]]) {
          return true;
        }
      }
      return false;
    });
    defineRule("others", function isOther(tags, geometry6) {
      return geometry6 === "line" || geometry6 === "area";
    });
    features2.features = function() {
      return _rules;
    };
    features2.keys = function() {
      return _keys;
    };
    features2.enabled = function(k) {
      if (!arguments.length) {
        return _keys.filter(function(k2) {
          return _rules[k2].enabled;
        });
      }
      return _rules[k] && _rules[k].enabled;
    };
    features2.disabled = function(k) {
      if (!arguments.length) {
        return _keys.filter(function(k2) {
          return !_rules[k2].enabled;
        });
      }
      return _rules[k] && !_rules[k].enabled;
    };
    features2.hidden = function(k) {
      if (!arguments.length) {
        return _keys.filter(function(k2) {
          return _rules[k2].hidden();
        });
      }
      return _rules[k] && _rules[k].hidden();
    };
    features2.autoHidden = function(k) {
      if (!arguments.length) {
        return _keys.filter(function(k2) {
          return _rules[k2].autoHidden();
        });
      }
      return _rules[k] && _rules[k].autoHidden();
    };
    features2.enable = function(k) {
      if (_rules[k] && !_rules[k].enabled) {
        _rules[k].enable();
        update4();
      }
    };
    features2.enableAll = function() {
      var didEnable = false;
      for (var k in _rules) {
        if (!_rules[k].enabled) {
          didEnable = true;
          _rules[k].enable();
        }
      }
      if (didEnable)
        update4();
    };
    features2.disable = function(k) {
      if (_rules[k] && _rules[k].enabled) {
        _rules[k].disable();
        update4();
      }
    };
    features2.disableAll = function() {
      var didDisable = false;
      for (var k in _rules) {
        if (_rules[k].enabled) {
          didDisable = true;
          _rules[k].disable();
        }
      }
      if (didDisable)
        update4();
    };
    features2.toggle = function(k) {
      if (_rules[k]) {
        (function(f2) {
          return f2.enabled ? f2.disable() : f2.enable();
        })(_rules[k]);
        update4();
      }
    };
    features2.resetStats = function() {
      for (var i2 = 0; i2 < _keys.length; i2++) {
        _rules[_keys[i2]].count = 0;
      }
      dispatch12.call("change");
    };
    features2.gatherStats = function(d, resolver, dimensions) {
      var needsRedraw = false;
      var types = utilArrayGroupBy(d, "type");
      var entities = [].concat(types.relation || [], types.way || [], types.node || []);
      var currHidden, geometry6, matches, i2, j;
      for (i2 = 0; i2 < _keys.length; i2++) {
        _rules[_keys[i2]].count = 0;
      }
      _cullFactor = dimensions[0] * dimensions[1] / 1e6;
      for (i2 = 0; i2 < entities.length; i2++) {
        geometry6 = entities[i2].geometry(resolver);
        matches = Object.keys(features2.getMatches(entities[i2], resolver, geometry6));
        for (j = 0; j < matches.length; j++) {
          _rules[matches[j]].count++;
        }
      }
      currHidden = features2.hidden();
      if (currHidden !== _hidden) {
        _hidden = currHidden;
        needsRedraw = true;
        dispatch12.call("change");
      }
      return needsRedraw;
    };
    features2.stats = function() {
      for (var i2 = 0; i2 < _keys.length; i2++) {
        _stats[_keys[i2]] = _rules[_keys[i2]].count;
      }
      return _stats;
    };
    features2.clear = function(d) {
      for (var i2 = 0; i2 < d.length; i2++) {
        features2.clearEntity(d[i2]);
      }
    };
    features2.clearEntity = function(entity2) {
      delete _cache4[osmEntity.key(entity2)];
    };
    features2.reset = function() {
      Array.from(_deferred2).forEach(function(handle) {
        window.cancelIdleCallback(handle);
        _deferred2.delete(handle);
      });
      _cache4 = {};
    };
    function relationShouldBeChecked(relation) {
      return relation.tags.type === "boundary";
    }
    features2.getMatches = function(entity2, resolver, geometry6) {
      if (geometry6 === "vertex" || geometry6 === "relation" && !relationShouldBeChecked(entity2))
        return {};
      var ent = osmEntity.key(entity2);
      if (!_cache4[ent]) {
        _cache4[ent] = {};
      }
      if (!_cache4[ent].matches) {
        var matches = {};
        var hasMatch = false;
        for (var i2 = 0; i2 < _keys.length; i2++) {
          if (_keys[i2] === "others") {
            if (hasMatch)
              continue;
            if (entity2.type === "way") {
              var parents = features2.getParents(entity2, resolver, geometry6);
              if (parents.length === 1 && parents[0].isMultipolygon() || parents.length > 0 && parents.every(function(parent2) {
                return parent2.tags.type === "boundary";
              })) {
                var pkey = osmEntity.key(parents[0]);
                if (_cache4[pkey] && _cache4[pkey].matches) {
                  matches = Object.assign({}, _cache4[pkey].matches);
                  continue;
                }
              }
            }
          }
          if (_rules[_keys[i2]].filter(entity2.tags, geometry6)) {
            matches[_keys[i2]] = hasMatch = true;
          }
        }
        _cache4[ent].matches = matches;
      }
      return _cache4[ent].matches;
    };
    features2.getParents = function(entity2, resolver, geometry6) {
      if (geometry6 === "point")
        return [];
      var ent = osmEntity.key(entity2);
      if (!_cache4[ent]) {
        _cache4[ent] = {};
      }
      if (!_cache4[ent].parents) {
        var parents = [];
        if (geometry6 === "vertex") {
          parents = resolver.parentWays(entity2);
        } else {
          parents = resolver.parentRelations(entity2);
        }
        _cache4[ent].parents = parents;
      }
      return _cache4[ent].parents;
    };
    features2.isHiddenPreset = function(preset, geometry6) {
      if (!_hidden.length)
        return false;
      if (!preset.tags)
        return false;
      var test = preset.setTags({}, geometry6);
      for (var key in _rules) {
        if (_rules[key].filter(test, geometry6)) {
          if (_hidden.indexOf(key) !== -1) {
            return key;
          }
          return false;
        }
      }
      return false;
    };
    features2.isHiddenFeature = function(entity2, resolver, geometry6) {
      if (!_hidden.length)
        return false;
      if (!entity2.version)
        return false;
      if (_forceVisible[entity2.id])
        return false;
      var matches = Object.keys(features2.getMatches(entity2, resolver, geometry6));
      return matches.length && matches.every(function(k) {
        return features2.hidden(k);
      });
    };
    features2.isHiddenChild = function(entity2, resolver, geometry6) {
      if (!_hidden.length)
        return false;
      if (!entity2.version || geometry6 === "point")
        return false;
      if (_forceVisible[entity2.id])
        return false;
      var parents = features2.getParents(entity2, resolver, geometry6);
      if (!parents.length)
        return false;
      for (var i2 = 0; i2 < parents.length; i2++) {
        if (!features2.isHidden(parents[i2], resolver, parents[i2].geometry(resolver))) {
          return false;
        }
      }
      return true;
    };
    features2.hasHiddenConnections = function(entity2, resolver) {
      if (!_hidden.length)
        return false;
      var childNodes2, connections;
      if (entity2.type === "midpoint") {
        childNodes2 = [resolver.entity(entity2.edge[0]), resolver.entity(entity2.edge[1])];
        connections = [];
      } else {
        childNodes2 = entity2.nodes ? resolver.childNodes(entity2) : [];
        connections = features2.getParents(entity2, resolver, entity2.geometry(resolver));
      }
      connections = childNodes2.reduce(function(result6, e3) {
        return resolver.isShared(e3) ? utilArrayUnion(result6, resolver.parentWays(e3)) : result6;
      }, connections);
      return connections.some(function(e3) {
        return features2.isHidden(e3, resolver, e3.geometry(resolver));
      });
    };
    features2.isHidden = function(entity2, resolver, geometry6) {
      if (!_hidden.length)
        return false;
      if (!entity2.version)
        return false;
      var fn = geometry6 === "vertex" ? features2.isHiddenChild : features2.isHiddenFeature;
      return fn(entity2, resolver, geometry6);
    };
    features2.filter = function(d, resolver) {
      if (!_hidden.length)
        return d;
      var result6 = [];
      for (var i2 = 0; i2 < d.length; i2++) {
        var entity2 = d[i2];
        if (!features2.isHidden(entity2, resolver, entity2.geometry(resolver))) {
          result6.push(entity2);
        }
      }
      return result6;
    };
    features2.forceVisible = function(entityIDs) {
      if (!arguments.length)
        return Object.keys(_forceVisible);
      _forceVisible = {};
      for (var i2 = 0; i2 < entityIDs.length; i2++) {
        _forceVisible[entityIDs[i2]] = true;
        var entity2 = context.hasEntity(entityIDs[i2]);
        if (entity2 && entity2.type === "relation") {
          for (var j in entity2.members) {
            _forceVisible[entity2.members[j].id] = true;
          }
        }
      }
      return features2;
    };
    features2.init = function() {
      var storage = corePreferences("disabled-features");
      if (storage) {
        var storageDisabled = storage.replace(/;/g, ",").split(",");
        storageDisabled.forEach(features2.disable);
      }
      var hash = utilStringQs(window.location.hash);
      if (hash.disable_features) {
        var hashDisabled = hash.disable_features.replace(/;/g, ",").split(",");
        hashDisabled.forEach(features2.disable);
      }
    };
    context.history().on("merge.features", function(newEntities) {
      if (!newEntities)
        return;
      var handle = window.requestIdleCallback(function() {
        var graph3 = context.graph();
        var types = utilArrayGroupBy(newEntities, "type");
        var entities = [].concat(types.relation || [], types.way || [], types.node || []);
        for (var i2 = 0; i2 < entities.length; i2++) {
          var geometry6 = entities[i2].geometry(graph3);
          features2.getMatches(entities[i2], graph3, geometry6);
        }
      });
      _deferred2.add(handle);
    });
    return features2;
  }

  // modules/renderer/map.js
  init_typeof();

  // node_modules/lodash-es/throttle.js
  var FUNC_ERROR_TEXT2 = "Expected a function";
  function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT2);
    }
    if (isObject_default(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce_default(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  var throttle_default = throttle;

  // modules/svg/areas.js
  var import_fast_deep_equal5 = __toModule(require_fast_deep_equal());

  // modules/svg/helpers.js
  function svgPassiveVertex(node, graph3, activeID) {
    if (!activeID)
      return 1;
    if (activeID === node.id)
      return 0;
    var parents = graph3.parentWays(node);
    var i2, j, nodes, isClosed2, ix1, ix2, ix3, ix4, max2;
    for (i2 = 0; i2 < parents.length; i2++) {
      nodes = parents[i2].nodes;
      isClosed2 = parents[i2].isClosed();
      for (j = 0; j < nodes.length; j++) {
        if (nodes[j] === node.id) {
          ix1 = j - 2;
          ix2 = j - 1;
          ix3 = j + 1;
          ix4 = j + 2;
          if (isClosed2) {
            max2 = nodes.length - 1;
            if (ix1 < 0)
              ix1 = max2 + ix1;
            if (ix2 < 0)
              ix2 = max2 + ix2;
            if (ix3 > max2)
              ix3 = ix3 - max2;
            if (ix4 > max2)
              ix4 = ix4 - max2;
          }
          if (nodes[ix1] === activeID)
            return 0;
          else if (nodes[ix2] === activeID)
            return 2;
          else if (nodes[ix3] === activeID)
            return 2;
          else if (nodes[ix4] === activeID)
            return 0;
          else if (isClosed2 && nodes.indexOf(activeID) !== -1)
            return 0;
        }
      }
    }
    return 1;
  }
  function svgMarkerSegments(projection2, graph3, dt, shouldReverse, bothDirections) {
    return function(entity2) {
      var i2 = 0;
      var offset = dt;
      var segments2 = [];
      var clip = identity_default2().clipExtent(projection2.clipExtent()).stream;
      var coordinates = graph3.childNodes(entity2).map(function(n2) {
        return n2.loc;
      });
      var a, b2;
      if (shouldReverse(entity2)) {
        coordinates.reverse();
      }
      stream_default({
        type: "LineString",
        coordinates: coordinates
      }, projection2.stream(clip({
        lineStart: function lineStart5() {
        },
        lineEnd: function lineEnd5() {
          a = null;
        },
        point: function point5(x2, y) {
          b2 = [x2, y];
          if (a) {
            var span = vecLength(a, b2) - offset;
            if (span >= 0) {
              var heading = vecAngle(a, b2);
              var dx = dt * Math.cos(heading);
              var dy = dt * Math.sin(heading);
              var p2 = [a[0] + offset * Math.cos(heading), a[1] + offset * Math.sin(heading)];
              var coord = [a, p2];
              for (span -= dt; span >= 0; span -= dt) {
                p2 = vecAdd(p2, [dx, dy]);
                coord.push(p2);
              }
              coord.push(b2);
              var segment = "";
              var j;
              for (j = 0; j < coord.length; j++) {
                segment += (j === 0 ? "M" : "L") + coord[j][0] + "," + coord[j][1];
              }
              segments2.push({
                id: entity2.id,
                index: i2++,
                d: segment
              });
              if (bothDirections(entity2)) {
                segment = "";
                for (j = coord.length - 1; j >= 0; j--) {
                  segment += (j === coord.length - 1 ? "M" : "L") + coord[j][0] + "," + coord[j][1];
                }
                segments2.push({
                  id: entity2.id,
                  index: i2++,
                  d: segment
                });
              }
            }
            offset = -span;
          }
          a = b2;
        }
      })));
      return segments2;
    };
  }
  function svgPath(projection2, graph3, isArea2) {
    var cache7 = {};
    var padding = isArea2 ? 65 : 5;
    var viewport = projection2.clipExtent();
    var paddedExtent;
    if (viewport.min) {
      paddedExtent = [[viewport.min[0] - padding, viewport.min[1] - padding], [viewport.max[0] + padding, viewport.max[1] + padding]];
    } else {
      paddedExtent = [[viewport[0][0] - padding, viewport[0][1] - padding], [viewport[1][0] + padding, viewport[1][1] + padding]];
    }
    var clip = identity_default2().clipExtent(paddedExtent).stream;
    var project = projection2.stream;
    var path = path_default().projection({
      stream: function stream(output4) {
        return project(clip(output4));
      }
    });
    var svgpath = function svgpath2(entity2) {
      if (entity2.id in cache7) {
        return cache7[entity2.id];
      } else {
        return cache7[entity2.id] = path(entity2.asGeoJSON(graph3));
      }
    };
    svgpath.geojson = function(d) {
      if (d.__featurehash__ !== void 0) {
        if (d.__featurehash__ in cache7) {
          return cache7[d.__featurehash__];
        } else {
          return cache7[d.__featurehash__] = path(d);
        }
      } else {
        return path(d);
      }
    };
    return svgpath;
  }
  function svgPointTransform(projection2) {
    var svgpoint = function svgpoint2(entity2) {
      var pt = projection2(entity2.loc);
      return "translate(" + pt[0] + "," + pt[1] + ")";
    };
    svgpoint.geojson = function(d) {
      return svgpoint(d.properties.entity);
    };
    return svgpoint;
  }
  function svgRelationMemberTags(graph3) {
    return function(entity2) {
      var tags = entity2.tags;
      var shouldCopyMultipolygonTags = !entity2.hasInterestingTags();
      graph3.parentRelations(entity2).forEach(function(relation) {
        var type3 = relation.tags.type;
        if (type3 === "multipolygon" && shouldCopyMultipolygonTags || type3 === "boundary") {
          tags = Object.assign({}, relation.tags, tags);
        }
      });
      return tags;
    };
  }
  function svgSegmentWay(way, graph3, activeID) {
    if (activeID === void 0) {
      return graph3.transient(way, "waySegments", getWaySegments);
    } else {
      return getWaySegments();
    }
    function getWaySegments() {
      var isActiveWay = way.nodes.indexOf(activeID) !== -1;
      var features2 = {
        passive: [],
        active: []
      };
      var start2 = {};
      var end = {};
      var node, type3;
      for (var i2 = 0; i2 < way.nodes.length; i2++) {
        node = graph3.entity(way.nodes[i2]);
        type3 = svgPassiveVertex(node, graph3, activeID);
        end = {
          node: node,
          type: type3
        };
        if (start2.type !== void 0) {
          if (start2.node.id === activeID || end.node.id === activeID) {
          } else if (isActiveWay && (start2.type === 2 || end.type === 2)) {
            pushActive(start2, end, i2);
          } else if (start2.type === 0 && end.type === 0) {
            pushActive(start2, end, i2);
          } else {
            pushPassive(start2, end, i2);
          }
        }
        start2 = end;
      }
      return features2;
      function pushActive(start3, end2, index) {
        features2.active.push({
          type: "Feature",
          id: way.id + "-" + index + "-nope",
          properties: {
            nope: true,
            target: true,
            entity: way,
            nodes: [start3.node, end2.node],
            index: index
          },
          geometry: {
            type: "LineString",
            coordinates: [start3.node.loc, end2.node.loc]
          }
        });
      }
      function pushPassive(start3, end2, index) {
        features2.passive.push({
          type: "Feature",
          id: way.id + "-" + index,
          properties: {
            target: true,
            entity: way,
            nodes: [start3.node, end2.node],
            index: index
          },
          geometry: {
            type: "LineString",
            coordinates: [start3.node.loc, end2.node.loc]
          }
        });
      }
    }
  }

  // modules/svg/tag_classes.js
  function svgTagClasses() {
    var primaries = ["building", "highway", "railway", "waterway", "aeroway", "aerialway", "piste:type", "boundary", "power", "amenity", "natural", "landuse", "leisure", "military", "place", "man_made", "route", "attraction", "building:part", "indoor", "seamark:type"];
    var statuses = [
      "proposed",
      "planned",
      "construction",
      "disused",
      "abandoned",
      "dismantled",
      "razed",
      "demolished",
      "obliterated",
      "intermittent"
    ];
    var secondaries = ["oneway", "bridge", "tunnel", "embankment", "cutting", "barrier", "surface", "tracktype", "footway", "crossing", "service", "sport", "public_transport", "location", "parking", "golf", "type", "leisure", "man_made", "indoor"];
    var _tags = function _tags2(entity2) {
      return entity2.tags;
    };
    var tagClasses = function tagClasses2(selection2) {
      selection2.each(function tagClassesEach(entity2) {
        var value2 = this.className;
        if (value2.baseVal !== void 0) {
          value2 = value2.baseVal;
        }
        var t = _tags(entity2);
        var computed = tagClasses2.getClassesString(t, value2);
        if (computed !== value2) {
          select_default2(this).attr("class", computed);
        }
      });
    };
    tagClasses.getClassesString = function(t, value2) {
      var primary, status3;
      var i2, j, k, v;
      var overrideGeometry;
      if (/\bstroke\b/.test(value2)) {
        if (!!t.barrier && t.barrier !== "no") {
          overrideGeometry = "line";
        }
      }
      var classes = value2.trim().split(/\s+/).filter(function(klass) {
        return klass.length && !/^tag-/.test(klass);
      }).map(function(klass) {
        return klass === "line" || klass === "area" ? overrideGeometry || klass : klass;
      });
      for (i2 = 0; i2 < primaries.length; i2++) {
        k = primaries[i2];
        v = t[k];
        if (!v || v === "no")
          continue;
        if (k === "piste:type") {
          k = "piste";
        } else if (k.includes(":")) {
          k = k.replace(":", "_");
        }
        primary = k;
        if (statuses.indexOf(v) !== -1) {
          status3 = v;
          classes.push("tag-" + k);
        } else {
          classes.push("tag-" + k);
          classes.push("tag-" + k + "-" + v);
        }
        break;
      }
      if (!primary) {
        for (i2 = 0; i2 < statuses.length; i2++) {
          for (j = 0; j < primaries.length; j++) {
            k = statuses[i2] + ":" + primaries[j];
            v = t[k];
            if (!v || v === "no")
              continue;
            status3 = statuses[i2];
            break;
          }
        }
      }
      if (!status3) {
        for (i2 = 0; i2 < statuses.length; i2++) {
          k = statuses[i2];
          v = t[k];
          if (!v || v === "no")
            continue;
          if (v === "yes") {
            status3 = k;
          } else if (primary && primary === v) {
            status3 = k;
          } else if (!primary && primaries.indexOf(v) !== -1) {
            status3 = k;
            primary = v;
            classes.push("tag-" + v);
          }
          if (status3)
            break;
        }
      }
      if (status3) {
        classes.push("tag-status");
        classes.push("tag-status-" + status3);
      }
      for (i2 = 0; i2 < secondaries.length; i2++) {
        k = secondaries[i2];
        v = t[k];
        if (!v || v === "no" || k === primary)
          continue;
        classes.push("tag-" + k);
        classes.push("tag-" + k + "-" + v);
      }
      if (primary === "highway" && !osmPathHighwayTagValues[t.highway] || primary === "aeroway") {
        var surface = t.highway === "track" ? "unpaved" : "paved";
        for (k in t) {
          v = t[k];
          if (k in osmPavedTags) {
            surface = osmPavedTags[k][v] ? "paved" : "unpaved";
          }
          if (k in osmSemipavedTags && !!osmSemipavedTags[k][v]) {
            surface = "semipaved";
          }
        }
        classes.push("tag-" + surface);
      }
      var qid = t.wikidata || t["flag:wikidata"] || t["brand:wikidata"] || t["network:wikidata"] || t["operator:wikidata"];
      if (qid) {
        classes.push("tag-wikidata");
      }
      return classes.join(" ").trim();
    };
    tagClasses.tags = function(val) {
      if (!arguments.length)
        return _tags;
      _tags = val;
      return tagClasses;
    };
    return tagClasses;
  }

  // modules/svg/tag_pattern.js
  var patterns = {
    amenity: {
      grave_yard: "cemetery",
      fountain: "water_standing"
    },
    landuse: {
      cemetery: [{
        religion: "christian",
        pattern: "cemetery_christian"
      }, {
        religion: "buddhist",
        pattern: "cemetery_buddhist"
      }, {
        religion: "muslim",
        pattern: "cemetery_muslim"
      }, {
        religion: "jewish",
        pattern: "cemetery_jewish"
      }, {
        pattern: "cemetery"
      }],
      construction: "construction",
      farmland: "farmland",
      farmyard: "farmyard",
      forest: [
        {
          leaf_type: "broadleaved",
          pattern: "forest_broadleaved"
        },
        {
          leaf_type: "needleleaved",
          pattern: "forest_needleleaved"
        },
        {
          leaf_type: "leafless",
          pattern: "forest_leafless"
        },
        {
          pattern: "forest"
        }
      ],
      grave_yard: "cemetery",
      grass: [{
        golf: "green",
        pattern: "golf_green"
      }, {
        pattern: "grass"
      }],
      landfill: "landfill",
      meadow: "meadow",
      military: "construction",
      orchard: "orchard",
      quarry: "quarry",
      vineyard: "vineyard"
    },
    natural: {
      beach: "beach",
      grassland: "grass",
      sand: "beach",
      scrub: "scrub",
      water: [{
        water: "pond",
        pattern: "pond"
      }, {
        water: "reservoir",
        pattern: "water_standing"
      }, {
        pattern: "waves"
      }],
      wetland: [{
        wetland: "marsh",
        pattern: "wetland_marsh"
      }, {
        wetland: "swamp",
        pattern: "wetland_swamp"
      }, {
        wetland: "bog",
        pattern: "wetland_bog"
      }, {
        wetland: "reedbed",
        pattern: "wetland_reedbed"
      }, {
        pattern: "wetland"
      }],
      wood: [
        {
          leaf_type: "broadleaved",
          pattern: "forest_broadleaved"
        },
        {
          leaf_type: "needleleaved",
          pattern: "forest_needleleaved"
        },
        {
          leaf_type: "leafless",
          pattern: "forest_leafless"
        },
        {
          pattern: "forest"
        }
      ]
    },
    traffic_calming: {
      island: [{
        surface: "grass",
        pattern: "grass"
      }],
      chicane: [{
        surface: "grass",
        pattern: "grass"
      }],
      choker: [{
        surface: "grass",
        pattern: "grass"
      }]
    }
  };
  function svgTagPattern(tags) {
    if (tags.building && tags.building !== "no") {
      return null;
    }
    for (var tag in patterns) {
      var entityValue = tags[tag];
      if (!entityValue)
        continue;
      if (typeof patterns[tag] === "string") {
        return "pattern-" + patterns[tag];
      } else {
        var values2 = patterns[tag];
        for (var value2 in values2) {
          if (entityValue !== value2)
            continue;
          var rules = values2[value2];
          if (typeof rules === "string") {
            return "pattern-" + rules;
          }
          for (var ruleKey in rules) {
            var rule = rules[ruleKey];
            var pass = true;
            for (var criterion in rule) {
              if (criterion !== "pattern") {
                var v = tags[criterion];
                if (!v || v !== rule[criterion]) {
                  pass = false;
                  break;
                }
              }
            }
            if (pass) {
              return "pattern-" + rule.pattern;
            }
          }
        }
      }
    }
    return null;
  }

  // modules/svg/areas.js
  function svgAreas(projection2, context) {
    function getPatternStyle(tags) {
      var imageID = svgTagPattern(tags);
      if (imageID) {
        return 'url("#ideditor-' + imageID + '")';
      }
      return "";
    }
    function drawTargets(selection2, graph3, entities, filter2) {
      var targetClass = context.getDebug("target") ? "pink " : "nocolor ";
      var nopeClass = context.getDebug("target") ? "red " : "nocolor ";
      var getPath = svgPath(projection2).geojson;
      var activeID = context.activeID();
      var base2 = context.history().base();
      var data2 = {
        targets: [],
        nopes: []
      };
      entities.forEach(function(way) {
        var features2 = svgSegmentWay(way, graph3, activeID);
        data2.targets.push.apply(data2.targets, features2.passive);
        data2.nopes.push.apply(data2.nopes, features2.active);
      });
      var targetData = data2.targets.filter(getPath);
      var targets = selection2.selectAll(".area.target-allowed").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(targetData, function key(d) {
        return d.id;
      });
      targets.exit().remove();
      var segmentWasEdited = function segmentWasEdited2(d) {
        var wayID = d.properties.entity.id;
        if (!base2.entities[wayID] || !(0, import_fast_deep_equal5.default)(graph3.entities[wayID].nodes, base2.entities[wayID].nodes)) {
          return false;
        }
        return d.properties.nodes.some(function(n2) {
          return !base2.entities[n2.id] || !(0, import_fast_deep_equal5.default)(graph3.entities[n2.id].loc, base2.entities[n2.id].loc);
        });
      };
      targets.enter().append("path").merge(targets).attr("d", getPath).attr("class", function(d) {
        return "way area target target-allowed " + targetClass + d.id;
      }).classed("segment-edited", segmentWasEdited);
      var nopeData = data2.nopes.filter(getPath);
      var nopes = selection2.selectAll(".area.target-nope").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(nopeData, function key(d) {
        return d.id;
      });
      nopes.exit().remove();
      nopes.enter().append("path").merge(nopes).attr("d", getPath).attr("class", function(d) {
        return "way area target target-nope " + nopeClass + d.id;
      }).classed("segment-edited", segmentWasEdited);
    }
    function drawAreas(selection2, graph3, entities, filter2) {
      var path = svgPath(projection2, graph3, true);
      var areas = {};
      var multipolygon2;
      var base2 = context.history().base();
      for (var i2 = 0; i2 < entities.length; i2++) {
        var entity2 = entities[i2];
        if (entity2.geometry(graph3) !== "area")
          continue;
        multipolygon2 = osmIsOldMultipolygonOuterMember(entity2, graph3);
        if (multipolygon2) {
          areas[multipolygon2.id] = {
            entity: multipolygon2.mergeTags(entity2.tags),
            area: Math.abs(entity2.area(graph3))
          };
        } else if (!areas[entity2.id]) {
          areas[entity2.id] = {
            entity: entity2,
            area: Math.abs(entity2.area(graph3))
          };
        }
      }
      var fills = Object.values(areas).filter(function hasPath(a) {
        return path(a.entity);
      });
      fills.sort(function areaSort(a, b2) {
        return b2.area - a.area;
      });
      fills = fills.map(function(a) {
        return a.entity;
      });
      var strokes = fills.filter(function(area3) {
        return area3.type === "way";
      });
      var data2 = {
        clip: fills,
        shadow: strokes,
        stroke: strokes,
        fill: fills
      };
      var clipPaths = context.surface().selectAll("defs").selectAll(".clipPath-osm").filter(filter2).data(data2.clip, osmEntity.key);
      clipPaths.exit().remove();
      var clipPathsEnter = clipPaths.enter().append("clipPath").attr("class", "clipPath-osm").attr("id", function(entity3) {
        return "ideditor-" + entity3.id + "-clippath";
      });
      clipPathsEnter.append("path");
      clipPaths.merge(clipPathsEnter).selectAll("path").attr("d", path);
      var drawLayer = selection2.selectAll(".layer-osm.areas");
      var touchLayer = selection2.selectAll(".layer-touch.areas");
      var areagroup = drawLayer.selectAll("g.areagroup").data(["fill", "shadow", "stroke"]);
      areagroup = areagroup.enter().append("g").attr("class", function(d) {
        return "areagroup area-" + d;
      }).merge(areagroup);
      var paths = areagroup.selectAll("path").filter(filter2).data(function(layer2) {
        return data2[layer2];
      }, osmEntity.key);
      paths.exit().remove();
      var fillpaths = selection2.selectAll(".area-fill path.area").nodes();
      var bisect = bisector(function(node) {
        return -node.__data__.area(graph3);
      }).left;
      function sortedByArea(entity3) {
        if (this._parent.__data__ === "fill") {
          return fillpaths[bisect(fillpaths, -entity3.area(graph3))];
        }
      }
      paths = paths.enter().insert("path", sortedByArea).merge(paths).each(function(entity3) {
        var layer2 = this.parentNode.__data__;
        this.setAttribute("class", entity3.type + " area " + layer2 + " " + entity3.id);
        if (layer2 === "fill") {
          this.setAttribute("clip-path", "url(#ideditor-" + entity3.id + "-clippath)");
          this.style.fill = this.style.stroke = getPatternStyle(entity3.tags);
        }
      }).classed("added", function(d) {
        return !base2.entities[d.id];
      }).classed("geometry-edited", function(d) {
        return graph3.entities[d.id] && base2.entities[d.id] && !(0, import_fast_deep_equal5.default)(graph3.entities[d.id].nodes, base2.entities[d.id].nodes);
      }).classed("retagged", function(d) {
        return graph3.entities[d.id] && base2.entities[d.id] && !(0, import_fast_deep_equal5.default)(graph3.entities[d.id].tags, base2.entities[d.id].tags);
      }).call(svgTagClasses()).attr("d", path);
      touchLayer.call(drawTargets, graph3, data2.stroke, filter2);
    }
    return drawAreas;
  }

  // modules/svg/data.js
  var import_fast_json_stable_stringify = __toModule(require_fast_json_stable_stringify());
  var import_togeojson2 = __toModule(require_togeojson_umd());
  var _initialized = false;
  var _enabled = false;
  var _geojson;
  function svgData(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var _showLabels = true;
    var detected = utilDetect();
    var layer2 = select_default2(null);
    var _vtService;
    var _fileList;
    var _template;
    var _src;
    function init19() {
      if (_initialized)
        return;
      _geojson = {};
      _enabled = true;
      function over(d3_event) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        d3_event.dataTransfer.dropEffect = "copy";
      }
      context.container().attr("dropzone", "copy").on("drop.svgData", function(d3_event) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        if (!detected.filedrop)
          return;
        drawData.fileList(d3_event.dataTransfer.files);
      }).on("dragenter.svgData", over).on("dragexit.svgData", over).on("dragover.svgData", over);
      _initialized = true;
    }
    function getService() {
      if (services.vectorTile && !_vtService) {
        _vtService = services.vectorTile;
        _vtService.event.on("loadedData", throttledRedraw);
      } else if (!services.vectorTile && _vtService) {
        _vtService = null;
      }
      return _vtService;
    }
    function showLayer() {
      layerOn();
      layer2.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end", function() {
        dispatch12.call("change");
      });
    }
    function hideLayer() {
      throttledRedraw.cancel();
      layer2.transition().duration(250).style("opacity", 0).on("end", layerOff);
    }
    function layerOn() {
      layer2.style("display", "block");
    }
    function layerOff() {
      layer2.selectAll(".viewfield-group").remove();
      layer2.style("display", "none");
    }
    function ensureIDs(gj) {
      if (!gj)
        return null;
      if (gj.type === "FeatureCollection") {
        for (var i2 = 0; i2 < gj.features.length; i2++) {
          ensureFeatureID(gj.features[i2]);
        }
      } else {
        ensureFeatureID(gj);
      }
      return gj;
    }
    function ensureFeatureID(feature3) {
      if (!feature3)
        return;
      feature3.__featurehash__ = utilHashcode((0, import_fast_json_stable_stringify.default)(feature3));
      return feature3;
    }
    function getFeatures(gj) {
      if (!gj)
        return [];
      if (gj.type === "FeatureCollection") {
        return gj.features;
      } else {
        return [gj];
      }
    }
    function featureKey(d) {
      return d.__featurehash__;
    }
    function isPolygon(d) {
      return d.geometry.type === "Polygon" || d.geometry.type === "MultiPolygon";
    }
    function clipPathID(d) {
      return "ideditor-data-" + d.__featurehash__ + "-clippath";
    }
    function featureClasses(d) {
      return ["data" + d.__featurehash__, d.geometry.type, isPolygon(d) ? "area" : "", d.__layerID__ || ""].filter(Boolean).join(" ");
    }
    function drawData(selection2) {
      var vtService = getService();
      var getPath = svgPath(projection2).geojson;
      var getAreaPath = svgPath(projection2, null, true).geojson;
      var hasData = drawData.hasData();
      layer2 = selection2.selectAll(".layer-mapdata").data(_enabled && hasData ? [0] : []);
      layer2.exit().remove();
      layer2 = layer2.enter().append("g").attr("class", "layer-mapdata").merge(layer2);
      var surface = context.surface();
      if (!surface || surface.empty())
        return;
      var geoData, polygonData;
      if (_template && vtService) {
        var sourceID = _template;
        vtService.loadTiles(sourceID, _template, projection2);
        geoData = vtService.data(sourceID, projection2);
      } else {
        geoData = getFeatures(_geojson);
      }
      geoData = geoData.filter(getPath);
      polygonData = geoData.filter(isPolygon);
      var clipPaths = surface.selectAll("defs").selectAll(".clipPath-data").data(polygonData, featureKey);
      clipPaths.exit().remove();
      var clipPathsEnter = clipPaths.enter().append("clipPath").attr("class", "clipPath-data").attr("id", clipPathID);
      clipPathsEnter.append("path");
      clipPaths.merge(clipPathsEnter).selectAll("path").attr("d", getAreaPath);
      var datagroups = layer2.selectAll("g.datagroup").data(["fill", "shadow", "stroke"]);
      datagroups = datagroups.enter().append("g").attr("class", function(d) {
        return "datagroup datagroup-" + d;
      }).merge(datagroups);
      var pathData = {
        fill: polygonData,
        shadow: geoData,
        stroke: geoData
      };
      var paths = datagroups.selectAll("path").data(function(layer3) {
        return pathData[layer3];
      }, featureKey);
      paths.exit().remove();
      paths = paths.enter().append("path").attr("class", function(d) {
        var datagroup = this.parentNode.__data__;
        return "pathdata " + datagroup + " " + featureClasses(d);
      }).attr("clip-path", function(d) {
        var datagroup = this.parentNode.__data__;
        return datagroup === "fill" ? "url(#" + clipPathID(d) + ")" : null;
      }).merge(paths).attr("d", function(d) {
        var datagroup = this.parentNode.__data__;
        return datagroup === "fill" ? getAreaPath(d) : getPath(d);
      });
      layer2.call(drawLabels, "label-halo", geoData).call(drawLabels, "label", geoData);
      function drawLabels(selection3, textClass, data2) {
        var labelPath = path_default(projection2);
        var labelData = data2.filter(function(d) {
          return _showLabels && d.properties && (d.properties.desc || d.properties.name);
        });
        var labels = selection3.selectAll("text." + textClass).data(labelData, featureKey);
        labels.exit().remove();
        labels = labels.enter().append("text").attr("class", function(d) {
          return textClass + " " + featureClasses(d);
        }).merge(labels).text(function(d) {
          return d.properties.desc || d.properties.name;
        }).attr("x", function(d) {
          var centroid = labelPath.centroid(d);
          return centroid[0] + 11;
        }).attr("y", function(d) {
          var centroid = labelPath.centroid(d);
          return centroid[1];
        });
      }
    }
    function getExtension(fileName) {
      if (!fileName)
        return;
      var re2 = /\.(gpx|kml|(geo)?json)$/i;
      var match = fileName.toLowerCase().match(re2);
      return match && match.length && match[0];
    }
    function xmlToDom(textdata) {
      return new DOMParser().parseFromString(textdata, "text/xml");
    }
    drawData.setFile = function(extension, data2) {
      _template = null;
      _fileList = null;
      _geojson = null;
      _src = null;
      var gj;
      switch (extension) {
        case ".gpx":
          gj = (0, import_togeojson2.gpx)(xmlToDom(data2));
          break;
        case ".kml":
          gj = (0, import_togeojson2.kml)(xmlToDom(data2));
          break;
        case ".geojson":
        case ".json":
          gj = JSON.parse(data2);
          break;
      }
      gj = gj || {};
      if (Object.keys(gj).length) {
        _geojson = ensureIDs(gj);
        _src = extension + " data file";
        this.fitZoom();
      }
      dispatch12.call("change");
      return this;
    };
    drawData.showLabels = function(val) {
      if (!arguments.length)
        return _showLabels;
      _showLabels = val;
      return this;
    };
    drawData.enabled = function(val) {
      if (!arguments.length)
        return _enabled;
      _enabled = val;
      if (_enabled) {
        showLayer();
      } else {
        hideLayer();
      }
      dispatch12.call("change");
      return this;
    };
    drawData.hasData = function() {
      var gj = _geojson || {};
      return !!(_template || Object.keys(gj).length);
    };
    drawData.template = function(val, src) {
      if (!arguments.length)
        return _template;
      var osm = context.connection();
      if (osm) {
        var blocklists = osm.imageryBlocklists();
        var fail = false;
        var tested = 0;
        var regex;
        for (var i2 = 0; i2 < blocklists.length; i2++) {
          regex = blocklists[i2];
          fail = regex.test(val);
          tested++;
          if (fail)
            break;
        }
        if (!tested) {
          regex = /.*\.google(apis)?\..*\/(vt|kh)[\?\/].*([xyz]=.*){3}.*/;
          fail = regex.test(val);
        }
      }
      _template = val;
      _fileList = null;
      _geojson = null;
      _src = src || "vectortile:" + val.split(/[?#]/)[0];
      dispatch12.call("change");
      return this;
    };
    drawData.geojson = function(gj, src) {
      if (!arguments.length)
        return _geojson;
      _template = null;
      _fileList = null;
      _geojson = null;
      _src = null;
      gj = gj || {};
      if (Object.keys(gj).length) {
        _geojson = ensureIDs(gj);
        _src = src || "unknown.geojson";
      }
      dispatch12.call("change");
      return this;
    };
    drawData.fileList = function(fileList) {
      if (!arguments.length)
        return _fileList;
      _template = null;
      _fileList = fileList;
      _geojson = null;
      _src = null;
      if (!fileList || !fileList.length)
        return this;
      var f2 = fileList[0];
      var extension = getExtension(f2.name);
      var reader = new FileReader();
      reader.onload = function() {
        return function(e3) {
          drawData.setFile(extension, e3.target.result);
        };
      }(f2);
      reader.readAsText(f2);
      return this;
    };
    drawData.url = function(url) {
      _template = null;
      _fileList = null;
      _geojson = null;
      _src = null;
      text_default3(url).then(function(data2) {
        drawData.setFile(".gpx", data2);
        context.rapidContext().setTaskExtentByGpxData(data2);
      }).catch(function() {
      });
      return this;
    };
    drawData.getSrc = function() {
      return _src || "";
    };
    drawData.fitZoom = function() {
      var features2 = getFeatures(_geojson);
      if (!features2.length)
        return;
      var map2 = context.map();
      var viewport = map2.trimmedExtent().polygon();
      var coords = features2.reduce(function(coords2, feature3) {
        var geom = feature3.geometry;
        if (!geom)
          return coords2;
        var c2 = geom.coordinates;
        switch (geom.type) {
          case "Point":
            c2 = [c2];
          case "MultiPoint":
          case "LineString":
            break;
          case "MultiPolygon":
            c2 = utilArrayFlatten(c2);
          case "Polygon":
          case "MultiLineString":
            c2 = utilArrayFlatten(c2);
            break;
        }
        return utilArrayUnion(coords2, c2);
      }, []);
      if (!geomPolygonIntersectsPolygon(viewport, coords, true)) {
        var bounds = bounds_default({
          type: "LineString",
          coordinates: coords
        });
        var extent6 = new Extent(bounds[0], bounds[1]);
        map2.centerZoom(extent6.center(), map2.trimmedExtentZoom(extent6));
      }
      return this;
    };
    init19();
    return drawData;
  }

  // modules/svg/debug.js
  function svgDebug(projection2, context) {
    function drawDebug(selection2) {
      var showTile = context.getDebug("tile");
      var showCollision = context.getDebug("collision");
      var showImagery = context.getDebug("imagery");
      var showTouchTargets = context.getDebug("target");
      var showDownloaded = context.getDebug("downloaded");
      var debugData = [];
      if (showTile) {
        debugData.push({
          class: "red",
          label: "tile"
        });
      }
      if (showCollision) {
        debugData.push({
          class: "yellow",
          label: "collision"
        });
      }
      if (showImagery) {
        debugData.push({
          class: "orange",
          label: "imagery"
        });
      }
      if (showTouchTargets) {
        debugData.push({
          class: "pink",
          label: "touchTargets"
        });
      }
      if (showDownloaded) {
        debugData.push({
          class: "purple",
          label: "downloaded"
        });
      }
      var legend = context.container().select(".main-content").selectAll(".debug-legend").data(debugData.length ? [0] : []);
      legend.exit().remove();
      legend = legend.enter().append("div").attr("class", "fillD debug-legend").merge(legend);
      var legendItems = legend.selectAll(".debug-legend-item").data(debugData, function(d) {
        return d.label;
      });
      legendItems.exit().remove();
      legendItems.enter().append("span").attr("class", function(d) {
        return "debug-legend-item ".concat(d.class);
      }).text(function(d) {
        return d.label;
      });
      var layer2 = selection2.selectAll(".layer-debug").data(showImagery || showDownloaded ? [0] : []);
      layer2.exit().remove();
      layer2 = layer2.enter().append("g").attr("class", "layer-debug").merge(layer2);
      var extent6 = context.map().extent();
      _mainFileFetcher.get("imagery").then(function(d) {
        var hits = showImagery && d.query.bbox(extent6.rectangle(), true) || [];
        var features2 = hits.map(function(d2) {
          return d2.features[d2.id];
        });
        var imagery = layer2.selectAll("path.debug-imagery").data(features2);
        imagery.exit().remove();
        imagery.enter().append("path").attr("class", "debug-imagery debug orange");
      }).catch(function() {
      });
      var osm = context.connection();
      var dataDownloaded = [];
      if (osm && showDownloaded) {
        var rtree = osm.caches("get").tile.rtree;
        dataDownloaded = rtree.all().map(function(bbox) {
          return {
            type: "Feature",
            properties: {
              id: bbox.id
            },
            geometry: {
              type: "Polygon",
              coordinates: [[[bbox.minX, bbox.minY], [bbox.minX, bbox.maxY], [bbox.maxX, bbox.maxY], [bbox.maxX, bbox.minY], [bbox.minX, bbox.minY]]]
            }
          };
        });
      }
      var downloaded = layer2.selectAll("path.debug-downloaded").data(showDownloaded ? dataDownloaded : []);
      downloaded.exit().remove();
      downloaded.enter().append("path").attr("class", "debug-downloaded debug purple");
      layer2.selectAll("path").attr("d", svgPath(projection2).geojson);
    }
    drawDebug.enabled = function() {
      if (!arguments.length) {
        return context.getDebug("tile") || context.getDebug("collision") || context.getDebug("imagery") || context.getDebug("target") || context.getDebug("downloaded");
      } else {
        return this;
      }
    };
    return drawDebug;
  }

  // modules/svg/defs.js
  function svgDefs(context) {
    var _defsSelection = select_default2(null);
    var _spritesheetIds = ["iD-sprite", "maki-sprite", "temaki-sprite", "fa-sprite", "community-sprite"];
    function drawDefs(selection2) {
      _defsSelection = selection2.append("defs");
      _defsSelection.append("marker").attr("id", "ideditor-oneway-marker").attr("viewBox", "0 0 10 5").attr("refX", 2.5).attr("refY", 2.5).attr("markerWidth", 2).attr("markerHeight", 2).attr("markerUnits", "strokeWidth").attr("orient", "auto").append("path").attr("class", "oneway-marker-path").attr("d", "M 5,3 L 0,3 L 0,2 L 5,2 L 5,0 L 10,2.5 L 5,5 z").attr("stroke", "none").attr("fill", "#000").attr("opacity", "0.75");
      function addSidedMarker(name, color2, offset) {
        _defsSelection.append("marker").attr("id", "ideditor-sided-marker-" + name).attr("viewBox", "0 0 2 2").attr("refX", 1).attr("refY", -offset).attr("markerWidth", 1.5).attr("markerHeight", 1.5).attr("markerUnits", "strokeWidth").attr("orient", "auto").append("path").attr("class", "sided-marker-path sided-marker-" + name + "-path").attr("d", "M 0,0 L 1,1 L 2,0 z").attr("stroke", "none").attr("fill", color2);
      }
      addSidedMarker("natural", "rgb(170, 170, 170)", 0);
      addSidedMarker("coastline", "#77dede", 1);
      addSidedMarker("waterway", "#77dede", 1);
      addSidedMarker("barrier", "#ddd", 1);
      addSidedMarker("man_made", "#fff", 0);
      _defsSelection.append("marker").attr("id", "ideditor-viewfield-marker").attr("viewBox", "0 0 16 16").attr("refX", 8).attr("refY", 16).attr("markerWidth", 4).attr("markerHeight", 4).attr("markerUnits", "strokeWidth").attr("orient", "auto").append("path").attr("class", "viewfield-marker-path").attr("d", "M 6,14 C 8,13.4 8,13.4 10,14 L 16,3 C 12,0 4,0 0,3 z").attr("fill", "#333").attr("fill-opacity", "0.75").attr("stroke", "#fff").attr("stroke-width", "0.5px").attr("stroke-opacity", "0.75");
      _defsSelection.append("marker").attr("id", "ideditor-viewfield-marker-wireframe").attr("viewBox", "0 0 16 16").attr("refX", 8).attr("refY", 16).attr("markerWidth", 4).attr("markerHeight", 4).attr("markerUnits", "strokeWidth").attr("orient", "auto").append("path").attr("class", "viewfield-marker-path").attr("d", "M 6,14 C 8,13.4 8,13.4 10,14 L 16,3 C 12,0 4,0 0,3 z").attr("fill", "none").attr("stroke", "#fff").attr("stroke-width", "0.5px").attr("stroke-opacity", "0.75");
      var patterns2 = _defsSelection.selectAll("pattern").data([
        ["beach", "dots"],
        ["construction", "construction"],
        ["cemetery", "cemetery"],
        ["cemetery_christian", "cemetery_christian"],
        ["cemetery_buddhist", "cemetery_buddhist"],
        ["cemetery_muslim", "cemetery_muslim"],
        ["cemetery_jewish", "cemetery_jewish"],
        ["farmland", "farmland"],
        ["farmyard", "farmyard"],
        ["forest", "forest"],
        ["forest_broadleaved", "forest_broadleaved"],
        ["forest_needleleaved", "forest_needleleaved"],
        ["forest_leafless", "forest_leafless"],
        ["golf_green", "grass"],
        ["grass", "grass"],
        ["landfill", "landfill"],
        ["meadow", "grass"],
        ["orchard", "orchard"],
        ["pond", "pond"],
        ["quarry", "quarry"],
        ["scrub", "bushes"],
        ["vineyard", "vineyard"],
        ["water_standing", "lines"],
        ["waves", "waves"],
        ["wetland", "wetland"],
        ["wetland_marsh", "wetland_marsh"],
        ["wetland_swamp", "wetland_swamp"],
        ["wetland_bog", "wetland_bog"],
        ["wetland_reedbed", "wetland_reedbed"]
      ]).enter().append("pattern").attr("id", function(d) {
        return "ideditor-pattern-" + d[0];
      }).attr("width", 32).attr("height", 32).attr("patternUnits", "userSpaceOnUse");
      patterns2.append("rect").attr("x", 0).attr("y", 0).attr("width", 32).attr("height", 32).attr("class", function(d) {
        return "pattern-color-" + d[0];
      });
      patterns2.append("image").attr("x", 0).attr("y", 0).attr("width", 32).attr("height", 32).attr("xlink:href", function(d) {
        return context.imagePath("pattern/" + d[1] + ".png");
      });
      _defsSelection.selectAll("clipPath").data([12, 18, 20, 32, 45]).enter().append("clipPath").attr("id", function(d) {
        return "ideditor-clip-square-" + d;
      }).append("rect").attr("x", 0).attr("y", 0).attr("width", function(d) {
        return d;
      }).attr("height", function(d) {
        return d;
      });
      addSprites(_spritesheetIds, true);
    }
    function addSprites(ids, overrideColors) {
      _spritesheetIds = utilArrayUniq(_spritesheetIds.concat(ids));
      var spritesheets = _defsSelection.selectAll(".spritesheet").data(_spritesheetIds);
      spritesheets.enter().append("g").attr("class", function(d) {
        return "spritesheet spritesheet-" + d;
      }).each(function(d) {
        var url = context.imagePath(d + ".svg");
        var node = select_default2(this).node();
        svg(url).then(function(svg2) {
          node.appendChild(select_default2(svg2.documentElement).attr("id", "ideditor-" + d).node());
          if (overrideColors && d !== "iD-sprite") {
            select_default2(node).selectAll("path").attr("fill", "currentColor");
          }
        }).catch(function() {
        });
      });
      spritesheets.exit().remove();
    }
    drawDefs.addSprites = addSprites;
    return drawDefs;
  }

  // modules/svg/keepRight.js
  var _layerEnabled = false;
  var _qaService;
  function svgKeepRight(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      return dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var touchLayer = select_default2(null);
    var drawLayer = select_default2(null);
    var layerVisible = false;
    function markerPath(selection2, klass) {
      selection2.attr("class", klass).attr("transform", "translate(-4, -24)").attr("d", "M11.6,6.2H7.1l1.4-5.1C8.6,0.6,8.1,0,7.5,0H2.2C1.7,0,1.3,0.3,1.3,0.8L0,10.2c-0.1,0.6,0.4,1.1,0.9,1.1h4.6l-1.8,7.6C3.6,19.4,4.1,20,4.7,20c0.3,0,0.6-0.2,0.8-0.5l6.9-11.9C12.7,7,12.3,6.2,11.6,6.2z");
    }
    function getService() {
      if (services.keepRight && !_qaService) {
        _qaService = services.keepRight;
        _qaService.on("loaded", throttledRedraw);
      } else if (!services.keepRight && _qaService) {
        _qaService = null;
      }
      return _qaService;
    }
    function editOn() {
      if (!layerVisible) {
        layerVisible = true;
        drawLayer.style("display", "block");
      }
    }
    function editOff() {
      if (layerVisible) {
        layerVisible = false;
        drawLayer.style("display", "none");
        drawLayer.selectAll(".qaItem.keepRight").remove();
        touchLayer.selectAll(".qaItem.keepRight").remove();
      }
    }
    function layerOn() {
      editOn();
      drawLayer.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end interrupt", function() {
        return dispatch12.call("change");
      });
    }
    function layerOff() {
      throttledRedraw.cancel();
      drawLayer.interrupt();
      touchLayer.selectAll(".qaItem.keepRight").remove();
      drawLayer.transition().duration(250).style("opacity", 0).on("end interrupt", function() {
        editOff();
        dispatch12.call("change");
      });
    }
    function updateMarkers() {
      if (!layerVisible || !_layerEnabled)
        return;
      var service = getService();
      var selectedID = context.selectedErrorID();
      var data2 = service ? service.getItems(projection2) : [];
      var getTransform = svgPointTransform(projection2);
      var markers = drawLayer.selectAll(".qaItem.keepRight").data(data2, function(d) {
        return d.id;
      });
      markers.exit().remove();
      var markersEnter = markers.enter().append("g").attr("class", function(d) {
        return "qaItem ".concat(d.service, " itemId-").concat(d.id, " itemType-").concat(d.parentIssueType);
      });
      markersEnter.append("ellipse").attr("cx", 0.5).attr("cy", 1).attr("rx", 6.5).attr("ry", 3).attr("class", "stroke");
      markersEnter.append("path").call(markerPath, "shadow");
      markersEnter.append("use").attr("class", "qaItem-fill").attr("width", "20px").attr("height", "20px").attr("x", "-8px").attr("y", "-22px").attr("xlink:href", "#iD-icon-bolt");
      markers.merge(markersEnter).sort(sortY).classed("selected", function(d) {
        return d.id === selectedID;
      }).attr("transform", getTransform);
      if (touchLayer.empty())
        return;
      var fillClass = context.getDebug("target") ? "pink " : "nocolor ";
      var targets = touchLayer.selectAll(".qaItem.keepRight").data(data2, function(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("rect").attr("width", "20px").attr("height", "20px").attr("x", "-8px").attr("y", "-22px").merge(targets).sort(sortY).attr("class", function(d) {
        return "qaItem ".concat(d.service, " target ").concat(fillClass, " itemId-").concat(d.id);
      }).attr("transform", getTransform);
      function sortY(a, b2) {
        return a.id === selectedID ? 1 : b2.id === selectedID ? -1 : a.severity === "error" && b2.severity !== "error" ? 1 : b2.severity === "error" && a.severity !== "error" ? -1 : b2.loc[1] - a.loc[1];
      }
    }
    function drawKeepRight(selection2) {
      var service = getService();
      var surface = context.surface();
      if (surface && !surface.empty()) {
        touchLayer = surface.selectAll(".data-layer.touch .layer-touch.markers");
      }
      drawLayer = selection2.selectAll(".layer-keepRight").data(service ? [0] : []);
      drawLayer.exit().remove();
      drawLayer = drawLayer.enter().append("g").attr("class", "layer-keepRight").style("display", _layerEnabled ? "block" : "none").merge(drawLayer);
      if (_layerEnabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          service.loadIssues(projection2);
          updateMarkers();
        } else {
          editOff();
        }
      }
    }
    drawKeepRight.enabled = function(val) {
      if (!arguments.length)
        return _layerEnabled;
      _layerEnabled = val;
      if (_layerEnabled) {
        layerOn();
      } else {
        layerOff();
        if (context.selectedErrorID()) {
          context.enter(modeBrowse(context));
        }
      }
      dispatch12.call("change");
      return this;
    };
    drawKeepRight.supported = function() {
      return !!getService();
    };
    return drawKeepRight;
  }

  // modules/svg/geolocate.js
  function svgGeolocate(projection2) {
    var layer2 = select_default2(null);
    var _position;
    function init19() {
      if (svgGeolocate.initialized)
        return;
      svgGeolocate.enabled = false;
      svgGeolocate.initialized = true;
    }
    function showLayer() {
      layer2.style("display", "block");
    }
    function hideLayer() {
      layer2.transition().duration(250).style("opacity", 0);
    }
    function layerOn() {
      layer2.style("opacity", 0).transition().duration(250).style("opacity", 1);
    }
    function layerOff() {
      layer2.style("display", "none");
    }
    function transform2(d) {
      return svgPointTransform(projection2)(d);
    }
    function accuracy(accuracy2, loc) {
      var degreesRadius = geoMetersToLat(accuracy2), tangentLoc = [loc[0], loc[1] + degreesRadius], projectedTangent = projection2(tangentLoc), projectedLoc = projection2([loc[0], loc[1]]);
      return Math.round(projectedLoc[1] - projectedTangent[1]).toString();
    }
    function update4() {
      var geolocation = {
        loc: [_position.coords.longitude, _position.coords.latitude]
      };
      var groups = layer2.selectAll(".geolocations").selectAll(".geolocation").data([geolocation]);
      groups.exit().remove();
      var pointsEnter = groups.enter().append("g").attr("class", "geolocation");
      pointsEnter.append("circle").attr("class", "geolocate-radius").attr("dx", "0").attr("dy", "0").attr("fill", "rgb(15,128,225)").attr("fill-opacity", "0.3").attr("r", "0");
      pointsEnter.append("circle").attr("dx", "0").attr("dy", "0").attr("fill", "rgb(15,128,225)").attr("stroke", "white").attr("stroke-width", "1.5").attr("r", "6");
      groups.merge(pointsEnter).attr("transform", transform2);
      layer2.select(".geolocate-radius").attr("r", accuracy(_position.coords.accuracy, geolocation.loc));
    }
    function drawLocation(selection2) {
      var enabled = svgGeolocate.enabled;
      layer2 = selection2.selectAll(".layer-geolocate").data([0]);
      layer2.exit().remove();
      var layerEnter = layer2.enter().append("g").attr("class", "layer-geolocate").style("display", enabled ? "block" : "none");
      layerEnter.append("g").attr("class", "geolocations");
      layer2 = layerEnter.merge(layer2);
      if (enabled) {
        update4();
      } else {
        layerOff();
      }
    }
    drawLocation.enabled = function(position, enabled) {
      if (!arguments.length)
        return svgGeolocate.enabled;
      _position = position;
      svgGeolocate.enabled = enabled;
      if (svgGeolocate.enabled) {
        showLayer();
        layerOn();
      } else {
        hideLayer();
      }
      return this;
    };
    init19();
    return drawLocation;
  }

  // modules/svg/labels.js
  var import_rbush2 = __toModule(require_rbush_min());
  function svgLabels(projection2, context) {
    var path = path_default(projection2);
    var detected = utilDetect();
    var baselineHack = detected.ie || detected.browser.toLowerCase() === "edge" || detected.browser.toLowerCase() === "firefox" && detected.version >= 70;
    var _rdrawn = new import_rbush2.default();
    var _rskipped = new import_rbush2.default();
    var _textWidthCache = {};
    var _entitybboxes = {};
    var labelStack = [["line", "aeroway", "*", 12], ["line", "highway", "motorway", 12], ["line", "highway", "trunk", 12], ["line", "highway", "primary", 12], ["line", "highway", "secondary", 12], ["line", "highway", "tertiary", 12], ["line", "highway", "*", 12], ["line", "railway", "*", 12], ["line", "waterway", "*", 12], ["area", "aeroway", "*", 12], ["area", "amenity", "*", 12], ["area", "building", "*", 12], ["area", "historic", "*", 12], ["area", "leisure", "*", 12], ["area", "man_made", "*", 12], ["area", "natural", "*", 12], ["area", "shop", "*", 12], ["area", "tourism", "*", 12], ["area", "camp_site", "*", 12], ["point", "aeroway", "*", 10], ["point", "amenity", "*", 10], ["point", "building", "*", 10], ["point", "historic", "*", 10], ["point", "leisure", "*", 10], ["point", "man_made", "*", 10], ["point", "natural", "*", 10], ["point", "shop", "*", 10], ["point", "tourism", "*", 10], ["point", "camp_site", "*", 10], ["line", "name", "*", 12], ["area", "name", "*", 12], ["point", "name", "*", 10]];
    function shouldSkipIcon(preset) {
      var noIcons = ["building", "landuse", "natural"];
      return noIcons.some(function(s) {
        return preset.id.indexOf(s) >= 0;
      });
    }
    function get3(array2, prop) {
      return function(d, i2) {
        return array2[i2][prop];
      };
    }
    function textWidth(text, size, elem) {
      var c2 = _textWidthCache[size];
      if (!c2)
        c2 = _textWidthCache[size] = {};
      if (c2[text]) {
        return c2[text];
      } else if (elem) {
        c2[text] = elem.getComputedTextLength();
        return c2[text];
      } else {
        var str = encodeURIComponent(text).match(/%[CDEFcdef]/g);
        if (str === null) {
          return size / 3 * 2 * text.length;
        } else {
          return size / 3 * (2 * text.length + str.length);
        }
      }
    }
    function drawLinePaths(selection2, entities, filter2, classes, labels) {
      var paths = selection2.selectAll("path").filter(filter2).data(entities, osmEntity.key);
      paths.exit().remove();
      paths.enter().append("path").style("stroke-width", get3(labels, "font-size")).attr("id", function(d) {
        return "ideditor-labelpath-" + d.id;
      }).attr("class", classes).merge(paths).attr("d", get3(labels, "lineString"));
    }
    function drawLineLabels(selection2, entities, filter2, classes, labels) {
      var texts = selection2.selectAll("text." + classes).filter(filter2).data(entities, osmEntity.key);
      texts.exit().remove();
      texts.enter().append("text").attr("class", function(d, i2) {
        return classes + " " + labels[i2].classes + " " + d.id;
      }).attr("dy", baselineHack ? "0.35em" : null).append("textPath").attr("class", "textpath");
      selection2.selectAll("text." + classes).selectAll(".textpath").filter(filter2).data(entities, osmEntity.key).attr("startOffset", "50%").attr("xlink:href", function(d) {
        return "#ideditor-labelpath-" + d.id;
      }).text(utilDisplayNameForPath);
    }
    function drawPointLabels(selection2, entities, filter2, classes, labels) {
      var texts = selection2.selectAll("text." + classes).filter(filter2).data(entities, osmEntity.key);
      texts.exit().remove();
      texts.enter().append("text").attr("class", function(d, i2) {
        return classes + " " + labels[i2].classes + " " + d.id;
      }).merge(texts).attr("x", get3(labels, "x")).attr("y", get3(labels, "y")).style("text-anchor", get3(labels, "textAnchor")).text(utilDisplayName).each(function(d, i2) {
        textWidth(utilDisplayName(d), labels[i2].height, this);
      });
    }
    function drawAreaLabels(selection2, entities, filter2, classes, labels) {
      entities = entities.filter(hasText);
      labels = labels.filter(hasText);
      drawPointLabels(selection2, entities, filter2, classes, labels);
      function hasText(d, i2) {
        return labels[i2].hasOwnProperty("x") && labels[i2].hasOwnProperty("y");
      }
    }
    function drawAreaIcons(selection2, entities, filter2, classes, labels) {
      var icons = selection2.selectAll("use." + classes).filter(filter2).data(entities, osmEntity.key);
      icons.exit().remove();
      icons.enter().append("use").attr("class", "icon " + classes).attr("width", "17px").attr("height", "17px").merge(icons).attr("transform", get3(labels, "transform")).attr("xlink:href", function(d) {
        var preset = _mainPresetIndex.match(d, context.graph());
        var picon = preset && preset.icon;
        if (!picon) {
          return "";
        } else {
          var isMaki = /^maki-/.test(picon);
          return "#" + picon + (isMaki ? "-15" : "");
        }
      });
    }
    function drawCollisionBoxes(selection2, rtree, which) {
      var classes = "debug " + which + " " + (which === "debug-skipped" ? "orange" : "yellow");
      var gj = [];
      if (context.getDebug("collision")) {
        gj = rtree.all().map(function(d) {
          return {
            type: "Polygon",
            coordinates: [[[d.minX, d.minY], [d.maxX, d.minY], [d.maxX, d.maxY], [d.minX, d.maxY], [d.minX, d.minY]]]
          };
        });
      }
      var boxes = selection2.selectAll("." + which).data(gj);
      boxes.exit().remove();
      boxes.enter().append("path").attr("class", classes).merge(boxes).attr("d", path_default());
    }
    function drawLabels(selection2, graph3, entities, filter2, dimensions, fullRedraw) {
      var wireframe = context.surface().classed("fill-wireframe");
      var zoom = geoScaleToZoom(projection2.scale());
      var labelable = [];
      var renderNodeAs = {};
      var i2, j, k, entity2, geometry6;
      for (i2 = 0; i2 < labelStack.length; i2++) {
        labelable.push([]);
      }
      if (fullRedraw) {
        _rdrawn.clear();
        _rskipped.clear();
        _entitybboxes = {};
      } else {
        for (i2 = 0; i2 < entities.length; i2++) {
          entity2 = entities[i2];
          var toRemove = [].concat(_entitybboxes[entity2.id] || []).concat(_entitybboxes[entity2.id + "I"] || []);
          for (j = 0; j < toRemove.length; j++) {
            _rdrawn.remove(toRemove[j]);
            _rskipped.remove(toRemove[j]);
          }
        }
      }
      for (i2 = 0; i2 < entities.length; i2++) {
        entity2 = entities[i2];
        geometry6 = entity2.geometry(graph3);
        if (geometry6 === "point" || geometry6 === "vertex" && isInterestingVertex(entity2)) {
          var hasDirections = entity2.directions(graph3, projection2).length;
          var markerPadding;
          if (!wireframe && geometry6 === "point" && !(zoom >= 18 && hasDirections)) {
            renderNodeAs[entity2.id] = "point";
            markerPadding = 20;
          } else {
            renderNodeAs[entity2.id] = "vertex";
            markerPadding = 0;
          }
          var coord = projection2(entity2.loc);
          var nodePadding = 10;
          var bbox = {
            minX: coord[0] - nodePadding,
            minY: coord[1] - nodePadding - markerPadding,
            maxX: coord[0] + nodePadding,
            maxY: coord[1] + nodePadding
          };
          doInsert(bbox, entity2.id + "P");
        }
        if (geometry6 === "vertex") {
          geometry6 = "point";
        }
        var preset = geometry6 === "area" && _mainPresetIndex.match(entity2, graph3);
        var icon2 = preset && !shouldSkipIcon(preset) && preset.icon;
        if (!icon2 && !utilDisplayName(entity2))
          continue;
        for (k = 0; k < labelStack.length; k++) {
          var matchGeom = labelStack[k][0];
          var matchKey = labelStack[k][1];
          var matchVal = labelStack[k][2];
          var hasVal = entity2.tags[matchKey];
          if (geometry6 === matchGeom && hasVal && (matchVal === "*" || matchVal === hasVal)) {
            labelable[k].push(entity2);
            break;
          }
        }
      }
      var positions = {
        point: [],
        line: [],
        area: []
      };
      var labelled = {
        point: [],
        line: [],
        area: []
      };
      for (k = 0; k < labelable.length; k++) {
        var fontSize = labelStack[k][3];
        for (i2 = 0; i2 < labelable[k].length; i2++) {
          entity2 = labelable[k][i2];
          geometry6 = entity2.geometry(graph3);
          var getName = geometry6 === "line" ? utilDisplayNameForPath : utilDisplayName;
          var name = getName(entity2);
          var width = name && textWidth(name, fontSize);
          var p2 = null;
          if (geometry6 === "point" || geometry6 === "vertex") {
            if (wireframe)
              continue;
            var renderAs = renderNodeAs[entity2.id];
            if (renderAs === "vertex" && zoom < 17)
              continue;
            p2 = getPointLabel(entity2, width, fontSize, renderAs);
          } else if (geometry6 === "line") {
            p2 = getLineLabel(entity2, width, fontSize);
          } else if (geometry6 === "area") {
            p2 = getAreaLabel(entity2, width, fontSize);
          }
          if (p2) {
            if (geometry6 === "vertex") {
              geometry6 = "point";
            }
            p2.classes = geometry6 + " tag-" + labelStack[k][1];
            positions[geometry6].push(p2);
            labelled[geometry6].push(entity2);
          }
        }
      }
      function isInterestingVertex(entity3) {
        var selectedIDs = context.selectedIDs();
        return entity3.hasInterestingTags() || entity3.isEndpoint(graph3) || entity3.isConnected(graph3) || selectedIDs.indexOf(entity3.id) !== -1 || graph3.parentWays(entity3).some(function(parent2) {
          return selectedIDs.indexOf(parent2.id) !== -1;
        });
      }
      function getPointLabel(entity3, width2, height, geometry7) {
        var y = geometry7 === "point" ? -12 : 0;
        var pointOffsets = {
          ltr: [15, y, "start"],
          rtl: [-15, y, "end"]
        };
        var textDirection = _mainLocalizer.textDirection();
        var coord2 = projection2(entity3.loc);
        var textPadding = 2;
        var offset = pointOffsets[textDirection];
        var p3 = {
          height: height,
          width: width2,
          x: coord2[0] + offset[0],
          y: coord2[1] + offset[1],
          textAnchor: offset[2]
        };
        var bbox2;
        if (textDirection === "rtl") {
          bbox2 = {
            minX: p3.x - width2 - textPadding,
            minY: p3.y - height / 2 - textPadding,
            maxX: p3.x + textPadding,
            maxY: p3.y + height / 2 + textPadding
          };
        } else {
          bbox2 = {
            minX: p3.x - textPadding,
            minY: p3.y - height / 2 - textPadding,
            maxX: p3.x + width2 + textPadding,
            maxY: p3.y + height / 2 + textPadding
          };
        }
        if (tryInsert([bbox2], entity3.id, true)) {
          return p3;
        }
      }
      function getLineLabel(entity3, width2, height) {
        var bounds = context.projection.clipExtent();
        var viewport = new Extent(bounds[0], bounds[1]).polygon();
        var points = graph3.childNodes(entity3).map(function(node) {
          return projection2(node.loc);
        });
        var length = geomPathLength(points);
        if (length < width2 + 20)
          return;
        var lineOffsets = [50, 45, 55, 40, 60, 35, 65, 30, 70, 25, 75, 20, 80, 15, 95, 10, 90, 5, 95];
        var padding = 3;
        for (var i3 = 0; i3 < lineOffsets.length; i3++) {
          var offset = lineOffsets[i3];
          var middle = offset / 100 * length;
          var start2 = middle - width2 / 2;
          if (start2 < 0 || start2 + width2 > length)
            continue;
          var sub = subpath(points, start2, start2 + width2);
          if (!sub || !geomPolygonIntersectsPolygon(viewport, sub, true)) {
            continue;
          }
          var isReverse = reverse2(sub);
          if (isReverse) {
            sub = sub.reverse();
          }
          var bboxes = [];
          var boxsize = (height + 2) / 2;
          for (var j2 = 0; j2 < sub.length - 1; j2++) {
            var a = sub[j2];
            var b2 = sub[j2 + 1];
            var num = Math.max(1, Math.floor(vecLength(a, b2) / boxsize / 2));
            for (var box = 0; box < num; box++) {
              var p3 = vecInterp(a, b2, box / num);
              var x05 = p3[0] - boxsize - padding;
              var y05 = p3[1] - boxsize - padding;
              var x12 = p3[0] + boxsize + padding;
              var y12 = p3[1] + boxsize + padding;
              bboxes.push({
                minX: Math.min(x05, x12),
                minY: Math.min(y05, y12),
                maxX: Math.max(x05, x12),
                maxY: Math.max(y05, y12)
              });
            }
          }
          if (tryInsert(bboxes, entity3.id, false)) {
            return {
              "font-size": height + 2,
              lineString: lineString2(sub),
              startOffset: offset + "%"
            };
          }
        }
        function reverse2(p4) {
          var angle2 = Math.atan2(p4[1][1] - p4[0][1], p4[1][0] - p4[0][0]);
          return !(p4[0][0] < p4[p4.length - 1][0] && angle2 < Math.PI / 2 && angle2 > -Math.PI / 2);
        }
        function lineString2(points2) {
          return "M" + points2.join("L");
        }
        function subpath(points2, from, to) {
          var sofar = 0;
          var start3, end, i0, i1;
          for (var i4 = 0; i4 < points2.length - 1; i4++) {
            var a2 = points2[i4];
            var b3 = points2[i4 + 1];
            var current = vecLength(a2, b3);
            var portion;
            if (!start3 && sofar + current >= from) {
              portion = (from - sofar) / current;
              start3 = [a2[0] + portion * (b3[0] - a2[0]), a2[1] + portion * (b3[1] - a2[1])];
              i0 = i4 + 1;
            }
            if (!end && sofar + current >= to) {
              portion = (to - sofar) / current;
              end = [a2[0] + portion * (b3[0] - a2[0]), a2[1] + portion * (b3[1] - a2[1])];
              i1 = i4 + 1;
            }
            sofar += current;
          }
          var result6 = points2.slice(i0, i1);
          result6.unshift(start3);
          result6.push(end);
          return result6;
        }
      }
      function getAreaLabel(entity3, width2, height) {
        var centroid = path.centroid(entity3.asGeoJSON(graph3));
        var extent6 = entity3.extent(graph3);
        var areaWidth = projection2(extent6.max)[0] - projection2(extent6.min)[0];
        if (isNaN(centroid[0]) || areaWidth < 20)
          return;
        var preset2 = _mainPresetIndex.match(entity3, context.graph());
        var picon = preset2 && preset2.icon;
        var iconSize = 17;
        var padding = 2;
        var p3 = {};
        if (picon) {
          if (addIcon()) {
            addLabel(iconSize + padding);
            return p3;
          }
        } else {
          if (addLabel(0)) {
            return p3;
          }
        }
        function addIcon() {
          var iconX = centroid[0] - iconSize / 2;
          var iconY = centroid[1] - iconSize / 2;
          var bbox2 = {
            minX: iconX,
            minY: iconY,
            maxX: iconX + iconSize,
            maxY: iconY + iconSize
          };
          if (tryInsert([bbox2], entity3.id + "I", true)) {
            p3.transform = "translate(" + iconX + "," + iconY + ")";
            return true;
          }
          return false;
        }
        function addLabel(yOffset) {
          if (width2 && areaWidth >= width2 + 20) {
            var labelX = centroid[0];
            var labelY = centroid[1] + yOffset;
            var bbox2 = {
              minX: labelX - width2 / 2 - padding,
              minY: labelY - height / 2 - padding,
              maxX: labelX + width2 / 2 + padding,
              maxY: labelY + height / 2 + padding
            };
            if (tryInsert([bbox2], entity3.id, true)) {
              p3.x = labelX;
              p3.y = labelY;
              p3.textAnchor = "middle";
              p3.height = height;
              return true;
            }
          }
          return false;
        }
      }
      function doInsert(bbox2, id2) {
        bbox2.id = id2;
        var oldbox = _entitybboxes[id2];
        if (oldbox) {
          _rdrawn.remove(oldbox);
        }
        _entitybboxes[id2] = bbox2;
        _rdrawn.insert(bbox2);
      }
      function tryInsert(bboxes, id2, saveSkipped) {
        var skipped = false;
        for (var i3 = 0; i3 < bboxes.length; i3++) {
          var bbox2 = bboxes[i3];
          bbox2.id = id2;
          if (bbox2.minX < 0 || bbox2.minY < 0 || bbox2.maxX > dimensions[0] || bbox2.maxY > dimensions[1]) {
            skipped = true;
            break;
          }
          if (_rdrawn.collides(bbox2)) {
            skipped = true;
            break;
          }
        }
        _entitybboxes[id2] = bboxes;
        if (skipped) {
          if (saveSkipped) {
            _rskipped.load(bboxes);
          }
        } else {
          _rdrawn.load(bboxes);
        }
        return !skipped;
      }
      var layer2 = selection2.selectAll(".layer-osm.labels");
      layer2.selectAll(".labels-group").data(["halo", "label", "debug"]).enter().append("g").attr("class", function(d) {
        return "labels-group " + d;
      });
      var halo = layer2.selectAll(".labels-group.halo");
      var label = layer2.selectAll(".labels-group.label");
      var debug2 = layer2.selectAll(".labels-group.debug");
      drawPointLabels(label, labelled.point, filter2, "pointlabel", positions.point);
      drawPointLabels(halo, labelled.point, filter2, "pointlabel-halo", positions.point);
      drawLinePaths(layer2, labelled.line, filter2, "", positions.line);
      drawLineLabels(label, labelled.line, filter2, "linelabel", positions.line);
      drawLineLabels(halo, labelled.line, filter2, "linelabel-halo", positions.line);
      drawAreaLabels(label, labelled.area, filter2, "arealabel", positions.area);
      drawAreaLabels(halo, labelled.area, filter2, "arealabel-halo", positions.area);
      drawAreaIcons(label, labelled.area, filter2, "areaicon", positions.area);
      drawAreaIcons(halo, labelled.area, filter2, "areaicon-halo", positions.area);
      drawCollisionBoxes(debug2, _rskipped, "debug-skipped");
      drawCollisionBoxes(debug2, _rdrawn, "debug-drawn");
      layer2.call(filterLabels);
    }
    function filterLabels(selection2) {
      var drawLayer = selection2.selectAll(".layer-osm.labels");
      var layers = drawLayer.selectAll(".labels-group.halo, .labels-group.label");
      layers.selectAll(".nolabel").classed("nolabel", false);
      var mouse = context.map().mouse();
      var graph3 = context.graph();
      var selectedIDs = context.selectedIDs();
      var ids = [];
      var pad2, bbox;
      if (mouse) {
        pad2 = 20;
        bbox = {
          minX: mouse[0] - pad2,
          minY: mouse[1] - pad2,
          maxX: mouse[0] + pad2,
          maxY: mouse[1] + pad2
        };
        var nearMouse = _rdrawn.search(bbox).map(function(entity3) {
          return entity3.id;
        });
        ids.push.apply(ids, nearMouse);
      }
      for (var i2 = 0; i2 < selectedIDs.length; i2++) {
        var entity2 = graph3.hasEntity(selectedIDs[i2]);
        if (entity2 && entity2.type === "node") {
          ids.push(selectedIDs[i2]);
        }
      }
      layers.selectAll(utilEntitySelector(ids)).classed("nolabel", true);
      var debug2 = selection2.selectAll(".labels-group.debug");
      var gj = [];
      if (context.getDebug("collision")) {
        gj = bbox ? [{
          type: "Polygon",
          coordinates: [[[bbox.minX, bbox.minY], [bbox.maxX, bbox.minY], [bbox.maxX, bbox.maxY], [bbox.minX, bbox.maxY], [bbox.minX, bbox.minY]]]
        }] : [];
      }
      var box = debug2.selectAll(".debug-mouse").data(gj);
      box.exit().remove();
      box.enter().append("path").attr("class", "debug debug-mouse yellow").merge(box).attr("d", path_default());
    }
    var throttleFilterLabels = throttle_default(filterLabels, 100);
    drawLabels.observe = function(selection2) {
      var listener = function listener2() {
        throttleFilterLabels(selection2);
      };
      selection2.on("mousemove.hidelabels", listener);
      context.on("enter.hidelabels", listener);
    };
    drawLabels.off = function(selection2) {
      throttleFilterLabels.cancel();
      selection2.on("mousemove.hidelabels", null);
      context.on("enter.hidelabels", null);
    };
    return drawLabels;
  }

  // modules/svg/improveOSM.js
  var _layerEnabled2 = false;
  var _qaService2;
  function svgImproveOSM(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      return dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var touchLayer = select_default2(null);
    var drawLayer = select_default2(null);
    var layerVisible = false;
    function markerPath(selection2, klass) {
      selection2.attr("class", klass).attr("transform", "translate(-10, -28)").attr("points", "16,3 4,3 1,6 1,17 4,20 7,20 10,27 13,20 16,20 19,17.033 19,6");
    }
    function getService() {
      if (services.improveOSM && !_qaService2) {
        _qaService2 = services.improveOSM;
        _qaService2.on("loaded", throttledRedraw);
      } else if (!services.improveOSM && _qaService2) {
        _qaService2 = null;
      }
      return _qaService2;
    }
    function editOn() {
      if (!layerVisible) {
        layerVisible = true;
        drawLayer.style("display", "block");
      }
    }
    function editOff() {
      if (layerVisible) {
        layerVisible = false;
        drawLayer.style("display", "none");
        drawLayer.selectAll(".qaItem.improveOSM").remove();
        touchLayer.selectAll(".qaItem.improveOSM").remove();
      }
    }
    function layerOn() {
      editOn();
      drawLayer.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end interrupt", function() {
        return dispatch12.call("change");
      });
    }
    function layerOff() {
      throttledRedraw.cancel();
      drawLayer.interrupt();
      touchLayer.selectAll(".qaItem.improveOSM").remove();
      drawLayer.transition().duration(250).style("opacity", 0).on("end interrupt", function() {
        editOff();
        dispatch12.call("change");
      });
    }
    function updateMarkers() {
      if (!layerVisible || !_layerEnabled2)
        return;
      var service = getService();
      var selectedID = context.selectedErrorID();
      var data2 = service ? service.getItems(projection2) : [];
      var getTransform = svgPointTransform(projection2);
      var markers = drawLayer.selectAll(".qaItem.improveOSM").data(data2, function(d) {
        return d.id;
      });
      markers.exit().remove();
      var markersEnter = markers.enter().append("g").attr("class", function(d) {
        return "qaItem ".concat(d.service, " itemId-").concat(d.id, " itemType-").concat(d.itemType);
      });
      markersEnter.append("polygon").call(markerPath, "shadow");
      markersEnter.append("ellipse").attr("cx", 0).attr("cy", 0).attr("rx", 4.5).attr("ry", 2).attr("class", "stroke");
      markersEnter.append("polygon").attr("fill", "currentColor").call(markerPath, "qaItem-fill");
      markersEnter.append("use").attr("transform", "translate(-6.5, -23)").attr("class", "icon-annotation").attr("width", "13px").attr("height", "13px").attr("xlink:href", function(d) {
        var picon = d.icon;
        if (!picon) {
          return "";
        } else {
          var isMaki = /^maki-/.test(picon);
          return "#".concat(picon).concat(isMaki ? "-11" : "");
        }
      });
      markers.merge(markersEnter).sort(sortY).classed("selected", function(d) {
        return d.id === selectedID;
      }).attr("transform", getTransform);
      if (touchLayer.empty())
        return;
      var fillClass = context.getDebug("target") ? "pink " : "nocolor ";
      var targets = touchLayer.selectAll(".qaItem.improveOSM").data(data2, function(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("rect").attr("width", "20px").attr("height", "30px").attr("x", "-10px").attr("y", "-28px").merge(targets).sort(sortY).attr("class", function(d) {
        return "qaItem ".concat(d.service, " target ").concat(fillClass, " itemId-").concat(d.id);
      }).attr("transform", getTransform);
      function sortY(a, b2) {
        return a.id === selectedID ? 1 : b2.id === selectedID ? -1 : b2.loc[1] - a.loc[1];
      }
    }
    function drawImproveOSM(selection2) {
      var service = getService();
      var surface = context.surface();
      if (surface && !surface.empty()) {
        touchLayer = surface.selectAll(".data-layer.touch .layer-touch.markers");
      }
      drawLayer = selection2.selectAll(".layer-improveOSM").data(service ? [0] : []);
      drawLayer.exit().remove();
      drawLayer = drawLayer.enter().append("g").attr("class", "layer-improveOSM").style("display", _layerEnabled2 ? "block" : "none").merge(drawLayer);
      if (_layerEnabled2) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          service.loadIssues(projection2);
          updateMarkers();
        } else {
          editOff();
        }
      }
    }
    drawImproveOSM.enabled = function(val) {
      if (!arguments.length)
        return _layerEnabled2;
      _layerEnabled2 = val;
      if (_layerEnabled2) {
        layerOn();
      } else {
        layerOff();
        if (context.selectedErrorID()) {
          context.enter(modeBrowse(context));
        }
      }
      dispatch12.call("change");
      return this;
    };
    drawImproveOSM.supported = function() {
      return !!getService();
    };
    return drawImproveOSM;
  }

  // modules/svg/osmose.js
  var _layerEnabled3 = false;
  var _qaService3;
  function svgOsmose(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      return dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var touchLayer = select_default2(null);
    var drawLayer = select_default2(null);
    var layerVisible = false;
    function markerPath(selection2, klass) {
      selection2.attr("class", klass).attr("transform", "translate(-10, -28)").attr("points", "16,3 4,3 1,6 1,17 4,20 7,20 10,27 13,20 16,20 19,17.033 19,6");
    }
    function getService() {
      if (services.osmose && !_qaService3) {
        _qaService3 = services.osmose;
        _qaService3.on("loaded", throttledRedraw);
      } else if (!services.osmose && _qaService3) {
        _qaService3 = null;
      }
      return _qaService3;
    }
    function editOn() {
      if (!layerVisible) {
        layerVisible = true;
        drawLayer.style("display", "block");
      }
    }
    function editOff() {
      if (layerVisible) {
        layerVisible = false;
        drawLayer.style("display", "none");
        drawLayer.selectAll(".qaItem.osmose").remove();
        touchLayer.selectAll(".qaItem.osmose").remove();
      }
    }
    function layerOn() {
      editOn();
      drawLayer.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end interrupt", function() {
        return dispatch12.call("change");
      });
    }
    function layerOff() {
      throttledRedraw.cancel();
      drawLayer.interrupt();
      touchLayer.selectAll(".qaItem.osmose").remove();
      drawLayer.transition().duration(250).style("opacity", 0).on("end interrupt", function() {
        editOff();
        dispatch12.call("change");
      });
    }
    function updateMarkers() {
      if (!layerVisible || !_layerEnabled3)
        return;
      var service = getService();
      var selectedID = context.selectedErrorID();
      var data2 = service ? service.getItems(projection2) : [];
      var getTransform = svgPointTransform(projection2);
      var markers = drawLayer.selectAll(".qaItem.osmose").data(data2, function(d) {
        return d.id;
      });
      markers.exit().remove();
      var markersEnter = markers.enter().append("g").attr("class", function(d) {
        return "qaItem ".concat(d.service, " itemId-").concat(d.id, " itemType-").concat(d.itemType);
      });
      markersEnter.append("polygon").call(markerPath, "shadow");
      markersEnter.append("ellipse").attr("cx", 0).attr("cy", 0).attr("rx", 4.5).attr("ry", 2).attr("class", "stroke");
      markersEnter.append("polygon").attr("fill", function(d) {
        return service.getColor(d.item);
      }).call(markerPath, "qaItem-fill");
      markersEnter.append("use").attr("transform", "translate(-6.5, -23)").attr("class", "icon-annotation").attr("width", "13px").attr("height", "13px").attr("xlink:href", function(d) {
        var picon = d.icon;
        if (!picon) {
          return "";
        } else {
          var isMaki = /^maki-/.test(picon);
          return "#".concat(picon).concat(isMaki ? "-11" : "");
        }
      });
      markers.merge(markersEnter).sort(sortY).classed("selected", function(d) {
        return d.id === selectedID;
      }).attr("transform", getTransform);
      if (touchLayer.empty())
        return;
      var fillClass = context.getDebug("target") ? "pink" : "nocolor";
      var targets = touchLayer.selectAll(".qaItem.osmose").data(data2, function(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("rect").attr("width", "20px").attr("height", "30px").attr("x", "-10px").attr("y", "-28px").merge(targets).sort(sortY).attr("class", function(d) {
        return "qaItem ".concat(d.service, " target ").concat(fillClass, " itemId-").concat(d.id);
      }).attr("transform", getTransform);
      function sortY(a, b2) {
        return a.id === selectedID ? 1 : b2.id === selectedID ? -1 : b2.loc[1] - a.loc[1];
      }
    }
    function drawOsmose(selection2) {
      var service = getService();
      var surface = context.surface();
      if (surface && !surface.empty()) {
        touchLayer = surface.selectAll(".data-layer.touch .layer-touch.markers");
      }
      drawLayer = selection2.selectAll(".layer-osmose").data(service ? [0] : []);
      drawLayer.exit().remove();
      drawLayer = drawLayer.enter().append("g").attr("class", "layer-osmose").style("display", _layerEnabled3 ? "block" : "none").merge(drawLayer);
      if (_layerEnabled3) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          service.loadIssues(projection2);
          updateMarkers();
        } else {
          editOff();
        }
      }
    }
    drawOsmose.enabled = function(val) {
      if (!arguments.length)
        return _layerEnabled3;
      _layerEnabled3 = val;
      if (_layerEnabled3) {
        getService().loadStrings().then(layerOn).catch(function(err) {
          console.log(err);
        });
      } else {
        layerOff();
        if (context.selectedErrorID()) {
          context.enter(modeBrowse(context));
        }
      }
      dispatch12.call("change");
      return this;
    };
    drawOsmose.supported = function() {
      return !!getService();
    };
    return drawOsmose;
  }

  // modules/svg/streetside.js
  function svgStreetside(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 14;
    var minMarkerZoom = 16;
    var minViewfieldZoom = 18;
    var layer2 = select_default2(null);
    var _viewerYaw = 0;
    var _selectedSequence = null;
    var _streetside;
    function init19() {
      if (svgStreetside.initialized)
        return;
      svgStreetside.enabled = false;
      svgStreetside.initialized = true;
    }
    function getService() {
      if (services.streetside && !_streetside) {
        _streetside = services.streetside;
        _streetside.event.on("viewerChanged.svgStreetside", viewerChanged).on("loadedImages.svgStreetside", throttledRedraw);
      } else if (!services.streetside && _streetside) {
        _streetside = null;
      }
      return _streetside;
    }
    function showLayer() {
      var service = getService();
      if (!service)
        return;
      editOn();
      layer2.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end", function() {
        dispatch12.call("change");
      });
    }
    function hideLayer() {
      throttledRedraw.cancel();
      layer2.transition().duration(250).style("opacity", 0).on("end", editOff);
    }
    function editOn() {
      layer2.style("display", "block");
    }
    function editOff() {
      layer2.selectAll(".viewfield-group").remove();
      layer2.style("display", "none");
    }
    function click(d3_event, d) {
      var service = getService();
      if (!service)
        return;
      if (d.sequenceKey !== _selectedSequence) {
        _viewerYaw = 0;
      }
      _selectedSequence = d.sequenceKey;
      service.ensureViewerLoaded(context).then(function() {
        service.selectImage(context, d.key).yaw(_viewerYaw).showViewer(context);
      });
      context.map().centerEase(d.loc);
    }
    function mouseover(d3_event, d) {
      var service = getService();
      if (service)
        service.setStyles(context, d);
    }
    function mouseout() {
      var service = getService();
      if (service)
        service.setStyles(context, null);
    }
    function transform2(d) {
      var t = svgPointTransform(projection2)(d);
      var rot = d.ca + _viewerYaw;
      if (rot) {
        t += " rotate(" + Math.floor(rot) + ",0,0)";
      }
      return t;
    }
    function viewerChanged() {
      var service = getService();
      if (!service)
        return;
      var viewer2 = service.viewer();
      if (!viewer2)
        return;
      _viewerYaw = viewer2.getYaw();
      if (context.map().isTransformed())
        return;
      layer2.selectAll(".viewfield-group.currentView").attr("transform", transform2);
    }
    function filterBubbles(bubbles2) {
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      var usernames = context.photos().usernames();
      if (fromDate) {
        var fromTimestamp = new Date(fromDate).getTime();
        bubbles2 = bubbles2.filter(function(bubble) {
          return new Date(bubble.captured_at).getTime() >= fromTimestamp;
        });
      }
      if (toDate) {
        var toTimestamp = new Date(toDate).getTime();
        bubbles2 = bubbles2.filter(function(bubble) {
          return new Date(bubble.captured_at).getTime() <= toTimestamp;
        });
      }
      if (usernames) {
        bubbles2 = bubbles2.filter(function(bubble) {
          return usernames.indexOf(bubble.captured_by) !== -1;
        });
      }
      return bubbles2;
    }
    function filterSequences(sequences4) {
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      var usernames = context.photos().usernames();
      if (fromDate) {
        var fromTimestamp = new Date(fromDate).getTime();
        sequences4 = sequences4.filter(function(sequences5) {
          return new Date(sequences5.properties.captured_at).getTime() >= fromTimestamp;
        });
      }
      if (toDate) {
        var toTimestamp = new Date(toDate).getTime();
        sequences4 = sequences4.filter(function(sequences5) {
          return new Date(sequences5.properties.captured_at).getTime() <= toTimestamp;
        });
      }
      if (usernames) {
        sequences4 = sequences4.filter(function(sequences5) {
          return usernames.indexOf(sequences5.properties.captured_by) !== -1;
        });
      }
      return sequences4;
    }
    function update4() {
      var viewer2 = context.container().select(".photoviewer");
      var selected = viewer2.empty() ? void 0 : viewer2.datum();
      var z = ~~context.map().zoom();
      var showMarkers = z >= minMarkerZoom;
      var showViewfields = z >= minViewfieldZoom;
      var service = getService();
      var sequences4 = [];
      var bubbles2 = [];
      if (context.photos().showsPanoramic()) {
        sequences4 = service ? service.sequences(projection2) : [];
        bubbles2 = service && showMarkers ? service.bubbles(projection2) : [];
        sequences4 = filterSequences(sequences4);
        bubbles2 = filterBubbles(bubbles2);
      }
      var traces = layer2.selectAll(".sequences").selectAll(".sequence").data(sequences4, function(d) {
        return d.properties.key;
      });
      traces.exit().remove();
      traces = traces.enter().append("path").attr("class", "sequence").merge(traces).attr("d", svgPath(projection2).geojson);
      var groups = layer2.selectAll(".markers").selectAll(".viewfield-group").data(bubbles2, function(d) {
        return d.key + (d.sequenceKey ? "v1" : "v0");
      });
      groups.exit().remove();
      var groupsEnter = groups.enter().append("g").attr("class", "viewfield-group").on("mouseenter", mouseover).on("mouseleave", mouseout).on("click", click);
      groupsEnter.append("g").attr("class", "viewfield-scale");
      var markers = groups.merge(groupsEnter).sort(function(a, b2) {
        return a === selected ? 1 : b2 === selected ? -1 : b2.loc[1] - a.loc[1];
      }).attr("transform", transform2).select(".viewfield-scale");
      markers.selectAll("circle").data([0]).enter().append("circle").attr("dx", "0").attr("dy", "0").attr("r", "6");
      var viewfields = markers.selectAll(".viewfield").data(showViewfields ? [0] : []);
      viewfields.exit().remove();
      viewfields.enter().insert("path", "circle").attr("class", "viewfield").attr("transform", "scale(1.5,1.5),translate(-8, -13)").attr("d", viewfieldPath);
      function viewfieldPath() {
        var d = this.parentNode.__data__;
        if (d.pano) {
          return "M 8,13 m -10,0 a 10,10 0 1,0 20,0 a 10,10 0 1,0 -20,0";
        } else {
          return "M 6,9 C 8,8.4 8,8.4 10,9 L 16,-2 C 12,-5 4,-5 0,-2 z";
        }
      }
    }
    function drawImages(selection2) {
      var enabled = svgStreetside.enabled;
      var service = getService();
      layer2 = selection2.selectAll(".layer-streetside-images").data(service ? [0] : []);
      layer2.exit().remove();
      var layerEnter = layer2.enter().append("g").attr("class", "layer-streetside-images").style("display", enabled ? "block" : "none");
      layerEnter.append("g").attr("class", "sequences");
      layerEnter.append("g").attr("class", "markers");
      layer2 = layerEnter.merge(layer2);
      if (enabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          update4();
          service.loadBubbles(projection2);
        } else {
          editOff();
        }
      }
    }
    drawImages.enabled = function(_2) {
      if (!arguments.length)
        return svgStreetside.enabled;
      svgStreetside.enabled = _2;
      if (svgStreetside.enabled) {
        showLayer();
        context.photos().on("change.streetside", update4);
      } else {
        hideLayer();
        context.photos().on("change.streetside", null);
      }
      dispatch12.call("change");
      return this;
    };
    drawImages.supported = function() {
      return !!getService();
    };
    init19();
    return drawImages;
  }

  // modules/svg/mapillary_images.js
  function svgMapillaryImages(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var minMarkerZoom = 16;
    var minViewfieldZoom = 18;
    var layer2 = select_default2(null);
    var _mapillary;
    function init19() {
      if (svgMapillaryImages.initialized)
        return;
      svgMapillaryImages.enabled = false;
      svgMapillaryImages.initialized = true;
    }
    function getService() {
      if (services.mapillary && !_mapillary) {
        _mapillary = services.mapillary;
        _mapillary.event.on("loadedImages", throttledRedraw);
      } else if (!services.mapillary && _mapillary) {
        _mapillary = null;
      }
      return _mapillary;
    }
    function showLayer() {
      var service = getService();
      if (!service)
        return;
      editOn();
      layer2.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end", function() {
        dispatch12.call("change");
      });
    }
    function hideLayer() {
      throttledRedraw.cancel();
      layer2.transition().duration(250).style("opacity", 0).on("end", editOff);
    }
    function editOn() {
      layer2.style("display", "block");
    }
    function editOff() {
      layer2.selectAll(".viewfield-group").remove();
      layer2.style("display", "none");
    }
    function click(d3_event, image) {
      var service = getService();
      if (!service)
        return;
      service.ensureViewerLoaded(context).then(function() {
        service.selectImage(context, image.id).showViewer(context);
      });
      context.map().centerEase(image.loc);
    }
    function mouseover(d3_event, image) {
      var service = getService();
      if (service)
        service.setStyles(context, image);
    }
    function mouseout() {
      var service = getService();
      if (service)
        service.setStyles(context, null);
    }
    function transform2(d) {
      var t = svgPointTransform(projection2)(d);
      if (d.ca) {
        t += " rotate(" + Math.floor(d.ca) + ",0,0)";
      }
      return t;
    }
    function filterImages(images3) {
      var showsPano = context.photos().showsPanoramic();
      var showsFlat = context.photos().showsFlat();
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      if (!showsPano || !showsFlat) {
        images3 = images3.filter(function(image) {
          if (image.is_pano)
            return showsPano;
          return showsFlat;
        });
      }
      if (fromDate) {
        images3 = images3.filter(function(image) {
          return new Date(image.captured_at).getTime() >= new Date(fromDate).getTime();
        });
      }
      if (toDate) {
        images3 = images3.filter(function(image) {
          return new Date(image.captured_at).getTime() <= new Date(toDate).getTime();
        });
      }
      return images3;
    }
    function filterSequences(sequences4) {
      var showsPano = context.photos().showsPanoramic();
      var showsFlat = context.photos().showsFlat();
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      if (!showsPano || !showsFlat) {
        sequences4 = sequences4.filter(function(sequence) {
          if (sequence.properties.hasOwnProperty("is_pano")) {
            if (sequence.properties.is_pano)
              return showsPano;
            return showsFlat;
          }
          return false;
        });
      }
      if (fromDate) {
        sequences4 = sequences4.filter(function(sequence) {
          return new Date(sequence.properties.captured_at).getTime() >= new Date(fromDate).getTime().toString();
        });
      }
      if (toDate) {
        sequences4 = sequences4.filter(function(sequence) {
          return new Date(sequence.properties.captured_at).getTime() <= new Date(toDate).getTime().toString();
        });
      }
      return sequences4;
    }
    function update4() {
      var z = ~~context.map().zoom();
      var showMarkers = z >= minMarkerZoom;
      var showViewfields = z >= minViewfieldZoom;
      var service = getService();
      var sequences4 = service ? service.sequences(projection2) : [];
      var images3 = service && showMarkers ? service.images(projection2) : [];
      images3 = filterImages(images3);
      sequences4 = filterSequences(sequences4, service);
      service.filterViewer(context);
      var traces = layer2.selectAll(".sequences").selectAll(".sequence").data(sequences4, function(d) {
        return d.properties.id;
      });
      traces.exit().remove();
      traces = traces.enter().append("path").attr("class", "sequence").merge(traces).attr("d", svgPath(projection2).geojson);
      var groups = layer2.selectAll(".markers").selectAll(".viewfield-group").data(images3, function(d) {
        return d.id;
      });
      groups.exit().remove();
      var groupsEnter = groups.enter().append("g").attr("class", "viewfield-group").on("mouseenter", mouseover).on("mouseleave", mouseout).on("click", click);
      groupsEnter.append("g").attr("class", "viewfield-scale");
      var markers = groups.merge(groupsEnter).sort(function(a, b2) {
        return b2.loc[1] - a.loc[1];
      }).attr("transform", transform2).select(".viewfield-scale");
      markers.selectAll("circle").data([0]).enter().append("circle").attr("dx", "0").attr("dy", "0").attr("r", "6");
      var viewfields = markers.selectAll(".viewfield").data(showViewfields ? [0] : []);
      viewfields.exit().remove();
      viewfields.enter().insert("path", "circle").attr("class", "viewfield").classed("pano", function() {
        return this.parentNode.__data__.is_pano;
      }).attr("transform", "scale(1.5,1.5),translate(-8, -13)").attr("d", viewfieldPath);
      function viewfieldPath() {
        if (this.parentNode.__data__.is_pano) {
          return "M 8,13 m -10,0 a 10,10 0 1,0 20,0 a 10,10 0 1,0 -20,0";
        } else {
          return "M 6,9 C 8,8.4 8,8.4 10,9 L 16,-2 C 12,-5 4,-5 0,-2 z";
        }
      }
    }
    function drawImages(selection2) {
      var enabled = svgMapillaryImages.enabled;
      var service = getService();
      layer2 = selection2.selectAll(".layer-mapillary").data(service ? [0] : []);
      layer2.exit().remove();
      var layerEnter = layer2.enter().append("g").attr("class", "layer-mapillary").style("display", enabled ? "block" : "none");
      layerEnter.append("g").attr("class", "sequences");
      layerEnter.append("g").attr("class", "markers");
      layer2 = layerEnter.merge(layer2);
      if (enabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          update4();
          service.loadImages(projection2);
        } else {
          editOff();
        }
      }
    }
    drawImages.enabled = function(_2) {
      if (!arguments.length)
        return svgMapillaryImages.enabled;
      svgMapillaryImages.enabled = _2;
      if (svgMapillaryImages.enabled) {
        showLayer();
        context.photos().on("change.mapillary_images", update4);
      } else {
        hideLayer();
        context.photos().on("change.mapillary_images", null);
      }
      dispatch12.call("change");
      return this;
    };
    drawImages.supported = function() {
      return !!getService();
    };
    init19();
    return drawImages;
  }

  // modules/svg/mapillary_position.js
  function svgMapillaryPosition(projection2, context) {
    var throttledRedraw = throttle_default(function() {
      update4();
    }, 1e3);
    var minZoom3 = 12;
    var minViewfieldZoom = 18;
    var layer2 = select_default2(null);
    var _mapillary;
    var viewerCompassAngle;
    function init19() {
      if (svgMapillaryPosition.initialized)
        return;
      svgMapillaryPosition.initialized = true;
    }
    function getService() {
      if (services.mapillary && !_mapillary) {
        _mapillary = services.mapillary;
        _mapillary.event.on("imageChanged", throttledRedraw);
        _mapillary.event.on("bearingChanged", function(e3) {
          viewerCompassAngle = e3.bearing;
          if (context.map().isTransformed())
            return;
          layer2.selectAll(".viewfield-group.currentView").filter(function(d) {
            return d.is_pano;
          }).attr("transform", transform2);
        });
      } else if (!services.mapillary && _mapillary) {
        _mapillary = null;
      }
      return _mapillary;
    }
    function editOn() {
      layer2.style("display", "block");
    }
    function editOff() {
      layer2.selectAll(".viewfield-group").remove();
      layer2.style("display", "none");
    }
    function transform2(d) {
      var t = svgPointTransform(projection2)(d);
      if (d.is_pano && viewerCompassAngle !== null && isFinite(viewerCompassAngle)) {
        t += " rotate(" + Math.floor(viewerCompassAngle) + ",0,0)";
      } else if (d.ca) {
        t += " rotate(" + Math.floor(d.ca) + ",0,0)";
      }
      return t;
    }
    function update4() {
      var z = ~~context.map().zoom();
      var showViewfields = z >= minViewfieldZoom;
      var service = getService();
      var image = service && service.getActiveImage();
      var groups = layer2.selectAll(".markers").selectAll(".viewfield-group").data(image ? [image] : [], function(d) {
        return d.id;
      });
      groups.exit().remove();
      var groupsEnter = groups.enter().append("g").attr("class", "viewfield-group currentView highlighted");
      groupsEnter.append("g").attr("class", "viewfield-scale");
      var markers = groups.merge(groupsEnter).attr("transform", transform2).select(".viewfield-scale");
      markers.selectAll("circle").data([0]).enter().append("circle").attr("dx", "0").attr("dy", "0").attr("r", "6");
      var viewfields = markers.selectAll(".viewfield").data(showViewfields ? [0] : []);
      viewfields.exit().remove();
      viewfields.enter().insert("path", "circle").attr("class", "viewfield").attr("transform", "scale(1.5,1.5),translate(-8, -13)").attr("d", "M 6,9 C 8,8.4 8,8.4 10,9 L 16,-2 C 12,-5 4,-5 0,-2 z");
    }
    function drawImages(selection2) {
      var service = getService();
      layer2 = selection2.selectAll(".layer-mapillary-position").data(service ? [0] : []);
      layer2.exit().remove();
      var layerEnter = layer2.enter().append("g").attr("class", "layer-mapillary-position");
      layerEnter.append("g").attr("class", "markers");
      layer2 = layerEnter.merge(layer2);
      if (service && ~~context.map().zoom() >= minZoom3) {
        editOn();
        update4();
      } else {
        editOff();
      }
    }
    drawImages.enabled = function() {
      update4();
      return this;
    };
    drawImages.supported = function() {
      return !!getService();
    };
    init19();
    return drawImages;
  }

  // modules/svg/mapillary_signs.js
  function svgMapillarySigns(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var layer2 = select_default2(null);
    var _mapillary;
    function init19() {
      if (svgMapillarySigns.initialized)
        return;
      svgMapillarySigns.enabled = false;
      svgMapillarySigns.initialized = true;
    }
    function getService() {
      if (services.mapillary && !_mapillary) {
        _mapillary = services.mapillary;
        _mapillary.event.on("loadedSigns", throttledRedraw);
      } else if (!services.mapillary && _mapillary) {
        _mapillary = null;
      }
      return _mapillary;
    }
    function showLayer() {
      var service = getService();
      if (!service)
        return;
      service.loadSignResources(context);
      editOn();
    }
    function hideLayer() {
      throttledRedraw.cancel();
      editOff();
    }
    function editOn() {
      layer2.style("display", "block");
    }
    function editOff() {
      layer2.selectAll(".icon-sign").remove();
      layer2.style("display", "none");
    }
    function click(d3_event, d) {
      var service = getService();
      if (!service)
        return;
      context.map().centerEase(d.loc);
      var selectedImageId = service.getActiveImage() && service.getActiveImage().id;
      service.getDetections(d.id).then(function(detections) {
        if (detections.length) {
          var imageId = detections[0].image.id;
          if (imageId === selectedImageId) {
            service.highlightDetection(detections[0]).selectImage(context, imageId);
          } else {
            service.ensureViewerLoaded(context).then(function() {
              service.highlightDetection(detections[0]).selectImage(context, imageId).showViewer(context);
            });
          }
        }
      });
    }
    function filterData(detectedFeatures) {
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      if (fromDate) {
        var fromTimestamp = new Date(fromDate).getTime();
        detectedFeatures = detectedFeatures.filter(function(feature3) {
          return new Date(feature3.last_seen_at).getTime() >= fromTimestamp;
        });
      }
      if (toDate) {
        var toTimestamp = new Date(toDate).getTime();
        detectedFeatures = detectedFeatures.filter(function(feature3) {
          return new Date(feature3.first_seen_at).getTime() <= toTimestamp;
        });
      }
      return detectedFeatures;
    }
    function update4() {
      var service = getService();
      var data2 = service ? service.signs(projection2) : [];
      data2 = filterData(data2);
      var transform2 = svgPointTransform(projection2);
      var signs2 = layer2.selectAll(".icon-sign").data(data2, function(d) {
        return d.id;
      });
      signs2.exit().remove();
      var enter = signs2.enter().append("g").attr("class", "icon-sign icon-detected").on("click", click);
      enter.append("use").attr("width", "24px").attr("height", "24px").attr("x", "-12px").attr("y", "-12px").attr("xlink:href", function(d) {
        return "#" + d.value;
      });
      enter.append("rect").attr("width", "24px").attr("height", "24px").attr("x", "-12px").attr("y", "-12px");
      signs2.merge(enter).attr("transform", transform2);
    }
    function drawSigns(selection2) {
      var enabled = svgMapillarySigns.enabled;
      var service = getService();
      layer2 = selection2.selectAll(".layer-mapillary-signs").data(service ? [0] : []);
      layer2.exit().remove();
      layer2 = layer2.enter().append("g").attr("class", "layer-mapillary-signs layer-mapillary-detections").style("display", enabled ? "block" : "none").merge(layer2);
      if (enabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          update4();
          service.loadSigns(projection2);
          service.showSignDetections(true);
        } else {
          editOff();
        }
      } else if (service) {
        service.showSignDetections(false);
      }
    }
    drawSigns.enabled = function(_2) {
      if (!arguments.length)
        return svgMapillarySigns.enabled;
      svgMapillarySigns.enabled = _2;
      if (svgMapillarySigns.enabled) {
        showLayer();
        context.photos().on("change.mapillary_signs", update4);
      } else {
        hideLayer();
        context.photos().on("change.mapillary_signs", null);
      }
      dispatch12.call("change");
      return this;
    };
    drawSigns.supported = function() {
      return !!getService();
    };
    init19();
    return drawSigns;
  }

  // modules/svg/mapillary_map_features.js
  function svgMapillaryMapFeatures(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var layer2 = select_default2(null);
    var _mapillary;
    function init19() {
      if (svgMapillaryMapFeatures.initialized)
        return;
      svgMapillaryMapFeatures.enabled = false;
      svgMapillaryMapFeatures.initialized = true;
    }
    function getService() {
      if (services.mapillary && !_mapillary) {
        _mapillary = services.mapillary;
        _mapillary.event.on("loadedMapFeatures", throttledRedraw);
      } else if (!services.mapillary && _mapillary) {
        _mapillary = null;
      }
      return _mapillary;
    }
    function showLayer() {
      var service = getService();
      if (!service)
        return;
      service.loadObjectResources(context);
      editOn();
    }
    function hideLayer() {
      throttledRedraw.cancel();
      editOff();
    }
    function editOn() {
      layer2.style("display", "block");
    }
    function editOff() {
      layer2.selectAll(".icon-map-feature").remove();
      layer2.style("display", "none");
    }
    function click(d3_event, d) {
      var service = getService();
      if (!service)
        return;
      context.map().centerEase(d.loc);
      var selectedImageId = service.getActiveImage() && service.getActiveImage().id;
      service.getDetections(d.id).then(function(detections) {
        if (detections.length) {
          var imageId = detections[0].image.id;
          if (imageId === selectedImageId) {
            service.highlightDetection(detections[0]).selectImage(context, imageId);
          } else {
            service.ensureViewerLoaded(context).then(function() {
              service.highlightDetection(detections[0]).selectImage(context, imageId).showViewer(context);
            });
          }
        }
      });
    }
    function filterData(detectedFeatures) {
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      if (fromDate) {
        detectedFeatures = detectedFeatures.filter(function(feature3) {
          return new Date(feature3.last_seen_at).getTime() >= new Date(fromDate).getTime();
        });
      }
      if (toDate) {
        detectedFeatures = detectedFeatures.filter(function(feature3) {
          return new Date(feature3.first_seen_at).getTime() <= new Date(toDate).getTime();
        });
      }
      return detectedFeatures;
    }
    function update4() {
      var service = getService();
      var data2 = service ? service.mapFeatures(projection2) : [];
      data2 = filterData(data2);
      var transform2 = svgPointTransform(projection2);
      var mapFeatures2 = layer2.selectAll(".icon-map-feature").data(data2, function(d) {
        return d.id;
      });
      mapFeatures2.exit().remove();
      var enter = mapFeatures2.enter().append("g").attr("class", "icon-map-feature icon-detected").on("click", click);
      enter.append("use").attr("width", "24px").attr("height", "24px").attr("x", "-12px").attr("y", "-12px").attr("xlink:href", function(d) {
        if (d.value === "object--billboard") {
          return "#object--sign--advertisement";
        }
        return "#" + d.value;
      });
      enter.append("rect").attr("width", "24px").attr("height", "24px").attr("x", "-12px").attr("y", "-12px");
      mapFeatures2.merge(enter).attr("transform", transform2);
    }
    function drawMapFeatures(selection2) {
      var enabled = svgMapillaryMapFeatures.enabled;
      var service = getService();
      layer2 = selection2.selectAll(".layer-mapillary-map-features").data(service ? [0] : []);
      layer2.exit().remove();
      layer2 = layer2.enter().append("g").attr("class", "layer-mapillary-map-features layer-mapillary-detections").style("display", enabled ? "block" : "none").merge(layer2);
      if (enabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          update4();
          service.loadMapFeatures(projection2);
          service.showFeatureDetections(true);
        } else {
          editOff();
        }
      } else if (service) {
        service.showFeatureDetections(false);
      }
    }
    drawMapFeatures.enabled = function(_2) {
      if (!arguments.length)
        return svgMapillaryMapFeatures.enabled;
      svgMapillaryMapFeatures.enabled = _2;
      if (svgMapillaryMapFeatures.enabled) {
        showLayer();
        context.photos().on("change.mapillary_map_features", update4);
      } else {
        hideLayer();
        context.photos().on("change.mapillary_map_features", null);
      }
      dispatch12.call("change");
      return this;
    };
    drawMapFeatures.supported = function() {
      return !!getService();
    };
    init19();
    return drawMapFeatures;
  }

  // modules/svg/openstreetcam_images.js
  function svgOpenstreetcamImages(projection2, context, dispatch12) {
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var minMarkerZoom = 16;
    var minViewfieldZoom = 18;
    var layer2 = select_default2(null);
    var _openstreetcam;
    function init19() {
      if (svgOpenstreetcamImages.initialized)
        return;
      svgOpenstreetcamImages.enabled = false;
      svgOpenstreetcamImages.initialized = true;
    }
    function getService() {
      if (services.openstreetcam && !_openstreetcam) {
        _openstreetcam = services.openstreetcam;
        _openstreetcam.event.on("loadedImages", throttledRedraw);
      } else if (!services.openstreetcam && _openstreetcam) {
        _openstreetcam = null;
      }
      return _openstreetcam;
    }
    function showLayer() {
      var service = getService();
      if (!service)
        return;
      editOn();
      layer2.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end", function() {
        dispatch12.call("change");
      });
    }
    function hideLayer() {
      throttledRedraw.cancel();
      layer2.transition().duration(250).style("opacity", 0).on("end", editOff);
    }
    function editOn() {
      layer2.style("display", "block");
    }
    function editOff() {
      layer2.selectAll(".viewfield-group").remove();
      layer2.style("display", "none");
    }
    function click(d3_event, d) {
      var service = getService();
      if (!service)
        return;
      service.ensureViewerLoaded(context).then(function() {
        service.selectImage(context, d.key).showViewer(context);
      });
      context.map().centerEase(d.loc);
    }
    function mouseover(d3_event, d) {
      var service = getService();
      if (service)
        service.setStyles(context, d);
    }
    function mouseout() {
      var service = getService();
      if (service)
        service.setStyles(context, null);
    }
    function transform2(d) {
      var t = svgPointTransform(projection2)(d);
      if (d.ca) {
        t += " rotate(" + Math.floor(d.ca) + ",0,0)";
      }
      return t;
    }
    function filterImages(images3) {
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      var usernames = context.photos().usernames();
      if (fromDate) {
        var fromTimestamp = new Date(fromDate).getTime();
        images3 = images3.filter(function(item) {
          return new Date(item.captured_at).getTime() >= fromTimestamp;
        });
      }
      if (toDate) {
        var toTimestamp = new Date(toDate).getTime();
        images3 = images3.filter(function(item) {
          return new Date(item.captured_at).getTime() <= toTimestamp;
        });
      }
      if (usernames) {
        images3 = images3.filter(function(item) {
          return usernames.indexOf(item.captured_by) !== -1;
        });
      }
      return images3;
    }
    function filterSequences(sequences4) {
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      var usernames = context.photos().usernames();
      if (fromDate) {
        var fromTimestamp = new Date(fromDate).getTime();
        sequences4 = sequences4.filter(function(image) {
          return new Date(image.properties.captured_at).getTime() >= fromTimestamp;
        });
      }
      if (toDate) {
        var toTimestamp = new Date(toDate).getTime();
        sequences4 = sequences4.filter(function(image) {
          return new Date(image.properties.captured_at).getTime() <= toTimestamp;
        });
      }
      if (usernames) {
        sequences4 = sequences4.filter(function(image) {
          return usernames.indexOf(image.properties.captured_by) !== -1;
        });
      }
      return sequences4;
    }
    function update4() {
      var viewer2 = context.container().select(".photoviewer");
      var selected = viewer2.empty() ? void 0 : viewer2.datum();
      var z = ~~context.map().zoom();
      var showMarkers = z >= minMarkerZoom;
      var showViewfields = z >= minViewfieldZoom;
      var service = getService();
      var sequences4 = [];
      var images3 = [];
      if (context.photos().showsFlat()) {
        sequences4 = service ? service.sequences(projection2) : [];
        images3 = service && showMarkers ? service.images(projection2) : [];
        sequences4 = filterSequences(sequences4);
        images3 = filterImages(images3);
      }
      var traces = layer2.selectAll(".sequences").selectAll(".sequence").data(sequences4, function(d) {
        return d.properties.key;
      });
      traces.exit().remove();
      traces = traces.enter().append("path").attr("class", "sequence").merge(traces).attr("d", svgPath(projection2).geojson);
      var groups = layer2.selectAll(".markers").selectAll(".viewfield-group").data(images3, function(d) {
        return d.key;
      });
      groups.exit().remove();
      var groupsEnter = groups.enter().append("g").attr("class", "viewfield-group").on("mouseenter", mouseover).on("mouseleave", mouseout).on("click", click);
      groupsEnter.append("g").attr("class", "viewfield-scale");
      var markers = groups.merge(groupsEnter).sort(function(a, b2) {
        return a === selected ? 1 : b2 === selected ? -1 : b2.loc[1] - a.loc[1];
      }).attr("transform", transform2).select(".viewfield-scale");
      markers.selectAll("circle").data([0]).enter().append("circle").attr("dx", "0").attr("dy", "0").attr("r", "6");
      var viewfields = markers.selectAll(".viewfield").data(showViewfields ? [0] : []);
      viewfields.exit().remove();
      viewfields.enter().insert("path", "circle").attr("class", "viewfield").attr("transform", "scale(1.5,1.5),translate(-8, -13)").attr("d", "M 6,9 C 8,8.4 8,8.4 10,9 L 16,-2 C 12,-5 4,-5 0,-2 z");
    }
    function drawImages(selection2) {
      var enabled = svgOpenstreetcamImages.enabled, service = getService();
      layer2 = selection2.selectAll(".layer-openstreetcam").data(service ? [0] : []);
      layer2.exit().remove();
      var layerEnter = layer2.enter().append("g").attr("class", "layer-openstreetcam").style("display", enabled ? "block" : "none");
      layerEnter.append("g").attr("class", "sequences");
      layerEnter.append("g").attr("class", "markers");
      layer2 = layerEnter.merge(layer2);
      if (enabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          update4();
          service.loadImages(projection2);
        } else {
          editOff();
        }
      }
    }
    drawImages.enabled = function(_2) {
      if (!arguments.length)
        return svgOpenstreetcamImages.enabled;
      svgOpenstreetcamImages.enabled = _2;
      if (svgOpenstreetcamImages.enabled) {
        showLayer();
        context.photos().on("change.openstreetcam_images", update4);
      } else {
        hideLayer();
        context.photos().on("change.openstreetcam_images", null);
      }
      dispatch12.call("change");
      return this;
    };
    drawImages.supported = function() {
      return !!getService();
    };
    init19();
    return drawImages;
  }

  // modules/svg/osm.js
  function svgOsm(projection2, context, dispatch12) {
    var enabled = true;
    function drawOsm(selection2) {
      selection2.selectAll(".layer-osm").data(["covered", "areas", "lines", "points", "labels"]).enter().append("g").attr("class", function(d) {
        return "layer-osm " + d;
      });
      selection2.selectAll(".layer-osm.points").selectAll(".points-group").data(["points", "midpoints", "vertices", "turns"]).enter().append("g").attr("class", function(d) {
        return "points-group " + d;
      });
    }
    function showLayer() {
      var layer2 = context.surface().selectAll(".data-layer.osm");
      layer2.interrupt();
      layer2.classed("disabled", false).style("opacity", 0).transition().duration(250).style("opacity", 1).on("end interrupt", function() {
        dispatch12.call("change");
      });
    }
    function hideLayer() {
      var layer2 = context.surface().selectAll(".data-layer.osm");
      layer2.interrupt();
      layer2.transition().duration(250).style("opacity", 0).on("end interrupt", function() {
        layer2.classed("disabled", true);
        dispatch12.call("change");
      });
    }
    drawOsm.enabled = function(val) {
      if (!arguments.length)
        return enabled;
      enabled = val;
      if (enabled) {
        showLayer();
      } else {
        hideLayer();
      }
      dispatch12.call("change");
      return this;
    };
    return drawOsm;
  }

  // modules/svg/notes.js
  var _notesEnabled = false;
  var _osmService;
  function svgNotes(projection2, context, dispatch12) {
    if (!dispatch12) {
      dispatch12 = dispatch_default("change");
    }
    var throttledRedraw = throttle_default(function() {
      dispatch12.call("change");
    }, 1e3);
    var minZoom3 = 12;
    var touchLayer = select_default2(null);
    var drawLayer = select_default2(null);
    var _notesVisible = false;
    function markerPath(selection2, klass) {
      selection2.attr("class", klass).attr("transform", "translate(-8, -22)").attr("d", "m17.5,0l-15,0c-1.37,0 -2.5,1.12 -2.5,2.5l0,11.25c0,1.37 1.12,2.5 2.5,2.5l3.75,0l0,3.28c0,0.38 0.43,0.6 0.75,0.37l4.87,-3.65l5.62,0c1.37,0 2.5,-1.12 2.5,-2.5l0,-11.25c0,-1.37 -1.12,-2.5 -2.5,-2.5z");
    }
    function getService() {
      if (services.osm && !_osmService) {
        _osmService = services.osm;
        _osmService.on("loadedNotes", throttledRedraw);
      } else if (!services.osm && _osmService) {
        _osmService = null;
      }
      return _osmService;
    }
    function editOn() {
      if (!_notesVisible) {
        _notesVisible = true;
        drawLayer.style("display", "block");
      }
    }
    function editOff() {
      if (_notesVisible) {
        _notesVisible = false;
        drawLayer.style("display", "none");
        drawLayer.selectAll(".note").remove();
        touchLayer.selectAll(".note").remove();
      }
    }
    function layerOn() {
      editOn();
      drawLayer.style("opacity", 0).transition().duration(250).style("opacity", 1).on("end interrupt", function() {
        dispatch12.call("change");
      });
    }
    function layerOff() {
      throttledRedraw.cancel();
      drawLayer.interrupt();
      touchLayer.selectAll(".note").remove();
      drawLayer.transition().duration(250).style("opacity", 0).on("end interrupt", function() {
        editOff();
        dispatch12.call("change");
      });
    }
    function updateMarkers() {
      if (!_notesVisible || !_notesEnabled)
        return;
      var service = getService();
      var selectedID = context.selectedNoteID();
      var data2 = service ? service.notes(projection2) : [];
      var getTransform = svgPointTransform(projection2);
      var notes2 = drawLayer.selectAll(".note").data(data2, function(d) {
        return d.status + d.id;
      });
      notes2.exit().remove();
      var notesEnter = notes2.enter().append("g").attr("class", function(d) {
        return "note note-" + d.id + " " + d.status;
      }).classed("new", function(d) {
        return d.id < 0;
      });
      notesEnter.append("ellipse").attr("cx", 0.5).attr("cy", 1).attr("rx", 6.5).attr("ry", 3).attr("class", "stroke");
      notesEnter.append("path").call(markerPath, "shadow");
      notesEnter.append("use").attr("class", "note-fill").attr("width", "20px").attr("height", "20px").attr("x", "-8px").attr("y", "-22px").attr("xlink:href", "#iD-icon-note");
      notesEnter.selectAll(".icon-annotation").data(function(d) {
        return [d];
      }).enter().append("use").attr("class", "icon-annotation").attr("width", "10px").attr("height", "10px").attr("x", "-3px").attr("y", "-19px").attr("xlink:href", function(d) {
        if (d.id < 0)
          return "#iD-icon-plus";
        if (d.status === "open")
          return "#iD-icon-close";
        return "#iD-icon-apply";
      });
      notes2.merge(notesEnter).sort(sortY).classed("selected", function(d) {
        var mode = context.mode();
        var isMoving = mode && mode.id === "drag-note";
        return !isMoving && d.id === selectedID;
      }).attr("transform", getTransform);
      if (touchLayer.empty())
        return;
      var fillClass = context.getDebug("target") ? "pink " : "nocolor ";
      var targets = touchLayer.selectAll(".note").data(data2, function(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("rect").attr("width", "20px").attr("height", "20px").attr("x", "-8px").attr("y", "-22px").merge(targets).sort(sortY).attr("class", function(d) {
        var newClass = d.id < 0 ? "new" : "";
        return "note target note-" + d.id + " " + fillClass + newClass;
      }).attr("transform", getTransform);
      function sortY(a, b2) {
        if (a.id === selectedID)
          return 1;
        if (b2.id === selectedID)
          return -1;
        return b2.loc[1] - a.loc[1];
      }
    }
    function drawNotes(selection2) {
      var service = getService();
      var surface = context.surface();
      if (surface && !surface.empty()) {
        touchLayer = surface.selectAll(".data-layer.touch .layer-touch.markers");
      }
      drawLayer = selection2.selectAll(".layer-notes").data(service ? [0] : []);
      drawLayer.exit().remove();
      drawLayer = drawLayer.enter().append("g").attr("class", "layer-notes").style("display", _notesEnabled ? "block" : "none").merge(drawLayer);
      if (_notesEnabled) {
        if (service && ~~context.map().zoom() >= minZoom3) {
          editOn();
          service.loadNotes(projection2);
          updateMarkers();
        } else {
          editOff();
        }
      }
    }
    drawNotes.enabled = function(val) {
      if (!arguments.length)
        return _notesEnabled;
      _notesEnabled = val;
      if (_notesEnabled) {
        layerOn();
      } else {
        layerOff();
        if (context.selectedNoteID()) {
          context.enter(modeBrowse(context));
        }
      }
      dispatch12.call("change");
      return this;
    };
    return drawNotes;
  }

  // modules/svg/touch.js
  function svgTouch() {
    function drawTouch(selection2) {
      selection2.selectAll(".layer-touch").data(["areas", "lines", "points", "turns", "markers"]).enter().append("g").attr("class", function(d) {
        return "layer-touch " + d;
      });
    }
    return drawTouch;
  }

  // modules/util/dimensions.js
  function refresh(selection2, node) {
    var cr = node.getBoundingClientRect();
    var prop = [cr.width, cr.height];
    selection2.property("__dimensions__", prop);
    return prop;
  }
  function utilGetDimensions(selection2, force) {
    if (!selection2 || selection2.empty()) {
      return [0, 0];
    }
    var node = selection2.node(), cached = selection2.property("__dimensions__");
    return !cached || force ? refresh(selection2, node) : cached;
  }
  function utilSetDimensions(selection2, dimensions) {
    if (!selection2 || selection2.empty()) {
      return selection2;
    }
    var node = selection2.node();
    if (dimensions === null) {
      refresh(selection2, node);
      return selection2;
    }
    return selection2.property("__dimensions__", [dimensions[0], dimensions[1]]).attr("width", dimensions[0]).attr("height", dimensions[1]);
  }

  // modules/svg/rapid_features.js
  var _enabled2 = false;
  var _initialized2 = false;
  var _FbMlService;
  var _EsriService;
  var _actioned;
  function svgRapidFeatures(projection2, context, dispatch12) {
    var RAPID_MAGENTA = "#da26d3";
    var throttledRedraw = throttle_default(function() {
      return dispatch12.call("change");
    }, 1e3);
    var gpxInUrl = context.initialHashParams.hasOwnProperty("gpx");
    var _layer = select_default2(null);
    function init19() {
      if (_initialized2)
        return;
      _enabled2 = true;
      _initialized2 = true;
      _actioned = new Set();
      context.history().on("undone.aifeatures", onHistoryUndone);
      context.history().on("change.aifeatures", onHistoryChange);
      context.history().on("restore.aifeatures", onHistoryRestore);
    }
    function getFbMlService() {
      if (services.fbMLRoads && !_FbMlService) {
        _FbMlService = services.fbMLRoads;
        _FbMlService.event.on("loadedData", throttledRedraw);
      }
      return _FbMlService;
    }
    function getEsriService() {
      if (services.esriData && !_EsriService) {
        _EsriService = services.esriData;
        _EsriService.event.on("loadedData", throttledRedraw);
      }
      return _EsriService;
    }
    function wasRapidEdit(annotation) {
      return annotation && annotation.type && /^rapid/.test(annotation.type);
    }
    function onHistoryUndone(currentStack, previousStack) {
      var annotation = previousStack.annotation;
      if (!wasRapidEdit(annotation))
        return;
      _actioned.delete(annotation.id);
      if (_enabled2) {
        dispatch12.call("change");
      }
    }
    function onHistoryChange() {
      var annotation = context.history().peekAnnotation();
      if (!wasRapidEdit(annotation))
        return;
      _actioned.add(annotation.id);
      if (_enabled2) {
        dispatch12.call("change");
      }
    }
    function onHistoryRestore() {
      _actioned = new Set();
      context.history().peekAllAnnotations().forEach(function(annotation) {
        if (wasRapidEdit(annotation)) {
          _actioned.add(annotation.id);
          if (annotation.origid) {
            _actioned.add(annotation.origid);
          }
        }
      });
      if (_actioned.size && _enabled2) {
        dispatch12.call("change");
      }
    }
    function showLayer() {
      throttledRedraw();
      layerOn();
    }
    function hideLayer() {
      throttledRedraw.cancel();
      layerOff();
    }
    function layerOn() {
      _layer.style("display", "block");
    }
    function layerOff() {
      _layer.style("display", "none");
    }
    function isArea2(d) {
      return d.type === "relation" || d.type === "way" && d.isArea();
    }
    function featureKey(d) {
      return d.__fbid__;
    }
    function render(selection2) {
      var rapidContext = context.rapidContext();
      _layer = selection2.selectAll(".layer-ai-features").data(_enabled2 ? [0] : []);
      _layer.exit().remove();
      var layerEnter = _layer.enter().append("g").attr("class", "layer-ai-features");
      layerEnter.append("defs").attr("class", "rapid-defs");
      _layer = layerEnter.merge(_layer);
      var surface = context.surface();
      var waitingForTaskExtent = gpxInUrl && !rapidContext.getTaskExtent();
      if (!surface || surface.empty() || waitingForTaskExtent)
        return;
      var rapidDatasets = rapidContext.datasets();
      var datasets = Object.values(rapidDatasets).filter(function(dataset) {
        return dataset.added && dataset.enabled;
      });
      var defs = _layer.selectAll(".rapid-defs");
      var dsPatterns = defs.selectAll(".rapid-fill-pattern").data(datasets, function(d) {
        return d.id;
      });
      dsPatterns.exit().remove();
      var dsPatternsEnter = dsPatterns.enter().append("pattern").attr("id", function(d) {
        return "fill-".concat(window.toBase64(d.id));
      }).attr("class", "rapid-fill-pattern").attr("width", 5).attr("height", 15).attr("patternUnits", "userSpaceOnUse").attr("patternTransform", function(d, i2) {
        var r = (45 + 67 * i2) % 180;
        return "rotate(".concat(r, ")");
      });
      dsPatternsEnter.append("line").attr("class", "ai-building-line").attr("stroke", "currentColor").attr("stroke-width", "2px").attr("stroke-opacity", 0.6).attr("y2", "15");
      dsPatterns = dsPatternsEnter.merge(dsPatterns).style("color", function(d) {
        return d.color || RAPID_MAGENTA;
      });
      var dsGroups = _layer.selectAll(".layer-rapid-dataset").data(datasets, function(d) {
        return d.id;
      });
      dsGroups.exit().remove();
      dsGroups = dsGroups.enter().append("g").attr("class", function(d) {
        return "layer-rapid-dataset layer-rapid-dataset-".concat(d.id);
      }).merge(dsGroups).style("color", function(d) {
        return d.color || RAPID_MAGENTA;
      }).each(eachDataset);
    }
    function eachDataset(dataset, i2, nodes) {
      var rapidContext = context.rapidContext();
      var selection2 = select_default2(nodes[i2]);
      var service = dataset.service === "fbml" ? getFbMlService() : getEsriService();
      if (!service)
        return;
      var internalID = dataset.id + (dataset.conflated ? "-conflated" : "");
      var graph3 = service.graph(internalID);
      var getPath = svgPath(projection2, graph3);
      var getTransform = svgPointTransform(projection2);
      var geoData = {
        paths: [],
        vertices: [],
        points: []
      };
      if (context.map().zoom() >= context.minEditableZoom()) {
        if (dataset.service === "fbml") {
          service.loadTiles(internalID, projection2, rapidContext.getTaskExtent(), context);
          var pathData = service.intersects(internalID, context.map().extent()).filter(function(d) {
            return d.type === "way" && !_actioned.has(d.id) && !_actioned.has(d.__origid__);
          }).filter(getPath);
          if (dataset.id === "fbRoads" || dataset.id === "rapid_intro_graph") {
            geoData.paths = pathData.filter(function(d) {
              return !!d.tags.highway;
            });
            var seen = {};
            geoData.paths.forEach(function(d) {
              var first2 = d.first();
              var last3 = d.last();
              if (!seen[first2]) {
                seen[first2] = true;
                geoData.vertices.push(graph3.entity(first2));
              }
              if (!seen[last3]) {
                seen[last3] = true;
                geoData.vertices.push(graph3.entity(last3));
              }
            });
          } else if (dataset.id === "msBuildings") {
            geoData.paths = pathData.filter(isArea2);
          } else {
            geoData.paths = pathData.filter(isArea2);
          }
        } else if (dataset.service === "esri") {
          service.loadTiles(internalID, projection2, null, context);
          var visibleData = service.intersects(internalID, context.map().extent()).filter(function(d) {
            return !_actioned.has(d.id) && !_actioned.has(d.__origid__);
          });
          geoData.points = visibleData.filter(function(d) {
            return d.type === "node" && !!d.__fbid__;
          });
          geoData.paths = visibleData.filter(function(d) {
            return d.type === "way" || d.type === "relation";
          }).filter(getPath);
        }
      }
      selection2.call(drawPaths, geoData.paths, dataset, getPath).call(drawVertices, geoData.vertices, getTransform).call(drawPoints, geoData.points, getTransform);
    }
    function drawPaths(selection2, pathData, dataset, getPath) {
      var linegroups = selection2.selectAll("g.linegroup").data(["shadow", "casing", "stroke"]);
      linegroups = linegroups.enter().append("g").attr("class", function(d) {
        return "linegroup linegroup-".concat(d);
      }).merge(linegroups);
      var paths = linegroups.selectAll("path").data(pathData, featureKey);
      paths.exit().remove();
      paths = paths.enter().append("path").attr("style", function(d) {
        return isArea2(d) ? "fill: url(#fill-".concat(window.toBase64(dataset.id), ")") : null;
      }).attr("class", function(d, i2, nodes) {
        var currNode = nodes[i2];
        var linegroup = currNode.parentNode.__data__;
        var klass = isArea2(d) ? "building" : "road";
        return "line ".concat(linegroup, " ").concat(klass, " data").concat(d.__fbid__);
      }).merge(paths).attr("d", getPath);
    }
    function drawVertices(selection2, vertexData, getTransform) {
      var vertRadii = {
        stroke: [3.5, 4, 4.5],
        fill: [2, 2, 2.5]
      };
      var vertexGroup = selection2.selectAll("g.vertexgroup").data(vertexData.length ? [0] : []);
      vertexGroup.exit().remove();
      vertexGroup = vertexGroup.enter().append("g").attr("class", "vertexgroup").merge(vertexGroup);
      var vertices = vertexGroup.selectAll("g.vertex").data(vertexData, function(d) {
        return d.id;
      });
      vertices.exit().remove();
      var enter = vertices.enter().append("g").attr("class", function(d) {
        return "node vertex ".concat(d.id);
      });
      enter.append("circle").attr("class", "stroke");
      enter.append("circle").attr("class", "fill");
      var zoom = geoScaleToZoom(projection2.scale());
      var radiusIdx = zoom < 17 ? 0 : zoom < 18 ? 1 : 2;
      vertices = vertices.merge(enter).attr("transform", getTransform).call(function(selection3) {
        ["stroke", "fill"].forEach(function(klass) {
          selection3.selectAll("." + klass).attr("r", vertRadii[klass][radiusIdx]);
        });
      });
    }
    function drawPoints(selection2, pointData, getTransform) {
      var pointRadii = {
        shadow: [4.5, 7, 8],
        stroke: [4.5, 7, 8],
        fill: [2.5, 4, 5]
      };
      var pointGroup = selection2.selectAll("g.pointgroup").data(pointData.length ? [0] : []);
      pointGroup.exit().remove();
      pointGroup = pointGroup.enter().append("g").attr("class", "pointgroup").merge(pointGroup);
      var points = pointGroup.selectAll("g.point").data(pointData, featureKey);
      points.exit().remove();
      var enter = points.enter().append("g").attr("class", function(d) {
        return "node point data".concat(d.__fbid__);
      });
      enter.append("circle").attr("class", "shadow");
      enter.append("circle").attr("class", "stroke");
      enter.append("circle").attr("class", "fill");
      var zoom = geoScaleToZoom(projection2.scale());
      var radiusIdx = zoom < 17 ? 0 : zoom < 18 ? 1 : 2;
      points = points.merge(enter).attr("transform", getTransform).call(function(selection3) {
        ["shadow", "stroke", "fill"].forEach(function(klass) {
          selection3.selectAll("." + klass).attr("r", pointRadii[klass][radiusIdx]);
        });
      });
    }
    render.showAll = function() {
      return _enabled2;
    };
    render.enabled = function(val) {
      if (!arguments.length)
        return _enabled2;
      _enabled2 = val;
      if (_enabled2) {
        showLayer();
      } else {
        hideLayer();
      }
      dispatch12.call("change");
      return render;
    };
    init19();
    return render;
  }

  // modules/svg/layers.js
  function svgLayers(projection2, context) {
    var dispatch12 = dispatch_default("change");
    var svg2 = select_default2(null);
    var _layers = [{
      id: "ai-features",
      layer: svgRapidFeatures(projection2, context, dispatch12)
    }, {
      id: "osm",
      layer: svgOsm(projection2, context, dispatch12)
    }, {
      id: "notes",
      layer: svgNotes(projection2, context, dispatch12)
    }, {
      id: "data",
      layer: svgData(projection2, context, dispatch12)
    }, {
      id: "keepRight",
      layer: svgKeepRight(projection2, context, dispatch12)
    }, {
      id: "improveOSM",
      layer: svgImproveOSM(projection2, context, dispatch12)
    }, {
      id: "osmose",
      layer: svgOsmose(projection2, context, dispatch12)
    }, {
      id: "streetside",
      layer: svgStreetside(projection2, context, dispatch12)
    }, {
      id: "mapillary",
      layer: svgMapillaryImages(projection2, context, dispatch12)
    }, {
      id: "mapillary-position",
      layer: svgMapillaryPosition(projection2, context, dispatch12)
    }, {
      id: "mapillary-map-features",
      layer: svgMapillaryMapFeatures(projection2, context, dispatch12)
    }, {
      id: "mapillary-signs",
      layer: svgMapillarySigns(projection2, context, dispatch12)
    }, {
      id: "openstreetcam",
      layer: svgOpenstreetcamImages(projection2, context, dispatch12)
    }, {
      id: "debug",
      layer: svgDebug(projection2, context, dispatch12)
    }, {
      id: "geolocate",
      layer: svgGeolocate(projection2, context, dispatch12)
    }, {
      id: "touch",
      layer: svgTouch(projection2, context, dispatch12)
    }];
    function drawLayers(selection2) {
      svg2 = selection2.selectAll(".surface").data([0]);
      svg2 = svg2.enter().append("svg").attr("class", "surface").merge(svg2);
      var defs = svg2.selectAll(".surface-defs").data([0]);
      defs.enter().append("defs").attr("class", "surface-defs");
      defs.enter().append("svg").attr("class", "grids-svg");
      var groups = svg2.selectAll(".data-layer").data(_layers);
      groups.exit().remove();
      groups.enter().append("g").attr("class", function(d) {
        return "data-layer " + d.id;
      }).merge(groups).each(function(d) {
        select_default2(this).call(d.layer);
      });
    }
    drawLayers.all = function() {
      return _layers;
    };
    drawLayers.layer = function(id2) {
      var obj = _layers.find(function(o2) {
        return o2.id === id2;
      });
      return obj && obj.layer;
    };
    drawLayers.only = function(what) {
      var arr = [].concat(what);
      var all = _layers.map(function(layer2) {
        return layer2.id;
      });
      return drawLayers.remove(utilArrayDifference(all, arr));
    };
    drawLayers.remove = function(what) {
      var arr = [].concat(what);
      arr.forEach(function(id2) {
        _layers = _layers.filter(function(o2) {
          return o2.id !== id2;
        });
      });
      dispatch12.call("change");
      return this;
    };
    drawLayers.add = function(what) {
      var arr = [].concat(what);
      arr.forEach(function(obj) {
        if ("id" in obj && "layer" in obj) {
          _layers.push(obj);
        }
      });
      dispatch12.call("change");
      return this;
    };
    drawLayers.dimensions = function(val) {
      if (!arguments.length)
        return utilGetDimensions(svg2);
      utilSetDimensions(svg2, val);
      return this;
    };
    return utilRebind(drawLayers, dispatch12, "on");
  }

  // node_modules/lodash-es/_listCacheClear.js
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  var listCacheClear_default = listCacheClear;

  // node_modules/lodash-es/eq.js
  function eq(value2, other) {
    return value2 === other || value2 !== value2 && other !== other;
  }
  var eq_default = eq;

  // node_modules/lodash-es/_assocIndexOf.js
  function assocIndexOf(array2, key) {
    var length = array2.length;
    while (length--) {
      if (eq_default(array2[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  var assocIndexOf_default = assocIndexOf;

  // node_modules/lodash-es/_listCacheDelete.js
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data2 = this.__data__, index = assocIndexOf_default(data2, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index, 1);
    }
    --this.size;
    return true;
  }
  var listCacheDelete_default = listCacheDelete;

  // node_modules/lodash-es/_listCacheGet.js
  function listCacheGet(key) {
    var data2 = this.__data__, index = assocIndexOf_default(data2, key);
    return index < 0 ? void 0 : data2[index][1];
  }
  var listCacheGet_default = listCacheGet;

  // node_modules/lodash-es/_listCacheHas.js
  function listCacheHas(key) {
    return assocIndexOf_default(this.__data__, key) > -1;
  }
  var listCacheHas_default = listCacheHas;

  // node_modules/lodash-es/_listCacheSet.js
  function listCacheSet(key, value2) {
    var data2 = this.__data__, index = assocIndexOf_default(data2, key);
    if (index < 0) {
      ++this.size;
      data2.push([key, value2]);
    } else {
      data2[index][1] = value2;
    }
    return this;
  }
  var listCacheSet_default = listCacheSet;

  // node_modules/lodash-es/_ListCache.js
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear_default;
  ListCache.prototype["delete"] = listCacheDelete_default;
  ListCache.prototype.get = listCacheGet_default;
  ListCache.prototype.has = listCacheHas_default;
  ListCache.prototype.set = listCacheSet_default;
  var ListCache_default = ListCache;

  // node_modules/lodash-es/_stackClear.js
  function stackClear() {
    this.__data__ = new ListCache_default();
    this.size = 0;
  }
  var stackClear_default = stackClear;

  // node_modules/lodash-es/_stackDelete.js
  function stackDelete(key) {
    var data2 = this.__data__, result6 = data2["delete"](key);
    this.size = data2.size;
    return result6;
  }
  var stackDelete_default = stackDelete;

  // node_modules/lodash-es/_stackGet.js
  function stackGet(key) {
    return this.__data__.get(key);
  }
  var stackGet_default = stackGet;

  // node_modules/lodash-es/_stackHas.js
  function stackHas(key) {
    return this.__data__.has(key);
  }
  var stackHas_default = stackHas;

  // node_modules/lodash-es/isFunction.js
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction(value2) {
    if (!isObject_default(value2)) {
      return false;
    }
    var tag = baseGetTag_default(value2);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_default = isFunction;

  // node_modules/lodash-es/_coreJsData.js
  var coreJsData = root_default["__core-js_shared__"];
  var coreJsData_default = coreJsData;

  // node_modules/lodash-es/_isMasked.js
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var isMasked_default = isMasked;

  // node_modules/lodash-es/_toSource.js
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e3) {
      }
      try {
        return func + "";
      } catch (e3) {
      }
    }
    return "";
  }
  var toSource_default = toSource;

  // node_modules/lodash-es/_baseIsNative.js
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto2 = Function.prototype;
  var objectProto3 = Object.prototype;
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto3.hasOwnProperty;
  var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  function baseIsNative(value2) {
    if (!isObject_default(value2) || isMasked_default(value2)) {
      return false;
    }
    var pattern = isFunction_default(value2) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource_default(value2));
  }
  var baseIsNative_default = baseIsNative;

  // node_modules/lodash-es/_getValue.js
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  var getValue_default = getValue;

  // node_modules/lodash-es/_getNative.js
  function getNative(object, key) {
    var value2 = getValue_default(object, key);
    return baseIsNative_default(value2) ? value2 : void 0;
  }
  var getNative_default = getNative;

  // node_modules/lodash-es/_Map.js
  var Map2 = getNative_default(root_default, "Map");
  var Map_default = Map2;

  // node_modules/lodash-es/_nativeCreate.js
  var nativeCreate = getNative_default(Object, "create");
  var nativeCreate_default = nativeCreate;

  // node_modules/lodash-es/_hashClear.js
  function hashClear() {
    this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
    this.size = 0;
  }
  var hashClear_default = hashClear;

  // node_modules/lodash-es/_hashDelete.js
  function hashDelete(key) {
    var result6 = this.has(key) && delete this.__data__[key];
    this.size -= result6 ? 1 : 0;
    return result6;
  }
  var hashDelete_default = hashDelete;

  // node_modules/lodash-es/_hashGet.js
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto4 = Object.prototype;
  var hasOwnProperty3 = objectProto4.hasOwnProperty;
  function hashGet(key) {
    var data2 = this.__data__;
    if (nativeCreate_default) {
      var result6 = data2[key];
      return result6 === HASH_UNDEFINED ? void 0 : result6;
    }
    return hasOwnProperty3.call(data2, key) ? data2[key] : void 0;
  }
  var hashGet_default = hashGet;

  // node_modules/lodash-es/_hashHas.js
  var objectProto5 = Object.prototype;
  var hasOwnProperty4 = objectProto5.hasOwnProperty;
  function hashHas(key) {
    var data2 = this.__data__;
    return nativeCreate_default ? data2[key] !== void 0 : hasOwnProperty4.call(data2, key);
  }
  var hashHas_default = hashHas;

  // node_modules/lodash-es/_hashSet.js
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function hashSet(key, value2) {
    var data2 = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data2[key] = nativeCreate_default && value2 === void 0 ? HASH_UNDEFINED2 : value2;
    return this;
  }
  var hashSet_default = hashSet;

  // node_modules/lodash-es/_Hash.js
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear_default;
  Hash.prototype["delete"] = hashDelete_default;
  Hash.prototype.get = hashGet_default;
  Hash.prototype.has = hashHas_default;
  Hash.prototype.set = hashSet_default;
  var Hash_default = Hash;

  // node_modules/lodash-es/_mapCacheClear.js
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash_default(),
      "map": new (Map_default || ListCache_default)(),
      "string": new Hash_default()
    };
  }
  var mapCacheClear_default = mapCacheClear;

  // node_modules/lodash-es/_isKeyable.js
  init_typeof();
  function isKeyable(value2) {
    var type3 = _typeof(value2);
    return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value2 !== "__proto__" : value2 === null;
  }
  var isKeyable_default = isKeyable;

  // node_modules/lodash-es/_getMapData.js
  function getMapData(map2, key) {
    var data2 = map2.__data__;
    return isKeyable_default(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
  }
  var getMapData_default = getMapData;

  // node_modules/lodash-es/_mapCacheDelete.js
  function mapCacheDelete(key) {
    var result6 = getMapData_default(this, key)["delete"](key);
    this.size -= result6 ? 1 : 0;
    return result6;
  }
  var mapCacheDelete_default = mapCacheDelete;

  // node_modules/lodash-es/_mapCacheGet.js
  function mapCacheGet(key) {
    return getMapData_default(this, key).get(key);
  }
  var mapCacheGet_default = mapCacheGet;

  // node_modules/lodash-es/_mapCacheHas.js
  function mapCacheHas(key) {
    return getMapData_default(this, key).has(key);
  }
  var mapCacheHas_default = mapCacheHas;

  // node_modules/lodash-es/_mapCacheSet.js
  function mapCacheSet(key, value2) {
    var data2 = getMapData_default(this, key), size = data2.size;
    data2.set(key, value2);
    this.size += data2.size == size ? 0 : 1;
    return this;
  }
  var mapCacheSet_default = mapCacheSet;

  // node_modules/lodash-es/_MapCache.js
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear_default;
  MapCache.prototype["delete"] = mapCacheDelete_default;
  MapCache.prototype.get = mapCacheGet_default;
  MapCache.prototype.has = mapCacheHas_default;
  MapCache.prototype.set = mapCacheSet_default;
  var MapCache_default = MapCache;

  // node_modules/lodash-es/_stackSet.js
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value2) {
    var data2 = this.__data__;
    if (data2 instanceof ListCache_default) {
      var pairs = data2.__data__;
      if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value2]);
        this.size = ++data2.size;
        return this;
      }
      data2 = this.__data__ = new MapCache_default(pairs);
    }
    data2.set(key, value2);
    this.size = data2.size;
    return this;
  }
  var stackSet_default = stackSet;

  // node_modules/lodash-es/_Stack.js
  function Stack(entries) {
    var data2 = this.__data__ = new ListCache_default(entries);
    this.size = data2.size;
  }
  Stack.prototype.clear = stackClear_default;
  Stack.prototype["delete"] = stackDelete_default;
  Stack.prototype.get = stackGet_default;
  Stack.prototype.has = stackHas_default;
  Stack.prototype.set = stackSet_default;
  var Stack_default = Stack;

  // node_modules/lodash-es/_setCacheAdd.js
  var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
  function setCacheAdd(value2) {
    this.__data__.set(value2, HASH_UNDEFINED3);
    return this;
  }
  var setCacheAdd_default = setCacheAdd;

  // node_modules/lodash-es/_setCacheHas.js
  function setCacheHas(value2) {
    return this.__data__.has(value2);
  }
  var setCacheHas_default = setCacheHas;

  // node_modules/lodash-es/_SetCache.js
  function SetCache(values2) {
    var index = -1, length = values2 == null ? 0 : values2.length;
    this.__data__ = new MapCache_default();
    while (++index < length) {
      this.add(values2[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
  SetCache.prototype.has = setCacheHas_default;
  var SetCache_default = SetCache;

  // node_modules/lodash-es/_arraySome.js
  function arraySome(array2, predicate) {
    var index = -1, length = array2 == null ? 0 : array2.length;
    while (++index < length) {
      if (predicate(array2[index], index, array2)) {
        return true;
      }
    }
    return false;
  }
  var arraySome_default = arraySome;

  // node_modules/lodash-es/_cacheHas.js
  function cacheHas(cache7, key) {
    return cache7.has(key);
  }
  var cacheHas_default = cacheHas;

  // node_modules/lodash-es/_equalArrays.js
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array2);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array2;
    }
    var index = -1, result6 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
    stack.set(array2, other);
    stack.set(other, array2);
    while (++index < arrLength) {
      var arrValue = array2[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result6 = false;
        break;
      }
      if (seen) {
        if (!arraySome_default(other, function(othValue2, othIndex) {
          if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result6 = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result6 = false;
        break;
      }
    }
    stack["delete"](array2);
    stack["delete"](other);
    return result6;
  }
  var equalArrays_default = equalArrays;

  // node_modules/lodash-es/_Uint8Array.js
  var Uint8Array2 = root_default.Uint8Array;
  var Uint8Array_default = Uint8Array2;

  // node_modules/lodash-es/_mapToArray.js
  function mapToArray(map2) {
    var index = -1, result6 = Array(map2.size);
    map2.forEach(function(value2, key) {
      result6[++index] = [key, value2];
    });
    return result6;
  }
  var mapToArray_default = mapToArray;

  // node_modules/lodash-es/_setToArray.js
  function setToArray(set3) {
    var index = -1, result6 = Array(set3.size);
    set3.forEach(function(value2) {
      result6[++index] = value2;
    });
    return result6;
  }
  var setToArray_default = setToArray;

  // node_modules/lodash-es/_equalByTag.js
  var COMPARE_PARTIAL_FLAG2 = 1;
  var COMPARE_UNORDERED_FLAG2 = 2;
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag2 = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq_default(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray_default;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
        convert || (convert = setToArray_default);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG2;
        stack.set(object, other);
        var result6 = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result6;
      case symbolTag2:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  var equalByTag_default = equalByTag;

  // node_modules/lodash-es/_arrayPush.js
  function arrayPush(array2, values2) {
    var index = -1, length = values2.length, offset = array2.length;
    while (++index < length) {
      array2[offset + index] = values2[index];
    }
    return array2;
  }
  var arrayPush_default = arrayPush;

  // node_modules/lodash-es/isArray.js
  var isArray = Array.isArray;
  var isArray_default = isArray;

  // node_modules/lodash-es/_baseGetAllKeys.js
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result6 = keysFunc(object);
    return isArray_default(object) ? result6 : arrayPush_default(result6, symbolsFunc(object));
  }
  var baseGetAllKeys_default = baseGetAllKeys;

  // node_modules/lodash-es/_arrayFilter.js
  function arrayFilter(array2, predicate) {
    var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result6 = [];
    while (++index < length) {
      var value2 = array2[index];
      if (predicate(value2, index, array2)) {
        result6[resIndex++] = value2;
      }
    }
    return result6;
  }
  var arrayFilter_default = arrayFilter;

  // node_modules/lodash-es/stubArray.js
  function stubArray() {
    return [];
  }
  var stubArray_default = stubArray;

  // node_modules/lodash-es/_getSymbols.js
  var objectProto6 = Object.prototype;
  var propertyIsEnumerable = objectProto6.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var getSymbols_default = getSymbols;

  // node_modules/lodash-es/_baseTimes.js
  function baseTimes(n2, iteratee) {
    var index = -1, result6 = Array(n2);
    while (++index < n2) {
      result6[index] = iteratee(index);
    }
    return result6;
  }
  var baseTimes_default = baseTimes;

  // node_modules/lodash-es/_baseIsArguments.js
  var argsTag = "[object Arguments]";
  function baseIsArguments(value2) {
    return isObjectLike_default(value2) && baseGetTag_default(value2) == argsTag;
  }
  var baseIsArguments_default = baseIsArguments;

  // node_modules/lodash-es/isArguments.js
  var objectProto7 = Object.prototype;
  var hasOwnProperty5 = objectProto7.hasOwnProperty;
  var propertyIsEnumerable2 = objectProto7.propertyIsEnumerable;
  var isArguments = baseIsArguments_default(function() {
    return arguments;
  }()) ? baseIsArguments_default : function(value2) {
    return isObjectLike_default(value2) && hasOwnProperty5.call(value2, "callee") && !propertyIsEnumerable2.call(value2, "callee");
  };
  var isArguments_default = isArguments;

  // node_modules/lodash-es/isBuffer.js
  init_typeof();

  // node_modules/lodash-es/stubFalse.js
  function stubFalse() {
    return false;
  }
  var stubFalse_default = stubFalse;

  // node_modules/lodash-es/isBuffer.js
  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root_default.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer = nativeIsBuffer || stubFalse_default;
  var isBuffer_default = isBuffer;

  // node_modules/lodash-es/_isIndex.js
  init_typeof();
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value2, length) {
    var type3 = _typeof(value2);
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type3 == "number" || type3 != "symbol" && reIsUint.test(value2)) && value2 > -1 && value2 % 1 == 0 && value2 < length;
  }
  var isIndex_default = isIndex;

  // node_modules/lodash-es/isLength.js
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  function isLength(value2) {
    return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER2;
  }
  var isLength_default = isLength;

  // node_modules/lodash-es/_baseIsTypedArray.js
  var argsTag2 = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag2 = "[object Boolean]";
  var dateTag2 = "[object Date]";
  var errorTag2 = "[object Error]";
  var funcTag2 = "[object Function]";
  var mapTag2 = "[object Map]";
  var numberTag2 = "[object Number]";
  var objectTag = "[object Object]";
  var regexpTag2 = "[object RegExp]";
  var setTag2 = "[object Set]";
  var stringTag2 = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag2 = "[object ArrayBuffer]";
  var dataViewTag2 = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag2] = typedArrayTags[boolTag2] = typedArrayTags[dataViewTag2] = typedArrayTags[dateTag2] = typedArrayTags[errorTag2] = typedArrayTags[funcTag2] = typedArrayTags[mapTag2] = typedArrayTags[numberTag2] = typedArrayTags[objectTag] = typedArrayTags[regexpTag2] = typedArrayTags[setTag2] = typedArrayTags[stringTag2] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value2) {
    return isObjectLike_default(value2) && isLength_default(value2.length) && !!typedArrayTags[baseGetTag_default(value2)];
  }
  var baseIsTypedArray_default = baseIsTypedArray;

  // node_modules/lodash-es/_baseUnary.js
  function baseUnary(func) {
    return function(value2) {
      return func(value2);
    };
  }
  var baseUnary_default = baseUnary;

  // node_modules/lodash-es/_nodeUtil.js
  init_typeof();
  var freeExports2 = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && exports && !exports.nodeType && exports;
  var freeModule2 = freeExports2 && (typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module && !module.nodeType && module;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var freeProcess = moduleExports2 && freeGlobal_default.process;
  var nodeUtil = function() {
    try {
      var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e3) {
    }
  }();
  var nodeUtil_default = nodeUtil;

  // node_modules/lodash-es/isTypedArray.js
  var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
  var isTypedArray_default = isTypedArray;

  // node_modules/lodash-es/_arrayLikeKeys.js
  var objectProto8 = Object.prototype;
  var hasOwnProperty6 = objectProto8.hasOwnProperty;
  function arrayLikeKeys(value2, inherited) {
    var isArr = isArray_default(value2), isArg = !isArr && isArguments_default(value2), isBuff = !isArr && !isArg && isBuffer_default(value2), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value2), skipIndexes = isArr || isArg || isBuff || isType, result6 = skipIndexes ? baseTimes_default(value2.length, String) : [], length = result6.length;
    for (var key in value2) {
      if ((inherited || hasOwnProperty6.call(value2, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length)))) {
        result6.push(key);
      }
    }
    return result6;
  }
  var arrayLikeKeys_default = arrayLikeKeys;

  // node_modules/lodash-es/_isPrototype.js
  var objectProto9 = Object.prototype;
  function isPrototype(value2) {
    var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto9;
    return value2 === proto;
  }
  var isPrototype_default = isPrototype;

  // node_modules/lodash-es/_overArg.js
  function overArg(func, transform2) {
    return function(arg) {
      return func(transform2(arg));
    };
  }
  var overArg_default = overArg;

  // node_modules/lodash-es/_nativeKeys.js
  var nativeKeys = overArg_default(Object.keys, Object);
  var nativeKeys_default = nativeKeys;

  // node_modules/lodash-es/_baseKeys.js
  var objectProto10 = Object.prototype;
  var hasOwnProperty7 = objectProto10.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype_default(object)) {
      return nativeKeys_default(object);
    }
    var result6 = [];
    for (var key in Object(object)) {
      if (hasOwnProperty7.call(object, key) && key != "constructor") {
        result6.push(key);
      }
    }
    return result6;
  }
  var baseKeys_default = baseKeys;

  // node_modules/lodash-es/isArrayLike.js
  function isArrayLike(value2) {
    return value2 != null && isLength_default(value2.length) && !isFunction_default(value2);
  }
  var isArrayLike_default = isArrayLike;

  // node_modules/lodash-es/keys.js
  function keys(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
  }
  var keys_default = keys;

  // node_modules/lodash-es/_getAllKeys.js
  function getAllKeys(object) {
    return baseGetAllKeys_default(object, keys_default, getSymbols_default);
  }
  var getAllKeys_default = getAllKeys;

  // node_modules/lodash-es/_equalObjects.js
  var COMPARE_PARTIAL_FLAG3 = 1;
  var objectProto11 = Object.prototype;
  var hasOwnProperty8 = objectProto11.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty8.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result6 = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result6 = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result6 && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result6 = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result6;
  }
  var equalObjects_default = equalObjects;

  // node_modules/lodash-es/_DataView.js
  var DataView2 = getNative_default(root_default, "DataView");
  var DataView_default = DataView2;

  // node_modules/lodash-es/_Promise.js
  var Promise2 = getNative_default(root_default, "Promise");
  var Promise_default = Promise2;

  // node_modules/lodash-es/_Set.js
  var Set2 = getNative_default(root_default, "Set");
  var Set_default = Set2;

  // node_modules/lodash-es/_WeakMap.js
  var WeakMap = getNative_default(root_default, "WeakMap");
  var WeakMap_default = WeakMap;

  // node_modules/lodash-es/_getTag.js
  var mapTag3 = "[object Map]";
  var objectTag2 = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag3 = "[object Set]";
  var weakMapTag2 = "[object WeakMap]";
  var dataViewTag3 = "[object DataView]";
  var dataViewCtorString = toSource_default(DataView_default);
  var mapCtorString = toSource_default(Map_default);
  var promiseCtorString = toSource_default(Promise_default);
  var setCtorString = toSource_default(Set_default);
  var weakMapCtorString = toSource_default(WeakMap_default);
  var getTag = baseGetTag_default;
  if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
    getTag = function getTag2(value2) {
      var result6 = baseGetTag_default(value2), Ctor = result6 == objectTag2 ? value2.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag3;
          case mapCtorString:
            return mapTag3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag3;
          case weakMapCtorString:
            return weakMapTag2;
        }
      }
      return result6;
    };
  }
  var getTag_default = getTag;

  // node_modules/lodash-es/_baseIsEqualDeep.js
  var COMPARE_PARTIAL_FLAG4 = 1;
  var argsTag3 = "[object Arguments]";
  var arrayTag2 = "[object Array]";
  var objectTag3 = "[object Object]";
  var objectProto12 = Object.prototype;
  var hasOwnProperty9 = objectProto12.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object), othTag = othIsArr ? arrayTag2 : getTag_default(other);
    objTag = objTag == argsTag3 ? objectTag3 : objTag;
    othTag = othTag == argsTag3 ? objectTag3 : othTag;
    var objIsObj = objTag == objectTag3, othIsObj = othTag == objectTag3, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer_default(object)) {
      if (!isBuffer_default(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack_default());
      return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
      var objIsWrapped = objIsObj && hasOwnProperty9.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty9.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack_default());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack_default());
    return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
  }
  var baseIsEqualDeep_default = baseIsEqualDeep;

  // node_modules/lodash-es/_baseIsEqual.js
  function baseIsEqual(value2, other, bitmask, customizer, stack) {
    if (value2 === other) {
      return true;
    }
    if (value2 == null || other == null || !isObjectLike_default(value2) && !isObjectLike_default(other)) {
      return value2 !== value2 && other !== other;
    }
    return baseIsEqualDeep_default(value2, other, bitmask, customizer, baseIsEqual, stack);
  }
  var baseIsEqual_default = baseIsEqual;

  // node_modules/lodash-es/isEqual.js
  function isEqual(value2, other) {
    return baseIsEqual_default(value2, other);
  }
  var isEqual_default = isEqual;

  // node_modules/lodash-es/_arrayMap.js
  function arrayMap(array2, iteratee) {
    var index = -1, length = array2 == null ? 0 : array2.length, result6 = Array(length);
    while (++index < length) {
      result6[index] = iteratee(array2[index], index, array2);
    }
    return result6;
  }
  var arrayMap_default = arrayMap;

  // node_modules/lodash-es/_arrayEach.js
  function arrayEach(array2, iteratee) {
    var index = -1, length = array2 == null ? 0 : array2.length;
    while (++index < length) {
      if (iteratee(array2[index], index, array2) === false) {
        break;
      }
    }
    return array2;
  }
  var arrayEach_default = arrayEach;

  // node_modules/lodash-es/_defineProperty.js
  var defineProperty = function() {
    try {
      var func = getNative_default(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e3) {
    }
  }();
  var defineProperty_default = defineProperty;

  // node_modules/lodash-es/_baseAssignValue.js
  function baseAssignValue(object, key, value2) {
    if (key == "__proto__" && defineProperty_default) {
      defineProperty_default(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value2,
        "writable": true
      });
    } else {
      object[key] = value2;
    }
  }
  var baseAssignValue_default = baseAssignValue;

  // node_modules/lodash-es/_assignValue.js
  var objectProto13 = Object.prototype;
  var hasOwnProperty10 = objectProto13.hasOwnProperty;
  function assignValue(object, key, value2) {
    var objValue = object[key];
    if (!(hasOwnProperty10.call(object, key) && eq_default(objValue, value2)) || value2 === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value2);
    }
  }
  var assignValue_default = assignValue;

  // node_modules/lodash-es/_copyObject.js
  function copyObject(source, props, object, customizer) {
    var isNew3 = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew3) {
        baseAssignValue_default(object, key, newValue);
      } else {
        assignValue_default(object, key, newValue);
      }
    }
    return object;
  }
  var copyObject_default = copyObject;

  // node_modules/lodash-es/_baseAssign.js
  function baseAssign(object, source) {
    return object && copyObject_default(source, keys_default(source), object);
  }
  var baseAssign_default = baseAssign;

  // node_modules/lodash-es/_nativeKeysIn.js
  function nativeKeysIn(object) {
    var result6 = [];
    if (object != null) {
      for (var key in Object(object)) {
        result6.push(key);
      }
    }
    return result6;
  }
  var nativeKeysIn_default = nativeKeysIn;

  // node_modules/lodash-es/_baseKeysIn.js
  var objectProto14 = Object.prototype;
  var hasOwnProperty11 = objectProto14.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject_default(object)) {
      return nativeKeysIn_default(object);
    }
    var isProto = isPrototype_default(object), result6 = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty11.call(object, key)))) {
        result6.push(key);
      }
    }
    return result6;
  }
  var baseKeysIn_default = baseKeysIn;

  // node_modules/lodash-es/keysIn.js
  function keysIn(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
  }
  var keysIn_default = keysIn;

  // node_modules/lodash-es/_baseAssignIn.js
  function baseAssignIn(object, source) {
    return object && copyObject_default(source, keysIn_default(source), object);
  }
  var baseAssignIn_default = baseAssignIn;

  // node_modules/lodash-es/_cloneBuffer.js
  init_typeof();
  var freeExports3 = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && exports && !exports.nodeType && exports;
  var freeModule3 = freeExports3 && (typeof module === "undefined" ? "undefined" : _typeof(module)) == "object" && module && !module.nodeType && module;
  var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
  var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
  var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length, result6 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result6);
    return result6;
  }
  var cloneBuffer_default = cloneBuffer;

  // node_modules/lodash-es/_copyArray.js
  function copyArray(source, array2) {
    var index = -1, length = source.length;
    array2 || (array2 = Array(length));
    while (++index < length) {
      array2[index] = source[index];
    }
    return array2;
  }
  var copyArray_default = copyArray;

  // node_modules/lodash-es/_copySymbols.js
  function copySymbols(source, object) {
    return copyObject_default(source, getSymbols_default(source), object);
  }
  var copySymbols_default = copySymbols;

  // node_modules/lodash-es/_getPrototype.js
  var getPrototype = overArg_default(Object.getPrototypeOf, Object);
  var getPrototype_default = getPrototype;

  // node_modules/lodash-es/_getSymbolsIn.js
  var nativeGetSymbols2 = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object) {
    var result6 = [];
    while (object) {
      arrayPush_default(result6, getSymbols_default(object));
      object = getPrototype_default(object);
    }
    return result6;
  };
  var getSymbolsIn_default = getSymbolsIn;

  // node_modules/lodash-es/_copySymbolsIn.js
  function copySymbolsIn(source, object) {
    return copyObject_default(source, getSymbolsIn_default(source), object);
  }
  var copySymbolsIn_default = copySymbolsIn;

  // node_modules/lodash-es/_getAllKeysIn.js
  function getAllKeysIn(object) {
    return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
  }
  var getAllKeysIn_default = getAllKeysIn;

  // node_modules/lodash-es/_initCloneArray.js
  var objectProto15 = Object.prototype;
  var hasOwnProperty12 = objectProto15.hasOwnProperty;
  function initCloneArray(array2) {
    var length = array2.length, result6 = new array2.constructor(length);
    if (length && typeof array2[0] == "string" && hasOwnProperty12.call(array2, "index")) {
      result6.index = array2.index;
      result6.input = array2.input;
    }
    return result6;
  }
  var initCloneArray_default = initCloneArray;

  // node_modules/lodash-es/_cloneArrayBuffer.js
  function cloneArrayBuffer(arrayBuffer) {
    var result6 = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array_default(result6).set(new Uint8Array_default(arrayBuffer));
    return result6;
  }
  var cloneArrayBuffer_default = cloneArrayBuffer;

  // node_modules/lodash-es/_cloneDataView.js
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var cloneDataView_default = cloneDataView;

  // node_modules/lodash-es/_cloneRegExp.js
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result6 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result6.lastIndex = regexp.lastIndex;
    return result6;
  }
  var cloneRegExp_default = cloneRegExp;

  // node_modules/lodash-es/_cloneSymbol.js
  var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf2 = symbolProto2 ? symbolProto2.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf2 ? Object(symbolValueOf2.call(symbol)) : {};
  }
  var cloneSymbol_default = cloneSymbol;

  // node_modules/lodash-es/_cloneTypedArray.js
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var cloneTypedArray_default = cloneTypedArray;

  // node_modules/lodash-es/_initCloneByTag.js
  var boolTag3 = "[object Boolean]";
  var dateTag3 = "[object Date]";
  var mapTag4 = "[object Map]";
  var numberTag3 = "[object Number]";
  var regexpTag3 = "[object RegExp]";
  var setTag4 = "[object Set]";
  var stringTag3 = "[object String]";
  var symbolTag3 = "[object Symbol]";
  var arrayBufferTag3 = "[object ArrayBuffer]";
  var dataViewTag4 = "[object DataView]";
  var float32Tag2 = "[object Float32Array]";
  var float64Tag2 = "[object Float64Array]";
  var int8Tag2 = "[object Int8Array]";
  var int16Tag2 = "[object Int16Array]";
  var int32Tag2 = "[object Int32Array]";
  var uint8Tag2 = "[object Uint8Array]";
  var uint8ClampedTag2 = "[object Uint8ClampedArray]";
  var uint16Tag2 = "[object Uint16Array]";
  var uint32Tag2 = "[object Uint32Array]";
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag3:
        return cloneArrayBuffer_default(object);
      case boolTag3:
      case dateTag3:
        return new Ctor(+object);
      case dataViewTag4:
        return cloneDataView_default(object, isDeep);
      case float32Tag2:
      case float64Tag2:
      case int8Tag2:
      case int16Tag2:
      case int32Tag2:
      case uint8Tag2:
      case uint8ClampedTag2:
      case uint16Tag2:
      case uint32Tag2:
        return cloneTypedArray_default(object, isDeep);
      case mapTag4:
        return new Ctor();
      case numberTag3:
      case stringTag3:
        return new Ctor(object);
      case regexpTag3:
        return cloneRegExp_default(object);
      case setTag4:
        return new Ctor();
      case symbolTag3:
        return cloneSymbol_default(object);
    }
  }
  var initCloneByTag_default = initCloneByTag;

  // node_modules/lodash-es/_baseCreate.js
  var objectCreate = Object.create;
  var baseCreate = function() {
    function object() {
    }
    return function(proto) {
      if (!isObject_default(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result6 = new object();
      object.prototype = void 0;
      return result6;
    };
  }();
  var baseCreate_default = baseCreate;

  // node_modules/lodash-es/_initCloneObject.js
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
  }
  var initCloneObject_default = initCloneObject;

  // node_modules/lodash-es/_baseIsMap.js
  var mapTag5 = "[object Map]";
  function baseIsMap(value2) {
    return isObjectLike_default(value2) && getTag_default(value2) == mapTag5;
  }
  var baseIsMap_default = baseIsMap;

  // node_modules/lodash-es/isMap.js
  var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
  var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
  var isMap_default = isMap;

  // node_modules/lodash-es/_baseIsSet.js
  var setTag5 = "[object Set]";
  function baseIsSet(value2) {
    return isObjectLike_default(value2) && getTag_default(value2) == setTag5;
  }
  var baseIsSet_default = baseIsSet;

  // node_modules/lodash-es/isSet.js
  var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
  var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
  var isSet_default = isSet;

  // node_modules/lodash-es/_baseClone.js
  var CLONE_DEEP_FLAG = 1;
  var CLONE_FLAT_FLAG = 2;
  var CLONE_SYMBOLS_FLAG = 4;
  var argsTag4 = "[object Arguments]";
  var arrayTag3 = "[object Array]";
  var boolTag4 = "[object Boolean]";
  var dateTag4 = "[object Date]";
  var errorTag3 = "[object Error]";
  var funcTag3 = "[object Function]";
  var genTag2 = "[object GeneratorFunction]";
  var mapTag6 = "[object Map]";
  var numberTag4 = "[object Number]";
  var objectTag4 = "[object Object]";
  var regexpTag4 = "[object RegExp]";
  var setTag6 = "[object Set]";
  var stringTag4 = "[object String]";
  var symbolTag4 = "[object Symbol]";
  var weakMapTag3 = "[object WeakMap]";
  var arrayBufferTag4 = "[object ArrayBuffer]";
  var dataViewTag5 = "[object DataView]";
  var float32Tag3 = "[object Float32Array]";
  var float64Tag3 = "[object Float64Array]";
  var int8Tag3 = "[object Int8Array]";
  var int16Tag3 = "[object Int16Array]";
  var int32Tag3 = "[object Int32Array]";
  var uint8Tag3 = "[object Uint8Array]";
  var uint8ClampedTag3 = "[object Uint8ClampedArray]";
  var uint16Tag3 = "[object Uint16Array]";
  var uint32Tag3 = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag4] = cloneableTags[arrayTag3] = cloneableTags[arrayBufferTag4] = cloneableTags[dataViewTag5] = cloneableTags[boolTag4] = cloneableTags[dateTag4] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag6] = cloneableTags[numberTag4] = cloneableTags[objectTag4] = cloneableTags[regexpTag4] = cloneableTags[setTag6] = cloneableTags[stringTag4] = cloneableTags[symbolTag4] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
  cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
  function baseClone(value2, bitmask, customizer, key, object, stack) {
    var result6, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
      result6 = object ? customizer(value2, key, object, stack) : customizer(value2);
    }
    if (result6 !== void 0) {
      return result6;
    }
    if (!isObject_default(value2)) {
      return value2;
    }
    var isArr = isArray_default(value2);
    if (isArr) {
      result6 = initCloneArray_default(value2);
      if (!isDeep) {
        return copyArray_default(value2, result6);
      }
    } else {
      var tag = getTag_default(value2), isFunc = tag == funcTag3 || tag == genTag2;
      if (isBuffer_default(value2)) {
        return cloneBuffer_default(value2, isDeep);
      }
      if (tag == objectTag4 || tag == argsTag4 || isFunc && !object) {
        result6 = isFlat || isFunc ? {} : initCloneObject_default(value2);
        if (!isDeep) {
          return isFlat ? copySymbolsIn_default(value2, baseAssignIn_default(result6, value2)) : copySymbols_default(value2, baseAssign_default(result6, value2));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value2 : {};
        }
        result6 = initCloneByTag_default(value2, tag, isDeep);
      }
    }
    stack || (stack = new Stack_default());
    var stacked = stack.get(value2);
    if (stacked) {
      return stacked;
    }
    stack.set(value2, result6);
    if (isSet_default(value2)) {
      value2.forEach(function(subValue) {
        result6.add(baseClone(subValue, bitmask, customizer, subValue, value2, stack));
      });
    } else if (isMap_default(value2)) {
      value2.forEach(function(subValue, key2) {
        result6.set(key2, baseClone(subValue, bitmask, customizer, key2, value2, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
    var props = isArr ? void 0 : keysFunc(value2);
    arrayEach_default(props || value2, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value2[key2];
      }
      assignValue_default(result6, key2, baseClone(subValue, bitmask, customizer, key2, value2, stack));
    });
    return result6;
  }
  var baseClone_default = baseClone;

  // node_modules/lodash-es/_isKey.js
  init_typeof();
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  function isKey(value2, object) {
    if (isArray_default(value2)) {
      return false;
    }
    var type3 = _typeof(value2);
    if (type3 == "number" || type3 == "symbol" || type3 == "boolean" || value2 == null || isSymbol_default(value2)) {
      return true;
    }
    return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
  }
  var isKey_default = isKey;

  // node_modules/lodash-es/memoize.js
  var FUNC_ERROR_TEXT3 = "Expected a function";
  function memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT3);
    }
    var memoized = function memoized2() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache7 = memoized2.cache;
      if (cache7.has(key)) {
        return cache7.get(key);
      }
      var result6 = func.apply(this, args);
      memoized2.cache = cache7.set(key, result6) || cache7;
      return result6;
    };
    memoized.cache = new (memoize.Cache || MapCache_default)();
    return memoized;
  }
  memoize.Cache = MapCache_default;
  var memoize_default = memoize;

  // node_modules/lodash-es/_memoizeCapped.js
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result6 = memoize_default(func, function(key) {
      if (cache7.size === MAX_MEMOIZE_SIZE) {
        cache7.clear();
      }
      return key;
    });
    var cache7 = result6.cache;
    return result6;
  }
  var memoizeCapped_default = memoizeCapped;

  // node_modules/lodash-es/_stringToPath.js
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped_default(function(string) {
    var result6 = [];
    if (string.charCodeAt(0) === 46) {
      result6.push("");
    }
    string.replace(rePropName, function(match, number3, quote, subString) {
      result6.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match);
    });
    return result6;
  });
  var stringToPath_default = stringToPath;

  // node_modules/lodash-es/_baseToString.js
  var INFINITY = 1 / 0;
  var symbolProto3 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolToString = symbolProto3 ? symbolProto3.toString : void 0;
  function baseToString(value2) {
    if (typeof value2 == "string") {
      return value2;
    }
    if (isArray_default(value2)) {
      return arrayMap_default(value2, baseToString) + "";
    }
    if (isSymbol_default(value2)) {
      return symbolToString ? symbolToString.call(value2) : "";
    }
    var result6 = value2 + "";
    return result6 == "0" && 1 / value2 == -INFINITY ? "-0" : result6;
  }
  var baseToString_default = baseToString;

  // node_modules/lodash-es/toString.js
  function toString2(value2) {
    return value2 == null ? "" : baseToString_default(value2);
  }
  var toString_default = toString2;

  // node_modules/lodash-es/_castPath.js
  function castPath(value2, object) {
    if (isArray_default(value2)) {
      return value2;
    }
    return isKey_default(value2, object) ? [value2] : stringToPath_default(toString_default(value2));
  }
  var castPath_default = castPath;

  // node_modules/lodash-es/last.js
  function last2(array2) {
    var length = array2 == null ? 0 : array2.length;
    return length ? array2[length - 1] : void 0;
  }
  var last_default = last2;

  // node_modules/lodash-es/_toKey.js
  var INFINITY2 = 1 / 0;
  function toKey(value2) {
    if (typeof value2 == "string" || isSymbol_default(value2)) {
      return value2;
    }
    var result6 = value2 + "";
    return result6 == "0" && 1 / value2 == -INFINITY2 ? "-0" : result6;
  }
  var toKey_default = toKey;

  // node_modules/lodash-es/_baseGet.js
  function baseGet(object, path) {
    path = castPath_default(path, object);
    var index = 0, length = path.length;
    while (object != null && index < length) {
      object = object[toKey_default(path[index++])];
    }
    return index && index == length ? object : void 0;
  }
  var baseGet_default = baseGet;

  // node_modules/lodash-es/_baseSlice.js
  function baseSlice(array2, start2, end) {
    var index = -1, length = array2.length;
    if (start2 < 0) {
      start2 = -start2 > length ? 0 : length + start2;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start2 > end ? 0 : end - start2 >>> 0;
    start2 >>>= 0;
    var result6 = Array(length);
    while (++index < length) {
      result6[index] = array2[index + start2];
    }
    return result6;
  }
  var baseSlice_default = baseSlice;

  // node_modules/lodash-es/_parent.js
  function parent(object, path) {
    return path.length < 2 ? object : baseGet_default(object, baseSlice_default(path, 0, -1));
  }
  var parent_default = parent;

  // node_modules/lodash-es/_baseUnset.js
  function baseUnset(object, path) {
    path = castPath_default(path, object);
    object = parent_default(object, path);
    return object == null || delete object[toKey_default(last_default(path))];
  }
  var baseUnset_default = baseUnset;

  // node_modules/lodash-es/isPlainObject.js
  var objectTag5 = "[object Object]";
  var funcProto3 = Function.prototype;
  var objectProto16 = Object.prototype;
  var funcToString3 = funcProto3.toString;
  var hasOwnProperty13 = objectProto16.hasOwnProperty;
  var objectCtorString = funcToString3.call(Object);
  function isPlainObject(value2) {
    if (!isObjectLike_default(value2) || baseGetTag_default(value2) != objectTag5) {
      return false;
    }
    var proto = getPrototype_default(value2);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty13.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
  }
  var isPlainObject_default = isPlainObject;

  // node_modules/lodash-es/_customOmitClone.js
  function customOmitClone(value2) {
    return isPlainObject_default(value2) ? void 0 : value2;
  }
  var customOmitClone_default = customOmitClone;

  // node_modules/lodash-es/_isFlattenable.js
  var spreadableSymbol = Symbol_default ? Symbol_default.isConcatSpreadable : void 0;
  function isFlattenable(value2) {
    return isArray_default(value2) || isArguments_default(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
  }
  var isFlattenable_default = isFlattenable;

  // node_modules/lodash-es/_baseFlatten.js
  function baseFlatten(array2, depth, predicate, isStrict, result6) {
    var index = -1, length = array2.length;
    predicate || (predicate = isFlattenable_default);
    result6 || (result6 = []);
    while (++index < length) {
      var value2 = array2[index];
      if (depth > 0 && predicate(value2)) {
        if (depth > 1) {
          baseFlatten(value2, depth - 1, predicate, isStrict, result6);
        } else {
          arrayPush_default(result6, value2);
        }
      } else if (!isStrict) {
        result6[result6.length] = value2;
      }
    }
    return result6;
  }
  var baseFlatten_default = baseFlatten;

  // node_modules/lodash-es/flatten.js
  function flatten2(array2) {
    var length = array2 == null ? 0 : array2.length;
    return length ? baseFlatten_default(array2, 1) : [];
  }
  var flatten_default = flatten2;

  // node_modules/lodash-es/_apply.js
  function apply3(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  var apply_default = apply3;

  // node_modules/lodash-es/_overRest.js
  var nativeMax2 = Math.max;
  function overRest(func, start2, transform2) {
    start2 = nativeMax2(start2 === void 0 ? func.length - 1 : start2, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax2(args.length - start2, 0), array2 = Array(length);
      while (++index < length) {
        array2[index] = args[start2 + index];
      }
      index = -1;
      var otherArgs = Array(start2 + 1);
      while (++index < start2) {
        otherArgs[index] = args[index];
      }
      otherArgs[start2] = transform2(array2);
      return apply_default(func, this, otherArgs);
    };
  }
  var overRest_default = overRest;

  // node_modules/lodash-es/constant.js
  function constant(value2) {
    return function() {
      return value2;
    };
  }
  var constant_default5 = constant;

  // node_modules/lodash-es/identity.js
  function identity4(value2) {
    return value2;
  }
  var identity_default4 = identity4;

  // node_modules/lodash-es/_baseSetToString.js
  var baseSetToString = !defineProperty_default ? identity_default4 : function(func, string) {
    return defineProperty_default(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant_default5(string),
      "writable": true
    });
  };
  var baseSetToString_default = baseSetToString;

  // node_modules/lodash-es/_shortOut.js
  var HOT_COUNT = 800;
  var HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  var shortOut_default = shortOut;

  // node_modules/lodash-es/_setToString.js
  var setToString = shortOut_default(baseSetToString_default);
  var setToString_default = setToString;

  // node_modules/lodash-es/_flatRest.js
  function flatRest(func) {
    return setToString_default(overRest_default(func, void 0, flatten_default), func + "");
  }
  var flatRest_default = flatRest;

  // node_modules/lodash-es/omit.js
  var CLONE_DEEP_FLAG2 = 1;
  var CLONE_FLAT_FLAG2 = 2;
  var CLONE_SYMBOLS_FLAG2 = 4;
  var omit = flatRest_default(function(object, paths) {
    var result6 = {};
    if (object == null) {
      return result6;
    }
    var isDeep = false;
    paths = arrayMap_default(paths, function(path) {
      path = castPath_default(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject_default(object, getAllKeysIn_default(object), result6);
    if (isDeep) {
      result6 = baseClone_default(result6, CLONE_DEEP_FLAG2 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG2, customOmitClone_default);
    }
    var length = paths.length;
    while (length--) {
      baseUnset_default(result6, paths[length]);
    }
    return result6;
  });
  var omit_default = omit;

  // modules/svg/lines.js
  var import_fast_deep_equal6 = __toModule(require_fast_deep_equal());
  var _rapid_config = {
    rapid_config: {
      style_fb_ai_roads: {
        enabled: false
      }
    }
  };
  var rapid_config = _rapid_config.rapid_config;
  function svgLines(projection2, context) {
    var detected = utilDetect();
    var highway_stack = {
      motorway: 0,
      motorway_link: 1,
      trunk: 2,
      trunk_link: 3,
      primary: 4,
      primary_link: 5,
      secondary: 6,
      tertiary: 7,
      unclassified: 8,
      residential: 9,
      service: 10,
      footway: 11
    };
    function drawTargets(selection2, graph3, entities, filter2) {
      var targetClass = context.getDebug("target") ? "pink " : "nocolor ";
      var nopeClass = context.getDebug("target") ? "red " : "nocolor ";
      var getPath = svgPath(projection2).geojson;
      var activeID = context.activeID();
      var base2 = context.history().base();
      var data2 = {
        targets: [],
        nopes: []
      };
      entities.forEach(function(way) {
        var features2 = svgSegmentWay(way, graph3, activeID);
        data2.targets.push.apply(data2.targets, features2.passive);
        data2.nopes.push.apply(data2.nopes, features2.active);
      });
      var targetData = data2.targets.filter(getPath);
      var targets = selection2.selectAll(".line.target-allowed").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(targetData, function key(d) {
        return d.id;
      });
      targets.exit().remove();
      var segmentWasEdited = function segmentWasEdited2(d) {
        var wayID = d.properties.entity.id;
        if (!base2.entities[wayID] || !(0, import_fast_deep_equal6.default)(graph3.entities[wayID].nodes, base2.entities[wayID].nodes)) {
          return false;
        }
        return d.properties.nodes.some(function(n2) {
          return !base2.entities[n2.id] || !(0, import_fast_deep_equal6.default)(graph3.entities[n2.id].loc, base2.entities[n2.id].loc);
        });
      };
      targets.enter().append("path").merge(targets).attr("d", getPath).attr("class", function(d) {
        return "way line target target-allowed " + targetClass + d.id;
      }).classed("segment-edited", segmentWasEdited);
      var nopeData = data2.nopes.filter(getPath);
      var nopes = selection2.selectAll(".line.target-nope").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(nopeData, function key(d) {
        return d.id;
      });
      nopes.exit().remove();
      nopes.enter().append("path").merge(nopes).attr("d", getPath).attr("class", function(d) {
        return "way line target target-nope " + nopeClass + d.id;
      }).classed("segment-edited", segmentWasEdited);
    }
    function drawLines(selection2, graph3, entities, filter2) {
      var base2 = context.history().base();
      function waystack(a, b2) {
        var selected = context.selectedIDs();
        var scoreA = selected.indexOf(a.id) !== -1 ? 20 : 0;
        var scoreB = selected.indexOf(b2.id) !== -1 ? 20 : 0;
        if (a.tags.highway) {
          scoreA -= highway_stack[a.tags.highway];
        }
        if (b2.tags.highway) {
          scoreB -= highway_stack[b2.tags.highway];
        }
        return scoreA - scoreB;
      }
      var getAIRoadStylingClass = function getAIRoadStylingClass2(d) {
        if (!rapid_config.style_fb_ai_roads.enabled)
          return "";
        return d.tags.source === "digitalglobe" || d.tags.source === "maxar" ? " airoad " : "";
      };
      var tagEditClass = function tagEditClass2(d) {
        var result6 = graph3.entities[d.id] && base2.entities[d.id] && !isEqual_default(graph3.entities[d.id].tags, base2.entities[d.id].tags);
        return result6 ? " tagedited " : "";
      };
      var graphEditClass = function graphEditClass2(d) {
        if (!base2.entities[d.id]) {
          return " graphedited ";
        }
        var result6 = graph3.entities[d.id] && base2.entities[d.id] && !isEqual_default(omit_default(graph3.entities[d.id], ["tags", "v"]), omit_default(base2.entities[d.id], ["tags", "v"]));
        return result6 ? " graphedited " : "";
      };
      function drawLineGroup(selection3, klass, isSelected) {
        var mode = context.mode();
        var isDrawing = mode && /^draw/.test(mode.id);
        var selectedClass = !isDrawing && isSelected ? "selected " : "";
        var lines = selection3.selectAll("path").filter(filter2).data(getPathData(isSelected), osmEntity.key);
        lines.exit().remove();
        lines.enter().append("path").attr("class", function(d) {
          var prefix = "way line";
          if (!d.hasInterestingTags()) {
            var parentRelations2 = graph3.parentRelations(d);
            var parentMultipolygons2 = parentRelations2.filter(function(relation) {
              return relation.isMultipolygon();
            });
            if (parentMultipolygons2.length > 0 && parentRelations2.length === parentMultipolygons2.length) {
              prefix = "relation area";
            }
          }
          var oldMPClass = oldMultiPolygonOuters[d.id] ? "old-multipolygon " : "";
          return prefix + " " + klass + " " + selectedClass + oldMPClass + graphEditClass(d) + tagEditClass(d) + getAIRoadStylingClass(d) + d.id;
        }).classed("added", function(d) {
          return !base2.entities[d.id];
        }).classed("geometry-edited", function(d) {
          return graph3.entities[d.id] && base2.entities[d.id] && !(0, import_fast_deep_equal6.default)(graph3.entities[d.id].nodes, base2.entities[d.id].nodes);
        }).classed("retagged", function(d) {
          return graph3.entities[d.id] && base2.entities[d.id] && !(0, import_fast_deep_equal6.default)(graph3.entities[d.id].tags, base2.entities[d.id].tags);
        }).call(svgTagClasses()).merge(lines).sort(waystack).attr("d", getPath).call(svgTagClasses().tags(svgRelationMemberTags(graph3)));
        return selection3;
      }
      function getPathData(isSelected) {
        return function() {
          var layer2 = this.parentNode.__data__;
          var data2 = pathdata[layer2] || [];
          return data2.filter(function(d) {
            if (isSelected) {
              return context.selectedIDs().indexOf(d.id) !== -1;
            } else {
              return context.selectedIDs().indexOf(d.id) === -1;
            }
          });
        };
      }
      function addMarkers(layergroup, pathclass, groupclass, groupdata, marker) {
        var markergroup = layergroup.selectAll("g." + groupclass).data([pathclass]);
        markergroup = markergroup.enter().append("g").attr("class", groupclass).merge(markergroup);
        var markers = markergroup.selectAll("path").filter(filter2).data(function data2() {
          return groupdata[this.parentNode.__data__] || [];
        }, function key(d) {
          return [d.id, d.index];
        });
        markers.exit().remove();
        markers = markers.enter().append("path").attr("class", pathclass).merge(markers).attr("marker-mid", marker).attr("d", function(d) {
          return d.d;
        });
        if (detected.ie) {
          markers.each(function() {
            this.parentNode.insertBefore(this, this);
          });
        }
      }
      var getPath = svgPath(projection2, graph3);
      var ways = [];
      var onewaydata = {};
      var sideddata = {};
      var oldMultiPolygonOuters = {};
      for (var i2 = 0; i2 < entities.length; i2++) {
        var entity2 = entities[i2];
        var outer = osmOldMultipolygonOuterMember(entity2, graph3);
        if (outer) {
          ways.push(entity2.mergeTags(outer.tags));
          oldMultiPolygonOuters[outer.id] = true;
        } else if (entity2.geometry(graph3) === "line") {
          ways.push(entity2);
        }
      }
      ways = ways.filter(getPath);
      var pathdata = utilArrayGroupBy(ways, function(way) {
        return way.layer();
      });
      Object.keys(pathdata).forEach(function(k) {
        var v = pathdata[k];
        var onewayArr = v.filter(function(d) {
          return d.isOneWay();
        });
        var onewaySegments = svgMarkerSegments(projection2, graph3, 35, function shouldReverse(entity3) {
          return entity3.tags.oneway === "-1";
        }, function bothDirections(entity3) {
          return entity3.tags.oneway === "reversible" || entity3.tags.oneway === "alternating";
        });
        onewaydata[k] = utilArrayFlatten(onewayArr.map(onewaySegments));
        var sidedArr = v.filter(function(d) {
          return d.isSided();
        });
        var sidedSegments = svgMarkerSegments(projection2, graph3, 30, function shouldReverse() {
          return false;
        }, function bothDirections() {
          return false;
        });
        sideddata[k] = utilArrayFlatten(sidedArr.map(sidedSegments));
      });
      var covered = selection2.selectAll(".layer-osm.covered");
      var uncovered = selection2.selectAll(".layer-osm.lines");
      var touchLayer = selection2.selectAll(".layer-touch.lines");
      [covered, uncovered].forEach(function(selection3) {
        var range4 = selection3 === covered ? range(-10, 0) : range(0, 11);
        var layergroup = selection3.selectAll("g.layergroup").data(range4);
        layergroup = layergroup.enter().append("g").attr("class", function(d) {
          return "layergroup layer" + String(d);
        }).merge(layergroup);
        layergroup.selectAll("g.linegroup").data(["shadow", "casing", "stroke", "shadow-highlighted", "casing-highlighted", "stroke-highlighted"]).enter().append("g").attr("class", function(d) {
          return "linegroup line-" + d;
        });
        layergroup.selectAll("g.line-shadow").call(drawLineGroup, "shadow", false);
        layergroup.selectAll("g.line-casing").call(drawLineGroup, "casing", false);
        layergroup.selectAll("g.line-stroke").call(drawLineGroup, "stroke", false);
        layergroup.selectAll("g.line-shadow-highlighted").call(drawLineGroup, "shadow", true);
        layergroup.selectAll("g.line-casing-highlighted").call(drawLineGroup, "casing", true);
        layergroup.selectAll("g.line-stroke-highlighted").call(drawLineGroup, "stroke", true);
        addMarkers(layergroup, "oneway", "onewaygroup", onewaydata, "url(#ideditor-oneway-marker)");
        addMarkers(layergroup, "sided", "sidedgroup", sideddata, function marker(d) {
          var category = graph3.entity(d.id).sidednessIdentifier();
          return "url(#ideditor-sided-marker-" + category + ")";
        });
      });
      touchLayer.call(drawTargets, graph3, ways, filter2);
    }
    return drawLines;
  }

  // modules/svg/midpoints.js
  function svgMidpoints(projection2, context) {
    var targetRadius = 8;
    function drawTargets(selection2, graph3, entities, filter2) {
      var fillClass = context.getDebug("target") ? "pink " : "nocolor ";
      var getTransform = svgPointTransform(projection2).geojson;
      var data2 = entities.map(function(midpoint) {
        return {
          type: "Feature",
          id: midpoint.id,
          properties: {
            target: true,
            entity: midpoint
          },
          geometry: {
            type: "Point",
            coordinates: midpoint.loc
          }
        };
      });
      var targets = selection2.selectAll(".midpoint.target").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(data2, function key(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("circle").attr("r", targetRadius).merge(targets).attr("class", function(d) {
        return "node midpoint target " + fillClass + d.id;
      }).attr("transform", getTransform);
    }
    function drawMidpoints(selection2, graph3, entities, filter2, extent6) {
      var drawLayer = selection2.selectAll(".layer-osm.points .points-group.midpoints");
      var touchLayer = selection2.selectAll(".layer-touch.points");
      var mode = context.mode();
      if (mode && mode.id !== "select" || !context.map().withinEditableZoom()) {
        drawLayer.selectAll(".midpoint").remove();
        touchLayer.selectAll(".midpoint.target").remove();
        return;
      }
      var poly = extent6.polygon();
      var midpoints = {};
      for (var i2 = 0; i2 < entities.length; i2++) {
        var entity2 = entities[i2];
        if (entity2.type !== "way")
          continue;
        if (!filter2(entity2))
          continue;
        if (context.selectedIDs().indexOf(entity2.id) < 0)
          continue;
        var nodes = graph3.childNodes(entity2);
        for (var j = 0; j < nodes.length - 1; j++) {
          var a = nodes[j];
          var b2 = nodes[j + 1];
          var id2 = [a.id, b2.id].sort().join("-");
          if (midpoints[id2]) {
            midpoints[id2].parents.push(entity2);
          } else if (vecLength(projection2(a.loc), projection2(b2.loc)) > 40) {
            var point5 = vecInterp(a.loc, b2.loc, 0.5);
            var loc = null;
            if (extent6.intersects(new Extent(point5))) {
              loc = point5;
            } else {
              for (var k = 0; k < 4; k++) {
                point5 = geomLineIntersection([a.loc, b2.loc], [poly[k], poly[k + 1]]);
                if (point5 && vecLength(projection2(a.loc), projection2(point5)) > 20 && vecLength(projection2(b2.loc), projection2(point5)) > 20) {
                  loc = point5;
                  break;
                }
              }
            }
            if (loc) {
              midpoints[id2] = {
                type: "midpoint",
                id: id2,
                loc: loc,
                edge: [a.id, b2.id],
                parents: [entity2]
              };
            }
          }
        }
      }
      function midpointFilter(d) {
        if (midpoints[d.id])
          return true;
        for (var i3 = 0; i3 < d.parents.length; i3++) {
          if (filter2(d.parents[i3])) {
            return true;
          }
        }
        return false;
      }
      var groups = drawLayer.selectAll(".midpoint").filter(midpointFilter).data(Object.values(midpoints), function(d) {
        return d.id;
      });
      groups.exit().remove();
      var enter = groups.enter().insert("g", ":first-child").attr("class", "midpoint");
      enter.append("polygon").attr("points", "-6,8 10,0 -6,-8").attr("class", "shadow");
      enter.append("polygon").attr("points", "-3,4 5,0 -3,-4").attr("class", "fill");
      groups = groups.merge(enter).attr("transform", function(d) {
        var translate2 = svgPointTransform(projection2);
        var a2 = projection2(graph3.entity(d.edge[0]).loc);
        var b3 = projection2(graph3.entity(d.edge[1]).loc);
        var angle2 = vecAngle(a2, b3) * (180 / Math.PI);
        return translate2(d) + " rotate(" + angle2 + ")";
      }).call(svgTagClasses().tags(function(d) {
        return d.parents[0].tags;
      }));
      groups.select("polygon.shadow");
      groups.select("polygon.fill");
      touchLayer.call(drawTargets, graph3, Object.values(midpoints), midpointFilter);
    }
    return drawMidpoints;
  }

  // modules/svg/points.js
  var import_fast_deep_equal7 = __toModule(require_fast_deep_equal());
  function svgPoints(projection2, context) {
    function markerPath(selection2, klass) {
      selection2.attr("class", klass).attr("transform", "translate(-8, -23)").attr("d", "M 17,8 C 17,13 11,21 8.5,23.5 C 6,21 0,13 0,8 C 0,4 4,-0.5 8.5,-0.5 C 13,-0.5 17,4 17,8 z");
    }
    function sortY(a, b2) {
      return b2.loc[1] - a.loc[1];
    }
    function fastEntityKey(d) {
      var mode = context.mode();
      var isMoving = mode && /^(add|draw|drag|move|rotate)/.test(mode.id);
      return isMoving ? d.id : osmEntity.key(d);
    }
    function drawTargets(selection2, graph3, entities, filter2) {
      var fillClass = context.getDebug("target") ? "pink " : "nocolor ";
      var getTransform = svgPointTransform(projection2).geojson;
      var activeID = context.activeID();
      var data2 = [];
      entities.forEach(function(node) {
        if (activeID === node.id)
          return;
        data2.push({
          type: "Feature",
          id: node.id,
          properties: {
            target: true,
            entity: node
          },
          geometry: node.asGeoJSON()
        });
      });
      var targets = selection2.selectAll(".point.target").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(data2, function key(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("rect").attr("x", -10).attr("y", -26).attr("width", 20).attr("height", 30).merge(targets).attr("class", function(d) {
        return "node point target " + fillClass + d.id;
      }).attr("transform", getTransform);
    }
    function drawPoints(selection2, graph3, entities, filter2) {
      var wireframe = context.surface().classed("fill-wireframe");
      var zoom = geoScaleToZoom(projection2.scale());
      var base2 = context.history().base();
      function renderAsPoint(entity2) {
        return entity2.geometry(graph3) === "point" && !(zoom >= 18 && entity2.directions(graph3, projection2).length);
      }
      var points = wireframe ? [] : entities.filter(renderAsPoint);
      points.sort(sortY);
      var drawLayer = selection2.selectAll(".layer-osm.points .points-group.points");
      var touchLayer = selection2.selectAll(".layer-touch.points");
      var groups = drawLayer.selectAll("g.point").filter(filter2).data(points, fastEntityKey);
      groups.exit().remove();
      var enter = groups.enter().append("g").attr("class", function(d) {
        return "node point " + d.id;
      }).order();
      enter.append("path").call(markerPath, "shadow");
      enter.append("ellipse").attr("cx", 0.5).attr("cy", 1).attr("rx", 6.5).attr("ry", 3).attr("class", "stroke");
      enter.append("path").call(markerPath, "stroke");
      enter.append("use").attr("transform", "translate(-5, -19)").attr("class", "icon").attr("width", "11px").attr("height", "11px");
      groups = groups.merge(enter).attr("transform", svgPointTransform(projection2)).classed("added", function(d) {
        return !base2.entities[d.id];
      }).classed("moved", function(d) {
        return base2.entities[d.id] && !(0, import_fast_deep_equal7.default)(graph3.entities[d.id].loc, base2.entities[d.id].loc);
      }).classed("retagged", function(d) {
        return base2.entities[d.id] && !(0, import_fast_deep_equal7.default)(graph3.entities[d.id].tags, base2.entities[d.id].tags);
      }).call(svgTagClasses());
      groups.select(".shadow");
      groups.select(".stroke");
      groups.select(".icon").attr("xlink:href", function(entity2) {
        var preset = _mainPresetIndex.match(entity2, graph3);
        var picon = preset && preset.icon;
        if (!picon) {
          return "";
        } else {
          var isMaki = /^maki-/.test(picon);
          return "#" + picon + (isMaki ? "-11" : "");
        }
      });
      touchLayer.call(drawTargets, graph3, points, filter2);
    }
    return drawPoints;
  }

  // modules/svg/turns.js
  function svgTurns(projection2, context) {
    function icon2(turn) {
      var u = turn.u ? "-u" : "";
      if (turn.no)
        return "#iD-turn-no" + u;
      if (turn.only)
        return "#iD-turn-only" + u;
      return "#iD-turn-yes" + u;
    }
    function drawTurns(selection2, graph3, turns) {
      function turnTransform(d) {
        var pxRadius = 50;
        var toWay = graph3.entity(d.to.way);
        var toPoints = graph3.childNodes(toWay).map(function(n2) {
          return n2.loc;
        }).map(projection2);
        var toLength = geomPathLength(toPoints);
        var mid = toLength / 2;
        var toNode = graph3.entity(d.to.node);
        var toVertex = graph3.entity(d.to.vertex);
        var a = vecAngle(projection2(toVertex.loc), projection2(toNode.loc));
        var o2 = projection2(toVertex.loc);
        var r = d.u ? 0 : !toWay.__via ? pxRadius : Math.min(mid, pxRadius);
        return "translate(" + (r * Math.cos(a) + o2[0]) + "," + (r * Math.sin(a) + o2[1]) + ") rotate(" + a * 180 / Math.PI + ")";
      }
      var drawLayer = selection2.selectAll(".layer-osm.points .points-group.turns");
      var touchLayer = selection2.selectAll(".layer-touch.turns");
      var groups = drawLayer.selectAll("g.turn").data(turns, function(d) {
        return d.key;
      });
      groups.exit().remove();
      var groupsEnter = groups.enter().append("g").attr("class", function(d) {
        return "turn " + d.key;
      });
      var turnsEnter = groupsEnter.filter(function(d) {
        return !d.u;
      });
      turnsEnter.append("rect").attr("transform", "translate(-22, -12)").attr("width", "44").attr("height", "24");
      turnsEnter.append("use").attr("transform", "translate(-22, -12)").attr("width", "44").attr("height", "24");
      var uEnter = groupsEnter.filter(function(d) {
        return d.u;
      });
      uEnter.append("circle").attr("r", "16");
      uEnter.append("use").attr("transform", "translate(-16, -16)").attr("width", "32").attr("height", "32");
      groups = groups.merge(groupsEnter).attr("opacity", function(d) {
        return d.direct === false ? "0.7" : null;
      }).attr("transform", turnTransform);
      groups.select("use").attr("xlink:href", icon2);
      groups.select("rect");
      groups.select("circle");
      var fillClass = context.getDebug("target") ? "pink " : "nocolor ";
      groups = touchLayer.selectAll("g.turn").data(turns, function(d) {
        return d.key;
      });
      groups.exit().remove();
      groupsEnter = groups.enter().append("g").attr("class", function(d) {
        return "turn " + d.key;
      });
      turnsEnter = groupsEnter.filter(function(d) {
        return !d.u;
      });
      turnsEnter.append("rect").attr("class", "target " + fillClass).attr("transform", "translate(-22, -12)").attr("width", "44").attr("height", "24");
      uEnter = groupsEnter.filter(function(d) {
        return d.u;
      });
      uEnter.append("circle").attr("class", "target " + fillClass).attr("r", "16");
      groups = groups.merge(groupsEnter).attr("transform", turnTransform);
      groups.select("rect");
      groups.select("circle");
      return this;
    }
    return drawTurns;
  }

  // modules/svg/vertices.js
  var import_fast_deep_equal8 = __toModule(require_fast_deep_equal());
  function svgVertices(projection2, context) {
    var radiuses = {
      shadow: [6, 7.5, 7.5, 12],
      stroke: [2.5, 3.5, 3.5, 8],
      fill: [1, 1.5, 1.5, 1.5]
    };
    var _currHoverTarget;
    var _currPersistent = {};
    var _currHover = {};
    var _prevHover = {};
    var _currSelected = {};
    var _prevSelected = {};
    var _radii = {};
    function sortY(a, b2) {
      return b2.loc[1] - a.loc[1];
    }
    function fastEntityKey(d) {
      var mode = context.mode();
      var isMoving = mode && /^(add|draw|drag|move|rotate)/.test(mode.id);
      return isMoving ? d.id : osmEntity.key(d);
    }
    function draw(selection2, graph3, vertices, sets2, filter2) {
      sets2 = sets2 || {
        selected: {},
        important: {},
        hovered: {}
      };
      var icons = {};
      var directions2 = {};
      var wireframe = context.surface().classed("fill-wireframe");
      var zoom = geoScaleToZoom(projection2.scale());
      var z = zoom < 17 ? 0 : zoom < 18 ? 1 : 2;
      var activeID = context.activeID();
      var base2 = context.history().base();
      function getIcon3(d) {
        var entity2 = graph3.entity(d.id);
        if (entity2.id in icons)
          return icons[entity2.id];
        icons[entity2.id] = entity2.hasInterestingTags() && _mainPresetIndex.match(entity2, graph3).icon;
        return icons[entity2.id];
      }
      function getDirections(entity2) {
        if (entity2.id in directions2)
          return directions2[entity2.id];
        var angles = entity2.directions(graph3, projection2);
        directions2[entity2.id] = angles.length ? angles : false;
        return angles;
      }
      function updateAttributes(selection3) {
        ["shadow", "stroke", "fill"].forEach(function(klass) {
          var rads = radiuses[klass];
          selection3.selectAll("." + klass).each(function(entity2) {
            var i2 = z && getIcon3(entity2);
            var r = rads[i2 ? 3 : z];
            if (entity2.id !== activeID && entity2.isEndpoint(graph3) && !entity2.isConnected(graph3)) {
              r += 1.5;
            }
            if (klass === "shadow") {
              _radii[entity2.id] = r;
            }
            select_default2(this).attr("r", r).attr("visibility", i2 && klass === "fill" ? "hidden" : null);
          });
        });
      }
      vertices.sort(sortY);
      var groups = selection2.selectAll("g.vertex").filter(filter2).data(vertices, fastEntityKey);
      groups.exit().remove();
      var enter = groups.enter().append("g").attr("class", function(d) {
        return "node vertex " + d.id;
      }).order();
      enter.append("circle").attr("class", "shadow");
      enter.append("circle").attr("class", "stroke");
      enter.filter(function(d) {
        return d.hasInterestingTags();
      }).append("circle").attr("class", "fill");
      groups = groups.merge(enter).attr("transform", svgPointTransform(projection2)).classed("sibling", function(d) {
        return d.id in sets2.selected;
      }).classed("shared", function(d) {
        return graph3.isShared(d);
      }).classed("endpoint", function(d) {
        return d.isEndpoint(graph3);
      }).classed("added", function(d) {
        return !base2.entities[d.id];
      }).classed("moved", function(d) {
        return base2.entities[d.id] && !(0, import_fast_deep_equal8.default)(graph3.entities[d.id].loc, base2.entities[d.id].loc);
      }).classed("retagged", function(d) {
        return base2.entities[d.id] && !(0, import_fast_deep_equal8.default)(graph3.entities[d.id].tags, base2.entities[d.id].tags);
      }).call(updateAttributes);
      var iconUse = groups.selectAll(".icon").data(function data2(d) {
        return zoom >= 17 && getIcon3(d) ? [d] : [];
      }, fastEntityKey);
      iconUse.exit().remove();
      iconUse.enter().append("use").attr("class", "icon").attr("width", "11px").attr("height", "11px").attr("transform", "translate(-5.5, -5.5)").attr("xlink:href", function(d) {
        var picon = getIcon3(d);
        var isMaki = /^maki-/.test(picon);
        return "#" + picon + (isMaki ? "-11" : "");
      });
      var dgroups = groups.selectAll(".viewfieldgroup").data(function data2(d) {
        return zoom >= 18 && getDirections(d) ? [d] : [];
      }, fastEntityKey);
      dgroups.exit().remove();
      dgroups = dgroups.enter().insert("g", ".shadow").attr("class", "viewfieldgroup").merge(dgroups);
      var viewfields = dgroups.selectAll(".viewfield").data(getDirections, function key(d) {
        return osmEntity.key(d);
      });
      viewfields.exit().remove();
      viewfields.enter().append("path").attr("class", "viewfield").attr("d", "M0,0H0").merge(viewfields).attr("marker-start", "url(#ideditor-viewfield-marker" + (wireframe ? "-wireframe" : "") + ")").attr("transform", function(d) {
        return "rotate(" + d + ")";
      });
    }
    function drawTargets(selection2, graph3, entities, filter2) {
      var targetClass = context.getDebug("target") ? "pink " : "nocolor ";
      var nopeClass = context.getDebug("target") ? "red " : "nocolor ";
      var getTransform = svgPointTransform(projection2).geojson;
      var activeID = context.activeID();
      var data2 = {
        targets: [],
        nopes: []
      };
      entities.forEach(function(node) {
        if (activeID === node.id)
          return;
        var vertexType = svgPassiveVertex(node, graph3, activeID);
        if (vertexType !== 0) {
          data2.targets.push({
            type: "Feature",
            id: node.id,
            properties: {
              target: true,
              entity: node
            },
            geometry: node.asGeoJSON()
          });
        } else {
          data2.nopes.push({
            type: "Feature",
            id: node.id + "-nope",
            properties: {
              nope: true,
              target: true,
              entity: node
            },
            geometry: node.asGeoJSON()
          });
        }
      });
      var targets = selection2.selectAll(".vertex.target-allowed").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(data2.targets, function key(d) {
        return d.id;
      });
      targets.exit().remove();
      targets.enter().append("circle").attr("r", function(d) {
        return _radii[d.id] || radiuses.shadow[3];
      }).merge(targets).attr("class", function(d) {
        return "node vertex target target-allowed " + targetClass + d.id;
      }).attr("transform", getTransform);
      var nopes = selection2.selectAll(".vertex.target-nope").filter(function(d) {
        return filter2(d.properties.entity);
      }).data(data2.nopes, function key(d) {
        return d.id;
      });
      nopes.exit().remove();
      nopes.enter().append("circle").attr("r", function(d) {
        return _radii[d.properties.entity.id] || radiuses.shadow[3];
      }).merge(nopes).attr("class", function(d) {
        return "node vertex target target-nope " + nopeClass + d.id;
      }).attr("transform", getTransform);
    }
    function renderAsVertex(entity2, graph3, wireframe, zoom) {
      var geometry6 = entity2.geometry(graph3);
      return geometry6 === "vertex" || geometry6 === "point" && (wireframe || zoom >= 18 && entity2.directions(graph3, projection2).length);
    }
    function isEditedNode(node, base2, head) {
      var baseNode = base2.entities[node.id];
      var headNode = head.entities[node.id];
      return !headNode || !baseNode || !(0, import_fast_deep_equal8.default)(headNode.tags, baseNode.tags) || !(0, import_fast_deep_equal8.default)(headNode.loc, baseNode.loc);
    }
    function getSiblingAndChildVertices(ids, graph3, wireframe, zoom) {
      var results = {};
      var seenIds = {};
      function addChildVertices(entity2) {
        if (seenIds[entity2.id])
          return;
        seenIds[entity2.id] = true;
        var geometry6 = entity2.geometry(graph3);
        if (!context.features().isHiddenFeature(entity2, graph3, geometry6)) {
          var i2;
          if (entity2.type === "way") {
            for (i2 = 0; i2 < entity2.nodes.length; i2++) {
              var child = graph3.hasEntity(entity2.nodes[i2]);
              if (child) {
                addChildVertices(child);
              }
            }
          } else if (entity2.type === "relation") {
            for (i2 = 0; i2 < entity2.members.length; i2++) {
              var member = graph3.hasEntity(entity2.members[i2].id);
              if (member) {
                addChildVertices(member);
              }
            }
          } else if (renderAsVertex(entity2, graph3, wireframe, zoom)) {
            results[entity2.id] = entity2;
          }
        }
      }
      ids.forEach(function(id2) {
        var entity2 = graph3.hasEntity(id2);
        if (!entity2)
          return;
        if (entity2.type === "node") {
          if (renderAsVertex(entity2, graph3, wireframe, zoom)) {
            results[entity2.id] = entity2;
            graph3.parentWays(entity2).forEach(function(entity3) {
              addChildVertices(entity3);
            });
          }
        } else {
          addChildVertices(entity2);
        }
      });
      return results;
    }
    function drawVertices(selection2, graph3, entities, filter2, extent6, fullRedraw) {
      var wireframe = context.surface().classed("fill-wireframe");
      var visualDiff = context.surface().classed("highlight-edited");
      var zoom = geoScaleToZoom(projection2.scale());
      var mode = context.mode();
      var isMoving = mode && /^(add|draw|drag|move|rotate)/.test(mode.id);
      var base2 = context.history().base();
      var drawLayer = selection2.selectAll(".layer-osm.points .points-group.vertices");
      var touchLayer = selection2.selectAll(".layer-touch.points");
      if (fullRedraw) {
        _currPersistent = {};
        _radii = {};
      }
      for (var i2 = 0; i2 < entities.length; i2++) {
        var entity2 = entities[i2];
        var geometry6 = entity2.geometry(graph3);
        var keep = false;
        if (geometry6 === "point" && renderAsVertex(entity2, graph3, wireframe, zoom)) {
          _currPersistent[entity2.id] = entity2;
          keep = true;
        } else if (geometry6 === "vertex" && (entity2.hasInterestingTags() || entity2.isEndpoint(graph3) || entity2.isConnected(graph3) || visualDiff && isEditedNode(entity2, base2, graph3))) {
          _currPersistent[entity2.id] = entity2;
          keep = true;
        }
        if (!keep && !fullRedraw) {
          delete _currPersistent[entity2.id];
        }
      }
      var sets2 = {
        persistent: _currPersistent,
        selected: _currSelected,
        hovered: _currHover
      };
      var all = Object.assign({}, isMoving ? _currHover : {}, _currSelected, _currPersistent);
      var filterRendered = function filterRendered2(d) {
        return d.id in _currPersistent || d.id in _currSelected || d.id in _currHover || filter2(d);
      };
      drawLayer.call(draw, graph3, currentVisible(all), sets2, filterRendered);
      var filterTouch = function filterTouch2(d) {
        return isMoving ? true : filterRendered(d);
      };
      touchLayer.call(drawTargets, graph3, currentVisible(all), filterTouch);
      function currentVisible(which) {
        return Object.keys(which).map(graph3.hasEntity, graph3).filter(function(entity3) {
          return entity3 && entity3.intersects(extent6, graph3);
        });
      }
    }
    drawVertices.drawSelected = function(selection2, graph3, extent6) {
      var wireframe = context.surface().classed("fill-wireframe");
      var zoom = geoScaleToZoom(projection2.scale());
      _prevSelected = _currSelected || {};
      if (context.map().isInWideSelection()) {
        _currSelected = {};
        context.selectedIDs().forEach(function(id2) {
          var entity2 = graph3.hasEntity(id2);
          if (!entity2)
            return;
          if (entity2.type === "node") {
            if (renderAsVertex(entity2, graph3, wireframe, zoom)) {
              _currSelected[entity2.id] = entity2;
            }
          }
        });
      } else {
        _currSelected = getSiblingAndChildVertices(context.selectedIDs(), graph3, wireframe, zoom);
      }
      var filter2 = function filter3(d) {
        return d.id in _prevSelected;
      };
      drawVertices(selection2, graph3, Object.values(_prevSelected), filter2, extent6, false);
    };
    drawVertices.drawHover = function(selection2, graph3, target, extent6) {
      if (target === _currHoverTarget)
        return;
      var wireframe = context.surface().classed("fill-wireframe");
      var zoom = geoScaleToZoom(projection2.scale());
      _prevHover = _currHover || {};
      _currHoverTarget = target;
      var entity2 = target && target.properties && target.properties.entity;
      if (entity2) {
        _currHover = getSiblingAndChildVertices([entity2.id], graph3, wireframe, zoom);
      } else {
        _currHover = {};
      }
      var filter2 = function filter3(d) {
        return d.id in _prevHover;
      };
      drawVertices(selection2, graph3, Object.values(_prevHover), filter2, extent6, false);
    };
    return drawVertices;
  }

  // modules/util/bind_once.js
  function utilBindOnce(target, type3, listener, capture) {
    var typeOnce = type3 + ".once";
    function one2() {
      target.on(typeOnce, null);
      listener.apply(this, arguments);
    }
    target.on(typeOnce, one2, capture);
    return this;
  }

  // modules/util/zoom_pan.js
  function defaultFilter3(d3_event) {
    return !d3_event.ctrlKey && !d3_event.button;
  }
  function defaultExtent2() {
    var e3 = this;
    if (e3 instanceof SVGElement) {
      e3 = e3.ownerSVGElement || e3;
      if (e3.hasAttribute("viewBox")) {
        e3 = e3.viewBox.baseVal;
        return [[e3.x, e3.y], [e3.x + e3.width, e3.y + e3.height]];
      }
      return [[0, 0], [e3.width.baseVal.value, e3.height.baseVal.value]];
    }
    return [[0, 0], [e3.clientWidth, e3.clientHeight]];
  }
  function defaultWheelDelta2(d3_event) {
    return -d3_event.deltaY * (d3_event.deltaMode === 1 ? 0.05 : d3_event.deltaMode ? 1 : 2e-3);
  }
  function defaultConstrain2(transform2, extent6, translateExtent) {
    var dx0 = transform2.invertX(extent6[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent6[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent6[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent6[1][1]) - translateExtent[1][1];
    return transform2.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
  }
  function utilZoomPan() {
    var filter2 = defaultFilter3, extent6 = defaultExtent2, constrain = defaultConstrain2, wheelDelta = defaultWheelDelta2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], interpolate = zoom_default, dispatch12 = dispatch_default("start", "zoom", "end"), _wheelDelay = 150, _transform = identity2, _activeGesture;
    function zoom(selection2) {
      selection2.on("pointerdown.zoom", pointerdown).on("wheel.zoom", wheeled).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      select_default2(window).on("pointermove.zoompan", pointermove).on("pointerup.zoompan pointercancel.zoompan", pointerup);
    }
    zoom.transform = function(collection, transform2, point5) {
      var selection2 = collection.selection ? collection.selection() : collection;
      if (collection !== selection2) {
        schedule(collection, transform2, point5);
      } else {
        selection2.interrupt().each(function() {
          gesture(this, arguments).start(null).zoom(null, null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end(null);
        });
      }
    };
    zoom.scaleBy = function(selection2, k, p2) {
      zoom.scaleTo(selection2, function() {
        var k0 = _transform.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return k0 * k1;
      }, p2);
    };
    zoom.scaleTo = function(selection2, k, p2) {
      zoom.transform(selection2, function() {
        var e3 = extent6.apply(this, arguments), t0 = _transform, p02 = !p2 ? centroid(e3) : typeof p2 === "function" ? p2.apply(this, arguments) : p2, p1 = t0.invert(p02), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return constrain(translate2(scale2(t0, k1), p02, p1), e3, translateExtent);
      }, p2);
    };
    zoom.translateBy = function(selection2, x2, y) {
      zoom.transform(selection2, function() {
        return constrain(_transform.translate(typeof x2 === "function" ? x2.apply(this, arguments) : x2, typeof y === "function" ? y.apply(this, arguments) : y), extent6.apply(this, arguments), translateExtent);
      });
    };
    zoom.translateTo = function(selection2, x2, y, p2) {
      zoom.transform(selection2, function() {
        var e3 = extent6.apply(this, arguments), t = _transform, p02 = !p2 ? centroid(e3) : typeof p2 === "function" ? p2.apply(this, arguments) : p2;
        return constrain(identity2.translate(p02[0], p02[1]).scale(t.k).translate(typeof x2 === "function" ? -x2.apply(this, arguments) : -x2, typeof y === "function" ? -y.apply(this, arguments) : -y), e3, translateExtent);
      }, p2);
    };
    function scale2(transform2, k) {
      k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
      return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
    }
    function translate2(transform2, p02, p1) {
      var x2 = p02[0] - p1[0] * transform2.k, y = p02[1] - p1[1] * transform2.k;
      return x2 === transform2.x && y === transform2.y ? transform2 : new Transform(transform2.k, x2, y);
    }
    function centroid(extent7) {
      return [(+extent7[0][0] + +extent7[1][0]) / 2, (+extent7[0][1] + +extent7[1][1]) / 2];
    }
    function schedule(transition2, transform2, point5) {
      transition2.on("start.zoom", function() {
        gesture(this, arguments).start(null);
      }).on("interrupt.zoom end.zoom", function() {
        gesture(this, arguments).end(null);
      }).tween("zoom", function() {
        var that = this, args = arguments, g2 = gesture(that, args), e3 = extent6.apply(that, args), p2 = !point5 ? centroid(e3) : typeof point5 === "function" ? point5.apply(that, args) : point5, w = Math.max(e3[1][0] - e3[0][0], e3[1][1] - e3[0][1]), a = _transform, b2 = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i2 = interpolate(a.invert(p2).concat(w / a.k), b2.invert(p2).concat(w / b2.k));
        return function(t) {
          if (t === 1) {
            t = b2;
          } else {
            var l = i2(t);
            var k = w / l[2];
            t = new Transform(k, p2[0] - l[0] * k, p2[1] - l[1] * k);
          }
          g2.zoom(null, null, t);
        };
      });
    }
    function gesture(that, args, clean2) {
      return !clean2 && _activeGesture || new Gesture(that, args);
    }
    function Gesture(that, args) {
      this.that = that;
      this.args = args;
      this.active = 0;
      this.extent = extent6.apply(that, args);
    }
    Gesture.prototype = {
      start: function start2(d3_event) {
        if (++this.active === 1) {
          _activeGesture = this;
          dispatch12.call("start", this, d3_event);
        }
        return this;
      },
      zoom: function zoom2(d3_event, key, transform2) {
        if (this.mouse && key !== "mouse")
          this.mouse[1] = transform2.invert(this.mouse[0]);
        if (this.pointer0 && key !== "touch")
          this.pointer0[1] = transform2.invert(this.pointer0[0]);
        if (this.pointer1 && key !== "touch")
          this.pointer1[1] = transform2.invert(this.pointer1[0]);
        _transform = transform2;
        dispatch12.call("zoom", this, d3_event, key, transform2);
        return this;
      },
      end: function end(d3_event) {
        if (--this.active === 0) {
          _activeGesture = null;
          dispatch12.call("end", this, d3_event);
        }
        return this;
      }
    };
    function wheeled(d3_event) {
      if (!filter2.apply(this, arguments))
        return;
      var g2 = gesture(this, arguments), t = _transform, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p2 = utilFastMouse(this)(d3_event);
      if (g2.wheel) {
        if (g2.mouse[0][0] !== p2[0] || g2.mouse[0][1] !== p2[1]) {
          g2.mouse[1] = t.invert(g2.mouse[0] = p2);
        }
        clearTimeout(g2.wheel);
      } else {
        g2.mouse = [p2, t.invert(p2)];
        interrupt_default(this);
        g2.start(d3_event);
      }
      d3_event.preventDefault();
      d3_event.stopImmediatePropagation();
      g2.wheel = setTimeout(wheelidled, _wheelDelay);
      g2.zoom(d3_event, "mouse", constrain(translate2(scale2(t, k), g2.mouse[0], g2.mouse[1]), g2.extent, translateExtent));
      function wheelidled() {
        g2.wheel = null;
        g2.end(d3_event);
      }
    }
    var _downPointerIDs = new Set();
    var _pointerLocGetter;
    function pointerdown(d3_event) {
      _downPointerIDs.add(d3_event.pointerId);
      if (!filter2.apply(this, arguments))
        return;
      var g2 = gesture(this, arguments, _downPointerIDs.size === 1);
      var started;
      d3_event.stopImmediatePropagation();
      _pointerLocGetter = utilFastMouse(this);
      var loc = _pointerLocGetter(d3_event);
      var p2 = [loc, _transform.invert(loc), d3_event.pointerId];
      if (!g2.pointer0) {
        g2.pointer0 = p2;
        started = true;
      } else if (!g2.pointer1 && g2.pointer0[2] !== p2[2]) {
        g2.pointer1 = p2;
      }
      if (started) {
        interrupt_default(this);
        g2.start(d3_event);
      }
    }
    function pointermove(d3_event) {
      if (!_downPointerIDs.has(d3_event.pointerId))
        return;
      if (!_activeGesture || !_pointerLocGetter)
        return;
      var g2 = gesture(this, arguments);
      var isPointer0 = g2.pointer0 && g2.pointer0[2] === d3_event.pointerId;
      var isPointer1 = !isPointer0 && g2.pointer1 && g2.pointer1[2] === d3_event.pointerId;
      if ((isPointer0 || isPointer1) && "buttons" in d3_event && !d3_event.buttons) {
        if (g2.pointer0)
          _downPointerIDs.delete(g2.pointer0[2]);
        if (g2.pointer1)
          _downPointerIDs.delete(g2.pointer1[2]);
        g2.end(d3_event);
        return;
      }
      d3_event.preventDefault();
      d3_event.stopImmediatePropagation();
      var loc = _pointerLocGetter(d3_event);
      var t, p2, l;
      if (isPointer0)
        g2.pointer0[0] = loc;
      else if (isPointer1)
        g2.pointer1[0] = loc;
      t = _transform;
      if (g2.pointer1) {
        var p02 = g2.pointer0[0], l0 = g2.pointer0[1], p1 = g2.pointer1[0], l1 = g2.pointer1[1], dp = (dp = p1[0] - p02[0]) * dp + (dp = p1[1] - p02[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t = scale2(t, Math.sqrt(dp / dl));
        p2 = [(p02[0] + p1[0]) / 2, (p02[1] + p1[1]) / 2];
        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
      } else if (g2.pointer0) {
        p2 = g2.pointer0[0];
        l = g2.pointer0[1];
      } else {
        return;
      }
      g2.zoom(d3_event, "touch", constrain(translate2(t, p2, l), g2.extent, translateExtent));
    }
    function pointerup(d3_event) {
      if (!_downPointerIDs.has(d3_event.pointerId))
        return;
      _downPointerIDs.delete(d3_event.pointerId);
      if (!_activeGesture)
        return;
      var g2 = gesture(this, arguments);
      d3_event.stopImmediatePropagation();
      if (g2.pointer0 && g2.pointer0[2] === d3_event.pointerId)
        delete g2.pointer0;
      else if (g2.pointer1 && g2.pointer1[2] === d3_event.pointerId)
        delete g2.pointer1;
      if (g2.pointer1 && !g2.pointer0) {
        g2.pointer0 = g2.pointer1;
        delete g2.pointer1;
      }
      if (g2.pointer0) {
        g2.pointer0[1] = _transform.invert(g2.pointer0[0]);
      } else {
        g2.end(d3_event);
      }
    }
    zoom.wheelDelta = function(_2) {
      return arguments.length ? (wheelDelta = utilFunctor(+_2), zoom) : wheelDelta;
    };
    zoom.filter = function(_2) {
      return arguments.length ? (filter2 = utilFunctor(!!_2), zoom) : filter2;
    };
    zoom.extent = function(_2) {
      return arguments.length ? (extent6 = utilFunctor([[+_2[0][0], +_2[0][1]], [+_2[1][0], +_2[1][1]]]), zoom) : extent6;
    };
    zoom.scaleExtent = function(_2) {
      return arguments.length ? (scaleExtent[0] = +_2[0], scaleExtent[1] = +_2[1], zoom) : [scaleExtent[0], scaleExtent[1]];
    };
    zoom.translateExtent = function(_2) {
      return arguments.length ? (translateExtent[0][0] = +_2[0][0], translateExtent[1][0] = +_2[1][0], translateExtent[0][1] = +_2[0][1], translateExtent[1][1] = +_2[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
    };
    zoom.constrain = function(_2) {
      return arguments.length ? (constrain = _2, zoom) : constrain;
    };
    zoom.interpolate = function(_2) {
      return arguments.length ? (interpolate = _2, zoom) : interpolate;
    };
    zoom._transform = function(_2) {
      return arguments.length ? (_transform = _2, zoom) : _transform;
    };
    return utilRebind(zoom, dispatch12, "on");
  }

  // modules/util/double_up.js
  function utilDoubleUp() {
    var dispatch12 = dispatch_default("doubleUp");
    var _maxTimespan = 500;
    var _maxDistance = 20;
    var _pointer;
    function pointerIsValidFor(loc) {
      return new Date().getTime() - _pointer.startTime <= _maxTimespan && vecLength(_pointer.startLoc, loc) <= _maxDistance;
    }
    function pointerdown(d3_event) {
      if (d3_event.ctrlKey || d3_event.button === 2)
        return;
      var loc = [d3_event.clientX, d3_event.clientY];
      if (_pointer && !pointerIsValidFor(loc)) {
        _pointer = void 0;
      }
      if (!_pointer) {
        _pointer = {
          startLoc: loc,
          startTime: new Date().getTime(),
          upCount: 0,
          pointerId: d3_event.pointerId
        };
      } else {
        _pointer.pointerId = d3_event.pointerId;
      }
    }
    function pointerup(d3_event) {
      if (d3_event.ctrlKey || d3_event.button === 2)
        return;
      if (!_pointer || _pointer.pointerId !== d3_event.pointerId)
        return;
      _pointer.upCount += 1;
      if (_pointer.upCount === 2) {
        var loc = [d3_event.clientX, d3_event.clientY];
        if (pointerIsValidFor(loc)) {
          var locInThis = utilFastMouse(this)(d3_event);
          dispatch12.call("doubleUp", this, d3_event, locInThis);
        }
        _pointer = void 0;
      }
    }
    function doubleUp(selection2) {
      if ("PointerEvent" in window) {
        selection2.on("pointerdown.doubleUp", pointerdown).on("pointerup.doubleUp", pointerup);
      } else {
        selection2.on("dblclick.doubleUp", function(d3_event) {
          dispatch12.call("doubleUp", this, d3_event, utilFastMouse(this)(d3_event));
        });
      }
    }
    doubleUp.off = function(selection2) {
      selection2.on("pointerdown.doubleUp", null).on("pointerup.doubleUp", null).on("dblclick.doubleUp", null);
    };
    return utilRebind(doubleUp, dispatch12, "on");
  }

  // modules/renderer/map.js
  var TILESIZE = 256;
  var minZoom = 2;
  var maxZoom = 24;
  var kMin = geoZoomToScale(minZoom, TILESIZE);
  var kMax = geoZoomToScale(maxZoom, TILESIZE);
  function clamp2(num, min2, max2) {
    return Math.max(min2, Math.min(num, max2));
  }
  function rendererMap(context) {
    var dispatch12 = dispatch_default("move", "drawn", "crossEditableZoom", "hitMinZoom", "changeHighlighting", "changeAreaFill");
    var projection2 = context.projection;
    var curtainProjection = context.curtainProjection;
    var drawLayers;
    var drawPoints;
    var drawVertices;
    var drawLines;
    var drawAreas;
    var drawMidpoints;
    var drawLabels;
    var _selection = select_default2(null);
    var supersurface = select_default2(null);
    var wrapper = select_default2(null);
    var surface = select_default2(null);
    var _dimensions = [1, 1];
    var _dblClickZoomEnabled = true;
    var _redrawEnabled = true;
    var _gestureTransformStart;
    var _transformStart = projection2.transform();
    var _transformLast;
    var _isTransformed = false;
    var _minzoom = 0;
    var _getMouseCoords;
    var _lastPointerEvent;
    var _lastWithinEditableZoom;
    var _pointerDown = false;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    var _zoomerPannerFunction = "PointerEvent" in window ? utilZoomPan : zoom_default2;
    var _zoomerPanner = _zoomerPannerFunction().scaleExtent([kMin, kMax]).interpolate(value_default).filter(zoomEventFilter).on("zoom.map", zoomPan).on("start.map", function(d3_event) {
      _pointerDown = d3_event && (d3_event.type === "pointerdown" || d3_event.sourceEvent && d3_event.sourceEvent.type === "pointerdown");
    }).on("end.map", function() {
      _pointerDown = false;
    });
    var _doubleUpHandler = utilDoubleUp();
    var scheduleRedraw = throttle_default(redraw, 750);
    function cancelPendingRedraw() {
      scheduleRedraw.cancel();
    }
    function map2(selection2) {
      _selection = selection2;
      context.on("change.map", immediateRedraw);
      var osm = context.connection();
      if (osm) {
        osm.on("change.map", immediateRedraw);
      }
      function didUndoOrRedo(targetTransform) {
        var mode = context.mode().id;
        if (mode !== "browse" && mode !== "select")
          return;
        if (targetTransform) {
          map2.transformEase(targetTransform);
        }
      }
      context.history().on("merge.map", function() {
        scheduleRedraw();
      }).on("change.map", immediateRedraw).on("undone.map", function(stack, fromStack) {
        didUndoOrRedo(fromStack.transform);
      }).on("redone.map", function(stack) {
        didUndoOrRedo(stack.transform);
      });
      context.background().on("change.map", immediateRedraw);
      context.features().on("redraw.map", immediateRedraw);
      drawLayers.on("change.map", function() {
        context.background().updateImagery();
        immediateRedraw();
      });
      selection2.on("wheel.map mousewheel.map", function(d3_event) {
        d3_event.preventDefault();
      }).call(_zoomerPanner).call(_zoomerPanner.transform, projection2.transform()).on("dblclick.zoom", null);
      map2.supersurface = supersurface = selection2.append("div").attr("class", "supersurface").call(utilSetTransform, 0, 0);
      wrapper = supersurface.append("div").attr("class", "layer layer-data");
      map2.surface = surface = wrapper.call(drawLayers).selectAll(".surface");
      surface.classed("highlight-edited", true);
      surface.call(drawLabels.observe).call(_doubleUpHandler).on(_pointerPrefix + "down.zoom", function(d3_event) {
        _lastPointerEvent = d3_event;
        if (d3_event.button === 2) {
          d3_event.stopPropagation();
        }
      }, true).on(_pointerPrefix + "up.zoom", function(d3_event) {
        _lastPointerEvent = d3_event;
        if (resetTransform()) {
          immediateRedraw();
        }
      }).on(_pointerPrefix + "move.map", function(d3_event) {
        _lastPointerEvent = d3_event;
      }).on(_pointerPrefix + "over.vertices", function(d3_event) {
        if (map2.editableDataEnabled() && !_isTransformed) {
          var hover = d3_event.target.__data__;
          surface.call(drawVertices.drawHover, context.graph(), hover, map2.extent());
          dispatch12.call("drawn", this, {
            full: false
          });
        }
      }).on(_pointerPrefix + "out.vertices", function(d3_event) {
        if (map2.editableDataEnabled() && !_isTransformed) {
          var hover = d3_event.relatedTarget && d3_event.relatedTarget.__data__;
          surface.call(drawVertices.drawHover, context.graph(), hover, map2.extent());
          dispatch12.call("drawn", this, {
            full: false
          });
        }
      });
      var detected = utilDetect();
      if ("GestureEvent" in window && !detected.isMobileWebKit) {
        surface.on("gesturestart.surface", function(d3_event) {
          d3_event.preventDefault();
          _gestureTransformStart = projection2.transform();
        }).on("gesturechange.surface", gestureChange);
      }
      updateAreaFill();
      _doubleUpHandler.on("doubleUp.map", function(d3_event, p02) {
        if (!_dblClickZoomEnabled)
          return;
        if (_typeof(d3_event.target.__data__) === "object" && !select_default2(d3_event.target).classed("fill"))
          return;
        var zoomOut2 = d3_event.shiftKey;
        var t = projection2.transform();
        var p1 = t.invert(p02);
        t = t.scale(zoomOut2 ? 0.5 : 2);
        t.x = p02[0] - p1[0] * t.k;
        t.y = p02[1] - p1[1] * t.k;
        map2.transformEase(t);
      });
      context.on("enter.map", function() {
        if (!map2.editableDataEnabled(true))
          return;
        if (_isTransformed)
          return;
        var graph3 = context.graph();
        var selectedAndParents = {};
        context.selectedIDs().forEach(function(id2) {
          var entity2 = graph3.hasEntity(id2);
          if (entity2) {
            selectedAndParents[entity2.id] = entity2;
            if (entity2.type === "node") {
              graph3.parentWays(entity2).forEach(function(parent2) {
                selectedAndParents[parent2.id] = parent2;
              });
            }
          }
        });
        var data2 = Object.values(selectedAndParents);
        var filter2 = function filter3(d) {
          return d.id in selectedAndParents;
        };
        data2 = context.features().filter(data2, graph3);
        surface.call(drawVertices.drawSelected, graph3, map2.extent()).call(drawLines, graph3, data2, filter2).call(drawAreas, graph3, data2, filter2).call(drawMidpoints, graph3, data2, filter2, map2.trimmedExtent());
        dispatch12.call("drawn", this, {
          full: false
        });
        scheduleRedraw();
      });
      map2.dimensions(utilGetDimensions(selection2));
    }
    function zoomEventFilter(d3_event) {
      if (d3_event.type === "mousedown") {
        var hasOrphan = false;
        var listeners = window.__on;
        for (var i2 = 0; i2 < listeners.length; i2++) {
          var listener = listeners[i2];
          if (listener.name === "zoom" && listener.type === "mouseup") {
            hasOrphan = true;
            break;
          }
        }
        if (hasOrphan) {
          var event = window.CustomEvent;
          if (event) {
            event = new event("mouseup");
          } else {
            event = window.document.createEvent("Event");
            event.initEvent("mouseup", false, false);
          }
          event.view = window;
          window.dispatchEvent(event);
        }
      }
      return d3_event.button !== 2;
    }
    function pxCenter() {
      return [_dimensions[0] / 2, _dimensions[1] / 2];
    }
    function drawEditable(difference, extent6) {
      var mode = context.mode();
      var graph3 = context.graph();
      var features2 = context.features();
      var all = context.history().intersects(map2.extent());
      var fullRedraw = false;
      var data2;
      var set3;
      var filter2;
      var applyFeatureLayerFilters = true;
      if (map2.isInWideSelection()) {
        data2 = [];
        utilEntityAndDeepMemberIDs(mode.selectedIDs(), context.graph()).forEach(function(id2) {
          var entity2 = context.hasEntity(id2);
          if (entity2)
            data2.push(entity2);
        });
        fullRedraw = true;
        filter2 = utilFunctor(true);
        applyFeatureLayerFilters = false;
      } else if (difference) {
        var complete = difference.complete(map2.extent());
        data2 = Object.values(complete).filter(Boolean);
        set3 = new Set(Object.keys(complete));
        filter2 = function filter3(d) {
          return set3.has(d.id);
        };
        features2.clear(data2);
      } else {
        if (features2.gatherStats(all, graph3, _dimensions)) {
          extent6 = void 0;
        }
        if (extent6) {
          data2 = context.history().intersects(map2.extent().intersection(extent6));
          set3 = new Set(data2.map(function(entity2) {
            return entity2.id;
          }));
          filter2 = function filter3(d) {
            return set3.has(d.id);
          };
        } else {
          data2 = all;
          fullRedraw = true;
          filter2 = utilFunctor(true);
        }
      }
      if (applyFeatureLayerFilters) {
        data2 = features2.filter(data2, graph3);
      } else {
        context.features().resetStats();
      }
      if (mode && mode.id === "select") {
        surface.call(drawVertices.drawSelected, graph3, map2.extent());
      }
      surface.call(drawVertices, graph3, data2, filter2, map2.extent(), fullRedraw).call(drawLines, graph3, data2, filter2).call(drawAreas, graph3, data2, filter2).call(drawMidpoints, graph3, data2, filter2, map2.trimmedExtent()).call(drawLabels, graph3, data2, filter2, _dimensions, fullRedraw).call(drawPoints, graph3, data2, filter2);
      dispatch12.call("drawn", this, {
        full: true
      });
    }
    map2.init = function() {
      drawLayers = svgLayers(projection2, context);
      drawPoints = svgPoints(projection2, context);
      drawVertices = svgVertices(projection2, context);
      drawLines = svgLines(projection2, context);
      drawAreas = svgAreas(projection2, context);
      drawMidpoints = svgMidpoints(projection2, context);
      drawLabels = svgLabels(projection2, context);
    };
    function editOff() {
      context.features().resetStats();
      surface.selectAll(".layer-osm *").remove();
      surface.selectAll(".layer-touch:not(.markers) *").remove();
      var allowed = {
        "browse": true,
        "save": true,
        "select-note": true,
        "select-data": true,
        "select-error": true
      };
      var mode = context.mode();
      if (mode && !allowed[mode.id]) {
        context.enter(modeBrowse(context));
      }
      dispatch12.call("drawn", this, {
        full: true
      });
    }
    function gestureChange(d3_event) {
      var e3 = d3_event;
      e3.preventDefault();
      var props = {
        deltaMode: 0,
        deltaY: 1,
        clientX: e3.clientX,
        clientY: e3.clientY,
        screenX: e3.screenX,
        screenY: e3.screenY,
        x: e3.x,
        y: e3.y
      };
      var e22 = new WheelEvent("wheel", props);
      e22._scale = e3.scale;
      e22._rotation = e3.rotation;
      _selection.node().dispatchEvent(e22);
    }
    function zoomPan(event, key, transform2) {
      var source = event && event.sourceEvent || event;
      var eventTransform = transform2 || event && event.transform;
      var x2 = eventTransform.x;
      var y = eventTransform.y;
      var k = eventTransform.k;
      if (source && source.type === "wheel") {
        if (_pointerDown)
          return;
        var detected = utilDetect();
        var dX = source.deltaX;
        var dY = source.deltaY;
        var x22 = x2;
        var y2 = y;
        var k2 = k;
        var t0, p02, p1;
        if (source.deltaMode === 1) {
          var lines = Math.abs(source.deltaY);
          var sign2 = source.deltaY > 0 ? 1 : -1;
          dY = sign2 * clamp2(Math.exp((lines - 1) * 0.75) * 4.000244140625, 4.000244140625, 350.000244140625);
          if (detected.os !== "mac") {
            dY *= 5;
          }
          t0 = _isTransformed ? _transformLast : _transformStart;
          p02 = _getMouseCoords(source);
          p1 = t0.invert(p02);
          k2 = t0.k * Math.pow(2, -dY / 500);
          k2 = clamp2(k2, kMin, kMax);
          x22 = p02[0] - p1[0] * k2;
          y2 = p02[1] - p1[1] * k2;
        } else if (source._scale) {
          t0 = _gestureTransformStart;
          p02 = _getMouseCoords(source);
          p1 = t0.invert(p02);
          k2 = t0.k * source._scale;
          k2 = clamp2(k2, kMin, kMax);
          x22 = p02[0] - p1[0] * k2;
          y2 = p02[1] - p1[1] * k2;
        } else if (source.ctrlKey && !isInteger(dY)) {
          dY *= 6;
          t0 = _isTransformed ? _transformLast : _transformStart;
          p02 = _getMouseCoords(source);
          p1 = t0.invert(p02);
          k2 = t0.k * Math.pow(2, -dY / 500);
          k2 = clamp2(k2, kMin, kMax);
          x22 = p02[0] - p1[0] * k2;
          y2 = p02[1] - p1[1] * k2;
        } else if ((source.altKey || source.shiftKey) && isInteger(dY)) {
          t0 = _isTransformed ? _transformLast : _transformStart;
          p02 = _getMouseCoords(source);
          p1 = t0.invert(p02);
          k2 = t0.k * Math.pow(2, -dY / 500);
          k2 = clamp2(k2, kMin, kMax);
          x22 = p02[0] - p1[0] * k2;
          y2 = p02[1] - p1[1] * k2;
        } else if (detected.os === "mac" && detected.browser !== "Firefox" && !source.ctrlKey && isInteger(dX) && isInteger(dY)) {
          p1 = projection2.translate();
          x22 = p1[0] - dX;
          y2 = p1[1] - dY;
          k2 = projection2.scale();
          k2 = clamp2(k2, kMin, kMax);
        }
        if (x22 !== x2 || y2 !== y || k2 !== k) {
          x2 = x22;
          y = y2;
          k = k2;
          eventTransform = identity2.translate(x22, y2).scale(k2);
          if (_zoomerPanner._transform) {
            _zoomerPanner._transform(eventTransform);
          } else {
            _selection.node().__zoom = eventTransform;
          }
        }
      }
      if (_transformStart.x === x2 && _transformStart.y === y && _transformStart.k === k) {
        return;
      }
      if (geoScaleToZoom(k, TILESIZE) < _minzoom) {
        surface.interrupt();
        dispatch12.call("hitMinZoom", this, map2);
        setCenterZoom(map2.center(), context.minEditableZoom(), 0, true);
        scheduleRedraw();
        dispatch12.call("move", this, map2);
        return;
      }
      projection2.transform(eventTransform);
      var withinEditableZoom = map2.withinEditableZoom();
      if (_lastWithinEditableZoom !== withinEditableZoom) {
        if (_lastWithinEditableZoom !== void 0) {
          dispatch12.call("crossEditableZoom", this, withinEditableZoom);
        }
        _lastWithinEditableZoom = withinEditableZoom;
      }
      var scale2 = k / _transformStart.k;
      var tX = (x2 / scale2 - _transformStart.x) * scale2;
      var tY = (y / scale2 - _transformStart.y) * scale2;
      if (context.inIntro()) {
        curtainProjection.transform({
          x: x2 - tX,
          y: y - tY,
          k: k
        });
      }
      if (source) {
        _lastPointerEvent = event;
      }
      _isTransformed = true;
      _transformLast = eventTransform;
      utilSetTransform(supersurface, tX, tY, scale2);
      scheduleRedraw();
      dispatch12.call("move", this, map2);
      function isInteger(val) {
        return typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      }
    }
    function resetTransform() {
      if (!_isTransformed)
        return false;
      utilSetTransform(supersurface, 0, 0);
      _isTransformed = false;
      if (context.inIntro()) {
        curtainProjection.transform(projection2.transform());
      }
      return true;
    }
    function redraw(difference, extent6) {
      if (surface.empty() || !_redrawEnabled)
        return;
      if (resetTransform()) {
        difference = extent6 = void 0;
      }
      var zoom = map2.zoom();
      var z = String(~~zoom);
      if (surface.attr("data-zoom") !== z) {
        surface.attr("data-zoom", z);
      }
      var lat = map2.center()[1];
      var lowzoom = linear4().domain([-60, 0, 60]).range([17, 18.5, 17]).clamp(true);
      surface.classed("low-zoom", zoom <= lowzoom(lat));
      if (!difference) {
        supersurface.call(context.background());
        wrapper.call(drawLayers);
      }
      if (map2.editableDataEnabled() || map2.isInWideSelection()) {
        context.loadTiles(projection2);
        drawEditable(difference, extent6);
      } else {
        editOff();
      }
      _transformStart = projection2.transform();
      return map2;
    }
    var immediateRedraw = function immediateRedraw2(difference, extent6) {
      if (!difference && !extent6)
        cancelPendingRedraw();
      redraw(difference, extent6);
    };
    map2.lastPointerEvent = function() {
      return _lastPointerEvent;
    };
    map2.mouse = function(d3_event) {
      var event = d3_event || _lastPointerEvent;
      if (event) {
        var s;
        while (s = event.sourceEvent) {
          event = s;
        }
        return _getMouseCoords(event);
      }
      return null;
    };
    map2.mouseCoordinates = function() {
      var coord = map2.mouse() || pxCenter();
      return projection2.invert(coord);
    };
    map2.dblclickZoomEnable = function(val) {
      if (!arguments.length)
        return _dblClickZoomEnabled;
      _dblClickZoomEnabled = val;
      return map2;
    };
    map2.redrawEnable = function(val) {
      if (!arguments.length)
        return _redrawEnabled;
      _redrawEnabled = val;
      return map2;
    };
    map2.isTransformed = function() {
      return _isTransformed;
    };
    function setTransform(t2, duration, force) {
      var t = projection2.transform();
      if (!force && t2.k === t.k && t2.x === t.x && t2.y === t.y)
        return false;
      if (duration) {
        _selection.transition().duration(duration).on("start", function() {
          map2.startEase();
        }).call(_zoomerPanner.transform, identity2.translate(t2.x, t2.y).scale(t2.k));
      } else {
        projection2.transform(t2);
        _transformStart = t2;
        _selection.call(_zoomerPanner.transform, _transformStart);
      }
      return true;
    }
    function setCenterZoom(loc2, z2, duration, force) {
      var c2 = map2.center();
      var z = map2.zoom();
      if (loc2[0] === c2[0] && loc2[1] === c2[1] && z2 === z && !force)
        return false;
      var proj = geoRawMercator().transform(projection2.transform());
      var k2 = clamp2(geoZoomToScale(z2, TILESIZE), kMin, kMax);
      proj.scale(k2);
      var t = proj.translate();
      var point5 = proj(loc2);
      var center = pxCenter();
      t[0] += center[0] - point5[0];
      t[1] += center[1] - point5[1];
      return setTransform(identity2.translate(t[0], t[1]).scale(k2), duration, force);
    }
    map2.pan = function(delta, duration) {
      var t = projection2.translate();
      var k = projection2.scale();
      t[0] += delta[0];
      t[1] += delta[1];
      if (duration) {
        _selection.transition().duration(duration).on("start", function() {
          map2.startEase();
        }).call(_zoomerPanner.transform, identity2.translate(t[0], t[1]).scale(k));
      } else {
        projection2.translate(t);
        _transformStart = projection2.transform();
        _selection.call(_zoomerPanner.transform, _transformStart);
        dispatch12.call("move", this, map2);
        immediateRedraw();
      }
      return map2;
    };
    map2.dimensions = function(val) {
      if (!arguments.length)
        return _dimensions;
      _dimensions = val;
      drawLayers.dimensions(_dimensions);
      context.background().dimensions(_dimensions);
      projection2.clipExtent([[0, 0], _dimensions]);
      _getMouseCoords = utilFastMouse(supersurface.node());
      scheduleRedraw();
      return map2;
    };
    function zoomIn(delta) {
      setCenterZoom(map2.center(), ~~map2.zoom() + delta, 250, true);
    }
    function zoomOut(delta) {
      setCenterZoom(map2.center(), ~~map2.zoom() - delta, 250, true);
    }
    map2.zoomIn = function() {
      zoomIn(1);
    };
    map2.zoomInFurther = function() {
      zoomIn(4);
    };
    map2.canZoomIn = function() {
      return map2.zoom() < maxZoom;
    };
    map2.zoomOut = function() {
      zoomOut(1);
    };
    map2.zoomOutFurther = function() {
      zoomOut(4);
    };
    map2.canZoomOut = function() {
      return map2.zoom() > minZoom;
    };
    map2.center = function(loc2) {
      if (!arguments.length) {
        return projection2.invert(pxCenter());
      }
      if (setCenterZoom(loc2, map2.zoom())) {
        dispatch12.call("move", this, map2);
      }
      scheduleRedraw();
      return map2;
    };
    map2.unobscuredCenterZoomEase = function(loc, zoom) {
      var offset = map2.unobscuredOffsetPx();
      var proj = geoRawMercator().transform(projection2.transform());
      proj.scale(geoZoomToScale(zoom, TILESIZE));
      var locPx = proj(loc);
      var offsetLocPx = [locPx[0] + offset[0], locPx[1] + offset[1]];
      var offsetLoc = proj.invert(offsetLocPx);
      map2.centerZoomEase(offsetLoc, zoom);
    };
    map2.unobscuredOffsetPx = function() {
      var openPane = context.container().select(".map-panes .map-pane.shown");
      if (!openPane.empty()) {
        return [openPane.node().offsetWidth / 2, 0];
      }
      return [0, 0];
    };
    map2.zoom = function(z2) {
      if (!arguments.length) {
        return Math.max(geoScaleToZoom(projection2.scale(), TILESIZE), 0);
      }
      if (z2 < _minzoom) {
        surface.interrupt();
        dispatch12.call("hitMinZoom", this, map2);
        z2 = context.minEditableZoom();
      }
      if (setCenterZoom(map2.center(), z2)) {
        dispatch12.call("move", this, map2);
      }
      scheduleRedraw();
      return map2;
    };
    map2.centerZoom = function(loc2, z2) {
      if (setCenterZoom(loc2, z2)) {
        dispatch12.call("move", this, map2);
      }
      scheduleRedraw();
      return map2;
    };
    map2.zoomTo = function(entity2) {
      var extent6 = entity2.extent(context.graph());
      if (!isFinite(extent6.area()))
        return map2;
      var z2 = clamp2(map2.trimmedExtentZoom(extent6), 0, 20);
      return map2.centerZoom(extent6.center(), z2);
    };
    map2.centerEase = function(loc2, duration) {
      duration = duration || 250;
      setCenterZoom(loc2, map2.zoom(), duration);
      return map2;
    };
    map2.zoomEase = function(z2, duration) {
      duration = duration || 250;
      setCenterZoom(map2.center(), z2, duration, false);
      return map2;
    };
    map2.centerZoomEase = function(loc2, z2, duration) {
      duration = duration || 250;
      setCenterZoom(loc2, z2, duration, false);
      return map2;
    };
    map2.transformEase = function(t2, duration) {
      duration = duration || 250;
      setTransform(t2, duration, false);
      return map2;
    };
    map2.zoomToEase = function(val, duration) {
      var extent6;
      if (Array.isArray(val)) {
        extent6 = utilTotalExtent(val, context.graph());
      } else {
        extent6 = val.extent(context.graph());
      }
      if (!isFinite(extent6.area()))
        return map2;
      var z2 = clamp2(map2.trimmedExtentZoom(extent6), 0, 20);
      return map2.centerZoomEase(extent6.center(), z2, duration);
    };
    map2.startEase = function() {
      utilBindOnce(surface, _pointerPrefix + "down.ease", function() {
        map2.cancelEase();
      });
      return map2;
    };
    map2.cancelEase = function() {
      _selection.interrupt();
      return map2;
    };
    map2.extent = function(extent6) {
      if (!arguments.length) {
        return new Extent(projection2.invert([0, _dimensions[1]]), projection2.invert([_dimensions[0], 0]));
      } else {
        map2.centerZoom(extent6.center(), map2.extentZoom(extent6));
      }
    };
    map2.trimmedExtent = function(extent6) {
      if (!arguments.length) {
        var headerY = 71;
        var footerY = 30;
        var pad2 = 10;
        return new Extent(projection2.invert([pad2, _dimensions[1] - footerY - pad2]), projection2.invert([_dimensions[0] - pad2, headerY + pad2]));
      } else {
        map2.centerZoom(extent6.center(), map2.trimmedExtentZoom(extent6));
      }
    };
    function calcExtentZoom(extent6, dim) {
      var tl = projection2([extent6.min[0], extent6.max[1]]);
      var br = projection2([extent6.max[0], extent6.min[1]]);
      var hFactor = (br[0] - tl[0]) / dim[0];
      var vFactor = (br[1] - tl[1]) / dim[1];
      var hZoomDiff = Math.log(Math.abs(hFactor)) / Math.LN2;
      var vZoomDiff = Math.log(Math.abs(vFactor)) / Math.LN2;
      var zoomDiff = Math.max(hZoomDiff, vZoomDiff);
      var currZoom = map2.zoom();
      return isFinite(zoomDiff) ? currZoom - zoomDiff : currZoom;
    }
    map2.extentZoom = function(extent6) {
      return calcExtentZoom(extent6, _dimensions);
    };
    map2.trimmedExtentZoom = function(extent6) {
      var trimY = 120;
      var trimX = 40;
      var trimmed = [_dimensions[0] - trimX, _dimensions[1] - trimY];
      return calcExtentZoom(extent6, trimmed);
    };
    map2.withinEditableZoom = function() {
      return map2.zoom() >= context.minEditableZoom();
    };
    map2.isInWideSelection = function() {
      return !map2.withinEditableZoom() && context.selectedIDs().length;
    };
    map2.editableDataEnabled = function(skipZoomCheck) {
      var layer2 = context.layers().layer("osm");
      if (!layer2 || !layer2.enabled())
        return false;
      return skipZoomCheck || map2.withinEditableZoom();
    };
    map2.notesEditable = function() {
      var layer2 = context.layers().layer("notes");
      if (!layer2 || !layer2.enabled())
        return false;
      return map2.withinEditableZoom();
    };
    map2.minzoom = function(val) {
      if (!arguments.length)
        return _minzoom;
      _minzoom = val;
      return map2;
    };
    map2.toggleHighlightEdited = function() {
      surface.classed("highlight-edited", !surface.classed("highlight-edited"));
      map2.pan([0, 0]);
      dispatch12.call("changeHighlighting", this);
    };
    map2.areaFillOptions = ["wireframe", "partial", "full"];
    map2.activeAreaFill = function(val) {
      if (!arguments.length)
        return corePreferences("area-fill") || "partial";
      corePreferences("area-fill", val);
      if (val !== "wireframe") {
        corePreferences("area-fill-toggle", val);
      }
      updateAreaFill();
      map2.pan([0, 0]);
      dispatch12.call("changeAreaFill", this);
      return map2;
    };
    map2.toggleWireframe = function() {
      var activeFill = map2.activeAreaFill();
      if (activeFill === "wireframe") {
        activeFill = corePreferences("area-fill-toggle") || "partial";
      } else {
        activeFill = "wireframe";
      }
      map2.activeAreaFill(activeFill);
    };
    function updateAreaFill() {
      var activeFill = map2.activeAreaFill();
      map2.areaFillOptions.forEach(function(opt) {
        surface.classed("fill-" + opt, Boolean(opt === activeFill));
      });
    }
    map2.layers = function() {
      return drawLayers;
    };
    map2.doubleUpHandler = function() {
      return _doubleUpHandler;
    };
    return utilRebind(map2, dispatch12, "on");
  }

  // modules/renderer/photos.js
  function rendererPhotos(context) {
    var dispatch12 = dispatch_default("change");
    var _layerIDs = ["streetside", "mapillary", "mapillary-map-features", "mapillary-signs", "openstreetcam"];
    var _allPhotoTypes = ["flat", "panoramic"];
    var _shownPhotoTypes = _allPhotoTypes.slice();
    var _dateFilters = ["fromDate", "toDate"];
    var _fromDate;
    var _toDate;
    var _usernames;
    function photos() {
    }
    function updateStorage() {
      if (window.mocha)
        return;
      var hash = utilStringQs(window.location.hash);
      var enabled = context.layers().all().filter(function(d) {
        return _layerIDs.indexOf(d.id) !== -1 && d.layer && d.layer.supported() && d.layer.enabled();
      }).map(function(d) {
        return d.id;
      });
      if (enabled.length) {
        hash.photo_overlay = enabled.join(",");
      } else {
        delete hash.photo_overlay;
      }
      window.location.replace("#" + utilQsString(hash, true));
    }
    photos.overlayLayerIDs = function() {
      return _layerIDs;
    };
    photos.allPhotoTypes = function() {
      return _allPhotoTypes;
    };
    photos.dateFilters = function() {
      return _dateFilters;
    };
    photos.dateFilterValue = function(val) {
      return val === _dateFilters[0] ? _fromDate : _toDate;
    };
    photos.setDateFilter = function(type3, val, updateUrl) {
      var date = val && new Date(val);
      if (date && !isNaN(date)) {
        val = date.toISOString().substr(0, 10);
      } else {
        val = null;
      }
      if (type3 === _dateFilters[0]) {
        _fromDate = val;
        if (_fromDate && _toDate && new Date(_toDate) < new Date(_fromDate)) {
          _toDate = _fromDate;
        }
      }
      if (type3 === _dateFilters[1]) {
        _toDate = val;
        if (_fromDate && _toDate && new Date(_toDate) < new Date(_fromDate)) {
          _fromDate = _toDate;
        }
      }
      dispatch12.call("change", this);
      if (updateUrl) {
        var rangeString;
        if (_fromDate || _toDate) {
          rangeString = (_fromDate || "") + "_" + (_toDate || "");
        }
        setUrlFilterValue("photo_dates", rangeString);
      }
    };
    photos.setUsernameFilter = function(val, updateUrl) {
      if (val && typeof val === "string")
        val = val.replace(/;/g, ",").split(",");
      if (val) {
        val = val.map(function(d) {
          return d.trim();
        }).filter(Boolean);
        if (!val.length) {
          val = null;
        }
      }
      _usernames = val;
      dispatch12.call("change", this);
      if (updateUrl) {
        var hashString;
        if (_usernames) {
          hashString = _usernames.join(",");
        }
        setUrlFilterValue("photo_username", hashString);
      }
    };
    function setUrlFilterValue(property, val) {
      if (!window.mocha) {
        var hash = utilStringQs(window.location.hash);
        if (val) {
          if (hash[property] === val)
            return;
          hash[property] = val;
        } else {
          if (!(property in hash))
            return;
          delete hash[property];
        }
        window.location.replace("#" + utilQsString(hash, true));
      }
    }
    function showsLayer(id2) {
      var layer2 = context.layers().layer(id2);
      return layer2 && layer2.supported() && layer2.enabled();
    }
    photos.shouldFilterByDate = function() {
      return showsLayer("mapillary") || showsLayer("openstreetcam") || showsLayer("streetside");
    };
    photos.shouldFilterByPhotoType = function() {
      return showsLayer("mapillary") || showsLayer("streetside") && showsLayer("openstreetcam");
    };
    photos.shouldFilterByUsername = function() {
      return !showsLayer("mapillary") && showsLayer("openstreetcam") && !showsLayer("streetside");
    };
    photos.showsPhotoType = function(val) {
      if (!photos.shouldFilterByPhotoType())
        return true;
      return _shownPhotoTypes.indexOf(val) !== -1;
    };
    photos.showsFlat = function() {
      return photos.showsPhotoType("flat");
    };
    photos.showsPanoramic = function() {
      return photos.showsPhotoType("panoramic");
    };
    photos.fromDate = function() {
      return _fromDate;
    };
    photos.toDate = function() {
      return _toDate;
    };
    photos.togglePhotoType = function(val) {
      var index = _shownPhotoTypes.indexOf(val);
      if (index !== -1) {
        _shownPhotoTypes.splice(index, 1);
      } else {
        _shownPhotoTypes.push(val);
      }
      dispatch12.call("change", this);
      return photos;
    };
    photos.usernames = function() {
      return _usernames;
    };
    photos.init = function() {
      var hash = utilStringQs(window.location.hash);
      if (hash.photo_dates) {
        var parts = /^(.*)[–_](.*)$/g.exec(hash.photo_dates.trim());
        this.setDateFilter("fromDate", parts && parts.length >= 2 && parts[1], false);
        this.setDateFilter("toDate", parts && parts.length >= 3 && parts[2], false);
      }
      if (hash.photo_username) {
        this.setUsernameFilter(hash.photo_username, false);
      }
      if (hash.photo_overlay) {
        var hashOverlayIDs = hash.photo_overlay.replace(/;/g, ",").split(",");
        hashOverlayIDs.forEach(function(id2) {
          var layer3 = _layerIDs.indexOf(id2) !== -1 && context.layers().layer(id2);
          if (layer3 && !layer3.enabled())
            layer3.enabled(true);
        });
      }
      if (hash.photo) {
        var photoIds = hash.photo.replace(/;/g, ",").split(",");
        var photoId = photoIds.length && photoIds[0].trim();
        var results = /(.*)\/(.*)/g.exec(photoId);
        if (results && results.length >= 3) {
          var serviceId = results[1];
          var photoKey = results[2];
          var service = services[serviceId];
          if (service && service.ensureViewerLoaded) {
            var layer2 = _layerIDs.indexOf(serviceId) !== -1 && context.layers().layer(serviceId);
            if (layer2 && !layer2.enabled())
              layer2.enabled(true);
            var baselineTime = Date.now();
            service.on("loadedImages.rendererPhotos", function() {
              if (Date.now() - baselineTime > 45e3) {
                service.on("loadedImages.rendererPhotos", null);
                return;
              }
              if (!service.cachedImage(photoKey))
                return;
              service.on("loadedImages.rendererPhotos", null);
              service.ensureViewerLoaded(context).then(function() {
                service.selectImage(context, photoKey).showViewer(context);
              });
            });
          }
        }
      }
      context.layers().on("change.rendererPhotos", updateStorage);
    };
    return utilRebind(photos, dispatch12, "on");
  }

  // modules/ui/account.js
  function uiAccount(context) {
    var osm = context.connection();
    function updateUserDetails(selection2) {
      if (!osm)
        return;
      if (!osm.authenticated()) {
        render(selection2, null);
      } else {
        osm.userDetails(function(err, user) {
          return render(selection2, user);
        });
      }
    }
    function render(selection2, user) {
      var userInfo = selection2.select(".userInfo");
      var loginLogout = selection2.select(".loginLogout");
      if (user) {
        userInfo.html("").classed("hide", false);
        var userLink = userInfo.append("a").attr("href", osm.userURL(user.display_name)).attr("target", "_blank");
        if (user.image_url) {
          userLink.append("img").attr("class", "icon pre-text user-icon").attr("src", user.image_url);
        } else {
          userLink.call(svgIcon("#iD-icon-avatar", "pre-text light"));
        }
        userLink.append("span").attr("class", "label").html(user.display_name);
        loginLogout.classed("hide", false).select("a").text(_t("logout")).on("click", function(e3) {
          e3.preventDefault();
          osm.logout();
          tryLogout();
        });
      } else {
        userInfo.html("").classed("hide", true);
        loginLogout.classed("hide", false).select("a").text(_t("login")).on("click", function(e3) {
          e3.preventDefault();
          osm.authenticate();
        });
      }
    }
    function tryLogout() {
      if (!osm)
        return;
      var url = osm.getUrlRoot() + "/logout?referer=%2Flogin";
      var w = 600;
      var h = 550;
      var settings = [["width", w], ["height", h], ["left", window.screen.width / 2 - w / 2], ["top", window.screen.height / 2 - h / 2]].map(function(x2) {
        return x2.join("=");
      }).join(",");
      window.open(url, "_blank", settings);
    }
    return function(selection2) {
      if (!osm)
        return;
      selection2.append("li").attr("class", "userInfo").classed("hide", true);
      selection2.append("li").attr("class", "loginLogout").classed("hide", true).append("a").attr("href", "#");
      osm.on("change.account", function() {
        return updateUserDetails(selection2);
      });
      updateUserDetails(selection2);
    };
  }

  // modules/ui/attribution.js
  function uiAttribution(context) {
    var _selection = select_default2(null);
    function render(selection2, data2, klass) {
      var div = selection2.selectAll(".".concat(klass)).data([0]);
      div = div.enter().append("div").attr("class", klass).merge(div);
      var attributions = div.selectAll(".attribution").data(data2, function(d) {
        return d.id;
      });
      attributions.exit().remove();
      attributions = attributions.enter().append("span").attr("class", "attribution").each(function(d, i2, nodes) {
        var attribution = select_default2(nodes[i2]);
        if (d.terms_html) {
          attribution.html(d.terms_html);
          return;
        }
        if (d.terms_url) {
          attribution = attribution.append("a").attr("href", d.terms_url).attr("target", "_blank");
        }
        var sourceID = d.id.replace(/\./g, "<TX_DOT>");
        var terms_text = _t("imagery.".concat(sourceID, ".attribution.text"), {
          default: d.terms_text || d.id || d.name()
        });
        if (d.icon && !d.overlay) {
          attribution.append("img").attr("class", "source-image").attr("src", d.icon);
        }
        attribution.append("span").attr("class", "attribution-text").html(terms_text);
      }).merge(attributions);
      var copyright = attributions.selectAll(".copyright-notice").data(function(d) {
        var notice = d.copyrightNotices(context.map().zoom(), context.map().extent());
        return notice ? [notice] : [];
      });
      copyright.exit().remove();
      copyright = copyright.enter().append("span").attr("class", "copyright-notice").merge(copyright);
      copyright.html(String);
    }
    function update4() {
      var baselayer = context.background().baseLayerSource();
      _selection.call(render, baselayer ? [baselayer] : [], "base-layer-attribution");
      var z = context.map().zoom();
      var overlays = context.background().overlayLayerSources() || [];
      _selection.call(render, overlays.filter(function(s) {
        return s.validZoom(z);
      }), "overlay-layer-attribution");
    }
    return function(selection2) {
      _selection = selection2;
      context.background().on("change.attribution", update4);
      context.map().on("move.attribution", throttle_default(update4, 400, {
        leading: false
      }));
      update4();
    };
  }

  // modules/ui/contributors.js
  function uiContributors(context) {
    var osm = context.connection(), debouncedUpdate = debounce_default(function() {
      update4();
    }, 1e3), limit = 4, hidden = false, wrap2 = select_default2(null);
    function update4() {
      if (!osm)
        return;
      var users = {}, entities = context.history().intersects(context.map().extent());
      entities.forEach(function(entity2) {
        if (entity2 && entity2.user)
          users[entity2.user] = true;
      });
      var u = Object.keys(users), subset = u.slice(0, u.length > limit ? limit - 1 : limit);
      wrap2.html("").call(svgIcon("#iD-icon-nearby", "pre-text light"));
      var userList = select_default2(document.createElement("span"));
      userList.selectAll().data(subset).enter().append("a").attr("class", "user-link").attr("href", function(d) {
        return osm.userURL(d);
      }).attr("target", "_blank").html(String);
      if (u.length > limit) {
        var count = select_default2(document.createElement("span"));
        var othersNum = u.length - limit + 1;
        count.append("a").attr("target", "_blank").attr("href", function() {
          return osm.changesetsURL(context.map().center(), context.map().zoom());
        }).html(othersNum);
        wrap2.append("span").html(_t.html("contributors.truncated_list", {
          n: othersNum,
          users: userList.html(),
          count: count.html()
        }));
      } else {
        wrap2.append("span").html(_t.html("contributors.list", {
          users: userList.html()
        }));
      }
      if (!u.length) {
        hidden = true;
        wrap2.transition().style("opacity", 0);
      } else if (hidden) {
        wrap2.transition().style("opacity", 1);
      }
    }
    return function(selection2) {
      if (!osm)
        return;
      wrap2 = selection2;
      update4();
      osm.on("loaded.contributors", debouncedUpdate);
      context.map().on("move.contributors", debouncedUpdate);
    };
  }

  // modules/ui/popover.js
  var _popoverID = 0;
  function uiPopover(klass) {
    var _id = _popoverID++;
    var _anchorSelection = select_default2(null);
    var popover = function popover2(selection2) {
      _anchorSelection = selection2;
      selection2.each(setup);
    };
    var _animation = utilFunctor(false);
    var _placement = utilFunctor("top");
    var _alignment = utilFunctor("center");
    var _scrollContainer = utilFunctor(select_default2(null));
    var _content;
    var _displayType = utilFunctor("");
    var _hasArrow = utilFunctor(true);
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    popover.displayType = function(val) {
      if (arguments.length) {
        _displayType = utilFunctor(val);
        return popover;
      } else {
        return _displayType;
      }
    };
    popover.hasArrow = function(val) {
      if (arguments.length) {
        _hasArrow = utilFunctor(val);
        return popover;
      } else {
        return _hasArrow;
      }
    };
    popover.placement = function(val) {
      if (arguments.length) {
        _placement = utilFunctor(val);
        return popover;
      } else {
        return _placement;
      }
    };
    popover.alignment = function(val) {
      if (arguments.length) {
        _alignment = utilFunctor(val);
        return popover;
      } else {
        return _alignment;
      }
    };
    popover.scrollContainer = function(val) {
      if (arguments.length) {
        _scrollContainer = utilFunctor(val);
        return popover;
      } else {
        return _scrollContainer;
      }
    };
    popover.content = function(val) {
      if (arguments.length) {
        _content = val;
        return popover;
      } else {
        return _content;
      }
    };
    popover.isShown = function() {
      var popoverSelection = _anchorSelection.select(".popover-" + _id);
      return !popoverSelection.empty() && popoverSelection.classed("in");
    };
    popover.show = function() {
      _anchorSelection.each(show);
    };
    popover.updateContent = function() {
      _anchorSelection.each(updateContent);
    };
    popover.hide = function() {
      _anchorSelection.each(hide);
    };
    popover.toggle = function() {
      _anchorSelection.each(toggle4);
    };
    popover.destroy = function(selection2, selector) {
      selector = selector || ".popover-" + _id;
      selection2.on(_pointerPrefix + "enter.popover", null).on(_pointerPrefix + "leave.popover", null).on(_pointerPrefix + "up.popover", null).on(_pointerPrefix + "down.popover", null).on("click.popover", null).attr("title", function() {
        return this.getAttribute("data-original-title") || this.getAttribute("title");
      }).attr("data-original-title", null).selectAll(selector).remove();
    };
    popover.destroyAny = function(selection2) {
      selection2.call(popover.destroy, ".popover");
    };
    function setup() {
      var anchor = select_default2(this);
      var animate = _animation.apply(this, arguments);
      var popoverSelection = anchor.selectAll(".popover-" + _id).data([0]);
      var enter = popoverSelection.enter().append("div").attr("class", "popover popover-" + _id + " " + (klass ? klass : "")).classed("arrowed", _hasArrow.apply(this, arguments));
      enter.append("div").attr("class", "popover-arrow");
      enter.append("div").attr("class", "popover-inner");
      popoverSelection = enter.merge(popoverSelection);
      if (animate) {
        popoverSelection.classed("fade", true);
      }
      var display = _displayType.apply(this, arguments);
      if (display === "hover") {
        var _lastNonMouseEnterTime;
        anchor.on(_pointerPrefix + "enter.popover", function(d3_event) {
          if (d3_event.pointerType) {
            if (d3_event.pointerType !== "mouse") {
              _lastNonMouseEnterTime = d3_event.timeStamp;
              return;
            } else if (_lastNonMouseEnterTime && d3_event.timeStamp - _lastNonMouseEnterTime < 1500) {
              return;
            }
          }
          if (d3_event.buttons !== 0)
            return;
          show.apply(this, arguments);
        }).on(_pointerPrefix + "leave.popover", function() {
          hide.apply(this, arguments);
        }).on("focus.popover", function() {
          show.apply(this, arguments);
        }).on("blur.popover", function() {
          hide.apply(this, arguments);
        });
      } else if (display === "clickFocus") {
        anchor.on(_pointerPrefix + "down.popover", function(d3_event) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
        }).on(_pointerPrefix + "up.popover", function(d3_event) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
        }).on("click.popover", toggle4);
        popoverSelection.attr("tabindex", 0).on("blur.popover", function() {
          anchor.each(function() {
            hide.apply(this, arguments);
          });
        });
      }
    }
    function show() {
      var anchor = select_default2(this);
      var popoverSelection = anchor.selectAll(".popover-" + _id);
      if (popoverSelection.empty()) {
        anchor.call(popover.destroy);
        anchor.each(setup);
        popoverSelection = anchor.selectAll(".popover-" + _id);
      }
      popoverSelection.classed("in", true);
      var displayType = _displayType.apply(this, arguments);
      if (displayType === "clickFocus") {
        anchor.classed("active", true);
        popoverSelection.node().focus();
      }
      anchor.each(updateContent);
    }
    function updateContent() {
      var anchor = select_default2(this);
      if (_content) {
        anchor.selectAll(".popover-" + _id + " > .popover-inner").call(_content.apply(this, arguments));
      }
      updatePosition.apply(this, arguments);
      updatePosition.apply(this, arguments);
      updatePosition.apply(this, arguments);
    }
    function updatePosition() {
      var anchor = select_default2(this);
      var popoverSelection = anchor.selectAll(".popover-" + _id);
      var scrollContainer = _scrollContainer && _scrollContainer.apply(this, arguments);
      var scrollNode = scrollContainer && !scrollContainer.empty() && scrollContainer.node();
      var scrollLeft = scrollNode ? scrollNode.scrollLeft : 0;
      var scrollTop = scrollNode ? scrollNode.scrollTop : 0;
      var placement = _placement.apply(this, arguments);
      popoverSelection.classed("left", false).classed("right", false).classed("top", false).classed("bottom", false).classed(placement, true);
      var alignment = _alignment.apply(this, arguments);
      var alignFactor = 0.5;
      if (alignment === "leading") {
        alignFactor = 0;
      } else if (alignment === "trailing") {
        alignFactor = 1;
      }
      var anchorFrame = getFrame(anchor.node());
      var popoverFrame = getFrame(popoverSelection.node());
      var position;
      switch (placement) {
        case "top":
          position = {
            x: anchorFrame.x + (anchorFrame.w - popoverFrame.w) * alignFactor,
            y: anchorFrame.y - popoverFrame.h
          };
          break;
        case "bottom":
          position = {
            x: anchorFrame.x + (anchorFrame.w - popoverFrame.w) * alignFactor,
            y: anchorFrame.y + anchorFrame.h
          };
          break;
        case "left":
          position = {
            x: anchorFrame.x - popoverFrame.w,
            y: anchorFrame.y + (anchorFrame.h - popoverFrame.h) * alignFactor
          };
          break;
        case "right":
          position = {
            x: anchorFrame.x + anchorFrame.w,
            y: anchorFrame.y + (anchorFrame.h - popoverFrame.h) * alignFactor
          };
          break;
      }
      if (position) {
        if (scrollNode && (placement === "top" || placement === "bottom")) {
          var initialPosX = position.x;
          if (position.x + popoverFrame.w > scrollNode.offsetWidth - 10) {
            position.x = scrollNode.offsetWidth - 10 - popoverFrame.w;
          } else if (position.x < 10) {
            position.x = 10;
          }
          var arrow = anchor.selectAll(".popover-" + _id + " > .popover-arrow");
          var arrowPosX = Math.min(Math.max(popoverFrame.w / 2 - (position.x - initialPosX), 10), popoverFrame.w - 10);
          arrow.style("left", ~~arrowPosX + "px");
        }
        popoverSelection.style("left", ~~position.x + "px").style("top", ~~position.y + "px");
      } else {
        popoverSelection.style("left", null).style("top", null);
      }
      function getFrame(node) {
        var positionStyle = select_default2(node).style("position");
        if (positionStyle === "absolute" || positionStyle === "static") {
          return {
            x: node.offsetLeft - scrollLeft,
            y: node.offsetTop - scrollTop,
            w: node.offsetWidth,
            h: node.offsetHeight
          };
        } else {
          return {
            x: 0,
            y: 0,
            w: node.offsetWidth,
            h: node.offsetHeight
          };
        }
      }
    }
    function hide() {
      var anchor = select_default2(this);
      if (_displayType.apply(this, arguments) === "clickFocus") {
        anchor.classed("active", false);
      }
      anchor.selectAll(".popover-" + _id).classed("in", false);
    }
    function toggle4() {
      if (select_default2(this).select(".popover-" + _id).classed("in")) {
        hide.apply(this, arguments);
      } else {
        show.apply(this, arguments);
      }
    }
    return popover;
  }

  // modules/ui/tooltip.js
  function uiTooltip(klass) {
    var tooltip = uiPopover((klass || "") + " tooltip").displayType("hover");
    var _title = function _title2() {
      var title = this.getAttribute("data-original-title");
      if (title) {
        return title;
      } else {
        title = this.getAttribute("title");
        this.removeAttribute("title");
        this.setAttribute("data-original-title", title);
      }
      return title;
    };
    var _heading = utilFunctor(null);
    var _keys = utilFunctor(null);
    tooltip.title = function(val) {
      if (!arguments.length)
        return _title;
      _title = utilFunctor(val);
      return tooltip;
    };
    tooltip.heading = function(val) {
      if (!arguments.length)
        return _heading;
      _heading = utilFunctor(val);
      return tooltip;
    };
    tooltip.keys = function(val) {
      if (!arguments.length)
        return _keys;
      _keys = utilFunctor(val);
      return tooltip;
    };
    tooltip.content(function() {
      var heading = _heading.apply(this, arguments);
      var text = _title.apply(this, arguments);
      var keys3 = _keys.apply(this, arguments);
      return function(selection2) {
        var headingSelect = selection2.selectAll(".tooltip-heading").data(heading ? [heading] : []);
        headingSelect.exit().remove();
        headingSelect.enter().append("div").attr("class", "tooltip-heading").merge(headingSelect).html(heading);
        var textSelect = selection2.selectAll(".tooltip-text").data(text ? [text] : []);
        textSelect.exit().remove();
        textSelect.enter().append("div").attr("class", "tooltip-text").merge(textSelect).html(text);
        var keyhintWrap = selection2.selectAll(".keyhint-wrap").data(keys3 && keys3.length ? [0] : []);
        keyhintWrap.exit().remove();
        var keyhintWrapEnter = keyhintWrap.enter().append("div").attr("class", "keyhint-wrap");
        keyhintWrapEnter.append("span").html(_t.html("tooltip_keyhint"));
        keyhintWrap = keyhintWrapEnter.merge(keyhintWrap);
        keyhintWrap.selectAll("kbd.shortcut").data(keys3 && keys3.length ? keys3 : []).enter().append("kbd").attr("class", "shortcut").html(function(d) {
          return d;
        });
      };
    });
    return tooltip;
  }

  // modules/ui/edit_menu.js
  function uiEditMenu(context) {
    var dispatch12 = dispatch_default("toggled");
    var _menu = select_default2(null);
    var _operations = [];
    var _anchorLoc = [0, 0];
    var _anchorLocLonLat = [0, 0];
    var _triggerType = "";
    var _vpTopMargin = 85;
    var _vpBottomMargin = 45;
    var _vpSideMargin = 35;
    var _menuTop = false;
    var _menuHeight;
    var _menuWidth;
    var _verticalPadding = 4;
    var _tooltipWidth = 210;
    var _menuSideMargin = 10;
    var _tooltips = [];
    var editMenu = function editMenu2(selection2) {
      var isTouchMenu = _triggerType.includes("touch") || _triggerType.includes("pen");
      var ops = _operations.filter(function(op) {
        return !isTouchMenu || !op.mouseOnly;
      });
      if (!ops.length)
        return;
      _tooltips = [];
      _menuTop = isTouchMenu;
      var showLabels = isTouchMenu;
      var buttonHeight = showLabels ? 32 : 34;
      if (showLabels) {
        _menuWidth = 52 + Math.min(120, 6 * Math.max.apply(Math, ops.map(function(op) {
          return op.title.length;
        })));
      } else {
        _menuWidth = 44;
      }
      _menuHeight = _verticalPadding * 2 + ops.length * buttonHeight;
      _menu = selection2.append("div").attr("class", "edit-menu").classed("touch-menu", isTouchMenu).style("padding", _verticalPadding + "px 0");
      var buttons = _menu.selectAll(".edit-menu-item").data(ops);
      var buttonsEnter = buttons.enter().append("button").attr("class", function(d) {
        return "edit-menu-item edit-menu-item-" + d.id;
      }).style("height", buttonHeight + "px").on("click", click).on("pointerup", pointerup).on("pointerdown mousedown", function pointerdown(d3_event) {
        d3_event.stopPropagation();
      }).on("mouseenter.highlight", function(d3_event, d) {
        if (!d.relatedEntityIds || select_default2(this).classed("disabled"))
          return;
        utilHighlightEntities(d.relatedEntityIds(), true, context);
      }).on("mouseleave.highlight", function(d3_event, d) {
        if (!d.relatedEntityIds)
          return;
        utilHighlightEntities(d.relatedEntityIds(), false, context);
      });
      buttonsEnter.each(function(d) {
        var tooltip = uiTooltip().heading(d.title).title(d.tooltip()).keys([d.keys[0]]);
        _tooltips.push(tooltip);
        select_default2(this).call(tooltip).append("div").attr("class", "icon-wrap").call(svgIcon("#iD-operation-" + d.id, "operation"));
      });
      if (showLabels) {
        buttonsEnter.append("span").attr("class", "label").html(function(d) {
          return d.title;
        });
      }
      buttonsEnter.merge(buttons).classed("disabled", function(d) {
        return d.disabled();
      });
      updatePosition();
      var initialScale = context.projection.scale();
      context.map().on("move.edit-menu", function() {
        if (initialScale !== context.projection.scale()) {
          editMenu2.close();
        }
      }).on("drawn.edit-menu", function(info) {
        if (info.full)
          updatePosition();
      });
      var lastPointerUpType;
      function pointerup(d3_event) {
        lastPointerUpType = d3_event.pointerType;
      }
      function click(d3_event, operation) {
        d3_event.stopPropagation();
        if (operation.relatedEntityIds) {
          utilHighlightEntities(operation.relatedEntityIds(), false, context);
        }
        if (operation.disabled()) {
          if (lastPointerUpType === "touch" || lastPointerUpType === "pen") {
            context.ui().flash.duration(4e3).iconName("#iD-operation-" + operation.id).iconClass("operation disabled").label(operation.tooltip)();
          }
        } else {
          if (lastPointerUpType === "touch" || lastPointerUpType === "pen") {
            context.ui().flash.duration(2e3).iconName("#iD-operation-" + operation.id).iconClass("operation").label(operation.annotation() || operation.title)();
          }
          operation();
          editMenu2.close();
        }
        lastPointerUpType = null;
      }
      dispatch12.call("toggled", this, true);
    };
    function updatePosition() {
      if (!_menu || _menu.empty())
        return;
      var anchorLoc = context.projection(_anchorLocLonLat);
      var viewport = context.surfaceRect();
      if (anchorLoc[0] < 0 || anchorLoc[0] > viewport.width || anchorLoc[1] < 0 || anchorLoc[1] > viewport.height) {
        editMenu.close();
        return;
      }
      var menuLeft = displayOnLeft(viewport);
      var offset = [0, 0];
      offset[0] = menuLeft ? -1 * (_menuSideMargin + _menuWidth) : _menuSideMargin;
      if (_menuTop) {
        if (anchorLoc[1] - _menuHeight < _vpTopMargin) {
          offset[1] = -anchorLoc[1] + _vpTopMargin;
        } else {
          offset[1] = -_menuHeight;
        }
      } else {
        if (anchorLoc[1] + _menuHeight > viewport.height - _vpBottomMargin) {
          offset[1] = -anchorLoc[1] - _menuHeight + viewport.height - _vpBottomMargin;
        } else {
          offset[1] = 0;
        }
      }
      var origin = vecAdd(anchorLoc, offset);
      _menu.style("left", origin[0] + "px").style("top", origin[1] + "px");
      var tooltipSide = tooltipPosition(viewport, menuLeft);
      _tooltips.forEach(function(tooltip) {
        tooltip.placement(tooltipSide);
      });
      function displayOnLeft(viewport2) {
        if (_mainLocalizer.textDirection() === "ltr") {
          if (anchorLoc[0] + _menuSideMargin + _menuWidth > viewport2.width - _vpSideMargin) {
            return true;
          }
          return false;
        } else {
          if (anchorLoc[0] - _menuSideMargin - _menuWidth < _vpSideMargin) {
            return false;
          }
          return true;
        }
      }
      function tooltipPosition(viewport2, menuLeft2) {
        if (_mainLocalizer.textDirection() === "ltr") {
          if (menuLeft2) {
            return "left";
          }
          if (anchorLoc[0] + _menuSideMargin + _menuWidth + _tooltipWidth > viewport2.width - _vpSideMargin) {
            return "left";
          }
          return "right";
        } else {
          if (!menuLeft2) {
            return "right";
          }
          if (anchorLoc[0] - _menuSideMargin - _menuWidth - _tooltipWidth < _vpSideMargin) {
            return "right";
          }
          return "left";
        }
      }
    }
    editMenu.close = function() {
      context.map().on("move.edit-menu", null).on("drawn.edit-menu", null);
      _menu.remove();
      _tooltips = [];
      dispatch12.call("toggled", this, false);
    };
    editMenu.anchorLoc = function(val) {
      if (!arguments.length)
        return _anchorLoc;
      _anchorLoc = val;
      _anchorLocLonLat = context.projection.invert(_anchorLoc);
      return editMenu;
    };
    editMenu.triggerType = function(val) {
      if (!arguments.length)
        return _triggerType;
      _triggerType = val;
      return editMenu;
    };
    editMenu.operations = function(val) {
      if (!arguments.length)
        return _operations;
      _operations = val;
      return editMenu;
    };
    return utilRebind(editMenu, dispatch12, "on");
  }

  // modules/ui/feature_info.js
  function uiFeatureInfo(context) {
    function update4(selection2) {
      var features2 = context.features();
      var stats = features2.stats();
      var count = 0;
      var hiddenList = features2.hidden().map(function(k) {
        if (stats[k]) {
          count += stats[k];
          return _t("inspector.title_count", {
            title: _t.html("feature." + k + ".description"),
            count: stats[k]
          });
        }
        return null;
      }).filter(Boolean);
      selection2.html("");
      if (hiddenList.length) {
        var tooltipBehavior = uiTooltip().placement("top").title(function() {
          return hiddenList.join("<br/>");
        });
        selection2.append("a").attr("class", "chip").attr("href", "#").html(_t.html("feature_info.hidden_warning", {
          count: count
        })).call(tooltipBehavior).on("click", function(d3_event) {
          tooltipBehavior.hide();
          d3_event.preventDefault();
          context.ui().togglePanes(context.container().select(".map-panes .map-data-pane"));
        });
      }
      selection2.classed("hide", !hiddenList.length);
    }
    return function(selection2) {
      update4(selection2);
      context.features().on("change.feature_info", function() {
        update4(selection2);
      });
    };
  }

  // modules/ui/flash.js
  function uiFlash(context) {
    var _flashTimer;
    var _duration = 2e3;
    var _iconName = "#iD-icon-no";
    var _iconClass = "disabled";
    var _label = "";
    function flash() {
      if (_flashTimer) {
        _flashTimer.stop();
      }
      context.container().select(".main-footer-wrap").classed("footer-hide", true).classed("footer-show", false);
      context.container().select(".flash-wrap").classed("footer-hide", false).classed("footer-show", true);
      var content = context.container().select(".flash-wrap").selectAll(".flash-content").data([0]);
      var contentEnter = content.enter().append("div").attr("class", "flash-content");
      var iconEnter = contentEnter.append("svg").attr("class", "flash-icon icon").append("g").attr("transform", "translate(10,10)");
      iconEnter.append("circle").attr("r", 9);
      iconEnter.append("use").attr("transform", "translate(-7,-7)").attr("width", "14").attr("height", "14");
      contentEnter.append("div").attr("class", "flash-text");
      content = content.merge(contentEnter);
      content.selectAll(".flash-icon").attr("class", "icon flash-icon " + (_iconClass || ""));
      content.selectAll(".flash-icon use").attr("xlink:href", _iconName);
      content.selectAll(".flash-text").attr("class", "flash-text").html(_label);
      _flashTimer = timeout_default(function() {
        _flashTimer = null;
        context.container().select(".main-footer-wrap").classed("footer-hide", false).classed("footer-show", true);
        context.container().select(".flash-wrap").classed("footer-hide", true).classed("footer-show", false);
      }, _duration);
      return content;
    }
    flash.duration = function(_2) {
      if (!arguments.length)
        return _duration;
      _duration = _2;
      return flash;
    };
    flash.label = function(_2) {
      if (!arguments.length)
        return _label;
      _label = _2;
      return flash;
    };
    flash.iconName = function(_2) {
      if (!arguments.length)
        return _iconName;
      _iconName = _2;
      return flash;
    };
    flash.iconClass = function(_2) {
      if (!arguments.length)
        return _iconClass;
      _iconClass = _2;
      return flash;
    };
    return flash;
  }

  // modules/ui/full_screen.js
  function uiFullScreen(context) {
    var element = context.container().node();
    function getFullScreenFn() {
      if (element.requestFullscreen) {
        return element.requestFullscreen;
      } else if (element.msRequestFullscreen) {
        return element.msRequestFullscreen;
      } else if (element.mozRequestFullScreen) {
        return element.mozRequestFullScreen;
      } else if (element.webkitRequestFullscreen) {
        return element.webkitRequestFullscreen;
      }
    }
    function getExitFullScreenFn() {
      if (document.exitFullscreen) {
        return document.exitFullscreen;
      } else if (document.msExitFullscreen) {
        return document.msExitFullscreen;
      } else if (document.mozCancelFullScreen) {
        return document.mozCancelFullScreen;
      } else if (document.webkitExitFullscreen) {
        return document.webkitExitFullscreen;
      }
    }
    function isFullScreen() {
      return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
    }
    function isSupported() {
      return !!getFullScreenFn();
    }
    function fullScreen(d3_event) {
      d3_event.preventDefault();
      if (!isFullScreen()) {
        getFullScreenFn().apply(element);
      } else {
        getExitFullScreenFn().apply(document);
      }
    }
    return function() {
      if (!isSupported())
        return;
      var detected = utilDetect();
      var keys3 = detected.os === "mac" ? [uiCmd("\u2303\u2318F"), "f11"] : ["f11"];
      context.keybinding().on(keys3, fullScreen);
    };
  }

  // modules/ui/geolocate.js
  function uiGeolocate(context) {
    var _geolocationOptions = {
      enableHighAccuracy: false,
      timeout: 6e3
    };
    var _locating = uiLoading(context).message(_t.html("geolocate.locating")).blocking(true);
    var _layer = context.layers().layer("geolocate");
    var _position;
    var _extent;
    var _timeoutID;
    var _button = select_default2(null);
    function click() {
      if (context.inIntro())
        return;
      if (!_layer.enabled() && !_locating.isShown()) {
        _timeoutID = setTimeout(error, 1e4);
        context.container().call(_locating);
        navigator.geolocation.getCurrentPosition(success, error, _geolocationOptions);
      } else {
        _locating.close();
        _layer.enabled(null, false);
        updateButtonState();
      }
    }
    function zoomTo() {
      context.enter(modeBrowse(context));
      var map2 = context.map();
      _layer.enabled(_position, true);
      updateButtonState();
      map2.centerZoomEase(_extent.center(), Math.min(20, map2.extentZoom(_extent)));
    }
    function success(geolocation) {
      _position = geolocation;
      var coords = _position.coords;
      _extent = new Extent([coords.longitude, coords.latitude]).padByMeters(coords.accuracy);
      zoomTo();
      finish();
    }
    function error() {
      if (_position) {
        zoomTo();
      } else {
        context.ui().flash.label(_t.html("geolocate.location_unavailable")).iconName("#iD-icon-geolocate")();
      }
      finish();
    }
    function finish() {
      _locating.close();
      if (_timeoutID) {
        clearTimeout(_timeoutID);
      }
      _timeoutID = void 0;
    }
    function updateButtonState() {
      _button.classed("active", _layer.enabled());
    }
    return function(selection2) {
      if (!navigator.geolocation || !navigator.geolocation.getCurrentPosition)
        return;
      _button = selection2.append("button").on("click", click).call(svgIcon("#iD-icon-geolocate", "light")).call(uiTooltip().placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left").title(_t.html("geolocate.title")).keys([_t("geolocate.key")]));
      context.keybinding().on(_t("geolocate.key"), click);
    };
  }

  // modules/ui/panels/background.js
  function uiPanelBackground(context) {
    var background = context.background();
    var _currSourceName = null;
    var _metadata = {};
    var _metadataKeys = ["zoom", "vintage", "source", "description", "resolution", "accuracy"];
    var debouncedRedraw = debounce_default(redraw, 250);
    function redraw(selection2) {
      var source = background.baseLayerSource();
      if (!source)
        return;
      var isDG = source.id.match(/^DigitalGlobe/i) !== null;
      var sourceLabel = source.label();
      if (_currSourceName !== sourceLabel) {
        _currSourceName = sourceLabel;
        _metadata = {};
      }
      selection2.html("");
      var list = selection2.append("ul").attr("class", "background-info");
      list.append("li").html(_currSourceName);
      _metadataKeys.forEach(function(k) {
        if (isDG && k === "vintage")
          return;
        list.append("li").attr("class", "background-info-list-" + k).classed("hide", !_metadata[k]).html(_t.html("info_panels.background." + k) + ":").append("span").attr("class", "background-info-span-" + k).html(_metadata[k]);
      });
      debouncedGetMetadata(selection2);
      var toggleTiles = context.getDebug("tile") ? "hide_tiles" : "show_tiles";
      selection2.append("a").html(_t.html("info_panels.background." + toggleTiles)).attr("href", "#").attr("class", "button button-toggle-tiles").on("click", function(d3_event) {
        d3_event.preventDefault();
        context.setDebug("tile", !context.getDebug("tile"));
        selection2.call(redraw);
      });
      if (isDG) {
        var key = source.id + "-vintage";
        var sourceVintage = context.background().findSource(key);
        var showsVintage = context.background().showsLayer(sourceVintage);
        var toggleVintage = showsVintage ? "hide_vintage" : "show_vintage";
        selection2.append("a").html(_t.html("info_panels.background." + toggleVintage)).attr("href", "#").attr("class", "button button-toggle-vintage").on("click", function(d3_event) {
          d3_event.preventDefault();
          context.background().toggleOverlayLayer(sourceVintage);
          selection2.call(redraw);
        });
      }
      ["DigitalGlobe-Premium", "DigitalGlobe-Standard"].forEach(function(layerId) {
        if (source.id !== layerId) {
          var key2 = layerId + "-vintage";
          var sourceVintage2 = context.background().findSource(key2);
          if (context.background().showsLayer(sourceVintage2)) {
            context.background().toggleOverlayLayer(sourceVintage2);
          }
        }
      });
    }
    var debouncedGetMetadata = debounce_default(getMetadata, 250);
    function getMetadata(selection2) {
      var tile = context.container().select(".layer-background img.tile-center");
      if (tile.empty())
        return;
      var sourceName = _currSourceName;
      var datum2 = tile.datum();
      if (!datum2)
        return;
      var d = datum2.xyz;
      var zoom = d[2] || Math.floor(context.map().zoom());
      var center = context.map().center();
      _metadata.zoom = String(zoom);
      selection2.selectAll(".background-info-list-zoom").classed("hide", false).selectAll(".background-info-span-zoom").html(_metadata.zoom);
      background.baseLayerSource().getMetadata(center, d, function(err, result6) {
        if (err || _currSourceName !== sourceName)
          return;
        var vintage = result6.vintage;
        _metadata.vintage = vintage && vintage.range || _t("info_panels.background.unknown");
        selection2.selectAll(".background-info-list-vintage").classed("hide", false).selectAll(".background-info-span-vintage").html(_metadata.vintage);
        _metadataKeys.forEach(function(k) {
          if (k === "zoom" || k === "vintage")
            return;
          var val = result6[k];
          _metadata[k] = val;
          selection2.selectAll(".background-info-list-" + k).classed("hide", !val).selectAll(".background-info-span-" + k).html(val);
        });
      });
    }
    var panel = function panel2(selection2) {
      selection2.call(redraw);
      context.map().on("drawn.info-background", function() {
        selection2.call(debouncedRedraw);
      }).on("move.info-background", function() {
        selection2.call(debouncedGetMetadata);
      });
    };
    panel.off = function() {
      context.map().on("drawn.info-background", null).on("move.info-background", null);
    };
    panel.id = "background";
    panel.label = _t.html("info_panels.background.title");
    panel.key = _t("info_panels.background.key");
    return panel;
  }

  // modules/ui/panels/history.js
  function uiPanelHistory(context) {
    var osm;
    function displayTimestamp(timestamp) {
      if (!timestamp)
        return _t("info_panels.history.unknown");
      var options = {
        day: "numeric",
        month: "short",
        year: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      };
      var d = new Date(timestamp);
      if (isNaN(d.getTime()))
        return _t("info_panels.history.unknown");
      return d.toLocaleString(_mainLocalizer.localeCode(), options);
    }
    function displayUser(selection2, userName) {
      if (!userName) {
        selection2.append("span").html(_t.html("info_panels.history.unknown"));
        return;
      }
      selection2.append("span").attr("class", "user-name").html(userName);
      var links = selection2.append("div").attr("class", "links");
      if (osm) {
        links.append("a").attr("class", "user-osm-link").attr("href", osm.userURL(userName)).attr("target", "_blank").html("OSM");
      }
      links.append("a").attr("class", "user-hdyc-link").attr("href", "https://hdyc.neis-one.org/?" + userName).attr("target", "_blank").attr("tabindex", -1).html("HDYC");
    }
    function displayChangeset(selection2, changeset) {
      if (!changeset) {
        selection2.append("span").html(_t.html("info_panels.history.unknown"));
        return;
      }
      selection2.append("span").attr("class", "changeset-id").html(changeset);
      var links = selection2.append("div").attr("class", "links");
      if (osm) {
        links.append("a").attr("class", "changeset-osm-link").attr("href", osm.changesetURL(changeset)).attr("target", "_blank").html("OSM");
      }
      links.append("a").attr("class", "changeset-osmcha-link").attr("href", "https://osmcha.org/changesets/" + changeset).attr("target", "_blank").html("OSMCha");
      links.append("a").attr("class", "changeset-achavi-link").attr("href", "https://overpass-api.de/achavi/?changeset=" + changeset).attr("target", "_blank").html("Achavi");
    }
    function redraw(selection2) {
      var selectedNoteID = context.selectedNoteID();
      osm = context.connection();
      var selected, note, entity2;
      if (selectedNoteID && osm) {
        selected = [_t("note.note") + " " + selectedNoteID];
        note = osm.getNote(selectedNoteID);
      } else {
        selected = context.selectedIDs().filter(function(e3) {
          return context.hasEntity(e3);
        });
        if (selected.length) {
          entity2 = context.entity(selected[0]);
        }
      }
      var singular = selected.length === 1 ? selected[0] : null;
      selection2.html("");
      selection2.append("h4").attr("class", "history-heading").html(singular || _t.html("info_panels.selected", {
        n: selected.length
      }));
      if (!singular)
        return;
      if (entity2) {
        selection2.call(redrawEntity, entity2);
      } else if (note) {
        selection2.call(redrawNote, note);
      }
    }
    function redrawNote(selection2, note) {
      if (!note || note.isNew()) {
        selection2.append("div").html(_t.html("info_panels.history.note_no_history"));
        return;
      }
      var list = selection2.append("ul");
      list.append("li").html(_t.html("info_panels.history.note_comments") + ":").append("span").html(note.comments.length);
      if (note.comments.length) {
        list.append("li").html(_t.html("info_panels.history.note_created_date") + ":").append("span").html(displayTimestamp(note.comments[0].date));
        list.append("li").html(_t.html("info_panels.history.note_created_user") + ":").call(displayUser, note.comments[0].user);
      }
      if (osm) {
        selection2.append("a").attr("class", "view-history-on-osm").attr("target", "_blank").attr("href", osm.noteURL(note)).call(svgIcon("#iD-icon-out-link", "inline")).append("span").html(_t.html("info_panels.history.note_link_text"));
      }
    }
    function redrawEntity(selection2, entity2) {
      if (!entity2 || entity2.isNew()) {
        selection2.append("div").html(_t.html("info_panels.history.no_history"));
        return;
      }
      var links = selection2.append("div").attr("class", "links");
      if (osm) {
        links.append("a").attr("class", "view-history-on-osm").attr("href", osm.historyURL(entity2)).attr("target", "_blank").attr("title", _t("info_panels.history.link_text")).html("OSM");
      }
      links.append("a").attr("class", "pewu-history-viewer-link").attr("href", "https://pewu.github.io/osm-history/#/" + entity2.type + "/" + entity2.osmId()).attr("target", "_blank").attr("tabindex", -1).html("PeWu");
      var list = selection2.append("ul");
      list.append("li").html(_t.html("info_panels.history.version") + ":").append("span").html(entity2.version);
      list.append("li").html(_t.html("info_panels.history.last_edit") + ":").append("span").html(displayTimestamp(entity2.timestamp));
      list.append("li").html(_t.html("info_panels.history.edited_by") + ":").call(displayUser, entity2.user);
      list.append("li").html(_t.html("info_panels.history.changeset") + ":").call(displayChangeset, entity2.changeset);
    }
    var panel = function panel2(selection2) {
      selection2.call(redraw);
      context.map().on("drawn.info-history", function() {
        selection2.call(redraw);
      });
      context.on("enter.info-history", function() {
        selection2.call(redraw);
      });
    };
    panel.off = function() {
      context.map().on("drawn.info-history", null);
      context.on("enter.info-history", null);
    };
    panel.id = "history";
    panel.label = _t.html("info_panels.history.title");
    panel.key = _t("info_panels.history.key");
    return panel;
  }

  // modules/util/units.js
  var OSM_PRECISION = 7;
  function displayLength(m, isImperial) {
    var d = m * (isImperial ? 3.28084 : 1);
    var unit2;
    if (isImperial) {
      if (d >= 5280) {
        d /= 5280;
        unit2 = "miles";
      } else {
        unit2 = "feet";
      }
    } else {
      if (d >= 1e3) {
        d /= 1e3;
        unit2 = "kilometers";
      } else {
        unit2 = "meters";
      }
    }
    return _t("units." + unit2, {
      quantity: d.toLocaleString(_mainLocalizer.localeCode(), {
        maximumSignificantDigits: 4
      })
    });
  }
  function displayArea(m2, isImperial) {
    var locale2 = _mainLocalizer.localeCode();
    var d = m2 * (isImperial ? 10.7639111056 : 1);
    var d1, d2, area3;
    var unit1 = "";
    var unit2 = "";
    if (isImperial) {
      if (d >= 6969600) {
        d1 = d / 27878400;
        unit1 = "square_miles";
      } else {
        d1 = d;
        unit1 = "square_feet";
      }
      if (d > 4356 && d < 4356e4) {
        d2 = d / 43560;
        unit2 = "acres";
      }
    } else {
      if (d >= 25e4) {
        d1 = d / 1e6;
        unit1 = "square_kilometers";
      } else {
        d1 = d;
        unit1 = "square_meters";
      }
      if (d > 1e3 && d < 1e7) {
        d2 = d / 1e4;
        unit2 = "hectares";
      }
    }
    area3 = _t("units." + unit1, {
      quantity: d1.toLocaleString(locale2, {
        maximumSignificantDigits: 4
      })
    });
    if (d2) {
      return _t("units.area_pair", {
        area1: area3,
        area2: _t("units." + unit2, {
          quantity: d2.toLocaleString(locale2, {
            maximumSignificantDigits: 2
          })
        })
      });
    } else {
      return area3;
    }
  }
  function wrap(x2, min2, max2) {
    var d = max2 - min2;
    return ((x2 - min2) % d + d) % d + min2;
  }
  function clamp3(x2, min2, max2) {
    return Math.max(min2, Math.min(x2, max2));
  }
  function displayCoordinate(deg, pos, neg) {
    var locale2 = _mainLocalizer.localeCode();
    var min2 = (Math.abs(deg) - Math.floor(Math.abs(deg))) * 60;
    var sec = (min2 - Math.floor(min2)) * 60;
    var displayDegrees = _t("units.arcdegrees", {
      quantity: Math.floor(Math.abs(deg)).toLocaleString(locale2)
    });
    var displayCoordinate2;
    if (Math.floor(sec) > 0) {
      displayCoordinate2 = displayDegrees + _t("units.arcminutes", {
        quantity: Math.floor(min2).toLocaleString(locale2)
      }) + _t("units.arcseconds", {
        quantity: Math.round(sec).toLocaleString(locale2)
      });
    } else if (Math.floor(min2) > 0) {
      displayCoordinate2 = displayDegrees + _t("units.arcminutes", {
        quantity: Math.round(min2).toLocaleString(locale2)
      });
    } else {
      displayCoordinate2 = _t("units.arcdegrees", {
        quantity: Math.round(Math.abs(deg)).toLocaleString(locale2)
      });
    }
    if (deg === 0) {
      return displayCoordinate2;
    } else {
      return _t("units.coordinate", {
        coordinate: displayCoordinate2,
        direction: _t("units." + (deg > 0 ? pos : neg))
      });
    }
  }
  function dmsCoordinatePair(coord) {
    return _t("units.coordinate_pair", {
      latitude: displayCoordinate(clamp3(coord[1], -90, 90), "north", "south"),
      longitude: displayCoordinate(wrap(coord[0], -180, 180), "east", "west")
    });
  }
  function decimalCoordinatePair(coord) {
    return _t("units.coordinate_pair", {
      latitude: clamp3(coord[1], -90, 90).toFixed(OSM_PRECISION),
      longitude: wrap(coord[0], -180, 180).toFixed(OSM_PRECISION)
    });
  }

  // modules/ui/panels/location.js
  function uiPanelLocation(context) {
    var currLocation = "";
    function redraw(selection2) {
      selection2.html("");
      var list = selection2.append("ul");
      var coord = context.map().mouseCoordinates();
      if (coord.some(isNaN)) {
        coord = context.map().center();
      }
      list.append("li").html(dmsCoordinatePair(coord)).append("li").html(decimalCoordinatePair(coord));
      selection2.append("div").attr("class", "location-info").html(currLocation || " ");
      debouncedGetLocation(selection2, coord);
    }
    var debouncedGetLocation = debounce_default(getLocation, 250);
    function getLocation(selection2, coord) {
      if (!services.geocoder) {
        currLocation = _t("info_panels.location.unknown_location");
        selection2.selectAll(".location-info").html(currLocation);
      } else {
        services.geocoder.reverse(coord, function(err, result6) {
          currLocation = result6 ? result6.display_name : _t("info_panels.location.unknown_location");
          selection2.selectAll(".location-info").html(currLocation);
        });
      }
    }
    var panel = function panel2(selection2) {
      selection2.call(redraw);
      context.surface().on(("PointerEvent" in window ? "pointer" : "mouse") + "move.info-location", function() {
        selection2.call(redraw);
      });
    };
    panel.off = function() {
      context.surface().on(".info-location", null);
    };
    panel.id = "location";
    panel.label = _t.html("info_panels.location.title");
    panel.key = _t("info_panels.location.key");
    return panel;
  }

  // modules/ui/panels/measurement.js
  function uiPanelMeasurement(context) {
    function radiansToMeters(r) {
      return r * 63710071809e-4;
    }
    function steradiansToSqmeters(r) {
      return r / (4 * Math.PI) * 510065621724e3;
    }
    function toLineString(feature3) {
      if (feature3.type === "LineString")
        return feature3;
      var result6 = {
        type: "LineString",
        coordinates: []
      };
      if (feature3.type === "Polygon") {
        result6.coordinates = feature3.coordinates[0];
      } else if (feature3.type === "MultiPolygon") {
        result6.coordinates = feature3.coordinates[0][0];
      }
      return result6;
    }
    var _isImperial = !_mainLocalizer.usesMetric();
    function redraw(selection2) {
      var graph3 = context.graph();
      var selectedNoteID = context.selectedNoteID();
      var osm = services.osm;
      var localeCode = _mainLocalizer.localeCode();
      var heading;
      var center, location2, centroid;
      var closed, geometry6;
      var totalNodeCount, length = 0, area3 = 0, distance;
      if (selectedNoteID && osm) {
        var note = osm.getNote(selectedNoteID);
        heading = _t("note.note") + " " + selectedNoteID;
        location2 = note.loc;
        geometry6 = "note";
      } else {
        var selectedIDs = context.selectedIDs().filter(function(id2) {
          return context.hasEntity(id2);
        });
        var selected = selectedIDs.map(function(id2) {
          return context.entity(id2);
        });
        heading = selected.length === 1 ? selected[0].id : _t("info_panels.selected", {
          n: selected.length
        });
        if (selected.length) {
          var extent6 = new Extent();
          for (var i2 in selected) {
            var entity2 = selected[i2];
            extent6 = extent6.extend(entity2.extent(graph3));
            geometry6 = entity2.geometry(graph3);
            if (geometry6 === "line" || geometry6 === "area") {
              closed = entity2.type === "relation" || entity2.isClosed() && !entity2.isDegenerate();
              var feature3 = entity2.asGeoJSON(graph3);
              length += radiansToMeters(length_default(toLineString(feature3)));
              centroid = path_default(context.projection).centroid(entity2.asGeoJSON(graph3));
              centroid = centroid && context.projection.invert(centroid);
              if (!centroid || !isFinite(centroid[0]) || !isFinite(centroid[1])) {
                centroid = entity2.extent(graph3).center();
              }
              if (closed) {
                area3 += steradiansToSqmeters(entity2.area(graph3));
              }
            }
          }
          if (selected.length > 1) {
            geometry6 = null;
            closed = null;
            centroid = null;
          }
          if (selected.length === 2 && selected[0].type === "node" && selected[1].type === "node") {
            distance = geoSphericalDistance(selected[0].loc, selected[1].loc);
          }
          if (selected.length === 1 && selected[0].type === "node") {
            location2 = selected[0].loc;
          } else {
            totalNodeCount = utilGetAllNodes(selectedIDs, context.graph()).length;
          }
          if (!location2 && !centroid) {
            center = extent6.center();
          }
        }
      }
      selection2.html("");
      if (heading) {
        selection2.append("h4").attr("class", "measurement-heading").html(heading);
      }
      var list = selection2.append("ul");
      var coordItem;
      if (geometry6) {
        list.append("li").html(_t.html("info_panels.measurement.geometry") + ":").append("span").html(closed ? _t("info_panels.measurement.closed_" + geometry6) : _t("geometry." + geometry6));
      }
      if (totalNodeCount) {
        list.append("li").html(_t.html("info_panels.measurement.node_count") + ":").append("span").html(totalNodeCount.toLocaleString(localeCode));
      }
      if (area3) {
        list.append("li").html(_t.html("info_panels.measurement.area") + ":").append("span").html(displayArea(area3, _isImperial));
      }
      if (length) {
        list.append("li").html(_t.html("info_panels.measurement." + (closed ? "perimeter" : "length")) + ":").append("span").html(displayLength(length, _isImperial));
      }
      if (typeof distance === "number") {
        list.append("li").html(_t.html("info_panels.measurement.distance") + ":").append("span").html(displayLength(distance, _isImperial));
      }
      if (location2) {
        coordItem = list.append("li").html(_t.html("info_panels.measurement.location") + ":");
        coordItem.append("span").html(dmsCoordinatePair(location2));
        coordItem.append("span").html(decimalCoordinatePair(location2));
      }
      if (centroid) {
        coordItem = list.append("li").html(_t.html("info_panels.measurement.centroid") + ":");
        coordItem.append("span").html(dmsCoordinatePair(centroid));
        coordItem.append("span").html(decimalCoordinatePair(centroid));
      }
      if (center) {
        coordItem = list.append("li").html(_t.html("info_panels.measurement.center") + ":");
        coordItem.append("span").html(dmsCoordinatePair(center));
        coordItem.append("span").html(decimalCoordinatePair(center));
      }
      if (length || area3 || typeof distance === "number") {
        var toggle4 = _isImperial ? "imperial" : "metric";
        selection2.append("a").html(_t.html("info_panels.measurement." + toggle4)).attr("href", "#").attr("class", "button button-toggle-units").on("click", function(d3_event) {
          d3_event.preventDefault();
          _isImperial = !_isImperial;
          selection2.call(redraw);
        });
      }
    }
    var panel = function panel2(selection2) {
      selection2.call(redraw);
      context.map().on("drawn.info-measurement", function() {
        selection2.call(redraw);
      });
      context.on("enter.info-measurement", function() {
        selection2.call(redraw);
      });
    };
    panel.off = function() {
      context.map().on("drawn.info-measurement", null);
      context.on("enter.info-measurement", null);
    };
    panel.id = "measurement";
    panel.label = _t.html("info_panels.measurement.title");
    panel.key = _t("info_panels.measurement.key");
    return panel;
  }

  // modules/ui/panels/progress.js
  init_slicedToArray();

  // modules/modes/draw_area.js
  function modeDrawArea(context, wayID, startGraph, button) {
    var mode = {
      button: button,
      id: "draw-area"
    };
    var behavior = behaviorDrawWay(context, wayID, mode, startGraph).on("rejectedSelfIntersection.modeDrawArea", function() {
      context.ui().flash.iconName("#iD-icon-no").label(_t("self_intersection.error.areas"))();
    });
    mode.wayID = wayID;
    mode.enter = function() {
      context.install(behavior);
    };
    mode.exit = function() {
      context.uninstall(behavior);
    };
    mode.selectedIDs = function() {
      return [wayID];
    };
    mode.activeID = function() {
      return behavior && behavior.activeID() || [];
    };
    return mode;
  }

  // modules/modes/add_area.js
  function modeAddArea(context, mode) {
    mode.id = "add-area";
    var behavior = behaviorAddWay(context).on("start", start2).on("startFromWay", startFromWay).on("startFromNode", startFromNode);
    var defaultTags = {
      area: "yes"
    };
    if (mode.preset)
      defaultTags = mode.preset.setTags(defaultTags, "area");
    function actionClose(wayId) {
      return function(graph3) {
        return graph3.replace(graph3.entity(wayId).close());
      };
    }
    function start2(loc) {
      var startGraph = context.graph();
      var node = osmNode({
        loc: loc
      });
      var way = osmWay({
        tags: defaultTags
      });
      context.perform(actionAddEntity(node), actionAddEntity(way), actionAddVertex(way.id, node.id), actionClose(way.id));
      context.enter(modeDrawArea(context, way.id, startGraph, mode.button));
    }
    function startFromWay(loc, edge) {
      var startGraph = context.graph();
      var node = osmNode({
        loc: loc
      });
      var way = osmWay({
        tags: defaultTags
      });
      context.perform(actionAddEntity(node), actionAddEntity(way), actionAddVertex(way.id, node.id), actionClose(way.id), actionAddMidpoint({
        loc: loc,
        edge: edge
      }, node));
      context.enter(modeDrawArea(context, way.id, startGraph, mode.button));
    }
    function startFromNode(node) {
      var startGraph = context.graph();
      var way = osmWay({
        tags: defaultTags
      });
      context.perform(actionAddEntity(way), actionAddVertex(way.id, node.id), actionClose(way.id));
      context.enter(modeDrawArea(context, way.id, startGraph, mode.button));
    }
    mode.enter = function() {
      context.install(behavior);
    };
    mode.exit = function() {
      context.uninstall(behavior);
    };
    return mode;
  }

  // modules/modes/add_line.js
  function modeAddLine(context, mode) {
    mode.id = "add-line";
    var behavior = behaviorAddWay(context).on("start", start2).on("startFromWay", startFromWay).on("startFromNode", startFromNode);
    var defaultTags = {};
    if (mode.preset)
      defaultTags = mode.preset.setTags(defaultTags, "line");
    var tagSources = corePreferences("rapid-internal-feature.tagSources") === "true";
    if (tagSources && defaultTags.highway) {
      defaultTags.source = "maxar";
    }
    function start2(loc) {
      var startGraph = context.graph();
      var node = osmNode({
        loc: loc
      });
      var way = osmWay({
        tags: defaultTags
      });
      context.perform(actionAddEntity(node), actionAddEntity(way), actionAddVertex(way.id, node.id));
      context.enter(modeDrawLine(context, way.id, startGraph, mode.button));
    }
    function startFromWay(loc, edge) {
      var startGraph = context.graph();
      var node = osmNode({
        loc: loc
      });
      var way = osmWay({
        tags: defaultTags
      });
      context.perform(actionAddEntity(node), actionAddEntity(way), actionAddVertex(way.id, node.id), actionAddMidpoint({
        loc: loc,
        edge: edge
      }, node));
      context.enter(modeDrawLine(context, way.id, startGraph, mode.button));
    }
    function startFromNode(node) {
      var startGraph = context.graph();
      var way = osmWay({
        tags: defaultTags
      });
      context.perform(actionAddEntity(way), actionAddVertex(way.id, node.id));
      context.enter(modeDrawLine(context, way.id, startGraph, mode.button));
    }
    mode.enter = function() {
      context.install(behavior);
    };
    mode.exit = function() {
      context.uninstall(behavior);
    };
    return mode;
  }

  // modules/modes/add_point.js
  function modeAddPoint(context, mode) {
    mode.id = "add-point";
    var behavior = behaviorDraw(context).on("click", add2).on("clickWay", addWay).on("clickNode", addNode2).on("cancel", cancel).on("finish", cancel);
    var defaultTags = {};
    if (mode.preset)
      defaultTags = mode.preset.setTags(defaultTags, "point");
    function add2(loc) {
      var node = osmNode({
        loc: loc,
        tags: defaultTags
      });
      context.perform(actionAddEntity(node), _t("operations.add.annotation.point"));
      enterSelectMode(node);
    }
    function addWay(loc, edge) {
      var node = osmNode({
        tags: defaultTags
      });
      context.perform(actionAddMidpoint({
        loc: loc,
        edge: edge
      }, node), _t("operations.add.annotation.vertex"));
      enterSelectMode(node);
    }
    function enterSelectMode(node) {
      context.enter(modeSelect(context, [node.id]).newFeature(true));
    }
    function addNode2(node) {
      if (Object.keys(defaultTags).length === 0) {
        enterSelectMode(node);
        return;
      }
      var tags = Object.assign({}, node.tags);
      for (var key in defaultTags) {
        tags[key] = defaultTags[key];
      }
      context.perform(actionChangeTags(node.id, tags), _t("operations.add.annotation.point"));
      enterSelectMode(node);
    }
    function cancel() {
      context.enter(modeBrowse(context));
    }
    mode.enter = function() {
      context.install(behavior);
    };
    mode.exit = function() {
      context.uninstall(behavior);
    };
    return mode;
  }

  // modules/ui/note_comments.js
  function uiNoteComments() {
    var _note;
    function noteComments(selection2) {
      if (_note.isNew())
        return;
      var comments = selection2.selectAll(".comments-container").data([0]);
      comments = comments.enter().append("div").attr("class", "comments-container").merge(comments);
      var commentEnter = comments.selectAll(".comment").data(_note.comments).enter().append("div").attr("class", "comment");
      commentEnter.append("div").attr("class", function(d) {
        return "comment-avatar user-" + d.uid;
      }).call(svgIcon("#iD-icon-avatar", "comment-avatar-icon"));
      var mainEnter = commentEnter.append("div").attr("class", "comment-main");
      var metadataEnter = mainEnter.append("div").attr("class", "comment-metadata");
      metadataEnter.append("div").attr("class", "comment-author").each(function(d) {
        var selection3 = select_default2(this);
        var osm = services.osm;
        if (osm && d.user) {
          selection3 = selection3.append("a").attr("class", "comment-author-link").attr("href", osm.userURL(d.user)).attr("target", "_blank");
        }
        selection3.html(function(d2) {
          return d2.user || _t.html("note.anonymous");
        });
      });
      metadataEnter.append("div").attr("class", "comment-date").html(function(d) {
        return _t("note.status." + d.action, {
          when: localeDateString2(d.date)
        });
      });
      mainEnter.append("div").attr("class", "comment-text").html(function(d) {
        return d.html;
      }).selectAll("a").attr("rel", "noopener nofollow").attr("target", "_blank");
      comments.call(replaceAvatars);
    }
    function replaceAvatars(selection2) {
      var showThirdPartyIcons = corePreferences("preferences.privacy.thirdpartyicons") || "true";
      var osm = services.osm;
      if (showThirdPartyIcons !== "true" || !osm)
        return;
      var uids = {};
      _note.comments.forEach(function(d) {
        if (d.uid)
          uids[d.uid] = true;
      });
      Object.keys(uids).forEach(function(uid) {
        osm.loadUser(uid, function(err, user) {
          if (!user || !user.image_url)
            return;
          selection2.selectAll(".comment-avatar.user-" + uid).html("").append("img").attr("class", "icon comment-avatar-icon").attr("src", user.image_url).attr("alt", user.display_name);
        });
      });
    }
    function localeDateString2(s) {
      if (!s)
        return null;
      var options = {
        day: "numeric",
        month: "short",
        year: "numeric"
      };
      s = s.replace(/-/g, "/");
      var d = new Date(s);
      if (isNaN(d.getTime()))
        return null;
      return d.toLocaleDateString(_mainLocalizer.localeCode(), options);
    }
    noteComments.note = function(val) {
      if (!arguments.length)
        return _note;
      _note = val;
      return noteComments;
    };
    return noteComments;
  }

  // modules/ui/note_header.js
  function uiNoteHeader() {
    var _note;
    function noteHeader(selection2) {
      var header = selection2.selectAll(".note-header").data(_note ? [_note] : [], function(d) {
        return d.status + d.id;
      });
      header.exit().remove();
      var headerEnter = header.enter().append("div").attr("class", "note-header");
      var iconEnter = headerEnter.append("div").attr("class", function(d) {
        return "note-header-icon " + d.status;
      }).classed("new", function(d) {
        return d.id < 0;
      });
      iconEnter.append("div").attr("class", "preset-icon-28").call(svgIcon("#iD-icon-note", "note-fill"));
      iconEnter.each(function(d) {
        var statusIcon;
        if (d.id < 0) {
          statusIcon = "#iD-icon-plus";
        } else if (d.status === "open") {
          statusIcon = "#iD-icon-close";
        } else {
          statusIcon = "#iD-icon-apply";
        }
        iconEnter.append("div").attr("class", "note-icon-annotation").call(svgIcon(statusIcon, "icon-annotation"));
      });
      headerEnter.append("div").attr("class", "note-header-label").html(function(d) {
        if (_note.isNew()) {
          return _t("note.new");
        }
        return _t("note.note") + " " + d.id + " " + (d.status === "closed" ? _t("note.closed") : "");
      });
    }
    noteHeader.note = function(val) {
      if (!arguments.length)
        return _note;
      _note = val;
      return noteHeader;
    };
    return noteHeader;
  }

  // modules/ui/note_report.js
  function uiNoteReport() {
    var _note;
    function noteReport(selection2) {
      var url;
      if (services.osm && _note instanceof osmNote && !_note.isNew()) {
        url = services.osm.noteReportURL(_note);
      }
      var link2 = selection2.selectAll(".note-report").data(url ? [url] : []);
      link2.exit().remove();
      var linkEnter = link2.enter().append("a").attr("class", "note-report").attr("target", "_blank").attr("href", function(d) {
        return d;
      }).call(svgIcon("#iD-icon-out-link", "inline"));
      linkEnter.append("span").html(_t.html("note.report"));
    }
    noteReport.note = function(val) {
      if (!arguments.length)
        return _note;
      _note = val;
      return noteReport;
    };
    return noteReport;
  }

  // modules/ui/view_on_osm.js
  init_slicedToArray();
  var preferredLanguage = utilDetect().browserLocales[0];
  function timeSince(date) {
    var seconds = Math.floor((new Date() - date) / 1e3);
    var s = function s2(n2) {
      return Math.floor(seconds / n2);
    };
    if (s(60 * 60 * 24 * 365) > 1)
      return [s(60 * 60 * 24 * 365), "years"];
    if (s(60 * 60 * 24 * 30) > 1)
      return [s(60 * 60 * 24 * 30), "months"];
    if (s(60 * 60 * 24) > 1)
      return [s(60 * 60 * 24), "days"];
    if (s(60 * 60) > 1)
      return [s(60 * 60), "hours"];
    if (s(60) > 1)
      return [s(60), "minutes"];
    return [s(1), "seconds"];
  }
  function getRelativeDate(date) {
    if (typeof Intl === "undefined" || typeof Intl.RelativeTimeFormat === "undefined") {
      return "on ".concat(date.toLocaleDateString(preferredLanguage));
    }
    var _timeSince = timeSince(date), _timeSince2 = _slicedToArray(_timeSince, 2), number3 = _timeSince2[0], units = _timeSince2[1];
    if (!Number.isFinite(number3))
      return "-";
    return new Intl.RelativeTimeFormat(preferredLanguage).format(-number3, units);
  }
  function uiViewOnOSM(context) {
    var _what;
    function viewOnOSM(selection2) {
      var url;
      if (_what instanceof osmEntity) {
        url = context.connection().entityURL(_what);
      } else if (_what instanceof osmNote) {
        url = context.connection().noteURL(_what);
      }
      var data2 = !_what || _what.isNew() ? [] : [_what];
      var link2 = selection2.selectAll(".view-on-osm").data(data2, function(d) {
        return d.id;
      });
      link2.exit().remove();
      var linkEnter = link2.enter().append("a").attr("class", "view-on-osm").attr("target", "_blank").attr("href", url).call(svgIcon("#iD-icon-out-link", "inline"));
      var timeago = _what ? getRelativeDate(new Date(_what.timestamp)) : "-";
      linkEnter.append("span").html(_t.html("inspector.last_modified", {
        timeago: timeago,
        user: _what ? _what.user : "-"
      }));
    }
    viewOnOSM.what = function(_2) {
      if (!arguments.length)
        return _what;
      _what = _2;
      return viewOnOSM;
    };
    return viewOnOSM;
  }

  // modules/ui/note_editor.js
  function uiNoteEditor(context) {
    var dispatch12 = dispatch_default("change");
    var noteComments = uiNoteComments(context);
    var noteHeader = uiNoteHeader();
    var _note;
    var _newNote;
    function noteEditor(selection2) {
      var header = selection2.selectAll(".header").data([0]);
      var headerEnter = header.enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "close").on("click", function() {
        context.enter(modeBrowse(context));
      }).call(svgIcon("#iD-icon-close"));
      headerEnter.append("h3").html(_t.html("note.title"));
      var body = selection2.selectAll(".body").data([0]);
      body = body.enter().append("div").attr("class", "body").merge(body);
      var editor = body.selectAll(".note-editor").data([0]);
      editor.enter().append("div").attr("class", "modal-section note-editor").merge(editor).call(noteHeader.note(_note)).call(noteComments.note(_note)).call(noteSaveSection);
      var footer = selection2.selectAll(".footer").data([0]);
      footer.enter().append("div").attr("class", "footer").merge(footer).call(uiViewOnOSM(context).what(_note)).call(uiNoteReport(context).note(_note));
      var osm = services.osm;
      if (osm) {
        osm.on("change.note-save", function() {
          selection2.call(noteEditor);
        });
      }
    }
    function noteSaveSection(selection2) {
      var isSelected = _note && _note.id === context.selectedNoteID();
      var noteSave = selection2.selectAll(".note-save").data(isSelected ? [_note] : [], function(d) {
        return d.status + d.id;
      });
      noteSave.exit().remove();
      var noteSaveEnter = noteSave.enter().append("div").attr("class", "note-save save-section cf");
      noteSaveEnter.append("h4").attr("class", ".note-save-header").html(function() {
        return _note.isNew() ? _t("note.newDescription") : _t("note.newComment");
      });
      var commentTextarea = noteSaveEnter.append("textarea").attr("class", "new-comment-input").attr("placeholder", _t("note.inputPlaceholder")).attr("maxlength", 1e3).property("value", function(d) {
        return d.newComment;
      }).call(utilNoAuto).on("keydown.note-input", keydown).on("input.note-input", changeInput).on("blur.note-input", changeInput);
      if (!commentTextarea.empty() && _newNote) {
        commentTextarea.node().focus();
      }
      noteSave = noteSaveEnter.merge(noteSave).call(userDetails2).call(noteSaveButtons);
      function keydown(d3_event) {
        if (!(d3_event.keyCode === 13 && d3_event.metaKey))
          return;
        var osm = services.osm;
        if (!osm)
          return;
        var hasAuth = osm.authenticated();
        if (!hasAuth)
          return;
        if (!_note.newComment)
          return;
        d3_event.preventDefault();
        select_default2(this).on("keydown.note-input", null);
        window.setTimeout(function() {
          if (_note.isNew()) {
            noteSave.selectAll(".save-button").node().focus();
            clickSave(_note);
          } else {
            noteSave.selectAll(".comment-button").node().focus();
            clickComment(_note);
          }
        }, 10);
      }
      function changeInput() {
        var input4 = select_default2(this);
        var val = input4.property("value").trim() || void 0;
        _note = _note.update({
          newComment: val
        });
        var osm = services.osm;
        if (osm) {
          osm.replaceNote(_note);
        }
        noteSave.call(noteSaveButtons);
      }
    }
    function userDetails2(selection2) {
      var detailSection = selection2.selectAll(".detail-section").data([0]);
      detailSection = detailSection.enter().append("div").attr("class", "detail-section").merge(detailSection);
      var osm = services.osm;
      if (!osm)
        return;
      var hasAuth = osm.authenticated();
      var authWarning = detailSection.selectAll(".auth-warning").data(hasAuth ? [] : [0]);
      authWarning.exit().transition().duration(200).style("opacity", 0).remove();
      var authEnter = authWarning.enter().insert("div", ".tag-reference-body").attr("class", "field-warning auth-warning").style("opacity", 0);
      authEnter.call(svgIcon("#iD-icon-alert", "inline"));
      authEnter.append("span").html(_t.html("note.login"));
      authEnter.append("a").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).append("span").html(_t.html("login")).on("click.note-login", function(d3_event) {
        d3_event.preventDefault();
        osm.authenticate();
      });
      authEnter.transition().duration(200).style("opacity", 1);
      var prose = detailSection.selectAll(".note-save-prose").data(hasAuth ? [0] : []);
      prose.exit().remove();
      prose = prose.enter().append("p").attr("class", "note-save-prose").html(_t.html("note.upload_explanation")).merge(prose);
      osm.userDetails(function(err, user) {
        if (err)
          return;
        var userLink = select_default2(document.createElement("div"));
        if (user.image_url) {
          userLink.append("img").attr("src", user.image_url).attr("class", "icon pre-text user-icon");
        }
        userLink.append("a").attr("class", "user-info").html(user.display_name).attr("href", osm.userURL(user.display_name)).attr("target", "_blank");
        prose.html(_t.html("note.upload_explanation_with_user", {
          user: userLink.html()
        }));
      });
    }
    function noteSaveButtons(selection2) {
      var osm = services.osm;
      var hasAuth = osm && osm.authenticated();
      var isSelected = _note && _note.id === context.selectedNoteID();
      var buttonSection = selection2.selectAll(".buttons").data(isSelected ? [_note] : [], function(d) {
        return d.status + d.id;
      });
      buttonSection.exit().remove();
      var buttonEnter = buttonSection.enter().append("div").attr("class", "buttons");
      if (_note.isNew()) {
        buttonEnter.append("button").attr("class", "button cancel-button secondary-action").html(_t.html("confirm.cancel"));
        buttonEnter.append("button").attr("class", "button save-button action").html(_t.html("note.save"));
      } else {
        buttonEnter.append("button").attr("class", "button status-button action");
        buttonEnter.append("button").attr("class", "button comment-button action").html(_t.html("note.comment"));
      }
      buttonSection = buttonSection.merge(buttonEnter);
      buttonSection.select(".cancel-button").on("click.cancel", clickCancel);
      buttonSection.select(".save-button").attr("disabled", isSaveDisabled).on("click.save", clickSave);
      buttonSection.select(".status-button").attr("disabled", hasAuth ? null : true).html(function(d) {
        var action = d.status === "open" ? "close" : "open";
        var andComment = d.newComment ? "_comment" : "";
        return _t("note." + action + andComment);
      }).on("click.status", clickStatus);
      buttonSection.select(".comment-button").attr("disabled", isSaveDisabled).on("click.comment", clickComment);
      function isSaveDisabled(d) {
        return hasAuth && d.status === "open" && d.newComment ? null : true;
      }
    }
    function clickCancel(d3_event, d) {
      this.blur();
      var osm = services.osm;
      if (osm) {
        osm.removeNote(d);
      }
      context.enter(modeBrowse(context));
      dispatch12.call("change");
    }
    function clickSave(d3_event, d) {
      this.blur();
      var osm = services.osm;
      if (osm) {
        osm.postNoteCreate(d, function(err, note) {
          dispatch12.call("change", note);
        });
      }
    }
    function clickStatus(d3_event, d) {
      this.blur();
      var osm = services.osm;
      if (osm) {
        var setStatus = d.status === "open" ? "closed" : "open";
        osm.postNoteUpdate(d, setStatus, function(err, note) {
          dispatch12.call("change", note);
        });
      }
    }
    function clickComment(d3_event, d) {
      this.blur();
      var osm = services.osm;
      if (osm) {
        osm.postNoteUpdate(d, d.status, function(err, note) {
          dispatch12.call("change", note);
        });
      }
    }
    noteEditor.note = function(val) {
      if (!arguments.length)
        return _note;
      _note = val;
      return noteEditor;
    };
    noteEditor.newNote = function(val) {
      if (!arguments.length)
        return _newNote;
      _newNote = val;
      return noteEditor;
    };
    return utilRebind(noteEditor, dispatch12, "on");
  }

  // modules/modes/select_note.js
  function modeSelectNote(context, selectedNoteID) {
    var mode = {
      id: "select-note",
      button: "browse"
    };
    var _keybinding = utilKeybinding("select-note");
    var _noteEditor = uiNoteEditor(context).on("change", function() {
      context.map().pan([0, 0]);
      var note = checkSelectedID();
      if (!note)
        return;
      context.ui().sidebar.show(_noteEditor.note(note));
    });
    var _behaviors = [behaviorBreathe(context), behaviorHover(context), behaviorSelect(context), behaviorLasso(context), modeDragNode(context).behavior, modeDragNote(context).behavior];
    var _newFeature = false;
    function checkSelectedID() {
      if (!services.osm)
        return;
      var note = services.osm.getNote(selectedNoteID);
      if (!note) {
        context.enter(modeBrowse(context));
      }
      return note;
    }
    function selectNote(d3_event, drawn) {
      if (!checkSelectedID())
        return;
      var selection2 = context.surface().selectAll(".layer-notes .note-" + selectedNoteID);
      if (selection2.empty()) {
        var source = d3_event && d3_event.type === "zoom" && d3_event.sourceEvent;
        if (drawn && source && (source.type === "pointermove" || source.type === "mousemove" || source.type === "touchmove")) {
          context.enter(modeBrowse(context));
        }
      } else {
        selection2.classed("selected", true);
        context.selectedNoteID(selectedNoteID);
      }
    }
    function esc2() {
      if (context.container().select(".combobox").size())
        return;
      context.enter(modeBrowse(context));
    }
    mode.zoomToSelected = function() {
      if (!services.osm)
        return;
      var note = services.osm.getNote(selectedNoteID);
      if (note) {
        context.map().centerZoomEase(note.loc, 20);
      }
    };
    mode.newFeature = function(val) {
      if (!arguments.length)
        return _newFeature;
      _newFeature = val;
      return mode;
    };
    mode.enter = function() {
      var note = checkSelectedID();
      if (!note)
        return;
      _behaviors.forEach(context.install);
      _keybinding.on(_t("inspector.zoom_to.key"), mode.zoomToSelected).on("\u238B", esc2, true);
      select_default2(document).call(_keybinding);
      selectNote();
      var sidebar = context.ui().sidebar;
      sidebar.show(_noteEditor.note(note).newNote(_newFeature));
      sidebar.expand(sidebar.intersects(note.extent()));
      context.map().on("drawn.select", selectNote);
    };
    mode.exit = function() {
      _behaviors.forEach(context.uninstall);
      select_default2(document).call(_keybinding.unbind);
      context.surface().selectAll(".layer-notes .selected").classed("selected hover", false);
      context.map().on("drawn.select", null);
      context.ui().sidebar.hide();
      context.selectedNoteID(null);
    };
    return mode;
  }

  // modules/modes/add_note.js
  function modeAddNote(context) {
    var mode = {
      id: "add-note",
      button: "note",
      description: _t.html("modes.add_note.description"),
      key: _t("modes.add_note.key")
    };
    var behavior = behaviorDraw(context).on("click", add2).on("cancel", cancel).on("finish", cancel);
    function add2(loc) {
      var osm = services.osm;
      if (!osm)
        return;
      var note = osmNote({
        loc: loc,
        status: "open",
        comments: []
      });
      osm.replaceNote(note);
      context.map().pan([0, 0]);
      context.selectedNoteID(note.id).enter(modeSelectNote(context, note.id).newFeature(true));
    }
    function cancel() {
      context.enter(modeBrowse(context));
    }
    mode.enter = function() {
      context.install(behavior);
    };
    mode.exit = function() {
      context.uninstall(behavior);
    };
    return mode;
  }

  // modules/util/jxon.js
  var JXON = new function() {
    var sValueProp = "keyValue", sAttributesProp = "keyAttributes", sAttrPref = "@", aCache = [], rIsNull = /^\s*$/, rIsBool = /^(?:true|false)$/i;
    function parseText(sValue) {
      if (rIsNull.test(sValue)) {
        return null;
      }
      if (rIsBool.test(sValue)) {
        return sValue.toLowerCase() === "true";
      }
      if (isFinite(sValue)) {
        return parseFloat(sValue);
      }
      if (isFinite(Date.parse(sValue))) {
        return new Date(sValue);
      }
      return sValue;
    }
    function EmptyTree() {
    }
    EmptyTree.prototype.toString = function() {
      return "null";
    };
    EmptyTree.prototype.valueOf = function() {
      return null;
    };
    function objectify(vValue) {
      return vValue === null ? new EmptyTree() : vValue instanceof Object ? vValue : new vValue.constructor(vValue);
    }
    function createObjTree(oParentNode, nVerb, bFreeze, bNesteAttr) {
      var nLevelStart = aCache.length, bChildren = oParentNode.hasChildNodes(), bAttributes = oParentNode.hasAttributes(), bHighVerb = Boolean(nVerb & 2);
      var sProp, vContent, nLength = 0, sCollectedTxt = "", vResult = bHighVerb ? {} : true;
      if (bChildren) {
        for (var oNode, nItem = 0; nItem < oParentNode.childNodes.length; nItem++) {
          oNode = oParentNode.childNodes.item(nItem);
          if (oNode.nodeType === 4) {
            sCollectedTxt += oNode.nodeValue;
          } else if (oNode.nodeType === 3) {
            sCollectedTxt += oNode.nodeValue.trim();
          } else if (oNode.nodeType === 1 && !oNode.prefix) {
            aCache.push(oNode);
          }
        }
      }
      var nLevelEnd = aCache.length, vBuiltVal = parseText(sCollectedTxt);
      if (!bHighVerb && (bChildren || bAttributes)) {
        vResult = nVerb === 0 ? objectify(vBuiltVal) : {};
      }
      for (var nElId = nLevelStart; nElId < nLevelEnd; nElId++) {
        sProp = aCache[nElId].nodeName.toLowerCase();
        vContent = createObjTree(aCache[nElId], nVerb, bFreeze, bNesteAttr);
        if (vResult.hasOwnProperty(sProp)) {
          if (vResult[sProp].constructor !== Array) {
            vResult[sProp] = [vResult[sProp]];
          }
          vResult[sProp].push(vContent);
        } else {
          vResult[sProp] = vContent;
          nLength++;
        }
      }
      if (bAttributes) {
        var nAttrLen = oParentNode.attributes.length, sAPrefix = bNesteAttr ? "" : sAttrPref, oAttrParent = bNesteAttr ? {} : vResult;
        for (var oAttrib, nAttrib = 0; nAttrib < nAttrLen; nLength++, nAttrib++) {
          oAttrib = oParentNode.attributes.item(nAttrib);
          oAttrParent[sAPrefix + oAttrib.name.toLowerCase()] = parseText(oAttrib.value.trim());
        }
        if (bNesteAttr) {
          if (bFreeze) {
            Object.freeze(oAttrParent);
          }
          vResult[sAttributesProp] = oAttrParent;
          nLength -= nAttrLen - 1;
        }
      }
      if (nVerb === 3 || (nVerb === 2 || nVerb === 1 && nLength > 0) && sCollectedTxt) {
        vResult[sValueProp] = vBuiltVal;
      } else if (!bHighVerb && nLength === 0 && sCollectedTxt) {
        vResult = vBuiltVal;
      }
      if (bFreeze && (bHighVerb || nLength > 0)) {
        Object.freeze(vResult);
      }
      aCache.length = nLevelStart;
      return vResult;
    }
    function loadObjTree(oXMLDoc, oParentEl, oParentObj) {
      var vValue, oChild;
      if (oParentObj instanceof String || oParentObj instanceof Number || oParentObj instanceof Boolean) {
        oParentEl.appendChild(oXMLDoc.createTextNode(oParentObj.toString()));
      } else if (oParentObj.constructor === Date) {
        oParentEl.appendChild(oXMLDoc.createTextNode(oParentObj.toGMTString()));
      }
      for (var sName in oParentObj) {
        vValue = oParentObj[sName];
        if (isFinite(sName) || vValue instanceof Function) {
          continue;
        }
        if (sName === sValueProp) {
          if (vValue !== null && vValue !== true) {
            oParentEl.appendChild(oXMLDoc.createTextNode(vValue.constructor === Date ? vValue.toGMTString() : String(vValue)));
          }
        } else if (sName === sAttributesProp) {
          for (var sAttrib in vValue) {
            oParentEl.setAttribute(sAttrib, vValue[sAttrib]);
          }
        } else if (sName.charAt(0) === sAttrPref) {
          oParentEl.setAttribute(sName.slice(1), vValue);
        } else if (vValue.constructor === Array) {
          for (var nItem = 0; nItem < vValue.length; nItem++) {
            oChild = oXMLDoc.createElement(sName);
            loadObjTree(oXMLDoc, oChild, vValue[nItem]);
            oParentEl.appendChild(oChild);
          }
        } else {
          oChild = oXMLDoc.createElement(sName);
          if (vValue instanceof Object) {
            loadObjTree(oXMLDoc, oChild, vValue);
          } else if (vValue !== null && vValue !== true) {
            oChild.appendChild(oXMLDoc.createTextNode(vValue.toString()));
          }
          oParentEl.appendChild(oChild);
        }
      }
    }
    this.build = function(oXMLParent, nVerbosity, bFreeze, bNesteAttributes) {
      var _nVerb = arguments.length > 1 && typeof nVerbosity === "number" ? nVerbosity & 3 : 1;
      return createObjTree(oXMLParent, _nVerb, bFreeze || false, arguments.length > 3 ? bNesteAttributes : _nVerb === 3);
    };
    this.unbuild = function(oObjTree) {
      var oNewDoc = document.implementation.createDocument("", "", null);
      loadObjTree(oNewDoc, oNewDoc, oObjTree);
      return oNewDoc;
    };
    this.stringify = function(oObjTree) {
      return new XMLSerializer().serializeToString(JXON.unbuild(oObjTree));
    };
  }();

  // modules/ui/conflicts.js
  function uiConflicts(context) {
    var dispatch12 = dispatch_default("cancel", "save");
    var keybinding = utilKeybinding("conflicts");
    var _origChanges;
    var _conflictList;
    var _shownConflictIndex;
    function keybindingOn() {
      select_default2(document).call(keybinding.on("\u238B", cancel, true));
    }
    function keybindingOff() {
      select_default2(document).call(keybinding.unbind);
    }
    function tryAgain() {
      keybindingOff();
      dispatch12.call("save");
    }
    function cancel() {
      keybindingOff();
      dispatch12.call("cancel");
    }
    function conflicts(selection2) {
      keybindingOn();
      var headerEnter = selection2.selectAll(".header").data([0]).enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "fr").on("click", cancel).call(svgIcon("#iD-icon-close"));
      headerEnter.append("h3").html(_t.html("save.conflict.header"));
      var bodyEnter = selection2.selectAll(".body").data([0]).enter().append("div").attr("class", "body fillL");
      var conflictsHelpEnter = bodyEnter.append("div").attr("class", "conflicts-help").html(_t.html("save.conflict.help"));
      var detected = utilDetect();
      var changeset = new osmChangeset();
      delete changeset.id;
      var data2 = JXON.stringify(changeset.osmChangeJXON(_origChanges));
      var blob = new Blob([data2], {
        type: "text/xml;charset=utf-8;"
      });
      var fileName = "changes.osc";
      var linkEnter = conflictsHelpEnter.selectAll(".download-changes").append("a").attr("class", "download-changes");
      if (detected.download) {
        linkEnter.attr("href", window.URL.createObjectURL(blob)).attr("download", fileName);
      } else {
        linkEnter.attr("target", "_blank").on("click.download", function() {
          navigator.msSaveBlob(blob, fileName);
        });
      }
      linkEnter.call(svgIcon("#iD-icon-load", "inline")).append("span").html(_t.html("save.conflict.download_changes"));
      bodyEnter.append("div").attr("class", "conflict-container fillL3").call(showConflict, 0);
      bodyEnter.append("div").attr("class", "conflicts-done").attr("opacity", 0).style("display", "none").html(_t.html("save.conflict.done"));
      var buttonsEnter = bodyEnter.append("div").attr("class", "buttons col12 joined conflicts-buttons");
      buttonsEnter.append("button").attr("disabled", _conflictList.length > 1).attr("class", "action conflicts-button col6").html(_t.html("save.title")).on("click.try_again", tryAgain);
      buttonsEnter.append("button").attr("class", "secondary-action conflicts-button col6").html(_t.html("confirm.cancel")).on("click.cancel", cancel);
    }
    function showConflict(selection2, index) {
      index = utilWrap(index, _conflictList.length);
      _shownConflictIndex = index;
      var parent2 = select_default2(selection2.node().parentNode);
      if (index === _conflictList.length - 1) {
        window.setTimeout(function() {
          parent2.select(".conflicts-button").attr("disabled", null);
          parent2.select(".conflicts-done").transition().attr("opacity", 1).style("display", "block");
        }, 250);
      }
      var conflict = selection2.selectAll(".conflict").data([_conflictList[index]]);
      conflict.exit().remove();
      var conflictEnter = conflict.enter().append("div").attr("class", "conflict");
      conflictEnter.append("h4").attr("class", "conflict-count").html(_t.html("save.conflict.count", {
        num: index + 1,
        total: _conflictList.length
      }));
      conflictEnter.append("a").attr("class", "conflict-description").attr("href", "#").html(function(d) {
        return d.name;
      }).on("click", function(d3_event, d) {
        d3_event.preventDefault();
        zoomToEntity(d.id);
      });
      var details = conflictEnter.append("div").attr("class", "conflict-detail-container");
      details.append("ul").attr("class", "conflict-detail-list").selectAll("li").data(function(d) {
        return d.details || [];
      }).enter().append("li").attr("class", "conflict-detail-item").html(function(d) {
        return d;
      });
      details.append("div").attr("class", "conflict-choices").call(addChoices);
      details.append("div").attr("class", "conflict-nav-buttons joined cf").selectAll("button").data(["previous", "next"]).enter().append("button").html(function(d) {
        return _t.html("save.conflict." + d);
      }).attr("class", "conflict-nav-button action col6").attr("disabled", function(d, i2) {
        return i2 === 0 && index === 0 || i2 === 1 && index === _conflictList.length - 1 || null;
      }).on("click", function(d3_event, d) {
        d3_event.preventDefault();
        var container = parent2.selectAll(".conflict-container");
        var sign2 = d === "previous" ? -1 : 1;
        container.selectAll(".conflict").remove();
        container.call(showConflict, index + sign2);
      });
    }
    function addChoices(selection2) {
      var choices = selection2.append("ul").attr("class", "layer-list").selectAll("li").data(function(d) {
        return d.choices || [];
      });
      var choicesEnter = choices.enter().append("li").attr("class", "layer");
      var labelEnter = choicesEnter.append("label");
      labelEnter.append("input").attr("type", "radio").attr("name", function(d) {
        return d.id;
      }).on("change", function(d3_event, d) {
        var ul = this.parentNode.parentNode.parentNode;
        ul.__data__.chosen = d.id;
        choose(d3_event, ul, d);
      });
      labelEnter.append("span").html(function(d) {
        return d.text;
      });
      choicesEnter.merge(choices).each(function(d) {
        var ul = this.parentNode;
        if (ul.__data__.chosen === d.id) {
          choose(null, ul, d);
        }
      });
    }
    function choose(d3_event, ul, datum2) {
      if (d3_event)
        d3_event.preventDefault();
      select_default2(ul).selectAll("li").classed("active", function(d) {
        return d === datum2;
      }).selectAll("input").property("checked", function(d) {
        return d === datum2;
      });
      var extent6 = new Extent();
      var entity2;
      entity2 = context.graph().hasEntity(datum2.id);
      if (entity2)
        extent6 = extent6.extend(entity2.extent(context.graph()));
      datum2.action();
      entity2 = context.graph().hasEntity(datum2.id);
      if (entity2)
        extent6 = extent6.extend(entity2.extent(context.graph()));
      zoomToEntity(datum2.id, extent6);
    }
    function zoomToEntity(id2, extent6) {
      context.surface().selectAll(".hover").classed("hover", false);
      var entity2 = context.graph().hasEntity(id2);
      if (entity2) {
        if (extent6) {
          context.map().trimmedExtent(extent6);
        } else {
          context.map().zoomToEase(entity2);
        }
        context.surface().selectAll(utilEntityOrMemberSelector([entity2.id], context.graph())).classed("hover", true);
      }
    }
    conflicts.conflictList = function(_2) {
      if (!arguments.length)
        return _conflictList;
      _conflictList = _2;
      return conflicts;
    };
    conflicts.origChanges = function(_2) {
      if (!arguments.length)
        return _origChanges;
      _origChanges = _2;
      return conflicts;
    };
    conflicts.shownEntityIds = function() {
      if (_conflictList && typeof _shownConflictIndex === "number") {
        return [_conflictList[_shownConflictIndex].id];
      }
      return [];
    };
    return utilRebind(conflicts, dispatch12, "on");
  }

  // modules/ui/confirm.js
  function uiConfirm(selection2) {
    var modalSelection = uiModal(selection2);
    modalSelection.select(".modal").classed("modal-alert", true);
    var section = modalSelection.select(".content");
    section.append("div").attr("class", "modal-section header");
    section.append("div").attr("class", "modal-section message-text");
    var buttons = section.append("div").attr("class", "modal-section buttons cf");
    modalSelection.okButton = function() {
      buttons.append("button").attr("class", "button ok-button action").on("click.confirm", function() {
        modalSelection.remove();
      }).html(_t.html("confirm.okay")).node().focus();
      return modalSelection;
    };
    return modalSelection;
  }

  // modules/ui/commit.js
  var import_fast_deep_equal9 = __toModule(require_fast_deep_equal());

  // modules/ui/combobox.js
  var _comboHideTimerID;
  function uiCombobox(context, klass) {
    var dispatch12 = dispatch_default("accept", "cancel");
    var container = context.container();
    var _suggestions = [];
    var _data = [];
    var _fetched = {};
    var _selected = null;
    var _canAutocomplete = true;
    var _caseSensitive = false;
    var _cancelFetch = false;
    var _minItems = 2;
    var _tDown = 0;
    var _mouseEnterHandler, _mouseLeaveHandler;
    var _fetcher = function _fetcher2(val, cb) {
      cb(_data.filter(function(d) {
        var terms = d.terms || [];
        terms.push(d.value);
        return terms.some(function(term) {
          return term.toString().toLowerCase().indexOf(val.toLowerCase()) !== -1;
        });
      }));
    };
    var combobox = function combobox2(input4, attachTo) {
      if (!input4 || input4.empty())
        return;
      input4.classed("combobox-input", true).on("focus.combo-input", focus).on("blur.combo-input", blur).on("keydown.combo-input", keydown).on("keyup.combo-input", keyup).on("input.combo-input", change).on("mousedown.combo-input", mousedown).each(function() {
        var parent2 = this.parentNode;
        var sibling = this.nextSibling;
        select_default2(parent2).selectAll(".combobox-caret").filter(function(d) {
          return d === input4.node();
        }).data([input4.node()]).enter().insert("div", function() {
          return sibling;
        }).attr("class", "combobox-caret").on("mousedown.combo-caret", function(d3_event) {
          d3_event.preventDefault();
          input4.node().focus();
          mousedown(d3_event);
        }).on("mouseup.combo-caret", function(d3_event) {
          d3_event.preventDefault();
          mouseup(d3_event);
        });
      });
      function mousedown(d3_event) {
        if (d3_event.button !== 0)
          return;
        _tDown = +new Date();
        var start2 = input4.property("selectionStart");
        var end = input4.property("selectionEnd");
        if (start2 !== end) {
          var val = utilGetSetValue(input4);
          input4.node().setSelectionRange(val.length, val.length);
          return;
        }
        input4.on("mouseup.combo-input", mouseup);
      }
      function mouseup(d3_event) {
        input4.on("mouseup.combo-input", null);
        if (d3_event.button !== 0)
          return;
        if (input4.node() !== document.activeElement)
          return;
        var start2 = input4.property("selectionStart");
        var end = input4.property("selectionEnd");
        if (start2 !== end)
          return;
        var combo = container.selectAll(".combobox");
        if (combo.empty() || combo.datum() !== input4.node()) {
          var tOrig = _tDown;
          window.setTimeout(function() {
            if (tOrig !== _tDown)
              return;
            fetchComboData("", function() {
              show();
              render();
            });
          }, 250);
        } else {
          hide();
        }
      }
      function focus() {
        fetchComboData("");
      }
      function blur() {
        _comboHideTimerID = window.setTimeout(hide, 75);
      }
      function show() {
        hide();
        container.insert("div", ":first-child").datum(input4.node()).attr("class", "combobox" + (klass ? " combobox-" + klass : "")).style("position", "absolute").style("display", "block").style("left", "0px").on("mousedown.combo-container", function(d3_event) {
          d3_event.preventDefault();
        });
        container.on("scroll.combo-scroll", render, true);
      }
      function hide() {
        if (_comboHideTimerID) {
          window.clearTimeout(_comboHideTimerID);
          _comboHideTimerID = void 0;
        }
        container.selectAll(".combobox").remove();
        container.on("scroll.combo-scroll", null);
      }
      function keydown(d3_event) {
        var shown = !container.selectAll(".combobox").empty();
        var tagName = input4.node() ? input4.node().tagName.toLowerCase() : "";
        switch (d3_event.keyCode) {
          case 8:
          case 46:
            d3_event.stopPropagation();
            _selected = null;
            render();
            input4.on("input.combo-input", function() {
              var start2 = input4.property("selectionStart");
              input4.node().setSelectionRange(start2, start2);
              input4.on("input.combo-input", change);
            });
            break;
          case 9:
            accept(d3_event);
            break;
          case 13:
            d3_event.preventDefault();
            d3_event.stopPropagation();
            break;
          case 38:
            if (tagName === "textarea" && !shown)
              return;
            d3_event.preventDefault();
            if (tagName === "input" && !shown) {
              show();
            }
            nav(-1);
            break;
          case 40:
            if (tagName === "textarea" && !shown)
              return;
            d3_event.preventDefault();
            if (tagName === "input" && !shown) {
              show();
            }
            nav(1);
            break;
        }
      }
      function keyup(d3_event) {
        switch (d3_event.keyCode) {
          case 27:
            cancel();
            break;
          case 13:
            accept(d3_event);
            break;
        }
      }
      function change() {
        fetchComboData(value2(), function() {
          _selected = null;
          var val = input4.property("value");
          if (_suggestions.length) {
            if (input4.property("selectionEnd") === val.length) {
              _selected = tryAutocomplete();
            }
            if (!_selected) {
              _selected = val;
            }
          }
          if (val.length) {
            var combo = container.selectAll(".combobox");
            if (combo.empty()) {
              show();
            }
          } else {
            hide();
          }
          render();
        });
      }
      function nav(dir) {
        if (_suggestions.length) {
          var index = -1;
          for (var i2 = 0; i2 < _suggestions.length; i2++) {
            if (_selected && _suggestions[i2].value === _selected) {
              index = i2;
              break;
            }
          }
          index = Math.max(Math.min(index + dir, _suggestions.length - 1), 0);
          _selected = _suggestions[index].value;
          input4.property("value", _selected);
        }
        render();
        ensureVisible();
      }
      function ensureVisible() {
        var combo = container.selectAll(".combobox");
        if (combo.empty())
          return;
        var containerRect = container.node().getBoundingClientRect();
        var comboRect = combo.node().getBoundingClientRect();
        if (comboRect.bottom > containerRect.bottom) {
          var node = attachTo ? attachTo.node() : input4.node();
          node.scrollIntoView({
            behavior: "instant",
            block: "center"
          });
          render();
        }
        var selected = combo.selectAll(".combobox-option.selected").node();
        if (selected) {
          selected.scrollIntoView({
            behavior: "smooth",
            block: "nearest"
          });
        }
      }
      function value2() {
        var value3 = input4.property("value");
        var start2 = input4.property("selectionStart");
        var end = input4.property("selectionEnd");
        if (start2 && end) {
          value3 = value3.substring(0, start2);
        }
        return value3;
      }
      function fetchComboData(v, cb) {
        _cancelFetch = false;
        _fetcher.call(input4, v, function(results) {
          if (_cancelFetch)
            return;
          _suggestions = results;
          results.forEach(function(d) {
            _fetched[d.value] = d;
          });
          if (cb) {
            cb();
          }
        });
      }
      function tryAutocomplete() {
        if (!_canAutocomplete)
          return;
        var val = _caseSensitive ? value2() : value2().toLowerCase();
        if (!val)
          return;
        if (!isNaN(parseFloat(val)) && isFinite(val))
          return;
        var bestIndex = -1;
        for (var i2 = 0; i2 < _suggestions.length; i2++) {
          var suggestion = _suggestions[i2].value;
          var compare = _caseSensitive ? suggestion : suggestion.toLowerCase();
          if (compare === val) {
            bestIndex = i2;
            break;
          } else if (bestIndex === -1 && compare.indexOf(val) === 0) {
            bestIndex = i2;
          }
        }
        if (bestIndex !== -1) {
          var bestVal = _suggestions[bestIndex].value;
          input4.property("value", bestVal);
          input4.node().setSelectionRange(val.length, bestVal.length);
          return bestVal;
        }
      }
      function render() {
        if (_suggestions.length < _minItems || document.activeElement !== input4.node()) {
          hide();
          return;
        }
        var shown = !container.selectAll(".combobox").empty();
        if (!shown)
          return;
        var combo = container.selectAll(".combobox");
        var options = combo.selectAll(".combobox-option").data(_suggestions, function(d) {
          return d.value;
        });
        options.exit().remove();
        options.enter().append("a").attr("class", function(d) {
          return "combobox-option " + (d.klass || "");
        }).attr("title", function(d) {
          return d.title;
        }).html(function(d) {
          return d.display || d.value;
        }).on("mouseenter", _mouseEnterHandler).on("mouseleave", _mouseLeaveHandler).merge(options).classed("selected", function(d) {
          return d.value === _selected;
        }).on("click.combo-option", accept).order();
        var node = attachTo ? attachTo.node() : input4.node();
        var containerRect = container.node().getBoundingClientRect();
        var rect = node.getBoundingClientRect();
        combo.style("left", rect.left + 5 - containerRect.left + "px").style("width", rect.width - 10 + "px").style("top", rect.height + rect.top - containerRect.top + "px");
      }
      function accept(d3_event, d) {
        _cancelFetch = true;
        var thiz = input4.node();
        if (d) {
          utilGetSetValue(input4, d.value);
          utilTriggerEvent(input4, "change");
        }
        var val = utilGetSetValue(input4);
        thiz.setSelectionRange(val.length, val.length);
        d = _fetched[val];
        dispatch12.call("accept", thiz, d, val);
        hide();
      }
      function cancel() {
        _cancelFetch = true;
        var thiz = input4.node();
        var val = utilGetSetValue(input4);
        var start2 = input4.property("selectionStart");
        var end = input4.property("selectionEnd");
        val = val.slice(0, start2) + val.slice(end);
        utilGetSetValue(input4, val);
        thiz.setSelectionRange(val.length, val.length);
        dispatch12.call("cancel", thiz);
        hide();
      }
    };
    combobox.canAutocomplete = function(val) {
      if (!arguments.length)
        return _canAutocomplete;
      _canAutocomplete = val;
      return combobox;
    };
    combobox.caseSensitive = function(val) {
      if (!arguments.length)
        return _caseSensitive;
      _caseSensitive = val;
      return combobox;
    };
    combobox.data = function(val) {
      if (!arguments.length)
        return _data;
      _data = val;
      return combobox;
    };
    combobox.fetcher = function(val) {
      if (!arguments.length)
        return _fetcher;
      _fetcher = val;
      return combobox;
    };
    combobox.minItems = function(val) {
      if (!arguments.length)
        return _minItems;
      _minItems = val;
      return combobox;
    };
    combobox.itemsMouseEnter = function(val) {
      if (!arguments.length)
        return _mouseEnterHandler;
      _mouseEnterHandler = val;
      return combobox;
    };
    combobox.itemsMouseLeave = function(val) {
      if (!arguments.length)
        return _mouseLeaveHandler;
      _mouseLeaveHandler = val;
      return combobox;
    };
    return utilRebind(combobox, dispatch12, "on");
  }
  uiCombobox.off = function(input4, context) {
    input4.on("focus.combo-input", null).on("blur.combo-input", null).on("keydown.combo-input", null).on("keyup.combo-input", null).on("input.combo-input", null).on("mousedown.combo-input", null).on("mouseup.combo-input", null);
    context.container().on("scroll.combo-scroll", null);
  };

  // modules/ui/field_help.js
  var import_marked = __toModule(require_marked());

  // modules/ui/intro/helper.js
  function pointBox(loc, context) {
    var rect = context.surfaceRect();
    var point5 = context.curtainProjection(loc);
    return {
      left: point5[0] + rect.left - 40,
      top: point5[1] + rect.top - 60,
      width: 80,
      height: 90
    };
  }
  function pad(locOrBox, padding, context) {
    var box;
    if (locOrBox instanceof Array) {
      var rect = context.surfaceRect();
      var point5 = context.curtainProjection(locOrBox);
      box = {
        left: point5[0] + rect.left,
        top: point5[1] + rect.top
      };
    } else {
      box = locOrBox;
    }
    return {
      left: box.left - padding,
      top: box.top - padding,
      width: (box.width || 0) + 2 * padding,
      height: (box.width || 0) + 2 * padding
    };
  }
  function icon(name, svgklass, useklass) {
    return '<svg class="icon ' + (svgklass || "") + '"><use xlink:href="' + name + '"' + (useklass ? ' class="' + useklass + '"' : "") + "></use></svg>";
  }
  var helpStringReplacements;
  function helpHtml(id2, replacements) {
    if (!helpStringReplacements) {
      helpStringReplacements = {
        point_icon: icon("#iD-icon-point", "inline"),
        line_icon: icon("#iD-icon-line", "inline"),
        area_icon: icon("#iD-icon-area", "inline"),
        note_icon: icon("#iD-icon-note", "inline add-note"),
        plus: icon("#iD-icon-plus", "inline"),
        minus: icon("#iD-icon-minus", "inline"),
        layers_icon: icon("#iD-icon-layers", "inline"),
        data_icon: icon("#iD-icon-data", "inline"),
        inspect: icon("#iD-icon-inspect", "inline"),
        help_icon: icon("#iD-icon-help", "inline"),
        undo_icon: icon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-redo" : "#iD-icon-undo", "inline"),
        redo_icon: icon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-undo" : "#iD-icon-redo", "inline"),
        save_icon: icon("#iD-icon-save", "inline"),
        circularize_icon: icon("#iD-operation-circularize", "inline operation"),
        continue_icon: icon("#iD-operation-continue", "inline operation"),
        copy_icon: icon("#iD-operation-copy", "inline operation"),
        delete_icon: icon("#iD-operation-delete", "inline operation"),
        disconnect_icon: icon("#iD-operation-disconnect", "inline operation"),
        downgrade_icon: icon("#iD-operation-downgrade", "inline operation"),
        extract_icon: icon("#iD-operation-extract", "inline operation"),
        merge_icon: icon("#iD-operation-merge", "inline operation"),
        move_icon: icon("#iD-operation-move", "inline operation"),
        orthogonalize_icon: icon("#iD-operation-orthogonalize", "inline operation"),
        paste_icon: icon("#iD-operation-paste", "inline operation"),
        reflect_long_icon: icon("#iD-operation-reflect-long", "inline operation"),
        reflect_short_icon: icon("#iD-operation-reflect-short", "inline operation"),
        reverse_icon: icon("#iD-operation-reverse", "inline operation"),
        rotate_icon: icon("#iD-operation-rotate", "inline operation"),
        split_icon: icon("#iD-operation-split", "inline operation"),
        straighten_icon: icon("#iD-operation-straighten", "inline operation"),
        leftclick: icon("#iD-walkthrough-mouse-left", "inline operation"),
        rightclick: icon("#iD-walkthrough-mouse-right", "inline operation"),
        mousewheel_icon: icon("#iD-walkthrough-mousewheel", "inline operation"),
        tap_icon: icon("#iD-walkthrough-tap", "inline operation"),
        doubletap_icon: icon("#iD-walkthrough-doubletap", "inline operation"),
        longpress_icon: icon("#iD-walkthrough-longpress", "inline operation"),
        touchdrag_icon: icon("#iD-walkthrough-touchdrag", "inline operation"),
        pinch_icon: icon("#iD-walkthrough-pinch-apart", "inline operation"),
        shift: uiCmd.display("\u21E7"),
        alt: uiCmd.display("\u2325"),
        return: uiCmd.display("\u21B5"),
        esc: _t.html("shortcuts.key.esc"),
        space: _t.html("shortcuts.key.space"),
        add_note_key: _t.html("modes.add_note.key"),
        help_key: _t.html("help.key"),
        shortcuts_key: _t.html("shortcuts.toggle.key"),
        save: _t.html("save.title"),
        undo: _t.html("undo.title"),
        redo: _t.html("redo.title"),
        upload: _t.html("commit.save"),
        point: _t.html("modes.add_point.title"),
        line: _t.html("modes.add_line.title"),
        area: _t.html("modes.add_area.title"),
        note: _t.html("modes.add_note.label"),
        circularize: _t.html("operations.circularize.title"),
        continue: _t.html("operations.continue.title"),
        copy: _t.html("operations.copy.title"),
        delete: _t.html("operations.delete.title"),
        disconnect: _t.html("operations.disconnect.title"),
        downgrade: _t.html("operations.downgrade.title"),
        extract: _t.html("operations.extract.title"),
        merge: _t.html("operations.merge.title"),
        move: _t.html("operations.move.title"),
        orthogonalize: _t.html("operations.orthogonalize.title"),
        paste: _t.html("operations.paste.title"),
        reflect_long: _t.html("operations.reflect.title.long"),
        reflect_short: _t.html("operations.reflect.title.short"),
        reverse: _t.html("operations.reverse.title"),
        rotate: _t.html("operations.rotate.title"),
        split: _t.html("operations.split.title"),
        straighten: _t.html("operations.straighten.title"),
        map_data: _t.html("map_data.title"),
        osm_notes: _t.html("map_data.layers.notes.title"),
        fields: _t.html("inspector.fields"),
        tags: _t.html("inspector.tags"),
        relations: _t.html("inspector.relations"),
        new_relation: _t.html("inspector.new_relation"),
        turn_restrictions: _t.html("_tagging.presets.fields.restrictions.label"),
        background_settings: _t.html("background.description"),
        imagery_offset: _t.html("background.fix_misalignment"),
        start_the_walkthrough: _t.html("splash.walkthrough"),
        help: _t.html("help.title"),
        ok: _t.html("intro.ok")
      };
    }
    var reps;
    if (replacements) {
      reps = Object.assign(replacements, helpStringReplacements);
    } else {
      reps = helpStringReplacements;
    }
    return _t.html(id2, reps).replace(/\`(.*?)\`/g, "<kbd>$1</kbd>");
  }
  function slugify(text) {
    return text.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  }
  var missingStrings = {};
  function checkKey(key, text) {
    if (_t(key, {
      default: void 0
    }) === void 0) {
      if (missingStrings.hasOwnProperty(key))
        return;
      missingStrings[key] = text;
      var missing = key + ": " + text;
      if (typeof console !== "undefined")
        console.log(missing);
    }
  }
  function localize(obj) {
    var key;
    var name = obj.tags && obj.tags.name;
    if (name) {
      key = "intro.graph.name." + slugify(name);
      obj.tags.name = _t(key, {
        default: name
      });
      checkKey(key, name);
    }
    var street = obj.tags && obj.tags["addr:street"];
    if (street) {
      key = "intro.graph.name." + slugify(street);
      obj.tags["addr:street"] = _t(key, {
        default: street
      });
      checkKey(key, street);
      var addrTags = ["block_number", "city", "county", "district", "hamlet", "neighbourhood", "postcode", "province", "quarter", "state", "subdistrict", "suburb"];
      addrTags.forEach(function(k) {
        var key2 = "intro.graph." + k;
        var tag = "addr:" + k;
        var val = obj.tags && obj.tags[tag];
        var str = _t(key2, {
          default: val
        });
        if (str) {
          if (str.match(/^<.*>$/) !== null) {
            delete obj.tags[tag];
          } else {
            obj.tags[tag] = str;
          }
        }
      });
    }
    return obj;
  }
  function isMostlySquare(points) {
    var threshold = 15;
    var lowerBound = Math.cos((90 - threshold) * Math.PI / 180);
    var upperBound = Math.cos(threshold * Math.PI / 180);
    for (var i2 = 0; i2 < points.length; i2++) {
      var a = points[(i2 - 1 + points.length) % points.length];
      var origin = points[i2];
      var b2 = points[(i2 + 1) % points.length];
      var dotp = vecNormalizedDot(a, b2, origin);
      var mag = Math.abs(dotp);
      if (mag > lowerBound && mag < upperBound) {
        return false;
      }
    }
    return true;
  }
  function selectMenuItem(context, operation) {
    return context.container().select(".edit-menu .edit-menu-item-" + operation);
  }
  function transitionTime(point1, point22) {
    var distance = geoSphericalDistance(point1, point22);
    if (distance === 0) {
      return 0;
    } else if (distance < 80) {
      return 500;
    } else {
      return 1e3;
    }
  }

  // modules/ui/field_help.js
  function uiFieldHelp(context, fieldName) {
    var fieldHelp = {};
    var _inspector = select_default2(null);
    var _wrap = select_default2(null);
    var _body = select_default2(null);
    var fieldHelpKeys = {
      restrictions: [["about", ["about", "from_via_to", "maxdist", "maxvia"]], ["inspecting", ["about", "from_shadow", "allow_shadow", "restrict_shadow", "only_shadow", "restricted", "only"]], ["modifying", ["about", "indicators", "allow_turn", "restrict_turn", "only_turn"]], ["tips", ["simple", "simple_example", "indirect", "indirect_example", "indirect_noedit"]]]
    };
    var fieldHelpHeadings = {};
    var replacements = {
      distField: _t.html("restriction.controls.distance"),
      viaField: _t.html("restriction.controls.via"),
      fromShadow: icon("#iD-turn-shadow", "inline shadow from"),
      allowShadow: icon("#iD-turn-shadow", "inline shadow allow"),
      restrictShadow: icon("#iD-turn-shadow", "inline shadow restrict"),
      onlyShadow: icon("#iD-turn-shadow", "inline shadow only"),
      allowTurn: icon("#iD-turn-yes", "inline turn"),
      restrictTurn: icon("#iD-turn-no", "inline turn"),
      onlyTurn: icon("#iD-turn-only", "inline turn")
    };
    var docs2 = fieldHelpKeys[fieldName].map(function(key) {
      var helpkey = "help.field." + fieldName + "." + key[0];
      var text = key[1].reduce(function(all, part) {
        var subkey = helpkey + "." + part;
        var depth = fieldHelpHeadings[subkey];
        var hhh = depth ? Array(depth + 1).join("#") + " " : "";
        return all + hhh + _t.html(subkey, replacements) + "\n\n";
      }, "");
      return {
        key: helpkey,
        title: _t.html(helpkey + ".title"),
        html: (0, import_marked.default)(text.trim())
      };
    });
    function show() {
      updatePosition();
      _body.classed("hide", false).style("opacity", "0").transition().duration(200).style("opacity", "1");
    }
    function hide() {
      _body.classed("hide", true).transition().duration(200).style("opacity", "0").on("end", function() {
        _body.classed("hide", true);
      });
    }
    function clickHelp(index) {
      var d = docs2[index];
      var tkeys = fieldHelpKeys[fieldName][index][1];
      _body.selectAll(".field-help-nav-item").classed("active", function(d2, i2) {
        return i2 === index;
      });
      var content = _body.selectAll(".field-help-content").html(d.html);
      content.selectAll("p").attr("class", function(d2, i2) {
        return tkeys[i2];
      });
      if (d.key === "help.field.restrictions.inspecting") {
        content.insert("img", "p.from_shadow").attr("class", "field-help-image cf").attr("src", context.imagePath("tr_inspect.gif"));
      } else if (d.key === "help.field.restrictions.modifying") {
        content.insert("img", "p.allow_turn").attr("class", "field-help-image cf").attr("src", context.imagePath("tr_modify.gif"));
      }
    }
    fieldHelp.button = function(selection2) {
      if (_body.empty())
        return;
      var button = selection2.selectAll(".field-help-button").data([0]);
      button.enter().append("button").attr("class", "field-help-button").call(svgIcon("#iD-icon-help")).merge(button).on("click", function(d3_event) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        if (_body.classed("hide")) {
          show();
        } else {
          hide();
        }
      });
    };
    function updatePosition() {
      var wrap2 = _wrap.node();
      var inspector = _inspector.node();
      var wRect = wrap2.getBoundingClientRect();
      var iRect = inspector.getBoundingClientRect();
      _body.style("top", wRect.top + inspector.scrollTop - iRect.top + "px");
    }
    fieldHelp.body = function(selection2) {
      _wrap = selection2.selectAll(".form-field-input-wrap");
      if (_wrap.empty())
        return;
      _inspector = context.container().select(".sidebar .entity-editor-pane .inspector-body");
      if (_inspector.empty())
        return;
      _body = _inspector.selectAll(".field-help-body").data([0]);
      var enter = _body.enter().append("div").attr("class", "field-help-body hide");
      var titleEnter = enter.append("div").attr("class", "field-help-title cf");
      titleEnter.append("h2").attr("class", _mainLocalizer.textDirection() === "rtl" ? "fr" : "fl").html(_t.html("help.field." + fieldName + ".title"));
      titleEnter.append("button").attr("class", "fr close").on("click", function(d3_event) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        hide();
      }).call(svgIcon("#iD-icon-close"));
      var navEnter = enter.append("div").attr("class", "field-help-nav cf");
      var titles = docs2.map(function(d) {
        return d.title;
      });
      navEnter.selectAll(".field-help-nav-item").data(titles).enter().append("div").attr("class", "field-help-nav-item").html(function(d) {
        return d;
      }).on("click", function(d3_event, d) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        clickHelp(titles.indexOf(d));
      });
      enter.append("div").attr("class", "field-help-content");
      _body = _body.merge(enter);
      clickHelp(0);
    };
    return fieldHelp;
  }

  // modules/ui/fields/check.js
  function uiFieldCheck(field, context) {
    var dispatch12 = dispatch_default("change");
    var options = field.options;
    var values2 = [];
    var texts = [];
    var _tags;
    var input4 = select_default2(null);
    var text = select_default2(null);
    var label = select_default2(null);
    var reverser = select_default2(null);
    var _impliedYes;
    var _entityIDs = [];
    var _value;
    if (options) {
      for (var i2 in options) {
        var v = options[i2];
        values2.push(v === "undefined" ? void 0 : v);
        texts.push(field.t.html("options." + v, {
          "default": v
        }));
      }
    } else {
      values2 = [void 0, "yes"];
      texts = [_t.html("inspector.unknown"), _t.html("inspector.check.yes")];
      if (field.type !== "defaultCheck") {
        values2.push("no");
        texts.push(_t.html("inspector.check.no"));
      }
    }
    function checkImpliedYes() {
      _impliedYes = field.id === "oneway_yes";
      if (field.id === "oneway") {
        var entity2 = context.entity(_entityIDs[0]);
        for (var key in entity2.tags) {
          if (key in osmOneWayTags && entity2.tags[key] in osmOneWayTags[key]) {
            _impliedYes = true;
            texts[0] = _t.html("_tagging.presets.fields.oneway_yes.options.undefined");
            break;
          }
        }
      }
    }
    function reverserHidden() {
      if (!context.container().select("div.inspector-hover").empty())
        return true;
      return !(_value === "yes" || _impliedYes && !_value);
    }
    function reverserSetText(selection2) {
      var entity2 = _entityIDs.length && context.hasEntity(_entityIDs[0]);
      if (reverserHidden() || !entity2)
        return selection2;
      var first2 = entity2.first();
      var last3 = entity2.isClosed() ? entity2.nodes[entity2.nodes.length - 2] : entity2.last();
      var pseudoDirection = first2 < last3;
      var icon2 = pseudoDirection ? "#iD-icon-forward" : "#iD-icon-backward";
      selection2.selectAll(".reverser-span").html(_t.html("inspector.check.reverser")).call(svgIcon(icon2, "inline"));
      return selection2;
    }
    var check = function check2(selection2) {
      checkImpliedYes();
      label = selection2.selectAll(".form-field-input-wrap").data([0]);
      var enter = label.enter().append("label").attr("class", "form-field-input-wrap form-field-input-check");
      enter.append("input").property("indeterminate", field.type !== "defaultCheck").attr("type", "checkbox").attr("id", field.domId);
      enter.append("span").html(texts[0]).attr("class", "value");
      if (field.type === "onewayCheck") {
        enter.append("button").attr("class", "reverser" + (reverserHidden() ? " hide" : "")).append("span").attr("class", "reverser-span");
      }
      label = label.merge(enter);
      input4 = label.selectAll("input");
      text = label.selectAll("span.value");
      input4.on("click", function(d3_event) {
        d3_event.stopPropagation();
        var t = {};
        if (Array.isArray(_tags[field.key])) {
          if (values2.indexOf("yes") !== -1) {
            t[field.key] = "yes";
          } else {
            t[field.key] = values2[0];
          }
        } else {
          t[field.key] = values2[(values2.indexOf(_value) + 1) % values2.length];
        }
        if (t[field.key] === "reversible" || t[field.key] === "alternating") {
          t[field.key] = values2[0];
        }
        dispatch12.call("change", this, t);
      });
      if (field.type === "onewayCheck") {
        reverser = label.selectAll(".reverser");
        reverser.call(reverserSetText).on("click", function(d3_event) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
          context.perform(function(graph3) {
            for (var i3 in _entityIDs) {
              graph3 = actionReverse(_entityIDs[i3])(graph3);
            }
            return graph3;
          }, _t("operations.reverse.annotation.line", {
            n: 1
          }));
          context.validator().validate();
          select_default2(this).call(reverserSetText);
        });
      }
    };
    check.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return check;
    };
    check.tags = function(tags) {
      _tags = tags;
      function isChecked(val) {
        return val !== "no" && val !== "" && val !== void 0 && val !== null;
      }
      function textFor(val) {
        if (val === "")
          val = void 0;
        var index = values2.indexOf(val);
        return index !== -1 ? texts[index] : '"' + val + '"';
      }
      checkImpliedYes();
      var isMixed = Array.isArray(tags[field.key]);
      _value = !isMixed && tags[field.key] && tags[field.key].toLowerCase();
      if (field.type === "onewayCheck" && (_value === "1" || _value === "-1")) {
        _value = "yes";
      }
      input4.property("indeterminate", isMixed || field.type !== "defaultCheck" && !_value).property("checked", isChecked(_value));
      text.html(isMixed ? _t.html("inspector.multiple_values") : textFor(_value)).classed("mixed", isMixed);
      label.classed("set", !!_value);
      if (field.type === "onewayCheck") {
        reverser.classed("hide", reverserHidden()).call(reverserSetText);
      }
    };
    check.focus = function() {
      input4.node().focus();
    };
    return utilRebind(check, dispatch12, "on");
  }

  // modules/ui/fields/combo.js
  function uiFieldCombo(field, context) {
    var dispatch12 = dispatch_default("change");
    var _isMulti = field.type === "multiCombo" || field.type === "manyCombo";
    var _isNetwork = field.type === "networkCombo";
    var _isSemi = field.type === "semiCombo";
    var _optarray = field.options;
    var _showTagInfoSuggestions = field.type !== "manyCombo" && field.autoSuggestions !== false;
    var _allowCustomValues = field.type !== "manyCombo" && field.customValues !== false;
    var _snake_case = field.snake_case || field.snake_case === void 0;
    var _combobox = uiCombobox(context, "combo-" + field.safeid).caseSensitive(field.caseSensitive).minItems(_isMulti || _isSemi ? 1 : 2);
    var _container = select_default2(null);
    var _inputWrap = select_default2(null);
    var _input = select_default2(null);
    var _comboData = [];
    var _multiData = [];
    var _entityIDs = [];
    var _tags;
    var _countryCode;
    var _staticPlaceholder;
    var _dataDeprecated = [];
    _mainFileFetcher.get("deprecated").then(function(d) {
      _dataDeprecated = d;
    }).catch(function() {
    });
    if (_isMulti && field.key && /[^:]$/.test(field.key)) {
      field.key += ":";
    }
    function snake(s) {
      return s.replace(/\s+/g, "_").toLowerCase();
    }
    function clean2(s) {
      return s.split(";").map(function(s2) {
        return s2.trim();
      }).join(";");
    }
    function tagValue(dval) {
      dval = clean2(dval || "");
      var found = _comboData.find(function(o2) {
        return o2.key && clean2(o2.value) === dval;
      });
      if (found)
        return found.key;
      if (field.type === "typeCombo" && !dval) {
        return "yes";
      }
      return (_snake_case ? snake(dval) : dval) || void 0;
    }
    function displayValue(tval) {
      tval = tval || "";
      if (field.hasTextForStringId("options." + tval)) {
        return field.t("options." + tval, {
          default: tval
        });
      }
      if (field.type === "typeCombo" && tval.toLowerCase() === "yes") {
        return "";
      }
      return tval;
    }
    function objectDifference(a, b2) {
      return a.filter(function(d1) {
        return !b2.some(function(d2) {
          return !d2.isMixed && d1.value === d2.value;
        });
      });
    }
    function initCombo(selection2, attachTo) {
      if (!_allowCustomValues) {
        selection2.attr("readonly", "readonly");
      }
      if (_showTagInfoSuggestions && services.taginfo) {
        selection2.call(_combobox.fetcher(setTaginfoValues), attachTo);
        setTaginfoValues("", setPlaceholder);
      } else {
        selection2.call(_combobox, attachTo);
        setStaticValues(setPlaceholder);
      }
    }
    function setStaticValues(callback) {
      if (!_optarray)
        return;
      _comboData = _optarray.map(function(v) {
        return {
          key: v,
          value: field.t("options." + v, {
            default: v
          }),
          title: v,
          display: field.t.html("options." + v, {
            default: v
          }),
          klass: field.hasTextForStringId("options." + v) ? "" : "raw-option"
        };
      });
      _combobox.data(objectDifference(_comboData, _multiData));
      if (callback)
        callback(_comboData);
    }
    function setTaginfoValues(q2, callback) {
      var fn = _isMulti ? "multikeys" : "values";
      var query = (_isMulti ? field.key : "") + q2;
      var hasCountryPrefix = _isNetwork && _countryCode && _countryCode.indexOf(q2.toLowerCase()) === 0;
      if (hasCountryPrefix) {
        query = _countryCode + ":";
      }
      var params = {
        debounce: q2 !== "",
        key: field.key,
        query: query
      };
      if (_entityIDs.length) {
        params.geometry = context.graph().geometry(_entityIDs[0]);
      }
      services.taginfo[fn](params, function(err, data2) {
        if (err)
          return;
        data2 = data2.filter(function(d) {
          if (field.type === "typeCombo" && d.value === "yes") {
            return false;
          }
          return !d.count || d.count > 10;
        });
        var deprecatedValues = osmEntity.deprecatedTagValuesByKey(_dataDeprecated)[field.key];
        if (deprecatedValues) {
          data2 = data2.filter(function(d) {
            return deprecatedValues.indexOf(d.value) === -1;
          });
        }
        if (hasCountryPrefix) {
          data2 = data2.filter(function(d) {
            return d.value.toLowerCase().indexOf(_countryCode + ":") === 0;
          });
        }
        _container.classed("empty-combobox", data2.length === 0);
        _comboData = data2.map(function(d) {
          var k = d.value;
          if (_isMulti)
            k = k.replace(field.key, "");
          var label = field.t("options." + k, {
            default: k
          });
          return {
            key: k,
            value: label,
            display: field.t.html("options." + k, {
              default: k
            }),
            title: d.title || label,
            klass: field.hasTextForStringId("options." + k) ? "" : "raw-option"
          };
        });
        _comboData = objectDifference(_comboData, _multiData);
        if (callback)
          callback(_comboData);
      });
    }
    function setPlaceholder(values2) {
      if (_isMulti || _isSemi) {
        _staticPlaceholder = field.placeholder() || _t("inspector.add");
      } else {
        var vals = values2.map(function(d) {
          return d.value;
        }).filter(function(s) {
          return s.length < 20;
        });
        var placeholders = vals.length > 1 ? vals : values2.map(function(d) {
          return d.key;
        });
        _staticPlaceholder = field.placeholder() || placeholders.slice(0, 3).join(", ");
      }
      if (!/(…|\.\.\.)$/.test(_staticPlaceholder)) {
        _staticPlaceholder += "\u2026";
      }
      var ph;
      if (!_isMulti && !_isSemi && _tags && Array.isArray(_tags[field.key])) {
        ph = _t("inspector.multiple_values");
      } else {
        ph = _staticPlaceholder;
      }
      _container.selectAll("input").attr("placeholder", ph);
    }
    function change() {
      var t = {};
      var val;
      if (_isMulti || _isSemi) {
        val = tagValue(utilGetSetValue(_input).replace(/,/g, ";")) || "";
        _container.classed("active", false);
        utilGetSetValue(_input, "");
        var vals = val.split(";").filter(Boolean);
        if (!vals.length)
          return;
        if (_isMulti) {
          utilArrayUniq(vals).forEach(function(v) {
            var key = (field.key || "") + v;
            if (_tags) {
              var old = _tags[key];
              if (typeof old === "string" && old.toLowerCase() !== "no")
                return;
            }
            key = context.cleanTagKey(key);
            field.keys.push(key);
            t[key] = "yes";
          });
        } else if (_isSemi) {
          var arr = _multiData.map(function(d) {
            return d.key;
          });
          arr = arr.concat(vals);
          t[field.key] = context.cleanTagValue(utilArrayUniq(arr).filter(Boolean).join(";"));
        }
        window.setTimeout(function() {
          _input.node().focus();
        }, 10);
      } else {
        var rawValue = utilGetSetValue(_input);
        if (!rawValue && Array.isArray(_tags[field.key]))
          return;
        val = context.cleanTagValue(tagValue(rawValue));
        t[field.key] = val || void 0;
      }
      dispatch12.call("change", this, t);
    }
    function isFbRoadId(entity2) {
      if (entity2.id) {
        return entity2.id.startswith("w-");
      } else {
        return false;
      }
    }
    function removeMultikey(d3_event, d) {
      d3_event.preventDefault();
      d3_event.stopPropagation();
      if (field.key === "source" && _entityIDs[0] && isFbRoadId(_entityIDs[0]) && (d.value === "digitalglobe" || d.value === "maxar"))
        return;
      var t = {};
      if (_isMulti) {
        t[d.key] = void 0;
      } else if (_isSemi) {
        var arr = _multiData.map(function(md) {
          return md.key === d.key ? null : md.key;
        }).filter(Boolean);
        arr = utilArrayUniq(arr);
        t[field.key] = arr.length ? arr.join(";") : void 0;
      }
      dispatch12.call("change", this, t);
    }
    function combo(selection2) {
      _container = selection2.selectAll(".form-field-input-wrap").data([0]);
      var type3 = _isMulti || _isSemi ? "multicombo" : "combo";
      _container = _container.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + type3).merge(_container);
      if (_isMulti || _isSemi) {
        _container = _container.selectAll(".chiplist").data([0]);
        var listClass = "chiplist";
        if (field.key === "destination" || field.key === "via") {
          listClass += " full-line-chips";
        }
        _container = _container.enter().append("ul").attr("class", listClass).on("click", function() {
          window.setTimeout(function() {
            _input.node().focus();
          }, 10);
        }).merge(_container);
        _inputWrap = _container.selectAll(".input-wrap").data([0]);
        _inputWrap = _inputWrap.enter().append("li").attr("class", "input-wrap").merge(_inputWrap);
        _input = _inputWrap.selectAll("input").data([0]);
      } else {
        _input = _container.selectAll("input").data([0]);
      }
      _input = _input.enter().append("input").attr("type", "text").attr("id", field.domId).call(utilNoAuto).call(initCombo, selection2).merge(_input);
      if (_isNetwork) {
        var extent6 = combinedEntityExtent();
        var countryCode2 = extent6 && iso1A2Code(extent6.center());
        _countryCode = countryCode2 && countryCode2.toLowerCase();
      }
      _input.on("change", change).on("blur", change);
      _input.on("keydown.field", function(d3_event) {
        switch (d3_event.keyCode) {
          case 13:
            _input.node().blur();
            d3_event.stopPropagation();
            break;
        }
      });
      if (_isMulti || _isSemi) {
        _combobox.on("accept", function() {
          _input.node().blur();
          _input.node().focus();
        });
        _input.on("focus", function() {
          _container.classed("active", true);
        });
      }
    }
    combo.tags = function(tags) {
      _tags = tags;
      if (_isMulti || _isSemi) {
        _multiData = [];
        var maxLength;
        if (_isMulti) {
          for (var k in tags) {
            if (field.key && k.indexOf(field.key) !== 0)
              continue;
            if (!field.key && field.keys.indexOf(k) === -1)
              continue;
            var v = tags[k];
            if (!v || typeof v === "string" && v.toLowerCase() === "no")
              continue;
            var suffix = field.key ? k.substr(field.key.length) : k;
            _multiData.push({
              key: k,
              value: displayValue(suffix),
              isMixed: Array.isArray(v)
            });
          }
          if (field.key) {
            field.keys = _multiData.map(function(d) {
              return d.key;
            });
            maxLength = context.maxCharsForTagKey() - utilUnicodeCharsCount(field.key);
          } else {
            maxLength = context.maxCharsForTagKey();
          }
        } else if (_isSemi) {
          var allValues = [];
          var commonValues;
          if (Array.isArray(tags[field.key])) {
            tags[field.key].forEach(function(tagVal) {
              var thisVals = utilArrayUniq((tagVal || "").split(";")).filter(Boolean);
              allValues = allValues.concat(thisVals);
              if (!commonValues) {
                commonValues = thisVals;
              } else {
                commonValues = commonValues.filter(function(value2) {
                  return thisVals.includes(value2);
                });
              }
            });
            allValues = utilArrayUniq(allValues).filter(Boolean);
          } else {
            allValues = utilArrayUniq((tags[field.key] || "").split(";")).filter(Boolean);
            commonValues = allValues;
          }
          _multiData = allValues.map(function(v2) {
            return {
              key: v2,
              value: displayValue(v2),
              isMixed: !commonValues.includes(v2)
            };
          });
          var currLength = utilUnicodeCharsCount(commonValues.join(";"));
          maxLength = context.maxCharsForTagValue() - currLength;
          if (currLength > 0) {
            maxLength -= 1;
          }
        }
        maxLength = Math.max(0, maxLength);
        var allowDragAndDrop = _isSemi && !Array.isArray(tags[field.key]);
        var available = objectDifference(_comboData, _multiData);
        _combobox.data(available);
        var hideAdd = !_allowCustomValues && !available.length || maxLength <= 0;
        _container.selectAll(".chiplist .input-wrap").style("display", hideAdd ? "none" : null);
        var chips = _container.selectAll(".chip").data(_multiData);
        chips.exit().remove();
        var enter = chips.enter().insert("li", ".input-wrap").attr("class", "chip");
        enter.append("span");
        enter.append("a");
        chips = chips.merge(enter).order().classed("raw-value", function(d) {
          var k2 = d.key;
          if (_isMulti)
            k2 = k2.replace(field.key, "");
          return !field.hasTextForStringId("options." + k2);
        }).classed("draggable", allowDragAndDrop).classed("mixed", function(d) {
          return d.isMixed;
        }).attr("title", function(d) {
          return d.isMixed ? _t("inspector.unshared_value_tooltip") : null;
        });
        if (allowDragAndDrop) {
          registerDragAndDrop(chips);
        }
        chips.select("span").html(function(d) {
          return d.value;
        });
        chips.select("a").attr("href", "#").on("click", removeMultikey).attr("class", "remove").text(function(d) {
          return _entityIDs[0] && isFbRoadId(_entityIDs[0]) && field.key === "source" && (d.value === "digitalglobe" || d.value === "maxar") ? "" : "\xD7";
        });
      } else {
        var isMixed = Array.isArray(tags[field.key]);
        var mixedValues = isMixed && tags[field.key].map(function(val) {
          return displayValue(val);
        }).filter(Boolean);
        var showsValue = !isMixed && tags[field.key] && !(field.type === "typeCombo" && tags[field.key] === "yes");
        var isRawValue = showsValue && !field.hasTextForStringId("options." + tags[field.key]);
        var isKnownValue = showsValue && !isRawValue;
        var isReadOnly = !_allowCustomValues || isKnownValue;
        utilGetSetValue(_input, !isMixed ? displayValue(tags[field.key]) : "").classed("raw-value", isRawValue).classed("known-value", isKnownValue).attr("readonly", isReadOnly ? "readonly" : void 0).attr("title", isMixed ? mixedValues.join("\n") : void 0).attr("placeholder", isMixed ? _t("inspector.multiple_values") : _staticPlaceholder || "").classed("mixed", isMixed).on("keydown.deleteCapture", function(d3_event) {
          if (isReadOnly && isKnownValue && (d3_event.keyCode === utilKeybinding.keyCodes["\u232B"] || d3_event.keyCode === utilKeybinding.keyCodes["\u2326"])) {
            d3_event.preventDefault();
            d3_event.stopPropagation();
            var t = {};
            t[field.key] = void 0;
            dispatch12.call("change", this, t);
          }
        });
      }
    };
    function registerDragAndDrop(selection2) {
      var dragOrigin, targetIndex;
      selection2.call(drag_default().on("start", function(d3_event) {
        dragOrigin = {
          x: d3_event.x,
          y: d3_event.y
        };
        targetIndex = null;
      }).on("drag", function(d3_event) {
        var x2 = d3_event.x - dragOrigin.x, y = d3_event.y - dragOrigin.y;
        if (!select_default2(this).classed("dragging") && Math.sqrt(Math.pow(x2, 2) + Math.pow(y, 2)) <= 5)
          return;
        var index = selection2.nodes().indexOf(this);
        select_default2(this).classed("dragging", true);
        targetIndex = null;
        var targetIndexOffsetTop = null;
        var draggedTagWidth = select_default2(this).node().offsetWidth;
        if (field.key === "destination" || field.key === "via") {
          _container.selectAll(".chip").style("transform", function(d2, index2) {
            var node = select_default2(this).node();
            if (index === index2) {
              return "translate(" + x2 + "px, " + y + "px)";
            } else if (index2 > index && d3_event.y > node.offsetTop) {
              if (targetIndex === null || index2 > targetIndex) {
                targetIndex = index2;
              }
              return "translateY(-100%)";
            } else if (index2 < index && d3_event.y < node.offsetTop + node.offsetHeight) {
              if (targetIndex === null || index2 < targetIndex) {
                targetIndex = index2;
              }
              return "translateY(100%)";
            }
            return null;
          });
        } else {
          _container.selectAll(".chip").each(function(d2, index2) {
            var node = select_default2(this).node();
            if (index !== index2 && d3_event.x < node.offsetLeft + node.offsetWidth + 5 && d3_event.x > node.offsetLeft && d3_event.y < node.offsetTop + node.offsetHeight && d3_event.y > node.offsetTop) {
              targetIndex = index2;
              targetIndexOffsetTop = node.offsetTop;
            }
          }).style("transform", function(d2, index2) {
            var node = select_default2(this).node();
            if (index === index2) {
              return "translate(" + x2 + "px, " + y + "px)";
            }
            if (node.offsetTop === targetIndexOffsetTop) {
              if (index2 < index && index2 >= targetIndex) {
                return "translateX(" + draggedTagWidth + "px)";
              } else if (index2 > index && index2 <= targetIndex) {
                return "translateX(-" + draggedTagWidth + "px)";
              }
            }
            return null;
          });
        }
      }).on("end", function() {
        if (!select_default2(this).classed("dragging")) {
          return;
        }
        var index = selection2.nodes().indexOf(this);
        select_default2(this).classed("dragging", false);
        _container.selectAll(".chip").style("transform", null);
        if (typeof targetIndex === "number") {
          var element = _multiData[index];
          _multiData.splice(index, 1);
          _multiData.splice(targetIndex, 0, element);
          var t = {};
          if (_multiData.length) {
            t[field.key] = _multiData.map(function(element2) {
              return element2.key;
            }).join(";");
          } else {
            t[field.key] = void 0;
          }
          dispatch12.call("change", this, t);
        }
        dragOrigin = void 0;
        targetIndex = void 0;
      }));
    }
    combo.focus = function() {
      _input.node().focus();
    };
    combo.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return combo;
    };
    function combinedEntityExtent() {
      return _entityIDs && _entityIDs.length && utilTotalExtent(_entityIDs, context.graph());
    }
    return utilRebind(combo, dispatch12, "on");
  }

  // modules/ui/fields/input.js
  function uiFieldText(field, context) {
    var dispatch12 = dispatch_default("change");
    var input4 = select_default2(null);
    var outlinkButton = select_default2(null);
    var _entityIDs = [];
    var _tags;
    var _phoneFormats = {};
    if (field.type === "tel") {
      _mainFileFetcher.get("phone_formats").then(function(d) {
        _phoneFormats = d;
        updatePhonePlaceholder();
      }).catch(function() {
      });
    }
    function calcLocked() {
      var isLocked = (field.id === "brand" || field.id === "network" || field.id === "operator" || field.id === "flag") && _entityIDs.length && _entityIDs.some(function(entityID) {
        var entity2 = context.graph().hasEntity(entityID);
        if (!entity2)
          return false;
        if (entity2.tags.wikidata)
          return true;
        var preset = _mainPresetIndex.match(entity2, context.graph());
        var isSuggestion = preset && preset.suggestion;
        var which = field.id;
        return isSuggestion && !!entity2.tags[which] && !!entity2.tags[which + ":wikidata"];
      });
      field.locked(isLocked);
    }
    function i2(selection2) {
      calcLocked();
      var isLocked = field.locked();
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      input4 = wrap2.selectAll("input").data([0]);
      input4 = input4.enter().append("input").attr("type", field.type === "identifier" || field.type === "roadheight" ? "text" : field.type).attr("id", field.domId).classed(field.type, true).call(utilNoAuto).merge(input4);
      input4.classed("disabled", !!isLocked).attr("readonly", isLocked || null).on("input", change(true)).on("blur", change()).on("change", change());
      if (field.type === "tel") {
        updatePhonePlaceholder();
      } else if (field.type === "number") {
        var rtl = _mainLocalizer.textDirection() === "rtl";
        input4.attr("type", "text");
        var inc = field.increment;
        var buttons = wrap2.selectAll(".increment, .decrement").data(rtl ? [inc, -inc] : [-inc, inc]);
        buttons.enter().append("button").attr("class", function(d) {
          var which = d > 0 ? "increment" : "decrement";
          return "form-field-button " + which;
        }).merge(buttons).on("click", function(d3_event, d) {
          d3_event.preventDefault();
          var raw_vals = input4.node().value || "0";
          var vals = raw_vals.split(";");
          vals = vals.map(function(v) {
            var num = parseFloat(v.trim(), 10);
            return isFinite(num) ? clamped(num + d) : v.trim();
          });
          input4.node().value = vals.join(";");
          change()();
        });
      } else if (field.type === "identifier" && field.urlFormat && field.pattern) {
        input4.attr("type", "text");
        outlinkButton = wrap2.selectAll(".foreign-id-permalink").data([0]);
        outlinkButton.enter().append("button").call(svgIcon("#iD-icon-out-link")).attr("class", "form-field-button foreign-id-permalink").attr("title", function() {
          var domainResults = /^https?:\/\/(.{1,}?)\//.exec(field.urlFormat);
          if (domainResults.length >= 2 && domainResults[1]) {
            var domain = domainResults[1];
            return _t("icons.view_on", {
              domain: domain
            });
          }
          return "";
        }).on("click", function(d3_event) {
          d3_event.preventDefault();
          var value2 = validIdentifierValueForLink();
          if (value2) {
            var url = field.urlFormat.replace(/{value}/, encodeURIComponent(value2));
            window.open(url, "_blank");
          }
        }).merge(outlinkButton);
      } else if (field.type === "url") {
        input4.attr("type", "text");
        outlinkButton = wrap2.selectAll(".foreign-id-permalink").data([0]);
        outlinkButton.enter().append("button").call(svgIcon("#iD-icon-out-link")).attr("class", "form-field-button foreign-id-permalink").attr("title", function() {
          return _t("icons.visit_website");
        }).on("click", function(d3_event) {
          d3_event.preventDefault();
          var value2 = validIdentifierValueForLink();
          if (value2)
            window.open(value2, "_blank");
        }).merge(outlinkButton);
      }
    }
    function updatePhonePlaceholder() {
      if (input4.empty() || !Object.keys(_phoneFormats).length)
        return;
      var extent6 = combinedEntityExtent();
      var countryCode2 = extent6 && iso1A2Code(extent6.center());
      var format2 = countryCode2 && _phoneFormats[countryCode2.toLowerCase()];
      if (format2)
        input4.attr("placeholder", format2);
    }
    function validIdentifierValueForLink() {
      var value2 = utilGetSetValue(input4).trim().split(";")[0];
      if (field.type === "url" && value2)
        return value2;
      if (field.type === "identifier" && field.pattern) {
        return value2 && value2.match(new RegExp(field.pattern));
      }
      return null;
    }
    function clamped(num) {
      if (field.minValue !== void 0) {
        num = Math.max(num, field.minValue);
      }
      if (field.maxValue !== void 0) {
        num = Math.min(num, field.maxValue);
      }
      return num;
    }
    function change(onInput) {
      return function() {
        var t = {};
        var val = utilGetSetValue(input4);
        if (!onInput)
          val = context.cleanTagValue(val);
        if (!val && Array.isArray(_tags[field.key]))
          return;
        if (!onInput) {
          if (field.type === "number" && val) {
            var vals = val.split(";");
            vals = vals.map(function(v) {
              var num = parseFloat(v.trim(), 10);
              return isFinite(num) ? clamped(num) : v.trim();
            });
            val = vals.join(";");
          }
          utilGetSetValue(input4, val);
        }
        t[field.key] = val || void 0;
        dispatch12.call("change", this, t, onInput);
      };
    }
    i2.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return i2;
    };
    i2.tags = function(tags) {
      _tags = tags;
      var isMixed = Array.isArray(tags[field.key]);
      utilGetSetValue(input4, !isMixed && tags[field.key] ? tags[field.key] : "").attr("title", isMixed ? tags[field.key].filter(Boolean).join("\n") : void 0).attr("placeholder", isMixed ? _t("inspector.multiple_values") : field.placeholder() || _t("inspector.unknown")).classed("mixed", isMixed);
      if (outlinkButton && !outlinkButton.empty()) {
        var disabled = !validIdentifierValueForLink();
        outlinkButton.classed("disabled", disabled);
      }
    };
    i2.focus = function() {
      var node = input4.node();
      if (node)
        node.focus();
    };
    function combinedEntityExtent() {
      return _entityIDs && _entityIDs.length && utilTotalExtent(_entityIDs, context.graph());
    }
    return utilRebind(i2, dispatch12, "on");
  }

  // modules/ui/fields/access.js
  function uiFieldAccess(field, context) {
    var dispatch12 = dispatch_default("change");
    var items = select_default2(null);
    var _tags;
    function access(selection2) {
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      var list = wrap2.selectAll("ul").data([0]);
      list = list.enter().append("ul").attr("class", "rows").merge(list);
      items = list.selectAll("li").data(field.keys);
      var enter = items.enter().append("li").attr("class", function(d) {
        return "labeled-input preset-access-" + d;
      });
      enter.append("span").attr("class", "label preset-label-access").attr("for", function(d) {
        return "preset-input-access-" + d;
      }).html(function(d) {
        return field.t.html("types." + d);
      });
      enter.append("div").attr("class", "preset-input-access-wrap").append("input").attr("type", "text").attr("class", function(d) {
        return "preset-input-access preset-input-access-" + d;
      }).call(utilNoAuto).each(function(d) {
        select_default2(this).call(uiCombobox(context, "access-" + d).data(access.options(d)));
      });
      items = items.merge(enter);
      wrap2.selectAll(".preset-input-access").on("change", change).on("blur", change);
    }
    function change(d3_event, d) {
      var tag = {};
      var value2 = context.cleanTagValue(utilGetSetValue(select_default2(this)));
      if (!value2 && typeof _tags[d] !== "string")
        return;
      tag[d] = value2 || void 0;
      dispatch12.call("change", this, tag);
    }
    access.options = function(type3) {
      var options = ["no", "permissive", "private", "permit", "destination"];
      if (type3 !== "access") {
        options.unshift("yes");
        options.push("designated");
        if (type3 === "bicycle") {
          options.push("dismount");
        }
      }
      return options.map(function(option) {
        return {
          title: field.t("options." + option + ".description"),
          value: option
        };
      });
    };
    var placeholdersByHighway = {
      footway: {
        foot: "designated",
        motor_vehicle: "no"
      },
      steps: {
        foot: "yes",
        motor_vehicle: "no",
        bicycle: "no",
        horse: "no"
      },
      pedestrian: {
        foot: "yes",
        motor_vehicle: "no"
      },
      cycleway: {
        motor_vehicle: "no",
        bicycle: "designated"
      },
      bridleway: {
        motor_vehicle: "no",
        horse: "designated"
      },
      path: {
        foot: "yes",
        motor_vehicle: "no",
        bicycle: "yes",
        horse: "yes"
      },
      motorway: {
        foot: "no",
        motor_vehicle: "yes",
        bicycle: "no",
        horse: "no"
      },
      trunk: {
        motor_vehicle: "yes"
      },
      primary: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      secondary: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      tertiary: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      residential: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      unclassified: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      service: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      motorway_link: {
        foot: "no",
        motor_vehicle: "yes",
        bicycle: "no",
        horse: "no"
      },
      trunk_link: {
        motor_vehicle: "yes"
      },
      primary_link: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      secondary_link: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      },
      tertiary_link: {
        foot: "yes",
        motor_vehicle: "yes",
        bicycle: "yes",
        horse: "yes"
      }
    };
    access.tags = function(tags) {
      _tags = tags;
      utilGetSetValue(items.selectAll(".preset-input-access"), function(d) {
        return typeof tags[d] === "string" ? tags[d] : "";
      }).classed("mixed", function(d) {
        return tags[d] && Array.isArray(tags[d]);
      }).attr("title", function(d) {
        return tags[d] && Array.isArray(tags[d]) && tags[d].filter(Boolean).join("\n");
      }).attr("placeholder", function(d) {
        if (tags[d] && Array.isArray(tags[d])) {
          return _t("inspector.multiple_values");
        }
        if (d === "access") {
          return "yes";
        }
        if (tags.access && typeof tags.access === "string") {
          return tags.access;
        }
        if (tags.highway) {
          if (typeof tags.highway === "string") {
            if (placeholdersByHighway[tags.highway] && placeholdersByHighway[tags.highway][d]) {
              return placeholdersByHighway[tags.highway][d];
            }
          } else {
            var impliedAccesses = tags.highway.filter(Boolean).map(function(highwayVal) {
              return placeholdersByHighway[highwayVal] && placeholdersByHighway[highwayVal][d];
            }).filter(Boolean);
            if (impliedAccesses.length === tags.highway.length && new Set(impliedAccesses).size === 1) {
              return impliedAccesses[0];
            }
          }
        }
        return field.placeholder();
      });
    };
    access.focus = function() {
      items.selectAll(".preset-input-access").node().focus();
    };
    return utilRebind(access, dispatch12, "on");
  }

  // modules/ui/fields/address.js
  function uiFieldAddress(field, context) {
    var dispatch12 = dispatch_default("change");
    var _selection = select_default2(null);
    var _wrap = select_default2(null);
    var addrField = _mainPresetIndex.field("address");
    var _entityIDs = [];
    var _tags;
    var _countryCode;
    var _addressFormats = [{
      format: [["housenumber", "street"], ["city", "postcode"]]
    }];
    _mainFileFetcher.get("address_formats").then(function(d) {
      _addressFormats = d;
      if (!_selection.empty()) {
        _selection.call(address);
      }
    }).catch(function() {
    });
    function getNearStreets() {
      var extent6 = combinedEntityExtent();
      var l = extent6.center();
      var box = new Extent(l).padByMeters(200);
      var streets = context.history().intersects(box).filter(isAddressable).map(function(d) {
        var loc = context.projection([(extent6.min[0] + extent6.max[0]) / 2, (extent6.min[1] + extent6.max[1]) / 2]);
        var choice = geoChooseEdge(context.graph().childNodes(d), loc, context.projection);
        return {
          title: d.tags.name,
          value: d.tags.name,
          dist: choice.distance
        };
      }).sort(function(a, b2) {
        return a.dist - b2.dist;
      });
      return utilArrayUniqBy(streets, "value");
      function isAddressable(d) {
        return d.tags.highway && d.tags.name && d.type === "way";
      }
    }
    function getNearCities() {
      var extent6 = combinedEntityExtent();
      var l = extent6.center();
      var box = new Extent(l).padByMeters(200);
      var cities = context.history().intersects(box).filter(isAddressable).map(function(d) {
        return {
          title: d.tags["addr:city"] || d.tags.name,
          value: d.tags["addr:city"] || d.tags.name,
          dist: geoSphericalDistance(d.extent(context.graph()).center(), l)
        };
      }).sort(function(a, b2) {
        return a.dist - b2.dist;
      });
      return utilArrayUniqBy(cities, "value");
      function isAddressable(d) {
        if (d.tags.name) {
          if (d.tags.admin_level === "8" && d.tags.boundary === "administrative")
            return true;
          if (d.tags.border_type === "city")
            return true;
          if (d.tags.place === "city" || d.tags.place === "town" || d.tags.place === "village")
            return true;
        }
        if (d.tags["addr:city"])
          return true;
        return false;
      }
    }
    function getNearValues(key) {
      var extent6 = combinedEntityExtent();
      var l = extent6.center();
      var box = new Extent(l).padByMeters(200);
      var results = context.history().intersects(box).filter(function hasTag(d) {
        return _entityIDs.indexOf(d.id) === -1 && d.tags[key];
      }).map(function(d) {
        return {
          title: d.tags[key],
          value: d.tags[key],
          dist: geoSphericalDistance(d.extent(context.graph()).center(), l)
        };
      }).sort(function(a, b2) {
        return a.dist - b2.dist;
      });
      return utilArrayUniqBy(results, "value");
    }
    function updateForCountryCode() {
      if (!_countryCode)
        return;
      var addressFormat;
      for (var i2 = 0; i2 < _addressFormats.length; i2++) {
        var format2 = _addressFormats[i2];
        if (!format2.countryCodes) {
          addressFormat = format2;
        } else if (format2.countryCodes.indexOf(_countryCode) !== -1) {
          addressFormat = format2;
          break;
        }
      }
      var dropdowns = addressFormat.dropdowns || ["city", "county", "country", "district", "hamlet", "neighbourhood", "place", "postcode", "province", "quarter", "state", "street", "subdistrict", "suburb"];
      var widths = addressFormat.widths || {
        housenumber: 1 / 3,
        street: 2 / 3,
        city: 2 / 3,
        state: 1 / 4,
        postcode: 1 / 3
      };
      function row(r) {
        var total = r.reduce(function(sum, key) {
          return sum + (widths[key] || 0.5);
        }, 0);
        return r.map(function(key) {
          return {
            id: key,
            width: (widths[key] || 0.5) / total
          };
        });
      }
      var rows = _wrap.selectAll(".addr-row").data(addressFormat.format, function(d) {
        return d.toString();
      });
      rows.exit().remove();
      rows.enter().append("div").attr("class", "addr-row").selectAll("input").data(row).enter().append("input").property("type", "text").call(updatePlaceholder).attr("class", function(d) {
        return "addr-" + d.id;
      }).call(utilNoAuto).each(addDropdown).style("width", function(d) {
        return d.width * 100 + "%";
      });
      function addDropdown(d) {
        if (dropdowns.indexOf(d.id) === -1)
          return;
        var nearValues = d.id === "street" ? getNearStreets : d.id === "city" ? getNearCities : getNearValues;
        select_default2(this).call(uiCombobox(context, "address-" + d.id).minItems(1).caseSensitive(true).fetcher(function(value2, callback) {
          callback(nearValues("addr:" + d.id));
        }));
      }
      _wrap.selectAll("input").on("blur", change()).on("change", change());
      _wrap.selectAll("input:not(.combobox-input)").on("input", change(true));
      if (_tags)
        updateTags(_tags);
    }
    function address(selection2) {
      _selection = selection2;
      _wrap = selection2.selectAll(".form-field-input-wrap").data([0]);
      _wrap = _wrap.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(_wrap);
      var extent6 = combinedEntityExtent();
      if (extent6) {
        var countryCode2;
        if (context.inIntro()) {
          countryCode2 = _t("intro.graph.countrycode");
        } else {
          var center = extent6.center();
          countryCode2 = iso1A2Code(center);
        }
        if (countryCode2) {
          _countryCode = countryCode2.toLowerCase();
          updateForCountryCode();
        }
      }
    }
    function change(onInput) {
      return function() {
        var tags = {};
        _wrap.selectAll("input").each(function(subfield) {
          var key = field.key + ":" + subfield.id;
          var value2 = this.value;
          if (!onInput)
            value2 = context.cleanTagValue(value2);
          if (Array.isArray(_tags[key]) && !value2)
            return;
          tags[key] = value2 || void 0;
        });
        dispatch12.call("change", this, tags, onInput);
      };
    }
    function updatePlaceholder(inputSelection) {
      return inputSelection.attr("placeholder", function(subfield) {
        if (_tags && Array.isArray(_tags[field.key + ":" + subfield.id])) {
          return _t("inspector.multiple_values");
        }
        if (_countryCode) {
          var localkey = subfield.id + "!" + _countryCode;
          var tkey = addrField.hasTextForStringId("placeholders." + localkey) ? localkey : subfield.id;
          return addrField.t("placeholders." + tkey);
        }
      });
    }
    function updateTags(tags) {
      utilGetSetValue(_wrap.selectAll("input"), function(subfield) {
        var val = tags[field.key + ":" + subfield.id];
        return typeof val === "string" ? val : "";
      }).attr("title", function(subfield) {
        var val = tags[field.key + ":" + subfield.id];
        return val && Array.isArray(val) && val.filter(Boolean).join("\n");
      }).classed("mixed", function(subfield) {
        return Array.isArray(tags[field.key + ":" + subfield.id]);
      }).call(updatePlaceholder);
    }
    function combinedEntityExtent() {
      return _entityIDs && _entityIDs.length && utilTotalExtent(_entityIDs, context.graph());
    }
    address.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return address;
    };
    address.tags = function(tags) {
      _tags = tags;
      updateTags(tags);
    };
    address.focus = function() {
      var node = _wrap.selectAll("input").node();
      if (node)
        node.focus();
    };
    return utilRebind(address, dispatch12, "on");
  }

  // modules/ui/fields/cycleway.js
  function uiFieldCycleway(field, context) {
    var dispatch12 = dispatch_default("change");
    var items = select_default2(null);
    var wrap2 = select_default2(null);
    var _tags;
    function cycleway(selection2) {
      function stripcolon(s) {
        return s.replace(":", "");
      }
      wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      var div = wrap2.selectAll("ul").data([0]);
      div = div.enter().append("ul").attr("class", "rows").merge(div);
      var keys3 = ["cycleway:left", "cycleway:right"];
      items = div.selectAll("li").data(keys3);
      var enter = items.enter().append("li").attr("class", function(d) {
        return "labeled-input preset-cycleway-" + stripcolon(d);
      });
      enter.append("span").attr("class", "label preset-label-cycleway").attr("for", function(d) {
        return "preset-input-cycleway-" + stripcolon(d);
      }).html(function(d) {
        return field.t.html("types." + d);
      });
      enter.append("div").attr("class", "preset-input-cycleway-wrap").append("input").attr("type", "text").attr("class", function(d) {
        return "preset-input-cycleway preset-input-" + stripcolon(d);
      }).call(utilNoAuto).each(function(d) {
        select_default2(this).call(uiCombobox(context, "cycleway-" + stripcolon(d)).data(cycleway.options(d)));
      });
      items = items.merge(enter);
      wrap2.selectAll(".preset-input-cycleway").on("change", change).on("blur", change);
    }
    function change(d3_event, key) {
      var newValue = context.cleanTagValue(utilGetSetValue(select_default2(this)));
      if (!newValue && (Array.isArray(_tags.cycleway) || Array.isArray(_tags[key])))
        return;
      if (newValue === "none" || newValue === "") {
        newValue = void 0;
      }
      var otherKey = key === "cycleway:left" ? "cycleway:right" : "cycleway:left";
      var otherValue = typeof _tags.cycleway === "string" ? _tags.cycleway : _tags[otherKey];
      if (otherValue && Array.isArray(otherValue)) {
        otherValue = otherValue[0];
      }
      if (otherValue === "none" || otherValue === "") {
        otherValue = void 0;
      }
      var tag = {};
      if (newValue === otherValue) {
        tag = {
          cycleway: newValue,
          "cycleway:left": void 0,
          "cycleway:right": void 0
        };
      } else {
        tag = {
          cycleway: void 0
        };
        tag[key] = newValue;
        tag[otherKey] = otherValue;
      }
      dispatch12.call("change", this, tag);
    }
    cycleway.options = function() {
      return field.options.map(function(option) {
        return {
          title: field.t("options." + option + ".description"),
          value: option
        };
      });
    };
    cycleway.tags = function(tags) {
      _tags = tags;
      var commonValue = typeof tags.cycleway === "string" && tags.cycleway;
      utilGetSetValue(items.selectAll(".preset-input-cycleway"), function(d) {
        if (commonValue)
          return commonValue;
        return !tags.cycleway && typeof tags[d] === "string" ? tags[d] : "";
      }).attr("title", function(d) {
        if (Array.isArray(tags.cycleway) || Array.isArray(tags[d])) {
          var vals = [];
          if (Array.isArray(tags.cycleway)) {
            vals = vals.concat(tags.cycleway);
          }
          if (Array.isArray(tags[d])) {
            vals = vals.concat(tags[d]);
          }
          return vals.filter(Boolean).join("\n");
        }
        return null;
      }).attr("placeholder", function(d) {
        if (Array.isArray(tags.cycleway) || Array.isArray(tags[d])) {
          return _t("inspector.multiple_values");
        }
        return field.placeholder();
      }).classed("mixed", function(d) {
        return Array.isArray(tags.cycleway) || Array.isArray(tags[d]);
      });
    };
    cycleway.focus = function() {
      var node = wrap2.selectAll("input").node();
      if (node)
        node.focus();
    };
    return utilRebind(cycleway, dispatch12, "on");
  }

  // modules/ui/fields/lanes.js
  function uiFieldLanes(field, context) {
    var dispatch12 = dispatch_default("change");
    var LANE_WIDTH = 40;
    var LANE_HEIGHT = 200;
    var _entityIDs = [];
    function lanes2(selection2) {
      var lanesData = context.entity(_entityIDs[0]).lanes();
      if (!context.container().select(".inspector-wrap.inspector-hidden").empty() || !selection2.node().parentNode) {
        selection2.call(lanes2.off);
        return;
      }
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      var surface = wrap2.selectAll(".surface").data([0]);
      var d = utilGetDimensions(wrap2);
      var freeSpace = d[0] - lanesData.lanes.length * LANE_WIDTH * 1.5 + LANE_WIDTH * 0.5;
      surface = surface.enter().append("svg").attr("width", d[0]).attr("height", 300).attr("class", "surface").merge(surface);
      var lanesSelection = surface.selectAll(".lanes").data([0]);
      lanesSelection = lanesSelection.enter().append("g").attr("class", "lanes").merge(lanesSelection);
      lanesSelection.attr("transform", function() {
        return "translate(" + freeSpace / 2 + ", 0)";
      });
      var lane = lanesSelection.selectAll(".lane").data(lanesData.lanes);
      lane.exit().remove();
      var enter = lane.enter().append("g").attr("class", "lane");
      enter.append("g").append("rect").attr("y", 50).attr("width", LANE_WIDTH).attr("height", LANE_HEIGHT);
      enter.append("g").attr("class", "forward").append("text").attr("y", 40).attr("x", 14).html("\u25B2");
      enter.append("g").attr("class", "bothways").append("text").attr("y", 40).attr("x", 14).html("\u25B2\u25BC");
      enter.append("g").attr("class", "backward").append("text").attr("y", 40).attr("x", 14).html("\u25BC");
      lane = lane.merge(enter);
      lane.attr("transform", function(d2) {
        return "translate(" + LANE_WIDTH * d2.index * 1.5 + ", 0)";
      });
      lane.select(".forward").style("visibility", function(d2) {
        return d2.direction === "forward" ? "visible" : "hidden";
      });
      lane.select(".bothways").style("visibility", function(d2) {
        return d2.direction === "bothways" ? "visible" : "hidden";
      });
      lane.select(".backward").style("visibility", function(d2) {
        return d2.direction === "backward" ? "visible" : "hidden";
      });
    }
    lanes2.entityIDs = function(val) {
      _entityIDs = val;
    };
    lanes2.tags = function() {
    };
    lanes2.focus = function() {
    };
    lanes2.off = function() {
    };
    return utilRebind(lanes2, dispatch12, "on");
  }
  uiFieldLanes.supportsMultiselection = false;

  // modules/ui/fields/localized.js
  var _languagesArray = [];
  function uiFieldLocalized(field, context) {
    var dispatch12 = dispatch_default("change", "input");
    var wikipedia = services.wikipedia;
    var input4 = select_default2(null);
    var localizedInputs = select_default2(null);
    var _countryCode;
    var _tags;
    _mainFileFetcher.get("languages").then(loadLanguagesArray).catch(function() {
    });
    var _territoryLanguages = {};
    _mainFileFetcher.get("territory_languages").then(function(d) {
      _territoryLanguages = d;
    }).catch(function() {
    });
    var langCombo = uiCombobox(context, "localized-lang").fetcher(fetchLanguages).minItems(0);
    var _selection = select_default2(null);
    var _multilingual = [];
    var _buttonTip = uiTooltip().title(_t.html("translate.translate")).placement("left");
    var _wikiTitles;
    var _entityIDs = [];
    function loadLanguagesArray(dataLanguages) {
      if (_languagesArray.length !== 0)
        return;
      var replacements = {
        sr: "sr-Cyrl",
        "sr-Cyrl": false
      };
      for (var code in dataLanguages) {
        if (replacements[code] === false)
          continue;
        var metaCode = code;
        if (replacements[code])
          metaCode = replacements[code];
        _languagesArray.push({
          localName: _mainLocalizer.languageName(metaCode, {
            localOnly: true
          }),
          nativeName: dataLanguages[metaCode].nativeName,
          code: code,
          label: _mainLocalizer.languageName(metaCode)
        });
      }
    }
    function calcLocked() {
      var isLocked = field.id === "name" && _entityIDs.length && _entityIDs.some(function(entityID) {
        var entity2 = context.graph().hasEntity(entityID);
        if (!entity2)
          return false;
        if (entity2.tags.wikidata)
          return true;
        if (entity2.tags["name:etymology:wikidata"])
          return true;
        var preset = _mainPresetIndex.match(entity2, context.graph());
        if (preset) {
          var isSuggestion = preset.suggestion;
          var fields = preset.fields();
          var showsBrandField = fields.some(function(d) {
            return d.id === "brand";
          });
          var showsOperatorField = fields.some(function(d) {
            return d.id === "operator";
          });
          var setsName = preset.addTags.name;
          var setsBrandWikidata = preset.addTags["brand:wikidata"];
          var setsOperatorWikidata = preset.addTags["operator:wikidata"];
          return isSuggestion && setsName && (setsBrandWikidata && !showsBrandField || setsOperatorWikidata && !showsOperatorField);
        }
        return false;
      });
      field.locked(isLocked);
    }
    function calcMultilingual(tags) {
      var existingLangsOrdered = _multilingual.map(function(item2) {
        return item2.lang;
      });
      var existingLangs = new Set(existingLangsOrdered.filter(Boolean));
      for (var k in tags) {
        var m = k.match(/^(.*):(.*)$/);
        if (m && m[1] === field.key && m[2]) {
          var item = {
            lang: m[2],
            value: tags[k]
          };
          if (existingLangs.has(item.lang)) {
            _multilingual[existingLangsOrdered.indexOf(item.lang)].value = item.value;
            existingLangs.delete(item.lang);
          } else {
            _multilingual.push(item);
          }
        }
      }
      _multilingual.forEach(function(item2) {
        if (item2.lang && existingLangs.has(item2.lang)) {
          item2.value = "";
        }
      });
    }
    function localized(selection2) {
      _selection = selection2;
      calcLocked();
      var isLocked = field.locked();
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      input4 = wrap2.selectAll(".localized-main").data([0]);
      input4 = input4.enter().append("input").attr("type", "text").attr("id", field.domId).attr("class", "localized-main").call(utilNoAuto).merge(input4);
      input4.classed("disabled", !!isLocked).attr("readonly", isLocked || null).on("input", change(true)).on("blur", change()).on("change", change());
      var translateButton = wrap2.selectAll(".localized-add").data([0]);
      translateButton = translateButton.enter().append("button").attr("class", "localized-add form-field-button").call(svgIcon("#iD-icon-plus")).merge(translateButton);
      translateButton.classed("disabled", !!isLocked).call(isLocked ? _buttonTip.destroy : _buttonTip).on("click", addNew);
      if (_tags && !_multilingual.length) {
        calcMultilingual(_tags);
      }
      localizedInputs = selection2.selectAll(".localized-multilingual").data([0]);
      localizedInputs = localizedInputs.enter().append("div").attr("class", "localized-multilingual").merge(localizedInputs);
      localizedInputs.call(renderMultilingual);
      localizedInputs.selectAll("button, input").classed("disabled", !!isLocked).attr("readonly", isLocked || null);
      function addNew(d3_event) {
        d3_event.preventDefault();
        if (field.locked())
          return;
        var defaultLang = _mainLocalizer.languageCode().toLowerCase();
        var langExists = _multilingual.find(function(datum2) {
          return datum2.lang === defaultLang;
        });
        var isLangEn = defaultLang.indexOf("en") > -1;
        if (isLangEn || langExists) {
          defaultLang = "";
          langExists = _multilingual.find(function(datum2) {
            return datum2.lang === defaultLang;
          });
        }
        if (!langExists) {
          _multilingual.unshift({
            lang: defaultLang,
            value: ""
          });
          localizedInputs.call(renderMultilingual);
        }
      }
      function change(onInput) {
        return function(d3_event) {
          if (field.locked()) {
            d3_event.preventDefault();
            return;
          }
          var val = utilGetSetValue(select_default2(this));
          if (!onInput)
            val = context.cleanTagValue(val);
          if (!val && Array.isArray(_tags[field.key]))
            return;
          var t = {};
          t[field.key] = val || void 0;
          dispatch12.call("change", this, t, onInput);
        };
      }
    }
    function key(lang) {
      return field.key + ":" + lang;
    }
    function changeLang(d3_event, d) {
      var tags = {};
      var lang = utilGetSetValue(select_default2(this)).toLowerCase();
      var language = _languagesArray.find(function(d2) {
        return d2.label.toLowerCase() === lang || d2.localName && d2.localName.toLowerCase() === lang || d2.nativeName && d2.nativeName.toLowerCase() === lang;
      });
      if (language)
        lang = language.code;
      if (d.lang && d.lang !== lang) {
        tags[key(d.lang)] = void 0;
      }
      var newKey = lang && context.cleanTagKey(key(lang));
      var value2 = utilGetSetValue(select_default2(this.parentNode).selectAll(".localized-value"));
      if (newKey && value2) {
        tags[newKey] = value2;
      } else if (newKey && _wikiTitles && _wikiTitles[d.lang]) {
        tags[newKey] = _wikiTitles[d.lang];
      }
      d.lang = lang;
      dispatch12.call("change", this, tags);
    }
    function changeValue(d3_event, d) {
      if (!d.lang)
        return;
      var value2 = context.cleanTagValue(utilGetSetValue(select_default2(this))) || void 0;
      if (!value2 && Array.isArray(d.value))
        return;
      var t = {};
      t[key(d.lang)] = value2;
      d.value = value2;
      dispatch12.call("change", this, t);
    }
    function fetchLanguages(value2, cb) {
      var v = value2.toLowerCase();
      var langCodes = [_mainLocalizer.localeCode(), _mainLocalizer.languageCode()];
      if (_countryCode && _territoryLanguages[_countryCode]) {
        langCodes = langCodes.concat(_territoryLanguages[_countryCode]);
      }
      var langItems = [];
      langCodes.forEach(function(code) {
        var langItem = _languagesArray.find(function(item) {
          return item.code === code;
        });
        if (langItem)
          langItems.push(langItem);
      });
      langItems = utilArrayUniq(langItems.concat(_languagesArray));
      cb(langItems.filter(function(d) {
        return d.label.toLowerCase().indexOf(v) >= 0 || d.localName && d.localName.toLowerCase().indexOf(v) >= 0 || d.nativeName && d.nativeName.toLowerCase().indexOf(v) >= 0 || d.code.toLowerCase().indexOf(v) >= 0;
      }).map(function(d) {
        return {
          value: d.label
        };
      }));
    }
    function renderMultilingual(selection2) {
      var entries = selection2.selectAll("div.entry").data(_multilingual, function(d) {
        return d.lang;
      });
      entries.exit().style("top", "0").style("max-height", "240px").transition().duration(200).style("opacity", "0").style("max-height", "0px").remove();
      var entriesEnter = entries.enter().append("div").attr("class", "entry").each(function(_2, index) {
        var wrap2 = select_default2(this);
        var domId = utilUniqueString(index);
        var label = wrap2.append("label").attr("class", "field-label").attr("for", domId);
        var text = label.append("span").attr("class", "label-text");
        text.append("span").attr("class", "label-textvalue").html(_t.html("translate.localized_translation_label"));
        text.append("span").attr("class", "label-textannotation");
        label.append("button").attr("class", "remove-icon-multilingual").on("click", function(d3_event, d) {
          if (field.locked())
            return;
          d3_event.preventDefault();
          _multilingual.splice(_multilingual.indexOf(d), 1);
          var langKey = d.lang && key(d.lang);
          if (langKey && langKey in _tags) {
            delete _tags[langKey];
            var t = {};
            t[langKey] = void 0;
            dispatch12.call("change", this, t);
            return;
          }
          renderMultilingual(selection2);
        }).call(svgIcon("#iD-operation-delete"));
        wrap2.append("input").attr("class", "localized-lang").attr("id", domId).attr("type", "text").attr("placeholder", _t("translate.localized_translation_language")).on("blur", changeLang).on("change", changeLang).call(langCombo);
        wrap2.append("input").attr("type", "text").attr("class", "localized-value").on("blur", changeValue).on("change", changeValue);
      });
      entriesEnter.style("margin-top", "0px").style("max-height", "0px").style("opacity", "0").transition().duration(200).style("margin-top", "10px").style("max-height", "240px").style("opacity", "1").on("end", function() {
        select_default2(this).style("max-height", "").style("overflow", "visible");
      });
      entries = entries.merge(entriesEnter);
      entries.order();
      entries.classed("present", true);
      utilGetSetValue(entries.select(".localized-lang"), function(d) {
        var langItem = _languagesArray.find(function(item) {
          return item.code === d.lang;
        });
        if (langItem)
          return langItem.label;
        return d.lang;
      });
      utilGetSetValue(entries.select(".localized-value"), function(d) {
        return typeof d.value === "string" ? d.value : "";
      }).attr("title", function(d) {
        return Array.isArray(d.value) ? d.value.filter(Boolean).join("\n") : null;
      }).attr("placeholder", function(d) {
        return Array.isArray(d.value) ? _t("inspector.multiple_values") : _t("translate.localized_translation_name");
      }).classed("mixed", function(d) {
        return Array.isArray(d.value);
      });
    }
    localized.tags = function(tags) {
      _tags = tags;
      if (typeof tags.wikipedia === "string" && !_wikiTitles) {
        _wikiTitles = {};
        var wm = tags.wikipedia.match(/([^:]+):(.+)/);
        if (wm && wm[0] && wm[1]) {
          wikipedia.translations(wm[1], wm[2], function(err, d) {
            if (err || !d)
              return;
            _wikiTitles = d;
          });
        }
      }
      var isMixed = Array.isArray(tags[field.key]);
      utilGetSetValue(input4, typeof tags[field.key] === "string" ? tags[field.key] : "").attr("title", isMixed ? tags[field.key].filter(Boolean).join("\n") : void 0).attr("placeholder", isMixed ? _t("inspector.multiple_values") : field.placeholder()).classed("mixed", isMixed);
      calcMultilingual(tags);
      _selection.call(localized);
    };
    localized.focus = function() {
      input4.node().focus();
    };
    localized.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      _multilingual = [];
      loadCountryCode();
      return localized;
    };
    function loadCountryCode() {
      var extent6 = combinedEntityExtent();
      var countryCode2 = extent6 && iso1A2Code(extent6.center());
      _countryCode = countryCode2 && countryCode2.toLowerCase();
    }
    function combinedEntityExtent() {
      return _entityIDs && _entityIDs.length && utilTotalExtent(_entityIDs, context.graph());
    }
    return utilRebind(localized, dispatch12, "on");
  }

  // modules/ui/fields/roadspeed.js
  function uiFieldRoadspeed(field, context) {
    var dispatch12 = dispatch_default("change");
    var unitInput = select_default2(null);
    var input4 = select_default2(null);
    var _entityIDs = [];
    var _tags;
    var _isImperial;
    var speedCombo = uiCombobox(context, "roadspeed");
    var unitCombo = uiCombobox(context, "roadspeed-unit").data(["km/h", "mph"].map(comboValues));
    var metricValues = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];
    var imperialValues = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80];
    function roadspeed(selection2) {
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      input4 = wrap2.selectAll("input.roadspeed-number").data([0]);
      input4 = input4.enter().append("input").attr("type", "text").attr("class", "roadspeed-number").attr("id", field.domId).call(utilNoAuto).call(speedCombo).merge(input4);
      input4.on("change", change).on("blur", change);
      var loc = combinedEntityExtent().center();
      _isImperial = roadSpeedUnit(loc) === "mph";
      unitInput = wrap2.selectAll("input.roadspeed-unit").data([0]);
      unitInput = unitInput.enter().append("input").attr("type", "text").attr("class", "roadspeed-unit").call(unitCombo).merge(unitInput);
      unitInput.on("blur", changeUnits).on("change", changeUnits);
      function changeUnits() {
        _isImperial = utilGetSetValue(unitInput) === "mph";
        utilGetSetValue(unitInput, _isImperial ? "mph" : "km/h");
        setUnitSuggestions();
        change();
      }
    }
    function setUnitSuggestions() {
      speedCombo.data((_isImperial ? imperialValues : metricValues).map(comboValues));
      utilGetSetValue(unitInput, _isImperial ? "mph" : "km/h");
    }
    function comboValues(d) {
      return {
        value: d.toString(),
        title: d.toString()
      };
    }
    function change() {
      var tag = {};
      var value2 = utilGetSetValue(input4).trim();
      if (!value2 && Array.isArray(_tags[field.key]))
        return;
      if (!value2) {
        tag[field.key] = void 0;
      } else if (isNaN(value2) || !_isImperial) {
        tag[field.key] = context.cleanTagValue(value2);
      } else {
        tag[field.key] = context.cleanTagValue(value2 + " mph");
      }
      dispatch12.call("change", this, tag);
    }
    roadspeed.tags = function(tags) {
      _tags = tags;
      var value2 = tags[field.key];
      var isMixed = Array.isArray(value2);
      if (!isMixed) {
        if (value2 && value2.indexOf("mph") >= 0) {
          value2 = parseInt(value2, 10).toString();
          _isImperial = true;
        } else if (value2) {
          _isImperial = false;
        }
      }
      setUnitSuggestions();
      utilGetSetValue(input4, typeof value2 === "string" ? value2 : "").attr("title", isMixed ? value2.filter(Boolean).join("\n") : null).attr("placeholder", isMixed ? _t("inspector.multiple_values") : field.placeholder()).classed("mixed", isMixed);
    };
    roadspeed.focus = function() {
      input4.node().focus();
    };
    roadspeed.entityIDs = function(val) {
      _entityIDs = val;
    };
    function combinedEntityExtent() {
      return _entityIDs && _entityIDs.length && utilTotalExtent(_entityIDs, context.graph());
    }
    return utilRebind(roadspeed, dispatch12, "on");
  }

  // modules/ui/fields/radio.js
  function uiFieldRadio(field, context) {
    var dispatch12 = dispatch_default("change");
    var placeholder = select_default2(null);
    var wrap2 = select_default2(null);
    var labels = select_default2(null);
    var radios = select_default2(null);
    var radioData = (field.options || field.keys).slice();
    var typeField;
    var layerField;
    var _oldType = {};
    var _entityIDs = [];
    function selectedKey() {
      var node = wrap2.selectAll(".form-field-input-radio label.active input");
      return !node.empty() && node.datum();
    }
    function radio(selection2) {
      selection2.classed("preset-radio", true);
      wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      var enter = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-radio");
      enter.append("span").attr("class", "placeholder");
      wrap2 = wrap2.merge(enter);
      placeholder = wrap2.selectAll(".placeholder");
      labels = wrap2.selectAll("label").data(radioData);
      enter = labels.enter().append("label");
      enter.append("input").attr("type", "radio").attr("name", field.id).attr("value", function(d) {
        return field.t("options." + d, {
          "default": d
        });
      }).attr("checked", false);
      enter.append("span").html(function(d) {
        return field.t.html("options." + d, {
          "default": d
        });
      });
      labels = labels.merge(enter);
      radios = labels.selectAll("input").on("change", changeRadio);
    }
    function structureExtras(selection2, tags) {
      var selected = selectedKey() || tags.layer !== void 0;
      var type3 = _mainPresetIndex.field(selected);
      var layer2 = _mainPresetIndex.field("layer");
      var showLayer = selected === "bridge" || selected === "tunnel" || tags.layer !== void 0;
      var extrasWrap = selection2.selectAll(".structure-extras-wrap").data(selected ? [0] : []);
      extrasWrap.exit().remove();
      extrasWrap = extrasWrap.enter().append("div").attr("class", "structure-extras-wrap").merge(extrasWrap);
      var list = extrasWrap.selectAll("ul").data([0]);
      list = list.enter().append("ul").attr("class", "rows").merge(list);
      if (type3) {
        if (!typeField || typeField.id !== selected) {
          typeField = uiField(context, type3, _entityIDs, {
            wrap: false
          }).on("change", changeType);
        }
        typeField.tags(tags);
      } else {
        typeField = null;
      }
      var typeItem = list.selectAll(".structure-type-item").data(typeField ? [typeField] : [], function(d) {
        return d.id;
      });
      typeItem.exit().remove();
      var typeEnter = typeItem.enter().insert("li", ":first-child").attr("class", "labeled-input structure-type-item");
      typeEnter.append("span").attr("class", "label structure-label-type").attr("for", "preset-input-" + selected).html(_t.html("inspector.radio.structure.type"));
      typeEnter.append("div").attr("class", "structure-input-type-wrap");
      typeItem = typeItem.merge(typeEnter);
      if (typeField) {
        typeItem.selectAll(".structure-input-type-wrap").call(typeField.render);
      }
      if (layer2 && showLayer) {
        if (!layerField) {
          layerField = uiField(context, layer2, _entityIDs, {
            wrap: false
          }).on("change", changeLayer);
        }
        layerField.tags(tags);
        field.keys = utilArrayUnion(field.keys, ["layer"]);
      } else {
        layerField = null;
        field.keys = field.keys.filter(function(k) {
          return k !== "layer";
        });
      }
      var layerItem = list.selectAll(".structure-layer-item").data(layerField ? [layerField] : []);
      layerItem.exit().remove();
      var layerEnter = layerItem.enter().append("li").attr("class", "labeled-input structure-layer-item");
      layerEnter.append("span").attr("class", "label structure-label-layer").attr("for", "preset-input-layer").html(_t.html("inspector.radio.structure.layer"));
      layerEnter.append("div").attr("class", "structure-input-layer-wrap");
      layerItem = layerItem.merge(layerEnter);
      if (layerField) {
        layerItem.selectAll(".structure-input-layer-wrap").call(layerField.render);
      }
    }
    function changeType(t, onInput) {
      var key = selectedKey();
      if (!key)
        return;
      var val = t[key];
      if (val !== "no") {
        _oldType[key] = val;
      }
      if (field.type === "structureRadio") {
        if (val === "no" || key !== "bridge" && key !== "tunnel" || key === "tunnel" && val === "building_passage") {
          t.layer = void 0;
        }
        if (t.layer === void 0) {
          if (key === "bridge" && val !== "no") {
            t.layer = "1";
          }
          if (key === "tunnel" && val !== "no" && val !== "building_passage") {
            t.layer = "-1";
          }
        }
      }
      dispatch12.call("change", this, t, onInput);
    }
    function changeLayer(t, onInput) {
      if (t.layer === "0") {
        t.layer = void 0;
      }
      dispatch12.call("change", this, t, onInput);
    }
    function changeRadio() {
      var t = {};
      var activeKey;
      if (field.key) {
        t[field.key] = void 0;
      }
      radios.each(function(d) {
        var active = select_default2(this).property("checked");
        if (active)
          activeKey = d;
        if (field.key) {
          if (active)
            t[field.key] = d;
        } else {
          var val = _oldType[activeKey] || "yes";
          t[d] = active ? val : void 0;
        }
      });
      if (field.type === "structureRadio") {
        if (activeKey === "bridge") {
          t.layer = "1";
        } else if (activeKey === "tunnel" && t.tunnel !== "building_passage") {
          t.layer = "-1";
        } else {
          t.layer = void 0;
        }
      }
      dispatch12.call("change", this, t);
    }
    radio.tags = function(tags) {
      radios.property("checked", function(d) {
        if (field.key) {
          return tags[field.key] === d;
        }
        return !!(typeof tags[d] === "string" && tags[d].toLowerCase() !== "no");
      });
      function isMixed(d) {
        if (field.key) {
          return Array.isArray(tags[field.key]) && tags[field.key].includes(d);
        }
        return Array.isArray(tags[d]);
      }
      labels.classed("active", function(d) {
        if (field.key) {
          return Array.isArray(tags[field.key]) && tags[field.key].includes(d) || tags[field.key] === d;
        }
        return Array.isArray(tags[d]) || !!(tags[d] && tags[d].toLowerCase() !== "no");
      }).classed("mixed", isMixed).attr("title", function(d) {
        return isMixed(d) ? _t("inspector.unshared_value_tooltip") : null;
      });
      var selection2 = radios.filter(function() {
        return this.checked;
      });
      if (selection2.empty()) {
        placeholder.html(_t.html("inspector.none"));
      } else {
        placeholder.html(selection2.attr("value"));
        _oldType[selection2.datum()] = tags[selection2.datum()];
      }
      if (field.type === "structureRadio") {
        if (!!tags.waterway && !_oldType.tunnel) {
          _oldType.tunnel = "culvert";
        }
        wrap2.call(structureExtras, tags);
      }
    };
    radio.focus = function() {
      radios.node().focus();
    };
    radio.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      _oldType = {};
      return radio;
    };
    radio.isAllowed = function() {
      return _entityIDs.length === 1;
    };
    return utilRebind(radio, dispatch12, "on");
  }

  // modules/ui/fields/restrictions.js
  function uiFieldRestrictions(field, context) {
    var dispatch12 = dispatch_default("change");
    var breathe = behaviorBreathe(context);
    corePreferences("turn-restriction-via-way", null);
    var storedViaWay = corePreferences("turn-restriction-via-way0");
    var storedDistance = corePreferences("turn-restriction-distance");
    var _maxViaWay = storedViaWay !== null ? +storedViaWay : 0;
    var _maxDistance = storedDistance ? +storedDistance : 30;
    var _initialized3 = false;
    var _parent = select_default2(null);
    var _container = select_default2(null);
    var _oldTurns;
    var _graph;
    var _vertexID;
    var _intersection;
    var _fromWayID;
    var _lastXPos;
    function restrictions(selection2) {
      _parent = selection2;
      if (_vertexID && (context.graph() !== _graph || !_intersection)) {
        _graph = context.graph();
        _intersection = osmIntersection(_graph, _vertexID, _maxDistance);
      }
      var isOK = _intersection && _intersection.vertices.length && _intersection.vertices.filter(function(vertex) {
        return vertex.id === _vertexID;
      }).length && _intersection.ways.length > 2 && _intersection.ways.filter(function(way) {
        return way.__to;
      }).length > 1;
      select_default2(selection2.node().parentNode).classed("hide", !isOK);
      if (!isOK || !context.container().select(".inspector-wrap.inspector-hidden").empty() || !selection2.node().parentNode || !selection2.node().parentNode.parentNode) {
        selection2.call(restrictions.off);
        return;
      }
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      var container = wrap2.selectAll(".restriction-container").data([0]);
      var containerEnter = container.enter().append("div").attr("class", "restriction-container");
      containerEnter.append("div").attr("class", "restriction-help");
      _container = containerEnter.merge(container).call(renderViewer);
      var controls = wrap2.selectAll(".restriction-controls").data([0]);
      controls.enter().append("div").attr("class", "restriction-controls-container").append("div").attr("class", "restriction-controls").merge(controls).call(renderControls);
    }
    function renderControls(selection2) {
      var distControl = selection2.selectAll(".restriction-distance").data([0]);
      distControl.exit().remove();
      var distControlEnter = distControl.enter().append("div").attr("class", "restriction-control restriction-distance");
      distControlEnter.append("span").attr("class", "restriction-control-label restriction-distance-label").html(_t.html("restriction.controls.distance") + ":");
      distControlEnter.append("input").attr("class", "restriction-distance-input").attr("type", "range").attr("min", "20").attr("max", "50").attr("step", "5");
      distControlEnter.append("span").attr("class", "restriction-distance-text");
      selection2.selectAll(".restriction-distance-input").property("value", _maxDistance).on("input", function() {
        var val = select_default2(this).property("value");
        _maxDistance = +val;
        _intersection = null;
        _container.selectAll(".layer-osm .layer-turns *").remove();
        corePreferences("turn-restriction-distance", _maxDistance);
        _parent.call(restrictions);
      });
      selection2.selectAll(".restriction-distance-text").html(displayMaxDistance(_maxDistance));
      var viaControl = selection2.selectAll(".restriction-via-way").data([0]);
      viaControl.exit().remove();
      var viaControlEnter = viaControl.enter().append("div").attr("class", "restriction-control restriction-via-way");
      viaControlEnter.append("span").attr("class", "restriction-control-label restriction-via-way-label").html(_t.html("restriction.controls.via") + ":");
      viaControlEnter.append("input").attr("class", "restriction-via-way-input").attr("type", "range").attr("min", "0").attr("max", "2").attr("step", "1");
      viaControlEnter.append("span").attr("class", "restriction-via-way-text");
      selection2.selectAll(".restriction-via-way-input").property("value", _maxViaWay).on("input", function() {
        var val = select_default2(this).property("value");
        _maxViaWay = +val;
        _container.selectAll(".layer-osm .layer-turns *").remove();
        corePreferences("turn-restriction-via-way0", _maxViaWay);
        _parent.call(restrictions);
      });
      selection2.selectAll(".restriction-via-way-text").html(displayMaxVia(_maxViaWay));
    }
    function renderViewer(selection2) {
      if (!_intersection)
        return;
      var vgraph = _intersection.graph;
      var filter2 = utilFunctor(true);
      var projection2 = geoRawMercator();
      var sdims = utilGetDimensions(context.container().select(".sidebar"));
      var d = [sdims[0] - 50, 370];
      var c2 = vecScale(d, 0.5);
      var z = 22;
      projection2.scale(geoZoomToScale(z));
      var extent6 = _intersection.vertices.reduce(function(extent7, node) {
        extent7.min = [Math.min(extent7.min[0], node.loc[0]), Math.min(extent7.min[1], node.loc[1])];
        extent7.max = [Math.max(extent7.max[0], node.loc[0]), Math.max(extent7.max[1], node.loc[1])];
        return extent7;
      }, new Extent());
      if (_intersection.vertices.length > 1) {
        var padding = 180;
        var tl = projection2([extent6.min[0], extent6.max[1]]);
        var br = projection2([extent6.max[0], extent6.min[1]]);
        var hFactor = (br[0] - tl[0]) / (d[0] - padding);
        var vFactor = (br[1] - tl[1]) / (d[1] - padding);
        var hZoomDiff = Math.log(Math.abs(hFactor)) / Math.LN2;
        var vZoomDiff = Math.log(Math.abs(vFactor)) / Math.LN2;
        z = z - Math.max(hZoomDiff, vZoomDiff);
        projection2.scale(geoZoomToScale(z));
      }
      var padTop = 35;
      var extentCenter = projection2(extent6.center());
      extentCenter[1] = extentCenter[1] - padTop;
      projection2.translate(vecSubtract(c2, extentCenter)).clipExtent([[0, 0], d]);
      var drawLayers = svgLayers(projection2, context).only(["osm", "touch"]).dimensions(d);
      var drawVertices = svgVertices(projection2, context);
      var drawLines = svgLines(projection2, context);
      var drawTurns = svgTurns(projection2, context);
      var firstTime = selection2.selectAll(".surface").empty();
      selection2.call(drawLayers);
      var surface = selection2.selectAll(".surface").classed("tr", true);
      if (firstTime) {
        _initialized3 = true;
        surface.call(breathe);
      }
      if (_fromWayID && !vgraph.hasEntity(_fromWayID)) {
        _fromWayID = null;
        _oldTurns = null;
      }
      surface.call(utilSetDimensions, d).call(drawVertices, vgraph, _intersection.vertices, filter2, extent6, z).call(drawLines, vgraph, _intersection.ways, filter2).call(drawTurns, vgraph, _intersection.turns(_fromWayID, _maxViaWay));
      surface.on("click.restrictions", click).on("mouseover.restrictions", mouseover);
      surface.selectAll(".selected").classed("selected", false);
      surface.selectAll(".related").classed("related", false);
      var way;
      if (_fromWayID) {
        way = vgraph.entity(_fromWayID);
        surface.selectAll("." + _fromWayID).classed("selected", true).classed("related", true);
      }
      document.addEventListener("resizeWindow", function() {
        utilSetDimensions(_container, null);
        redraw(1);
      }, false);
      updateHints(null);
      function click(d3_event) {
        surface.call(breathe.off).call(breathe);
        var datum2 = d3_event.target.__data__;
        var entity2 = datum2 && datum2.properties && datum2.properties.entity;
        if (entity2) {
          datum2 = entity2;
        }
        if (datum2 instanceof osmWay && (datum2.__from || datum2.__via)) {
          _fromWayID = datum2.id;
          _oldTurns = null;
          redraw();
        } else if (datum2 instanceof osmTurn) {
          var actions, extraActions, turns, i2;
          var restrictionType = osmInferRestriction(vgraph, datum2, projection2);
          if (datum2.restrictionID && !datum2.direct) {
            return;
          } else if (datum2.restrictionID && !datum2.only) {
            var seen = {};
            var datumOnly = JSON.parse(JSON.stringify(datum2));
            datumOnly.only = true;
            restrictionType = restrictionType.replace(/^no/, "only");
            turns = _intersection.turns(_fromWayID, 2);
            extraActions = [];
            _oldTurns = [];
            for (i2 = 0; i2 < turns.length; i2++) {
              var turn = turns[i2];
              if (seen[turn.restrictionID])
                continue;
              if (turn.direct && turn.path[1] === datum2.path[1]) {
                seen[turns[i2].restrictionID] = true;
                turn.restrictionType = osmInferRestriction(vgraph, turn, projection2);
                _oldTurns.push(turn);
                extraActions.push(actionUnrestrictTurn(turn));
              }
            }
            actions = _intersection.actions.concat(extraActions, [actionRestrictTurn(datumOnly, restrictionType), _t("operations.restriction.annotation.create")]);
          } else if (datum2.restrictionID) {
            turns = _oldTurns || [];
            extraActions = [];
            for (i2 = 0; i2 < turns.length; i2++) {
              if (turns[i2].key !== datum2.key) {
                extraActions.push(actionRestrictTurn(turns[i2], turns[i2].restrictionType));
              }
            }
            _oldTurns = null;
            actions = _intersection.actions.concat(extraActions, [actionUnrestrictTurn(datum2), _t("operations.restriction.annotation.delete")]);
          } else {
            actions = _intersection.actions.concat([actionRestrictTurn(datum2, restrictionType), _t("operations.restriction.annotation.create")]);
          }
          context.perform.apply(context, actions);
          var s = surface.selectAll("." + datum2.key);
          datum2 = s.empty() ? null : s.datum();
          updateHints(datum2);
        } else {
          _fromWayID = null;
          _oldTurns = null;
          redraw();
        }
      }
      function mouseover(d3_event) {
        var datum2 = d3_event.target.__data__;
        updateHints(datum2);
      }
      _lastXPos = _lastXPos || sdims[0];
      function redraw(minChange) {
        var xPos = -1;
        if (minChange) {
          xPos = utilGetDimensions(context.container().select(".sidebar"))[0];
        }
        if (!minChange || minChange && Math.abs(xPos - _lastXPos) >= minChange) {
          if (context.hasEntity(_vertexID)) {
            _lastXPos = xPos;
            _container.call(renderViewer);
          }
        }
      }
      function highlightPathsFrom(wayID) {
        surface.selectAll(".related").classed("related", false).classed("allow", false).classed("restrict", false).classed("only", false);
        surface.selectAll("." + wayID).classed("related", true);
        if (wayID) {
          var turns = _intersection.turns(wayID, _maxViaWay);
          for (var i2 = 0; i2 < turns.length; i2++) {
            var turn = turns[i2];
            var ids = [turn.to.way];
            var klass = turn.no ? "restrict" : turn.only ? "only" : "allow";
            if (turn.only || turns.length === 1) {
              if (turn.via.ways) {
                ids = ids.concat(turn.via.ways);
              }
            } else if (turn.to.way === wayID) {
              continue;
            }
            surface.selectAll(utilEntitySelector(ids)).classed("related", true).classed("allow", klass === "allow").classed("restrict", klass === "restrict").classed("only", klass === "only");
          }
        }
      }
      function updateHints(datum2) {
        var help = _container.selectAll(".restriction-help").html("");
        var placeholders = {};
        ["from", "via", "to"].forEach(function(k) {
          placeholders[k] = '<span class="qualifier">' + _t("restriction.help." + k) + "</span>";
        });
        var entity2 = datum2 && datum2.properties && datum2.properties.entity;
        if (entity2) {
          datum2 = entity2;
        }
        if (_fromWayID) {
          way = vgraph.entity(_fromWayID);
          surface.selectAll("." + _fromWayID).classed("selected", true).classed("related", true);
        }
        if (datum2 instanceof osmWay && datum2.__from) {
          way = datum2;
          highlightPathsFrom(_fromWayID ? null : way.id);
          surface.selectAll("." + way.id).classed("related", true);
          var clickSelect = !_fromWayID || _fromWayID !== way.id;
          help.append("div").html(_t.html("restriction.help." + (clickSelect ? "select_from_name" : "from_name"), {
            from: placeholders.from,
            fromName: displayName(way.id, vgraph)
          }));
        } else if (datum2 instanceof osmTurn) {
          var restrictionType = osmInferRestriction(vgraph, datum2, projection2);
          var turnType = restrictionType.replace(/^(only|no)\_/, "");
          var indirect = datum2.direct === false ? _t.html("restriction.help.indirect") : "";
          var klass, turnText, nextText;
          if (datum2.no) {
            klass = "restrict";
            turnText = _t.html("restriction.help.turn.no_" + turnType, {
              indirect: indirect
            });
            nextText = _t.html("restriction.help.turn.only_" + turnType, {
              indirect: ""
            });
          } else if (datum2.only) {
            klass = "only";
            turnText = _t.html("restriction.help.turn.only_" + turnType, {
              indirect: indirect
            });
            nextText = _t.html("restriction.help.turn.allowed_" + turnType, {
              indirect: ""
            });
          } else {
            klass = "allow";
            turnText = _t.html("restriction.help.turn.allowed_" + turnType, {
              indirect: indirect
            });
            nextText = _t.html("restriction.help.turn.no_" + turnType, {
              indirect: ""
            });
          }
          help.append("div").attr("class", "qualifier " + klass).html(turnText);
          help.append("div").html(_t.html("restriction.help.from_name_to_name", {
            from: placeholders.from,
            fromName: displayName(datum2.from.way, vgraph),
            to: placeholders.to,
            toName: displayName(datum2.to.way, vgraph)
          }));
          if (datum2.via.ways && datum2.via.ways.length) {
            var names = [];
            for (var i2 = 0; i2 < datum2.via.ways.length; i2++) {
              var prev = names[names.length - 1];
              var curr = displayName(datum2.via.ways[i2], vgraph);
              if (!prev || curr !== prev) {
                names.push(curr);
              }
            }
            help.append("div").html(_t.html("restriction.help.via_names", {
              via: placeholders.via,
              viaNames: names.join(", ")
            }));
          }
          if (!indirect) {
            help.append("div").html(_t.html("restriction.help.toggle", {
              turn: nextText.trim()
            }));
          }
          highlightPathsFrom(null);
          var alongIDs = datum2.path.slice();
          surface.selectAll(utilEntitySelector(alongIDs)).classed("related", true).classed("allow", klass === "allow").classed("restrict", klass === "restrict").classed("only", klass === "only");
        } else {
          highlightPathsFrom(null);
          if (_fromWayID) {
            help.append("div").html(_t.html("restriction.help.from_name", {
              from: placeholders.from,
              fromName: displayName(_fromWayID, vgraph)
            }));
          } else {
            help.append("div").html(_t.html("restriction.help.select_from", {
              from: placeholders.from
            }));
          }
        }
      }
    }
    function displayMaxDistance(maxDist) {
      var isImperial = !_mainLocalizer.usesMetric();
      var opts;
      if (isImperial) {
        var distToFeet = {
          20: 70,
          25: 85,
          30: 100,
          35: 115,
          40: 130,
          45: 145,
          50: 160
        }[maxDist];
        opts = {
          distance: _t("units.feet", {
            quantity: distToFeet
          })
        };
      } else {
        opts = {
          distance: _t("units.meters", {
            quantity: maxDist
          })
        };
      }
      return _t.html("restriction.controls.distance_up_to", opts);
    }
    function displayMaxVia(maxVia) {
      return maxVia === 0 ? _t.html("restriction.controls.via_node_only") : maxVia === 1 ? _t.html("restriction.controls.via_up_to_one") : _t.html("restriction.controls.via_up_to_two");
    }
    function displayName(entityID, graph3) {
      var entity2 = graph3.entity(entityID);
      var name = utilDisplayName(entity2) || "";
      var matched = _mainPresetIndex.match(entity2, graph3);
      var type3 = matched && matched.name() || utilDisplayType(entity2.id);
      return name || type3;
    }
    restrictions.entityIDs = function(val) {
      _intersection = null;
      _fromWayID = null;
      _oldTurns = null;
      _vertexID = val[0];
    };
    restrictions.tags = function() {
    };
    restrictions.focus = function() {
    };
    restrictions.off = function(selection2) {
      if (!_initialized3)
        return;
      selection2.selectAll(".surface").call(breathe.off).on("click.restrictions", null).on("mouseover.restrictions", null);
      select_default2(window).on("resize.restrictions", null);
    };
    return utilRebind(restrictions, dispatch12, "on");
  }
  uiFieldRestrictions.supportsMultiselection = false;

  // modules/ui/fields/textarea.js
  function uiFieldTextarea(field, context) {
    var dispatch12 = dispatch_default("change");
    var input4 = select_default2(null);
    var _tags;
    function textarea(selection2) {
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      input4 = wrap2.selectAll("textarea").data([0]);
      input4 = input4.enter().append("textarea").attr("id", field.domId).call(utilNoAuto).on("input", change(true)).on("blur", change()).on("change", change()).merge(input4);
    }
    function change(onInput) {
      return function() {
        var val = utilGetSetValue(input4);
        if (!onInput)
          val = context.cleanTagValue(val);
        if (!val && Array.isArray(_tags[field.key]))
          return;
        var t = {};
        t[field.key] = val || void 0;
        dispatch12.call("change", this, t, onInput);
      };
    }
    textarea.tags = function(tags) {
      _tags = tags;
      var isMixed = Array.isArray(tags[field.key]);
      utilGetSetValue(input4, !isMixed && tags[field.key] ? tags[field.key] : "").attr("title", isMixed ? tags[field.key].filter(Boolean).join("\n") : void 0).attr("placeholder", isMixed ? _t("inspector.multiple_values") : field.placeholder() || _t("inspector.unknown")).classed("mixed", isMixed);
    };
    textarea.focus = function() {
      input4.node().focus();
    };
    return utilRebind(textarea, dispatch12, "on");
  }

  // modules/ui/fields/wikidata.js
  function uiFieldWikidata(field, context) {
    var wikidata = services.wikidata;
    var dispatch12 = dispatch_default("change");
    var _selection = select_default2(null);
    var _searchInput = select_default2(null);
    var _qid = null;
    var _wikidataEntity = null;
    var _wikiURL = "";
    var _entityIDs = [];
    var _wikipediaKey = field.keys && field.keys.find(function(key) {
      return key.includes("wikipedia");
    }), _hintKey = field.key === "wikidata" ? "name" : field.key.split(":")[0];
    var combobox = uiCombobox(context, "combo-" + field.safeid).caseSensitive(true).minItems(1);
    function wiki(selection2) {
      _selection = selection2;
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-" + field.type).merge(wrap2);
      var list = wrap2.selectAll("ul").data([0]);
      list = list.enter().append("ul").attr("class", "rows").merge(list);
      var searchRow = list.selectAll("li.wikidata-search").data([0]);
      var searchRowEnter = searchRow.enter().append("li").attr("class", "wikidata-search");
      searchRowEnter.append("input").attr("type", "text").attr("id", field.domId).style("flex", "1").call(utilNoAuto).on("focus", function() {
        var node = select_default2(this).node();
        node.setSelectionRange(0, node.value.length);
      }).on("blur", function() {
        setLabelForEntity();
      }).call(combobox.fetcher(fetchWikidataItems));
      combobox.on("accept", function(d) {
        if (d) {
          _qid = d.id;
          change();
        }
      }).on("cancel", function() {
        setLabelForEntity();
      });
      searchRowEnter.append("button").attr("class", "form-field-button wiki-link").attr("title", _t("icons.view_on", {
        domain: "wikidata.org"
      })).call(svgIcon("#iD-icon-out-link")).on("click", function(d3_event) {
        d3_event.preventDefault();
        if (_wikiURL)
          window.open(_wikiURL, "_blank");
      });
      searchRow = searchRow.merge(searchRowEnter);
      _searchInput = searchRow.select("input");
      var wikidataProperties = ["description", "identifier"];
      var items = list.selectAll("li.labeled-input").data(wikidataProperties);
      var enter = items.enter().append("li").attr("class", function(d) {
        return "labeled-input preset-wikidata-" + d;
      });
      enter.append("span").attr("class", "label").html(function(d) {
        return _t.html("wikidata." + d);
      });
      enter.append("input").attr("type", "text").call(utilNoAuto).classed("disabled", "true").attr("readonly", "true");
      enter.append("button").attr("class", "form-field-button").attr("title", _t("icons.copy")).call(svgIcon("#iD-operation-copy")).on("click", function(d3_event) {
        d3_event.preventDefault();
        select_default2(this.parentNode).select("input").node().select();
        document.execCommand("copy");
      });
    }
    function fetchWikidataItems(q2, callback) {
      if (!q2 && _hintKey) {
        for (var i2 in _entityIDs) {
          var entity2 = context.hasEntity(_entityIDs[i2]);
          if (entity2.tags[_hintKey]) {
            q2 = entity2.tags[_hintKey];
            break;
          }
        }
      }
      wikidata.itemsForSearchQuery(q2, function(err, data2) {
        if (err)
          return;
        for (var i3 in data2) {
          data2[i3].value = data2[i3].label + " (" + data2[i3].id + ")";
          data2[i3].title = data2[i3].description;
        }
        if (callback)
          callback(data2);
      });
    }
    function change() {
      var syncTags = {};
      syncTags[field.key] = _qid;
      dispatch12.call("change", this, syncTags);
      var initGraph = context.graph();
      var initEntityIDs = _entityIDs;
      wikidata.entityByQID(_qid, function(err, entity2) {
        if (err)
          return;
        if (context.graph() !== initGraph)
          return;
        if (!entity2.sitelinks)
          return;
        var langs = wikidata.languagesToQuery();
        ["labels", "descriptions"].forEach(function(key) {
          if (!entity2[key])
            return;
          var valueLangs = Object.keys(entity2[key]);
          if (valueLangs.length === 0)
            return;
          var valueLang = valueLangs[0];
          if (langs.indexOf(valueLang) === -1) {
            langs.push(valueLang);
          }
        });
        var newWikipediaValue;
        if (_wikipediaKey) {
          var foundPreferred;
          for (var i2 in langs) {
            var lang = langs[i2];
            var siteID = lang.replace("-", "_") + "wiki";
            if (entity2.sitelinks[siteID]) {
              foundPreferred = true;
              newWikipediaValue = lang + ":" + entity2.sitelinks[siteID].title;
              break;
            }
          }
          if (!foundPreferred) {
            var wikiSiteKeys = Object.keys(entity2.sitelinks).filter(function(site) {
              return site.endsWith("wiki");
            });
            if (wikiSiteKeys.length === 0) {
              newWikipediaValue = null;
            } else {
              var wikiLang = wikiSiteKeys[0].slice(0, -4).replace("_", "-");
              var wikiTitle = entity2.sitelinks[wikiSiteKeys[0]].title;
              newWikipediaValue = wikiLang + ":" + wikiTitle;
            }
          }
        }
        if (newWikipediaValue) {
          newWikipediaValue = context.cleanTagValue(newWikipediaValue);
        }
        if (typeof newWikipediaValue === "undefined")
          return;
        var actions = initEntityIDs.map(function(entityID) {
          var entity3 = context.hasEntity(entityID);
          if (!entity3)
            return null;
          var currTags = Object.assign({}, entity3.tags);
          if (newWikipediaValue === null) {
            if (!currTags[_wikipediaKey])
              return null;
            delete currTags[_wikipediaKey];
          } else {
            currTags[_wikipediaKey] = newWikipediaValue;
          }
          return actionChangeTags(entityID, currTags);
        }).filter(Boolean);
        if (!actions.length)
          return;
        context.overwrite(function actionUpdateWikipediaTags(graph3) {
          actions.forEach(function(action) {
            graph3 = action(graph3);
          });
          return graph3;
        }, context.history().undoAnnotation());
      });
    }
    function setLabelForEntity() {
      var label = "";
      if (_wikidataEntity) {
        label = entityPropertyForDisplay(_wikidataEntity, "labels");
        if (label.length === 0) {
          label = _wikidataEntity.id.toString();
        }
      }
      utilGetSetValue(_searchInput, label);
    }
    wiki.tags = function(tags) {
      var isMixed = Array.isArray(tags[field.key]);
      _searchInput.attr("title", isMixed ? tags[field.key].filter(Boolean).join("\n") : null).attr("placeholder", isMixed ? _t("inspector.multiple_values") : "").classed("mixed", isMixed);
      _qid = typeof tags[field.key] === "string" && tags[field.key] || "";
      if (!/^Q[0-9]*$/.test(_qid)) {
        unrecognized();
        return;
      }
      _wikiURL = "https://wikidata.org/wiki/" + _qid;
      wikidata.entityByQID(_qid, function(err, entity2) {
        if (err) {
          unrecognized();
          return;
        }
        _wikidataEntity = entity2;
        setLabelForEntity();
        var description = entityPropertyForDisplay(entity2, "descriptions");
        _selection.select("button.wiki-link").classed("disabled", false);
        _selection.select(".preset-wikidata-description").style("display", function() {
          return description.length > 0 ? "flex" : "none";
        }).select("input").attr("value", description);
        _selection.select(".preset-wikidata-identifier").style("display", function() {
          return entity2.id ? "flex" : "none";
        }).select("input").attr("value", entity2.id);
      });
      function unrecognized() {
        _wikidataEntity = null;
        setLabelForEntity();
        _selection.select(".preset-wikidata-description").style("display", "none");
        _selection.select(".preset-wikidata-identifier").style("display", "none");
        _selection.select("button.wiki-link").classed("disabled", true);
        if (_qid && _qid !== "") {
          _wikiURL = "https://wikidata.org/wiki/Special:Search?search=" + _qid;
        } else {
          _wikiURL = "";
        }
      }
    };
    function entityPropertyForDisplay(wikidataEntity, propKey) {
      if (!wikidataEntity[propKey])
        return "";
      var propObj = wikidataEntity[propKey];
      var langKeys = Object.keys(propObj);
      if (langKeys.length === 0)
        return "";
      var langs = wikidata.languagesToQuery();
      for (var i2 in langs) {
        var lang = langs[i2];
        var valueObj = propObj[lang];
        if (valueObj && valueObj.value && valueObj.value.length > 0)
          return valueObj.value;
      }
      return propObj[langKeys[0]].value;
    }
    wiki.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return wiki;
    };
    wiki.focus = function() {
      _searchInput.node().focus();
    };
    return utilRebind(wiki, dispatch12, "on");
  }

  // modules/ui/fields/wikipedia.js
  function uiFieldWikipedia(field, context) {
    var _arguments = arguments;
    var dispatch12 = dispatch_default("change");
    var wikipedia = services.wikipedia;
    var wikidata = services.wikidata;
    var _langInput = select_default2(null);
    var _titleInput = select_default2(null);
    var _wikiURL = "";
    var _entityIDs;
    var _tags;
    var _dataWikipedia = [];
    _mainFileFetcher.get("wmf_sitematrix").then(function(d) {
      _dataWikipedia = d;
      if (_tags)
        updateForTags(_tags);
    }).catch(function() {
    });
    var langCombo = uiCombobox(context, "wikipedia-lang").fetcher(function(value2, callback) {
      var v = value2.toLowerCase();
      callback(_dataWikipedia.filter(function(d) {
        return d[0].toLowerCase().indexOf(v) >= 0 || d[1].toLowerCase().indexOf(v) >= 0 || d[2].toLowerCase().indexOf(v) >= 0;
      }).map(function(d) {
        return {
          value: d[1]
        };
      }));
    });
    var titleCombo = uiCombobox(context, "wikipedia-title").fetcher(function(value2, callback) {
      if (!value2) {
        value2 = "";
        for (var i2 in _entityIDs) {
          var entity2 = context.hasEntity(_entityIDs[i2]);
          if (entity2.tags.name) {
            value2 = entity2.tags.name;
            break;
          }
        }
      }
      var searchfn = value2.length > 7 ? wikipedia.search : wikipedia.suggestions;
      searchfn(language()[2], value2, function(query, data2) {
        callback(data2.map(function(d) {
          return {
            value: d
          };
        }));
      });
    });
    function wiki(selection2) {
      var wrap2 = selection2.selectAll(".form-field-input-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "form-field-input-wrap form-field-input-".concat(field.type)).merge(wrap2);
      var langContainer = wrap2.selectAll(".wiki-lang-container").data([0]);
      langContainer = langContainer.enter().append("div").attr("class", "wiki-lang-container").merge(langContainer);
      _langInput = langContainer.selectAll("input.wiki-lang").data([0]);
      _langInput = _langInput.enter().append("input").attr("type", "text").attr("class", "wiki-lang").attr("placeholder", _t("translate.localized_translation_language")).call(utilNoAuto).call(langCombo).merge(_langInput);
      _langInput.on("blur", changeLang).on("change", changeLang);
      var titleContainer = wrap2.selectAll(".wiki-title-container").data([0]);
      titleContainer = titleContainer.enter().append("div").attr("class", "wiki-title-container").merge(titleContainer);
      _titleInput = titleContainer.selectAll("input.wiki-title").data([0]);
      _titleInput = _titleInput.enter().append("input").attr("type", "text").attr("class", "wiki-title").attr("id", field.domId).call(utilNoAuto).call(titleCombo).merge(_titleInput);
      _titleInput.on("blur", function() {
        change(true);
      }).on("change", function() {
        change(false);
      });
      var link2 = titleContainer.selectAll(".wiki-link").data([0]);
      link2 = link2.enter().append("button").attr("class", "form-field-button wiki-link").attr("title", _t("icons.view_on", {
        domain: "wikipedia.org"
      })).call(svgIcon("#iD-icon-out-link")).merge(link2);
      link2.on("click", function(d3_event) {
        d3_event.preventDefault();
        if (_wikiURL)
          window.open(_wikiURL, "_blank");
      });
    }
    function defaultLanguageInfo(skipEnglishFallback) {
      var langCode = _mainLocalizer.languageCode().toLowerCase();
      for (var i2 in _dataWikipedia) {
        var d = _dataWikipedia[i2];
        if (d[2] === langCode)
          return d;
      }
      return skipEnglishFallback ? ["", "", ""] : ["English", "English", "en"];
    }
    function language(skipEnglishFallback) {
      var value2 = utilGetSetValue(_langInput).toLowerCase();
      for (var i2 in _dataWikipedia) {
        var d = _dataWikipedia[i2];
        if (d[0].toLowerCase() === value2 || d[1].toLowerCase() === value2 || d[2] === value2)
          return d;
      }
      return defaultLanguageInfo(skipEnglishFallback);
    }
    function changeLang() {
      utilGetSetValue(_langInput, language()[1]);
      change(true);
    }
    function change(skipWikidata) {
      var value2 = utilGetSetValue(_titleInput);
      var m = value2.match(/https?:\/\/([-a-z]+)\.wikipedia\.org\/(?:wiki|\1-[-a-z]+)\/([^#]+)(?:#(.+))?/);
      var langInfo = m && _dataWikipedia.find(function(d) {
        return m[1] === d[2];
      });
      var syncTags = {};
      if (langInfo) {
        var nativeLangName = langInfo[1];
        value2 = decodeURIComponent(m[2]).replace(/_/g, " ");
        if (m[3]) {
          var anchor;
          anchor = decodeURIComponent(m[3]);
          value2 += "#" + anchor.replace(/_/g, " ");
        }
        value2 = value2.slice(0, 1).toUpperCase() + value2.slice(1);
        utilGetSetValue(_langInput, nativeLangName);
        utilGetSetValue(_titleInput, value2);
      }
      if (value2) {
        syncTags.wikipedia = context.cleanTagValue(language()[2] + ":" + value2);
      } else {
        syncTags.wikipedia = void 0;
      }
      dispatch12.call("change", this, syncTags);
      if (skipWikidata || !value2 || !language()[2])
        return;
      var initGraph = context.graph();
      var initEntityIDs = _entityIDs;
      wikidata.itemsByTitle(language()[2], value2, function(err, data2) {
        if (err || !data2 || !Object.keys(data2).length)
          return;
        if (context.graph() !== initGraph)
          return;
        var qids = Object.keys(data2);
        var value3 = qids && qids.find(function(id2) {
          return id2.match(/^Q\d+$/);
        });
        var actions = initEntityIDs.map(function(entityID) {
          var entity2 = context.entity(entityID).tags;
          var currTags = Object.assign({}, entity2);
          if (currTags.wikidata !== value3) {
            currTags.wikidata = value3;
            return actionChangeTags(entityID, currTags);
          }
          return null;
        }).filter(Boolean);
        if (!actions.length)
          return;
        context.overwrite(function actionUpdateWikidataTags(graph3) {
          actions.forEach(function(action) {
            graph3 = action(graph3);
          });
          return graph3;
        }, context.history().undoAnnotation());
      });
    }
    wiki.tags = function(tags) {
      _tags = tags;
      updateForTags(tags);
    };
    function updateForTags(tags) {
      var value2 = typeof tags[field.key] === "string" ? tags[field.key] : "";
      var m = value2.match(/([^:]+):([^#]+)(?:#(.+))?/);
      var tagLang = m && m[1];
      var tagArticleTitle = m && m[2];
      var anchor = m && m[3];
      var tagLangInfo = tagLang && _dataWikipedia.find(function(d) {
        return tagLang === d[2];
      });
      if (tagLangInfo) {
        var nativeLangName = tagLangInfo[1];
        utilGetSetValue(_langInput, nativeLangName);
        utilGetSetValue(_titleInput, tagArticleTitle + (anchor ? "#" + anchor : ""));
        if (anchor) {
          try {
            anchor = encodeURIComponent(anchor.replace(/ /g, "_")).replace(/%/g, ".");
          } catch (e3) {
            anchor = anchor.replace(/ /g, "_");
          }
        }
        _wikiURL = "https://" + tagLang + ".wikipedia.org/wiki/" + tagArticleTitle.replace(/ /g, "_") + (anchor ? "#" + anchor : "");
      } else {
        utilGetSetValue(_titleInput, value2);
        if (value2 && value2 !== "") {
          utilGetSetValue(_langInput, "");
          var defaultLangInfo = defaultLanguageInfo();
          _wikiURL = "https://".concat(defaultLangInfo[2], ".wikipedia.org/w/index.php?fulltext=1&search=").concat(value2);
        } else {
          var shownOrDefaultLangInfo = language(true);
          utilGetSetValue(_langInput, shownOrDefaultLangInfo[1]);
          _wikiURL = "";
        }
      }
    }
    wiki.entityIDs = function(val) {
      if (!_arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return wiki;
    };
    wiki.focus = function() {
      _titleInput.node().focus();
    };
    return utilRebind(wiki, dispatch12, "on");
  }
  uiFieldWikipedia.supportsMultiselection = false;

  // modules/ui/fields/index.js
  var uiFields = {
    access: uiFieldAccess,
    address: uiFieldAddress,
    check: uiFieldCheck,
    combo: uiFieldCombo,
    cycleway: uiFieldCycleway,
    defaultCheck: uiFieldCheck,
    email: uiFieldText,
    identifier: uiFieldText,
    lanes: uiFieldLanes,
    localized: uiFieldLocalized,
    roadspeed: uiFieldRoadspeed,
    roadheight: uiFieldText,
    manyCombo: uiFieldCombo,
    multiCombo: uiFieldCombo,
    networkCombo: uiFieldCombo,
    number: uiFieldText,
    onewayCheck: uiFieldCheck,
    radio: uiFieldRadio,
    restrictions: uiFieldRestrictions,
    semiCombo: uiFieldCombo,
    structureRadio: uiFieldRadio,
    tel: uiFieldText,
    text: uiFieldText,
    textarea: uiFieldTextarea,
    typeCombo: uiFieldCombo,
    url: uiFieldText,
    wikidata: uiFieldWikidata,
    wikipedia: uiFieldWikipedia
  };

  // modules/ui/tag_reference.js
  function uiTagReference(what) {
    var wikibase = what.qid ? services.wikidata : services.osmWikibase;
    var tagReference = {};
    var _button = select_default2(null);
    var _body = select_default2(null);
    var _loaded2;
    var _showing;
    function load2() {
      if (!wikibase)
        return;
      _button.classed("tag-reference-loading", true);
      wikibase.getDocs(what, gotDocs);
    }
    function gotDocs(err, docs2) {
      _body.html("");
      if (!docs2 || !docs2.title) {
        _body.append("p").attr("class", "tag-reference-description").html(_t.html("inspector.no_documentation_key"));
        done();
        return;
      }
      if (docs2.imageURL) {
        _body.append("img").attr("class", "tag-reference-wiki-image").attr("src", docs2.imageURL).on("load", function() {
          done();
        }).on("error", function() {
          select_default2(this).remove();
          done();
        });
      } else {
        done();
      }
      _body.append("p").attr("class", "tag-reference-description").html(docs2.description ? _mainLocalizer.htmlForLocalizedText(docs2.description, docs2.descriptionLocaleCode) : _t.html("inspector.no_documentation_key")).append("a").attr("class", "tag-reference-edit").attr("target", "_blank").attr("title", _t("inspector.edit_reference")).attr("href", docs2.editURL).call(svgIcon("#iD-icon-edit", "inline"));
      if (docs2.wiki) {
        _body.append("a").attr("class", "tag-reference-link").attr("target", "_blank").attr("href", docs2.wiki.url).call(svgIcon("#iD-icon-out-link", "inline")).append("span").html(_t.html(docs2.wiki.text));
      }
      if (what.key === "comment") {
        _body.append("a").attr("class", "tag-reference-comment-link").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).attr("href", _t("commit.about_changeset_comments_link")).append("span").html(_t.html("commit.about_changeset_comments"));
      }
    }
    function done() {
      _loaded2 = true;
      _button.classed("tag-reference-loading", false);
      _body.classed("expanded", true).transition().duration(200).style("max-height", "200px").style("opacity", "1");
      _showing = true;
      _button.selectAll("svg.icon use").each(function() {
        var iconUse = select_default2(this);
        if (iconUse.attr("href") === "#iD-icon-info") {
          iconUse.attr("href", "#iD-icon-info-filled");
        }
      });
    }
    function hide() {
      _body.transition().duration(200).style("max-height", "0px").style("opacity", "0").on("end", function() {
        _body.classed("expanded", false);
      });
      _showing = false;
      _button.selectAll("svg.icon use").each(function() {
        var iconUse = select_default2(this);
        if (iconUse.attr("href") === "#iD-icon-info-filled") {
          iconUse.attr("href", "#iD-icon-info");
        }
      });
    }
    tagReference.button = function(selection2, klass, iconName) {
      _button = selection2.selectAll(".tag-reference-button").data([0]);
      _button = _button.enter().append("button").attr("class", "tag-reference-button " + (klass || "")).attr("title", _t("icons.information")).call(svgIcon("#iD-icon-" + (iconName || "inspect"))).merge(_button);
      _button.on("click", function(d3_event) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        this.blur();
        if (_showing) {
          hide();
        } else if (_loaded2) {
          done();
        } else {
          load2();
        }
      });
    };
    tagReference.body = function(selection2) {
      var itemID = what.qid || what.key + "-" + (what.value || "");
      _body = selection2.selectAll(".tag-reference-body").data([itemID], function(d) {
        return d;
      });
      _body.exit().remove();
      _body = _body.enter().append("div").attr("class", "tag-reference-body").style("max-height", "0").style("opacity", "0").merge(_body);
      if (_showing === false) {
        hide();
      }
    };
    tagReference.showing = function(val) {
      if (!arguments.length)
        return _showing;
      _showing = val;
      return tagReference;
    };
    return tagReference;
  }

  // modules/ui/field.js
  function uiField(context, presetField2, entityIDs, options) {
    options = Object.assign({
      show: true,
      wrap: true,
      remove: true,
      revert: true,
      info: true
    }, options);
    var someFbRoadsSelected = entityIDs ? entityIDs.some(function(entity2) {
      return entity2.__fbid__ && (entity2.tags.source === "maxar" || entity2.tags.source === "digitalglobe");
    }) : false;
    if (someFbRoadsSelected) {
      options.remove = false;
      options.revert = false;
    }
    var dispatch12 = dispatch_default("change", "revert");
    var field = Object.assign({}, presetField2);
    field.domId = utilUniqueString("form-field-" + field.safeid);
    var _show = options.show;
    var _state = "";
    var _tags = {};
    var _entityExtent = null;
    if (entityIDs && entityIDs.length) {
      _entityExtent = utilTotalExtent(entityIDs, context.graph());
    }
    var _locked = false;
    var _lockedTip = uiTooltip().title(_t.html("inspector.lock.suggestion", {
      label: field.label
    })).placement("bottom");
    field.keys = field.keys || [field.key];
    if (_show && !field.impl) {
      createField();
    }
    function createField() {
      field.impl = uiFields[field.type](field, context).on("change", function(t, onInput) {
        dispatch12.call("change", field, t, onInput);
      });
      if (entityIDs) {
        field.entityIDs = entityIDs;
        if (field.impl.entityIDs) {
          field.impl.entityIDs(entityIDs);
        }
      }
    }
    function isModified() {
      if (!entityIDs || !entityIDs.length)
        return false;
      return entityIDs.some(function(entityID) {
        var original = context.graph().base().entities[entityID];
        var latest = context.graph().entity(entityID);
        return field.keys.some(function(key) {
          return original ? latest.tags[key] !== original.tags[key] : latest.tags[key];
        });
      });
    }
    function tagsContainFieldKey() {
      return field.keys.some(function(key) {
        if (field.type === "multiCombo") {
          for (var tagKey in _tags) {
            if (tagKey.indexOf(key) === 0) {
              return true;
            }
          }
          return false;
        }
        return _tags[key] !== void 0;
      });
    }
    function revert2(d3_event, d) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
      if (!entityIDs || _locked)
        return;
      dispatch12.call("revert", d, d.keys);
    }
    function remove4(d3_event, d) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
      if (_locked)
        return;
      var t = {};
      d.keys.forEach(function(key) {
        t[key] = void 0;
      });
      dispatch12.call("change", d, t);
    }
    field.render = function(selection2) {
      var container = selection2.selectAll(".form-field").data([field]);
      var enter = container.enter().append("div").attr("class", function(d) {
        return "form-field form-field-" + d.safeid;
      }).classed("nowrap", !options.wrap);
      if (options.wrap) {
        var labelEnter = enter.append("label").attr("class", "field-label").attr("for", function(d) {
          return d.domId;
        });
        var textEnter = labelEnter.append("span").attr("class", "label-text");
        textEnter.append("span").attr("class", "label-textvalue").html(function(d) {
          return d.label();
        });
        textEnter.append("span").attr("class", "label-textannotation");
        if (options.remove) {
          labelEnter.append("button").attr("class", "remove-icon").attr("title", _t("icons.remove")).call(svgIcon("#iD-operation-delete"));
        }
        if (options.revert) {
          labelEnter.append("button").attr("class", "modified-icon").attr("title", _t("icons.undo")).call(svgIcon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-redo" : "#iD-icon-undo"));
        }
      }
      container = container.merge(enter);
      container.select(".field-label > .remove-icon").on("click", remove4);
      container.select(".field-label > .modified-icon").on("click", revert2);
      container.each(function(d) {
        var selection3 = select_default2(this);
        if (!d.impl) {
          createField();
        }
        var reference, help;
        if (options.wrap && field.type === "restrictions") {
          help = uiFieldHelp(context, "restrictions");
        }
        if (options.wrap && options.info) {
          var referenceKey = d.key || "";
          if (d.type === "multiCombo") {
            referenceKey = referenceKey.replace(/:$/, "");
          }
          reference = uiTagReference(d.reference || {
            key: referenceKey
          }, context);
          if (_state === "hover") {
            reference.showing(false);
          }
        }
        selection3.call(d.impl);
        if (help) {
          selection3.call(help.body).select(".field-label").call(help.button);
        }
        if (reference) {
          selection3.call(reference.body).select(".field-label").call(reference.button);
        }
        d.impl.tags(_tags);
      });
      container.classed("locked", _locked).classed("modified", isModified()).classed("present", tagsContainFieldKey());
      var annotation = container.selectAll(".field-label .label-textannotation");
      var icon2 = annotation.selectAll(".icon").data(_locked ? [0] : []);
      icon2.exit().remove();
      icon2.enter().append("svg").attr("class", "icon").append("use").attr("xlink:href", "#fas-lock");
      container.call(_locked ? _lockedTip : _lockedTip.destroy);
    };
    field.state = function(val) {
      if (!arguments.length)
        return _state;
      _state = val;
      return field;
    };
    field.tags = function(val) {
      if (!arguments.length)
        return _tags;
      _tags = val;
      if (tagsContainFieldKey() && !_show) {
        _show = true;
        if (!field.impl) {
          createField();
        }
      }
      return field;
    };
    field.locked = function(val) {
      if (!arguments.length)
        return _locked;
      _locked = val;
      return field;
    };
    field.show = function() {
      _show = true;
      if (!field.impl) {
        createField();
      }
      if (field.default && field.key && _tags[field.key] !== field.default) {
        var t = {};
        t[field.key] = field.default;
        dispatch12.call("change", this, t);
      }
    };
    field.isShown = function() {
      return _show;
    };
    field.isAllowed = function() {
      if (entityIDs && entityIDs.length > 1 && uiFields[field.type].supportsMultiselection === false)
        return false;
      if (field.geometry && !entityIDs.every(function(entityID) {
        return field.matchGeometry(context.graph().geometry(entityID));
      }))
        return false;
      if (entityIDs && _entityExtent && field.locationSetID) {
        var validLocations = _mainLocations.locationsAt(_entityExtent.center());
        if (!validLocations[field.locationSetID])
          return false;
      }
      var prerequisiteTag = field.prerequisiteTag;
      if (entityIDs && !tagsContainFieldKey() && prerequisiteTag) {
        if (!entityIDs.every(function(entityID) {
          var entity2 = context.graph().entity(entityID);
          if (prerequisiteTag.key) {
            var value2 = entity2.tags[prerequisiteTag.key];
            if (!value2)
              return false;
            if (prerequisiteTag.valueNot) {
              return prerequisiteTag.valueNot !== value2;
            }
            if (prerequisiteTag.value) {
              return prerequisiteTag.value === value2;
            }
          } else if (prerequisiteTag.keyNot) {
            if (entity2.tags[prerequisiteTag.keyNot])
              return false;
          }
          return true;
        }))
          return false;
      }
      return true;
    };
    field.focus = function() {
      if (field.impl) {
        field.impl.focus();
      }
    };
    return utilRebind(field, dispatch12, "on");
  }

  // modules/ui/form_fields.js
  function uiFormFields(context) {
    var moreCombo = uiCombobox(context, "more-fields").minItems(1);
    var _fieldsArr = [];
    var _lastPlaceholder = "";
    var _state = "";
    var _klass = "";
    function formFields(selection2) {
      var allowedFields = _fieldsArr.filter(function(field) {
        return field.isAllowed();
      });
      var shown = allowedFields.filter(function(field) {
        return field.isShown();
      });
      var notShown = allowedFields.filter(function(field) {
        return !field.isShown();
      });
      var container = selection2.selectAll(".form-fields-container").data([0]);
      container = container.enter().append("div").attr("class", "form-fields-container " + (_klass || "")).merge(container);
      var fields = container.selectAll(".wrap-form-field").data(shown, function(d) {
        return d.id + (d.entityIDs ? d.entityIDs.join() : "");
      });
      fields.exit().remove();
      var enter = fields.enter().append("div").attr("class", function(d) {
        return "wrap-form-field wrap-form-field-" + d.safeid;
      });
      fields = fields.merge(enter);
      fields.order().each(function(d) {
        select_default2(this).call(d.render);
      });
      var titles = [];
      var moreFields = notShown.map(function(field) {
        var title = field.title();
        titles.push(title);
        var terms = field.terms();
        if (field.key)
          terms.push(field.key);
        if (field.keys)
          terms = terms.concat(field.keys);
        return {
          display: field.label(),
          value: title,
          title: title,
          field: field,
          terms: terms
        };
      });
      var placeholder = titles.slice(0, 3).join(", ") + (titles.length > 3 ? "\u2026" : "");
      var more = selection2.selectAll(".more-fields").data(_state === "hover" || moreFields.length === 0 ? [] : [0]);
      more.exit().remove();
      var moreEnter = more.enter().append("div").attr("class", "more-fields").append("label");
      moreEnter.append("span").html(_t.html("inspector.add_fields"));
      more = moreEnter.merge(more);
      var input4 = more.selectAll(".value").data([0]);
      input4.exit().remove();
      input4 = input4.enter().append("input").attr("class", "value").attr("type", "text").attr("placeholder", placeholder).call(utilNoAuto).merge(input4);
      input4.call(utilGetSetValue, "").call(moreCombo.data(moreFields).on("accept", function(d) {
        if (!d)
          return;
        var field = d.field;
        field.show();
        selection2.call(formFields);
        field.focus();
      }));
      if (_lastPlaceholder !== placeholder) {
        input4.attr("placeholder", placeholder);
        _lastPlaceholder = placeholder;
      }
    }
    formFields.fieldsArr = function(val) {
      if (!arguments.length)
        return _fieldsArr;
      _fieldsArr = val || [];
      return formFields;
    };
    formFields.state = function(val) {
      if (!arguments.length)
        return _state;
      _state = val;
      return formFields;
    };
    formFields.klass = function(val) {
      if (!arguments.length)
        return _klass;
      _klass = val;
      return formFields;
    };
    return formFields;
  }

  // modules/ui/changeset_editor.js
  function uiChangesetEditor(context) {
    var dispatch12 = dispatch_default("change");
    var formFields = uiFormFields(context);
    var commentCombo = uiCombobox(context, "comment").caseSensitive(true);
    var _fieldsArr;
    var _tags;
    var _changesetID;
    function changesetEditor(selection2) {
      render(selection2);
    }
    function render(selection2) {
      var initial = false;
      if (!_fieldsArr) {
        initial = true;
        var presets = _mainPresetIndex;
        _fieldsArr = [uiField(context, presets.field("comment"), null, {
          show: true,
          revert: false
        }), uiField(context, presets.field("source"), null, {
          show: false,
          revert: false
        }), uiField(context, presets.field("hashtags"), null, {
          show: false,
          revert: false
        })];
        _fieldsArr.forEach(function(field) {
          field.on("change", function(t, onInput) {
            dispatch12.call("change", field, void 0, t, onInput);
          });
        });
      }
      _fieldsArr.forEach(function(field) {
        field.tags(_tags);
      });
      selection2.call(formFields.fieldsArr(_fieldsArr));
      if (initial) {
        var commentField = selection2.select(".form-field-comment textarea");
        var commentNode = commentField.node();
        if (commentNode) {
          commentNode.focus();
          commentNode.select();
        }
        utilTriggerEvent(commentField, "blur");
        var osm = context.connection();
        if (osm) {
          osm.userChangesets(function(err, changesets) {
            if (err)
              return;
            var comments = changesets.map(function(changeset) {
              var comment = changeset.tags.comment;
              return comment ? {
                title: comment,
                value: comment
              } : null;
            }).filter(Boolean);
            commentField.call(commentCombo.data(utilArrayUniqBy(comments, "title")));
          });
        }
      }
      var hasGoogle = _tags.comment.match(/google/i);
      var commentWarning = selection2.select(".form-field-comment").selectAll(".comment-warning").data(hasGoogle ? [0] : []);
      commentWarning.exit().transition().duration(200).style("opacity", 0).remove();
      var commentEnter = commentWarning.enter().insert("div", ".tag-reference-body").attr("class", "field-warning comment-warning").style("opacity", 0);
      commentEnter.append("a").attr("target", "_blank").call(svgIcon("#iD-icon-alert", "inline")).attr("href", _t("commit.google_warning_link")).append("span").html(_t.html("commit.google_warning"));
      commentEnter.transition().duration(200).style("opacity", 1);
    }
    changesetEditor.tags = function(_2) {
      if (!arguments.length)
        return _tags;
      _tags = _2;
      return changesetEditor;
    };
    changesetEditor.changesetID = function(_2) {
      if (!arguments.length)
        return _changesetID;
      if (_changesetID === _2)
        return changesetEditor;
      _changesetID = _2;
      _fieldsArr = null;
      return changesetEditor;
    };
    return utilRebind(changesetEditor, dispatch12, "on");
  }

  // modules/ui/toggle.js
  function uiToggle(show, callback) {
    return function(selection2) {
      selection2.style("opacity", show ? 0 : 1).classed("hide", false).transition().style("opacity", show ? 1 : 0).on("end", function() {
        select_default2(this).classed("hide", !show).style("opacity", null);
        if (callback)
          callback.apply(this);
      });
    };
  }

  // modules/ui/disclosure.js
  function uiDisclosure(context, key, expandedDefault) {
    var dispatch12 = dispatch_default("toggled");
    var _expanded;
    var _label = utilFunctor("");
    var _updatePreference = true;
    var _content = function _content2() {
    };
    var disclosure = function disclosure2(selection2) {
      if (_expanded === void 0 || _expanded === null) {
        var preference = corePreferences("disclosure." + key + ".expanded");
        _expanded = preference === null ? !!expandedDefault : preference === "true";
      }
      var hideToggle = selection2.selectAll(".hide-toggle-" + key).data([0]);
      var hideToggleEnter = hideToggle.enter().append("a").attr("href", "#").attr("class", "hide-toggle hide-toggle-" + key).call(svgIcon("", "pre-text", "hide-toggle-icon"));
      hideToggleEnter.append("span").attr("class", "hide-toggle-text");
      hideToggle = hideToggleEnter.merge(hideToggle);
      hideToggle.on("click", toggle4).classed("expanded", _expanded);
      hideToggle.selectAll(".hide-toggle-text").html(_label());
      hideToggle.selectAll(".hide-toggle-icon").attr("xlink:href", _expanded ? "#iD-icon-down" : _mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward");
      var wrap2 = selection2.selectAll(".disclosure-wrap").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "disclosure-wrap disclosure-wrap-" + key).merge(wrap2).classed("hide", !_expanded);
      if (_expanded) {
        wrap2.call(_content);
      }
      function toggle4(d3_event) {
        d3_event.preventDefault();
        _expanded = !_expanded;
        if (_updatePreference) {
          corePreferences("disclosure." + key + ".expanded", _expanded);
        }
        hideToggle.classed("expanded", _expanded);
        hideToggle.selectAll(".hide-toggle-icon").attr("xlink:href", _expanded ? "#iD-icon-down" : _mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward");
        wrap2.call(uiToggle(_expanded));
        if (_expanded) {
          wrap2.call(_content);
        }
        dispatch12.call("toggled", this, _expanded);
      }
    };
    disclosure.label = function(val) {
      if (!arguments.length)
        return _label;
      _label = utilFunctor(val);
      return disclosure;
    };
    disclosure.expanded = function(val) {
      if (!arguments.length)
        return _expanded;
      _expanded = val;
      return disclosure;
    };
    disclosure.updatePreference = function(val) {
      if (!arguments.length)
        return _updatePreference;
      _updatePreference = val;
      return disclosure;
    };
    disclosure.content = function(val) {
      if (!arguments.length)
        return _content;
      _content = val;
      return disclosure;
    };
    return utilRebind(disclosure, dispatch12, "on");
  }

  // modules/ui/section.js
  function uiSection(id2, context) {
    var _classes = utilFunctor("");
    var _shouldDisplay;
    var _content;
    var _disclosure;
    var _label;
    var _expandedByDefault = utilFunctor(true);
    var _disclosureContent;
    var _disclosureExpanded;
    var _containerSelection = select_default2(null);
    var section = {
      id: id2
    };
    section.classes = function(val) {
      if (!arguments.length)
        return _classes;
      _classes = utilFunctor(val);
      return section;
    };
    section.label = function(val) {
      if (!arguments.length)
        return _label;
      _label = utilFunctor(val);
      return section;
    };
    section.expandedByDefault = function(val) {
      if (!arguments.length)
        return _expandedByDefault;
      _expandedByDefault = utilFunctor(val);
      return section;
    };
    section.shouldDisplay = function(val) {
      if (!arguments.length)
        return _shouldDisplay;
      _shouldDisplay = utilFunctor(val);
      return section;
    };
    section.content = function(val) {
      if (!arguments.length)
        return _content;
      _content = val;
      return section;
    };
    section.disclosureContent = function(val) {
      if (!arguments.length)
        return _disclosureContent;
      _disclosureContent = val;
      return section;
    };
    section.disclosureExpanded = function(val) {
      if (!arguments.length)
        return _disclosureExpanded;
      _disclosureExpanded = val;
      return section;
    };
    section.render = function(selection2) {
      _containerSelection = selection2.selectAll(".section-" + id2).data([0]);
      var sectionEnter = _containerSelection.enter().append("div").attr("class", "section section-" + id2 + " " + (_classes && _classes() || ""));
      _containerSelection = sectionEnter.merge(_containerSelection);
      _containerSelection.call(renderContent);
    };
    section.reRender = function() {
      _containerSelection.call(renderContent);
    };
    section.selection = function() {
      return _containerSelection;
    };
    section.disclosure = function() {
      return _disclosure;
    };
    function renderContent(selection2) {
      if (_shouldDisplay) {
        var shouldDisplay = _shouldDisplay();
        selection2.classed("hide", !shouldDisplay);
        if (!shouldDisplay) {
          selection2.html("");
          return;
        }
      }
      if (_disclosureContent) {
        if (!_disclosure) {
          _disclosure = uiDisclosure(context, id2.replace(/-/g, "_"), _expandedByDefault()).label(_label || "").content(_disclosureContent);
        }
        if (_disclosureExpanded !== void 0) {
          _disclosure.expanded(_disclosureExpanded);
          _disclosureExpanded = void 0;
        }
        selection2.call(_disclosure);
        return;
      }
      if (_content) {
        selection2.call(_content);
      }
    }
    return section;
  }

  // modules/ui/sections/changes.js
  function uiSectionChanges(context) {
    var detected = utilDetect();
    var _discardTags = {};
    _mainFileFetcher.get("discarded").then(function(d) {
      _discardTags = d;
    }).catch(function() {
    });
    var section = uiSection("changes-list", context).label(function() {
      var history = context.history();
      var summary = history.difference().summary();
      return _t("inspector.title_count", {
        title: _t.html("commit.changes"),
        count: summary.length
      });
    }).disclosureContent(renderDisclosureContent);
    function renderDisclosureContent(selection2) {
      var history = context.history();
      var summary = history.difference().summary();
      var container = selection2.selectAll(".commit-section").data([0]);
      var containerEnter = container.enter().append("div").attr("class", "commit-section");
      containerEnter.append("ul").attr("class", "changeset-list");
      container = containerEnter.merge(container);
      var items = container.select("ul").selectAll("li").data(summary);
      var itemsEnter = items.enter().append("li").attr("class", "change-item");
      var buttons = itemsEnter.append("button").on("mouseover", mouseover).on("mouseout", mouseout).on("click", click);
      buttons.each(function(d) {
        select_default2(this).call(svgIcon("#iD-icon-" + d.entity.geometry(d.graph), "pre-text " + d.changeType));
      });
      buttons.append("span").attr("class", "change-type").html(function(d) {
        return _t.html("commit." + d.changeType) + " ";
      });
      buttons.append("strong").attr("class", "entity-type").html(function(d) {
        var matched = _mainPresetIndex.match(d.entity, d.graph);
        return matched && matched.name() || utilDisplayType(d.entity.id);
      });
      buttons.append("span").attr("class", "entity-name").html(function(d) {
        var name = utilDisplayName(d.entity) || "", string = "";
        if (name !== "") {
          string += ":";
        }
        return string += " " + name;
      });
      items = itemsEnter.merge(items);
      var changeset = new osmChangeset().update({
        id: void 0
      });
      var changes = history.changes(actionDiscardTags(history.difference(), _discardTags));
      delete changeset.id;
      var data2 = JXON.stringify(changeset.osmChangeJXON(changes));
      var blob = new Blob([data2], {
        type: "text/xml;charset=utf-8;"
      });
      var fileName = "changes.osc";
      var linkEnter = container.selectAll(".download-changes").data([0]).enter().append("a").attr("class", "download-changes");
      if (detected.download) {
        linkEnter.attr("href", window.URL.createObjectURL(blob)).attr("download", fileName);
      } else {
        linkEnter.attr("target", "_blank").on("click.download", function() {
          navigator.msSaveBlob(blob, fileName);
        });
      }
      linkEnter.call(svgIcon("#iD-icon-load", "inline")).append("span").html(_t.html("commit.download_changes"));
      function mouseover(d) {
        if (d.entity) {
          context.surface().selectAll(utilEntityOrMemberSelector([d.entity.id], context.graph())).classed("hover", true);
        }
      }
      function mouseout() {
        context.surface().selectAll(".hover").classed("hover", false);
      }
      function click(d3_event, change) {
        if (change.changeType !== "deleted") {
          var entity2 = change.entity;
          context.map().zoomToEase(entity2);
          context.surface().selectAll(utilEntityOrMemberSelector([entity2.id], context.graph())).classed("hover", true);
        }
      }
    }
    return section;
  }

  // modules/ui/commit_warnings.js
  function uiCommitWarnings(context) {
    function commitWarnings(selection2) {
      var issuesBySeverity = context.validator().getIssuesBySeverity({
        what: "edited",
        where: "all",
        includeDisabledRules: true
      });
      for (var severity in issuesBySeverity) {
        var issues = issuesBySeverity[severity];
        if (severity !== "error") {
          issues = issues.filter(function(issue) {
            return issue.type !== "help_request";
          });
        }
        var section = severity + "-section";
        var issueItem = severity + "-item";
        var container = selection2.selectAll("." + section).data(issues.length ? [0] : []);
        container.exit().remove();
        var containerEnter = container.enter().append("div").attr("class", "modal-section " + section + " fillL2");
        containerEnter.append("h3").html(severity === "warning" ? _t.html("commit.warnings") : _t.html("commit.errors"));
        containerEnter.append("ul").attr("class", "changeset-list");
        container = containerEnter.merge(container);
        var items = container.select("ul").selectAll("li").data(issues, function(d) {
          return d.key;
        });
        items.exit().remove();
        var itemsEnter = items.enter().append("li").attr("class", issueItem);
        var buttons = itemsEnter.append("button").on("mouseover", function(d3_event, d) {
          if (d.entityIds) {
            context.surface().selectAll(utilEntityOrMemberSelector(d.entityIds, context.graph())).classed("hover", true);
          }
        }).on("mouseout", function() {
          context.surface().selectAll(".hover").classed("hover", false);
        }).on("click", function(d3_event, d) {
          context.validator().focusIssue(d);
        });
        buttons.call(svgIcon("#iD-icon-alert", "pre-text"));
        buttons.append("strong").attr("class", "issue-message");
        buttons.filter(function(d) {
          return d.tooltip;
        }).call(uiTooltip().title(function(d) {
          return d.tooltip;
        }).placement("top"));
        items = itemsEnter.merge(items);
        items.selectAll(".issue-message").html(function(d) {
          return d.message(context);
        });
      }
    }
    return commitWarnings;
  }

  // modules/ui/sections/raw_tag_editor.js
  function uiSectionRawTagEditor(id2, context) {
    var section = uiSection(id2, context).classes("raw-tag-editor").label(function() {
      var count = Object.keys(_tags).filter(function(d) {
        return d;
      }).length;
      return _t("inspector.title_count", {
        title: _t.html("inspector.tags"),
        count: count
      });
    }).expandedByDefault(false).disclosureContent(renderDisclosureContent);
    var taginfo = services.taginfo;
    var dispatch12 = dispatch_default("change");
    var availableViews = [{
      id: "list",
      icon: "#fas-th-list"
    }, {
      id: "text",
      icon: "#fas-i-cursor"
    }];
    var _tagView = corePreferences("raw-tag-editor-view") || "list";
    var _readOnlyTags = [];
    var _orderedKeys = [];
    var _showBlank = false;
    var _pendingChange = null;
    var _state;
    var _presets;
    var _tags;
    var _entityIDs;
    var _didInteract = false;
    function interacted() {
      _didInteract = true;
    }
    function renderDisclosureContent(wrap2) {
      _orderedKeys = _orderedKeys.filter(function(key) {
        return _tags[key] !== void 0;
      });
      var all = Object.keys(_tags).sort();
      var missingKeys = utilArrayDifference(all, _orderedKeys);
      for (var i2 in missingKeys) {
        _orderedKeys.push(missingKeys[i2]);
      }
      var rowData = _orderedKeys.map(function(key, i3) {
        return {
          index: i3,
          key: key,
          value: _tags[key]
        };
      });
      if (!rowData.length || _showBlank) {
        _showBlank = false;
        rowData.push({
          index: rowData.length,
          key: "",
          value: ""
        });
      }
      var options = wrap2.selectAll(".raw-tag-options").data([0]);
      options.exit().remove();
      var optionsEnter = options.enter().insert("div", ":first-child").attr("class", "raw-tag-options");
      var optionEnter = optionsEnter.selectAll(".raw-tag-option").data(availableViews, function(d) {
        return d.id;
      }).enter();
      optionEnter.append("button").attr("class", function(d) {
        return "raw-tag-option raw-tag-option-" + d.id + (_tagView === d.id ? " selected" : "");
      }).attr("title", function(d) {
        return _t("icons." + d.id);
      }).on("click", function(d3_event, d) {
        _tagView = d.id;
        corePreferences("raw-tag-editor-view", d.id);
        wrap2.selectAll(".raw-tag-option").classed("selected", function(datum2) {
          return datum2 === d;
        });
        wrap2.selectAll(".tag-text").classed("hide", d.id !== "text").each(setTextareaHeight);
        wrap2.selectAll(".tag-list, .add-row").classed("hide", d.id !== "list");
      }).each(function(d) {
        select_default2(this).call(svgIcon(d.icon));
      });
      var textData = rowsToText(rowData);
      var textarea = wrap2.selectAll(".tag-text").data([0]);
      textarea = textarea.enter().append("textarea").attr("class", "tag-text" + (_tagView !== "text" ? " hide" : "")).call(utilNoAuto).attr("placeholder", _t("inspector.key_value")).attr("spellcheck", "false").merge(textarea);
      textarea.call(utilGetSetValue, textData).each(setTextareaHeight).on("input", setTextareaHeight).on("focus", interacted).on("blur", textChanged).on("change", textChanged);
      var list = wrap2.selectAll(".tag-list").data([0]);
      list = list.enter().append("ul").attr("class", "tag-list" + (_tagView !== "list" ? " hide" : "")).merge(list);
      var addRowEnter = wrap2.selectAll(".add-row").data([0]).enter().append("div").attr("class", "add-row" + (_tagView !== "list" ? " hide" : ""));
      addRowEnter.append("button").attr("class", "add-tag").call(svgIcon("#iD-icon-plus", "light")).on("click", addTag);
      addRowEnter.append("div").attr("class", "space-value");
      addRowEnter.append("div").attr("class", "space-buttons");
      var items = list.selectAll(".tag-row").data(rowData, function(d) {
        return d.key;
      });
      items.exit().each(unbind).remove();
      var itemsEnter = items.enter().append("li").attr("class", "tag-row").classed("readonly", isReadOnly);
      var innerWrap = itemsEnter.append("div").attr("class", "inner-wrap");
      innerWrap.append("div").attr("class", "key-wrap").append("input").property("type", "text").attr("class", "key").call(utilNoAuto).on("focus", interacted).on("blur", keyChange).on("change", keyChange);
      innerWrap.append("div").attr("class", "value-wrap").append("input").property("type", "text").attr("class", "value").call(utilNoAuto).on("focus", interacted).on("blur", valueChange).on("change", valueChange).on("keydown.push-more", pushMore);
      innerWrap.append("button").attr("class", "form-field-button remove").attr("title", _t("icons.remove")).call(svgIcon("#iD-operation-delete"));
      items = items.merge(itemsEnter).sort(function(a, b2) {
        return a.index - b2.index;
      });
      items.each(function(d) {
        var row = select_default2(this);
        var key = row.select("input.key");
        var value2 = row.select("input.value");
        if (_entityIDs && taginfo && _state !== "hover") {
          bindTypeahead(key, value2);
        }
        var referenceOptions = {
          key: d.key
        };
        if (typeof d.value === "string") {
          referenceOptions.value = d.value;
        }
        var reference = uiTagReference(referenceOptions, context);
        if (_state === "hover") {
          reference.showing(false);
        }
        row.select(".inner-wrap").call(reference.button);
        row.call(reference.body);
        row.select("button.remove");
      });
      items.selectAll("input.key").attr("title", function(d) {
        return d.key;
      }).call(utilGetSetValue, function(d) {
        return d.key;
      }).attr("readonly", function(d) {
        return isReadOnly(d) || typeof d.value !== "string" || null;
      });
      items.selectAll("input.value").attr("title", function(d) {
        return Array.isArray(d.value) ? d.value.filter(Boolean).join("\n") : d.value;
      }).classed("mixed", function(d) {
        return Array.isArray(d.value);
      }).attr("placeholder", function(d) {
        return typeof d.value === "string" ? null : _t("inspector.multiple_values");
      }).call(utilGetSetValue, function(d) {
        return typeof d.value === "string" ? d.value : "";
      }).attr("readonly", function(d) {
        return isReadOnly(d) || null;
      });
      items.selectAll("button.remove").on(("PointerEvent" in window ? "pointer" : "mouse") + "down", removeTag);
    }
    function isReadOnly(d) {
      for (var i2 = 0; i2 < _readOnlyTags.length; i2++) {
        if (d.key.match(_readOnlyTags[i2]) !== null) {
          return true;
        }
      }
      return false;
    }
    function setTextareaHeight() {
      if (_tagView !== "text")
        return;
      var selection2 = select_default2(this);
      var matches = selection2.node().value.match(/\n/g);
      var lineCount = 2 + Number(matches && matches.length);
      var lineHeight = 20;
      selection2.style("height", lineCount * lineHeight + "px");
    }
    function stringify3(s) {
      return JSON.stringify(s).slice(1, -1);
    }
    function unstringify(s) {
      var leading = "";
      var trailing = "";
      if (s.length < 1 || s.charAt(0) !== '"') {
        leading = '"';
      }
      if (s.length < 2 || s.charAt(s.length - 1) !== '"' || s.charAt(s.length - 1) === '"' && s.charAt(s.length - 2) === "\\") {
        trailing = '"';
      }
      return JSON.parse(leading + s + trailing);
    }
    function rowsToText(rows) {
      var str = rows.filter(function(row) {
        return row.key && row.key.trim() !== "";
      }).map(function(row) {
        var rawVal = row.value;
        if (typeof rawVal !== "string")
          rawVal = "*";
        var val = rawVal ? stringify3(rawVal) : "";
        return stringify3(row.key) + "=" + val;
      }).join("\n");
      if (_state !== "hover" && str.length) {
        return str + "\n";
      }
      return str;
    }
    function textChanged() {
      var newText = this.value.trim();
      var newTags = {};
      newText.split("\n").forEach(function(row) {
        var m = row.match(/^\s*([^=]+)=(.*)$/);
        if (m !== null) {
          var k = context.cleanTagKey(unstringify(m[1].trim()));
          var v = context.cleanTagValue(unstringify(m[2].trim()));
          newTags[k] = v;
        }
      });
      var tagDiff = utilTagDiff(_tags, newTags);
      if (!tagDiff.length)
        return;
      _pendingChange = _pendingChange || {};
      tagDiff.forEach(function(change) {
        if (isReadOnly({
          key: change.key
        }))
          return;
        if (change.newVal === "*" && typeof change.oldVal !== "string")
          return;
        if (change.type === "-") {
          _pendingChange[change.key] = void 0;
        } else if (change.type === "+") {
          _pendingChange[change.key] = change.newVal || "";
        }
      });
      if (Object.keys(_pendingChange).length === 0) {
        _pendingChange = null;
        return;
      }
      scheduleChange();
    }
    function pushMore(d3_event) {
      if (d3_event.keyCode === 9 && !d3_event.shiftKey && section.selection().selectAll(".tag-list li:last-child input.value").node() === this && utilGetSetValue(select_default2(this))) {
        addTag();
      }
    }
    function bindTypeahead(key, value2) {
      if (isReadOnly(key.datum()))
        return;
      if (Array.isArray(value2.datum().value)) {
        value2.call(uiCombobox(context, "tag-value").minItems(1).fetcher(function(value3, callback) {
          var keyString = utilGetSetValue(key);
          if (!_tags[keyString])
            return;
          var data2 = _tags[keyString].filter(Boolean).map(function(tagValue) {
            return {
              value: tagValue,
              title: tagValue
            };
          });
          callback(data2);
        }));
        return;
      }
      var geometry6 = context.graph().geometry(_entityIDs[0]);
      key.call(uiCombobox(context, "tag-key").fetcher(function(value3, callback) {
        taginfo.keys({
          debounce: true,
          geometry: geometry6,
          query: value3
        }, function(err, data2) {
          if (!err) {
            var filtered = data2.filter(function(d) {
              return _tags[d.value] === void 0;
            });
            callback(sort(value3, filtered));
          }
        });
      }));
      value2.call(uiCombobox(context, "tag-value").fetcher(function(value3, callback) {
        taginfo.values({
          debounce: true,
          key: utilGetSetValue(key),
          geometry: geometry6,
          query: value3
        }, function(err, data2) {
          if (!err)
            callback(sort(value3, data2));
        });
      }));
      function sort(value3, data2) {
        var sameletter = [];
        var other = [];
        for (var i2 = 0; i2 < data2.length; i2++) {
          if (data2[i2].value.substring(0, value3.length) === value3) {
            sameletter.push(data2[i2]);
          } else {
            other.push(data2[i2]);
          }
        }
        return sameletter.concat(other);
      }
    }
    function unbind() {
      var row = select_default2(this);
      row.selectAll("input.key").call(uiCombobox.off, context);
      row.selectAll("input.value").call(uiCombobox.off, context);
    }
    function keyChange(d3_event, d) {
      if (select_default2(this).attr("readonly"))
        return;
      var kOld = d.key;
      if (_pendingChange && _pendingChange.hasOwnProperty(kOld) && _pendingChange[kOld] === void 0)
        return;
      var kNew = context.cleanTagKey(this.value.trim());
      if (isReadOnly({
        key: kNew
      })) {
        this.value = kOld;
        return;
      }
      if (kNew && kNew !== kOld && _tags[kNew] !== void 0) {
        this.value = kOld;
        section.selection().selectAll(".tag-list input.value").each(function(d2) {
          if (d2.key === kNew) {
            var input4 = select_default2(this).node();
            input4.focus();
            input4.select();
          }
        });
        return;
      }
      var row = this.parentNode.parentNode;
      var inputVal = select_default2(row).selectAll("input.value");
      var vNew = context.cleanTagValue(utilGetSetValue(inputVal));
      _pendingChange = _pendingChange || {};
      if (kOld) {
        _pendingChange[kOld] = void 0;
      }
      _pendingChange[kNew] = vNew;
      var existingKeyIndex = _orderedKeys.indexOf(kOld);
      if (existingKeyIndex !== -1)
        _orderedKeys[existingKeyIndex] = kNew;
      d.key = kNew;
      d.value = vNew;
      this.value = kNew;
      utilGetSetValue(inputVal, vNew);
      scheduleChange();
    }
    function valueChange(d3_event, d) {
      if (isReadOnly(d))
        return;
      if (typeof d.value !== "string" && !this.value)
        return;
      if (_pendingChange && _pendingChange.hasOwnProperty(d.key) && _pendingChange[d.key] === void 0)
        return;
      _pendingChange = _pendingChange || {};
      _pendingChange[d.key] = context.cleanTagValue(this.value);
      scheduleChange();
    }
    function removeTag(d3_event, d) {
      if (isReadOnly(d))
        return;
      if (d.key === "") {
        _showBlank = false;
        section.reRender();
      } else {
        _orderedKeys = _orderedKeys.filter(function(key) {
          return key !== d.key;
        });
        _pendingChange = _pendingChange || {};
        _pendingChange[d.key] = void 0;
        scheduleChange();
      }
    }
    function addTag() {
      window.setTimeout(function() {
        _showBlank = true;
        section.reRender();
        section.selection().selectAll(".tag-list li:last-child input.key").node().focus();
      }, 20);
    }
    function scheduleChange() {
      var entityIDs = _entityIDs;
      window.setTimeout(function() {
        if (!_pendingChange)
          return;
        dispatch12.call("change", this, entityIDs, _pendingChange);
        _pendingChange = null;
      }, 10);
    }
    section.state = function(val) {
      if (!arguments.length)
        return _state;
      if (_state !== val) {
        _orderedKeys = [];
        _state = val;
      }
      return section;
    };
    section.presets = function(val) {
      if (!arguments.length)
        return _presets;
      _presets = val;
      if (_presets && _presets.length && _presets[0].isFallback()) {
        section.disclosureExpanded(true);
      } else if (!_didInteract) {
        section.disclosureExpanded(null);
      }
      return section;
    };
    section.tags = function(val) {
      if (!arguments.length)
        return _tags;
      _tags = val;
      return section;
    };
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      if (!_entityIDs || !val || !utilArrayIdentical(_entityIDs, val)) {
        _entityIDs = val;
        _orderedKeys = [];
      }
      return section;
    };
    section.readOnlyTags = function(val) {
      if (!arguments.length)
        return _readOnlyTags;
      _readOnlyTags = val;
      return section;
    };
    return utilRebind(section, dispatch12, "on");
  }

  // modules/ui/commit.js
  var readOnlyTags = [/^changesets_count$/, /^created_by$/, /^ideditor:/, /^imagery_used$/, /^host$/, /^locale$/, /^warnings:/, /^resolved:/, /^closed:note$/, /^closed:keepright$/, /^closed:improveosm:/, /^closed:osmose:/];
  var hashtagRegex = /(#[^\u2000-\u206F\u2E00-\u2E7F\s\\'!"#$%()*,.\/:;<=>?@\[\]^`{|}~]+)/g;
  function uiCommit(context) {
    var dispatch12 = dispatch_default("cancel");
    var _userDetails2;
    var _selection;
    var changesetEditor = uiChangesetEditor(context).on("change", changeTags);
    var rawTagEditor = uiSectionRawTagEditor("changeset-tag-editor", context).on("change", changeTags).readOnlyTags(readOnlyTags);
    var commitChanges = uiSectionChanges(context);
    var commitWarnings = uiCommitWarnings(context);
    function commit(selection2) {
      _selection = selection2;
      if (!context.changeset)
        initChangeset();
      updateSessionChangesetTags();
      selection2.call(render);
    }
    function initChangeset() {
      var commentDate = +corePreferences("commentDate") || 0;
      var currDate = Date.now();
      var cutoff = 2 * 86400 * 1e3;
      if (commentDate > currDate || currDate - commentDate > cutoff) {
        corePreferences("comment", null);
        corePreferences("hashtags", null);
        corePreferences("source", null);
      }
      if (context.defaultChangesetComment()) {
        corePreferences("comment", context.defaultChangesetComment());
        corePreferences("commentDate", Date.now());
      }
      if (context.defaultChangesetSource()) {
        corePreferences("source", context.defaultChangesetSource());
        corePreferences("commentDate", Date.now());
      }
      if (context.defaultChangesetHashtags()) {
        corePreferences("hashtags", context.defaultChangesetHashtags());
        corePreferences("commentDate", Date.now());
      }
      var comment = services.esriData.getLoadedDatasetNames().join(", ");
      var tags = {
        comment: corePreferences("comment") || (comment.includes("Address Update") ? comment : "Import ".concat(comment)),
        created_by: context.cleanTagValue("LINZ Data Import " + context.rapidContext().version),
        host: context.cleanTagValue("https://github.com/osm-nz/linz-address-import"),
        source: context.cleanTagValue("https://wiki.osm.org/LINZ"),
        attribution: context.cleanTagValue("https://wiki.openstreetmap.org/wiki/Contributors#LINZ"),
        locale: context.cleanTagValue(_mainLocalizer.localeCode())
      };
      findHashtags(tags, true);
      var hashtags = corePreferences("hashtags");
      if (hashtags) {
        tags.hashtags = hashtags;
      }
      var source = corePreferences("source");
      if (source) {
        tags.source = source;
      }
      context.changeset = new osmChangeset({
        tags: tags
      });
    }
    function updateSessionChangesetTags() {
      var osm = context.connection();
      if (!osm)
        return;
      var tags = Object.assign({}, context.changeset.tags);
      var sources = new Set((tags.source || "").split(";"));
      var usedPhotos = new Set(context.history().photoOverlaysUsed());
      var allPhotos = ["streetside", "mapillary", "mapillary-map-features", "mapillary-signs", "openstreetcam"];
      allPhotos.forEach(function(val) {
        sources.delete(val);
      });
      if (usedPhotos.size) {
        sources.add("streetlevel imagery");
        usedPhotos.forEach(function(val) {
          sources.add(val);
        });
      } else {
        sources.delete("streetlevel imagery");
      }
      var usedRapiD = context.rapidContext().sources;
      var allRapiD = ["mapwithai", "esri"];
      allRapiD.forEach(function(val) {
        sources.delete(val);
      });
      usedRapiD.forEach(function(val) {
        sources.add(val);
      });
      var setSource = context.cleanTagValue(Array.from(sources).filter(Boolean).join(";"));
      if (setSource) {
        tags.source = setSource;
      } else {
        delete tags.source;
      }
      var imageries = new Set(context.history().imageryUsed());
      var setImagery = context.cleanTagValue(Array.from(imageries).filter(Boolean).join(";"));
      tags.imagery_used = setImagery || "None";
      var osmClosed = osm.getClosedIDs();
      var itemType;
      if (osmClosed.length) {
        tags["closed:note"] = context.cleanTagValue(osmClosed.join(";"));
      }
      if (services.keepRight) {
        var krClosed = services.keepRight.getClosedIDs();
        if (krClosed.length) {
          tags["closed:keepright"] = context.cleanTagValue(krClosed.join(";"));
        }
      }
      if (services.improveOSM) {
        var iOsmClosed = services.improveOSM.getClosedCounts();
        for (itemType in iOsmClosed) {
          tags["closed:improveosm:" + itemType] = context.cleanTagValue(iOsmClosed[itemType].toString());
        }
      }
      if (services.osmose) {
        var osmoseClosed = services.osmose.getClosedCounts();
        for (itemType in osmoseClosed) {
          tags["closed:osmose:" + itemType] = context.cleanTagValue(osmoseClosed[itemType].toString());
        }
      }
      for (var key in tags) {
        if (key.match(/(^warnings:)|(^resolved:)/)) {
          delete tags[key];
        }
      }
      function addIssueCounts(issues, prefix) {
        var issuesByType = utilArrayGroupBy(issues, "type");
        for (var issueType in issuesByType) {
          var issuesOfType = issuesByType[issueType];
          if (issuesOfType[0].subtype) {
            var issuesBySubtype = utilArrayGroupBy(issuesOfType, "subtype");
            for (var issueSubtype in issuesBySubtype) {
              var issuesOfSubtype = issuesBySubtype[issueSubtype];
              tags[prefix + ":" + issueType + ":" + issueSubtype] = context.cleanTagValue(issuesOfSubtype.length.toString());
            }
          } else {
            tags[prefix + ":" + issueType] = context.cleanTagValue(issuesOfType.length.toString());
          }
        }
      }
      var warnings = context.validator().getIssuesBySeverity({
        what: "edited",
        where: "all",
        includeIgnored: true,
        includeDisabledRules: true
      }).warning.filter(function(issue) {
        return issue.type !== "help_request";
      });
      addIssueCounts(warnings, "warnings");
      var resolvedIssues = context.validator().getResolvedIssues();
      addIssueCounts(resolvedIssues, "resolved");
      context.changeset = context.changeset.update({
        tags: tags
      });
    }
    function render(selection2) {
      var osm = context.connection();
      if (!osm)
        return;
      var header = selection2.selectAll(".header").data([0]);
      var headerTitle = header.enter().append("div").attr("class", "header fillL");
      headerTitle.append("div").append("h3").html(_t.html("commit.title"));
      headerTitle.append("button").attr("class", "close").on("click", function() {
        dispatch12.call("cancel", this);
      }).call(svgIcon("#iD-icon-close"));
      var body = selection2.selectAll(".body").data([0]);
      body = body.enter().append("div").attr("class", "body").merge(body);
      var changesetSection = body.selectAll(".changeset-editor").data([0]);
      changesetSection = changesetSection.enter().append("div").attr("class", "modal-section changeset-editor").merge(changesetSection);
      changesetSection.call(changesetEditor.changesetID(context.changeset.id).tags(context.changeset.tags));
      body.call(commitWarnings);
      var saveSection = body.selectAll(".save-section").data([0]);
      saveSection = saveSection.enter().append("div").attr("class", "modal-section save-section fillL").merge(saveSection);
      var prose = saveSection.selectAll(".commit-info").data([0]);
      if (prose.enter().size()) {
        _userDetails2 = null;
      }
      prose = prose.enter().append("p").attr("class", "commit-info").html(_t.html("commit.upload_explanation")).merge(prose);
      osm.userDetails(function(err, user) {
        if (err)
          return;
        if (_userDetails2 === user)
          return;
        _userDetails2 = user;
        var userLink = select_default2(document.createElement("div"));
        if (user.image_url) {
          userLink.append("img").attr("src", user.image_url).attr("class", "icon pre-text user-icon");
        }
        userLink.append("a").attr("class", "user-info").html(user.display_name).attr("href", osm.userURL(user.display_name)).attr("target", "_blank");
        prose.html(_t.html("commit.upload_explanation_with_user", {
          user: userLink.html()
        }));
      });
      var requestReview = saveSection.selectAll(".request-review").data([0]);
      var requestReviewEnter = requestReview.enter().append("div").attr("class", "request-review");
      var requestReviewDomId = utilUniqueString("commit-input-request-review");
      var labelEnter = requestReviewEnter.append("label").attr("for", requestReviewDomId);
      if (!labelEnter.empty()) {
        labelEnter.call(uiTooltip().title(_t.html("commit.request_review_info")).placement("top"));
      }
      labelEnter.append("input").attr("type", "checkbox").attr("id", requestReviewDomId);
      labelEnter.append("span").html(_t.html("commit.request_review"));
      requestReview = requestReview.merge(requestReviewEnter);
      var requestReviewInput = requestReview.selectAll("input").property("checked", isReviewRequested(context.changeset.tags)).on("change", toggleRequestReview);
      var buttonSection = saveSection.selectAll(".buttons").data([0]);
      var buttonEnter = buttonSection.enter().append("div").attr("class", "buttons fillL");
      buttonEnter.append("button").attr("class", "secondary-action button cancel-button").append("span").attr("class", "label").html(_t.html("commit.cancel"));
      var uploadButton = buttonEnter.append("button").attr("class", "action button save-button");
      uploadButton.append("span").attr("class", "label").html(_t.html("commit.save"));
      var uploadBlockerTooltipText = getUploadBlockerMessage();
      buttonSection = buttonSection.merge(buttonEnter);
      buttonSection.selectAll(".cancel-button").on("click.cancel", function() {
        dispatch12.call("cancel", this);
      });
      buttonSection.selectAll(".save-button").classed("disabled", uploadBlockerTooltipText !== null).on("click.save", function() {
        if (!select_default2(this).classed("disabled")) {
          this.blur();
          for (var key in context.changeset.tags) {
            if (!key)
              delete context.changeset.tags[key];
          }
          fetch(window.APIROOT + "/__done/" + services.esriData.getLoadedDatasetIDs().join(",") + "?u=" + (window.__user || {}).display_name);
          services.esriData.resetLoadedDatasets();
          context.uploader().save(context.changeset);
        }
      });
      uiTooltip().destroyAny(buttonSection.selectAll(".save-button"));
      if (uploadBlockerTooltipText) {
        buttonSection.selectAll(".save-button").call(uiTooltip().title(uploadBlockerTooltipText).placement("top"));
      }
      var tagSection = body.selectAll(".tag-section.raw-tag-editor").data([0]);
      tagSection = tagSection.enter().append("div").attr("class", "modal-section tag-section raw-tag-editor").merge(tagSection);
      tagSection.call(rawTagEditor.tags(Object.assign({}, context.changeset.tags)).render);
      var changesSection = body.selectAll(".commit-changes-section").data([0]);
      changesSection = changesSection.enter().append("div").attr("class", "modal-section commit-changes-section").merge(changesSection);
      changesSection.call(commitChanges.render);
      function toggleRequestReview() {
        var rr = requestReviewInput.property("checked");
        updateChangeset({
          review_requested: rr ? "yes" : void 0
        });
        tagSection.call(rawTagEditor.tags(Object.assign({}, context.changeset.tags)).render);
      }
    }
    function getUploadBlockerMessage() {
      var errors = context.validator().getIssuesBySeverity({
        what: "edited",
        where: "all"
      }).error;
      if (errors.length) {
        return _t("commit.outstanding_errors_message", {
          count: errors.length
        });
      } else {
        var hasChangesetComment = context.changeset && context.changeset.tags.comment && context.changeset.tags.comment.trim().length;
        if (!hasChangesetComment) {
          return _t("commit.comment_needed_message");
        }
      }
      return null;
    }
    function changeTags(_2, changed, onInput) {
      if (changed.hasOwnProperty("comment")) {
        if (changed.comment === void 0) {
          changed.comment = "";
        }
        if (!onInput) {
          corePreferences("comment", changed.comment);
          corePreferences("commentDate", Date.now());
        }
      }
      if (changed.hasOwnProperty("source")) {
        if (changed.source === void 0) {
          corePreferences("source", null);
        } else if (!onInput) {
          corePreferences("source", changed.source);
          corePreferences("commentDate", Date.now());
        }
      }
      updateChangeset(changed, onInput);
      if (_selection) {
        _selection.call(render);
      }
    }
    function findHashtags(tags, commentOnly) {
      var detectedHashtags = commentHashtags();
      if (detectedHashtags.length) {
        corePreferences("hashtags", null);
      }
      if (!detectedHashtags.length || !commentOnly) {
        detectedHashtags = detectedHashtags.concat(hashtagHashtags());
      }
      var allLowerCase = new Set();
      return detectedHashtags.filter(function(hashtag) {
        var lowerCase = hashtag.toLowerCase();
        if (!allLowerCase.has(lowerCase)) {
          allLowerCase.add(lowerCase);
          return true;
        }
        return false;
      });
      function commentHashtags() {
        var matches = (tags.comment || "").replace(/http\S*/g, "").match(hashtagRegex);
        return matches || [];
      }
      function hashtagHashtags() {
        var matches = (tags.hashtags || "").split(/[,;\s]+/).map(function(s) {
          if (s[0] !== "#") {
            s = "#" + s;
          }
          var matched = s.match(hashtagRegex);
          return matched && matched[0];
        }).filter(Boolean);
        return matches || [];
      }
    }
    function isReviewRequested(tags) {
      var rr = tags.review_requested;
      if (rr === void 0)
        return false;
      rr = rr.trim().toLowerCase();
      return !(rr === "" || rr === "no");
    }
    function updateChangeset(changed, onInput) {
      var tags = Object.assign({}, context.changeset.tags);
      Object.keys(changed).forEach(function(k) {
        var v = changed[k];
        k = context.cleanTagKey(k);
        if (readOnlyTags.indexOf(k) !== -1)
          return;
        if (v === void 0) {
          delete tags[k];
        } else if (onInput) {
          tags[k] = v;
        } else {
          tags[k] = context.cleanTagValue(v);
        }
      });
      if (!onInput) {
        var commentOnly = changed.hasOwnProperty("comment") && changed.comment !== "";
        var arr = findHashtags(tags, commentOnly);
        if (arr.length) {
          tags.hashtags = context.cleanTagValue(arr.join(";"));
          corePreferences("hashtags", tags.hashtags);
        } else {
          delete tags.hashtags;
          corePreferences("hashtags", null);
        }
      }
      if (_userDetails2 && _userDetails2.changesets_count !== void 0) {
        var changesetsCount = parseInt(_userDetails2.changesets_count, 10) + 1;
        tags.changesets_count = String(changesetsCount);
        if (changesetsCount <= 100) {
          var s;
          s = corePreferences("walkthrough_completed");
          if (s) {
            tags["ideditor:walkthrough_completed"] = s;
          }
          s = corePreferences("walkthrough_progress");
          if (s) {
            tags["ideditor:walkthrough_progress"] = s;
          }
          s = corePreferences("walkthrough_started");
          if (s) {
            tags["ideditor:walkthrough_started"] = s;
          }
        }
      } else {
        delete tags.changesets_count;
      }
      if (!(0, import_fast_deep_equal9.default)(context.changeset.tags, tags)) {
        context.changeset = context.changeset.update({
          tags: tags
        });
      }
    }
    commit.reset = function() {
      context.changeset = null;
    };
    return utilRebind(commit, dispatch12, "on");
  }

  // node_modules/osm-community-index/lib/simplify.js
  var import_diacritics2 = __toModule(require_diacritics());
  function simplify(str) {
    if (typeof str !== "string")
      return "";
    return import_diacritics2.default.remove(str.replace(/&/g, "and").replace(/İ/ig, "i").replace(/[\s\-=_!"#%'*{},.\/:;?\(\)\[\]@\\$\^*+<>«»~`’\u00a1\u00a7\u00b6\u00b7\u00bf\u037e\u0387\u055a-\u055f\u0589\u05c0\u05c3\u05c6\u05f3\u05f4\u0609\u060a\u060c\u060d\u061b\u061e\u061f\u066a-\u066d\u06d4\u0700-\u070d\u07f7-\u07f9\u0830-\u083e\u085e\u0964\u0965\u0970\u0af0\u0df4\u0e4f\u0e5a\u0e5b\u0f04-\u0f12\u0f14\u0f85\u0fd0-\u0fd4\u0fd9\u0fda\u104a-\u104f\u10fb\u1360-\u1368\u166d\u166e\u16eb-\u16ed\u1735\u1736\u17d4-\u17d6\u17d8-\u17da\u1800-\u1805\u1807-\u180a\u1944\u1945\u1a1e\u1a1f\u1aa0-\u1aa6\u1aa8-\u1aad\u1b5a-\u1b60\u1bfc-\u1bff\u1c3b-\u1c3f\u1c7e\u1c7f\u1cc0-\u1cc7\u1cd3\u200b-\u200f\u2016\u2017\u2020-\u2027\u2030-\u2038\u203b-\u203e\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205e\u2cf9-\u2cfc\u2cfe\u2cff\u2d70\u2e00\u2e01\u2e06-\u2e08\u2e0b\u2e0e-\u2e16\u2e18\u2e19\u2e1b\u2e1e\u2e1f\u2e2a-\u2e2e\u2e30-\u2e39\u3001-\u3003\u303d\u30fb\ua4fe\ua4ff\ua60d-\ua60f\ua673\ua67e\ua6f2-\ua6f7\ua874-\ua877\ua8ce\ua8cf\ua8f8-\ua8fa\ua92e\ua92f\ua95f\ua9c1-\ua9cd\ua9de\ua9df\uaa5c-\uaa5f\uaade\uaadf\uaaf0\uaaf1\uabeb\ufe10-\ufe16\ufe19\ufe30\ufe45\ufe46\ufe49-\ufe4c\ufe50-\ufe52\ufe54-\ufe57\ufe5f-\ufe61\ufe68\ufe6a\ufe6b\ufeff\uff01-\uff03\uff05-\uff07\uff0a\uff0c\uff0e\uff0f\uff1a\uff1b\uff1f\uff20\uff3c\uff61\uff64\uff65]+/g, "").toLowerCase());
  }

  // node_modules/osm-community-index/lib/resolve_strings.js
  function resolveStrings(item, defaults, localizerFn) {
    var itemStrings = Object.assign({}, item.strings);
    var defaultStrings = Object.assign({}, defaults[item.type]);
    var anyToken = new RegExp(/(\{\w+\})/, "gi");
    if (localizerFn) {
      if (itemStrings.community) {
        var communityID = simplify(itemStrings.community);
        itemStrings.community = localizerFn("_communities.".concat(communityID));
      }
      ["name", "description", "extendedDescription"].forEach(function(prop) {
        if (defaultStrings[prop])
          defaultStrings[prop] = localizerFn("_defaults.".concat(item.type, ".").concat(prop));
        if (itemStrings[prop])
          itemStrings[prop] = localizerFn("".concat(item.id, ".").concat(prop));
      });
    }
    var replacements = {
      account: item.account,
      community: itemStrings.community,
      signupUrl: itemStrings.signupUrl,
      url: itemStrings.url
    };
    if (!replacements.signupUrl) {
      replacements.signupUrl = resolve(itemStrings.signupUrl || defaultStrings.signupUrl);
    }
    if (!replacements.url) {
      replacements.url = resolve(itemStrings.url || defaultStrings.url);
    }
    var resolved = {
      name: resolve(itemStrings.name || defaultStrings.name),
      url: resolve(itemStrings.url || defaultStrings.url),
      signupUrl: resolve(itemStrings.signupUrl || defaultStrings.signupUrl),
      description: resolve(itemStrings.description || defaultStrings.description),
      extendedDescription: resolve(itemStrings.extendedDescription || defaultStrings.extendedDescription)
    };
    resolved.nameHTML = linkify(resolved.url, resolved.name);
    resolved.urlHTML = linkify(resolved.url);
    resolved.signupUrlHTML = linkify(resolved.signupUrl);
    resolved.descriptionHTML = resolve(itemStrings.description || defaultStrings.description, true);
    resolved.extendedDescriptionHTML = resolve(itemStrings.extendedDescription || defaultStrings.extendedDescription, true);
    return resolved;
    function resolve(s, addLinks) {
      if (!s)
        return void 0;
      var result6 = s;
      for (var key in replacements) {
        var token = "{".concat(key, "}");
        var regex = new RegExp(token, "g");
        if (regex.test(result6)) {
          var replacement = replacements[key];
          if (!replacement) {
            throw new Error("Cannot resolve token: ".concat(token));
          } else {
            if (addLinks && (key === "signupUrl" || key === "url")) {
              replacement = linkify(replacement);
            }
            result6 = result6.replace(regex, replacement);
          }
        }
      }
      var leftovers = result6.match(anyToken);
      if (leftovers) {
        throw new Error("Cannot resolve tokens: ".concat(leftovers));
      }
      if (addLinks && item.type === "reddit") {
        result6 = result6.replace(/(\/r\/\w+\/*)/i, function(match) {
          return linkify(resolved.url, match);
        });
      }
      return result6;
    }
    function linkify(url, text) {
      if (!url)
        return void 0;
      text = text || url;
      return '<a target="_blank" href="'.concat(url, '">').concat(text, "</a>");
    }
  }

  // modules/ui/success.js
  var _oci = null;
  function uiSuccess(context) {
    var MAXEVENTS = 2;
    var dispatch12 = dispatch_default("cancel");
    var _changeset2;
    var _location;
    ensureOSMCommunityIndex();
    function ensureOSMCommunityIndex() {
      var data2 = _mainFileFetcher;
      return Promise.all([data2.get("oci_features"), data2.get("oci_resources"), data2.get("oci_defaults")]).then(function(vals) {
        if (_oci)
          return _oci;
        if (vals[0] && Array.isArray(vals[0].features)) {
          _mainLocations.mergeCustomGeoJSON(vals[0]);
        }
        var ociResources = Object.values(vals[1].resources);
        if (ociResources.length) {
          return _mainLocations.mergeLocationSets(ociResources).then(function() {
            _oci = {
              resources: ociResources,
              defaults: vals[2].defaults
            };
            return _oci;
          });
        } else {
          _oci = {
            resources: [],
            defaults: vals[2].defaults
          };
          return _oci;
        }
      });
    }
    function parseEventDate(when) {
      if (!when)
        return;
      var raw = when.trim();
      if (!raw)
        return;
      if (!/Z$/.test(raw)) {
        raw += "Z";
      }
      var parsed = new Date(raw);
      return new Date(parsed.toUTCString().substr(0, 25));
    }
    function success(selection2) {
      var header = selection2.append("div").attr("class", "header fillL");
      header.append("h3").html(_t.html("success.just_edited"));
      header.append("button").attr("class", "close").on("click", function() {
        return dispatch12.call("cancel");
      }).call(svgIcon("#iD-icon-close"));
      var body = selection2.append("div").attr("class", "body save-success fillL");
      var summary = body.append("div").attr("class", "save-summary");
      summary.append("h3").html(_t.html("success.thank_you" + (_location ? "_location" : ""), {
        where: _location
      }));
      summary.append("p").html(_t.html("success.help_html")).append("a").attr("class", "link-out").attr("target", "_blank").attr("href", _t("success.help_link_url")).call(svgIcon("#iD-icon-out-link", "inline")).append("span").html(_t.html("success.help_link_text"));
      var osm = context.connection();
      if (!osm)
        return;
      var changesetURL2 = osm.changesetURL(_changeset2.id);
      var table = summary.append("table").attr("class", "summary-table");
      var row = table.append("tr").attr("class", "summary-row");
      row.append("td").attr("class", "cell-icon summary-icon").append("a").attr("target", "_blank").attr("href", changesetURL2).append("svg").attr("class", "logo-small").append("use").attr("xlink:href", "#iD-logo-osm");
      var summaryDetail = row.append("td").attr("class", "cell-detail summary-detail");
      summaryDetail.append("a").attr("class", "cell-detail summary-view-on-osm").attr("target", "_blank").attr("href", changesetURL2).html(_t.html("success.view_on_osm"));
      summaryDetail.append("div").html(_t.html("success.changeset_id", {
        changeset_id: '<a href="'.concat(changesetURL2, '" target="_blank">').concat(_changeset2.id, "</a>")
      }));
      ensureOSMCommunityIndex().then(function(oci) {
        var loc = context.map().center();
        var validLocations = _mainLocations.locationsAt(loc);
        var communities = [];
        oci.resources.forEach(function(resource) {
          var area3 = validLocations[resource.locationSetID];
          if (!area3)
            return;
          var localizer = function localizer2(stringID) {
            return _t.html("community.".concat(stringID));
          };
          resource.resolved = resolveStrings(resource, oci.defaults, localizer);
          communities.push({
            area: area3,
            order: resource.order || 0,
            resource: resource
          });
        });
        communities.sort(function(a, b2) {
          return a.area - b2.area || b2.order - a.order;
        });
        body.call(showCommunityLinks, communities.map(function(c2) {
          return c2.resource;
        }));
      });
    }
    function showCommunityLinks(selection2, resources) {
      var communityLinks = selection2.append("div").attr("class", "save-communityLinks");
      communityLinks.append("h3").html(_t.html("success.like_osm"));
      var table = communityLinks.append("table").attr("class", "community-table");
      var row = table.selectAll(".community-row").data(resources);
      var rowEnter = row.enter().append("tr").attr("class", "community-row");
      rowEnter.append("td").attr("class", "cell-icon community-icon").append("a").attr("target", "_blank").attr("href", function(d) {
        return d.resolved.url;
      }).append("svg").attr("class", "logo-small").append("use").attr("xlink:href", function(d) {
        return "#community-".concat(d.type);
      });
      var communityDetail = rowEnter.append("td").attr("class", "cell-detail community-detail");
      communityDetail.each(showCommunityDetails);
      communityLinks.append("div").attr("class", "community-missing").html(_t.html("success.missing")).append("a").attr("class", "link-out").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).attr("href", "https://github.com/osmlab/osm-community-index/issues").append("span").html(_t.html("success.tell_us"));
    }
    function showCommunityDetails(d) {
      var selection2 = select_default2(this);
      var communityID = d.id;
      selection2.append("div").attr("class", "community-name").html(d.resolved.nameHTML);
      selection2.append("div").attr("class", "community-description").html(d.resolved.descriptionHTML);
      if (d.resolved.extendedDescriptionHTML || d.languageCodes && d.languageCodes.length) {
        selection2.append("div").call(uiDisclosure(context, "community-more-".concat(d.id), false).expanded(false).updatePreference(false).label(_t.html("success.more")).content(showMore));
      }
      var nextEvents = (d.events || []).map(function(event) {
        event.date = parseEventDate(event.when);
        return event;
      }).filter(function(event) {
        var t = event.date.getTime();
        var now4 = new Date().setHours(0, 0, 0, 0);
        return !isNaN(t) && t >= now4;
      }).sort(function(a, b2) {
        return a.date < b2.date ? -1 : a.date > b2.date ? 1 : 0;
      }).slice(0, MAXEVENTS);
      if (nextEvents.length) {
        selection2.append("div").call(uiDisclosure(context, "community-events-".concat(d.id), false).expanded(false).updatePreference(false).label(_t.html("success.events")).content(showNextEvents)).select(".hide-toggle").append("span").attr("class", "badge-text").html(nextEvents.length);
      }
      function showMore(selection3) {
        var more = selection3.selectAll(".community-more").data([0]);
        var moreEnter = more.enter().append("div").attr("class", "community-more");
        if (d.resolved.extendedDescriptionHTML) {
          moreEnter.append("div").attr("class", "community-extended-description").html(d.resolved.extendedDescriptionHTML);
        }
        if (d.languageCodes && d.languageCodes.length) {
          var languageList = d.languageCodes.map(function(code) {
            return _mainLocalizer.languageName(code);
          }).join(", ");
          moreEnter.append("div").attr("class", "community-languages").html(_t.html("success.languages", {
            languages: languageList
          }));
        }
      }
      function showNextEvents(selection3) {
        var events = selection3.append("div").attr("class", "community-events");
        var item = events.selectAll(".community-event").data(nextEvents);
        var itemEnter = item.enter().append("div").attr("class", "community-event");
        itemEnter.append("div").attr("class", "community-event-name").append("a").attr("target", "_blank").attr("href", function(d2) {
          return d2.url;
        }).html(function(d2) {
          var name = d2.name;
          if (d2.i18n && d2.id) {
            name = _t("community.".concat(communityID, ".events.").concat(d2.id, ".name"), {
              default: name
            });
          }
          return name;
        });
        itemEnter.append("div").attr("class", "community-event-when").html(function(d2) {
          var options = {
            weekday: "short",
            day: "numeric",
            month: "short",
            year: "numeric"
          };
          if (d2.date.getHours() || d2.date.getMinutes()) {
            options.hour = "numeric";
            options.minute = "numeric";
          }
          return d2.date.toLocaleString(_mainLocalizer.localeCode(), options);
        });
        itemEnter.append("div").attr("class", "community-event-where").html(function(d2) {
          var where = d2.where;
          if (d2.i18n && d2.id) {
            where = _t("community.".concat(communityID, ".events.").concat(d2.id, ".where"), {
              default: where
            });
          }
          return where;
        });
        itemEnter.append("div").attr("class", "community-event-description").html(function(d2) {
          var description = d2.description;
          if (d2.i18n && d2.id) {
            description = _t("community.".concat(communityID, ".events.").concat(d2.id, ".description"), {
              default: description
            });
          }
          return description;
        });
      }
    }
    success.changeset = function(val) {
      if (!arguments.length)
        return _changeset2;
      _changeset2 = val;
      return success;
    };
    success.location = function(val) {
      if (!arguments.length)
        return _location;
      _location = val;
      return success;
    };
    return utilRebind(success, dispatch12, "on");
  }

  // modules/modes/save.js
  function modeSave(context) {
    var mode = {
      id: "save"
    };
    var keybinding = utilKeybinding("modeSave");
    var commit = uiCommit(context).on("cancel", cancel);
    var _conflictsUi;
    var _location;
    var _success;
    var uploader = context.uploader().on("saveStarted.modeSave", function() {
      keybindingOff();
    }).on("willAttemptUpload.modeSave", prepareForSuccess).on("progressChanged.modeSave", showProgress).on("resultNoChanges.modeSave", function() {
      cancel();
    }).on("resultErrors.modeSave", showErrors).on("resultConflicts.modeSave", showConflicts).on("resultSuccess.modeSave", showSuccess);
    function cancel() {
      context.enter(modeBrowse(context));
    }
    function showProgress(num, total) {
      var modal = context.container().select(".loading-modal .modal-section");
      var progress = modal.selectAll(".progress").data([0]);
      progress.enter().append("div").attr("class", "progress").merge(progress).text(_t("save.conflict_progress", {
        num: num,
        total: total
      }));
    }
    function showConflicts(changeset, conflicts, origChanges) {
      var selection2 = context.container().select(".sidebar").append("div").attr("class", "sidebar-component");
      context.container().selectAll(".main-content").classed("active", true).classed("inactive", false);
      _conflictsUi = uiConflicts(context).conflictList(conflicts).origChanges(origChanges).on("cancel", function() {
        context.container().selectAll(".main-content").classed("active", false).classed("inactive", true);
        selection2.remove();
        keybindingOn();
        uploader.cancelConflictResolution();
      }).on("save", function() {
        context.container().selectAll(".main-content").classed("active", false).classed("inactive", true);
        selection2.remove();
        uploader.processResolvedConflicts(changeset);
      });
      selection2.call(_conflictsUi);
    }
    function showErrors(errors) {
      keybindingOn();
      var selection2 = uiConfirm(context.container());
      selection2.select(".modal-section.header").append("h3").text(_t("save.error"));
      addErrors(selection2, errors);
      selection2.okButton();
    }
    function addErrors(selection2, data2) {
      var message = selection2.select(".modal-section.message-text");
      var items = message.selectAll(".error-container").data(data2);
      var enter = items.enter().append("div").attr("class", "error-container");
      enter.append("a").attr("class", "error-description").attr("href", "#").classed("hide-toggle", true).text(function(d) {
        return d.msg || _t("save.unknown_error_details");
      }).on("click", function(d3_event) {
        d3_event.preventDefault();
        var error = select_default2(this);
        var detail = select_default2(this.nextElementSibling);
        var exp2 = error.classed("expanded");
        detail.style("display", exp2 ? "none" : "block");
        error.classed("expanded", !exp2);
      });
      var details = enter.append("div").attr("class", "error-detail-container").style("display", "none");
      details.append("ul").attr("class", "error-detail-list").selectAll("li").data(function(d) {
        return d.details || [];
      }).enter().append("li").attr("class", "error-detail-item").text(function(d) {
        return d;
      });
      items.exit().remove();
    }
    function showSuccess(changeset) {
      commit.reset();
      var ui = _success.changeset(changeset).location(_location).on("cancel", function() {
        context.ui().sidebar.hide();
      });
      context.enter(modeBrowse(context).sidebar(ui));
    }
    function keybindingOn() {
      select_default2(document).call(keybinding.on("\u238B", cancel, true));
    }
    function keybindingOff() {
      select_default2(document).call(keybinding.unbind);
    }
    function prepareForSuccess() {
      _success = uiSuccess(context);
      _location = null;
      if (!services.geocoder)
        return;
      services.geocoder.reverse(context.map().center(), function(err, result6) {
        if (err || !result6 || !result6.address)
          return;
        var addr = result6.address;
        var place = addr && (addr.town || addr.city || addr.county) || "";
        var region = addr && (addr.state || addr.country) || "";
        var separator = place && region ? _t("success.thank_you_where.separator") : "";
        _location = _t("success.thank_you_where.format", {
          place: place,
          separator: separator,
          region: region
        });
      });
    }
    mode.selectedIDs = function() {
      return _conflictsUi ? _conflictsUi.shownEntityIds() : [];
    };
    mode.enter = function() {
      context.ui().sidebar.expand();
      function done() {
        context.ui().sidebar.show(commit);
      }
      keybindingOn();
      context.container().selectAll(".main-content").classed("active", false).classed("inactive", true);
      var osm = context.connection();
      if (!osm) {
        cancel();
        return;
      }
      if (osm.authenticated()) {
        done();
      } else {
        osm.authenticate(function(err) {
          if (err) {
            cancel();
          } else {
            done();
          }
        });
      }
    };
    mode.exit = function() {
      keybindingOff();
      context.container().selectAll(".main-content").classed("active", true).classed("inactive", false);
      context.ui().sidebar.hide();
    };
    return mode;
  }

  // modules/ui/improveOSM_comments.js
  function uiImproveOsmComments() {
    var _qaItem;
    function issueComments(selection2) {
      var comments = selection2.selectAll(".comments-container").data([0]);
      comments = comments.enter().append("div").attr("class", "comments-container").merge(comments);
      services.improveOSM.getComments(_qaItem).then(function(d) {
        if (!d.comments)
          return;
        var commentEnter = comments.selectAll(".comment").data(d.comments).enter().append("div").attr("class", "comment");
        commentEnter.append("div").attr("class", "comment-avatar").call(svgIcon("#iD-icon-avatar", "comment-avatar-icon"));
        var mainEnter = commentEnter.append("div").attr("class", "comment-main");
        var metadataEnter = mainEnter.append("div").attr("class", "comment-metadata");
        metadataEnter.append("div").attr("class", "comment-author").each(function(d2) {
          var osm = services.osm;
          var selection3 = select_default2(this);
          if (osm && d2.username) {
            selection3 = selection3.append("a").attr("class", "comment-author-link").attr("href", osm.userURL(d2.username)).attr("target", "_blank");
          }
          selection3.html(function(d4) {
            return d4.username;
          });
        });
        metadataEnter.append("div").attr("class", "comment-date").html(function(d2) {
          return _t.html("note.status.commented", {
            when: localeDateString2(d2.timestamp)
          });
        });
        mainEnter.append("div").attr("class", "comment-text").append("p").html(function(d2) {
          return d2.text;
        });
      }).catch(function(err) {
        console.log(err);
      });
    }
    function localeDateString2(s) {
      if (!s)
        return null;
      var options = {
        day: "numeric",
        month: "short",
        year: "numeric"
      };
      var d = new Date(s * 1e3);
      if (isNaN(d.getTime()))
        return null;
      return d.toLocaleDateString(_mainLocalizer.localeCode(), options);
    }
    issueComments.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return issueComments;
    };
    return issueComments;
  }

  // modules/ui/improveOSM_details.js
  function uiImproveOsmDetails(context) {
    var _qaItem;
    function issueDetail(d) {
      if (d.desc)
        return d.desc;
      var issueKey = d.issueKey;
      d.replacements = d.replacements || {};
      d.replacements.default = _t.html("inspector.unknown");
      return _t.html("QA.improveOSM.error_types.".concat(issueKey, ".description"), d.replacements);
    }
    function improveOsmDetails(selection2) {
      var details = selection2.selectAll(".error-details").data(_qaItem ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      details.exit().remove();
      var detailsEnter = details.enter().append("div").attr("class", "error-details qa-details-container");
      var descriptionEnter = detailsEnter.append("div").attr("class", "qa-details-subsection");
      descriptionEnter.append("h4").html(_t.html("QA.keepRight.detail_description"));
      descriptionEnter.append("div").attr("class", "qa-details-description-text").html(issueDetail);
      var relatedEntities = [];
      descriptionEnter.selectAll(".error_entity_link, .error_object_link").attr("href", "#").each(function() {
        var link2 = select_default2(this);
        var isObjectLink = link2.classed("error_object_link");
        var entityID = isObjectLink ? _qaItem.objectType.charAt(0) + _qaItem.objectId : this.textContent;
        var entity2 = context.hasEntity(entityID);
        relatedEntities.push(entityID);
        link2.on("mouseenter", function() {
          utilHighlightEntities([entityID], true, context);
        }).on("mouseleave", function() {
          utilHighlightEntities([entityID], false, context);
        }).on("click", function(d3_event) {
          d3_event.preventDefault();
          utilHighlightEntities([entityID], false, context);
          var osmlayer = context.layers().layer("osm");
          if (!osmlayer.enabled()) {
            osmlayer.enabled(true);
          }
          context.map().centerZoom(_qaItem.loc, 20);
          if (entity2) {
            context.enter(modeSelect(context, [entityID]));
          } else {
            context.loadEntity(entityID, function(err, result6) {
              if (err)
                return;
              var entity3 = result6.data.find(function(e3) {
                return e3.id === entityID;
              });
              if (entity3)
                context.enter(modeSelect(context, [entityID]));
            });
          }
        });
        if (entity2) {
          var name = utilDisplayName(entity2);
          if (!name && !isObjectLink) {
            var preset = _mainPresetIndex.match(entity2, context.graph());
            name = preset && !preset.isFallback() && preset.name();
          }
          if (name) {
            this.innerText = name;
          }
        }
      });
      context.features().forceVisible(relatedEntities);
      context.map().pan([0, 0]);
    }
    improveOsmDetails.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return improveOsmDetails;
    };
    return improveOsmDetails;
  }

  // modules/ui/improveOSM_header.js
  function uiImproveOsmHeader() {
    var _qaItem;
    function issueTitle(d) {
      var issueKey = d.issueKey;
      d.replacements = d.replacements || {};
      d.replacements.default = _t.html("inspector.unknown");
      return _t.html("QA.improveOSM.error_types.".concat(issueKey, ".title"), d.replacements);
    }
    function improveOsmHeader(selection2) {
      var header = selection2.selectAll(".qa-header").data(_qaItem ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      header.exit().remove();
      var headerEnter = header.enter().append("div").attr("class", "qa-header");
      var svgEnter = headerEnter.append("div").attr("class", "qa-header-icon").classed("new", function(d) {
        return d.id < 0;
      }).append("svg").attr("width", "20px").attr("height", "30px").attr("viewbox", "0 0 20 30").attr("class", function(d) {
        return "preset-icon-28 qaItem ".concat(d.service, " itemId-").concat(d.id, " itemType-").concat(d.itemType);
      });
      svgEnter.append("polygon").attr("fill", "currentColor").attr("class", "qaItem-fill").attr("points", "16,3 4,3 1,6 1,17 4,20 7,20 10,27 13,20 16,20 19,17.033 19,6");
      svgEnter.append("use").attr("class", "icon-annotation").attr("width", "13px").attr("height", "13px").attr("transform", "translate(3.5, 5)").attr("xlink:href", function(d) {
        var picon = d.icon;
        if (!picon) {
          return "";
        } else {
          var isMaki = /^maki-/.test(picon);
          return "#".concat(picon).concat(isMaki ? "-11" : "");
        }
      });
      headerEnter.append("div").attr("class", "qa-header-label").html(issueTitle);
    }
    improveOsmHeader.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return improveOsmHeader;
    };
    return improveOsmHeader;
  }

  // modules/ui/improveOSM_editor.js
  function uiImproveOsmEditor(context) {
    var dispatch12 = dispatch_default("change");
    var qaDetails = uiImproveOsmDetails(context);
    var qaComments = uiImproveOsmComments(context);
    var qaHeader = uiImproveOsmHeader(context);
    var _qaItem;
    function improveOsmEditor(selection2) {
      var headerEnter = selection2.selectAll(".header").data([0]).enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "close").on("click", function() {
        return context.enter(modeBrowse(context));
      }).call(svgIcon("#iD-icon-close"));
      headerEnter.append("h3").html(_t.html("QA.improveOSM.title"));
      var body = selection2.selectAll(".body").data([0]);
      body = body.enter().append("div").attr("class", "body").merge(body);
      var editor = body.selectAll(".qa-editor").data([0]);
      editor.enter().append("div").attr("class", "modal-section qa-editor").merge(editor).call(qaHeader.issue(_qaItem)).call(qaDetails.issue(_qaItem)).call(qaComments.issue(_qaItem)).call(improveOsmSaveSection);
    }
    function improveOsmSaveSection(selection2) {
      var isSelected = _qaItem && _qaItem.id === context.selectedErrorID();
      var isShown = _qaItem && (isSelected || _qaItem.newComment || _qaItem.comment);
      var saveSection = selection2.selectAll(".qa-save").data(isShown ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      saveSection.exit().remove();
      var saveSectionEnter = saveSection.enter().append("div").attr("class", "qa-save save-section cf");
      saveSectionEnter.append("h4").attr("class", ".qa-save-header").html(_t.html("note.newComment"));
      saveSectionEnter.append("textarea").attr("class", "new-comment-input").attr("placeholder", _t("QA.keepRight.comment_placeholder")).attr("maxlength", 1e3).property("value", function(d) {
        return d.newComment;
      }).call(utilNoAuto).on("input", changeInput).on("blur", changeInput);
      saveSection = saveSectionEnter.merge(saveSection).call(qaSaveButtons);
      function changeInput() {
        var input4 = select_default2(this);
        var val = input4.property("value").trim();
        if (val === "") {
          val = void 0;
        }
        _qaItem = _qaItem.update({
          newComment: val
        });
        var qaService = services.improveOSM;
        if (qaService) {
          qaService.replaceItem(_qaItem);
        }
        saveSection.call(qaSaveButtons);
      }
    }
    function qaSaveButtons(selection2) {
      var isSelected = _qaItem && _qaItem.id === context.selectedErrorID();
      var buttonSection = selection2.selectAll(".buttons").data(isSelected ? [_qaItem] : [], function(d) {
        return d.status + d.id;
      });
      buttonSection.exit().remove();
      var buttonEnter = buttonSection.enter().append("div").attr("class", "buttons");
      buttonEnter.append("button").attr("class", "button comment-button action").html(_t.html("QA.keepRight.save_comment"));
      buttonEnter.append("button").attr("class", "button close-button action");
      buttonEnter.append("button").attr("class", "button ignore-button action");
      buttonSection = buttonSection.merge(buttonEnter);
      buttonSection.select(".comment-button").attr("disabled", function(d) {
        return d.newComment ? null : true;
      }).on("click.comment", function(d3_event, d) {
        this.blur();
        var qaService = services.improveOSM;
        if (qaService) {
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
      buttonSection.select(".close-button").html(function(d) {
        var andComment = d.newComment ? "_comment" : "";
        return _t.html("QA.keepRight.close".concat(andComment));
      }).on("click.close", function(d3_event, d) {
        this.blur();
        var qaService = services.improveOSM;
        if (qaService) {
          d.newStatus = "SOLVED";
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
      buttonSection.select(".ignore-button").html(function(d) {
        var andComment = d.newComment ? "_comment" : "";
        return _t.html("QA.keepRight.ignore".concat(andComment));
      }).on("click.ignore", function(d3_event, d) {
        this.blur();
        var qaService = services.improveOSM;
        if (qaService) {
          d.newStatus = "INVALID";
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
    }
    improveOsmEditor.error = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return improveOsmEditor;
    };
    return utilRebind(improveOsmEditor, dispatch12, "on");
  }

  // modules/ui/keepRight_details.js
  function uiKeepRightDetails(context) {
    var _qaItem;
    function issueDetail(d) {
      var itemType = d.itemType, parentIssueType = d.parentIssueType;
      var unknown = _t.html("inspector.unknown");
      var replacements = d.replacements || {};
      replacements.default = unknown;
      var detail = _t.html("QA.keepRight.errorTypes.".concat(itemType, ".description"), replacements);
      if (detail === unknown) {
        detail = _t.html("QA.keepRight.errorTypes.".concat(parentIssueType, ".description"), replacements);
      }
      return detail;
    }
    function keepRightDetails(selection2) {
      var details = selection2.selectAll(".error-details").data(_qaItem ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      details.exit().remove();
      var detailsEnter = details.enter().append("div").attr("class", "error-details qa-details-container");
      var descriptionEnter = detailsEnter.append("div").attr("class", "qa-details-subsection");
      descriptionEnter.append("h4").html(_t.html("QA.keepRight.detail_description"));
      descriptionEnter.append("div").attr("class", "qa-details-description-text").html(issueDetail);
      var relatedEntities = [];
      descriptionEnter.selectAll(".error_entity_link, .error_object_link").attr("href", "#").each(function() {
        var link2 = select_default2(this);
        var isObjectLink = link2.classed("error_object_link");
        var entityID = isObjectLink ? _qaItem.objectType.charAt(0) + _qaItem.objectId : this.textContent;
        var entity2 = context.hasEntity(entityID);
        relatedEntities.push(entityID);
        link2.on("mouseenter", function() {
          utilHighlightEntities([entityID], true, context);
        }).on("mouseleave", function() {
          utilHighlightEntities([entityID], false, context);
        }).on("click", function(d3_event) {
          d3_event.preventDefault();
          utilHighlightEntities([entityID], false, context);
          var osmlayer = context.layers().layer("osm");
          if (!osmlayer.enabled()) {
            osmlayer.enabled(true);
          }
          context.map().centerZoomEase(_qaItem.loc, 20);
          if (entity2) {
            context.enter(modeSelect(context, [entityID]));
          } else {
            context.loadEntity(entityID, function(err, result6) {
              if (err)
                return;
              var entity3 = result6.data.find(function(e3) {
                return e3.id === entityID;
              });
              if (entity3)
                context.enter(modeSelect(context, [entityID]));
            });
          }
        });
        if (entity2) {
          var name = utilDisplayName(entity2);
          if (!name && !isObjectLink) {
            var preset = _mainPresetIndex.match(entity2, context.graph());
            name = preset && !preset.isFallback() && preset.name();
          }
          if (name) {
            this.innerText = name;
          }
        }
      });
      context.features().forceVisible(relatedEntities);
      context.map().pan([0, 0]);
    }
    keepRightDetails.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return keepRightDetails;
    };
    return keepRightDetails;
  }

  // modules/ui/keepRight_header.js
  function uiKeepRightHeader() {
    var _qaItem;
    function issueTitle(d) {
      var itemType = d.itemType, parentIssueType = d.parentIssueType;
      var unknown = _t.html("inspector.unknown");
      var replacements = d.replacements || {};
      replacements.default = unknown;
      var title = _t.html("QA.keepRight.errorTypes.".concat(itemType, ".title"), replacements);
      if (title === unknown) {
        title = _t.html("QA.keepRight.errorTypes.".concat(parentIssueType, ".title"), replacements);
      }
      return title;
    }
    function keepRightHeader(selection2) {
      var header = selection2.selectAll(".qa-header").data(_qaItem ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      header.exit().remove();
      var headerEnter = header.enter().append("div").attr("class", "qa-header");
      var iconEnter = headerEnter.append("div").attr("class", "qa-header-icon").classed("new", function(d) {
        return d.id < 0;
      });
      iconEnter.append("div").attr("class", function(d) {
        return "preset-icon-28 qaItem ".concat(d.service, " itemId-").concat(d.id, " itemType-").concat(d.parentIssueType);
      }).call(svgIcon("#iD-icon-bolt", "qaItem-fill"));
      headerEnter.append("div").attr("class", "qa-header-label").html(issueTitle);
    }
    keepRightHeader.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return keepRightHeader;
    };
    return keepRightHeader;
  }

  // modules/ui/view_on_keepRight.js
  function uiViewOnKeepRight() {
    var _qaItem;
    function viewOnKeepRight(selection2) {
      var url;
      if (services.keepRight && _qaItem instanceof QAItem) {
        url = services.keepRight.issueURL(_qaItem);
      }
      var link2 = selection2.selectAll(".view-on-keepRight").data(url ? [url] : []);
      link2.exit().remove();
      var linkEnter = link2.enter().append("a").attr("class", "view-on-keepRight").attr("target", "_blank").attr("rel", "noopener").attr("href", function(d) {
        return d;
      }).call(svgIcon("#iD-icon-out-link", "inline"));
      linkEnter.append("span").html(_t.html("inspector.view_on_keepRight"));
    }
    viewOnKeepRight.what = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return viewOnKeepRight;
    };
    return viewOnKeepRight;
  }

  // modules/ui/keepRight_editor.js
  function uiKeepRightEditor(context) {
    var dispatch12 = dispatch_default("change");
    var qaDetails = uiKeepRightDetails(context);
    var qaHeader = uiKeepRightHeader(context);
    var _qaItem;
    function keepRightEditor(selection2) {
      var headerEnter = selection2.selectAll(".header").data([0]).enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "close").on("click", function() {
        return context.enter(modeBrowse(context));
      }).call(svgIcon("#iD-icon-close"));
      headerEnter.append("h3").html(_t.html("QA.keepRight.title"));
      var body = selection2.selectAll(".body").data([0]);
      body = body.enter().append("div").attr("class", "body").merge(body);
      var editor = body.selectAll(".qa-editor").data([0]);
      editor.enter().append("div").attr("class", "modal-section qa-editor").merge(editor).call(qaHeader.issue(_qaItem)).call(qaDetails.issue(_qaItem)).call(keepRightSaveSection);
      var footer = selection2.selectAll(".footer").data([0]);
      footer.enter().append("div").attr("class", "footer").merge(footer).call(uiViewOnKeepRight(context).what(_qaItem));
    }
    function keepRightSaveSection(selection2) {
      var isSelected = _qaItem && _qaItem.id === context.selectedErrorID();
      var isShown = _qaItem && (isSelected || _qaItem.newComment || _qaItem.comment);
      var saveSection = selection2.selectAll(".qa-save").data(isShown ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      saveSection.exit().remove();
      var saveSectionEnter = saveSection.enter().append("div").attr("class", "qa-save save-section cf");
      saveSectionEnter.append("h4").attr("class", ".qa-save-header").html(_t.html("QA.keepRight.comment"));
      saveSectionEnter.append("textarea").attr("class", "new-comment-input").attr("placeholder", _t("QA.keepRight.comment_placeholder")).attr("maxlength", 1e3).property("value", function(d) {
        return d.newComment || d.comment;
      }).call(utilNoAuto).on("input", changeInput).on("blur", changeInput);
      saveSection = saveSectionEnter.merge(saveSection).call(qaSaveButtons);
      function changeInput() {
        var input4 = select_default2(this);
        var val = input4.property("value").trim();
        if (val === _qaItem.comment) {
          val = void 0;
        }
        _qaItem = _qaItem.update({
          newComment: val
        });
        var qaService = services.keepRight;
        if (qaService) {
          qaService.replaceItem(_qaItem);
        }
        saveSection.call(qaSaveButtons);
      }
    }
    function qaSaveButtons(selection2) {
      var isSelected = _qaItem && _qaItem.id === context.selectedErrorID();
      var buttonSection = selection2.selectAll(".buttons").data(isSelected ? [_qaItem] : [], function(d) {
        return d.status + d.id;
      });
      buttonSection.exit().remove();
      var buttonEnter = buttonSection.enter().append("div").attr("class", "buttons");
      buttonEnter.append("button").attr("class", "button comment-button action").html(_t.html("QA.keepRight.save_comment"));
      buttonEnter.append("button").attr("class", "button close-button action");
      buttonEnter.append("button").attr("class", "button ignore-button action");
      buttonSection = buttonSection.merge(buttonEnter);
      buttonSection.select(".comment-button").attr("disabled", function(d) {
        return d.newComment ? null : true;
      }).on("click.comment", function(d3_event, d) {
        this.blur();
        var qaService = services.keepRight;
        if (qaService) {
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
      buttonSection.select(".close-button").html(function(d) {
        var andComment = d.newComment ? "_comment" : "";
        return _t.html("QA.keepRight.close".concat(andComment));
      }).on("click.close", function(d3_event, d) {
        this.blur();
        var qaService = services.keepRight;
        if (qaService) {
          d.newStatus = "ignore_t";
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
      buttonSection.select(".ignore-button").html(function(d) {
        var andComment = d.newComment ? "_comment" : "";
        return _t.html("QA.keepRight.ignore".concat(andComment));
      }).on("click.ignore", function(d3_event, d) {
        this.blur();
        var qaService = services.keepRight;
        if (qaService) {
          d.newStatus = "ignore";
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
    }
    keepRightEditor.error = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return keepRightEditor;
    };
    return utilRebind(keepRightEditor, dispatch12, "on");
  }

  // modules/ui/osmose_details.js
  function uiOsmoseDetails(context) {
    var _qaItem;
    function issueString(d, type3) {
      if (!d)
        return "";
      var s = services.osmose.getStrings(d.itemType);
      return type3 in s ? s[type3] : "";
    }
    function osmoseDetails(selection2) {
      var details = selection2.selectAll(".error-details").data(_qaItem ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      details.exit().remove();
      var detailsEnter = details.enter().append("div").attr("class", "error-details qa-details-container");
      if (issueString(_qaItem, "detail")) {
        var div = detailsEnter.append("div").attr("class", "qa-details-subsection");
        div.append("h4").html(_t.html("QA.keepRight.detail_description"));
        div.append("p").attr("class", "qa-details-description-text").html(function(d) {
          return issueString(d, "detail");
        }).selectAll("a").attr("rel", "noopener").attr("target", "_blank");
      }
      var detailsDiv = detailsEnter.append("div").attr("class", "qa-details-subsection");
      var elemsDiv = detailsEnter.append("div").attr("class", "qa-details-subsection");
      if (issueString(_qaItem, "fix")) {
        var _div = detailsEnter.append("div").attr("class", "qa-details-subsection");
        _div.append("h4").html(_t.html("QA.osmose.fix_title"));
        _div.append("p").html(function(d) {
          return issueString(d, "fix");
        }).selectAll("a").attr("rel", "noopener").attr("target", "_blank");
      }
      if (issueString(_qaItem, "trap")) {
        var _div2 = detailsEnter.append("div").attr("class", "qa-details-subsection");
        _div2.append("h4").html(_t.html("QA.osmose.trap_title"));
        _div2.append("p").html(function(d) {
          return issueString(d, "trap");
        }).selectAll("a").attr("rel", "noopener").attr("target", "_blank");
      }
      var thisItem = _qaItem;
      services.osmose.loadIssueDetail(_qaItem).then(function(d) {
        if (!d.elems || d.elems.length === 0)
          return;
        if (context.selectedErrorID() !== thisItem.id && context.container().selectAll(".qaItem.osmose.hover.itemId-".concat(thisItem.id)).empty())
          return;
        if (d.detail) {
          detailsDiv.append("h4").html(_t.html("QA.osmose.detail_title"));
          detailsDiv.append("p").html(function(d2) {
            return d2.detail;
          }).selectAll("a").attr("rel", "noopener").attr("target", "_blank");
        }
        elemsDiv.append("h4").html(_t.html("QA.osmose.elems_title"));
        elemsDiv.append("ul").selectAll("li").data(d.elems).enter().append("li").append("a").attr("href", "#").attr("class", "error_entity_link").html(function(d2) {
          return d2;
        }).each(function() {
          var link2 = select_default2(this);
          var entityID = this.textContent;
          var entity2 = context.hasEntity(entityID);
          link2.on("mouseenter", function() {
            utilHighlightEntities([entityID], true, context);
          }).on("mouseleave", function() {
            utilHighlightEntities([entityID], false, context);
          }).on("click", function(d3_event) {
            d3_event.preventDefault();
            utilHighlightEntities([entityID], false, context);
            var osmlayer = context.layers().layer("osm");
            if (!osmlayer.enabled()) {
              osmlayer.enabled(true);
            }
            context.map().centerZoom(d.loc, 20);
            if (entity2) {
              context.enter(modeSelect(context, [entityID]));
            } else {
              context.loadEntity(entityID, function(err, result6) {
                if (err)
                  return;
                var entity3 = result6.data.find(function(e3) {
                  return e3.id === entityID;
                });
                if (entity3)
                  context.enter(modeSelect(context, [entityID]));
              });
            }
          });
          if (entity2) {
            var name = utilDisplayName(entity2);
            if (!name) {
              var preset = _mainPresetIndex.match(entity2, context.graph());
              name = preset && !preset.isFallback() && preset.name();
            }
            if (name) {
              this.innerText = name;
            }
          }
        });
        context.features().forceVisible(d.elems);
        context.map().pan([0, 0]);
      }).catch(function(err) {
        console.log(err);
      });
    }
    osmoseDetails.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return osmoseDetails;
    };
    return osmoseDetails;
  }

  // modules/ui/osmose_header.js
  function uiOsmoseHeader() {
    var _qaItem;
    function issueTitle(d) {
      var unknown = _t("inspector.unknown");
      if (!d)
        return unknown;
      var s = services.osmose.getStrings(d.itemType);
      return "title" in s ? s.title : unknown;
    }
    function osmoseHeader(selection2) {
      var header = selection2.selectAll(".qa-header").data(_qaItem ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      header.exit().remove();
      var headerEnter = header.enter().append("div").attr("class", "qa-header");
      var svgEnter = headerEnter.append("div").attr("class", "qa-header-icon").classed("new", function(d) {
        return d.id < 0;
      }).append("svg").attr("width", "20px").attr("height", "30px").attr("viewbox", "0 0 20 30").attr("class", function(d) {
        return "preset-icon-28 qaItem ".concat(d.service, " itemId-").concat(d.id, " itemType-").concat(d.itemType);
      });
      svgEnter.append("polygon").attr("fill", function(d) {
        return services.osmose.getColor(d.item);
      }).attr("class", "qaItem-fill").attr("points", "16,3 4,3 1,6 1,17 4,20 7,20 10,27 13,20 16,20 19,17.033 19,6");
      svgEnter.append("use").attr("class", "icon-annotation").attr("width", "13px").attr("height", "13px").attr("transform", "translate(3.5, 5)").attr("xlink:href", function(d) {
        var picon = d.icon;
        if (!picon) {
          return "";
        } else {
          var isMaki = /^maki-/.test(picon);
          return "#".concat(picon).concat(isMaki ? "-11" : "");
        }
      });
      headerEnter.append("div").attr("class", "qa-header-label").html(issueTitle);
    }
    osmoseHeader.issue = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return osmoseHeader;
    };
    return osmoseHeader;
  }

  // modules/ui/view_on_osmose.js
  function uiViewOnOsmose() {
    var _qaItem;
    function viewOnOsmose(selection2) {
      var url;
      if (services.osmose && _qaItem instanceof QAItem) {
        url = services.osmose.itemURL(_qaItem);
      }
      var link2 = selection2.selectAll(".view-on-osmose").data(url ? [url] : []);
      link2.exit().remove();
      var linkEnter = link2.enter().append("a").attr("class", "view-on-osmose").attr("target", "_blank").attr("rel", "noopener").attr("href", function(d) {
        return d;
      }).call(svgIcon("#iD-icon-out-link", "inline"));
      linkEnter.append("span").html(_t.html("inspector.view_on_osmose"));
    }
    viewOnOsmose.what = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return viewOnOsmose;
    };
    return viewOnOsmose;
  }

  // modules/ui/osmose_editor.js
  function uiOsmoseEditor(context) {
    var dispatch12 = dispatch_default("change");
    var qaDetails = uiOsmoseDetails(context);
    var qaHeader = uiOsmoseHeader(context);
    var _qaItem;
    function osmoseEditor(selection2) {
      var header = selection2.selectAll(".header").data([0]);
      var headerEnter = header.enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "close").on("click", function() {
        return context.enter(modeBrowse(context));
      }).call(svgIcon("#iD-icon-close"));
      headerEnter.append("h3").html(_t.html("QA.osmose.title"));
      var body = selection2.selectAll(".body").data([0]);
      body = body.enter().append("div").attr("class", "body").merge(body);
      var editor = body.selectAll(".qa-editor").data([0]);
      editor.enter().append("div").attr("class", "modal-section qa-editor").merge(editor).call(qaHeader.issue(_qaItem)).call(qaDetails.issue(_qaItem)).call(osmoseSaveSection);
      var footer = selection2.selectAll(".footer").data([0]);
      footer.enter().append("div").attr("class", "footer").merge(footer).call(uiViewOnOsmose(context).what(_qaItem));
    }
    function osmoseSaveSection(selection2) {
      var isSelected = _qaItem && _qaItem.id === context.selectedErrorID();
      var isShown = _qaItem && isSelected;
      var saveSection = selection2.selectAll(".qa-save").data(isShown ? [_qaItem] : [], function(d) {
        return "".concat(d.id, "-").concat(d.status || 0);
      });
      saveSection.exit().remove();
      var saveSectionEnter = saveSection.enter().append("div").attr("class", "qa-save save-section cf");
      saveSection = saveSectionEnter.merge(saveSection).call(qaSaveButtons);
    }
    function qaSaveButtons(selection2) {
      var isSelected = _qaItem && _qaItem.id === context.selectedErrorID();
      var buttonSection = selection2.selectAll(".buttons").data(isSelected ? [_qaItem] : [], function(d) {
        return d.status + d.id;
      });
      buttonSection.exit().remove();
      var buttonEnter = buttonSection.enter().append("div").attr("class", "buttons");
      buttonEnter.append("button").attr("class", "button close-button action");
      buttonEnter.append("button").attr("class", "button ignore-button action");
      buttonSection = buttonSection.merge(buttonEnter);
      buttonSection.select(".close-button").html(_t.html("QA.keepRight.close")).on("click.close", function(d3_event, d) {
        this.blur();
        var qaService = services.osmose;
        if (qaService) {
          d.newStatus = "done";
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
      buttonSection.select(".ignore-button").html(_t.html("QA.keepRight.ignore")).on("click.ignore", function(d3_event, d) {
        this.blur();
        var qaService = services.osmose;
        if (qaService) {
          d.newStatus = "false";
          qaService.postUpdate(d, function(err, item) {
            return dispatch12.call("change", item);
          });
        }
      });
    }
    osmoseEditor.error = function(val) {
      if (!arguments.length)
        return _qaItem;
      _qaItem = val;
      return osmoseEditor;
    };
    return utilRebind(osmoseEditor, dispatch12, "on");
  }

  // modules/modes/select_error.js
  function modeSelectError(context, selectedErrorID, selectedErrorService) {
    var mode = {
      id: "select-error",
      button: "browse"
    };
    var keybinding = utilKeybinding("select-error");
    var errorService = services[selectedErrorService];
    var errorEditor;
    switch (selectedErrorService) {
      case "improveOSM":
        errorEditor = uiImproveOsmEditor(context).on("change", function() {
          context.map().pan([0, 0]);
          var error = checkSelectedID();
          if (!error)
            return;
          context.ui().sidebar.show(errorEditor.error(error));
        });
        break;
      case "keepRight":
        errorEditor = uiKeepRightEditor(context).on("change", function() {
          context.map().pan([0, 0]);
          var error = checkSelectedID();
          if (!error)
            return;
          context.ui().sidebar.show(errorEditor.error(error));
        });
        break;
      case "osmose":
        errorEditor = uiOsmoseEditor(context).on("change", function() {
          context.map().pan([0, 0]);
          var error = checkSelectedID();
          if (!error)
            return;
          context.ui().sidebar.show(errorEditor.error(error));
        });
        break;
    }
    var behaviors = [behaviorBreathe(context), behaviorHover(context), behaviorSelect(context), behaviorLasso(context), modeDragNode(context).behavior, modeDragNote(context).behavior];
    function checkSelectedID() {
      if (!errorService)
        return;
      var error = errorService.getError(selectedErrorID);
      if (!error) {
        context.enter(modeBrowse(context));
      }
      return error;
    }
    mode.zoomToSelected = function() {
      if (!errorService)
        return;
      var error = errorService.getError(selectedErrorID);
      if (error) {
        context.map().centerZoomEase(error.loc, 20);
      }
    };
    mode.enter = function() {
      var error = checkSelectedID();
      if (!error)
        return;
      behaviors.forEach(context.install);
      keybinding.on(_t("inspector.zoom_to.key"), mode.zoomToSelected).on("\u238B", esc2, true);
      select_default2(document).call(keybinding);
      selectError();
      var sidebar = context.ui().sidebar;
      sidebar.show(errorEditor.error(error));
      sidebar.expand(sidebar.intersects(new Extent(error.loc)));
      context.map().on("drawn.select-error", selectError);
      function selectError(d3_event, drawn) {
        if (!checkSelectedID())
          return;
        var selection2 = context.surface().selectAll(".itemId-" + selectedErrorID + "." + selectedErrorService);
        if (selection2.empty()) {
          var source = d3_event && d3_event.type === "zoom" && d3_event.sourceEvent;
          if (drawn && source && (source.type === "pointermove" || source.type === "mousemove" || source.type === "touchmove")) {
            context.enter(modeBrowse(context));
          }
        } else {
          selection2.classed("selected", true);
          context.selectedErrorID(selectedErrorID);
        }
      }
      function esc2() {
        if (context.container().select(".combobox").size())
          return;
        context.enter(modeBrowse(context));
      }
    };
    mode.exit = function() {
      behaviors.forEach(context.uninstall);
      select_default2(document).call(keybinding.unbind);
      context.surface().selectAll(".qaItem.selected").classed("selected hover", false);
      context.map().on("drawn.select-error", null);
      context.ui().sidebar.hide();
      context.selectedErrorID(null);
      context.features().forceVisible([]);
    };
    return mode;
  }

  // modules/ui/curtain.js
  function uiCurtain(containerNode) {
    var surface = select_default2(null), tooltip = select_default2(null), darkness = select_default2(null);
    function curtain(selection2) {
      surface = selection2.append("svg").attr("class", "curtain").style("top", 0).style("left", 0);
      darkness = surface.append("path").attr("x", 0).attr("y", 0).attr("class", "curtain-darkness");
      select_default2(window).on("resize.curtain", resize);
      tooltip = selection2.append("div").attr("class", "tooltip");
      tooltip.append("div").attr("class", "popover-arrow");
      tooltip.append("div").attr("class", "popover-inner");
      resize();
      function resize() {
        surface.attr("width", containerNode.clientWidth).attr("height", containerNode.clientHeight);
        curtain.cut(darkness.datum());
      }
    }
    curtain.reveal = function(box, html2, options) {
      options = options || {};
      if (typeof box === "string") {
        box = select_default2(box).node();
      }
      if (box && box.getBoundingClientRect) {
        box = copyBox(box.getBoundingClientRect());
        var containerRect = containerNode.getBoundingClientRect();
        box.top -= containerRect.top;
        box.left -= containerRect.left;
      }
      if (box && options.padding) {
        box.top -= options.padding;
        box.left -= options.padding;
        box.bottom += options.padding;
        box.right += options.padding;
        box.height += options.padding * 2;
        box.width += options.padding * 2;
      }
      var tooltipBox;
      if (options.tooltipBox) {
        tooltipBox = options.tooltipBox;
        if (typeof tooltipBox === "string") {
          tooltipBox = select_default2(tooltipBox).node();
        }
        if (tooltipBox && tooltipBox.getBoundingClientRect) {
          tooltipBox = copyBox(tooltipBox.getBoundingClientRect());
        }
      } else {
        tooltipBox = box;
      }
      if (tooltipBox && html2) {
        if (html2.indexOf("**") !== -1) {
          if (html2.indexOf("<span") === 0) {
            html2 = html2.replace(/^(<span.*?>)(.+?)(\*\*)/, "$1<span>$2</span>$3");
          } else {
            html2 = html2.replace(/^(.+?)(\*\*)/, "<span>$1</span>$2");
          }
          html2 = html2.replace(/\*\*(.*?)\*\*/g, '<span class="instruction">$1</span>');
        }
        html2 = html2.replace(/\*(.*?)\*/g, "<em>$1</em>");
        html2 = html2.replace(/\{br\}/g, "<br/><br/>");
        if (options.buttonText && options.buttonCallback) {
          html2 += '<div class="button-section"><button href="#" class="button action">' + options.buttonText + "</button></div>";
        }
        var classes = "curtain-tooltip popover tooltip arrowed in " + (options.tooltipClass || "");
        tooltip.classed(classes, true).selectAll(".popover-inner").html(html2);
        if (options.buttonText && options.buttonCallback) {
          var button = tooltip.selectAll(".button-section .button.action");
          button.on("click", function(d3_event) {
            d3_event.preventDefault();
            options.buttonCallback();
          });
        }
        var tip = copyBox(tooltip.node().getBoundingClientRect()), w = containerNode.clientWidth, h = containerNode.clientHeight, tooltipWidth = 200, tooltipArrow = 5, side, pos;
        if (options.tooltipClass === "intro-mouse") {
          tip.height += 80;
        }
        if (tooltipBox.top + tooltipBox.height > h) {
          tooltipBox.height -= tooltipBox.top + tooltipBox.height - h;
        }
        if (tooltipBox.left + tooltipBox.width > w) {
          tooltipBox.width -= tooltipBox.left + tooltipBox.width - w;
        }
        if (tooltipBox.top + tooltipBox.height < 100) {
          side = "bottom";
          pos = [tooltipBox.left + tooltipBox.width / 2 - tip.width / 2, tooltipBox.top + tooltipBox.height];
        } else if (tooltipBox.top > h - 140) {
          side = "top";
          pos = [tooltipBox.left + tooltipBox.width / 2 - tip.width / 2, tooltipBox.top - tip.height];
        } else {
          var tipY = tooltipBox.top + tooltipBox.height / 2 - tip.height / 2;
          if (_mainLocalizer.textDirection() === "rtl") {
            if (tooltipBox.left - tooltipWidth - tooltipArrow < 70) {
              side = "right";
              pos = [tooltipBox.left + tooltipBox.width + tooltipArrow, tipY];
            } else {
              side = "left";
              pos = [tooltipBox.left - tooltipWidth - tooltipArrow, tipY];
            }
          } else {
            if (tooltipBox.left + tooltipBox.width + tooltipArrow + tooltipWidth > w - 70) {
              side = "left";
              pos = [tooltipBox.left - tooltipWidth - tooltipArrow, tipY];
            } else {
              side = "right";
              pos = [tooltipBox.left + tooltipBox.width + tooltipArrow, tipY];
            }
          }
        }
        if (options.duration !== 0 || !tooltip.classed(side)) {
          tooltip.call(uiToggle(true));
        }
        tooltip.style("top", pos[1] + "px").style("left", pos[0] + "px").attr("class", classes + " " + side);
        var shiftY = 0;
        if (side === "left" || side === "right") {
          if (pos[1] < 60) {
            shiftY = 60 - pos[1];
          } else if (pos[1] + tip.height > h - 100) {
            shiftY = h - pos[1] - tip.height - 100;
          }
        }
        tooltip.selectAll(".popover-inner").style("top", shiftY + "px");
      } else {
        tooltip.classed("in", false).call(uiToggle(false));
      }
      curtain.cut(box, options.duration);
      return tooltip;
    };
    curtain.cut = function(datum2, duration) {
      darkness.datum(datum2).interrupt();
      var selection2;
      if (duration === 0) {
        selection2 = darkness;
      } else {
        selection2 = darkness.transition().duration(duration || 600).ease(linear2);
      }
      selection2.attr("d", function(d) {
        var containerWidth = containerNode.clientWidth;
        var containerHeight = containerNode.clientHeight;
        var string = "M 0,0 L 0," + containerHeight + " L " + containerWidth + "," + containerHeight + "L" + containerWidth + ",0 Z";
        if (!d)
          return string;
        return string + "M" + d.left + "," + d.top + "L" + d.left + "," + (d.top + d.height) + "L" + (d.left + d.width) + "," + (d.top + d.height) + "L" + (d.left + d.width) + "," + d.top + "Z";
      });
    };
    curtain.remove = function() {
      surface.remove();
      tooltip.remove();
      select_default2(window).on("resize.curtain", null);
    };
    function copyBox(src) {
      return {
        top: src.top,
        right: src.right,
        bottom: src.bottom,
        left: src.left,
        width: src.width,
        height: src.height
      };
    }
    return curtain;
  }

  // modules/ui/data_header.js
  function uiDataHeader() {
    var _datum;
    function dataHeader(selection2) {
      var header = selection2.selectAll(".data-header").data(_datum ? [_datum] : [], function(d) {
        return d.__featurehash__;
      });
      header.exit().remove();
      var headerEnter = header.enter().append("div").attr("class", "data-header");
      var iconEnter = headerEnter.append("div").attr("class", "data-header-icon");
      iconEnter.append("div").attr("class", "preset-icon-28").call(svgIcon("#iD-icon-data", "note-fill"));
      headerEnter.append("div").attr("class", "data-header-label").html(_t.html("map_data.layers.custom.title"));
    }
    dataHeader.datum = function(val) {
      if (!arguments.length)
        return _datum;
      _datum = val;
      return this;
    };
    return dataHeader;
  }

  // modules/ui/data_editor.js
  function uiDataEditor(context) {
    var dataHeader = uiDataHeader();
    var rawTagEditor = uiSectionRawTagEditor("custom-data-tag-editor", context).expandedByDefault(true).readOnlyTags([/./]);
    var _datum;
    function dataEditor(selection2) {
      var header = selection2.selectAll(".header").data([0]);
      var headerEnter = header.enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "close").on("click", function() {
        context.enter(modeBrowse(context));
      }).call(svgIcon("#iD-icon-close"));
      headerEnter.append("h3").html(_t.html("map_data.title"));
      var body = selection2.selectAll(".body").data([0]);
      body = body.enter().append("div").attr("class", "body").merge(body);
      var editor = body.selectAll(".data-editor").data([0]);
      editor.enter().append("div").attr("class", "modal-section data-editor").merge(editor).call(dataHeader.datum(_datum));
      var rte = body.selectAll(".raw-tag-editor").data([0]);
      rte.enter().append("div").attr("class", "raw-tag-editor data-editor").merge(rte).call(rawTagEditor.tags(_datum && _datum.properties || {}).state("hover").render).selectAll("textarea.tag-text").attr("readonly", true).classed("readonly", true);
    }
    dataEditor.datum = function(val) {
      if (!arguments.length)
        return _datum;
      _datum = val;
      return this;
    };
    return dataEditor;
  }

  // modules/ui/entity_editor.js
  var import_fast_deep_equal10 = __toModule(require_fast_deep_equal());

  // modules/ui/sections/entity_issues.js
  function uiSectionEntityIssues(context) {
    var preference = corePreferences("entity-issues.reference.expanded");
    var _expanded = preference === null ? true : preference === "true";
    var _entityIDs = [];
    var _issues = [];
    var _activeIssueID;
    var section = uiSection("entity-issues", context).shouldDisplay(function() {
      return _issues.length > 0;
    }).label(function() {
      return _t("inspector.title_count", {
        title: _t.html("issues.list_title"),
        count: _issues.length
      });
    }).disclosureContent(renderDisclosureContent);
    context.validator().on("validated.entity_issues", function() {
      reloadIssues();
      section.reRender();
    }).on("focusedIssue.entity_issues", function(issue) {
      makeActiveIssue(issue.id);
    });
    function reloadIssues() {
      _issues = context.validator().getSharedEntityIssues(_entityIDs, {
        includeDisabledRules: true
      });
    }
    function makeActiveIssue(issueID) {
      _activeIssueID = issueID;
      section.selection().selectAll(".issue-container").classed("active", function(d) {
        return d.id === _activeIssueID;
      });
    }
    function renderDisclosureContent(selection2) {
      selection2.classed("grouped-items-area", true);
      _activeIssueID = _issues.length > 0 ? _issues[0].id : null;
      var containers = selection2.selectAll(".issue-container").data(_issues, function(d) {
        return d.key;
      });
      containers.exit().remove();
      var containersEnter = containers.enter().append("div").attr("class", "issue-container");
      var itemsEnter = containersEnter.append("div").attr("class", function(d) {
        return "issue severity-" + d.severity;
      }).on("mouseover.highlight", function(d3_event, d) {
        var ids = d.entityIds.filter(function(e3) {
          return _entityIDs.indexOf(e3) === -1;
        });
        utilHighlightEntities(ids, true, context);
      }).on("mouseout.highlight", function(d3_event, d) {
        var ids = d.entityIds.filter(function(e3) {
          return _entityIDs.indexOf(e3) === -1;
        });
        utilHighlightEntities(ids, false, context);
      });
      var labelsEnter = itemsEnter.append("div").attr("class", "issue-label");
      var textEnter = labelsEnter.append("button").attr("class", "issue-text").on("click", function(d3_event, d) {
        makeActiveIssue(d.id);
        var extent6 = d.extent(context.graph());
        if (extent6) {
          var setZoom = Math.max(context.map().zoom(), 19);
          context.map().unobscuredCenterZoomEase(extent6.center(), setZoom);
        }
      });
      textEnter.each(function(d) {
        var iconName = "#iD-icon-" + (d.severity === "warning" ? "alert" : "error");
        select_default2(this).call(svgIcon(iconName, "issue-icon"));
      });
      textEnter.append("span").attr("class", "issue-message");
      var infoButton = labelsEnter.append("button").attr("class", "issue-info-button").attr("title", _t("icons.information")).call(svgIcon("#iD-icon-inspect"));
      infoButton.on("click", function(d3_event) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        this.blur();
        var container = select_default2(this.parentNode.parentNode.parentNode);
        var info = container.selectAll(".issue-info");
        var isExpanded = info.classed("expanded");
        _expanded = !isExpanded;
        corePreferences("entity-issues.reference.expanded", _expanded);
        if (isExpanded) {
          info.transition().duration(200).style("max-height", "0px").style("opacity", "0").on("end", function() {
            info.classed("expanded", false);
          });
        } else {
          info.classed("expanded", true).transition().duration(200).style("max-height", "200px").style("opacity", "1").on("end", function() {
            info.style("max-height", null);
          });
        }
      });
      itemsEnter.append("ul").attr("class", "issue-fix-list");
      containersEnter.append("div").attr("class", "issue-info" + (_expanded ? " expanded" : "")).style("max-height", _expanded ? null : "0").style("opacity", _expanded ? "1" : "0").each(function(d) {
        if (typeof d.reference === "function") {
          select_default2(this).call(d.reference);
        } else {
          select_default2(this).html(_t.html("inspector.no_documentation_key"));
        }
      });
      containers = containers.merge(containersEnter).classed("active", function(d) {
        return d.id === _activeIssueID;
      });
      containers.selectAll(".issue-message").html(function(d) {
        return d.message(context);
      });
      var fixLists = containers.selectAll(".issue-fix-list");
      var fixes = fixLists.selectAll(".issue-fix-item").data(function(d) {
        return d.fixes ? d.fixes(context) : [];
      }, function(fix) {
        return fix.id;
      });
      fixes.exit().remove();
      var fixesEnter = fixes.enter().append("li").attr("class", "issue-fix-item");
      var buttons = fixesEnter.append("button").on("click", function(d3_event, d) {
        if (select_default2(this).attr("disabled") || !d.onClick)
          return;
        if (d.issue.dateLastRanFix && new Date() - d.issue.dateLastRanFix < 1e3)
          return;
        d.issue.dateLastRanFix = new Date();
        utilHighlightEntities(d.issue.entityIds.concat(d.entityIds), false, context);
        new Promise(function(resolve, reject) {
          d.onClick(context, resolve, reject);
          if (d.onClick.length <= 1) {
            resolve();
          }
        }).then(function() {
          context.validator().validate();
        });
      }).on("mouseover.highlight", function(d3_event, d) {
        utilHighlightEntities(d.entityIds, true, context);
      }).on("mouseout.highlight", function(d3_event, d) {
        utilHighlightEntities(d.entityIds, false, context);
      });
      buttons.each(function(d) {
        var iconName = d.icon || "iD-icon-wrench";
        if (iconName.startsWith("maki")) {
          iconName += "-15";
        }
        select_default2(this).call(svgIcon("#" + iconName, "fix-icon"));
      });
      buttons.append("span").attr("class", "fix-message").html(function(d) {
        return d.title;
      });
      fixesEnter.merge(fixes).selectAll("button").classed("actionable", function(d) {
        return d.onClick;
      }).attr("disabled", function(d) {
        return d.onClick ? null : "true";
      }).attr("title", function(d) {
        if (d.disabledReason) {
          return d.disabledReason;
        }
        return null;
      });
    }
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      if (!_entityIDs || !val || !utilArrayIdentical(_entityIDs, val)) {
        _entityIDs = val;
        _activeIssueID = null;
        reloadIssues();
      }
      return section;
    };
    return section;
  }

  // modules/ui/preset_icon.js
  function uiPresetIcon() {
    var _preset;
    var _geometry;
    var _sizeClass = "medium";
    function isSmall() {
      return _sizeClass === "small";
    }
    function presetIcon(selection2) {
      selection2.each(render);
    }
    function getIcon3(p2, geom) {
      if (isSmall() && p2.isFallback && p2.isFallback())
        return "iD-icon-" + p2.id;
      if (p2.icon)
        return p2.icon;
      if (geom === "line")
        return "iD-other-line";
      if (geom === "vertex")
        return p2.isFallback() ? "" : "temaki-vertex";
      if (isSmall() && geom === "point")
        return "";
      return "maki-marker-stroked";
    }
    function renderPointBorder(container, drawPoint) {
      var pointBorder = container.selectAll(".preset-icon-point-border").data(drawPoint ? [0] : []);
      pointBorder.exit().remove();
      var pointBorderEnter = pointBorder.enter();
      var w = 40;
      var h = 40;
      pointBorderEnter.append("svg").attr("class", "preset-icon-fill preset-icon-point-border").attr("width", w).attr("height", h).attr("viewBox", "0 0 ".concat(w, " ").concat(h)).append("path").attr("transform", "translate(11.5, 8)").attr("d", "M 17,8 C 17,13 11,21 8.5,23.5 C 6,21 0,13 0,8 C 0,4 4,-0.5 8.5,-0.5 C 13,-0.5 17,4 17,8 z");
      pointBorder = pointBorderEnter.merge(pointBorder);
    }
    function renderCategoryBorder(container, category) {
      var categoryBorder = container.selectAll(".preset-icon-category-border").data(category ? [0] : []);
      categoryBorder.exit().remove();
      var categoryBorderEnter = categoryBorder.enter();
      var d = 60;
      var svgEnter = categoryBorderEnter.append("svg").attr("class", "preset-icon-fill preset-icon-category-border").attr("width", d).attr("height", d).attr("viewBox", "0 0 ".concat(d, " ").concat(d));
      ["fill", "stroke"].forEach(function(klass) {
        svgEnter.append("path").attr("class", "area ".concat(klass)).attr("d", "M9.5,7.5 L25.5,7.5 L28.5,12.5 L49.5,12.5 C51.709139,12.5 53.5,14.290861 53.5,16.5 L53.5,43.5 C53.5,45.709139 51.709139,47.5 49.5,47.5 L10.5,47.5 C8.290861,47.5 6.5,45.709139 6.5,43.5 L6.5,12.5 L9.5,7.5 Z");
      });
      categoryBorder = categoryBorderEnter.merge(categoryBorder);
      if (category) {
        var tagClasses = svgTagClasses().getClassesString(category.members.collection[0].addTags, "");
        categoryBorder.selectAll("path.stroke").attr("class", "area stroke ".concat(tagClasses));
        categoryBorder.selectAll("path.fill").attr("class", "area fill ".concat(tagClasses));
      }
    }
    function renderCircleFill(container, drawVertex) {
      var vertexFill = container.selectAll(".preset-icon-fill-vertex").data(drawVertex ? [0] : []);
      vertexFill.exit().remove();
      var vertexFillEnter = vertexFill.enter();
      var w = 60;
      var h = 60;
      var d = 40;
      vertexFillEnter.append("svg").attr("class", "preset-icon-fill preset-icon-fill-vertex").attr("width", w).attr("height", h).attr("viewBox", "0 0 ".concat(w, " ").concat(h)).append("circle").attr("cx", w / 2).attr("cy", h / 2).attr("r", d / 2);
      vertexFill = vertexFillEnter.merge(vertexFill);
    }
    function renderSquareFill(container, drawArea, tagClasses) {
      var fill = container.selectAll(".preset-icon-fill-area").data(drawArea ? [0] : []);
      fill.exit().remove();
      var fillEnter = fill.enter();
      var d = isSmall() ? 40 : 60;
      var w = d;
      var h = d;
      var l = d * 2 / 3;
      var c1 = (w - l) / 2;
      var c2 = c1 + l;
      fillEnter = fillEnter.append("svg").attr("class", "preset-icon-fill preset-icon-fill-area").attr("width", w).attr("height", h).attr("viewBox", "0 0 ".concat(w, " ").concat(h));
      ["fill", "stroke"].forEach(function(klass) {
        fillEnter.append("path").attr("d", "M".concat(c1, " ").concat(c1, " L").concat(c1, " ").concat(c2, " L").concat(c2, " ").concat(c2, " L").concat(c2, " ").concat(c1, " Z")).attr("class", "area ".concat(klass));
      });
      var rVertex = 2.5;
      [[c1, c1], [c1, c2], [c2, c2], [c2, c1]].forEach(function(point5) {
        fillEnter.append("circle").attr("class", "vertex").attr("cx", point5[0]).attr("cy", point5[1]).attr("r", rVertex);
      });
      if (!isSmall()) {
        var rMidpoint = 1.25;
        [[c1, w / 2], [c2, w / 2], [h / 2, c1], [h / 2, c2]].forEach(function(point5) {
          fillEnter.append("circle").attr("class", "midpoint").attr("cx", point5[0]).attr("cy", point5[1]).attr("r", rMidpoint);
        });
      }
      fill = fillEnter.merge(fill);
      fill.selectAll("path.stroke").attr("class", "area stroke ".concat(tagClasses));
      fill.selectAll("path.fill").attr("class", "area fill ".concat(tagClasses));
    }
    function renderLine(container, drawLine, tagClasses) {
      var line = container.selectAll(".preset-icon-line").data(drawLine ? [0] : []);
      line.exit().remove();
      var lineEnter = line.enter();
      var d = isSmall() ? 40 : 60;
      var w = d;
      var h = d;
      var y = Math.round(d * 0.72);
      var l = Math.round(d * 0.6);
      var r = 2.5;
      var x12 = (w - l) / 2;
      var x2 = x12 + l;
      lineEnter = lineEnter.append("svg").attr("class", "preset-icon-line").attr("width", w).attr("height", h).attr("viewBox", "0 0 ".concat(w, " ").concat(h));
      ["casing", "stroke"].forEach(function(klass) {
        lineEnter.append("path").attr("d", "M".concat(x12, " ").concat(y, " L").concat(x2, " ").concat(y)).attr("class", "line ".concat(klass));
      });
      [[x12 - 1, y], [x2 + 1, y]].forEach(function(point5) {
        lineEnter.append("circle").attr("class", "vertex").attr("cx", point5[0]).attr("cy", point5[1]).attr("r", r);
      });
      line = lineEnter.merge(line);
      line.selectAll("path.stroke").attr("class", "line stroke ".concat(tagClasses));
      line.selectAll("path.casing").attr("class", "line casing ".concat(tagClasses));
    }
    function renderRoute(container, drawRoute, p2) {
      var route = container.selectAll(".preset-icon-route").data(drawRoute ? [0] : []);
      route.exit().remove();
      var routeEnter = route.enter();
      var d = isSmall() ? 40 : 60;
      var w = d;
      var h = d;
      var y12 = Math.round(d * 0.8);
      var y2 = Math.round(d * 0.68);
      var l = Math.round(d * 0.6);
      var r = 2;
      var x12 = (w - l) / 2;
      var x2 = x12 + l / 3;
      var x3 = x2 + l / 3;
      var x4 = x3 + l / 3;
      routeEnter = routeEnter.append("svg").attr("class", "preset-icon-route").attr("width", w).attr("height", h).attr("viewBox", "0 0 ".concat(w, " ").concat(h));
      ["casing", "stroke"].forEach(function(klass) {
        routeEnter.append("path").attr("d", "M".concat(x12, " ").concat(y12, " L").concat(x2, " ").concat(y2)).attr("class", "segment0 line ".concat(klass));
        routeEnter.append("path").attr("d", "M".concat(x2, " ").concat(y2, " L").concat(x3, " ").concat(y12)).attr("class", "segment1 line ".concat(klass));
        routeEnter.append("path").attr("d", "M".concat(x3, " ").concat(y12, " L").concat(x4, " ").concat(y2)).attr("class", "segment2 line ".concat(klass));
      });
      [[x12, y12], [x2, y2], [x3, y12], [x4, y2]].forEach(function(point5) {
        routeEnter.append("circle").attr("class", "vertex").attr("cx", point5[0]).attr("cy", point5[1]).attr("r", r);
      });
      route = routeEnter.merge(route);
      if (drawRoute) {
        var routeType = p2.tags.type === "waterway" ? "waterway" : p2.tags.route;
        var segmentPresetIDs = routeSegments[routeType];
        for (var i2 in segmentPresetIDs) {
          var segmentPreset = _mainPresetIndex.item(segmentPresetIDs[i2]);
          var segmentTagClasses = svgTagClasses().getClassesString(segmentPreset.tags, "");
          route.selectAll("path.stroke.segment".concat(i2)).attr("class", "segment".concat(i2, " line stroke ").concat(segmentTagClasses));
          route.selectAll("path.casing.segment".concat(i2)).attr("class", "segment".concat(i2, " line casing ").concat(segmentTagClasses));
        }
      }
    }
    function renderSvgIcon(container, picon, geom, isFramed, category, tagClasses) {
      var isMaki = picon && /^maki-/.test(picon);
      var isTemaki = picon && /^temaki-/.test(picon);
      var isFa = picon && /^fa[srb]-/.test(picon);
      var isiDIcon = picon && !(isMaki || isTemaki || isFa);
      var icon2 = container.selectAll(".preset-icon").data(picon ? [0] : []);
      icon2.exit().remove();
      icon2 = icon2.enter().append("div").attr("class", "preset-icon").call(svgIcon("")).merge(icon2);
      icon2.attr("class", "preset-icon " + (geom ? geom + "-geom" : "")).classed("category", category).classed("framed", isFramed).classed("preset-icon-iD", isiDIcon);
      icon2.selectAll("svg").attr("class", "icon " + picon + " " + (!isiDIcon && geom !== "line" ? "" : tagClasses));
      var suffix = "";
      if (isMaki) {
        suffix = isSmall() && geom === "point" ? "-11" : "-15";
      }
      icon2.selectAll("use").attr("href", "#" + picon + suffix);
    }
    function renderImageIcon(container, imageURL) {
      var imageIcon = container.selectAll("img.image-icon").data(imageURL ? [0] : []);
      imageIcon.exit().remove();
      imageIcon = imageIcon.enter().append("img").attr("class", "image-icon").on("load", function() {
        return container.classed("showing-img", true);
      }).on("error", function() {
        return container.classed("showing-img", false);
      }).merge(imageIcon);
      imageIcon.attr("src", imageURL);
    }
    var routeSegments = {
      bicycle: ["highway/cycleway", "highway/cycleway", "highway/cycleway"],
      bus: ["highway/unclassified", "highway/secondary", "highway/primary"],
      trolleybus: ["highway/unclassified", "highway/secondary", "highway/primary"],
      detour: ["highway/tertiary", "highway/residential", "highway/unclassified"],
      ferry: ["route/ferry", "route/ferry", "route/ferry"],
      foot: ["highway/footway", "highway/footway", "highway/footway"],
      hiking: ["highway/path", "highway/path", "highway/path"],
      horse: ["highway/bridleway", "highway/bridleway", "highway/bridleway"],
      light_rail: ["railway/light_rail", "railway/light_rail", "railway/light_rail"],
      monorail: ["railway/monorail", "railway/monorail", "railway/monorail"],
      mtb: ["highway/path", "highway/track", "highway/bridleway"],
      pipeline: ["man_made/pipeline", "man_made/pipeline", "man_made/pipeline"],
      piste: ["piste/downhill", "piste/hike", "piste/nordic"],
      power: ["power/line", "power/line", "power/line"],
      road: ["highway/secondary", "highway/primary", "highway/trunk"],
      subway: ["railway/subway", "railway/subway", "railway/subway"],
      train: ["railway/rail", "railway/rail", "railway/rail"],
      tram: ["railway/tram", "railway/tram", "railway/tram"],
      waterway: ["waterway/stream", "waterway/stream", "waterway/stream"]
    };
    function render() {
      var p2 = _preset.apply(this, arguments);
      var geom = _geometry ? _geometry.apply(this, arguments) : null;
      if (geom === "relation" && p2.tags && (p2.tags.type === "route" && p2.tags.route && routeSegments[p2.tags.route] || p2.tags.type === "waterway")) {
        geom = "route";
      }
      var showThirdPartyIcons = corePreferences("preferences.privacy.thirdpartyicons") || "true";
      var isFallback = isSmall() && p2.isFallback && p2.isFallback();
      var imageURL = showThirdPartyIcons === "true" && p2.imageURL;
      var picon = getIcon3(p2, geom);
      var isCategory = !p2.setTags;
      var drawPoint = picon && geom === "point" && isSmall() && !isFallback;
      var drawVertex = picon !== null && geom === "vertex" && (!isSmall() || !isFallback);
      var drawLine = picon && geom === "line" && !isFallback && !isCategory;
      var drawArea = picon && geom === "area" && !isFallback && !isCategory;
      var drawRoute = picon && geom === "route";
      var isFramed = drawVertex || drawArea || drawLine || drawRoute || isCategory;
      var tags = !isCategory ? p2.setTags({}, geom) : {};
      for (var k in tags) {
        if (tags[k] === "*") {
          tags[k] = "yes";
        }
      }
      var tagClasses = svgTagClasses().getClassesString(tags, "");
      var selection2 = select_default2(this);
      var container = selection2.selectAll(".preset-icon-container").data([0]);
      container = container.enter().append("div").attr("class", "preset-icon-container ".concat(_sizeClass)).merge(container);
      container.classed("showing-img", !!imageURL).classed("fallback", isFallback);
      renderCategoryBorder(container, isCategory && p2);
      renderPointBorder(container, drawPoint);
      renderCircleFill(container, drawVertex);
      renderSquareFill(container, drawArea, tagClasses);
      renderLine(container, drawLine, tagClasses);
      renderRoute(container, drawRoute, p2);
      renderSvgIcon(container, picon, geom, isFramed, isCategory, tagClasses);
      renderImageIcon(container, imageURL);
    }
    presetIcon.preset = function(val) {
      if (!arguments.length)
        return _preset;
      _preset = utilFunctor(val);
      return presetIcon;
    };
    presetIcon.geometry = function(val) {
      if (!arguments.length)
        return _geometry;
      _geometry = utilFunctor(val);
      return presetIcon;
    };
    presetIcon.sizeClass = function(val) {
      if (!arguments.length)
        return _sizeClass;
      _sizeClass = val;
      return presetIcon;
    };
    return presetIcon;
  }

  // modules/ui/sections/feature_type.js
  function uiSectionFeatureType(context) {
    var dispatch12 = dispatch_default("choose");
    var _entityIDs = [];
    var _presets = [];
    var _tagReference;
    var section = uiSection("feature-type", context).label(_t.html("inspector.feature_type")).disclosureContent(renderDisclosureContent);
    function renderDisclosureContent(selection2) {
      selection2.classed("preset-list-item", true);
      selection2.classed("mixed-types", _presets.length > 1);
      var presetButtonWrap = selection2.selectAll(".preset-list-button-wrap").data([0]).enter().append("div").attr("class", "preset-list-button-wrap");
      var presetButton = presetButtonWrap.append("button").attr("class", "preset-list-button preset-reset").call(uiTooltip().title(_t.html("inspector.back_tooltip")).placement("bottom"));
      presetButton.append("div").attr("class", "preset-icon-container");
      presetButton.append("div").attr("class", "label").append("div").attr("class", "label-inner");
      presetButtonWrap.append("div").attr("class", "accessory-buttons");
      var tagReferenceBodyWrap = selection2.selectAll(".tag-reference-body-wrap").data([0]);
      tagReferenceBodyWrap = tagReferenceBodyWrap.enter().append("div").attr("class", "tag-reference-body-wrap").merge(tagReferenceBodyWrap);
      if (_tagReference) {
        selection2.selectAll(".preset-list-button-wrap .accessory-buttons").style("display", _presets.length === 1 ? null : "none").call(_tagReference.button);
        tagReferenceBodyWrap.style("display", _presets.length === 1 ? null : "none").call(_tagReference.body);
      }
      selection2.selectAll(".preset-reset").on("click", function() {
        dispatch12.call("choose", this, _presets);
      }).on("pointerdown pointerup mousedown mouseup", function(d3_event) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
      });
      var geometries = entityGeometries();
      selection2.select(".preset-list-item button").call(uiPresetIcon().geometry(_presets.length === 1 ? geometries.length === 1 && geometries[0] : null).preset(_presets.length === 1 ? _presets[0] : _mainPresetIndex.item("point")));
      var names = _presets.length === 1 ? [_presets[0].nameLabel(), _presets[0].subtitleLabel()].filter(Boolean) : [_t("inspector.multiple_types")];
      var label = selection2.select(".label-inner");
      var nameparts = label.selectAll(".namepart").data(names, function(d) {
        return d;
      });
      nameparts.exit().remove();
      nameparts.enter().append("div").attr("class", "namepart").html(function(d) {
        return d;
      });
    }
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return section;
    };
    section.presets = function(val) {
      if (!arguments.length)
        return _presets;
      if (!utilArrayIdentical(val, _presets)) {
        _presets = val;
        if (_presets.length === 1) {
          _tagReference = uiTagReference(_presets[0].reference(), context).showing(false);
        }
      }
      return section;
    };
    function entityGeometries() {
      var counts = {};
      for (var i2 in _entityIDs) {
        var geometry6 = context.graph().geometry(_entityIDs[i2]);
        if (!counts[geometry6])
          counts[geometry6] = 0;
        counts[geometry6] += 1;
      }
      return Object.keys(counts).sort(function(geom1, geom2) {
        return counts[geom2] - counts[geom1];
      });
    }
    return utilRebind(section, dispatch12, "on");
  }

  // modules/ui/sections/preset_fields.js
  function uiSectionPresetFields(context) {
    var section = uiSection("preset-fields", context).label(_t.html("inspector.fields")).disclosureContent(renderDisclosureContent);
    var dispatch12 = dispatch_default("change", "revert");
    var formFields = uiFormFields(context);
    var _state;
    var _fieldsArr;
    var _presets = [];
    var _tags;
    var _entityIDs;
    function renderDisclosureContent(selection2) {
      if (!_fieldsArr) {
        var graph3 = context.graph();
        var geometries = Object.keys(_entityIDs.reduce(function(geoms, entityID) {
          geoms[graph3.entity(entityID).geometry(graph3)] = true;
          return geoms;
        }, {}));
        var presetsManager = _mainPresetIndex;
        var allFields = [];
        var allMoreFields = [];
        var sharedTotalFields;
        _presets.forEach(function(preset) {
          var fields = preset.fields();
          var moreFields = preset.moreFields();
          allFields = utilArrayUnion(allFields, fields);
          allMoreFields = utilArrayUnion(allMoreFields, moreFields);
          if (!sharedTotalFields) {
            sharedTotalFields = utilArrayUnion(fields, moreFields);
          } else {
            sharedTotalFields = sharedTotalFields.filter(function(field) {
              return fields.indexOf(field) !== -1 || moreFields.indexOf(field) !== -1;
            });
          }
        });
        var sharedFields = allFields.filter(function(field) {
          return sharedTotalFields.indexOf(field) !== -1;
        });
        var sharedMoreFields = allMoreFields.filter(function(field) {
          return sharedTotalFields.indexOf(field) !== -1;
        });
        _fieldsArr = [];
        sharedFields.forEach(function(field) {
          if (field.matchAllGeometry(geometries)) {
            _fieldsArr.push(uiField(context, field, _entityIDs));
          }
        });
        var singularEntity = _entityIDs.length === 1 && graph3.hasEntity(_entityIDs[0]);
        if (singularEntity && singularEntity.isHighwayIntersection(graph3) && presetsManager.field("restrictions")) {
          _fieldsArr.push(uiField(context, presetsManager.field("restrictions"), _entityIDs));
        }
        var additionalFields = utilArrayUnion(sharedMoreFields, presetsManager.universal());
        additionalFields.sort(function(field1, field2) {
          return field1.label().localeCompare(field2.label(), _mainLocalizer.localeCode());
        });
        additionalFields.forEach(function(field) {
          if (sharedFields.indexOf(field) === -1 && field.matchAllGeometry(geometries)) {
            _fieldsArr.push(uiField(context, field, _entityIDs, {
              show: false
            }));
          }
        });
        _fieldsArr.forEach(function(field) {
          field.on("change", function(t, onInput) {
            dispatch12.call("change", field, _entityIDs, t, onInput);
          }).on("revert", function(keys3) {
            dispatch12.call("revert", field, keys3);
          });
        });
      }
      _fieldsArr.forEach(function(field) {
        field.state(_state).tags(_tags);
      });
      selection2.call(formFields.fieldsArr(_fieldsArr).state(_state).klass("grouped-items-area"));
      selection2.selectAll(".wrap-form-field input").on("keydown", function(d3_event) {
        if (d3_event.keyCode === 13 && context.container().select(".combobox").empty()) {
          context.enter(modeBrowse(context));
        }
      });
    }
    section.presets = function(val) {
      if (!arguments.length)
        return _presets;
      if (!_presets || !val || !utilArrayIdentical(_presets, val)) {
        _presets = val;
        _fieldsArr = null;
      }
      return section;
    };
    section.state = function(val) {
      if (!arguments.length)
        return _state;
      _state = val;
      return section;
    };
    section.tags = function(val) {
      if (!arguments.length)
        return _tags;
      _tags = val;
      return section;
    };
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      if (!val || !_entityIDs || !utilArrayIdentical(_entityIDs, val)) {
        _entityIDs = val;
        _fieldsArr = null;
      }
      return section;
    };
    return utilRebind(section, dispatch12, "on");
  }

  // modules/ui/sections/raw_member_editor.js
  function uiSectionRawMemberEditor(context) {
    var section = uiSection("raw-member-editor", context).shouldDisplay(function() {
      if (!_entityIDs || _entityIDs.length !== 1)
        return false;
      var entity2 = context.hasEntity(_entityIDs[0]);
      return entity2 && entity2.type === "relation";
    }).label(function() {
      var entity2 = context.hasEntity(_entityIDs[0]);
      if (!entity2)
        return "";
      var gt = entity2.members.length > _maxMembers ? ">" : "";
      var count = gt + entity2.members.slice(0, _maxMembers).length;
      return _t("inspector.title_count", {
        title: _t.html("inspector.members"),
        count: count
      });
    }).disclosureContent(renderDisclosureContent);
    var taginfo = services.taginfo;
    var _entityIDs;
    var _maxMembers = 1e3;
    function downloadMember(d3_event, d) {
      d3_event.preventDefault();
      select_default2(this.parentNode).classed("tag-reference-loading", true);
      context.loadEntity(d.id, function() {
        section.reRender();
      });
    }
    function zoomToMember(d3_event, d) {
      d3_event.preventDefault();
      var entity2 = context.entity(d.id);
      context.map().zoomToEase(entity2);
      utilHighlightEntities([d.id], true, context);
    }
    function selectMember(d3_event, d) {
      d3_event.preventDefault();
      utilHighlightEntities([d.id], false, context);
      var entity2 = context.entity(d.id);
      var mapExtent = context.map().extent();
      if (!entity2.intersects(mapExtent, context.graph())) {
        context.map().zoomToEase(entity2);
      }
      context.enter(modeSelect(context, [d.id]));
    }
    function changeRole(d3_event, d) {
      var oldRole = d.role;
      var newRole = context.cleanRelationRole(select_default2(this).property("value"));
      if (oldRole !== newRole) {
        var member = {
          id: d.id,
          type: d.type,
          role: newRole
        };
        context.perform(actionChangeMember(d.relation.id, member, d.index), _t("operations.change_role.annotation", {
          n: 1
        }));
        context.validator().validate();
      }
    }
    function deleteMember(d3_event, d) {
      utilHighlightEntities([d.id], false, context);
      context.perform(actionDeleteMember(d.relation.id, d.index), _t("operations.delete_member.annotation", {
        n: 1
      }));
      if (!context.hasEntity(d.relation.id)) {
        context.enter(modeBrowse(context));
      } else {
        context.validator().validate();
      }
    }
    function renderDisclosureContent(selection2) {
      var entityID = _entityIDs[0];
      var memberships = [];
      var entity2 = context.entity(entityID);
      entity2.members.slice(0, _maxMembers).forEach(function(member, index) {
        memberships.push({
          index: index,
          id: member.id,
          type: member.type,
          role: member.role,
          relation: entity2,
          member: context.hasEntity(member.id),
          domId: utilUniqueString(entityID + "-member-" + index)
        });
      });
      var list = selection2.selectAll(".member-list").data([0]);
      list = list.enter().append("ul").attr("class", "member-list").merge(list);
      var items = list.selectAll("li").data(memberships, function(d) {
        return osmEntity.key(d.relation) + "," + d.index + "," + (d.member ? osmEntity.key(d.member) : "incomplete");
      });
      items.exit().each(unbind).remove();
      var itemsEnter = items.enter().append("li").attr("class", "member-row form-field").classed("member-incomplete", function(d) {
        return !d.member;
      });
      itemsEnter.each(function(d) {
        var item = select_default2(this);
        var label = item.append("label").attr("class", "field-label").attr("for", d.domId);
        if (d.member) {
          item.on("mouseover", function() {
            utilHighlightEntities([d.id], true, context);
          }).on("mouseout", function() {
            utilHighlightEntities([d.id], false, context);
          });
          var labelLink = label.append("span").attr("class", "label-text").append("a").attr("href", "#").on("click", selectMember);
          labelLink.append("span").attr("class", "member-entity-type").html(function(d2) {
            var matched = _mainPresetIndex.match(d2.member, context.graph());
            return matched && matched.name() || utilDisplayType(d2.member.id);
          });
          labelLink.append("span").attr("class", "member-entity-name").html(function(d2) {
            return utilDisplayName(d2.member);
          });
          label.append("button").attr("title", _t("icons.remove")).attr("class", "remove member-delete").call(svgIcon("#iD-operation-delete"));
          label.append("button").attr("class", "member-zoom").attr("title", _t("icons.zoom_to")).call(svgIcon("#iD-icon-framed-dot", "monochrome")).on("click", zoomToMember);
        } else {
          var labelText = label.append("span").attr("class", "label-text");
          labelText.append("span").attr("class", "member-entity-type").html(_t.html("inspector." + d.type, {
            id: d.id
          }));
          labelText.append("span").attr("class", "member-entity-name").html(_t.html("inspector.incomplete", {
            id: d.id
          }));
          label.append("button").attr("class", "member-download").attr("title", _t("icons.download")).call(svgIcon("#iD-icon-load")).on("click", downloadMember);
        }
      });
      var wrapEnter = itemsEnter.append("div").attr("class", "form-field-input-wrap form-field-input-member");
      wrapEnter.append("input").attr("class", "member-role").attr("id", function(d) {
        return d.domId;
      }).property("type", "text").attr("placeholder", _t("inspector.role")).call(utilNoAuto);
      if (taginfo) {
        wrapEnter.each(bindTypeahead);
      }
      items = items.merge(itemsEnter).order();
      items.select("input.member-role").property("value", function(d) {
        return d.role;
      }).on("blur", changeRole).on("change", changeRole);
      items.select("button.member-delete").on("click", deleteMember);
      var dragOrigin, targetIndex;
      items.call(drag_default().on("start", function(d3_event) {
        dragOrigin = {
          x: d3_event.x,
          y: d3_event.y
        };
        targetIndex = null;
      }).on("drag", function(d3_event) {
        var x2 = d3_event.x - dragOrigin.x, y = d3_event.y - dragOrigin.y;
        if (!select_default2(this).classed("dragging") && Math.sqrt(Math.pow(x2, 2) + Math.pow(y, 2)) <= 5)
          return;
        var index = items.nodes().indexOf(this);
        select_default2(this).classed("dragging", true);
        targetIndex = null;
        selection2.selectAll("li.member-row").style("transform", function(d2, index2) {
          var node = select_default2(this).node();
          if (index === index2) {
            return "translate(" + x2 + "px, " + y + "px)";
          } else if (index2 > index && d3_event.y > node.offsetTop) {
            if (targetIndex === null || index2 > targetIndex) {
              targetIndex = index2;
            }
            return "translateY(-100%)";
          } else if (index2 < index && d3_event.y < node.offsetTop + node.offsetHeight) {
            if (targetIndex === null || index2 < targetIndex) {
              targetIndex = index2;
            }
            return "translateY(100%)";
          }
          return null;
        });
      }).on("end", function(d3_event, d) {
        if (!select_default2(this).classed("dragging"))
          return;
        var index = items.nodes().indexOf(this);
        select_default2(this).classed("dragging", false);
        selection2.selectAll("li.member-row").style("transform", null);
        if (targetIndex !== null) {
          context.perform(actionMoveMember(d.relation.id, index, targetIndex), _t("operations.reorder_members.annotation"));
          context.validator().validate();
        }
      }));
      function bindTypeahead(d) {
        var row = select_default2(this);
        var role = row.selectAll("input.member-role");
        var origValue = role.property("value");
        function sort(value2, data2) {
          var sameletter = [];
          var other = [];
          for (var i2 = 0; i2 < data2.length; i2++) {
            if (data2[i2].value.substring(0, value2.length) === value2) {
              sameletter.push(data2[i2]);
            } else {
              other.push(data2[i2]);
            }
          }
          return sameletter.concat(other);
        }
        role.call(uiCombobox(context, "member-role").fetcher(function(role2, callback) {
          var geometry6;
          if (d.member) {
            geometry6 = context.graph().geometry(d.member.id);
          } else if (d.type === "relation") {
            geometry6 = "relation";
          } else if (d.type === "way") {
            geometry6 = "line";
          } else {
            geometry6 = "point";
          }
          var rtype = entity2.tags.type;
          taginfo.roles({
            debounce: true,
            rtype: rtype || "",
            geometry: geometry6,
            query: role2
          }, function(err, data2) {
            if (!err)
              callback(sort(role2, data2));
          });
        }).on("cancel", function() {
          role.property("value", origValue);
        }));
      }
      function unbind() {
        var row = select_default2(this);
        row.selectAll("input.member-role").call(uiCombobox.off, context);
      }
    }
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return section;
    };
    return section;
  }

  // modules/actions/delete_members.js
  function actionDeleteMembers(relationId, memberIndexes) {
    return function(graph3) {
      memberIndexes.sort(function(a, b2) {
        return b2 - a;
      });
      for (var i2 in memberIndexes) {
        graph3 = actionDeleteMember(relationId, memberIndexes[i2])(graph3);
      }
      return graph3;
    };
  }

  // modules/ui/sections/raw_membership_editor.js
  function uiSectionRawMembershipEditor(context) {
    var section = uiSection("raw-membership-editor", context).shouldDisplay(function() {
      return _entityIDs && _entityIDs.length;
    }).label(function() {
      var parents = getSharedParentRelations();
      var gt = parents.length > _maxMemberships ? ">" : "";
      var count = gt + parents.slice(0, _maxMemberships).length;
      return _t("inspector.title_count", {
        title: _t.html("inspector.relations"),
        count: count
      });
    }).disclosureContent(renderDisclosureContent);
    var taginfo = services.taginfo;
    var nearbyCombo = uiCombobox(context, "parent-relation").minItems(1).fetcher(fetchNearbyRelations).itemsMouseEnter(function(d3_event, d) {
      if (d.relation)
        utilHighlightEntities([d.relation.id], true, context);
    }).itemsMouseLeave(function(d3_event, d) {
      if (d.relation)
        utilHighlightEntities([d.relation.id], false, context);
    });
    var _inChange = false;
    var _entityIDs = [];
    var _showBlank;
    var _maxMemberships = 1e3;
    function getSharedParentRelations() {
      var parents = [];
      for (var i2 = 0; i2 < _entityIDs.length; i2++) {
        var entity2 = context.graph().hasEntity(_entityIDs[i2]);
        if (!entity2)
          continue;
        if (i2 === 0) {
          parents = context.graph().parentRelations(entity2);
        } else {
          parents = utilArrayIntersection(parents, context.graph().parentRelations(entity2));
        }
        if (!parents.length)
          break;
      }
      return parents;
    }
    function getMemberships() {
      var memberships = [];
      var relations = getSharedParentRelations().slice(0, _maxMemberships);
      var isMultiselect = _entityIDs.length > 1;
      var i2, relation, membership, index, member, indexedMember;
      for (i2 = 0; i2 < relations.length; i2++) {
        relation = relations[i2];
        membership = {
          relation: relation,
          members: [],
          hash: osmEntity.key(relation)
        };
        for (index = 0; index < relation.members.length; index++) {
          member = relation.members[index];
          if (_entityIDs.indexOf(member.id) !== -1) {
            indexedMember = Object.assign({}, member, {
              index: index
            });
            membership.members.push(indexedMember);
            membership.hash += "," + index.toString();
            if (!isMultiselect) {
              memberships.push(membership);
              membership = {
                relation: relation,
                members: [],
                hash: osmEntity.key(relation)
              };
            }
          }
        }
        if (membership.members.length)
          memberships.push(membership);
      }
      memberships.forEach(function(membership2) {
        membership2.domId = utilUniqueString("membership-" + membership2.relation.id);
        var roles2 = [];
        membership2.members.forEach(function(member2) {
          if (roles2.indexOf(member2.role) === -1)
            roles2.push(member2.role);
        });
        membership2.role = roles2.length === 1 ? roles2[0] : roles2;
      });
      return memberships;
    }
    function selectRelation(d3_event, d) {
      d3_event.preventDefault();
      utilHighlightEntities([d.relation.id], false, context);
      context.enter(modeSelect(context, [d.relation.id]));
    }
    function zoomToRelation(d3_event, d) {
      d3_event.preventDefault();
      var entity2 = context.entity(d.relation.id);
      context.map().zoomToEase(entity2);
      utilHighlightEntities([d.relation.id], true, context);
    }
    function changeRole(d3_event, d) {
      if (d === 0)
        return;
      if (_inChange)
        return;
      var newRole = context.cleanRelationRole(select_default2(this).property("value"));
      if (!newRole.trim() && typeof d.role !== "string")
        return;
      var membersToUpdate = d.members.filter(function(member) {
        return member.role !== newRole;
      });
      if (membersToUpdate.length) {
        _inChange = true;
        context.perform(function actionChangeMemberRoles(graph3) {
          membersToUpdate.forEach(function(member) {
            var newMember = Object.assign({}, member, {
              role: newRole
            });
            delete newMember.index;
            graph3 = actionChangeMember(d.relation.id, newMember, member.index)(graph3);
          });
          return graph3;
        }, _t("operations.change_role.annotation", {
          n: membersToUpdate.length
        }));
        context.validator().validate();
      }
      _inChange = false;
    }
    function addMembership(d, role) {
      this.blur();
      _showBlank = false;
      function actionAddMembers(relationId, ids, role2) {
        return function(graph3) {
          for (var i2 in ids) {
            var member = {
              id: ids[i2],
              type: graph3.entity(ids[i2]).type,
              role: role2
            };
            graph3 = actionAddMember(relationId, member)(graph3);
          }
          return graph3;
        };
      }
      if (d.relation) {
        context.perform(actionAddMembers(d.relation.id, _entityIDs, role), _t("operations.add_member.annotation", {
          n: _entityIDs.length
        }));
        context.validator().validate();
      } else {
        var relation = osmRelation();
        context.perform(actionAddEntity(relation), actionAddMembers(relation.id, _entityIDs, role), _t("operations.add.annotation.relation"));
        context.enter(modeSelect(context, [relation.id]).newFeature(true));
      }
    }
    function deleteMembership(d3_event, d) {
      this.blur();
      if (d === 0)
        return;
      utilHighlightEntities([d.relation.id], false, context);
      var indexes = d.members.map(function(member) {
        return member.index;
      });
      context.perform(actionDeleteMembers(d.relation.id, indexes), _t("operations.delete_member.annotation", {
        n: _entityIDs.length
      }));
      context.validator().validate();
    }
    function fetchNearbyRelations(q2, callback) {
      var newRelation = {
        relation: null,
        value: _t("inspector.new_relation"),
        display: _t.html("inspector.new_relation")
      };
      var entityID = _entityIDs[0];
      var result6 = [];
      var graph3 = context.graph();
      function baseDisplayLabel(entity2) {
        var matched = _mainPresetIndex.match(entity2, graph3);
        var presetName = matched && matched.name() || _t("inspector.relation");
        var entityName = utilDisplayName(entity2) || "";
        return presetName + " " + entityName;
      }
      var explicitRelation = q2 && context.hasEntity(q2.toLowerCase());
      if (explicitRelation && explicitRelation.type === "relation" && explicitRelation.id !== entityID) {
        result6.push({
          relation: explicitRelation,
          value: baseDisplayLabel(explicitRelation) + " " + explicitRelation.id
        });
      } else {
        context.history().intersects(context.map().extent()).forEach(function(entity2) {
          if (entity2.type !== "relation" || entity2.id === entityID)
            return;
          var value2 = baseDisplayLabel(entity2);
          if (q2 && (value2 + " " + entity2.id).toLowerCase().indexOf(q2.toLowerCase()) === -1)
            return;
          result6.push({
            relation: entity2,
            value: value2
          });
        });
        result6.sort(function(a, b2) {
          return osmRelation.creationOrder(a.relation, b2.relation);
        });
        var dupeGroups = Object.values(utilArrayGroupBy(result6, "value")).filter(function(v) {
          return v.length > 1;
        });
        dupeGroups.forEach(function(group) {
          group.forEach(function(obj) {
            obj.value += " " + obj.relation.id;
          });
        });
      }
      result6.forEach(function(obj) {
        obj.title = obj.value;
      });
      result6.unshift(newRelation);
      callback(result6);
    }
    function renderDisclosureContent(selection2) {
      var memberships = getMemberships();
      var list = selection2.selectAll(".member-list").data([0]);
      list = list.enter().append("ul").attr("class", "member-list").merge(list);
      var items = list.selectAll("li.member-row-normal").data(memberships, function(d) {
        return d.hash;
      });
      items.exit().each(unbind).remove();
      var itemsEnter = items.enter().append("li").attr("class", "member-row member-row-normal form-field");
      itemsEnter.on("mouseover", function(d3_event, d) {
        utilHighlightEntities([d.relation.id], true, context);
      }).on("mouseout", function(d3_event, d) {
        utilHighlightEntities([d.relation.id], false, context);
      });
      var labelEnter = itemsEnter.append("label").attr("class", "field-label").attr("for", function(d) {
        return d.domId;
      });
      var labelLink = labelEnter.append("span").attr("class", "label-text").append("a").attr("href", "#").on("click", selectRelation);
      labelLink.append("span").attr("class", "member-entity-type").html(function(d) {
        var matched = _mainPresetIndex.match(d.relation, context.graph());
        return matched && matched.name() || _t("inspector.relation");
      });
      labelLink.append("span").attr("class", "member-entity-name").html(function(d) {
        var matched = _mainPresetIndex.match(d.relation, context.graph());
        return utilDisplayName(d.relation, matched.suggestion);
      });
      labelEnter.append("button").attr("class", "remove member-delete").call(svgIcon("#iD-operation-delete")).on("click", deleteMembership);
      labelEnter.append("button").attr("class", "member-zoom").attr("title", _t("icons.zoom_to")).call(svgIcon("#iD-icon-framed-dot", "monochrome")).on("click", zoomToRelation);
      var wrapEnter = itemsEnter.append("div").attr("class", "form-field-input-wrap form-field-input-member");
      wrapEnter.append("input").attr("class", "member-role").attr("id", function(d) {
        return d.domId;
      }).property("type", "text").property("value", function(d) {
        return typeof d.role === "string" ? d.role : "";
      }).attr("title", function(d) {
        return Array.isArray(d.role) ? d.role.filter(Boolean).join("\n") : d.role;
      }).attr("placeholder", function(d) {
        return Array.isArray(d.role) ? _t("inspector.multiple_roles") : _t("inspector.role");
      }).classed("mixed", function(d) {
        return Array.isArray(d.role);
      }).call(utilNoAuto).on("blur", changeRole).on("change", changeRole);
      if (taginfo) {
        wrapEnter.each(bindTypeahead);
      }
      var newMembership = list.selectAll(".member-row-new").data(_showBlank ? [0] : []);
      newMembership.exit().remove();
      var newMembershipEnter = newMembership.enter().append("li").attr("class", "member-row member-row-new form-field");
      var newLabelEnter = newMembershipEnter.append("label").attr("class", "field-label");
      newLabelEnter.append("input").attr("placeholder", _t("inspector.choose_relation")).attr("type", "text").attr("class", "member-entity-input").call(utilNoAuto);
      newLabelEnter.append("button").attr("class", "remove member-delete").call(svgIcon("#iD-operation-delete")).on("click", function() {
        list.selectAll(".member-row-new").remove();
      });
      var newWrapEnter = newMembershipEnter.append("div").attr("class", "form-field-input-wrap form-field-input-member");
      newWrapEnter.append("input").attr("class", "member-role").property("type", "text").attr("placeholder", _t("inspector.role")).call(utilNoAuto);
      newMembership = newMembership.merge(newMembershipEnter);
      newMembership.selectAll(".member-entity-input").on("blur", cancelEntity).call(nearbyCombo.on("accept", acceptEntity).on("cancel", cancelEntity));
      var addRow = selection2.selectAll(".add-row").data([0]);
      var addRowEnter = addRow.enter().append("div").attr("class", "add-row");
      var addRelationButton = addRowEnter.append("button").attr("class", "add-relation");
      addRelationButton.call(svgIcon("#iD-icon-plus", "light"));
      addRelationButton.call(uiTooltip().title(_t.html("inspector.add_to_relation")).placement(_mainLocalizer.textDirection() === "ltr" ? "right" : "left"));
      addRowEnter.append("div").attr("class", "space-value");
      addRowEnter.append("div").attr("class", "space-buttons");
      addRow = addRow.merge(addRowEnter);
      addRow.select(".add-relation").on("click", function() {
        _showBlank = true;
        section.reRender();
        list.selectAll(".member-entity-input").node().focus();
      });
      function acceptEntity(d) {
        if (!d) {
          cancelEntity();
          return;
        }
        if (d.relation)
          utilHighlightEntities([d.relation.id], false, context);
        var role = context.cleanRelationRole(list.selectAll(".member-row-new .member-role").property("value"));
        addMembership(d, role);
      }
      function cancelEntity() {
        var input4 = newMembership.selectAll(".member-entity-input");
        input4.property("value", "");
        context.surface().selectAll(".highlighted").classed("highlighted", false);
      }
      function bindTypeahead(d) {
        var row = select_default2(this);
        var role = row.selectAll("input.member-role");
        var origValue = role.property("value");
        function sort(value2, data2) {
          var sameletter = [];
          var other = [];
          for (var i2 = 0; i2 < data2.length; i2++) {
            if (data2[i2].value.substring(0, value2.length) === value2) {
              sameletter.push(data2[i2]);
            } else {
              other.push(data2[i2]);
            }
          }
          return sameletter.concat(other);
        }
        role.call(uiCombobox(context, "member-role").fetcher(function(role2, callback) {
          var rtype = d.relation.tags.type;
          taginfo.roles({
            debounce: true,
            rtype: rtype || "",
            geometry: context.graph().geometry(_entityIDs[0]),
            query: role2
          }, function(err, data2) {
            if (!err)
              callback(sort(role2, data2));
          });
        }).on("cancel", function() {
          role.property("value", origValue);
        }));
      }
      function unbind() {
        var row = select_default2(this);
        row.selectAll("input.member-role").call(uiCombobox.off, context);
      }
    }
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      _showBlank = false;
      return section;
    };
    return section;
  }

  // modules/ui/sections/selection_list.js
  function uiSectionSelectionList(context) {
    var _selectedIDs = [];
    var section = uiSection("selected-features", context).shouldDisplay(function() {
      return _selectedIDs.length > 1;
    }).label(function() {
      return _t("inspector.title_count", {
        title: _t.html("inspector.features"),
        count: _selectedIDs.length
      });
    }).disclosureContent(renderDisclosureContent);
    context.history().on("change.selectionList", function(difference) {
      if (difference) {
        section.reRender();
      }
    });
    section.entityIDs = function(val) {
      if (!arguments.length)
        return _selectedIDs;
      _selectedIDs = val;
      return section;
    };
    function selectEntity(d3_event, entity2) {
      context.enter(modeSelect(context, [entity2.id]));
    }
    function deselectEntity(d3_event, entity2) {
      var selectedIDs = _selectedIDs.slice();
      var index = selectedIDs.indexOf(entity2.id);
      if (index > -1) {
        selectedIDs.splice(index, 1);
        context.enter(modeSelect(context, selectedIDs));
      }
    }
    function renderDisclosureContent(selection2) {
      var list = selection2.selectAll(".feature-list").data([0]);
      list = list.enter().append("ul").attr("class", "feature-list").merge(list);
      var entities = _selectedIDs.map(function(id2) {
        return context.hasEntity(id2);
      }).filter(Boolean);
      var items = list.selectAll(".feature-list-item").data(entities, osmEntity.key);
      items.exit().remove();
      var enter = items.enter().append("li").attr("class", "feature-list-item").each(function(d) {
        select_default2(this).on("mouseover", function() {
          utilHighlightEntities([d.id], true, context);
        }).on("mouseout", function() {
          utilHighlightEntities([d.id], false, context);
        });
      });
      var label = enter.append("button").attr("class", "label").on("click", selectEntity);
      label.append("span").attr("class", "entity-geom-icon").call(svgIcon("", "pre-text"));
      label.append("span").attr("class", "entity-type");
      label.append("span").attr("class", "entity-name");
      enter.append("button").attr("class", "close").attr("title", _t("icons.deselect")).on("click", deselectEntity).call(svgIcon("#iD-icon-close"));
      items = items.merge(enter);
      items.selectAll(".entity-geom-icon use").attr("href", function() {
        var entity2 = this.parentNode.parentNode.__data__;
        return "#iD-icon-" + entity2.geometry(context.graph());
      });
      items.selectAll(".entity-type").html(function(entity2) {
        return _mainPresetIndex.match(entity2, context.graph()).name();
      });
      items.selectAll(".entity-name").html(function(d) {
        var entity2 = context.entity(d.id);
        return utilDisplayName(entity2);
      });
    }
    return section;
  }

  // modules/ui/entity_editor.js
  function uiEntityEditor(context) {
    var dispatch12 = dispatch_default("choose");
    var _state = "select";
    var _coalesceChanges = false;
    var _modified = false;
    var _base;
    var _entityIDs;
    var _activePresets = [];
    var _newFeature;
    var _sections;
    function getCombinedTags(entityIDs, graph3) {
      var tags = {};
      var tagCounts = {};
      var allKeys = new Set();
      var entities = entityIDs.map(function(entityID) {
        return graph3.hasEntity(entityID);
      }).filter(Boolean);
      entities.forEach(function(entity2) {
        var keys3 = Object.keys(entity2.tags).filter(Boolean);
        keys3.forEach(function(key2) {
          allKeys.add(key2);
        });
      });
      entities.forEach(function(entity2) {
        allKeys.forEach(function(key2) {
          var value2 = entity2.tags[key2];
          if (!tags.hasOwnProperty(key2)) {
            tags[key2] = value2;
          } else {
            if (!Array.isArray(tags[key2])) {
              if (tags[key2] !== value2) {
                tags[key2] = [tags[key2], value2];
              }
            } else {
              if (tags[key2].indexOf(value2) === -1) {
                tags[key2].push(value2);
              }
            }
          }
          var tagHash = key2 + "=" + value2;
          if (!tagCounts[tagHash])
            tagCounts[tagHash] = 0;
          tagCounts[tagHash] += 1;
        });
      });
      for (var key in tags) {
        if (!Array.isArray(tags[key]))
          continue;
        tags[key] = tags[key].sort(function(val1, val2) {
          var key2 = key2;
          var count2 = tagCounts[key2 + "=" + val2];
          var count1 = tagCounts[key2 + "=" + val1];
          if (count2 !== count1) {
            return count2 - count1;
          }
          if (val2 && val1) {
            return val1.localeCompare(val2);
          }
          return val1 ? 1 : -1;
        });
      }
      return tags;
    }
    function entityEditor(selection2) {
      var combinedTags = getCombinedTags(_entityIDs, context.graph());
      var header = selection2.selectAll(".header").data([0]);
      var headerEnter = header.enter().append("div").attr("class", "header fillL");
      headerEnter.append("button").attr("class", "preset-reset preset-choose").call(svgIcon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-forward" : "#iD-icon-backward"));
      headerEnter.append("button").attr("class", "close").on("click", function() {
        context.enter(modeBrowse(context));
      }).call(svgIcon(_modified ? "#iD-icon-apply" : "#iD-icon-close"));
      headerEnter.append("h3");
      header = header.merge(headerEnter);
      header.selectAll("h3").html(_entityIDs.length === 1 ? _t.html("inspector.edit") : _t.html("rapid_multiselect"));
      header.selectAll(".preset-reset").on("click", function() {
        dispatch12.call("choose", this, _activePresets);
      });
      var body = selection2.selectAll(".inspector-body").data([0]);
      var bodyEnter = body.enter().append("div").attr("class", "entity-editor inspector-body sep-top");
      body = body.merge(bodyEnter);
      if (!_sections) {
        _sections = [uiSectionSelectionList(context), uiSectionFeatureType(context).on("choose", function(presets) {
          dispatch12.call("choose", this, presets);
        }), uiSectionEntityIssues(context), uiSectionPresetFields(context).on("change", changeTags).on("revert", revertTags), uiSectionRawTagEditor("raw-tag-editor", context).on("change", changeTags), uiSectionRawMemberEditor(context), uiSectionRawMembershipEditor(context)];
      }
      _sections.forEach(function(section) {
        if (section.entityIDs) {
          section.entityIDs(_entityIDs);
        }
        if (section.presets) {
          section.presets(_activePresets);
        }
        if (section.tags) {
          section.tags(combinedTags);
        }
        if (section.state) {
          section.state(_state);
        }
        body.call(section.render);
      });
      context.history().on("change.entity-editor", historyChanged);
      function historyChanged(difference) {
        if (selection2.selectAll(".entity-editor").empty())
          return;
        if (_state === "hide")
          return;
        var significant = !difference || difference.didChange.properties || difference.didChange.addition || difference.didChange.deletion;
        if (!significant)
          return;
        _entityIDs = _entityIDs.filter(context.hasEntity);
        if (!_entityIDs.length)
          return;
        var priorActivePreset = _activePresets.length === 1 && _activePresets[0];
        loadActivePresets();
        var graph3 = context.graph();
        entityEditor.modified(_base !== graph3);
        entityEditor(selection2);
        if (priorActivePreset && _activePresets.length === 1 && priorActivePreset !== _activePresets[0]) {
          context.container().selectAll(".entity-editor button.preset-reset .label").style("background-color", "#fff").transition().duration(750).style("background-color", null);
        }
      }
    }
    function changeTags(entityIDs, changed, onInput) {
      var actions = [];
      for (var i2 in entityIDs) {
        var entityID = entityIDs[i2];
        var entity2 = context.entity(entityID);
        var tags = Object.assign({}, entity2.tags);
        for (var k in changed) {
          if (!k)
            continue;
          if (entity2.__fbid__ && k === "source" && (entity2.tags.source === "digitalglobe" || entity2.tags.source === "maxar"))
            continue;
          var v = changed[k];
          if (v !== void 0 || tags.hasOwnProperty(k)) {
            tags[k] = v;
          }
        }
        if (!onInput) {
          tags = utilCleanTags(tags);
        }
        if (!(0, import_fast_deep_equal10.default)(entity2.tags, tags)) {
          actions.push(actionChangeTags(entityID, tags));
        }
      }
      if (actions.length) {
        var combinedAction = function combinedAction2(graph3) {
          actions.forEach(function(action) {
            graph3 = action(graph3);
          });
          return graph3;
        };
        var annotation = _t("operations.change_tags.annotation");
        if (_coalesceChanges) {
          context.overwrite(combinedAction, annotation);
        } else {
          context.perform(combinedAction, annotation);
          _coalesceChanges = !!onInput;
        }
      }
      if (!onInput) {
        context.validator().validate();
      }
    }
    function revertTags(keys3) {
      var actions = [];
      for (var i2 in _entityIDs) {
        var entityID = _entityIDs[i2];
        var original = context.graph().base().entities[entityID];
        var changed = {};
        for (var j in keys3) {
          var key = keys3[j];
          changed[key] = original ? original.tags[key] : void 0;
        }
        var entity2 = context.entity(entityID);
        var tags = Object.assign({}, entity2.tags);
        for (var k in changed) {
          if (!k)
            continue;
          var v = changed[k];
          if (v !== void 0 || tags.hasOwnProperty(k)) {
            tags[k] = v;
          }
        }
        tags = utilCleanTags(tags);
        if (!(0, import_fast_deep_equal10.default)(entity2.tags, tags)) {
          actions.push(actionChangeTags(entityID, tags));
        }
      }
      if (actions.length) {
        var combinedAction = function combinedAction2(graph3) {
          actions.forEach(function(action) {
            graph3 = action(graph3);
          });
          return graph3;
        };
        var annotation = _t("operations.change_tags.annotation");
        if (_coalesceChanges) {
          context.overwrite(combinedAction, annotation);
        } else {
          context.perform(combinedAction, annotation);
          _coalesceChanges = false;
        }
      }
      context.validator().validate();
    }
    entityEditor.modified = function(val) {
      if (!arguments.length)
        return _modified;
      _modified = val;
      return entityEditor;
    };
    entityEditor.state = function(val) {
      if (!arguments.length)
        return _state;
      _state = val;
      return entityEditor;
    };
    entityEditor.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _base = context.graph();
      _coalesceChanges = false;
      if (val && _entityIDs && utilArrayIdentical(_entityIDs, val))
        return entityEditor;
      _entityIDs = val;
      loadActivePresets(true);
      return entityEditor.modified(false);
    };
    entityEditor.newFeature = function(val) {
      if (!arguments.length)
        return _newFeature;
      _newFeature = val;
      return entityEditor;
    };
    function loadActivePresets(isForNewSelection) {
      var graph3 = context.graph();
      var counts = {};
      for (var i2 in _entityIDs) {
        var entity2 = graph3.hasEntity(_entityIDs[i2]);
        if (!entity2)
          return;
        var match = _mainPresetIndex.match(entity2, graph3);
        if (!counts[match.id])
          counts[match.id] = 0;
        counts[match.id] += 1;
      }
      var matches = Object.keys(counts).sort(function(p1, p2) {
        return counts[p2] - counts[p1];
      }).map(function(pID) {
        return _mainPresetIndex.item(pID);
      });
      if (!isForNewSelection) {
        var weakPreset = _activePresets.length === 1 && !_activePresets[0].isFallback() && Object.keys(_activePresets[0].addTags || {}).length === 0;
        if (weakPreset && matches.length === 1 && matches[0].isFallback())
          return;
      }
      entityEditor.presets(matches);
    }
    entityEditor.presets = function(val) {
      if (!arguments.length)
        return _activePresets;
      if (!utilArrayIdentical(val, _activePresets)) {
        _activePresets = val;
      }
      return entityEditor;
    };
    return utilRebind(entityEditor, dispatch12, "on");
  }

  // modules/ui/feature_list.js
  var sexagesimal = __toModule(require_sexagesimal());
  function uiFeatureList(context) {
    var _geocodeResults;
    function featureList(selection2) {
      var header = selection2.append("div").attr("class", "header fillL");
      header.append("h3").html(_t.html("inspector.feature_list"));
      var searchWrap = selection2.append("div").attr("class", "search-header");
      searchWrap.call(svgIcon("#iD-icon-search", "pre-text"));
      var search3 = searchWrap.append("input").attr("placeholder", _t("inspector.search")).attr("type", "search").call(utilNoAuto).on("keypress", keypress).on("keydown", keydown).on("input", inputevent);
      var listWrap = selection2.append("div").attr("class", "inspector-body");
      var list = listWrap.append("div").attr("class", "feature-list");
      context.on("exit.feature-list", clearSearch);
      context.map().on("drawn.feature-list", mapDrawn);
      context.keybinding().on(uiCmd("\u2318F"), focusSearch);
      function focusSearch(d3_event) {
        var mode = context.mode() && context.mode().id;
        if (mode !== "browse")
          return;
        d3_event.preventDefault();
        search3.node().focus();
      }
      function keydown(d3_event) {
        if (d3_event.keyCode === 27) {
          search3.node().blur();
        }
      }
      function keypress(d3_event) {
        var q2 = search3.property("value"), items = list.selectAll(".feature-list-item");
        if (d3_event.keyCode === 13 && q2.length && items.size()) {
          click(d3_event, items.datum());
        }
      }
      function inputevent() {
        _geocodeResults = void 0;
        drawList();
      }
      function clearSearch() {
        search3.property("value", "");
        drawList();
      }
      function mapDrawn(e3) {
        if (e3.full) {
          drawList();
        }
      }
      function features2() {
        var result6 = [];
        var graph3 = context.graph();
        var visibleCenter = context.map().extent().center();
        var q2 = search3.property("value").toLowerCase();
        if (!q2)
          return result6;
        var locationMatch = sexagesimal.pair(q2.toUpperCase()) || q2.match(/^(-?\d+\.?\d*)\s+(-?\d+\.?\d*)$/);
        if (locationMatch) {
          var loc = [parseFloat(locationMatch[0]), parseFloat(locationMatch[1])];
          result6.push({
            id: -1,
            geometry: "point",
            type: _t("inspector.location"),
            name: dmsCoordinatePair([loc[1], loc[0]]),
            location: loc
          });
        }
        var idMatch = !locationMatch && q2.match(/(?:^|\W)(node|way|relation|[nwr])\W?0*([1-9]\d*)(?:\W|$)/i);
        if (idMatch) {
          var elemType = idMatch[1].charAt(0);
          var elemId = idMatch[2];
          result6.push({
            id: elemType + elemId,
            geometry: elemType === "n" ? "point" : elemType === "w" ? "line" : "relation",
            type: elemType === "n" ? _t("inspector.node") : elemType === "w" ? _t("inspector.way") : _t("inspector.relation"),
            name: elemId
          });
        }
        var allEntities = graph3.entities;
        var localResults = [];
        for (var id2 in allEntities) {
          var entity2 = allEntities[id2];
          if (!entity2)
            continue;
          var name = utilDisplayName(entity2) || "";
          if (name.toLowerCase().indexOf(q2) < 0)
            continue;
          var matched = _mainPresetIndex.match(entity2, graph3);
          var type3 = matched && matched.name() || utilDisplayType(entity2.id);
          var extent6 = entity2.extent(graph3);
          var distance = extent6 ? geoSphericalDistance(visibleCenter, extent6.center()) : 0;
          localResults.push({
            id: entity2.id,
            entity: entity2,
            geometry: entity2.geometry(graph3),
            type: type3,
            name: name,
            distance: distance
          });
          if (localResults.length > 100)
            break;
        }
        localResults = localResults.sort(function byDistance(a, b2) {
          return a.distance - b2.distance;
        });
        result6 = result6.concat(localResults);
        (_geocodeResults || []).forEach(function(d) {
          if (d.osm_type && d.osm_id) {
            var id3 = osmEntity.id.fromOSM(d.osm_type, d.osm_id);
            var tags = {};
            tags[d.class] = d.type;
            var attrs = {
              id: id3,
              type: d.osm_type,
              tags: tags
            };
            if (d.osm_type === "way") {
              attrs.nodes = ["a", "a"];
            }
            var tempEntity = osmEntity(attrs);
            var tempGraph = coreGraph([tempEntity]);
            var matched2 = _mainPresetIndex.match(tempEntity, tempGraph);
            var type4 = matched2 && matched2.name() || utilDisplayType(id3);
            result6.push({
              id: tempEntity.id,
              geometry: tempEntity.geometry(tempGraph),
              type: type4,
              name: d.display_name,
              extent: new Extent([parseFloat(d.boundingbox[3]), parseFloat(d.boundingbox[0])], [parseFloat(d.boundingbox[2]), parseFloat(d.boundingbox[1])])
            });
          }
        });
        if (q2.match(/^[0-9]+$/)) {
          result6.push({
            id: "n" + q2,
            geometry: "point",
            type: _t("inspector.node"),
            name: q2
          });
          result6.push({
            id: "w" + q2,
            geometry: "line",
            type: _t("inspector.way"),
            name: q2
          });
          result6.push({
            id: "r" + q2,
            geometry: "relation",
            type: _t("inspector.relation"),
            name: q2
          });
        }
        return result6;
      }
      function drawList() {
        var value2 = search3.property("value");
        var results = features2();
        list.classed("filtered", value2.length);
        var resultsIndicator = list.selectAll(".no-results-item").data([0]).enter().append("button").property("disabled", true).attr("class", "no-results-item").call(svgIcon("#iD-icon-alert", "pre-text"));
        resultsIndicator.append("span").attr("class", "entity-name");
        list.selectAll(".no-results-item .entity-name").html(_t.html("geocoder.no_results_worldwide"));
        if (services.geocoder) {
          list.selectAll(".geocode-item").data([0]).enter().append("button").attr("class", "geocode-item secondary-action").on("click", geocoderSearch).append("div").attr("class", "label").append("span").attr("class", "entity-name").html(_t.html("geocoder.search"));
        }
        list.selectAll(".no-results-item").style("display", value2.length && !results.length ? "block" : "none");
        list.selectAll(".geocode-item").style("display", value2 && _geocodeResults === void 0 ? "block" : "none");
        list.selectAll(".feature-list-item").data([-1]).remove();
        var items = list.selectAll(".feature-list-item").data(results, function(d) {
          return d.id;
        });
        var enter = items.enter().insert("button", ".geocode-item").attr("class", "feature-list-item").on("mouseover", mouseover).on("mouseout", mouseout).on("click", click);
        var label = enter.append("div").attr("class", "label");
        label.each(function(d) {
          select_default2(this).call(svgIcon("#iD-icon-" + d.geometry, "pre-text"));
        });
        label.append("span").attr("class", "entity-type").html(function(d) {
          return d.type;
        });
        label.append("span").attr("class", "entity-name").html(function(d) {
          return d.name;
        });
        enter.style("opacity", 0).transition().style("opacity", 1);
        items.order();
        items.exit().remove();
      }
      function mouseover(d3_event, d) {
        if (d.id === -1)
          return;
        utilHighlightEntities([d.id], true, context);
      }
      function mouseout(d3_event, d) {
        if (d.id === -1)
          return;
        utilHighlightEntities([d.id], false, context);
      }
      function click(d3_event, d) {
        d3_event.preventDefault();
        if (d.location) {
          context.map().centerZoomEase([d.location[1], d.location[0]], 19);
        } else if (d.entity) {
          utilHighlightEntities([d.id], false, context);
          context.enter(modeSelect(context, [d.entity.id]));
          context.map().zoomToEase(d.entity);
        } else {
          context.zoomToEntity(d.id);
        }
      }
      function geocoderSearch() {
        services.geocoder.search(search3.property("value"), function(err, resp) {
          _geocodeResults = resp || [];
          drawList();
        });
      }
    }
    return featureList;
  }

  // modules/ui/preset_list.js
  function uiPresetList(context) {
    var dispatch12 = dispatch_default("cancel", "choose");
    var _entityIDs;
    var _currLoc;
    var _currentPresets;
    var _autofocus = false;
    function presetList(selection2) {
      if (!_entityIDs)
        return;
      var presets = _mainPresetIndex.matchAllGeometry(entityGeometries());
      selection2.html("");
      var messagewrap = selection2.append("div").attr("class", "header fillL");
      var message = messagewrap.append("h3").html(_t.html("inspector.choose"));
      messagewrap.append("button").attr("class", "preset-choose").on("click", function() {
        dispatch12.call("cancel", this);
      }).call(svgIcon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward"));
      function initialKeydown(d3_event) {
        if (search3.property("value").length === 0 && (d3_event.keyCode === utilKeybinding.keyCodes["\u232B"] || d3_event.keyCode === utilKeybinding.keyCodes["\u2326"])) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
          operationDelete(context, _entityIDs)();
        } else if (search3.property("value").length === 0 && (d3_event.ctrlKey || d3_event.metaKey) && d3_event.keyCode === utilKeybinding.keyCodes.z) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
          context.undo();
        } else if (!d3_event.ctrlKey && !d3_event.metaKey) {
          select_default2(this).on("keydown", keydown);
          keydown.call(this, d3_event);
        }
      }
      function keydown(d3_event) {
        if (d3_event.keyCode === utilKeybinding.keyCodes["\u2193"] && search3.node().selectionStart === search3.property("value").length) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
          var buttons = list.selectAll(".preset-list-button");
          if (!buttons.empty())
            buttons.nodes()[0].focus();
        }
      }
      function keypress(d3_event) {
        var value2 = search3.property("value");
        if (d3_event.keyCode === 13 && value2.length) {
          list.selectAll(".preset-list-item:first-child").each(function(d) {
            d.choose.call(this);
          });
        }
      }
      function inputevent() {
        var value2 = search3.property("value");
        list.classed("filtered", value2.length);
        var results, messageText;
        if (value2.length) {
          results = presets.search(value2, entityGeometries()[0], _currLoc);
          messageText = _t("inspector.results", {
            n: results.collection.length,
            search: value2
          });
        } else {
          results = _mainPresetIndex.defaults(entityGeometries()[0], 36, !context.inIntro(), _currLoc);
          messageText = _t("inspector.choose");
        }
        list.call(drawList, results);
        message.html(messageText);
      }
      var searchWrap = selection2.append("div").attr("class", "search-header");
      searchWrap.call(svgIcon("#iD-icon-search", "pre-text"));
      var search3 = searchWrap.append("input").attr("class", "preset-search-input").attr("placeholder", _t("inspector.search")).attr("type", "search").call(utilNoAuto).on("keydown", initialKeydown).on("keypress", keypress).on("input", debounce_default(inputevent));
      if (_autofocus) {
        search3.node().focus();
        setTimeout(function() {
          search3.node().focus();
        }, 0);
      }
      var listWrap = selection2.append("div").attr("class", "inspector-body");
      var list = listWrap.append("div").attr("class", "preset-list").call(drawList, _mainPresetIndex.defaults(entityGeometries()[0], 36, !context.inIntro(), _currLoc));
      context.features().on("change.preset-list", updateForFeatureHiddenState);
    }
    function drawList(list, presets) {
      presets = presets.matchAllGeometry(entityGeometries());
      var collection = presets.collection.reduce(function(collection2, preset) {
        if (!preset)
          return collection2;
        if (preset.members) {
          if (preset.members.collection.filter(function(preset2) {
            return preset2.addable();
          }).length > 1) {
            collection2.push(CategoryItem(preset));
          }
        } else if (preset.addable()) {
          collection2.push(PresetItem(preset));
        }
        return collection2;
      }, []);
      var items = list.selectAll(".preset-list-item").data(collection, function(d) {
        return d.preset.id;
      });
      items.order();
      items.exit().remove();
      items.enter().append("div").attr("class", function(item) {
        return "preset-list-item preset-" + item.preset.id.replace("/", "-");
      }).classed("current", function(item) {
        return _currentPresets.indexOf(item.preset) !== -1;
      }).each(function(item) {
        select_default2(this).call(item);
      }).style("opacity", 0).transition().style("opacity", 1);
      updateForFeatureHiddenState();
    }
    function itemKeydown(d3_event) {
      var item = select_default2(this.closest(".preset-list-item"));
      var parentItem = select_default2(item.node().parentNode.closest(".preset-list-item"));
      if (d3_event.keyCode === utilKeybinding.keyCodes["\u2193"]) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        var nextItem = select_default2(item.node().nextElementSibling);
        if (nextItem.empty()) {
          if (!parentItem.empty()) {
            nextItem = select_default2(parentItem.node().nextElementSibling);
          }
        } else if (select_default2(this).classed("expanded")) {
          nextItem = item.select(".subgrid .preset-list-item:first-child");
        }
        if (!nextItem.empty()) {
          nextItem.select(".preset-list-button").node().focus();
        }
      } else if (d3_event.keyCode === utilKeybinding.keyCodes["\u2191"]) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        var previousItem = select_default2(item.node().previousElementSibling);
        if (previousItem.empty()) {
          if (!parentItem.empty()) {
            previousItem = parentItem;
          }
        } else if (previousItem.select(".preset-list-button").classed("expanded")) {
          previousItem = previousItem.select(".subgrid .preset-list-item:last-child");
        }
        if (!previousItem.empty()) {
          previousItem.select(".preset-list-button").node().focus();
        } else {
          var search3 = select_default2(this.closest(".preset-list-pane")).select(".preset-search-input");
          search3.node().focus();
        }
      } else if (d3_event.keyCode === utilKeybinding.keyCodes[_mainLocalizer.textDirection() === "rtl" ? "\u2192" : "\u2190"]) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        if (!parentItem.empty()) {
          parentItem.select(".preset-list-button").node().focus();
        }
      } else if (d3_event.keyCode === utilKeybinding.keyCodes[_mainLocalizer.textDirection() === "rtl" ? "\u2190" : "\u2192"]) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        item.datum().choose.call(select_default2(this).node());
      }
    }
    function CategoryItem(preset) {
      var box, sublist, shown = false;
      function item(selection2) {
        var wrap2 = selection2.append("div").attr("class", "preset-list-button-wrap category");
        function click() {
          var isExpanded = select_default2(this).classed("expanded");
          var iconName = isExpanded ? _mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward" : "#iD-icon-down";
          select_default2(this).classed("expanded", !isExpanded);
          select_default2(this).selectAll("div.label-inner svg.icon use").attr("href", iconName);
          item.choose();
        }
        var geometries = entityGeometries();
        var button = wrap2.append("button").attr("class", "preset-list-button").classed("expanded", false).call(uiPresetIcon().geometry(geometries.length === 1 && geometries[0]).preset(preset)).on("click", click).on("keydown", function(d3_event) {
          if (d3_event.keyCode === utilKeybinding.keyCodes[_mainLocalizer.textDirection() === "rtl" ? "\u2190" : "\u2192"]) {
            d3_event.preventDefault();
            d3_event.stopPropagation();
            if (!select_default2(this).classed("expanded")) {
              click.call(this, d3_event);
            }
          } else if (d3_event.keyCode === utilKeybinding.keyCodes[_mainLocalizer.textDirection() === "rtl" ? "\u2192" : "\u2190"]) {
            d3_event.preventDefault();
            d3_event.stopPropagation();
            if (select_default2(this).classed("expanded")) {
              click.call(this, d3_event);
            }
          } else {
            itemKeydown.call(this, d3_event);
          }
        });
        var label = button.append("div").attr("class", "label").append("div").attr("class", "label-inner");
        label.append("div").attr("class", "namepart").call(svgIcon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward", "inline")).append("span").html(function() {
          return preset.nameLabel() + "&hellip;";
        });
        box = selection2.append("div").attr("class", "subgrid").style("max-height", "0px").style("opacity", 0);
        box.append("div").attr("class", "arrow");
        sublist = box.append("div").attr("class", "preset-list fillL3");
      }
      item.choose = function() {
        if (!box || !sublist)
          return;
        if (shown) {
          shown = false;
          box.transition().duration(200).style("opacity", "0").style("max-height", "0px").style("padding-bottom", "0px");
        } else {
          shown = true;
          var members = preset.members.matchAllGeometry(entityGeometries());
          sublist.call(drawList, members);
          box.transition().duration(200).style("opacity", "1").style("max-height", 200 + members.collection.length * 190 + "px").style("padding-bottom", "10px");
        }
      };
      item.preset = preset;
      return item;
    }
    function PresetItem(preset) {
      function item(selection2) {
        var wrap2 = selection2.append("div").attr("class", "preset-list-button-wrap");
        var geometries = entityGeometries();
        var button = wrap2.append("button").attr("class", "preset-list-button").call(uiPresetIcon().geometry(geometries.length === 1 && geometries[0]).preset(preset)).on("click", item.choose).on("keydown", itemKeydown);
        var label = button.append("div").attr("class", "label").append("div").attr("class", "label-inner");
        var nameparts = [preset.nameLabel(), preset.subtitleLabel()].filter(Boolean);
        label.selectAll(".namepart").data(nameparts).enter().append("div").attr("class", "namepart").html(function(d) {
          return d;
        });
        wrap2.call(item.reference.button);
        selection2.call(item.reference.body);
      }
      item.choose = function() {
        if (select_default2(this).classed("disabled"))
          return;
        if (!context.inIntro()) {
          _mainPresetIndex.setMostRecent(preset, entityGeometries()[0]);
        }
        context.perform(function(graph3) {
          for (var i2 in _entityIDs) {
            var entityID = _entityIDs[i2];
            var oldPreset = _mainPresetIndex.match(graph3.entity(entityID), graph3);
            graph3 = actionChangePreset(entityID, oldPreset, preset)(graph3);
          }
          return graph3;
        }, _t("operations.change_tags.annotation"));
        context.validator().validate();
        dispatch12.call("choose", this, preset);
      };
      item.help = function(d3_event) {
        d3_event.stopPropagation();
        item.reference.toggle();
      };
      item.preset = preset;
      item.reference = uiTagReference(preset.reference(), context);
      return item;
    }
    function updateForFeatureHiddenState() {
      if (!_entityIDs.every(context.hasEntity))
        return;
      var geometries = entityGeometries();
      var button = context.container().selectAll(".preset-list .preset-list-button");
      button.call(uiTooltip().destroyAny);
      button.each(function(item, index) {
        var hiddenPresetFeaturesId;
        for (var i2 in geometries) {
          hiddenPresetFeaturesId = context.features().isHiddenPreset(item.preset, geometries[i2]);
          if (hiddenPresetFeaturesId)
            break;
        }
        var isHiddenPreset = !context.inIntro() && !!hiddenPresetFeaturesId && (_currentPresets.length !== 1 || item.preset !== _currentPresets[0]);
        select_default2(this).classed("disabled", isHiddenPreset);
        if (isHiddenPreset) {
          var isAutoHidden = context.features().autoHidden(hiddenPresetFeaturesId);
          select_default2(this).call(uiTooltip().title(_t.html("inspector.hidden_preset." + (isAutoHidden ? "zoom" : "manual"), {
            features: _t.html("feature." + hiddenPresetFeaturesId + ".description")
          })).placement(index < 2 ? "bottom" : "top"));
        }
      });
    }
    presetList.autofocus = function(val) {
      if (!arguments.length)
        return _autofocus;
      _autofocus = val;
      return presetList;
    };
    presetList.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      _currLoc = null;
      if (_entityIDs && _entityIDs.length) {
        _currLoc = utilTotalExtent(_entityIDs, context.graph()).center();
        var presets = _entityIDs.map(function(entityID) {
          return _mainPresetIndex.match(context.entity(entityID), context.graph());
        });
        presetList.presets(presets);
      }
      return presetList;
    };
    presetList.presets = function(val) {
      if (!arguments.length)
        return _currentPresets;
      _currentPresets = val;
      return presetList;
    };
    function entityGeometries() {
      var counts = {};
      for (var i2 in _entityIDs) {
        var entityID = _entityIDs[i2];
        var entity2 = context.entity(entityID);
        var geometry6 = entity2.geometry(context.graph());
        if (geometry6 === "vertex" && entity2.isOnAddressLine(context.graph())) {
          geometry6 = "point";
        }
        if (!counts[geometry6])
          counts[geometry6] = 0;
        counts[geometry6] += 1;
      }
      return Object.keys(counts).sort(function(geom1, geom2) {
        return counts[geom2] - counts[geom1];
      });
    }
    return utilRebind(presetList, dispatch12, "on");
  }

  // modules/ui/inspector.js
  function uiInspector(context) {
    var presetList = uiPresetList(context);
    var entityEditor = uiEntityEditor(context);
    var wrap2 = select_default2(null), presetPane = select_default2(null), editorPane = select_default2(null);
    var _state = "select";
    var _entityIDs;
    var _newFeature = false;
    function inspector(selection2) {
      presetList.entityIDs(_entityIDs).autofocus(_newFeature).on("choose", inspector.setPreset).on("cancel", function() {
        inspector.setPreset();
      });
      entityEditor.state(_state).entityIDs(_entityIDs).on("choose", inspector.showList);
      wrap2 = selection2.selectAll(".panewrap").data([0]);
      var enter = wrap2.enter().append("div").attr("class", "panewrap");
      enter.append("div").attr("class", "preset-list-pane pane");
      enter.append("div").attr("class", "entity-editor-pane pane");
      wrap2 = wrap2.merge(enter);
      presetPane = wrap2.selectAll(".preset-list-pane");
      editorPane = wrap2.selectAll(".entity-editor-pane");
      function shouldDefaultToPresetList() {
        if (_state !== "select")
          return false;
        if (_entityIDs.length !== 1)
          return false;
        var entityID = _entityIDs[0];
        var entity2 = context.hasEntity(entityID);
        if (!entity2)
          return false;
        if (entity2.hasNonGeometryTags())
          return false;
        if (_newFeature)
          return true;
        if (entity2.geometry(context.graph()) !== "vertex")
          return false;
        if (context.graph().parentRelations(entity2).length)
          return false;
        if (context.validator().getEntityIssues(entityID).length)
          return false;
        if (entity2.isHighwayIntersection(context.graph()))
          return false;
        return true;
      }
      if (shouldDefaultToPresetList()) {
        wrap2.style("right", "-100%");
        editorPane.classed("hide", true);
        presetPane.classed("hide", false).call(presetList);
      } else {
        wrap2.style("right", "0%");
        presetPane.classed("hide", true);
        editorPane.classed("hide", false).call(entityEditor);
      }
      var footer = selection2.selectAll(".footer").data([0]);
      footer = footer.enter().append("div").attr("class", "footer").merge(footer);
      footer.call(uiViewOnOSM(context).what(context.hasEntity(_entityIDs.length === 1 && _entityIDs[0])));
    }
    inspector.showList = function(presets) {
      presetPane.classed("hide", false);
      wrap2.transition().styleTween("right", function() {
        return value_default("0%", "-100%");
      }).on("end", function() {
        editorPane.classed("hide", true);
      });
      if (presets) {
        presetList.presets(presets);
      }
      presetPane.call(presetList.autofocus(true));
    };
    inspector.setPreset = function(preset) {
      if (preset && preset.id === "type/multipolygon") {
        presetPane.call(presetList.autofocus(true));
      } else {
        editorPane.classed("hide", false);
        wrap2.transition().styleTween("right", function() {
          return value_default("-100%", "0%");
        }).on("end", function() {
          presetPane.classed("hide", true);
        });
        if (preset) {
          entityEditor.presets([preset]);
        }
        editorPane.call(entityEditor);
      }
    };
    inspector.state = function(val) {
      if (!arguments.length)
        return _state;
      _state = val;
      entityEditor.state(_state);
      context.container().selectAll(".field-help-body").remove();
      return inspector;
    };
    inspector.entityIDs = function(val) {
      if (!arguments.length)
        return _entityIDs;
      _entityIDs = val;
      return inspector;
    };
    inspector.newFeature = function(val) {
      if (!arguments.length)
        return _newFeature;
      _newFeature = val;
      return inspector;
    };
    return inspector;
  }

  // modules/ui/issues_info.js
  function uiIssuesInfo(context) {
    var warningsItem = {
      id: "warnings",
      count: 0,
      iconID: "iD-icon-alert",
      descriptionID: "issues.warnings_and_errors"
    };
    var resolvedItem = {
      id: "resolved",
      count: 0,
      iconID: "iD-icon-apply",
      descriptionID: "issues.user_resolved_issues"
    };
    function update4(selection2) {
      var shownItems = [];
      var liveIssues = context.validator().getIssues({
        what: corePreferences("validate-what") || "edited",
        where: corePreferences("validate-where") || "all"
      });
      if (liveIssues.length) {
        warningsItem.count = liveIssues.length;
        shownItems.push(warningsItem);
      }
      if (corePreferences("validate-what") === "all") {
        var resolvedIssues = context.validator().getResolvedIssues();
        if (resolvedIssues.length) {
          resolvedItem.count = resolvedIssues.length;
          shownItems.push(resolvedItem);
        }
      }
      var chips = selection2.selectAll(".chip").data(shownItems, function(d) {
        return d.id;
      });
      chips.exit().remove();
      var enter = chips.enter().append("a").attr("class", function(d) {
        return "chip " + d.id + "-count";
      }).attr("href", "#").each(function(d) {
        var chipSelection = select_default2(this);
        var tooltipBehavior = uiTooltip().placement("top").title(_t.html(d.descriptionID));
        chipSelection.call(tooltipBehavior).on("click", function(d3_event) {
          d3_event.preventDefault();
          tooltipBehavior.hide(select_default2(this));
          context.ui().togglePanes(context.container().select(".map-panes .issues-pane"));
        });
        chipSelection.call(svgIcon("#" + d.iconID));
      });
      enter.append("span").attr("class", "count");
      enter.merge(chips).selectAll("span.count").html(function(d) {
        return d.count.toString();
      });
    }
    return function(selection2) {
      update4(selection2);
      context.validator().on("validated.infobox", function() {
        update4(selection2);
      });
    };
  }

  // modules/ui/lasso.js
  function uiLasso(context) {
    var group, polygon2;
    lasso.coordinates = [];
    function lasso(selection2) {
      context.container().classed("lasso", true);
      group = selection2.append("g").attr("class", "lasso hide");
      polygon2 = group.append("path").attr("class", "lasso-path");
      group.call(uiToggle(true));
    }
    function draw() {
      if (polygon2) {
        polygon2.data([lasso.coordinates]).attr("d", function(d) {
          return "M" + d.join(" L") + " Z";
        });
      }
    }
    lasso.extent = function() {
      return lasso.coordinates.reduce(function(extent6, point5) {
        extent6.min = [Math.min(extent6.min[0], point5[0]), Math.min(extent6.min[1], point5[1])];
        extent6.max = [Math.max(extent6.max[0], point5[0]), Math.max(extent6.max[1], point5[1])];
        return extent6;
      }, new Extent());
    };
    lasso.p = function(_2) {
      if (!arguments.length)
        return lasso;
      lasso.coordinates.push(_2);
      draw();
      return lasso;
    };
    lasso.close = function() {
      if (group) {
        group.call(uiToggle(false, function() {
          select_default2(this).remove();
        }));
      }
      context.container().classed("lasso", false);
    };
    return lasso;
  }

  // modules/ui/map_in_map.js
  function uiMapInMap(context) {
    function mapInMap(selection2) {
      var backgroundLayer = rendererTileLayer(context);
      var overlayLayers = {};
      var projection2 = geoRawMercator();
      var dataLayer = svgData(projection2, context).showLabels(false);
      var debugLayer = svgDebug(projection2, context);
      var zoom = zoom_default2().scaleExtent([geoZoomToScale(0.5), geoZoomToScale(24)]).on("start", zoomStarted).on("zoom", zoomed).on("end", zoomEnded);
      var wrap2 = select_default2(null);
      var tiles = select_default2(null);
      var viewport = select_default2(null);
      var _isTransformed = false;
      var _isHidden = true;
      var _skipEvents = false;
      var _gesture = null;
      var _zDiff = 6;
      var _dMini;
      var _cMini;
      var _tStart;
      var _tCurr;
      var _timeoutID;
      function zoomStarted() {
        if (_skipEvents)
          return;
        _tStart = _tCurr = projection2.transform();
        _gesture = null;
      }
      function zoomed(d3_event) {
        if (_skipEvents)
          return;
        var x2 = d3_event.transform.x;
        var y = d3_event.transform.y;
        var k = d3_event.transform.k;
        var isZooming = k !== _tStart.k;
        var isPanning = x2 !== _tStart.x || y !== _tStart.y;
        if (!isZooming && !isPanning) {
          return;
        }
        if (!_gesture) {
          _gesture = isZooming ? "zoom" : "pan";
        }
        var tMini = projection2.transform();
        var tX, tY, scale2;
        if (_gesture === "zoom") {
          scale2 = k / tMini.k;
          tX = (_cMini[0] / scale2 - _cMini[0]) * scale2;
          tY = (_cMini[1] / scale2 - _cMini[1]) * scale2;
        } else {
          k = tMini.k;
          scale2 = 1;
          tX = x2 - tMini.x;
          tY = y - tMini.y;
        }
        utilSetTransform(tiles, tX, tY, scale2);
        utilSetTransform(viewport, 0, 0, scale2);
        _isTransformed = true;
        _tCurr = identity2.translate(x2, y).scale(k);
        var zMain = geoScaleToZoom(context.projection.scale());
        var zMini = geoScaleToZoom(k);
        _zDiff = zMain - zMini;
        queueRedraw();
      }
      function zoomEnded() {
        if (_skipEvents)
          return;
        if (_gesture !== "pan")
          return;
        updateProjection();
        _gesture = null;
        context.map().center(projection2.invert(_cMini));
      }
      function updateProjection() {
        var loc = context.map().center();
        var tMain = context.projection.transform();
        var zMain = geoScaleToZoom(tMain.k);
        var zMini = Math.max(zMain - _zDiff, 0.5);
        var kMini = geoZoomToScale(zMini);
        projection2.translate([tMain.x, tMain.y]).scale(kMini);
        var point5 = projection2(loc);
        var mouse = _gesture === "pan" ? vecSubtract([_tCurr.x, _tCurr.y], [_tStart.x, _tStart.y]) : [0, 0];
        var xMini = _cMini[0] - point5[0] + tMain.x + mouse[0];
        var yMini = _cMini[1] - point5[1] + tMain.y + mouse[1];
        projection2.translate([xMini, yMini]).clipExtent([[0, 0], _dMini]);
        _tCurr = projection2.transform();
        if (_isTransformed) {
          utilSetTransform(tiles, 0, 0);
          utilSetTransform(viewport, 0, 0);
          _isTransformed = false;
        }
        zoom.scaleExtent([geoZoomToScale(0.5), geoZoomToScale(zMain - 3)]);
        _skipEvents = true;
        wrap2.call(zoom.transform, _tCurr);
        _skipEvents = false;
      }
      function redraw() {
        clearTimeout(_timeoutID);
        if (_isHidden)
          return;
        updateProjection();
        var zMini = geoScaleToZoom(projection2.scale());
        tiles = wrap2.selectAll(".map-in-map-tiles").data([0]);
        tiles = tiles.enter().append("div").attr("class", "map-in-map-tiles").merge(tiles);
        backgroundLayer.source(context.background().baseLayerSource()).projection(projection2).dimensions(_dMini);
        var background = tiles.selectAll(".map-in-map-background").data([0]);
        background.enter().append("div").attr("class", "map-in-map-background").merge(background).call(backgroundLayer);
        var overlaySources = context.background().overlayLayerSources();
        var activeOverlayLayers = [];
        for (var i2 = 0; i2 < overlaySources.length; i2++) {
          if (overlaySources[i2].validZoom(zMini)) {
            if (!overlayLayers[i2])
              overlayLayers[i2] = rendererTileLayer(context);
            activeOverlayLayers.push(overlayLayers[i2].source(overlaySources[i2]).projection(projection2).dimensions(_dMini));
          }
        }
        var overlay = tiles.selectAll(".map-in-map-overlay").data([0]);
        overlay = overlay.enter().append("div").attr("class", "map-in-map-overlay").merge(overlay);
        var overlays = overlay.selectAll("div").data(activeOverlayLayers, function(d) {
          return d.source().name();
        });
        overlays.exit().remove();
        overlays = overlays.enter().append("div").merge(overlays).each(function(layer2) {
          select_default2(this).call(layer2);
        });
        var dataLayers = tiles.selectAll(".map-in-map-data").data([0]);
        dataLayers.exit().remove();
        dataLayers = dataLayers.enter().append("svg").attr("class", "map-in-map-data").merge(dataLayers).call(dataLayer).call(debugLayer);
        if (_gesture !== "pan") {
          var getPath = path_default(projection2);
          var bbox = {
            type: "Polygon",
            coordinates: [context.map().extent().polygon()]
          };
          viewport = wrap2.selectAll(".map-in-map-viewport").data([0]);
          viewport = viewport.enter().append("svg").attr("class", "map-in-map-viewport").merge(viewport);
          var path = viewport.selectAll(".map-in-map-bbox").data([bbox]);
          path.enter().append("path").attr("class", "map-in-map-bbox").merge(path).attr("d", getPath).classed("thick", function(d) {
            return getPath.area(d) < 30;
          });
        }
      }
      function queueRedraw() {
        clearTimeout(_timeoutID);
        _timeoutID = setTimeout(function() {
          redraw();
        }, 750);
      }
      function toggle4(d3_event) {
        if (d3_event)
          d3_event.preventDefault();
        _isHidden = !_isHidden;
        context.container().select(".minimap-toggle-item").classed("active", !_isHidden).select("input").property("checked", !_isHidden);
        if (_isHidden) {
          wrap2.style("display", "block").style("opacity", "1").transition().duration(200).style("opacity", "0").on("end", function() {
            selection2.selectAll(".map-in-map").style("display", "none");
          });
        } else {
          wrap2.style("display", "block").style("opacity", "0").transition().duration(200).style("opacity", "1").on("end", function() {
            redraw();
          });
        }
      }
      uiMapInMap.toggle = toggle4;
      wrap2 = selection2.selectAll(".map-in-map").data([0]);
      wrap2 = wrap2.enter().append("div").attr("class", "map-in-map").style("display", _isHidden ? "none" : "block").call(zoom).on("dblclick.zoom", null).merge(wrap2);
      _dMini = [200, 150];
      _cMini = vecScale(_dMini, 0.5);
      context.map().on("drawn.map-in-map", function(drawn) {
        if (drawn.full === true) {
          redraw();
        }
      });
      redraw();
      context.keybinding().on(_t("background.minimap.key"), toggle4);
    }
    return mapInMap;
  }

  // modules/ui/notice.js
  function uiNotice(context) {
    return function(selection2) {
      var div = selection2.append("div").attr("class", "notice");
      var button = div.append("button").attr("class", "zoom-to notice fillD").on("click", function() {
        context.map().zoomEase(context.minEditableZoom());
      }).on("wheel", function(d3_event) {
        var e22 = new WheelEvent(d3_event.type, d3_event);
        context.surface().node().dispatchEvent(e22);
      });
      button.call(svgIcon("#iD-icon-plus", "pre-text")).append("span").attr("class", "label").html(_t.html("zoom_in_edit"));
      function disableTooHigh() {
        var canEdit = context.map().zoom() >= context.minEditableZoom();
        div.style("display", canEdit ? "none" : "block");
      }
      context.map().on("move.notice", debounce_default(disableTooHigh, 500));
      disableTooHigh();
    };
  }

  // modules/ui/restore.js
  function uiRestore(context) {
    return function(selection2) {
      if (!context.history().hasRestorableChanges())
        return;
      var modalSelection = uiModal(selection2, true);
      modalSelection.select(".modal").attr("class", "modal fillL");
      var introModal = modalSelection.select(".content");
      introModal.append("div").attr("class", "modal-section").append("h3").html(_t.html("restore.heading"));
      introModal.append("div").attr("class", "modal-section").append("p").html(_t.html("restore.description"));
      var buttonWrap = introModal.append("div").attr("class", "modal-actions");
      var restore = buttonWrap.append("button").attr("class", "restore").on("click", function() {
        context.history().restore();
        modalSelection.remove();
      });
      restore.append("svg").attr("class", "logo logo-restore").append("use").attr("xlink:href", "#iD-logo-restore");
      restore.append("div").html(_t.html("restore.restore"));
      var reset17 = buttonWrap.append("button").attr("class", "reset").on("click", function() {
        context.history().clearSaved();
        modalSelection.remove();
      });
      reset17.append("svg").attr("class", "logo logo-reset").append("use").attr("xlink:href", "#iD-logo-reset");
      reset17.append("div").html(_t.html("restore.reset"));
      restore.node().focus();
    };
  }

  // modules/ui/scale.js
  function uiScale(context) {
    var projection2 = context.projection, isImperial = !_mainLocalizer.usesMetric(), maxLength = 180, tickHeight = 8;
    function scaleDefs(loc1, loc2) {
      var lat = (loc2[1] + loc1[1]) / 2, conversion = isImperial ? 3.28084 : 1, dist = geoLonToMeters(loc2[0] - loc1[0], lat) * conversion, scale2 = {
        dist: 0,
        px: 0,
        text: ""
      }, buckets, i2, val, dLon;
      if (isImperial) {
        buckets = [528e4, 528e3, 52800, 5280, 500, 50, 5, 1];
      } else {
        buckets = [5e6, 5e5, 5e4, 5e3, 500, 50, 5, 1];
      }
      for (i2 = 0; i2 < buckets.length; i2++) {
        val = buckets[i2];
        if (dist >= val) {
          scale2.dist = Math.floor(dist / val) * val;
          break;
        } else {
          scale2.dist = +dist.toFixed(2);
        }
      }
      dLon = geoMetersToLon(scale2.dist / conversion, lat);
      scale2.px = Math.round(projection2([loc1[0] + dLon, loc1[1]])[0]);
      scale2.text = displayLength(scale2.dist / conversion, isImperial);
      return scale2;
    }
    function update4(selection2) {
      var dims = context.map().dimensions(), loc1 = projection2.invert([0, dims[1]]), loc2 = projection2.invert([maxLength, dims[1]]), scale2 = scaleDefs(loc1, loc2);
      selection2.select(".scale-path").attr("d", "M0.5,0.5v" + tickHeight + "h" + scale2.px + "v-" + tickHeight);
      selection2.select(".scale-text").style(_mainLocalizer.textDirection() === "ltr" ? "left" : "right", scale2.px + 16 + "px").html(scale2.text);
    }
    return function(selection2) {
      function switchUnits() {
        isImperial = !isImperial;
        selection2.call(update4);
      }
      var scalegroup = selection2.append("svg").attr("class", "scale").on("click", switchUnits).append("g").attr("transform", "translate(10,11)");
      scalegroup.append("path").attr("class", "scale-path");
      selection2.append("div").attr("class", "scale-text");
      selection2.call(update4);
      context.map().on("move.scale", function() {
        update4(selection2);
      });
    };
  }

  // modules/ui/rapid_feature_inspector.js
  init_slicedToArray();
  var MAP = {
    n: "node",
    r: "relation",
    w: "way"
  };
  function uiRapidFeatureInspector(context, keybinding) {
    var rapidContext = context.rapidContext();
    var ACCEPT_FEATURES_LIMIT = Infinity;
    var _datum;
    function isAddFeatureDisabled() {
      var gpxInUrl = context.initialHashParams.hasOwnProperty("gpx");
      if (gpxInUrl)
        return false;
      var annotations = context.history().peekAllAnnotations();
      var aiFeatureAccepts = annotations.filter(function(a) {
        return a.type === "rapid_accept_feature";
      });
      return aiFeatureAccepts.length >= ACCEPT_FEATURES_LIMIT;
    }
    function addCheckDate(osmId2) {
      var graph3 = context.graph();
      if (!graph3.hasEntity(osmId2)) {
        context.ui().flash.iconName("#iD-icon-no").label("Looks like this node has not loaded yet or has been deleted")();
        return;
      }
      var osmFeature = graph3.entity(osmId2);
      context.perform(actionChangeTags(osmFeature.id, Object.assign({
        check_date: new Date().toISOString().split("T")[0]
      }, osmFeature.tags)), _t("operations.change_tags.annotation"));
    }
    function deleteAddr(osmId2) {
      var graph3 = context.graph();
      if (!graph3.hasEntity(osmId2)) {
        context.ui().flash.iconName("#iD-icon-no").label("Looks like this node hasn't downloaded yet, or has already been deleted")();
        return false;
      }
      context.perform(actionDeleteNode(osmId2), _t("operations.delete.annotation.point"));
      return true;
    }
    function editAddr(osmId2, _tags) {
      var tags = Object.assign({}, _tags);
      var graph3 = context.graph();
      if (!graph3.hasEntity(osmId2)) {
        context.ui().flash.iconName("#iD-icon-no").label("Looks like this node hasn't downloaded yet")();
        return false;
      }
      var osmFeature = graph3.entity(osmId2);
      var newTags = Object.assign({}, osmFeature.tags, tags);
      for (var k in newTags) {
        if (newTags[k] === "\uD83D\uDDD1\uFE0F")
          delete newTags[k];
      }
      delete newTags.__action;
      context.perform(actionChangeTags(osmFeature.id, newTags), _t("operations.change_tags.annotation"));
      return true;
    }
    function onAcceptFeature() {
      if (!_datum)
        return;
      var _datum$__featureid__$ = _datum.__featureid__.split("-"), _datum$__featureid__$2 = _slicedToArray(_datum$__featureid__$, 2), osmAction = _datum$__featureid__$2[0], osmId2 = _datum$__featureid__$2[1];
      if (osmAction === "create") {
      } else if (osmAction === "move") {
        var rapidGraph = services.esriData.graph(_datum.__datasetid__);
        var fromLoc = rapidGraph.entity(_datum.nodes[0]).loc;
        var toLoc = rapidGraph.entity(_datum.nodes[1]).loc;
        var realOsmNode = context.graph().entity(osmId2);
        var ok = window.__moveNodeHook(realOsmNode, fromLoc, toLoc);
        if (ok)
          return onIgnoreFeature(true);
        else
          return;
      } else if (osmAction === "edit") {
        var _ok = editAddr(osmId2, _datum.tags);
        if (_ok)
          return onIgnoreFeature(true);
        else
          return;
      } else if (osmAction === "delete") {
        var _ok2 = deleteAddr(osmId2);
        if (_ok2)
          return onIgnoreFeature(true);
        else
          return;
      } else {
        console.error("Invalid osmAction", osmAction);
        return;
      }
      if (isAddFeatureDisabled()) {
        var flash = uiFlash(context).duration(5e3).label(_t("rapid_feature_inspector.option_accept.disabled_flash", {
          n: ACCEPT_FEATURES_LIMIT
        }));
        flash();
        return;
      }
      var annotation = {
        type: "rapid_accept_feature",
        description: _t("rapid_feature_inspector.option_accept.annotation"),
        id: _datum.id,
        origid: _datum.__origid__
      };
      var service = _datum.__service__ === "esri" ? services.esriData : services.fbMLRoads;
      var graph3 = service.graph(_datum.__datasetid__);
      context.perform(actionRapidAcceptFeature(_datum.id, graph3), annotation);
      context.enter(modeSelect(context, [_datum.id]));
      if (context.inIntro())
        return;
      var source = _datum.tags && _datum.tags.source;
      if (source) {
        rapidContext.sources.add(source);
      }
      window._dsState[_datum.__datasetid__][_datum.__featureid__] = "done";
      if (window.sessionStorage.getItem("acknowledgedLogin") === "true")
        return;
      window.sessionStorage.setItem("acknowledgedLogin", "true");
    }
    function onIgnoreFeature(fromAccept) {
      if (!_datum)
        return;
      var _datum$__featureid__$3 = _datum.__featureid__.split("-"), _datum$__featureid__$4 = _slicedToArray(_datum$__featureid__$3, 2), osmAction = _datum$__featureid__$4[0], osmId2 = _datum$__featureid__$4[1];
      var annotation = {
        type: "rapid_ignore_feature",
        description: _t("rapid_feature_inspector.option_ignore.annotation"),
        id: _datum.id,
        origid: _datum.__origid__
      };
      context.perform(actionNoop(), annotation);
      context.enter(modeBrowse(context));
      window._dsState[_datum.__datasetid__][_datum.__featureid__] = "done";
      if (fromAccept === true)
        return;
      if (osmAction === "create") {
        fetch(window.APIROOT + "/__ignoreFeature?" + new URLSearchParams({
          reportedBy: (window.__user || {}).display_name,
          id: "t".concat(osmId2),
          sector: _datum.__datasetid__
        }).toString());
        return;
      } else {
        addCheckDate(osmId2);
      }
    }
    function getBrightness(color2) {
      var short = color2.length < 6;
      var r = parseInt(short ? color2[1] + color2[1] : color2[1] + color2[2], 16);
      var g2 = parseInt(short ? color2[2] + color2[2] : color2[3] + color2[4], 16);
      var b2 = parseInt(short ? color2[3] + color2[3] : color2[5] + color2[6], 16);
      return (r * 299 + g2 * 587 + b2 * 114) / 1e3;
    }
    function featureInfo(selection2) {
      if (!_datum)
        return;
      var datasetID = _datum.__datasetid__.replace("-conflated", "");
      var dataset = rapidContext.datasets()[datasetID];
      var color2 = dataset.color;
      var featureInfo2 = selection2.selectAll(".feature-info").data([color2]);
      var featureInfoEnter = featureInfo2.enter().append("div").attr("class", "feature-info");
      featureInfoEnter.append("div").attr("class", "dataset-label").text(dataset.label || dataset.id);
      if (dataset.beta) {
        featureInfoEnter.append("div").attr("class", "dataset-beta beta").attr("title", _t("rapid_poweruser_features.beta"));
      }
      featureInfo2 = featureInfo2.merge(featureInfoEnter).style("background", function(d) {
        return d;
      }).style("color", function(d) {
        return getBrightness(d) > 140.5 ? "#333" : "#fff";
      });
    }
    function tagInfo(selection2) {
      var tags = _datum && _datum.tags;
      if (!tags)
        return;
      var tagInfoEnter = selection2.selectAll(".tag-info").data([0]).enter().append("div").attr("class", "tag-info");
      var tagBagEnter = tagInfoEnter.append("div").attr("class", "tag-bag");
      tagBagEnter.append("div").attr("class", "tag-heading").text(_t("rapid_feature_inspector.tags"));
      var tagEntries = Object.keys(tags).map(function(k) {
        return {
          key: k,
          value: tags[k]
        };
      }).filter(function(kv) {
        return kv.key !== "__action";
      });
      tagEntries.forEach(function(e3) {
        var entryDiv = tagBagEnter.append("div").attr("class", "tag-entry");
        entryDiv.append("div").attr("class", "tag-key").text(e3.key);
        entryDiv.append("div").attr("class", "tag-value").text(e3.value);
      });
    }
    function rapidInspector(selection2) {
      var inspector = selection2.selectAll(".rapid-inspector").data([0]);
      var inspectorEnter = inspector.enter().append("div").attr("class", "rapid-inspector");
      inspector = inspector.merge(inspectorEnter);
      var headerEnter = inspector.selectAll(".header").data([0]).enter().append("div").attr("class", "header");
      headerEnter.append("h3").append("svg").attr("class", "logo-rapid").append("use").attr("xlink:href", "#iD-logo-rapid");
      headerEnter.append("button").attr("class", "fr rapid-inspector-close").on("click", function() {
        context.enter(modeBrowse(context));
      }).call(svgIcon("#iD-icon-close"));
      var body = inspector.selectAll(".body").data([0]);
      var bodyEnter = body.enter().append("div").attr("class", "body");
      body = body.merge(bodyEnter).call(featureInfo).call(tagInfo);
      var action = _datum && _datum.tags && _datum.tags.__action || "create";
      var recentlyEditted = false;
      try {
        if (action === "edit") {
          var id2 = _datum.__featureid__.split("-")[1];
          if (context.graph().hasEntity(id2)) {
            var entity2 = context.graph().entity(id2);
            var daysAgo = (new Date() - new Date(entity2.timestamp)) / 1e3 / 60 / 60 / 24;
            if (daysAgo < 30) {
              recentlyEditted = [entity2, daysAgo];
            }
          }
        }
      } catch (ex) {
        console.error(ex);
      }
      var acceptMessages = {
        move: "Move this address",
        create: _t("rapid_feature_inspector.option_accept.label"),
        edit: "Edit this address",
        delete: "Delete this address"
      };
      var acceptDescriptions = {
        move: "Move the existing node to the new proposed location",
        create: _t("rapid_feature_inspector.option_accept.description"),
        edit: "Update the tags on this node with the suggested changes",
        delete: "Remove this node from OSM"
      };
      var ignoreMessages = {
        move: "Do not move",
        create: _t("rapid_feature_inspector.option_ignore.label"),
        edit: "Do not edit",
        delete: "Do not delete"
      };
      var mainMessages = {
        move: "\u2728 This node is in the wrong location! Do you want to move it?",
        delete: "\uD83D\uDDD1\uFE0F This node has been deleted by LINZ! Do you want to delete it from OSM?",
        edit: "\uD83D\uDD22 Some tags need changing on the address under this diamond!",
        create: _t("rapid_feature_inspector.prompt")
      };
      var headerMessages = {
        move: "Move",
        delete: "Delete",
        edit: "Edit",
        create: "Create"
      };
      var choiceData = [{
        key: "accept",
        iconName: "#iD-icon-rapid-plus-circle",
        label: acceptMessages[action],
        description: acceptDescriptions[action],
        onClick: onAcceptFeature,
        flag: !!recentlyEditted,
        isDelete: action === "action"
      }, {
        key: "ignore",
        iconName: "#iD-icon-rapid-minus-circle",
        label: ignoreMessages[action],
        description: _t("rapid_feature_inspector.option_ignore.description"),
        onClick: onIgnoreFeature
      }];
      var choices = body.selectAll(".rapid-inspector-choices").data([0]);
      var choicesEnter = choices.enter().append("div").attr("class", "rapid-inspector-choices");
      choicesEnter.append("h3").text(headerMessages[action]);
      choicesEnter.append("p").text(mainMessages[action]);
      if (recentlyEditted) {
        var osmUrl = "https://openstreetmap.org/".concat(MAP[recentlyEditted[0].id[0]], "/").concat(recentlyEditted[0].id.slice(1));
        choicesEnter.append("p").html("Last editted by <strong>".concat(recentlyEditted[0].user, '</strong> <a href="').concat(osmUrl, '" target="_blank">').concat(Math.round(recentlyEditted[1]), " days ago</a>"));
      }
      choicesEnter.selectAll(".rapid-inspector-choice").data(choiceData, function(d) {
        return d.key;
      }).enter().append("div").attr("class", function(d) {
        return "rapid-inspector-choice rapid-inspector-choice-".concat(d.key);
      }).each(showChoice);
    }
    function showChoice(d, i2, nodes) {
      var selection2 = select_default2(nodes[i2]);
      var disableClass = d.key === "accept" && isAddFeatureDisabled() ? "secondary disabled" : "";
      var choiceWrap = selection2.append("div").attr("class", "choice-wrap choice-wrap-".concat(d.key));
      var choiceReference = selection2.append("div").attr("class", "tag-reference-body");
      choiceReference.text(d.description);
      var onClick = d.onClick;
      var choiceButton = choiceWrap.append("button").attr("class", "choice-button choice-button-".concat(d.key, " ").concat(disableClass, " ").concat(d.isDelete ? "del-btn" : "", " ").concat(d.flag ? "flag-btn" : "")).on("click", onClick);
      var title, keys3;
      if (d.key === "accept") {
        if (isAddFeatureDisabled()) {
          title = _t("rapid_feature_inspector.option_accept.disabled", {
            n: ACCEPT_FEATURES_LIMIT
          });
          keys3 = [];
        } else {
          title = _t("rapid_feature_inspector.option_accept.tooltip");
          keys3 = [_t("rapid_feature_inspector.option_accept.key")];
        }
      } else if (d.key === "ignore") {
        title = _t("rapid_feature_inspector.option_ignore.tooltip");
        keys3 = [_t("rapid_feature_inspector.option_ignore.key")];
      }
      if (title && keys3) {
        choiceButton = choiceButton.call(uiTooltip().placement("bottom").title(title).keys(keys3));
      }
      choiceButton.append("svg").attr("class", "choice-icon icon").append("use").attr("xlink:href", d.iconName);
      choiceButton.append("div").attr("class", "choice-label").text(d.label);
      choiceWrap.append("button").attr("class", "tag-reference-button ".concat(disableClass)).attr("title", "info").attr("tabindex", "-1").on("click", function() {
        choiceReference.classed("expanded", !choiceReference.classed("expanded"));
      }).call(svgIcon("#iD-icon-inspect"));
    }
    rapidInspector.datum = function(val) {
      if (!arguments.length)
        return _datum;
      _datum = val;
      return this;
    };
    if (keybinding) {
      keybinding().on(_t("rapid_feature_inspector.option_accept.key"), onAcceptFeature).on(_t("rapid_feature_inspector.option_ignore.key"), onIgnoreFeature);
    }
    return rapidInspector;
  }

  // modules/ui/sidebar.js
  function uiSidebar(context) {
    var inspector = uiInspector(context);
    var rapidInspector = uiRapidFeatureInspector(context);
    var dataEditor = uiDataEditor(context);
    var noteEditor = uiNoteEditor(context);
    var improveOsmEditor = uiImproveOsmEditor(context);
    var keepRightEditor = uiKeepRightEditor(context);
    var osmoseEditor = uiOsmoseEditor(context);
    var _current;
    var _wasRapiD = false;
    var _wasData = false;
    var _wasNote = false;
    var _wasQaItem = false;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function sidebar(selection2) {
      var container = context.container();
      var minWidth = 240;
      var sidebarWidth;
      var containerWidth;
      var dragOffset;
      selection2.style("min-width", minWidth + "px").style("max-width", "400px").style("width", "33.3333%");
      var resizer = selection2.append("div").attr("class", "sidebar-resizer").on(_pointerPrefix + "down.sidebar-resizer", pointerdown);
      var downPointerId, lastClientX, containerLocGetter;
      function pointerdown(d3_event) {
        if (downPointerId)
          return;
        if ("button" in d3_event && d3_event.button !== 0)
          return;
        downPointerId = d3_event.pointerId || "mouse";
        lastClientX = d3_event.clientX;
        containerLocGetter = utilFastMouse(container.node());
        dragOffset = utilFastMouse(resizer.node())(d3_event)[0] - 1;
        sidebarWidth = selection2.node().getBoundingClientRect().width;
        containerWidth = container.node().getBoundingClientRect().width;
        var widthPct = sidebarWidth / containerWidth * 100;
        selection2.style("width", widthPct + "%").style("max-width", "85%");
        resizer.classed("dragging", true);
        select_default2(window).on("touchmove.sidebar-resizer", function(d3_event2) {
          d3_event2.preventDefault();
        }, {
          passive: false
        }).on(_pointerPrefix + "move.sidebar-resizer", pointermove).on(_pointerPrefix + "up.sidebar-resizer pointercancel.sidebar-resizer", pointerup);
      }
      function pointermove(d3_event) {
        if (downPointerId !== (d3_event.pointerId || "mouse"))
          return;
        d3_event.preventDefault();
        var dx = d3_event.clientX - lastClientX;
        lastClientX = d3_event.clientX;
        var isRTL = _mainLocalizer.textDirection() === "rtl";
        var scaleX = isRTL ? 0 : 1;
        var xMarginProperty = isRTL ? "margin-right" : "margin-left";
        var x2 = containerLocGetter(d3_event)[0] - dragOffset;
        sidebarWidth = isRTL ? containerWidth - x2 : x2;
        var isCollapsed = selection2.classed("collapsed");
        var shouldCollapse = sidebarWidth < minWidth;
        selection2.classed("collapsed", shouldCollapse);
        if (shouldCollapse) {
          if (!isCollapsed) {
            selection2.style(xMarginProperty, "-400px").style("width", "400px");
            context.ui().onResize([(sidebarWidth - dx) * scaleX, 0]);
          }
        } else {
          var widthPct = sidebarWidth / containerWidth * 100;
          selection2.style(xMarginProperty, null).style("width", widthPct + "%");
          if (isCollapsed) {
            context.ui().onResize([-sidebarWidth * scaleX, 0]);
          } else {
            context.ui().onResize([-dx * scaleX, 0]);
          }
        }
      }
      function pointerup(d3_event) {
        if (downPointerId !== (d3_event.pointerId || "mouse"))
          return;
        downPointerId = null;
        resizer.classed("dragging", false);
        select_default2(window).on("touchmove.sidebar-resizer", null).on(_pointerPrefix + "move.sidebar-resizer", null).on(_pointerPrefix + "up.sidebar-resizer pointercancel.sidebar-resizer", null);
      }
      var featureListWrap = selection2.append("div").attr("class", "feature-list-pane").call(uiFeatureList(context));
      var inspectorWrap = selection2.append("div").attr("class", "inspector-hidden inspector-wrap");
      var hoverModeSelect = function hoverModeSelect2(targets) {
        context.container().selectAll(".feature-list-item button").classed("hover", false);
        if (context.selectedIDs().length > 1 && targets && targets.length) {
          var elements = context.container().selectAll(".feature-list-item button").filter(function(node) {
            return targets.indexOf(node) !== -1;
          });
          if (!elements.empty()) {
            elements.classed("hover", true);
          }
        }
      };
      sidebar.hoverModeSelect = throttle_default(hoverModeSelect, 200);
      function hover(targets) {
        var datum2 = targets && targets.length && targets[0];
        if (datum2 && datum2.__featurehash__) {
          _wasData = true;
          sidebar.show(dataEditor.datum(datum2));
          selection2.selectAll(".sidebar-component").classed("inspector-hover", true);
        } else if (datum2 && datum2.__fbid__) {
          _wasRapiD = true;
          sidebar.show(rapidInspector.datum(datum2));
          selection2.selectAll(".sidebar-component").classed("inspector-hover", true).classed("rapid-inspector-fadein", true);
        } else if (datum2 instanceof osmNote) {
          if (context.mode().id === "drag-note")
            return;
          _wasNote = true;
          var osm = services.osm;
          if (osm) {
            datum2 = osm.getNote(datum2.id);
          }
          sidebar.show(noteEditor.note(datum2));
          selection2.selectAll(".sidebar-component").classed("inspector-hover", true);
        } else if (datum2 instanceof QAItem) {
          _wasQaItem = true;
          var errService = services[datum2.service];
          if (errService) {
            datum2 = errService.getError(datum2.id);
          }
          var errEditor;
          if (datum2.service === "keepRight") {
            errEditor = keepRightEditor;
          } else if (datum2.service === "osmose") {
            errEditor = osmoseEditor;
          } else {
            errEditor = improveOsmEditor;
          }
          context.container().selectAll(".qaItem." + datum2.service).classed("hover", function(d) {
            return d.id === datum2.id;
          });
          sidebar.show(errEditor.error(datum2));
          selection2.selectAll(".sidebar-component").classed("inspector-hover", true);
        } else if (!_current && datum2 instanceof osmEntity) {
          featureListWrap.classed("inspector-hidden", true);
          inspectorWrap.classed("inspector-hidden", false).classed("inspector-hover", true);
          if (!inspector.entityIDs() || !utilArrayIdentical(inspector.entityIDs(), [datum2.id]) || inspector.state() !== "hover") {
            inspector.state("hover").entityIDs([datum2.id]).newFeature(false);
            inspectorWrap.call(inspector);
          }
        } else if (!_current) {
          featureListWrap.classed("inspector-hidden", false);
          inspectorWrap.classed("inspector-hidden", true);
          inspector.state("hide");
        } else if (_wasRapiD || _wasData || _wasNote || _wasQaItem) {
          _wasRapiD = false;
          _wasNote = false;
          _wasData = false;
          _wasQaItem = false;
          context.container().selectAll(".layer-ai-features .hover").classed("hover", false);
          context.container().selectAll(".note").classed("hover", false);
          context.container().selectAll(".qaItem").classed("hover", false);
          sidebar.hide();
        }
      }
      sidebar.hover = throttle_default(hover, 200);
      sidebar.intersects = function(wgs84Extent) {
        var rect = selection2.node().getBoundingClientRect();
        return wgs84Extent.intersects(new Extent(context.projection.invert([0, rect.height]), context.projection.invert([rect.width, 0])));
      };
      sidebar.select = function(ids, newFeature) {
        sidebar.hide();
        if (ids && ids.length) {
          var entity2 = ids.length === 1 && context.entity(ids[0]);
          if (entity2 && newFeature && selection2.classed("collapsed")) {
            var extent6 = entity2.extent(context.graph());
            sidebar.expand(sidebar.intersects(extent6));
          }
          featureListWrap.classed("inspector-hidden", true);
          inspectorWrap.classed("inspector-hidden", false).classed("inspector-hover", false);
          inspector.state("select").entityIDs(ids).newFeature(newFeature);
          inspectorWrap.call(inspector);
        } else {
          inspector.state("hide");
        }
      };
      sidebar.showPresetList = function() {
        inspector.showList();
      };
      sidebar.show = function(component, element) {
        featureListWrap.classed("inspector-hidden", true);
        inspectorWrap.classed("inspector-hidden", true);
        if (_current)
          _current.remove();
        _current = selection2.append("div").attr("class", "sidebar-component").call(component, element);
      };
      sidebar.hide = function() {
        featureListWrap.classed("inspector-hidden", false);
        inspectorWrap.classed("inspector-hidden", true);
        if (_current)
          _current.remove();
        _current = null;
      };
      sidebar.expand = function(moveMap) {
        if (selection2.classed("collapsed")) {
          sidebar.toggle(moveMap);
        }
      };
      sidebar.collapse = function(moveMap) {
        if (!selection2.classed("collapsed")) {
          sidebar.toggle(moveMap);
        }
      };
      sidebar.toggle = function(moveMap) {
        if (context.inIntro())
          return;
        var isCollapsed = selection2.classed("collapsed");
        var isCollapsing = !isCollapsed;
        var isRTL = _mainLocalizer.textDirection() === "rtl";
        var scaleX = isRTL ? 0 : 1;
        var xMarginProperty = isRTL ? "margin-right" : "margin-left";
        sidebarWidth = selection2.node().getBoundingClientRect().width;
        selection2.style("width", sidebarWidth + "px");
        var startMargin, endMargin, lastMargin;
        if (isCollapsing) {
          startMargin = lastMargin = 0;
          endMargin = -sidebarWidth;
        } else {
          startMargin = lastMargin = -sidebarWidth;
          endMargin = 0;
        }
        if (!isCollapsing) {
          selection2.classed("collapsed", isCollapsing);
        }
        selection2.transition().style(xMarginProperty, endMargin + "px").tween("panner", function() {
          var i2 = number_default(startMargin, endMargin);
          return function(t) {
            var dx = lastMargin - Math.round(i2(t));
            lastMargin = lastMargin - dx;
            context.ui().onResize(moveMap ? void 0 : [dx * scaleX, 0]);
          };
        }).on("end", function() {
          if (isCollapsing) {
            selection2.classed("collapsed", isCollapsing);
          }
          if (!isCollapsing) {
            var containerWidth2 = container.node().getBoundingClientRect().width;
            var widthPct = sidebarWidth / containerWidth2 * 100;
            selection2.style(xMarginProperty, null).style("width", widthPct + "%");
          }
        });
      };
      resizer.on("dblclick", function(d3_event) {
        d3_event.preventDefault();
        if (d3_event.sourceEvent) {
          d3_event.sourceEvent.preventDefault();
        }
        sidebar.toggle();
      });
      context.map().on("crossEditableZoom.sidebar", function(within) {
        if (!within && !selection2.select(".inspector-hover").empty()) {
          hover([]);
        }
      });
    }
    sidebar.showPresetList = function() {
    };
    sidebar.hover = function() {
    };
    sidebar.hover.cancel = function() {
    };
    sidebar.intersects = function() {
    };
    sidebar.select = function() {
    };
    sidebar.show = function() {
    };
    sidebar.hide = function() {
    };
    sidebar.expand = function() {
    };
    sidebar.collapse = function() {
    };
    sidebar.toggle = function() {
    };
    return sidebar;
  }

  // modules/ui/source_switch.js
  function uiSourceSwitch(context) {
    var keys3;
    function click(d3_event) {
      d3_event.preventDefault();
      var osm = context.connection();
      if (!osm)
        return;
      if (context.inIntro())
        return;
      if (context.history().hasChanges() && !window.confirm(_t("source_switch.lose_changes")))
        return;
      var isLive = select_default2(this).classed("live");
      isLive = !isLive;
      context.enter(modeBrowse(context));
      context.history().clearSaved();
      context.flush();
      select_default2(this).html(isLive ? _t.html("source_switch.live") : _t.html("source_switch.dev")).classed("live", isLive).classed("chip", isLive);
      osm.switch(isLive ? keys3[0] : keys3[1]);
    }
    var sourceSwitch = function sourceSwitch2(selection2) {
      selection2.append("a").attr("href", "#").html(_t.html("source_switch.live")).attr("class", "live chip").on("click", click);
    };
    sourceSwitch.keys = function(_2) {
      if (!arguments.length)
        return keys3;
      keys3 = _2;
      return sourceSwitch;
    };
    return sourceSwitch;
  }

  // modules/ui/spinner.js
  function uiSpinner(context) {
    var osm = context.connection();
    return function(selection2) {
      var img = selection2.append("img").attr("src", context.imagePath("loader-black.gif")).style("opacity", 0);
      if (osm) {
        osm.on("loading.spinner", function() {
          img.transition().style("opacity", 1);
        }).on("loaded.spinner", function() {
          img.transition().style("opacity", 0);
        });
      }
    };
  }

  // modules/ui/intro/welcome.js
  function uiIntroWelcome(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var chapter = {
      title: "intro.welcome.title"
    };
    function welcome() {
      context.map().centerZoom([-85.63591, 41.94285], 19);
      reveal(".intro-nav-wrap .chapter-welcome", helpHtml("intro.welcome.welcome"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: practice
      });
    }
    function practice() {
      reveal(".intro-nav-wrap .chapter-welcome", helpHtml("intro.welcome.practice"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: words
      });
    }
    function words() {
      reveal(".intro-nav-wrap .chapter-welcome", helpHtml("intro.welcome.words"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: chapters
      });
    }
    function chapters() {
      dispatch12.call("done");
      reveal(".intro-nav-wrap .chapter-navigation", helpHtml("intro.welcome.chapters", {
        next: _t("intro.navigation.title")
      }));
    }
    chapter.enter = function() {
      welcome();
    };
    chapter.exit = function() {
      context.container().select(".curtain-tooltip.intro-mouse").selectAll(".counter").remove();
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/navigation.js
  function uiIntroNavigation(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var timeouts = [];
    var hallId = "n2061";
    var townHall = [-85.63591, 41.94285];
    var springStreetId = "w397";
    var springStreetEndId = "n1834";
    var springStreet = [-85.63582, 41.94255];
    var onewayField = _mainPresetIndex.field("oneway");
    var maxspeedField = _mainPresetIndex.field("maxspeed");
    var chapter = {
      title: "intro.navigation.title"
    };
    function timeout2(f2, t) {
      timeouts.push(window.setTimeout(f2, t));
    }
    function eventCancel(d3_event) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
    }
    function isTownHallSelected() {
      var ids = context.selectedIDs();
      return ids.length === 1 && ids[0] === hallId;
    }
    function dragMap() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      var msec = transitionTime(townHall, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(townHall, 19, msec);
      timeout2(function() {
        var centerStart = context.map().center();
        var textId = context.lastPointerType() === "mouse" ? "drag" : "drag_touch";
        var dragString = helpHtml("intro.navigation.map_info") + "{br}" + helpHtml("intro.navigation." + textId);
        reveal(".surface", dragString);
        context.map().on("drawn.intro", function() {
          reveal(".surface", dragString, {
            duration: 0
          });
        });
        context.map().on("move.intro", function() {
          var centerNow = context.map().center();
          if (centerStart[0] !== centerNow[0] || centerStart[1] !== centerNow[1]) {
            context.map().on("move.intro", null);
            timeout2(function() {
              continueTo(zoomMap);
            }, 3e3);
          }
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function zoomMap() {
      var zoomStart = context.map().zoom();
      var textId = context.lastPointerType() === "mouse" ? "zoom" : "zoom_touch";
      var zoomString = helpHtml("intro.navigation." + textId);
      reveal(".surface", zoomString);
      context.map().on("drawn.intro", function() {
        reveal(".surface", zoomString, {
          duration: 0
        });
      });
      context.map().on("move.intro", function() {
        if (context.map().zoom() !== zoomStart) {
          context.map().on("move.intro", null);
          timeout2(function() {
            continueTo(features2);
          }, 3e3);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function features2() {
      var onClick = function onClick2() {
        continueTo(pointsLinesAreas);
      };
      reveal(".surface", helpHtml("intro.navigation.features"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.map().on("drawn.intro", function() {
        reveal(".surface", helpHtml("intro.navigation.features"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: onClick
        });
      });
      function continueTo(nextStep) {
        context.map().on("drawn.intro", null);
        nextStep();
      }
    }
    function pointsLinesAreas() {
      var onClick = function onClick2() {
        continueTo(nodesWays);
      };
      reveal(".surface", helpHtml("intro.navigation.points_lines_areas"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.map().on("drawn.intro", function() {
        reveal(".surface", helpHtml("intro.navigation.points_lines_areas"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: onClick
        });
      });
      function continueTo(nextStep) {
        context.map().on("drawn.intro", null);
        nextStep();
      }
    }
    function nodesWays() {
      var onClick = function onClick2() {
        continueTo(clickTownHall);
      };
      reveal(".surface", helpHtml("intro.navigation.nodes_ways"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.map().on("drawn.intro", function() {
        reveal(".surface", helpHtml("intro.navigation.nodes_ways"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: onClick
        });
      });
      function continueTo(nextStep) {
        context.map().on("drawn.intro", null);
        nextStep();
      }
    }
    function clickTownHall() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      var entity2 = context.hasEntity(hallId);
      if (!entity2)
        return;
      reveal(null, null, {
        duration: 0
      });
      context.map().centerZoomEase(entity2.loc, 19, 500);
      timeout2(function() {
        var entity3 = context.hasEntity(hallId);
        if (!entity3)
          return;
        var box = pointBox(entity3.loc, context);
        var textId = context.lastPointerType() === "mouse" ? "click_townhall" : "tap_townhall";
        reveal(box, helpHtml("intro.navigation." + textId));
        context.map().on("move.intro drawn.intro", function() {
          var entity4 = context.hasEntity(hallId);
          if (!entity4)
            return;
          var box2 = pointBox(entity4.loc, context);
          reveal(box2, helpHtml("intro.navigation." + textId), {
            duration: 0
          });
        });
        context.on("enter.intro", function() {
          if (isTownHallSelected())
            continueTo(selectedTownHall);
        });
      }, 550);
      context.history().on("change.intro", function() {
        if (!context.hasEntity(hallId)) {
          continueTo(clickTownHall);
        }
      });
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function selectedTownHall() {
      if (!isTownHallSelected())
        return clickTownHall();
      var entity2 = context.hasEntity(hallId);
      if (!entity2)
        return clickTownHall();
      var box = pointBox(entity2.loc, context);
      var onClick = function onClick2() {
        continueTo(editorTownHall);
      };
      reveal(box, helpHtml("intro.navigation.selected_townhall"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.map().on("move.intro drawn.intro", function() {
        var entity3 = context.hasEntity(hallId);
        if (!entity3)
          return;
        var box2 = pointBox(entity3.loc, context);
        reveal(box2, helpHtml("intro.navigation.selected_townhall"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: onClick
        });
      });
      context.history().on("change.intro", function() {
        if (!context.hasEntity(hallId)) {
          continueTo(clickTownHall);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function editorTownHall() {
      if (!isTownHallSelected())
        return clickTownHall();
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      var onClick = function onClick2() {
        continueTo(presetTownHall);
      };
      reveal(".entity-editor-pane", helpHtml("intro.navigation.editor_townhall"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.on("exit.intro", function() {
        continueTo(clickTownHall);
      });
      context.history().on("change.intro", function() {
        if (!context.hasEntity(hallId)) {
          continueTo(clickTownHall);
        }
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        nextStep();
      }
    }
    function presetTownHall() {
      if (!isTownHallSelected())
        return clickTownHall();
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      var entity2 = context.entity(context.selectedIDs()[0]);
      var preset = _mainPresetIndex.match(entity2, context.graph());
      var onClick = function onClick2() {
        continueTo(fieldsTownHall);
      };
      reveal(".entity-editor-pane .section-feature-type", helpHtml("intro.navigation.preset_townhall", {
        preset: preset.name()
      }), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.on("exit.intro", function() {
        continueTo(clickTownHall);
      });
      context.history().on("change.intro", function() {
        if (!context.hasEntity(hallId)) {
          continueTo(clickTownHall);
        }
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        nextStep();
      }
    }
    function fieldsTownHall() {
      if (!isTownHallSelected())
        return clickTownHall();
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      var onClick = function onClick2() {
        continueTo(closeTownHall);
      };
      reveal(".entity-editor-pane .section-preset-fields", helpHtml("intro.navigation.fields_townhall"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.on("exit.intro", function() {
        continueTo(clickTownHall);
      });
      context.history().on("change.intro", function() {
        if (!context.hasEntity(hallId)) {
          continueTo(clickTownHall);
        }
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        nextStep();
      }
    }
    function closeTownHall() {
      if (!isTownHallSelected())
        return clickTownHall();
      var selector = ".entity-editor-pane button.close svg use";
      var href = select_default2(selector).attr("href") || "#iD-icon-close";
      reveal(".entity-editor-pane", helpHtml("intro.navigation.close_townhall", {
        button: icon(href, "inline")
      }));
      context.on("exit.intro", function() {
        continueTo(searchStreet);
      });
      context.history().on("change.intro", function() {
        var selector2 = ".entity-editor-pane button.close svg use";
        var href2 = select_default2(selector2).attr("href") || "#iD-icon-close";
        reveal(".entity-editor-pane", helpHtml("intro.navigation.close_townhall", {
          button: icon(href2, "inline")
        }), {
          duration: 0
        });
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function searchStreet() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      var msec = transitionTime(springStreet, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(springStreet, 19, msec);
      timeout2(function() {
        reveal(".search-header input", helpHtml("intro.navigation.search_street", {
          name: _t("intro.graph.name.spring-street")
        }));
        context.container().select(".search-header input").on("keyup.intro", checkSearchResult);
      }, msec + 100);
    }
    function checkSearchResult() {
      var first2 = context.container().select(".feature-list-item:nth-child(0n+2)");
      var firstName = first2.select(".entity-name");
      var name = _t("intro.graph.name.spring-street");
      if (!firstName.empty() && firstName.html() === name) {
        reveal(first2.node(), helpHtml("intro.navigation.choose_street", {
          name: name
        }), {
          duration: 300
        });
        context.on("exit.intro", function() {
          continueTo(selectedStreet);
        });
        context.container().select(".search-header input").on("keydown.intro", eventCancel, true).on("keyup.intro", null);
      }
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.container().select(".search-header input").on("keydown.intro", null).on("keyup.intro", null);
        nextStep();
      }
    }
    function selectedStreet() {
      if (!context.hasEntity(springStreetEndId) || !context.hasEntity(springStreetId)) {
        return searchStreet();
      }
      var onClick = function onClick2() {
        continueTo(editorStreet);
      };
      var entity2 = context.entity(springStreetEndId);
      var box = pointBox(entity2.loc, context);
      box.height = 500;
      reveal(box, helpHtml("intro.navigation.selected_street", {
        name: _t("intro.graph.name.spring-street")
      }), {
        duration: 600,
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      timeout2(function() {
        context.map().on("move.intro drawn.intro", function() {
          var entity3 = context.hasEntity(springStreetEndId);
          if (!entity3)
            return;
          var box2 = pointBox(entity3.loc, context);
          box2.height = 500;
          reveal(box2, helpHtml("intro.navigation.selected_street", {
            name: _t("intro.graph.name.spring-street")
          }), {
            duration: 0,
            buttonText: _t.html("intro.ok"),
            buttonCallback: onClick
          });
        });
      }, 600);
      context.on("enter.intro", function(mode) {
        if (!context.hasEntity(springStreetId)) {
          return continueTo(searchStreet);
        }
        var ids = context.selectedIDs();
        if (mode.id !== "select" || !ids.length || ids[0] !== springStreetId) {
          context.enter(modeSelect(context, [springStreetId]));
        }
      });
      context.history().on("change.intro", function() {
        if (!context.hasEntity(springStreetEndId) || !context.hasEntity(springStreetId)) {
          timeout2(function() {
            continueTo(searchStreet);
          }, 300);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function editorStreet() {
      var selector = ".entity-editor-pane button.close svg use";
      var href = select_default2(selector).attr("href") || "#iD-icon-close";
      reveal(".entity-editor-pane", helpHtml("intro.navigation.street_different_fields") + "{br}" + helpHtml("intro.navigation.editor_street", {
        button: icon(href, "inline"),
        field1: onewayField.label(),
        field2: maxspeedField.label()
      }));
      context.on("exit.intro", function() {
        continueTo(play);
      });
      context.history().on("change.intro", function() {
        var selector2 = ".entity-editor-pane button.close svg use";
        var href2 = select_default2(selector2).attr("href") || "#iD-icon-close";
        reveal(".entity-editor-pane", helpHtml("intro.navigation.street_different_fields") + "{br}" + helpHtml("intro.navigation.editor_street", {
          button: icon(href2, "inline"),
          field1: onewayField.label(),
          field2: maxspeedField.label()
        }), {
          duration: 0
        });
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function play() {
      dispatch12.call("done");
      reveal(".ideditor", helpHtml("intro.navigation.play", {
        next: _t("intro.points.title")
      }), {
        tooltipBox: ".intro-nav-wrap .chapter-point",
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          reveal(".ideditor");
        }
      });
    }
    chapter.enter = function() {
      dragMap();
    };
    chapter.exit = function() {
      timeouts.forEach(window.clearTimeout);
      context.on("enter.intro exit.intro", null);
      context.map().on("move.intro drawn.intro", null);
      context.history().on("change.intro", null);
      context.container().select(".inspector-wrap").on("wheel.intro", null);
      context.container().select(".search-header input").on("keydown.intro keyup.intro", null);
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/point.js
  function uiIntroPoint(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var timeouts = [];
    var intersection = [-85.63279, 41.94394];
    var building = [-85.632422, 41.944045];
    var cafePreset = _mainPresetIndex.item("amenity/cafe");
    var _pointID = null;
    var chapter = {
      title: "intro.points.title"
    };
    function timeout2(f2, t) {
      timeouts.push(window.setTimeout(f2, t));
    }
    function eventCancel(d3_event) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
    }
    function addPoint() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      var msec = transitionTime(intersection, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(intersection, 19, msec);
      timeout2(function() {
        var tooltip = reveal("button.add-point", helpHtml("intro.points.points_info") + "{br}" + helpHtml("intro.points.add_point"));
        _pointID = null;
        tooltip.selectAll(".popover-inner").insert("svg", "span").attr("class", "tooltip-illustration").append("use").attr("xlink:href", "#iD-graphic-points");
        context.on("enter.intro", function(mode) {
          if (mode.id !== "add-point")
            return;
          continueTo(placePoint);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function placePoint() {
      if (context.mode().id !== "add-point") {
        return chapter.restart();
      }
      var pointBox2 = pad(building, 150, context);
      var textId = context.lastPointerType() === "mouse" ? "place_point" : "place_point_touch";
      reveal(pointBox2, helpHtml("intro.points." + textId));
      context.map().on("move.intro drawn.intro", function() {
        pointBox2 = pad(building, 150, context);
        reveal(pointBox2, helpHtml("intro.points." + textId), {
          duration: 0
        });
      });
      context.on("enter.intro", function(mode) {
        if (mode.id !== "select")
          return chapter.restart();
        _pointID = context.mode().selectedIDs()[0];
        continueTo(searchPreset);
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function searchPreset() {
      if (context.mode().id !== "select" || !_pointID || !context.hasEntity(_pointID)) {
        return addPoint();
      }
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      context.container().select(".preset-search-input").on("keydown.intro", null).on("keyup.intro", checkPresetSearch);
      reveal(".preset-search-input", helpHtml("intro.points.search_cafe", {
        preset: cafePreset.name()
      }));
      context.on("enter.intro", function(mode) {
        if (!_pointID || !context.hasEntity(_pointID)) {
          return continueTo(addPoint);
        }
        var ids = context.selectedIDs();
        if (mode.id !== "select" || !ids.length || ids[0] !== _pointID) {
          context.enter(modeSelect(context, [_pointID]));
          context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
          context.container().select(".preset-search-input").on("keydown.intro", null).on("keyup.intro", checkPresetSearch);
          reveal(".preset-search-input", helpHtml("intro.points.search_cafe", {
            preset: cafePreset.name()
          }));
          context.history().on("change.intro", null);
        }
      });
      function checkPresetSearch() {
        var first2 = context.container().select(".preset-list-item:first-child");
        if (first2.classed("preset-amenity-cafe")) {
          context.container().select(".preset-search-input").on("keydown.intro", eventCancel, true).on("keyup.intro", null);
          reveal(first2.select(".preset-list-button").node(), helpHtml("intro.points.choose_cafe", {
            preset: cafePreset.name()
          }), {
            duration: 300
          });
          context.history().on("change.intro", function() {
            continueTo(aboutFeatureEditor);
          });
        }
      }
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.container().select(".preset-search-input").on("keydown.intro keyup.intro", null);
        nextStep();
      }
    }
    function aboutFeatureEditor() {
      if (context.mode().id !== "select" || !_pointID || !context.hasEntity(_pointID)) {
        return addPoint();
      }
      timeout2(function() {
        reveal(".entity-editor-pane", helpHtml("intro.points.feature_editor"), {
          tooltipClass: "intro-points-describe",
          buttonText: _t.html("intro.ok"),
          buttonCallback: function buttonCallback() {
            continueTo(addName);
          }
        });
      }, 400);
      context.on("exit.intro", function() {
        continueTo(reselectPoint);
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function addName() {
      if (context.mode().id !== "select" || !_pointID || !context.hasEntity(_pointID)) {
        return addPoint();
      }
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      var addNameString = helpHtml("intro.points.fields_info") + "{br}" + helpHtml("intro.points.add_name");
      timeout2(function() {
        var entity2 = context.entity(_pointID);
        if (entity2.tags.name) {
          var tooltip = reveal(".entity-editor-pane", addNameString, {
            tooltipClass: "intro-points-describe",
            buttonText: _t.html("intro.ok"),
            buttonCallback: function buttonCallback() {
              continueTo(addCloseEditor);
            }
          });
          tooltip.select(".instruction").style("display", "none");
        } else {
          reveal(".entity-editor-pane", addNameString, {
            tooltipClass: "intro-points-describe"
          });
        }
      }, 400);
      context.history().on("change.intro", function() {
        continueTo(addCloseEditor);
      });
      context.on("exit.intro", function() {
        continueTo(reselectPoint);
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function addCloseEditor() {
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      var selector = ".entity-editor-pane button.close svg use";
      var href = select_default2(selector).attr("href") || "#iD-icon-close";
      context.on("exit.intro", function() {
        continueTo(reselectPoint);
      });
      reveal(".entity-editor-pane", helpHtml("intro.points.add_close", {
        button: icon(href, "inline")
      }));
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function reselectPoint() {
      if (!_pointID)
        return chapter.restart();
      var entity2 = context.hasEntity(_pointID);
      if (!entity2)
        return chapter.restart();
      var oldPreset = _mainPresetIndex.match(entity2, context.graph());
      context.replace(actionChangePreset(_pointID, oldPreset, cafePreset));
      context.enter(modeBrowse(context));
      var msec = transitionTime(entity2.loc, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerEase(entity2.loc, msec);
      timeout2(function() {
        var box = pointBox(entity2.loc, context);
        reveal(box, helpHtml("intro.points.reselect"), {
          duration: 600
        });
        timeout2(function() {
          context.map().on("move.intro drawn.intro", function() {
            var entity3 = context.hasEntity(_pointID);
            if (!entity3)
              return chapter.restart();
            var box2 = pointBox(entity3.loc, context);
            reveal(box2, helpHtml("intro.points.reselect"), {
              duration: 0
            });
          });
        }, 600);
        context.on("enter.intro", function(mode) {
          if (mode.id !== "select")
            return;
          continueTo(updatePoint);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function updatePoint() {
      if (context.mode().id !== "select" || !_pointID || !context.hasEntity(_pointID)) {
        return continueTo(reselectPoint);
      }
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      context.on("exit.intro", function() {
        continueTo(reselectPoint);
      });
      context.history().on("change.intro", function() {
        continueTo(updateCloseEditor);
      });
      timeout2(function() {
        reveal(".entity-editor-pane", helpHtml("intro.points.update"), {
          tooltipClass: "intro-points-describe"
        });
      }, 400);
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function updateCloseEditor() {
      if (context.mode().id !== "select" || !_pointID || !context.hasEntity(_pointID)) {
        return continueTo(reselectPoint);
      }
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      context.on("exit.intro", function() {
        continueTo(rightClickPoint);
      });
      timeout2(function() {
        reveal(".entity-editor-pane", helpHtml("intro.points.update_close", {
          button: icon("#iD-icon-close", "inline")
        }));
      }, 500);
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function rightClickPoint() {
      if (!_pointID)
        return chapter.restart();
      var entity2 = context.hasEntity(_pointID);
      if (!entity2)
        return chapter.restart();
      context.enter(modeBrowse(context));
      var box = pointBox(entity2.loc, context);
      var textId = context.lastPointerType() === "mouse" ? "rightclick" : "edit_menu_touch";
      reveal(box, helpHtml("intro.points." + textId), {
        duration: 600
      });
      timeout2(function() {
        context.map().on("move.intro", function() {
          var entity3 = context.hasEntity(_pointID);
          if (!entity3)
            return chapter.restart();
          var box2 = pointBox(entity3.loc, context);
          reveal(box2, helpHtml("intro.points." + textId), {
            duration: 0
          });
        });
      }, 600);
      context.on("enter.intro", function(mode) {
        if (mode.id !== "select")
          return;
        var ids = context.selectedIDs();
        if (ids.length !== 1 || ids[0] !== _pointID)
          return;
        timeout2(function() {
          var node = selectMenuItem(context, "delete").node();
          if (!node)
            return;
          continueTo(enterDelete);
        }, 50);
      });
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.map().on("move.intro", null);
        nextStep();
      }
    }
    function enterDelete() {
      if (!_pointID)
        return chapter.restart();
      var entity2 = context.hasEntity(_pointID);
      if (!entity2)
        return chapter.restart();
      var node = selectMenuItem(context, "delete").node();
      if (!node) {
        return continueTo(rightClickPoint);
      }
      reveal(".edit-menu", helpHtml("intro.points.delete"), {
        padding: 50
      });
      timeout2(function() {
        context.map().on("move.intro", function() {
          reveal(".edit-menu", helpHtml("intro.points.delete"), {
            duration: 0,
            padding: 50
          });
        });
      }, 300);
      context.on("exit.intro", function() {
        if (!_pointID)
          return chapter.restart();
        var entity3 = context.hasEntity(_pointID);
        if (entity3)
          return continueTo(rightClickPoint);
      });
      context.history().on("change.intro", function(changed) {
        if (changed.deleted().length) {
          continueTo(undo);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro", null);
        context.history().on("change.intro", null);
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function undo() {
      context.history().on("change.intro", function() {
        continueTo(play);
      });
      reveal(".top-toolbar button.undo-button", helpHtml("intro.points.undo"));
      function continueTo(nextStep) {
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function play() {
      dispatch12.call("done");
      reveal(".ideditor", helpHtml("intro.points.play", {
        next: _t("intro.areas.title")
      }), {
        tooltipBox: ".intro-nav-wrap .chapter-area",
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          reveal(".ideditor");
        }
      });
    }
    chapter.enter = function() {
      addPoint();
    };
    chapter.exit = function() {
      timeouts.forEach(window.clearTimeout);
      context.on("enter.intro exit.intro", null);
      context.map().on("move.intro drawn.intro", null);
      context.history().on("change.intro", null);
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      context.container().select(".preset-search-input").on("keydown.intro keyup.intro", null);
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/area.js
  function uiIntroArea(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var playground = [-85.63552, 41.94159];
    var playgroundPreset = _mainPresetIndex.item("leisure/playground");
    var nameField = _mainPresetIndex.field("name");
    var descriptionField = _mainPresetIndex.field("description");
    var timeouts = [];
    var _areaID;
    var chapter = {
      title: "intro.areas.title"
    };
    function timeout2(f2, t) {
      timeouts.push(window.setTimeout(f2, t));
    }
    function eventCancel(d3_event) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
    }
    function revealPlayground(center, text, options) {
      var padding = 180 * Math.pow(2, context.map().zoom() - 19.5);
      var box = pad(center, padding, context);
      reveal(box, text, options);
    }
    function addArea() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      _areaID = null;
      var msec = transitionTime(playground, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(playground, 19, msec);
      timeout2(function() {
        var tooltip = reveal("button.add-area", helpHtml("intro.areas.add_playground"));
        tooltip.selectAll(".popover-inner").insert("svg", "span").attr("class", "tooltip-illustration").append("use").attr("xlink:href", "#iD-graphic-areas");
        context.on("enter.intro", function(mode) {
          if (mode.id !== "add-area")
            return;
          continueTo(startPlayground);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function startPlayground() {
      if (context.mode().id !== "add-area") {
        return chapter.restart();
      }
      _areaID = null;
      context.map().zoomEase(19.5, 500);
      timeout2(function() {
        var textId = context.lastPointerType() === "mouse" ? "starting_node_click" : "starting_node_tap";
        var startDrawString = helpHtml("intro.areas.start_playground") + helpHtml("intro.areas." + textId);
        revealPlayground(playground, startDrawString, {
          duration: 250
        });
        timeout2(function() {
          context.map().on("move.intro drawn.intro", function() {
            revealPlayground(playground, startDrawString, {
              duration: 0
            });
          });
          context.on("enter.intro", function(mode) {
            if (mode.id !== "draw-area")
              return chapter.restart();
            continueTo(continuePlayground);
          });
        }, 250);
      }, 550);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function continuePlayground() {
      if (context.mode().id !== "draw-area") {
        return chapter.restart();
      }
      _areaID = null;
      revealPlayground(playground, helpHtml("intro.areas.continue_playground"), {
        duration: 250
      });
      timeout2(function() {
        context.map().on("move.intro drawn.intro", function() {
          revealPlayground(playground, helpHtml("intro.areas.continue_playground"), {
            duration: 0
          });
        });
      }, 250);
      context.on("enter.intro", function(mode) {
        if (mode.id === "draw-area") {
          var entity2 = context.hasEntity(context.selectedIDs()[0]);
          if (entity2 && entity2.nodes.length >= 6) {
            return continueTo(finishPlayground);
          } else {
            return;
          }
        } else if (mode.id === "select") {
          _areaID = context.selectedIDs()[0];
          return continueTo(searchPresets);
        } else {
          return chapter.restart();
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function finishPlayground() {
      if (context.mode().id !== "draw-area") {
        return chapter.restart();
      }
      _areaID = null;
      var finishString = helpHtml("intro.areas.finish_area_" + (context.lastPointerType() === "mouse" ? "click" : "tap")) + helpHtml("intro.areas.finish_playground");
      revealPlayground(playground, finishString, {
        duration: 250
      });
      timeout2(function() {
        context.map().on("move.intro drawn.intro", function() {
          revealPlayground(playground, finishString, {
            duration: 0
          });
        });
      }, 250);
      context.on("enter.intro", function(mode) {
        if (mode.id === "draw-area") {
          return;
        } else if (mode.id === "select") {
          _areaID = context.selectedIDs()[0];
          return continueTo(searchPresets);
        } else {
          return chapter.restart();
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function searchPresets() {
      if (!_areaID || !context.hasEntity(_areaID)) {
        return addArea();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _areaID) {
        context.enter(modeSelect(context, [_areaID]));
      }
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
        context.container().select(".preset-search-input").on("keydown.intro", null).on("keyup.intro", checkPresetSearch);
        reveal(".preset-search-input", helpHtml("intro.areas.search_playground", {
          preset: playgroundPreset.name()
        }));
      }, 400);
      context.on("enter.intro", function(mode) {
        if (!_areaID || !context.hasEntity(_areaID)) {
          return continueTo(addArea);
        }
        var ids2 = context.selectedIDs();
        if (mode.id !== "select" || !ids2.length || ids2[0] !== _areaID) {
          context.enter(modeSelect(context, [_areaID]));
          context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
          context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
          context.container().select(".preset-search-input").on("keydown.intro", null).on("keyup.intro", checkPresetSearch);
          reveal(".preset-search-input", helpHtml("intro.areas.search_playground", {
            preset: playgroundPreset.name()
          }));
          context.history().on("change.intro", null);
        }
      });
      function checkPresetSearch() {
        var first2 = context.container().select(".preset-list-item:first-child");
        if (first2.classed("preset-leisure-playground")) {
          reveal(first2.select(".preset-list-button").node(), helpHtml("intro.areas.choose_playground", {
            preset: playgroundPreset.name()
          }), {
            duration: 300
          });
          context.container().select(".preset-search-input").on("keydown.intro", eventCancel, true).on("keyup.intro", null);
          context.history().on("change.intro", function() {
            continueTo(clickAddField);
          });
        }
      }
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        context.container().select(".preset-search-input").on("keydown.intro keyup.intro", null);
        nextStep();
      }
    }
    function clickAddField() {
      if (!_areaID || !context.hasEntity(_areaID)) {
        return addArea();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _areaID) {
        return searchPresets();
      }
      if (!context.container().select(".form-field-description").empty()) {
        return continueTo(describePlayground);
      }
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        context.container().select(".inspector-wrap .panewrap").style("right", "0%");
        var entity2 = context.entity(_areaID);
        if (entity2.tags.description) {
          return continueTo(play);
        }
        var box = context.container().select(".more-fields").node().getBoundingClientRect();
        if (box.top > 300) {
          var pane = context.container().select(".entity-editor-pane .inspector-body");
          var start2 = pane.node().scrollTop;
          var end = start2 + (box.top - 300);
          pane.transition().duration(250).tween("scroll.inspector", function() {
            var node = this;
            var i2 = number_default(start2, end);
            return function(t) {
              node.scrollTop = i2(t);
            };
          });
        }
        timeout2(function() {
          reveal(".more-fields .combobox-input", helpHtml("intro.areas.add_field", {
            name: nameField.label(),
            description: descriptionField.label()
          }), {
            duration: 300
          });
          context.container().select(".more-fields .combobox-input").on("click.intro", function() {
            var watcher;
            watcher = window.setInterval(function() {
              if (!context.container().select("div.combobox").empty()) {
                window.clearInterval(watcher);
                continueTo(chooseDescriptionField);
              }
            }, 300);
          });
        }, 300);
      }, 400);
      context.on("exit.intro", function() {
        return continueTo(searchPresets);
      });
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.container().select(".more-fields .combobox-input").on("click.intro", null);
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function chooseDescriptionField() {
      if (!_areaID || !context.hasEntity(_areaID)) {
        return addArea();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _areaID) {
        return searchPresets();
      }
      if (!context.container().select(".form-field-description").empty()) {
        return continueTo(describePlayground);
      }
      if (context.container().select("div.combobox").empty()) {
        return continueTo(clickAddField);
      }
      var watcher;
      watcher = window.setInterval(function() {
        if (context.container().select("div.combobox").empty()) {
          window.clearInterval(watcher);
          timeout2(function() {
            if (context.container().select(".form-field-description").empty()) {
              continueTo(retryChooseDescription);
            } else {
              continueTo(describePlayground);
            }
          }, 300);
        }
      }, 300);
      reveal("div.combobox", helpHtml("intro.areas.choose_field", {
        field: descriptionField.label()
      }), {
        duration: 300
      });
      context.on("exit.intro", function() {
        return continueTo(searchPresets);
      });
      function continueTo(nextStep) {
        if (watcher)
          window.clearInterval(watcher);
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function describePlayground() {
      if (!_areaID || !context.hasEntity(_areaID)) {
        return addArea();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _areaID) {
        return searchPresets();
      }
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      if (context.container().select(".form-field-description").empty()) {
        return continueTo(retryChooseDescription);
      }
      context.on("exit.intro", function() {
        continueTo(play);
      });
      reveal(".entity-editor-pane", helpHtml("intro.areas.describe_playground", {
        button: icon("#iD-icon-close", "inline")
      }), {
        duration: 300
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function retryChooseDescription() {
      if (!_areaID || !context.hasEntity(_areaID)) {
        return addArea();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _areaID) {
        return searchPresets();
      }
      context.container().select(".inspector-wrap .panewrap").style("right", "0%");
      reveal(".entity-editor-pane", helpHtml("intro.areas.retry_add_field", {
        field: descriptionField.label()
      }), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          continueTo(clickAddField);
        }
      });
      context.on("exit.intro", function() {
        return continueTo(searchPresets);
      });
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function play() {
      dispatch12.call("done");
      reveal(".ideditor", helpHtml("intro.areas.play", {
        next: _t("intro.lines.title")
      }), {
        tooltipBox: ".intro-nav-wrap .chapter-line",
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          reveal(".ideditor");
        }
      });
    }
    chapter.enter = function() {
      addArea();
    };
    chapter.exit = function() {
      timeouts.forEach(window.clearTimeout);
      context.on("enter.intro exit.intro", null);
      context.map().on("move.intro drawn.intro", null);
      context.history().on("change.intro", null);
      context.container().select(".inspector-wrap").on("wheel.intro", null);
      context.container().select(".preset-search-input").on("keydown.intro keyup.intro", null);
      context.container().select(".more-fields .combobox-input").on("click.intro", null);
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/line.js
  function uiIntroLine(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var timeouts = [];
    var _tulipRoadID = null;
    var flowerRoadID = "w646";
    var tulipRoadStart = [-85.6297754121684, 41.95805253325314];
    var tulipRoadMidpoint = [-85.62975395449628, 41.95787501510204];
    var tulipRoadIntersection = [-85.62974496187628, 41.95742515554585];
    var roadCategory = _mainPresetIndex.item("category-road_minor");
    var residentialPreset = _mainPresetIndex.item("highway/residential");
    var woodRoadID = "w525";
    var woodRoadEndID = "n2862";
    var woodRoadAddNode = [-85.62390110349587, 41.95397111462291];
    var woodRoadDragEndpoint = [-85.623867390213, 41.95466987786487];
    var woodRoadDragMidpoint = [-85.62386254803509, 41.95430395953872];
    var washingtonStreetID = "w522";
    var twelfthAvenueID = "w1";
    var eleventhAvenueEndID = "n3550";
    var twelfthAvenueEndID = "n5";
    var _washingtonSegmentID = null;
    var eleventhAvenueEnd = context.entity(eleventhAvenueEndID).loc;
    var twelfthAvenueEnd = context.entity(twelfthAvenueEndID).loc;
    var deleteLinesLoc = [-85.6219395542764, 41.95228033922477];
    var twelfthAvenue = [-85.62219310052491, 41.952505413152956];
    var chapter = {
      title: "intro.lines.title"
    };
    function timeout2(f2, t) {
      timeouts.push(window.setTimeout(f2, t));
    }
    function eventCancel(d3_event) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
    }
    function addLine() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      var msec = transitionTime(tulipRoadStart, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(tulipRoadStart, 18.5, msec);
      timeout2(function() {
        var tooltip = reveal("button.add-line", helpHtml("intro.lines.add_line"));
        tooltip.selectAll(".popover-inner").insert("svg", "span").attr("class", "tooltip-illustration").append("use").attr("xlink:href", "#iD-graphic-lines");
        context.on("enter.intro", function(mode) {
          if (mode.id !== "add-line")
            return;
          continueTo(startLine);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function startLine() {
      if (context.mode().id !== "add-line")
        return chapter.restart();
      _tulipRoadID = null;
      var padding = 70 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(tulipRoadStart, padding, context);
      box.height = box.height + 100;
      var textId = context.lastPointerType() === "mouse" ? "start_line" : "start_line_tap";
      var startLineString = helpHtml("intro.lines.missing_road") + "{br}" + helpHtml("intro.lines.line_draw_info") + helpHtml("intro.lines." + textId);
      reveal(box, startLineString);
      context.map().on("move.intro drawn.intro", function() {
        padding = 70 * Math.pow(2, context.map().zoom() - 18);
        box = pad(tulipRoadStart, padding, context);
        box.height = box.height + 100;
        reveal(box, startLineString, {
          duration: 0
        });
      });
      context.on("enter.intro", function(mode) {
        if (mode.id !== "draw-line")
          return chapter.restart();
        continueTo(drawLine);
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function drawLine() {
      if (context.mode().id !== "draw-line")
        return chapter.restart();
      _tulipRoadID = context.mode().selectedIDs()[0];
      context.map().centerEase(tulipRoadMidpoint, 500);
      timeout2(function() {
        var padding = 200 * Math.pow(2, context.map().zoom() - 18.5);
        var box = pad(tulipRoadMidpoint, padding, context);
        box.height = box.height * 2;
        reveal(box, helpHtml("intro.lines.intersect", {
          name: _t("intro.graph.name.flower-street")
        }));
        context.map().on("move.intro drawn.intro", function() {
          padding = 200 * Math.pow(2, context.map().zoom() - 18.5);
          box = pad(tulipRoadMidpoint, padding, context);
          box.height = box.height * 2;
          reveal(box, helpHtml("intro.lines.intersect", {
            name: _t("intro.graph.name.flower-street")
          }), {
            duration: 0
          });
        });
      }, 550);
      context.history().on("change.intro", function() {
        if (isLineConnected()) {
          continueTo(continueLine);
        }
      });
      context.on("enter.intro", function(mode) {
        if (mode.id === "draw-line") {
          return;
        } else if (mode.id === "select") {
          continueTo(retryIntersect);
          return;
        } else {
          return chapter.restart();
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function isLineConnected() {
      var entity2 = _tulipRoadID && context.hasEntity(_tulipRoadID);
      if (!entity2)
        return false;
      var drawNodes = context.graph().childNodes(entity2);
      return drawNodes.some(function(node) {
        return context.graph().parentWays(node).some(function(parent2) {
          return parent2.id === flowerRoadID;
        });
      });
    }
    function retryIntersect() {
      select_default2(window).on("pointerdown.intro mousedown.intro", eventCancel, true);
      var box = pad(tulipRoadIntersection, 80, context);
      reveal(box, helpHtml("intro.lines.retry_intersect", {
        name: _t("intro.graph.name.flower-street")
      }));
      timeout2(chapter.restart, 3e3);
    }
    function continueLine() {
      if (context.mode().id !== "draw-line")
        return chapter.restart();
      var entity2 = _tulipRoadID && context.hasEntity(_tulipRoadID);
      if (!entity2)
        return chapter.restart();
      context.map().centerEase(tulipRoadIntersection, 500);
      var continueLineText = helpHtml("intro.lines.continue_line") + "{br}" + helpHtml("intro.lines.finish_line_" + (context.lastPointerType() === "mouse" ? "click" : "tap")) + helpHtml("intro.lines.finish_road");
      reveal(".surface", continueLineText);
      context.on("enter.intro", function(mode) {
        if (mode.id === "draw-line") {
          return;
        } else if (mode.id === "select") {
          return continueTo(chooseCategoryRoad);
        } else {
          return chapter.restart();
        }
      });
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function chooseCategoryRoad() {
      if (context.mode().id !== "select")
        return chapter.restart();
      context.on("exit.intro", function() {
        return chapter.restart();
      });
      var button = context.container().select(".preset-category-road_minor .preset-list-button");
      if (button.empty())
        return chapter.restart();
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
        reveal(button.node(), helpHtml("intro.lines.choose_category_road", {
          category: roadCategory.name()
        }));
        button.on("click.intro", function() {
          continueTo(choosePresetResidential);
        });
      }, 400);
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.container().select(".preset-list-button").on("click.intro", null);
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function choosePresetResidential() {
      if (context.mode().id !== "select")
        return chapter.restart();
      context.on("exit.intro", function() {
        return chapter.restart();
      });
      var subgrid = context.container().select(".preset-category-road_minor .subgrid");
      if (subgrid.empty())
        return chapter.restart();
      subgrid.selectAll(":not(.preset-highway-residential) .preset-list-button").on("click.intro", function() {
        continueTo(retryPresetResidential);
      });
      subgrid.selectAll(".preset-highway-residential .preset-list-button").on("click.intro", function() {
        continueTo(nameRoad);
      });
      timeout2(function() {
        reveal(subgrid.node(), helpHtml("intro.lines.choose_preset_residential", {
          preset: residentialPreset.name()
        }), {
          tooltipBox: ".preset-highway-residential .preset-list-button",
          duration: 300
        });
      }, 300);
      function continueTo(nextStep) {
        context.container().select(".preset-list-button").on("click.intro", null);
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function retryPresetResidential() {
      if (context.mode().id !== "select")
        return chapter.restart();
      context.on("exit.intro", function() {
        return chapter.restart();
      });
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        var button = context.container().select(".entity-editor-pane .preset-list-button");
        reveal(button.node(), helpHtml("intro.lines.retry_preset_residential", {
          preset: residentialPreset.name()
        }));
        button.on("click.intro", function() {
          continueTo(chooseCategoryRoad);
        });
      }, 500);
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.container().select(".preset-list-button").on("click.intro", null);
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function nameRoad() {
      context.on("exit.intro", function() {
        continueTo(didNameRoad);
      });
      timeout2(function() {
        reveal(".entity-editor-pane", helpHtml("intro.lines.name_road", {
          button: icon("#iD-icon-close", "inline")
        }), {
          tooltipClass: "intro-lines-name_road"
        });
      }, 500);
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function didNameRoad() {
      context.history().checkpoint("doneAddLine");
      timeout2(function() {
        reveal(".surface", helpHtml("intro.lines.did_name_road"), {
          buttonText: _t.html("intro.ok"),
          buttonCallback: function buttonCallback() {
            continueTo(updateLine);
          }
        });
      }, 500);
      function continueTo(nextStep) {
        nextStep();
      }
    }
    function updateLine() {
      context.history().reset("doneAddLine");
      if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
        return chapter.restart();
      }
      var msec = transitionTime(woodRoadDragMidpoint, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(woodRoadDragMidpoint, 19, msec);
      timeout2(function() {
        var padding = 250 * Math.pow(2, context.map().zoom() - 19);
        var box = pad(woodRoadDragMidpoint, padding, context);
        var advance = function advance2() {
          continueTo(addNode2);
        };
        reveal(box, helpHtml("intro.lines.update_line"), {
          buttonText: _t.html("intro.ok"),
          buttonCallback: advance
        });
        context.map().on("move.intro drawn.intro", function() {
          var padding2 = 250 * Math.pow(2, context.map().zoom() - 19);
          var box2 = pad(woodRoadDragMidpoint, padding2, context);
          reveal(box2, helpHtml("intro.lines.update_line"), {
            duration: 0,
            buttonText: _t.html("intro.ok"),
            buttonCallback: advance
          });
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function addNode2() {
      context.history().reset("doneAddLine");
      if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
        return chapter.restart();
      }
      var padding = 40 * Math.pow(2, context.map().zoom() - 19);
      var box = pad(woodRoadAddNode, padding, context);
      var addNodeString = helpHtml("intro.lines.add_node" + (context.lastPointerType() === "mouse" ? "" : "_touch"));
      reveal(box, addNodeString);
      context.map().on("move.intro drawn.intro", function() {
        var padding2 = 40 * Math.pow(2, context.map().zoom() - 19);
        var box2 = pad(woodRoadAddNode, padding2, context);
        reveal(box2, addNodeString, {
          duration: 0
        });
      });
      context.history().on("change.intro", function(changed) {
        if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
          return continueTo(updateLine);
        }
        if (changed.created().length === 1) {
          timeout2(function() {
            continueTo(startDragEndpoint);
          }, 500);
        }
      });
      context.on("enter.intro", function(mode) {
        if (mode.id !== "select") {
          continueTo(updateLine);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function startDragEndpoint() {
      if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
        return continueTo(updateLine);
      }
      var padding = 100 * Math.pow(2, context.map().zoom() - 19);
      var box = pad(woodRoadDragEndpoint, padding, context);
      var startDragString = helpHtml("intro.lines.start_drag_endpoint" + (context.lastPointerType() === "mouse" ? "" : "_touch")) + helpHtml("intro.lines.drag_to_intersection");
      reveal(box, startDragString);
      context.map().on("move.intro drawn.intro", function() {
        if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
          return continueTo(updateLine);
        }
        var padding2 = 100 * Math.pow(2, context.map().zoom() - 19);
        var box2 = pad(woodRoadDragEndpoint, padding2, context);
        reveal(box2, startDragString, {
          duration: 0
        });
        var entity2 = context.entity(woodRoadEndID);
        if (geoSphericalDistance(entity2.loc, woodRoadDragEndpoint) <= 4) {
          continueTo(finishDragEndpoint);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function finishDragEndpoint() {
      if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
        return continueTo(updateLine);
      }
      var padding = 100 * Math.pow(2, context.map().zoom() - 19);
      var box = pad(woodRoadDragEndpoint, padding, context);
      var finishDragString = helpHtml("intro.lines.spot_looks_good") + helpHtml("intro.lines.finish_drag_endpoint" + (context.lastPointerType() === "mouse" ? "" : "_touch"));
      reveal(box, finishDragString);
      context.map().on("move.intro drawn.intro", function() {
        if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
          return continueTo(updateLine);
        }
        var padding2 = 100 * Math.pow(2, context.map().zoom() - 19);
        var box2 = pad(woodRoadDragEndpoint, padding2, context);
        reveal(box2, finishDragString, {
          duration: 0
        });
        var entity2 = context.entity(woodRoadEndID);
        if (geoSphericalDistance(entity2.loc, woodRoadDragEndpoint) > 4) {
          continueTo(startDragEndpoint);
        }
      });
      context.on("enter.intro", function() {
        continueTo(startDragMidpoint);
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function startDragMidpoint() {
      if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
        return continueTo(updateLine);
      }
      if (context.selectedIDs().indexOf(woodRoadID) === -1) {
        context.enter(modeSelect(context, [woodRoadID]));
      }
      var padding = 80 * Math.pow(2, context.map().zoom() - 19);
      var box = pad(woodRoadDragMidpoint, padding, context);
      reveal(box, helpHtml("intro.lines.start_drag_midpoint"));
      context.map().on("move.intro drawn.intro", function() {
        if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
          return continueTo(updateLine);
        }
        var padding2 = 80 * Math.pow(2, context.map().zoom() - 19);
        var box2 = pad(woodRoadDragMidpoint, padding2, context);
        reveal(box2, helpHtml("intro.lines.start_drag_midpoint"), {
          duration: 0
        });
      });
      context.history().on("change.intro", function(changed) {
        if (changed.created().length === 1) {
          continueTo(continueDragMidpoint);
        }
      });
      context.on("enter.intro", function(mode) {
        if (mode.id !== "select") {
          context.enter(modeSelect(context, [woodRoadID]));
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function continueDragMidpoint() {
      if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
        return continueTo(updateLine);
      }
      var padding = 100 * Math.pow(2, context.map().zoom() - 19);
      var box = pad(woodRoadDragEndpoint, padding, context);
      box.height += 400;
      var advance = function advance2() {
        context.history().checkpoint("doneUpdateLine");
        continueTo(deleteLines);
      };
      reveal(box, helpHtml("intro.lines.continue_drag_midpoint"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: advance
      });
      context.map().on("move.intro drawn.intro", function() {
        if (!context.hasEntity(woodRoadID) || !context.hasEntity(woodRoadEndID)) {
          return continueTo(updateLine);
        }
        var padding2 = 100 * Math.pow(2, context.map().zoom() - 19);
        var box2 = pad(woodRoadDragEndpoint, padding2, context);
        box2.height += 400;
        reveal(box2, helpHtml("intro.lines.continue_drag_midpoint"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: advance
        });
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function deleteLines() {
      context.history().reset("doneUpdateLine");
      context.enter(modeBrowse(context));
      if (!context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
        return chapter.restart();
      }
      var msec = transitionTime(deleteLinesLoc, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(deleteLinesLoc, 18, msec);
      timeout2(function() {
        var padding = 200 * Math.pow(2, context.map().zoom() - 18);
        var box = pad(deleteLinesLoc, padding, context);
        box.top -= 200;
        box.height += 400;
        var advance = function advance2() {
          continueTo(rightClickIntersection);
        };
        reveal(box, helpHtml("intro.lines.delete_lines", {
          street: _t("intro.graph.name.12th-avenue")
        }), {
          buttonText: _t.html("intro.ok"),
          buttonCallback: advance
        });
        context.map().on("move.intro drawn.intro", function() {
          var padding2 = 200 * Math.pow(2, context.map().zoom() - 18);
          var box2 = pad(deleteLinesLoc, padding2, context);
          box2.top -= 200;
          box2.height += 400;
          reveal(box2, helpHtml("intro.lines.delete_lines", {
            street: _t("intro.graph.name.12th-avenue")
          }), {
            duration: 0,
            buttonText: _t.html("intro.ok"),
            buttonCallback: advance
          });
        });
        context.history().on("change.intro", function() {
          timeout2(function() {
            continueTo(deleteLines);
          }, 500);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function rightClickIntersection() {
      context.history().reset("doneUpdateLine");
      context.enter(modeBrowse(context));
      context.map().centerZoomEase(eleventhAvenueEnd, 18, 500);
      var rightClickString = helpHtml("intro.lines.split_street", {
        street1: _t("intro.graph.name.11th-avenue"),
        street2: _t("intro.graph.name.washington-street")
      }) + helpHtml("intro.lines." + (context.lastPointerType() === "mouse" ? "rightclick_intersection" : "edit_menu_intersection_touch"));
      timeout2(function() {
        var padding = 60 * Math.pow(2, context.map().zoom() - 18);
        var box = pad(eleventhAvenueEnd, padding, context);
        reveal(box, rightClickString);
        context.map().on("move.intro drawn.intro", function() {
          var padding2 = 60 * Math.pow(2, context.map().zoom() - 18);
          var box2 = pad(eleventhAvenueEnd, padding2, context);
          reveal(box2, rightClickString, {
            duration: 0
          });
        });
        context.on("enter.intro", function(mode) {
          if (mode.id !== "select")
            return;
          var ids = context.selectedIDs();
          if (ids.length !== 1 || ids[0] !== eleventhAvenueEndID)
            return;
          timeout2(function() {
            var node = selectMenuItem(context, "split").node();
            if (!node)
              return;
            continueTo(splitIntersection);
          }, 50);
        });
        context.history().on("change.intro", function() {
          timeout2(function() {
            continueTo(deleteLines);
          }, 300);
        });
      }, 600);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function splitIntersection() {
      if (!context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
        return continueTo(deleteLines);
      }
      var node = selectMenuItem(context, "split").node();
      if (!node) {
        return continueTo(rightClickIntersection);
      }
      var wasChanged = false;
      _washingtonSegmentID = null;
      reveal(".edit-menu", helpHtml("intro.lines.split_intersection", {
        street: _t("intro.graph.name.washington-street")
      }), {
        padding: 50
      });
      context.map().on("move.intro drawn.intro", function() {
        var node2 = selectMenuItem(context, "split").node();
        if (!wasChanged && !node2) {
          return continueTo(rightClickIntersection);
        }
        reveal(".edit-menu", helpHtml("intro.lines.split_intersection", {
          street: _t("intro.graph.name.washington-street")
        }), {
          duration: 0,
          padding: 50
        });
      });
      context.history().on("change.intro", function(changed) {
        wasChanged = true;
        timeout2(function() {
          if (context.history().undoAnnotation() === _t("operations.split.annotation.line", {
            n: 1
          })) {
            _washingtonSegmentID = changed.created()[0].id;
            continueTo(didSplit);
          } else {
            _washingtonSegmentID = null;
            continueTo(retrySplit);
          }
        }, 300);
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function retrySplit() {
      context.enter(modeBrowse(context));
      context.map().centerZoomEase(eleventhAvenueEnd, 18, 500);
      var advance = function advance2() {
        continueTo(rightClickIntersection);
      };
      var padding = 60 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(eleventhAvenueEnd, padding, context);
      reveal(box, helpHtml("intro.lines.retry_split"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: advance
      });
      context.map().on("move.intro drawn.intro", function() {
        var padding2 = 60 * Math.pow(2, context.map().zoom() - 18);
        var box2 = pad(eleventhAvenueEnd, padding2, context);
        reveal(box2, helpHtml("intro.lines.retry_split"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: advance
        });
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function didSplit() {
      if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
        return continueTo(rightClickIntersection);
      }
      var ids = context.selectedIDs();
      var string = "intro.lines.did_split_" + (ids.length > 1 ? "multi" : "single");
      var street = _t("intro.graph.name.washington-street");
      var padding = 200 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(twelfthAvenue, padding, context);
      box.width = box.width / 2;
      reveal(box, helpHtml(string, {
        street1: street,
        street2: street
      }), {
        duration: 500
      });
      timeout2(function() {
        context.map().centerZoomEase(twelfthAvenue, 18, 500);
        context.map().on("move.intro drawn.intro", function() {
          var padding2 = 200 * Math.pow(2, context.map().zoom() - 18);
          var box2 = pad(twelfthAvenue, padding2, context);
          box2.width = box2.width / 2;
          reveal(box2, helpHtml(string, {
            street1: street,
            street2: street
          }), {
            duration: 0
          });
        });
      }, 600);
      context.on("enter.intro", function() {
        var ids2 = context.selectedIDs();
        if (ids2.length === 1 && ids2[0] === _washingtonSegmentID) {
          continueTo(multiSelect);
        }
      });
      context.history().on("change.intro", function() {
        if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
          return continueTo(rightClickIntersection);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function multiSelect() {
      if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
        return continueTo(rightClickIntersection);
      }
      var ids = context.selectedIDs();
      var hasWashington = ids.indexOf(_washingtonSegmentID) !== -1;
      var hasTwelfth = ids.indexOf(twelfthAvenueID) !== -1;
      if (hasWashington && hasTwelfth) {
        return continueTo(multiRightClick);
      } else if (!hasWashington && !hasTwelfth) {
        return continueTo(didSplit);
      }
      context.map().centerZoomEase(twelfthAvenue, 18, 500);
      timeout2(function() {
        var selected, other, padding, box;
        if (hasWashington) {
          selected = _t("intro.graph.name.washington-street");
          other = _t("intro.graph.name.12th-avenue");
          padding = 60 * Math.pow(2, context.map().zoom() - 18);
          box = pad(twelfthAvenueEnd, padding, context);
          box.width *= 3;
        } else {
          selected = _t("intro.graph.name.12th-avenue");
          other = _t("intro.graph.name.washington-street");
          padding = 200 * Math.pow(2, context.map().zoom() - 18);
          box = pad(twelfthAvenue, padding, context);
          box.width /= 2;
        }
        reveal(box, helpHtml("intro.lines.multi_select", {
          selected: selected,
          other1: other
        }) + " " + helpHtml("intro.lines.add_to_selection_" + (context.lastPointerType() === "mouse" ? "click" : "touch"), {
          selected: selected,
          other2: other
        }));
        context.map().on("move.intro drawn.intro", function() {
          if (hasWashington) {
            selected = _t("intro.graph.name.washington-street");
            other = _t("intro.graph.name.12th-avenue");
            padding = 60 * Math.pow(2, context.map().zoom() - 18);
            box = pad(twelfthAvenueEnd, padding, context);
            box.width *= 3;
          } else {
            selected = _t("intro.graph.name.12th-avenue");
            other = _t("intro.graph.name.washington-street");
            padding = 200 * Math.pow(2, context.map().zoom() - 18);
            box = pad(twelfthAvenue, padding, context);
            box.width /= 2;
          }
          reveal(box, helpHtml("intro.lines.multi_select", {
            selected: selected,
            other1: other
          }) + " " + helpHtml("intro.lines.add_to_selection_" + (context.lastPointerType() === "mouse" ? "click" : "touch"), {
            selected: selected,
            other2: other
          }), {
            duration: 0
          });
        });
        context.on("enter.intro", function() {
          continueTo(multiSelect);
        });
        context.history().on("change.intro", function() {
          if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
            return continueTo(rightClickIntersection);
          }
        });
      }, 600);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function multiRightClick() {
      if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
        return continueTo(rightClickIntersection);
      }
      var padding = 200 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(twelfthAvenue, padding, context);
      var rightClickString = helpHtml("intro.lines.multi_select_success") + helpHtml("intro.lines.multi_" + (context.lastPointerType() === "mouse" ? "rightclick" : "edit_menu_touch"));
      reveal(box, rightClickString);
      context.map().on("move.intro drawn.intro", function() {
        var padding2 = 200 * Math.pow(2, context.map().zoom() - 18);
        var box2 = pad(twelfthAvenue, padding2, context);
        reveal(box2, rightClickString, {
          duration: 0
        });
      });
      context.ui().editMenu().on("toggled.intro", function(open) {
        if (!open)
          return;
        timeout2(function() {
          var ids = context.selectedIDs();
          if (ids.length === 2 && ids.indexOf(twelfthAvenueID) !== -1 && ids.indexOf(_washingtonSegmentID) !== -1) {
            var node = selectMenuItem(context, "delete").node();
            if (!node)
              return;
            continueTo(multiDelete);
          } else if (ids.length === 1 && ids.indexOf(_washingtonSegmentID) !== -1) {
            return continueTo(multiSelect);
          } else {
            return continueTo(didSplit);
          }
        }, 300);
      });
      context.history().on("change.intro", function() {
        if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
          return continueTo(rightClickIntersection);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.ui().editMenu().on("toggled.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function multiDelete() {
      if (!_washingtonSegmentID || !context.hasEntity(_washingtonSegmentID) || !context.hasEntity(washingtonStreetID) || !context.hasEntity(twelfthAvenueID) || !context.hasEntity(eleventhAvenueEndID)) {
        return continueTo(rightClickIntersection);
      }
      var node = selectMenuItem(context, "delete").node();
      if (!node)
        return continueTo(multiRightClick);
      reveal(".edit-menu", helpHtml("intro.lines.multi_delete"), {
        padding: 50
      });
      context.map().on("move.intro drawn.intro", function() {
        reveal(".edit-menu", helpHtml("intro.lines.multi_delete"), {
          duration: 0,
          padding: 50
        });
      });
      context.on("exit.intro", function() {
        if (context.hasEntity(_washingtonSegmentID) || context.hasEntity(twelfthAvenueID)) {
          return continueTo(multiSelect);
        }
      });
      context.history().on("change.intro", function() {
        if (context.hasEntity(_washingtonSegmentID) || context.hasEntity(twelfthAvenueID)) {
          continueTo(retryDelete);
        } else {
          continueTo(play);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("exit.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function retryDelete() {
      context.enter(modeBrowse(context));
      var padding = 200 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(twelfthAvenue, padding, context);
      reveal(box, helpHtml("intro.lines.retry_delete"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          continueTo(multiSelect);
        }
      });
      function continueTo(nextStep) {
        nextStep();
      }
    }
    function play() {
      dispatch12.call("done");
      reveal(".ideditor", helpHtml("intro.lines.play", {
        next: _t("intro.buildings.title")
      }), {
        tooltipBox: ".intro-nav-wrap .chapter-building",
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          reveal(".ideditor");
        }
      });
    }
    chapter.enter = function() {
      addLine();
    };
    chapter.exit = function() {
      timeouts.forEach(window.clearTimeout);
      select_default2(window).on("pointerdown.intro mousedown.intro", null, true);
      context.on("enter.intro exit.intro", null);
      context.map().on("move.intro drawn.intro", null);
      context.history().on("change.intro", null);
      context.container().select(".inspector-wrap").on("wheel.intro", null);
      context.container().select(".preset-list-button").on("click.intro", null);
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/building.js
  function uiIntroBuilding(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var house = [-85.62815, 41.95638];
    var tank = [-85.62732, 41.95347];
    var buildingCatetory = _mainPresetIndex.item("category-building");
    var housePreset = _mainPresetIndex.item("building/house");
    var tankPreset = _mainPresetIndex.item("man_made/storage_tank");
    var timeouts = [];
    var _houseID = null;
    var _tankID = null;
    var chapter = {
      title: "intro.buildings.title"
    };
    function timeout2(f2, t) {
      timeouts.push(window.setTimeout(f2, t));
    }
    function eventCancel(d3_event) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
    }
    function revealHouse(center, text, options) {
      var padding = 160 * Math.pow(2, context.map().zoom() - 20);
      var box = pad(center, padding, context);
      reveal(box, text, options);
    }
    function revealTank(center, text, options) {
      var padding = 190 * Math.pow(2, context.map().zoom() - 19.5);
      var box = pad(center, padding, context);
      reveal(box, text, options);
    }
    function addHouse() {
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      _houseID = null;
      var msec = transitionTime(house, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(house, 19, msec);
      timeout2(function() {
        var tooltip = reveal("button.add-area", helpHtml("intro.buildings.add_building"));
        tooltip.selectAll(".popover-inner").insert("svg", "span").attr("class", "tooltip-illustration").append("use").attr("xlink:href", "#iD-graphic-buildings");
        context.on("enter.intro", function(mode) {
          if (mode.id !== "add-area")
            return;
          continueTo(startHouse);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function startHouse() {
      if (context.mode().id !== "add-area") {
        return continueTo(addHouse);
      }
      _houseID = null;
      context.map().zoomEase(20, 500);
      timeout2(function() {
        var startString = helpHtml("intro.buildings.start_building") + helpHtml("intro.buildings.building_corner_" + (context.lastPointerType() === "mouse" ? "click" : "tap"));
        revealHouse(house, startString);
        context.map().on("move.intro drawn.intro", function() {
          revealHouse(house, startString, {
            duration: 0
          });
        });
        context.on("enter.intro", function(mode) {
          if (mode.id !== "draw-area")
            return chapter.restart();
          continueTo(continueHouse);
        });
      }, 550);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function continueHouse() {
      if (context.mode().id !== "draw-area") {
        return continueTo(addHouse);
      }
      _houseID = null;
      var continueString = helpHtml("intro.buildings.continue_building") + "{br}" + helpHtml("intro.areas.finish_area_" + (context.lastPointerType() === "mouse" ? "click" : "tap")) + helpHtml("intro.buildings.finish_building");
      revealHouse(house, continueString);
      context.map().on("move.intro drawn.intro", function() {
        revealHouse(house, continueString, {
          duration: 0
        });
      });
      context.on("enter.intro", function(mode) {
        if (mode.id === "draw-area") {
          return;
        } else if (mode.id === "select") {
          var graph3 = context.graph();
          var way = context.entity(context.selectedIDs()[0]);
          var nodes = graph3.childNodes(way);
          var points = utilArrayUniq(nodes).map(function(n2) {
            return context.projection(n2.loc);
          });
          if (isMostlySquare(points)) {
            _houseID = way.id;
            return continueTo(chooseCategoryBuilding);
          } else {
            return continueTo(retryHouse);
          }
        } else {
          return chapter.restart();
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function retryHouse() {
      var onClick = function onClick2() {
        continueTo(addHouse);
      };
      revealHouse(house, helpHtml("intro.buildings.retry_building"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: onClick
      });
      context.map().on("move.intro drawn.intro", function() {
        revealHouse(house, helpHtml("intro.buildings.retry_building"), {
          duration: 0,
          buttonText: _t.html("intro.ok"),
          buttonCallback: onClick
        });
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        nextStep();
      }
    }
    function chooseCategoryBuilding() {
      if (!_houseID || !context.hasEntity(_houseID)) {
        return addHouse();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _houseID) {
        context.enter(modeSelect(context, [_houseID]));
      }
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
        var button = context.container().select(".preset-category-building .preset-list-button");
        reveal(button.node(), helpHtml("intro.buildings.choose_category_building", {
          category: buildingCatetory.name()
        }));
        button.on("click.intro", function() {
          button.on("click.intro", null);
          continueTo(choosePresetHouse);
        });
      }, 400);
      context.on("enter.intro", function(mode) {
        if (!_houseID || !context.hasEntity(_houseID)) {
          return continueTo(addHouse);
        }
        var ids2 = context.selectedIDs();
        if (mode.id !== "select" || !ids2.length || ids2[0] !== _houseID) {
          return continueTo(chooseCategoryBuilding);
        }
      });
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.container().select(".preset-list-button").on("click.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function choosePresetHouse() {
      if (!_houseID || !context.hasEntity(_houseID)) {
        return addHouse();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _houseID) {
        context.enter(modeSelect(context, [_houseID]));
      }
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
        var button = context.container().select(".preset-building-house .preset-list-button");
        reveal(button.node(), helpHtml("intro.buildings.choose_preset_house", {
          preset: housePreset.name()
        }), {
          duration: 300
        });
        button.on("click.intro", function() {
          button.on("click.intro", null);
          continueTo(closeEditorHouse);
        });
      }, 400);
      context.on("enter.intro", function(mode) {
        if (!_houseID || !context.hasEntity(_houseID)) {
          return continueTo(addHouse);
        }
        var ids2 = context.selectedIDs();
        if (mode.id !== "select" || !ids2.length || ids2[0] !== _houseID) {
          return continueTo(chooseCategoryBuilding);
        }
      });
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.container().select(".preset-list-button").on("click.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function closeEditorHouse() {
      if (!_houseID || !context.hasEntity(_houseID)) {
        return addHouse();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _houseID) {
        context.enter(modeSelect(context, [_houseID]));
      }
      context.history().checkpoint("hasHouse");
      context.on("exit.intro", function() {
        continueTo(rightClickHouse);
      });
      timeout2(function() {
        reveal(".entity-editor-pane", helpHtml("intro.buildings.close", {
          button: icon("#iD-icon-close", "inline")
        }));
      }, 500);
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function rightClickHouse() {
      if (!_houseID)
        return chapter.restart();
      context.enter(modeBrowse(context));
      context.history().reset("hasHouse");
      var zoom = context.map().zoom();
      if (zoom < 20) {
        zoom = 20;
      }
      context.map().centerZoomEase(house, zoom, 500);
      context.on("enter.intro", function(mode) {
        if (mode.id !== "select")
          return;
        var ids = context.selectedIDs();
        if (ids.length !== 1 || ids[0] !== _houseID)
          return;
        timeout2(function() {
          var node = selectMenuItem(context, "orthogonalize").node();
          if (!node)
            return;
          continueTo(clickSquare);
        }, 50);
      });
      context.map().on("move.intro drawn.intro", function() {
        var rightclickString = helpHtml("intro.buildings." + (context.lastPointerType() === "mouse" ? "rightclick_building" : "edit_menu_building_touch"));
        revealHouse(house, rightclickString, {
          duration: 0
        });
      });
      context.history().on("change.intro", function() {
        continueTo(rightClickHouse);
      });
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function clickSquare() {
      if (!_houseID)
        return chapter.restart();
      var entity2 = context.hasEntity(_houseID);
      if (!entity2)
        return continueTo(rightClickHouse);
      var node = selectMenuItem(context, "orthogonalize").node();
      if (!node) {
        return continueTo(rightClickHouse);
      }
      var wasChanged = false;
      reveal(".edit-menu", helpHtml("intro.buildings.square_building"), {
        padding: 50
      });
      context.on("enter.intro", function(mode) {
        if (mode.id === "browse") {
          continueTo(rightClickHouse);
        } else if (mode.id === "move" || mode.id === "rotate") {
          continueTo(retryClickSquare);
        }
      });
      context.map().on("move.intro", function() {
        var node2 = selectMenuItem(context, "orthogonalize").node();
        if (!wasChanged && !node2) {
          return continueTo(rightClickHouse);
        }
        reveal(".edit-menu", helpHtml("intro.buildings.square_building"), {
          duration: 0,
          padding: 50
        });
      });
      context.history().on("change.intro", function() {
        wasChanged = true;
        context.history().on("change.intro", null);
        timeout2(function() {
          if (context.history().undoAnnotation() === _t("operations.orthogonalize.annotation.feature", {
            n: 1
          })) {
            continueTo(doneSquare);
          } else {
            continueTo(retryClickSquare);
          }
        }, 500);
      });
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.map().on("move.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function retryClickSquare() {
      context.enter(modeBrowse(context));
      revealHouse(house, helpHtml("intro.buildings.retry_square"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          continueTo(rightClickHouse);
        }
      });
      function continueTo(nextStep) {
        nextStep();
      }
    }
    function doneSquare() {
      context.history().checkpoint("doneSquare");
      revealHouse(house, helpHtml("intro.buildings.done_square"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          continueTo(addTank);
        }
      });
      function continueTo(nextStep) {
        nextStep();
      }
    }
    function addTank() {
      context.enter(modeBrowse(context));
      context.history().reset("doneSquare");
      _tankID = null;
      var msec = transitionTime(tank, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(tank, 19.5, msec);
      timeout2(function() {
        reveal("button.add-area", helpHtml("intro.buildings.add_tank"));
        context.on("enter.intro", function(mode) {
          if (mode.id !== "add-area")
            return;
          continueTo(startTank);
        });
      }, msec + 100);
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function startTank() {
      if (context.mode().id !== "add-area") {
        return continueTo(addTank);
      }
      _tankID = null;
      timeout2(function() {
        var startString = helpHtml("intro.buildings.start_tank") + helpHtml("intro.buildings.tank_edge_" + (context.lastPointerType() === "mouse" ? "click" : "tap"));
        revealTank(tank, startString);
        context.map().on("move.intro drawn.intro", function() {
          revealTank(tank, startString, {
            duration: 0
          });
        });
        context.on("enter.intro", function(mode) {
          if (mode.id !== "draw-area")
            return chapter.restart();
          continueTo(continueTank);
        });
      }, 550);
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function continueTank() {
      if (context.mode().id !== "draw-area") {
        return continueTo(addTank);
      }
      _tankID = null;
      var continueString = helpHtml("intro.buildings.continue_tank") + "{br}" + helpHtml("intro.areas.finish_area_" + (context.lastPointerType() === "mouse" ? "click" : "tap")) + helpHtml("intro.buildings.finish_tank");
      revealTank(tank, continueString);
      context.map().on("move.intro drawn.intro", function() {
        revealTank(tank, continueString, {
          duration: 0
        });
      });
      context.on("enter.intro", function(mode) {
        if (mode.id === "draw-area") {
          return;
        } else if (mode.id === "select") {
          _tankID = context.selectedIDs()[0];
          return continueTo(searchPresetTank);
        } else {
          return continueTo(addTank);
        }
      });
      function continueTo(nextStep) {
        context.map().on("move.intro drawn.intro", null);
        context.on("enter.intro", null);
        nextStep();
      }
    }
    function searchPresetTank() {
      if (!_tankID || !context.hasEntity(_tankID)) {
        return addTank();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _tankID) {
        context.enter(modeSelect(context, [_tankID]));
      }
      context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
      timeout2(function() {
        context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
        context.container().select(".preset-search-input").on("keydown.intro", null).on("keyup.intro", checkPresetSearch);
        reveal(".preset-search-input", helpHtml("intro.buildings.search_tank", {
          preset: tankPreset.name()
        }));
      }, 400);
      context.on("enter.intro", function(mode) {
        if (!_tankID || !context.hasEntity(_tankID)) {
          return continueTo(addTank);
        }
        var ids2 = context.selectedIDs();
        if (mode.id !== "select" || !ids2.length || ids2[0] !== _tankID) {
          context.enter(modeSelect(context, [_tankID]));
          context.container().select(".inspector-wrap .panewrap").style("right", "-100%");
          context.container().select(".inspector-wrap").on("wheel.intro", eventCancel);
          context.container().select(".preset-search-input").on("keydown.intro", null).on("keyup.intro", checkPresetSearch);
          reveal(".preset-search-input", helpHtml("intro.buildings.search_tank", {
            preset: tankPreset.name()
          }));
          context.history().on("change.intro", null);
        }
      });
      function checkPresetSearch() {
        var first2 = context.container().select(".preset-list-item:first-child");
        if (first2.classed("preset-man_made-storage_tank")) {
          reveal(first2.select(".preset-list-button").node(), helpHtml("intro.buildings.choose_tank", {
            preset: tankPreset.name()
          }), {
            duration: 300
          });
          context.container().select(".preset-search-input").on("keydown.intro", eventCancel, true).on("keyup.intro", null);
          context.history().on("change.intro", function() {
            continueTo(closeEditorTank);
          });
        }
      }
      function continueTo(nextStep) {
        context.container().select(".inspector-wrap").on("wheel.intro", null);
        context.on("enter.intro", null);
        context.history().on("change.intro", null);
        context.container().select(".preset-search-input").on("keydown.intro keyup.intro", null);
        nextStep();
      }
    }
    function closeEditorTank() {
      if (!_tankID || !context.hasEntity(_tankID)) {
        return addTank();
      }
      var ids = context.selectedIDs();
      if (context.mode().id !== "select" || !ids.length || ids[0] !== _tankID) {
        context.enter(modeSelect(context, [_tankID]));
      }
      context.history().checkpoint("hasTank");
      context.on("exit.intro", function() {
        continueTo(rightClickTank);
      });
      timeout2(function() {
        reveal(".entity-editor-pane", helpHtml("intro.buildings.close", {
          button: icon("#iD-icon-close", "inline")
        }));
      }, 500);
      function continueTo(nextStep) {
        context.on("exit.intro", null);
        nextStep();
      }
    }
    function rightClickTank() {
      if (!_tankID)
        return continueTo(addTank);
      context.enter(modeBrowse(context));
      context.history().reset("hasTank");
      context.map().centerEase(tank, 500);
      timeout2(function() {
        context.on("enter.intro", function(mode) {
          if (mode.id !== "select")
            return;
          var ids = context.selectedIDs();
          if (ids.length !== 1 || ids[0] !== _tankID)
            return;
          timeout2(function() {
            var node = selectMenuItem(context, "circularize").node();
            if (!node)
              return;
            continueTo(clickCircle);
          }, 50);
        });
        var rightclickString = helpHtml("intro.buildings." + (context.lastPointerType() === "mouse" ? "rightclick_tank" : "edit_menu_tank_touch"));
        revealTank(tank, rightclickString);
        context.map().on("move.intro drawn.intro", function() {
          revealTank(tank, rightclickString, {
            duration: 0
          });
        });
        context.history().on("change.intro", function() {
          continueTo(rightClickTank);
        });
      }, 600);
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.map().on("move.intro drawn.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function clickCircle() {
      if (!_tankID)
        return chapter.restart();
      var entity2 = context.hasEntity(_tankID);
      if (!entity2)
        return continueTo(rightClickTank);
      var node = selectMenuItem(context, "circularize").node();
      if (!node) {
        return continueTo(rightClickTank);
      }
      var wasChanged = false;
      reveal(".edit-menu", helpHtml("intro.buildings.circle_tank"), {
        padding: 50
      });
      context.on("enter.intro", function(mode) {
        if (mode.id === "browse") {
          continueTo(rightClickTank);
        } else if (mode.id === "move" || mode.id === "rotate") {
          continueTo(retryClickCircle);
        }
      });
      context.map().on("move.intro", function() {
        var node2 = selectMenuItem(context, "circularize").node();
        if (!wasChanged && !node2) {
          return continueTo(rightClickTank);
        }
        reveal(".edit-menu", helpHtml("intro.buildings.circle_tank"), {
          duration: 0,
          padding: 50
        });
      });
      context.history().on("change.intro", function() {
        wasChanged = true;
        context.history().on("change.intro", null);
        timeout2(function() {
          if (context.history().undoAnnotation() === _t("operations.circularize.annotation.feature", {
            n: 1
          })) {
            continueTo(play);
          } else {
            continueTo(retryClickCircle);
          }
        }, 500);
      });
      function continueTo(nextStep) {
        context.on("enter.intro", null);
        context.map().on("move.intro", null);
        context.history().on("change.intro", null);
        nextStep();
      }
    }
    function retryClickCircle() {
      context.enter(modeBrowse(context));
      revealTank(tank, helpHtml("intro.buildings.retry_circle"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          continueTo(rightClickTank);
        }
      });
      function continueTo(nextStep) {
        nextStep();
      }
    }
    function play() {
      dispatch12.call("done");
      reveal(".ideditor", helpHtml("intro.buildings.play", {
        next: _t("intro.rapid.title")
      }), {
        tooltipBox: ".intro-nav-wrap .chapter-rapid",
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          reveal(".ideditor");
        }
      });
    }
    chapter.enter = function() {
      addHouse();
    };
    chapter.exit = function() {
      timeouts.forEach(window.clearTimeout);
      context.on("enter.intro exit.intro", null);
      context.map().on("move.intro drawn.intro", null);
      context.history().on("change.intro", null);
      context.container().select(".inspector-wrap").on("wheel.intro", null);
      context.container().select(".preset-search-input").on("keydown.intro keyup.intro", null);
      context.container().select(".more-fields .combobox-input").on("click.intro", null);
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/start_editing.js
  function uiIntroStartEditing(context, reveal) {
    var dispatch12 = dispatch_default("done", "startEditing");
    var modalSelection = select_default2(null);
    var chapter = {
      title: "intro.startediting.title"
    };
    function showHelp() {
      reveal(".map-control.help-control", helpHtml("intro.startediting.help"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          shortcuts();
        }
      });
    }
    function shortcuts() {
      reveal(".map-control.help-control", helpHtml("intro.startediting.shortcuts"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          showSave();
        }
      });
    }
    function showSave() {
      context.container().selectAll(".shaded").remove();
      reveal(".top-toolbar button.save", helpHtml("intro.startediting.save"), {
        buttonText: _t.html("intro.ok"),
        buttonCallback: function buttonCallback() {
          showStart();
        }
      });
    }
    function showStart() {
      context.container().selectAll(".shaded").remove();
      modalSelection = uiModal(context.container());
      modalSelection.select(".modal").attr("class", "modal-splash modal");
      modalSelection.selectAll(".close").remove();
      var startbutton = modalSelection.select(".content").attr("class", "fillL").append("button").attr("class", "modal-section huge-modal-button").on("click", function() {
        modalSelection.remove();
      });
      startbutton.append("svg").attr("class", "illustration").append("use").attr("xlink:href", "#iD-logo-walkthrough");
      startbutton.append("h2").html(_t.html("intro.startediting.start"));
      dispatch12.call("startEditing");
    }
    chapter.enter = function() {
      showHelp();
    };
    chapter.exit = function() {
      modalSelection.remove();
      context.container().selectAll(".shaded").remove();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/rapid.js
  var import_marked2 = __toModule(require_marked());
  function uiIntroRapid(context, reveal) {
    var dispatch12 = dispatch_default("done");
    var chapter = {
      title: "intro.rapid.title"
    };
    var timeouts = [];
    var tulipLaneStart = [-85.6297512, 41.9561476];
    var tulipLaneMid = [-85.6281089, 41.9561288];
    var tulipLaneEnd = [-85.627267, 41.955878];
    function timeout2(f2, t) {
      timeouts.push(window.setTimeout(f2, t));
    }
    function tulipLaneEndBoundingBox() {
      var padding = 70 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(tulipLaneEnd, padding, context);
      box.height = box.height + 65;
      box.width = box.width + 65;
      return box;
    }
    function tulipLaneBoundingBox() {
      var padding = 70 * Math.pow(2, context.map().zoom() - 18);
      var box = pad(tulipLaneStart, padding, context);
      box.height = box.height + 65;
      box.width = box.width + 600;
      return box;
    }
    function eventCancel(d3_event) {
      d3_event.stopPropagation();
      d3_event.preventDefault();
    }
    function welcome() {
      context.layers().layer("ai-features").enabled(true);
      context.enter(modeBrowse(context));
      context.history().reset("initial");
      reveal(".intro-nav-wrap .chapter-rapid", _t("intro.rapid.start", {
        rapid: icon("#iD-logo-rapid", "pre-text")
      }), {
        buttonText: _t("intro.ok"),
        buttonCallback: showHideRoads
      });
    }
    function showHideRoads() {
      var msec = transitionTime(tulipLaneMid, context.map().center());
      if (msec) {
        reveal(null, null, {
          duration: 0
        });
      }
      context.map().centerZoomEase(tulipLaneMid, 18.5, msec);
      reveal("button.rapid-features", _t("intro.rapid.ai_roads", {
        rapid: icon("#iD-logo-rapid", "pre-text")
      }), {
        buttonText: _t("intro.ok"),
        buttonCallback: selectRoad
      });
    }
    function selectRoad() {
      context.layers().layer("ai-features").enabled(true);
      select_default2(".inspector-wrap").on("wheel.intro", eventCancel);
      reveal(tulipLaneBoundingBox(), _t("intro.rapid.select_road"));
      timeout2(function() {
        var fbRoad = select_default2(".data-layer.ai-features");
        fbRoad.on("click.intro", addRoad);
      }, 250);
    }
    function addRoad() {
      timeout2(function() {
        reveal(".rapid-inspector-choice-accept", _t("intro.rapid.add_road"));
        var button = select_default2(".choice-button-accept");
        button.on("click.intro", roadAdded);
      }, 250);
    }
    function roadAdded() {
      if (context.mode().id !== "select")
        return chapter.restart();
      timeout2(function() {
        reveal(tulipLaneBoundingBox(), _t("intro.rapid.add_road_not_saved_yet", {
          rapid: icon("#iD-logo-rapid", "pre-text")
        }), {
          buttonText: _t("intro.ok"),
          buttonCallback: showLint
        });
      }, 250);
    }
    function showLint() {
      if (context.mode().id !== "select")
        return chapter.restart();
      var button = select_default2("li.issue-list-item.actionable > button");
      button.on("click.intro", function() {
        return continueTo(fixLint);
      });
      timeout2(function() {
        reveal("div.issue.severity-warning", _t("intro.rapid.new_lints"), {
          buttonText: _t("intro.ok"),
          buttonCallback: fixLint
        });
      }, 250);
      function continueTo(nextStep) {
        button.on("click.intro", null);
        nextStep();
      }
    }
    function fixLint() {
      if (context.mode().id !== "select")
        return chapter.restart();
      var button = select_default2("li.issue-fix-item.actionable");
      button.on("click.intro", function() {
        return continueTo(showFixedRoad);
      });
      timeout2(function() {
        reveal("li.issue-fix-item.actionable", _t("intro.rapid.fix_lint", {
          connect: icon("#iD-icon-crossing", "pre-text")
        }));
      }, 250);
      function continueTo(nextStep) {
        button.on("click.intro", null);
        nextStep();
      }
    }
    function showFixedRoad() {
      if (context.mode().id !== "select")
        return chapter.restart();
      timeout2(function() {
        reveal(tulipLaneEndBoundingBox(), _t("intro.rapid.fixed_lint"), {
          buttonText: _t("intro.ok"),
          buttonCallback: undoFixLint
        });
      }, 250);
    }
    function undoFixLint() {
      if (context.mode().id !== "select")
        return chapter.restart();
      timeout2(function() {
        var button = select_default2(".top-toolbar button.undo-button");
        var iconName = "#iD-icon-undo";
        reveal(".top-toolbar button.undo-button", _t("intro.rapid.undo_fix_lint", {
          button: icon(iconName, "pre-text")
        }));
        button.on("click.intro", undoRoadAdd);
      }, 250);
    }
    function undoRoadAdd() {
      if (context.mode().id !== "select")
        return chapter.restart();
      timeout2(function() {
        var button = select_default2(".top-toolbar button.undo-button");
        var iconName = "#iD-icon-undo";
        reveal(".top-toolbar button.undo-button", _t("intro.rapid.undo_road_add", {
          button: icon(iconName, "pre-text")
        }));
        button.on("click.intro", afterUndoRoadAdd);
      }, 250);
    }
    function afterUndoRoadAdd() {
      timeout2(function() {
        reveal(tulipLaneBoundingBox(), _t("intro.rapid.undo_road_add_aftermath"), {
          buttonText: _t("intro.ok"),
          buttonCallback: selectRoadAgain
        });
      }, 250);
    }
    function selectRoadAgain() {
      timeout2(function() {
        reveal(tulipLaneBoundingBox(), _t("intro.rapid.select_road_again"));
        var fbRoad = select_default2(".data-layer.ai-features");
        fbRoad.on("click.intro", ignoreRoad);
      }, 250);
    }
    function ignoreRoad() {
      timeout2(function() {
        reveal(".rapid-inspector-choice-ignore", _t("intro.rapid.ignore_road"));
        var button = select_default2(".choice-button-ignore");
        button.on("click.intro", showHelp);
      }, 250);
    }
    function showHelp() {
      reveal(".map-control.help-control", _t("intro.rapid.help", {
        rapid: icon("#iD-logo-rapid", "pre-text"),
        button: icon("#iD-icon-help", "pre-text"),
        key: _t("help.key")
      }), {
        buttonText: _t("intro.ok"),
        buttonCallback: allDone
      });
    }
    function allDone() {
      if (context.mode().id !== "browse")
        return chapter.restart();
      dispatch12.call("done");
      reveal(".intro-nav-wrap .chapter-startEditing", (0, import_marked2.default)(_t("intro.rapid.done", {
        next: _t("intro.startediting.title")
      })));
    }
    chapter.enter = function() {
      welcome();
    };
    chapter.exit = function() {
      timeouts.forEach(window.clearTimeout);
      select_default2(window).on("mousedown.intro-rapid", null, true);
      context.on("enter.intro-rapid exit.intro-rapid", null);
      context.map().on("move.intro-rapid drawn.intro-rapid", null);
      context.history().on("change.intro-rapid", null);
      select_default2(".inspector-wrap").on("wheel.intro-rapid", null);
      select_default2(".preset-list-button").on("click.intro-rapid", null);
    };
    chapter.restart = function() {
      chapter.exit();
      chapter.enter();
    };
    return utilRebind(chapter, dispatch12, "on");
  }

  // modules/ui/intro/intro.js
  var chapterUi = {
    welcome: uiIntroWelcome,
    navigation: uiIntroNavigation,
    point: uiIntroPoint,
    area: uiIntroArea,
    line: uiIntroLine,
    building: uiIntroBuilding,
    rapid: uiIntroRapid,
    startEditing: uiIntroStartEditing
  };
  var chapterFlow = ["welcome", "navigation", "point", "area", "line", "building", "rapid", "startEditing"];
  function uiIntro(context, skipToRapid) {
    var INTRO_IMAGERY = "EsriWorldImageryClarity";
    var _introGraph = {};
    var _rapidGraph = {};
    var _currChapter;
    function intro(selection2) {
      Promise.all([_mainFileFetcher.get("intro_rapid_graph"), _mainFileFetcher.get("intro_graph")]).then(function(values2) {
        var rapidData = values2[0];
        var introData = values2[1];
        for (var id2 in rapidData) {
          if (!_rapidGraph[id2]) {
            _rapidGraph[id2] = osmEntity(localize(rapidData[id2]));
          }
        }
        for (var _id in introData) {
          if (!_introGraph[_id]) {
            _introGraph[_id] = osmEntity(localize(introData[_id]));
          }
        }
        selection2.call(startIntro, skipToRapid);
      });
    }
    function startIntro(selection2) {
      context.enter(modeBrowse(context));
      var osm = context.connection();
      var history = context.history().toJSON();
      var hash = window.location.hash;
      var center = context.map().center();
      var zoom = context.map().zoom();
      var background = context.background().baseLayerSource();
      var overlays = context.background().overlayLayerSources();
      var opacity = context.container().selectAll(".main-map .layer-background").style("opacity");
      var caches2 = osm && osm.caches();
      var baseEntities = context.history().graph().base().entities;
      context.ui().sidebar.expand();
      context.container().selectAll("button.sidebar-toggle").classed("disabled", true);
      context.inIntro(true);
      if (osm) {
        osm.toggle(false).reset();
      }
      context.history().reset();
      context.history().merge(Object.values(coreGraph().load(_introGraph).entities));
      context.history().checkpoint("initial");
      var imagery = context.background().findSource(INTRO_IMAGERY);
      if (imagery) {
        context.background().baseLayerSource(imagery);
      } else {
        context.background().bing();
      }
      overlays.forEach(function(d) {
        return context.background().toggleOverlayLayer(d);
      });
      var layers = context.layers();
      layers.all().forEach(function(item) {
        if (typeof item.layer.enabled === "function") {
          item.layer.enabled(item.id === "osm" || item.id === "ai-features");
        }
      });
      var rapidDatasets = context.rapidContext().datasets();
      var rapidDatasetsCopy = JSON.parse(JSON.stringify(rapidDatasets));
      Object.keys(rapidDatasets).forEach(function(id2) {
        return rapidDatasets[id2].enabled = false;
      });
      rapidDatasets.rapid_intro_graph = {
        id: "rapid_intro_graph",
        beta: false,
        added: true,
        enabled: true,
        conflated: false,
        service: "fbml",
        color: "#da26d3",
        label: "RapiD Walkthrough"
      };
      if (services.fbMLRoads) {
        services.fbMLRoads.toggle(false);
        var entities = Object.values(coreGraph().load(_rapidGraph).entities);
        services.fbMLRoads.merge("rapid_intro_graph", entities);
      }
      context.container().selectAll(".main-map .layer-background").style("opacity", 1);
      var curtain = uiCurtain(context.container().node());
      selection2.call(curtain);
      corePreferences("walkthrough_started", "yes");
      var storedProgress = corePreferences("walkthrough_progress") || "";
      var progress = storedProgress.split(";").filter(Boolean);
      var chapters = chapterFlow.map(function(chapter, i2) {
        var s = chapterUi[chapter](context, curtain.reveal).on("done", function() {
          buttons.filter(function(d) {
            return d.title === s.title;
          }).classed("finished", true);
          if (i2 < chapterFlow.length - 1) {
            var next = chapterFlow[i2 + 1];
            context.container().select("button.chapter-".concat(next)).classed("next", true);
          }
          progress.push(chapter);
          corePreferences("walkthrough_progress", utilArrayUniq(progress).join(";"));
        });
        return s;
      });
      chapters[chapters.length - 1].on("startEditing", function() {
        progress.push("startEditing");
        corePreferences("walkthrough_progress", utilArrayUniq(progress).join(";"));
        var incomplete = utilArrayDifference(chapterFlow, progress);
        if (!incomplete.length) {
          corePreferences("walkthrough_completed", "yes");
        }
        var rapidDatasets2 = context.rapidContext().datasets();
        delete rapidDatasets2.rapid_intro_graph;
        Object.keys(rapidDatasetsCopy).forEach(function(id2) {
          return rapidDatasets2[id2].enabled = rapidDatasetsCopy[id2].enabled;
        });
        Object.assign(rapidDatasets2, rapidDatasetsCopy);
        if (services.fbMLRoads) {
          services.fbMLRoads.toggle(true);
        }
        curtain.remove();
        navwrap.remove();
        context.container().selectAll(".main-map .layer-background").style("opacity", opacity);
        context.container().selectAll("button.sidebar-toggle").classed("disabled", false);
        if (osm) {
          osm.toggle(true).reset().caches(caches2);
        }
        context.history().reset().merge(Object.values(baseEntities));
        context.background().baseLayerSource(background);
        overlays.forEach(function(d) {
          return context.background().toggleOverlayLayer(d);
        });
        if (history) {
          context.history().fromJSON(history, false);
        }
        context.map().centerZoom(center, zoom);
        window.location.replace(hash);
        context.inIntro(false);
      });
      var navwrap = selection2.append("div").attr("class", "intro-nav-wrap fillD");
      navwrap.append("svg").attr("class", "intro-nav-wrap-logo").append("use").attr("xlink:href", "#iD-logo-walkthrough");
      var buttonwrap = navwrap.append("div").attr("class", "joined").selectAll("button.chapter");
      var buttons = buttonwrap.data(chapters).enter().append("button").attr("class", function(d, i2) {
        return "chapter chapter-".concat(chapterFlow[i2]);
      }).on("click", enterChapter);
      buttons.append("span").html(function(d) {
        return _t.html(d.title);
      });
      buttons.append("span").attr("class", "status").call(svgIcon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward", "inline"));
      enterChapter(null, chapters[skipToRapid ? 6 : 0]);
      function enterChapter(d3_event, newChapter) {
        if (_currChapter)
          _currChapter.exit();
        context.enter(modeBrowse(context));
        _currChapter = newChapter;
        _currChapter.enter();
        buttons.classed("next", false).classed("active", function(d) {
          return d.title === _currChapter.title;
        });
      }
    }
    return intro;
  }

  // modules/ui/splash.js
  function uiSplash(context) {
    return function(selection2) {
      if (context.history().hasRestorableChanges())
        return;
      var updateMessage = "";
      var sawPrivacyVersion = corePreferences("sawPrivacyVersion");
      var showSplash = !corePreferences("sawSplash");
      if (sawPrivacyVersion !== context.privacyVersion) {
        updateMessage = _t("splash.privacy_update");
        showSplash = true;
      }
      if (!showSplash)
        return;
      corePreferences("sawSplash", true);
      corePreferences("sawPrivacyVersion", context.privacyVersion);
      _mainFileFetcher.get("intro_graph");
      var modalSelection = uiModal(selection2);
      modalSelection.select(".modal").attr("class", "modal-splash modal");
      var introModal = modalSelection.select(".content").append("div").attr("class", "fillL");
      introModal.append("div").attr("class", "modal-section").append("h3").html(_t.html("splash.welcome"));
      var modalSection = introModal.append("div").attr("class", "modal-section");
      modalSection.append("p").html(_t.html("splash.text", {
        version: context.version,
        website: '<a target="_blank" href="https://github.com/openstreetmap/iD/blob/develop/CHANGELOG.md#whats-new">changelog</a>',
        github: '<a target="_blank" href="https://github.com/openstreetmap/iD/issues">github.com</a>'
      }));
      modalSection.append("p").html(_t.html("splash.privacy", {
        updateMessage: updateMessage,
        privacyLink: '<a target="_blank" href="https://github.com/openstreetmap/iD/blob/release/PRIVACY.md">' + _t("splash.privacy_policy") + "</a>"
      }));
      var buttonWrap = introModal.append("div").attr("class", "modal-actions");
      var walkthrough = buttonWrap.append("button").attr("class", "walkthrough").on("click", function() {
        context.container().call(uiIntro(context));
        modalSelection.close();
      });
      walkthrough.append("svg").attr("class", "logo logo-walkthrough").append("use").attr("xlink:href", "#iD-logo-walkthrough");
      walkthrough.append("div").html(_t.html("splash.walkthrough"));
      var startEditing = buttonWrap.append("button").attr("class", "start-editing").on("click", modalSelection.close);
      startEditing.append("svg").attr("class", "logo logo-features").append("use").attr("xlink:href", "#iD-logo-features");
      startEditing.append("div").html(_t.html("splash.start"));
      modalSelection.select("button.close").attr("class", "hide");
    };
  }

  // modules/ui/status.js
  function uiStatus(context) {
    var osm = context.connection();
    return function(selection2) {
      if (!osm)
        return;
      function update4(err, apiStatus) {
        selection2.html("");
        if (err) {
          if (apiStatus === "connectionSwitched") {
            return;
          } else if (apiStatus === "rateLimited") {
            selection2.html(_t.html("osm_api_status.message.rateLimit")).append("a").attr("href", "#").attr("class", "api-status-login").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).append("span").html(_t.html("login")).on("click.login", function(d3_event) {
              d3_event.preventDefault();
              osm.authenticate();
            });
          } else {
            var throttledRetry = throttle_default(function() {
              context.loadTiles(context.projection);
              osm.reloadApiStatus();
            }, 2e3);
            selection2.html(_t.html("osm_api_status.message.error") + " ").append("a").attr("href", "#").html(_t.html("osm_api_status.retry")).on("click.retry", function(d3_event) {
              d3_event.preventDefault();
              throttledRetry();
            });
          }
        } else if (apiStatus === "readonly") {
          selection2.html(_t.html("osm_api_status.message.readonly"));
        } else if (apiStatus === "offline") {
          selection2.html(_t.html("osm_api_status.message.offline"));
        }
        selection2.attr("class", "api-status " + (err ? "error" : apiStatus));
      }
      osm.on("apiStatusChange.uiStatus", update4);
      context.history().on("storage_error", function() {
        selection2.html(_t.html("osm_api_status.message.local_storage_full"));
        selection2.attr("class", "api-status error");
      });
      window.setInterval(function() {
        osm.reloadApiStatus();
      }, 9e4);
      osm.reloadApiStatus();
    };
  }

  // modules/ui/version.js
  var sawVersion = null;
  var isNewVersion = false;
  var isNewUser = false;
  function uiVersion(context) {
    var currVersion = context.rapidContext().version;
    var matchedVersion = currVersion.match(/\d+\.\d+\.\d+.*/);
    if (sawVersion === null && matchedVersion !== null) {
      if (corePreferences("sawVersion")) {
        isNewUser = false;
        isNewVersion = corePreferences("sawVersion") !== currVersion && currVersion.indexOf("-") === -1;
      } else {
        isNewUser = true;
        isNewVersion = true;
      }
      corePreferences("sawVersion", currVersion);
      sawVersion = currVersion;
    }
    return function(selection2) {
      selection2.append("a").attr("target", "_blank").attr("tabindex", -1).attr("href", "https://github.com/facebookincubator/RapiD").text(currVersion);
      if (isNewVersion && !isNewUser) {
        selection2.append("a").attr("class", "badge").attr("target", "_blank").attr("tabindex", -1).attr("href", "https://github.com/facebookincubator/RapiD/blob/main/CHANGELOG.md").call(svgIcon("#maki-gift-11")).call(uiTooltip().title(_t.html("version.whats_new", {
          version: currVersion
        })).placement("top").scrollContainer(context.container().select(".main-footer-wrap")));
      }
    };
  }

  // modules/ui/zoom.js
  function uiZoom(context) {
    var zooms = [{
      id: "zoom-in",
      icon: "iD-icon-plus",
      title: _t.html("zoom.in"),
      action: zoomIn,
      disabled: function disabled() {
        return !context.map().canZoomIn();
      },
      disabledTitle: _t.html("zoom.disabled.in"),
      key: "+"
    }, {
      id: "zoom-out",
      icon: "iD-icon-minus",
      title: _t.html("zoom.out"),
      action: zoomOut,
      disabled: function disabled() {
        return !context.map().canZoomOut();
      },
      disabledTitle: _t.html("zoom.disabled.out"),
      key: "-"
    }];
    function zoomIn(d3_event) {
      if (d3_event.shiftKey)
        return;
      d3_event.preventDefault();
      context.map().zoomIn();
    }
    function zoomOut(d3_event) {
      if (d3_event.shiftKey)
        return;
      d3_event.preventDefault();
      context.map().zoomOut();
    }
    function zoomInFurther(d3_event) {
      if (d3_event.shiftKey)
        return;
      d3_event.preventDefault();
      context.map().zoomInFurther();
    }
    function zoomOutFurther(d3_event) {
      if (d3_event.shiftKey)
        return;
      d3_event.preventDefault();
      context.map().zoomOutFurther();
    }
    return function(selection2) {
      var tooltipBehavior = uiTooltip().placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left").title(function(d) {
        if (d.disabled()) {
          return d.disabledTitle;
        }
        return d.title;
      }).keys(function(d) {
        return [d.key];
      });
      var lastPointerUpType;
      var buttons = selection2.selectAll("button").data(zooms).enter().append("button").attr("class", function(d) {
        return d.id;
      }).on("pointerup.editor", function(d3_event) {
        lastPointerUpType = d3_event.pointerType;
      }).on("click.editor", function(d3_event, d) {
        if (!d.disabled()) {
          d.action(d3_event);
        } else if (lastPointerUpType === "touch" || lastPointerUpType === "pen") {
          context.ui().flash.duration(2e3).iconName("#" + d.icon).iconClass("disabled").label(d.disabledTitle)();
        }
        lastPointerUpType = null;
      }).call(tooltipBehavior);
      buttons.each(function(d) {
        select_default2(this).call(svgIcon("#" + d.icon, "light"));
      });
      utilKeybinding.plusKeys.forEach(function(key) {
        context.keybinding().on([key], zoomIn);
        context.keybinding().on([uiCmd("\u2325" + key)], zoomInFurther);
      });
      utilKeybinding.minusKeys.forEach(function(key) {
        context.keybinding().on([key], zoomOut);
        context.keybinding().on([uiCmd("\u2325" + key)], zoomOutFurther);
      });
      function updateButtonStates() {
        buttons.classed("disabled", function(d) {
          return d.disabled();
        }).each(function() {
          var selection3 = select_default2(this);
          if (!selection3.select(".tooltip.in").empty()) {
            selection3.call(tooltipBehavior.updateContent);
          }
        });
      }
      updateButtonStates();
      context.map().on("move.uiZoom", updateButtonStates);
    };
  }

  // modules/ui/rapid_colorpicker.js
  function uiRapidColorpicker(context, parentModal) {
    var rapidContext = context.rapidContext();
    var dispatch12 = dispatch_default("change", "done");
    var _close2 = function _close() {
    };
    function togglePopup(event) {
      var shaded = context.container().selectAll(".shaded");
      if (shaded.empty())
        return;
      if (shaded.selectAll(".colorpicker-popup").size()) {
        _close2();
      } else {
        renderPopup(shaded, event.currentTarget);
      }
    }
    function handleClick(d3_event) {
      var target = d3_event.target;
      var className = target && target.className || "";
      if (!/colorpicker/i.test(className)) {
        d3_event.stopPropagation();
        d3_event.preventDefault();
        _close2();
      }
    }
    function getBrightness(color2) {
      var short = color2.length < 6;
      var r = parseInt(short ? color2[1] + color2[1] : color2[1] + color2[2], 16);
      var g2 = parseInt(short ? color2[2] + color2[2] : color2[3] + color2[4], 16);
      var b2 = parseInt(short ? color2[3] + color2[3] : color2[5] + color2[6], 16);
      return (r * 299 + g2 * 587 + b2 * 114) / 1e3;
    }
    function render(selection2) {
      var colorpicker = selection2.selectAll(".rapid-colorpicker").data(function(d) {
        return [d];
      }, function(d) {
        return d.id;
      });
      var colorpickerEnter = colorpicker.enter().append("div").attr("class", "rapid-colorpicker").on("click", togglePopup);
      colorpickerEnter.append("div").attr("class", "rapid-colorpicker-fill").call(svgIcon("#fas-palette"));
      colorpicker.merge(colorpickerEnter).selectAll(".rapid-colorpicker-fill").style("background", function(d) {
        return d.color;
      }).select(".icon").style("color", function(d) {
        return getBrightness(d.color) > 140.5 ? "#333" : "#fff";
      });
    }
    function renderPopup(selection2, forNode) {
      var _this = this;
      var dataset = forNode.__data__;
      var rect = forNode.getBoundingClientRect();
      var popWidth = 180;
      var popTop = rect.bottom + 15;
      var popLeft = _mainLocalizer.textDirection() === "rtl" ? rect.right - 0.3333 * popWidth : rect.left - 0.6666 * popWidth;
      var arrowLeft = _mainLocalizer.textDirection() === "rtl" ? 0.3333 * popWidth - rect.width + 10 : 0.6666 * popWidth + 10;
      var origClose = parentModal.close;
      parentModal.close = function() {
      };
      _close2 = function _close() {
        popup.transition().duration(200).style("opacity", 0).remove();
        parentModal.close = origClose;
        var keybinding2 = utilKeybinding("modal");
        keybinding2.on(["\u232B", "\u238B"], origClose);
        select_default2(document).call(keybinding2);
        select_default2(document).on("click.colorpicker", null);
        _close2 = function _close3() {
        };
        dispatch12.call("done");
      };
      var keybinding = utilKeybinding("modal");
      keybinding.on(["\u232B", "\u238B"], _close2);
      select_default2(document).call(keybinding);
      select_default2(document).on("click.colorpicker", handleClick);
      var popup = selection2.append("div").attr("class", "colorpicker-popup").style("opacity", 0).style("width", popWidth + "px").style("top", popTop + "px").style("left", popLeft + "px");
      popup.append("div").attr("class", "colorpicker-arrow").style("left", arrowLeft + "px");
      var content = popup.append("div").attr("class", "colorpicker-content");
      var colorlist = content.selectAll(".colorpicker-colors").data([0]);
      colorlist = colorlist.enter().append("div").attr("class", "colorpicker-colors").merge(colorlist);
      var colorItems = colorlist.selectAll(".colorpicker-option").data(rapidContext.colors());
      var colorItemsEnter = colorItems.enter().append("div").attr("class", "colorpicker-option").style("color", function(d) {
        return d;
      }).on("click", function(_2, selectedColor) {
        dispatch12.call("change", _this, dataset.id, selectedColor);
        colorItems.classed("selected", function(d) {
          return d === selectedColor;
        });
      });
      colorItemsEnter.append("div").attr("class", "colorpicker-option-fill");
      colorItems = colorItems.merge(colorItemsEnter);
      colorItems.classed("selected", function(d) {
        return d === dataset.color;
      });
      popup.transition().style("opacity", 1);
    }
    return utilRebind(render, dispatch12, "on");
  }

  // modules/ui/rapid_splash.js
  var import_marked3 = __toModule(require_marked());
  function uiRapidSplash(context) {
    return function(selection2) {
      corePreferences("sawRapidSplash", true);
      var modalSelection = uiModal(selection2);
      modalSelection.select(".modal").attr("class", "modal rapid-modal modal-splash");
      var introModal = modalSelection.select(".content");
      introModal.append("div").attr("class", "modal-section").append("h3").text(_t("rapid_splash.welcome"));
      introModal.append("div").attr("class", "modal-section").append("p").html((0, import_marked3.default)(_t("rapid_splash.text", {
        rapidicon: icon("#iD-logo-rapid", "logo-rapid"),
        walkthrough: icon("#iD-logo-walkthrough", "logo-walkthrough"),
        edit: icon("#iD-logo-features", "logo-features")
      })));
      var buttonWrap = introModal.append("div").attr("class", "modal-actions");
      var startEditing = buttonWrap.append("button").attr("class", "start-editing").on("click", function() {
        modalSelection.close();
      });
      startEditing.append("svg").attr("class", "logo logo-features").append("use").attr("xlink:href", "#iD-logo-features");
      startEditing.append("div").text(_t("rapid_splash.start"));
      modalSelection.select("button.close").attr("class", "hide");
    };
  }

  // modules/ui/rapid_first_edit_dialog.js
  function uiRapidFirstEditDialog(context) {
    return function(selection2) {
      var modalSelection = uiModal(selection2);
      modalSelection.select(".modal").attr("class", "modal rapid-modal");
      var firstEditModal = modalSelection.select(".content");
      firstEditModal.append("div").attr("class", "modal-section").append("h3").html(_t("rapid_first_edit.nice", {
        rapidicon: icon("#iD-logo-rapid", "logo-rapid")
      }));
      firstEditModal.append("div").attr("class", "modal-section").append("p").text(_t("rapid_first_edit.text"));
      var buttonWrap = firstEditModal.append("div").attr("class", "modal-actions");
      var exploring = buttonWrap.append("button").attr("class", "rapid-explore").on("click", function() {
        modalSelection.close();
      });
      exploring.append("div").text(_t("rapid_first_edit.exploring"));
      var loginToOsm = buttonWrap.append("button").attr("class", "rapid-login-to-osm").on("click", function() {
        modalSelection.close();
        var osm = context.connection();
        if (!osm)
          return;
        osm.authenticate(function() {
          return context.container().call(uiRapidSplash(context));
        });
      });
      loginToOsm.append("div").text(_t("rapid_first_edit.login_with_osm"));
      modalSelection.select("button.close").attr("class", "hide");
    };
  }

  // modules/ui/rapid_feature_toggle_dialog.js
  var import_marked5 = __toModule(require_marked());

  // modules/ui/rapid_view_manage_datasets.js
  init_slicedToArray();
  var import_marked4 = __toModule(require_marked());
  var popupOpen = false;
  function uiRapidViewManageDatasets(context, parentModal) {
    var rapidContext = context.rapidContext();
    var dispatch12 = dispatch_default("done");
    var categoryCombo = uiCombobox(context, "dataset-categories");
    var MAXRESULTS = Infinity;
    var _content = select_default2(null);
    var _filterText;
    var _filterCategory;
    var _datasetInfo;
    var _myClose = function _myClose2() {
      return true;
    };
    function openMap() {
      if (["localhost", "127.0.0.1"].includes(location.hostname))
        return;
      if (!popupOpen) {
        popupOpen = true;
        var width = window.outerWidth * 0.8;
        var height = window.outerHeight * 0.8;
        var left = window.outerWidth / 2 - width / 2;
        var top = window.outerHeight / 2 - height / 2;
        var w = window.open(location.origin + "/#/map", "", "width=".concat(width, ",height=").concat(height, ",left=").concat(left, ",top=").concat(top));
        w.onunload = function() {
          popupOpen = false;
        };
      }
    }
    function render() {
      openMap();
      var shaded = context.container().selectAll(".shaded");
      if (shaded.empty())
        return;
      if (shaded.selectAll(".modal-view-manage").size())
        return;
      var origClose = parentModal.close;
      parentModal.close = function() {
      };
      _myClose = function _myClose2() {
        _filterText = null;
        _filterCategory = null;
        myModal.transition().duration(200).style("top", "0px").on("end", function() {
          return myShaded.remove();
        });
        parentModal.close = origClose;
        var keybinding2 = utilKeybinding("modal");
        keybinding2.on(["\u232B", "\u238B"], origClose);
        select_default2(document).call(keybinding2);
        dispatch12.call("done");
      };
      var keybinding = utilKeybinding("modal");
      keybinding.on(["\u232B", "\u238B"], _myClose);
      select_default2(document).call(keybinding);
      var myShaded = shaded.append("div").attr("class", "view-manage-wrap");
      var myModal = myShaded.append("div").attr("class", "modal rapid-modal modal-view-manage").style("opacity", 0);
      myModal.append("button").attr("class", "close").on("click", _myClose).call(svgIcon("#iD-icon-close"));
      _content = myModal.append("div").attr("class", "rapid-stack content");
      _content.call(renderModalContent);
      _content.selectAll(".ok-button").node().focus();
      myModal.transition().style("opacity", 1);
    }
    function renderModalContent(selection2) {
      var headerEnter = selection2.selectAll(".rapid-view-manage-header").data([0]).enter().append("div").attr("class", "modal-section rapid-view-manage-header");
      var line1 = headerEnter.append("div");
      line1.append("div").attr("class", "rapid-view-manage-header-icon").call(svgIcon("#iD-icon-data", "icon-30"));
      line1.append("div").attr("class", "rapid-view-manage-header-text").text(_t("rapid_feature_toggle.esri.title"));
      var line2 = headerEnter.append("div");
      line2.append("div").attr("class", "rapid-view-manage-header-about").html((0, import_marked4.default)(_t("rapid_feature_toggle.esri.about")));
      line2.selectAll("a").attr("target", "_blank");
      var filterEnter = selection2.selectAll(".rapid-view-manage-filter").data([0]).enter().append("div").attr("class", "modal-section rapid-view-manage-filter");
      var filterSearchEnter = filterEnter.append("div").attr("class", "rapid-view-manage-filter-search-wrap");
      filterSearchEnter.call(svgIcon("#fas-filter", "inline"));
      filterSearchEnter.append("input").attr("class", "rapid-view-manage-filter-search").attr("placeholder", _t("rapid_feature_toggle.esri.filter_datasets")).call(utilNoAuto).on("input", function(d3_event) {
        var element = d3_event.currentTarget;
        var val = element && element.value || "";
        _filterText = val.trim().toLowerCase();
        dsSection.call(renderDatasets);
      });
      var filterTypeEnter = filterEnter.append("div").attr("class", "rapid-view-manage-filter-type-wrap");
      filterTypeEnter.append("input").attr("class", "rapid-view-manage-filter-type").attr("placeholder", _t("rapid_feature_toggle.esri.any_type")).call(utilNoAuto).call(categoryCombo).on("blur change", function(d3_event) {
        var element = d3_event.currentTarget;
        var val = element && element.value || "";
        var data2 = categoryCombo.data();
        if (data2.some(function(item) {
          return item.value === val;
        })) {
          _filterCategory = val;
        } else {
          d3_event.currentTarget.value = "";
          _filterCategory = null;
        }
        dsSection.call(renderDatasets);
      });
      filterEnter.append("div").attr("class", "rapid-view-manage-filter-clear").append("a").attr("href", "#").text(_t("rapid_feature_toggle.esri.clear_filters")).on("click", function(d3_event) {
        d3_event.preventDefault();
        var element = d3_event.currentTarget;
        element.blur();
        selection2.selectAll("input").property("value", "");
        _filterText = null;
        _filterCategory = null;
        dsSection.call(renderDatasets);
      });
      filterEnter.append("div").attr("class", "rapid-view-manage-filter-results");
      var dsSection = selection2.selectAll(".rapid-view-manage-datasets-section").data([0]);
      var dsSectionEnter = dsSection.enter().append("div").attr("class", "modal-section rapid-view-manage-datasets-section");
      dsSectionEnter.append("div").attr("class", "rapid-view-manage-datasets-status");
      dsSectionEnter.append("div").attr("class", "rapid-view-manage-datasets");
      dsSection = dsSection.merge(dsSectionEnter).call(renderDatasets);
      var buttonsEnter = selection2.selectAll(".modal-section.buttons").data([0]).enter().append("div").attr("class", "modal-section buttons");
      buttonsEnter.append("button").attr("class", "button ok-button action").on("click", _myClose).text(_t("confirm.okay"));
    }
    function renderDatasets(selection2) {
      var status3 = selection2.selectAll(".rapid-view-manage-datasets-status");
      var results = selection2.selectAll(".rapid-view-manage-datasets");
      var showPreview = corePreferences("rapid-internal-feature.previewDatasets") === "true";
      var service = services.esriData;
      if (!service || Array.isArray(_datasetInfo) && !_datasetInfo.length) {
        results.classed("hide", true);
        status3.classed("hide", false).text(_t("rapid_feature_toggle.esri.no_datasets"));
        return;
      }
      if (!_datasetInfo) {
        results.classed("hide", true);
        status3.classed("hide", false).text(_t("rapid_feature_toggle.esri.fetching_datasets"));
        status3.append("br");
        status3.append("img").attr("class", "rapid-view-manage-datasets-spinner").attr("src", context.imagePath("loader-black.gif"));
        service.loadDatasets().then(function(results2) {
          var categories = new Set();
          Object.values(results2).forEach(function(d) {
            d.groupCategories.forEach(function(c2) {
              categories.add(c2.toLowerCase().replace("/categories/", ""));
            });
          });
          if (!showPreview)
            categories.delete("preview");
          var combodata = Array.from(categories).sort().map(function(c2) {
            var item = {
              title: c2,
              value: c2
            };
            if (c2 === "preview")
              item.display = "".concat(c2, ' <span class="rapid-view-manage-dataset-beta beta"></span>');
            return item;
          });
          categoryCombo.data(combodata);
          _datasetInfo = Object.values(results2).filter(function(d) {
            return showPreview || !d.groupCategories.some(function(category) {
              return category.toLowerCase() === "/categories/preview";
            });
          });
          return _datasetInfo;
        }).then(function() {
          return _content.call(renderModalContent);
        });
        return;
      }
      results.classed("hide", false);
      status3.classed("hide", true);
      var count = 0;
      _datasetInfo.forEach(function(d) {
        var title = (d.title || "").toLowerCase();
        var snippet = (d.snippet || "").toLowerCase();
        if (datasetAdded(d)) {
          d.filtered = false;
          ++count;
          return;
        }
        if (_filterText && title.indexOf(_filterText) === -1 && snippet.indexOf(_filterText) === -1) {
          d.filtered = true;
          return;
        }
        if (_filterCategory && !d.groupCategories.some(function(category) {
          return category.toLowerCase() === "/categories/".concat(_filterCategory);
        })) {
          d.filtered = true;
          return;
        }
        d.filtered = ++count > MAXRESULTS;
      });
      var datasets = results.selectAll(".rapid-view-manage-dataset").data(_datasetInfo, function(d) {
        return d.id;
      });
      datasets.exit().remove();
      var datasetsEnter = datasets.enter().append("div").attr("class", "rapid-view-manage-dataset");
      var labelsEnter = datasetsEnter.append("div").attr("class", "rapid-view-manage-dataset-label");
      labelsEnter.append("div").attr("class", "rapid-view-manage-dataset-name");
      var featuredEnter = labelsEnter.selectAll(".rapid-view-manage-dataset-featured").data(function(d) {
        return d.groupCategories.filter(function(d2) {
          return d2.toLowerCase() === "/categories/featured";
        });
      }).enter().append("div").attr("class", "rapid-view-manage-dataset-featured");
      featuredEnter.append("span").text("\u2B50");
      featuredEnter.append("span").text(_t("rapid_feature_toggle.esri.featured"));
      labelsEnter.selectAll(".rapid-view-manage-dataset-beta").data(function(d) {
        return d.groupCategories.filter(function(d2) {
          return d2.toLowerCase() === "/categories/preview";
        });
      }).enter().append("div").attr("class", "rapid-view-manage-dataset-beta beta").attr("title", _t("rapid_poweruser_features.beta"));
      labelsEnter.append("div").attr("class", "rapid-view-manage-dataset-snippet");
      labelsEnter.append("button").attr("class", function(d) {
        return "rapid-view-manage-dataset-action " + (window.__locked[d.id] ? "locked" : "");
      }).on("click", toggleDataset);
      datasets = datasets.merge(datasetsEnter).sort(sortDatasets).classed("hide", function(d) {
        return d.filtered;
      });
      datasets.selectAll(".rapid-view-manage-dataset-name").html(function(d) {
        return highlight(_filterText, d.title);
      });
      datasets.selectAll(".rapid-view-manage-dataset-snippet").html(function(d) {
        return highlight(_filterText, d.snippet);
      });
      datasets.selectAll(".rapid-view-manage-dataset-action").classed("secondary", function(d) {
        return datasetAdded(d);
      }).text(function(d) {
        return datasetAdded(d) ? _t("rapid_feature_toggle.esri.remove") : _t("rapid_feature_toggle.esri.add_to_map");
      });
      var numShown = _datasetInfo.filter(function(d) {
        return !d.filtered;
      }).length;
      var gt = count > MAXRESULTS && numShown === MAXRESULTS ? ">" : "";
      _content.selectAll(".rapid-view-manage-filter-results").text(_t("rapid_feature_toggle.esri.datasets_found", {
        num: "".concat(gt).concat(numShown)
      }));
      _content.selectAll(".rapid-view-manage-filter-results").append("button").style("height", "auto").style("line-height", "normal").style("padding", "1px 7px").style("margin-left", "4px").text(" Open map").on("click", openMap);
    }
    function sortDatasets(a, b2) {
      var aAdded = datasetAdded(a);
      var bAdded = datasetAdded(b2);
      var aFeatured = a.groupCategories.some(function(d) {
        return d.toLowerCase() === "/categories/featured";
      });
      var bFeatured = b2.groupCategories.some(function(d) {
        return d.toLowerCase() === "/categories/featured";
      });
      return aAdded && !bAdded ? -1 : bAdded && !aAdded ? 1 : aFeatured && !bFeatured ? -1 : bFeatured && !aFeatured ? 1 : a.title.localeCompare(b2.title);
    }
    function toggleDataset(d3_event, d, source) {
      var datasets = rapidContext.datasets();
      var ds = datasets[d.id];
      if (ds) {
        ds.added = !ds.added;
      } else {
        var inUse = window.__locked[d.id];
        if (inUse && source !== "isFromPopup") {
          var _inUse = _slicedToArray(inUse, 2), user = _inUse[0], minutesAgo = _inUse[1];
          var msg = minutesAgo === "done" ? "This dataset may already have been uploaded by someone else!" : "Someone else (".concat(user, ") started editing ").concat(d.name, " ").concat(minutesAgo, " minutes ago. If you continue, you might override or duplicate their work!");
          if (!confirm(msg))
            return;
        }
        if (d.instructions) {
          alert("Special instructions: ".concat(d.instructions));
        }
        var service = services.esriData;
        if (service) {
          service.loadLayer(d.id);
        }
        var isBeta = d.groupCategories.some(function(cat) {
          return cat.toLowerCase() === "/categories/preview";
        });
        var isBuildings = d.groupCategories.some(function(cat) {
          return cat.toLowerCase() === "/categories/buildings";
        });
        var colors = rapidContext.colors();
        var colorIndex = Object.keys(datasets).length % colors.length;
        var dataset = {
          id: d.id,
          beta: isBeta,
          added: true,
          enabled: true,
          conflated: false,
          service: "esri",
          color: colors[colorIndex],
          label: d.title,
          license_markdown: _t("rapid_feature_toggle.esri.license_markdown")
        };
        if (d.extent) {
          dataset.extent = new Extent(d.extent[0], d.extent[1]);
        }
        context.map().extent(dataset.extent);
        context.map().zoom(16);
        if (isBuildings) {
          dataset.conflated = true;
          dataset.service = "fbml";
          if (datasets.msBuildings) {
            datasets.msBuildings.enabled = false;
          }
        }
        datasets[d.id] = dataset;
      }
      var hash = utilStringQs(window.location.hash);
      hash.datasets = Object.values(datasets).filter(function(ds2) {
        return ds2.added && ds2.enabled;
      }).map(function(ds2) {
        return ds2.id;
      }).join(",");
      _content.call(renderModalContent);
      context.enter(modeBrowse(context));
      context.map().pan([0, 0]);
    }
    function datasetAdded(d) {
      var datasets = rapidContext.datasets();
      return datasets[d.id] && datasets[d.id].added;
    }
    function highlight(needle, haystack) {
      var html2 = haystack;
      if (needle) {
        var re2 = new RegExp("(" + escapeRegex(needle) + ")", "gi");
        html2 = html2.replace(re2, "<mark>$1</mark>");
      }
      return html2;
    }
    function escapeRegex(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    window.addEventListener("message", function(event) {
      if (typeof event.data === "string" && event.data.startsWith("ADD_SECTOR=")) {
        var _event$data$split = event.data.split("="), _event$data$split2 = _slicedToArray(_event$data$split, 2), sector = _event$data$split2[1];
        if (!_datasetInfo) {
          alert("please wait for datasets to load");
          return;
        }
        var d = _datasetInfo.find(function(x2) {
          return x2.id === sector;
        });
        console.log("Loaded", d.name);
        toggleDataset(null, d, "isFromPopup");
        setTimeout(_myClose, 500);
      }
    }, false);
    return utilRebind(render, dispatch12, "on");
  }

  // modules/ui/rapid_feature_toggle_dialog.js
  function uiRapidFeatureToggleDialog(context, AIFeatureToggleKey, featureToggleKeyDispatcher) {
    var rapidContext = context.rapidContext();
    var _modalSelection = select_default2(null);
    var _content = select_default2(null);
    var _viewManageModal;
    var _colorpicker;
    function datasetEnabled(d) {
      var dataset = rapidContext.datasets()[d.id];
      return dataset && dataset.enabled;
    }
    function toggleDataset(event, d) {
      var datasets = rapidContext.datasets();
      var dataset = datasets[d.id];
      if (dataset) {
        dataset.enabled = !dataset.enabled;
        context.enter(modeBrowse(context));
        context.map().pan([0, 0]);
      }
    }
    function changeColor(datasetID, color2) {
      var datasets = rapidContext.datasets();
      var dataset = datasets[datasetID];
      if (dataset) {
        dataset.color = color2;
        context.map().pan([0, 0]);
        _content.call(renderModalContent);
        var mode = context.mode();
        if (mode && mode.id === "select-ai-features") {
          context.enter(mode, mode.selectedDatum());
        }
      }
    }
    function toggleRapid() {
      var rapidLayer = context.layers().layer("ai-features");
      rapidLayer.enabled(!rapidLayer.enabled());
      _content.call(renderModalContent);
    }
    function keyPressHandler(d3_event) {
      if (d3_event.shiftKey && d3_event.key === _t("map_data.layers.ai-features.key")) {
        toggleRapid();
      }
    }
    return function render(selection2) {
      _modalSelection = uiModal(selection2);
      _modalSelection.select(".modal").attr("class", "modal rapid-modal");
      _viewManageModal = uiRapidViewManageDatasets(context, _modalSelection).on("done", function() {
        return _content.call(renderModalContent);
      });
      _colorpicker = uiRapidColorpicker(context, _modalSelection).on("change", changeColor);
      _content = _modalSelection.select(".content").append("div").attr("class", "rapid-stack").on("keypress", keyPressHandler);
      _content.call(renderModalContent);
      _content.selectAll(".ok-button").node().focus();
      featureToggleKeyDispatcher.on("ai_feature_toggle", function() {
        return _content.call(renderModalContent);
      });
    };
    function renderModalContent(selection2) {
      var rapidLayer = context.layers().layer("ai-features");
      var toggleAll = selection2.selectAll(".rapid-toggle-all").data([0]);
      var toggleAllEnter = toggleAll.enter().append("div").attr("class", "modal-section rapid-checkbox rapid-toggle-all");
      var toggleAllTextEnter = toggleAllEnter.append("div").attr("class", "rapid-feature-label-container");
      toggleAllTextEnter.append("div").attr("class", "rapid-feature-label").html(_t("rapid_feature_toggle.toggle_all", {
        rapidicon: icon("#iD-logo-rapid", "logo-rapid")
      }));
      toggleAllTextEnter.append("span").attr("class", "rapid-feature-hotkey").html("(" + AIFeatureToggleKey + ")");
      var toggleAllCheckboxEnter = toggleAllEnter.append("div").attr("class", "rapid-checkbox-inputs").append("label").attr("class", "rapid-checkbox-label");
      toggleAllCheckboxEnter.append("input").attr("type", "checkbox").attr("class", "rapid-feature-checkbox").on("click", toggleRapid);
      toggleAllCheckboxEnter.append("div").attr("class", "rapid-checkbox-custom");
      toggleAll = toggleAll.merge(toggleAllEnter);
      toggleAll.selectAll(".rapid-feature-checkbox").property("checked", rapidLayer.showAll());
      var datasets = selection2.selectAll(".rapid-datasets-container").data([0]);
      var datasetsEnter = datasets.enter().append("div").attr("class", "rapid-datasets-container");
      datasets.merge(datasetsEnter).call(renderDatasets);
      var manageDatasetsEnter = selection2.selectAll(".rapid-manage-datasets").data([0]).enter().append("div").attr("class", "modal-section rapid-checkbox rapid-manage-datasets").on("click", function() {
        return context.container().call(_viewManageModal);
      });
      manageDatasetsEnter.append("div").attr("class", "rapid-feature-label-container").append("div").attr("class", "rapid-feature-label").text(_t("rapid_feature_toggle.view_manage_datasets"));
      manageDatasetsEnter.append("div").attr("class", "rapid-checkbox-inputs").append("div").attr("class", "rapid-checkbox-label").call(svgIcon(_mainLocalizer.textDirection() === "rtl" ? "#iD-icon-backward" : "#iD-icon-forward", "icon-30"));
      var buttonsEnter = selection2.selectAll(".modal-section.buttons").data([0]).enter().append("div").attr("class", "modal-section buttons");
      buttonsEnter.append("button").attr("class", "button ok-button action").on("click", function() {
        return _modalSelection.remove();
      }).text(_t("confirm.okay"));
    }
    function renderDatasets(selection2) {
      var showPreview = corePreferences("rapid-internal-feature.previewDatasets") === "true";
      var datasets = Object.values(rapidContext.datasets()).filter(function(d) {
        return d.added && (showPreview || !d.beta);
      });
      var rapidLayer = context.layers().layer("ai-features");
      var rows = selection2.selectAll(".rapid-checkbox-dataset").data(datasets, function(d) {
        return d.id;
      });
      rows.exit().remove();
      var rowsEnter = rows.enter().append("div").attr("class", "modal-section rapid-checkbox rapid-checkbox-dataset");
      rowsEnter.append("div").attr("class", "rapid-feature").each(function(d, i2, nodes) {
        var selection3 = select_default2(nodes[i2]);
        var labelEnter = selection3.append("div").attr("class", "rapid-feature-label-container");
        labelEnter.append("div").attr("class", "rapid-feature-label").text(d.label || d.id);
        if (d.beta) {
          labelEnter.append("div").attr("class", "rapid-feature-label-beta beta").attr("title", _t("rapid_poweruser_features.beta"));
        }
        if (d.description) {
          labelEnter.append("div").attr("class", "rapid-feature-label-divider");
          labelEnter.append("div").attr("class", "rapid-feature-description").text(d.description);
        }
        if (d.license_markdown) {
          labelEnter.append("div").attr("class", "rapid-feature-label-divider");
          labelEnter.append("div").attr("class", "rapid-feature-license").html((0, import_marked5.default)(d.license_markdown));
          labelEnter.select("p a").attr("target", "_blank");
        }
        selection3.append("div").attr("class", "rapid-feature-extent-container").each(function(d2, i3, nodes2) {
          var selection4 = select_default2(nodes2[i3]);
          if (d2.extent && d2.extent.area() < 1e4) {
            selection4.append("a").attr("href", "#").text(_t("rapid_feature_toggle.center_map")).on("click", function(d3_event) {
              d3_event.preventDefault();
              context.map().extent(d2.extent);
              context.map().zoom(16);
            });
          } else {
            selection4.text(_t("rapid_feature_toggle.worldwide"));
          }
        });
      });
      var inputsEnter = rowsEnter.append("div").attr("class", "rapid-checkbox-inputs");
      inputsEnter.append("label").attr("class", "rapid-colorpicker-label");
      var checkboxEnter = inputsEnter.append("label").attr("class", "rapid-checkbox-label");
      checkboxEnter.append("input").attr("type", "checkbox").attr("class", "rapid-feature-checkbox").on("click", toggleDataset);
      checkboxEnter.append("div").attr("class", "rapid-checkbox-custom");
      rows = rows.merge(rowsEnter).classed("disabled", !rapidLayer.showAll());
      rows.selectAll(".rapid-colorpicker-label").attr("disabled", rapidLayer.showAll() ? null : true).call(_colorpicker);
      rows.selectAll(".rapid-checkbox-label").classed("disabled", !rapidLayer.showAll());
      rows.selectAll(".rapid-feature-checkbox").property("checked", datasetEnabled).attr("disabled", rapidLayer.showAll() ? null : true);
    }
  }

  // modules/ui/rapid_poweruser_features_dialog.js
  function uiRapidPowerUserFeaturesDialog(context) {
    var featureFlags = ["previewDatasets", "tagnosticRoadCombine", "tagSources", "showAutoFix", "allowLargeEdits"];
    var rapidContext = context.rapidContext();
    var showPowerUser = rapidContext.showPowerUser;
    var _modalSelection = select_default2(null);
    var _content = select_default2(null);
    if (!showPowerUser) {
      featureFlags.forEach(function(featureFlag) {
        var val = corePreferences("rapid-internal-feature.".concat(featureFlag));
        if (val) {
          corePreferences("rapid-internal-feature.was.".concat(featureFlag), val);
          corePreferences("rapid-internal-feature.".concat(featureFlag), null);
        }
      });
    } else {
      featureFlags.forEach(function(featureFlag) {
        var val = corePreferences("rapid-internal-feature.was.".concat(featureFlag));
        if (val) {
          corePreferences("rapid-internal-feature.".concat(featureFlag), val);
          corePreferences("rapid-internal-feature.was.".concat(featureFlag), null);
        }
      });
    }
    function isEnabled(featureFlag) {
      return corePreferences("rapid-internal-feature.".concat(featureFlag)) === "true";
    }
    function toggleFeature(_2, featureFlag) {
      var enabled = corePreferences("rapid-internal-feature.".concat(featureFlag)) === "true";
      enabled = !enabled;
      corePreferences("rapid-internal-feature.".concat(featureFlag), enabled);
      if (featureFlag === "previewDatasets" && !enabled) {
        var datasets = rapidContext.datasets();
        Object.values(datasets).forEach(function(ds) {
          if (ds.beta) {
            ds.added = false;
            ds.enabled = false;
          }
        });
        context.enter(modeBrowse(context));
        context.map().pan([0, 0]);
      }
    }
    return function(selection2) {
      _modalSelection = uiModal(selection2);
      _modalSelection.select(".modal").attr("class", "modal rapid-modal");
      _content = _modalSelection.select(".content").append("div").attr("class", "rapid-stack poweruser");
      _content.call(renderModalContent);
      _content.selectAll(".ok-button").node().focus();
    };
    function renderModalContent(selection2) {
      var headerEnter = selection2.selectAll(".modal-section-heading").data([0]).enter().append("div").attr("class", "modal-section-heading");
      headerEnter.append("h3").attr("class", "modal-heading").html(_t("rapid_poweruser_features.heading.label"));
      headerEnter.append("div").attr("class", "modal-heading-desc").text(_t("rapid_poweruser_features.heading.description")).append("span").attr("class", "smile").text("\uD83D\uDE0E");
      var features2 = selection2.selectAll(".rapid-features-container").data([0]);
      var featuresEnter = features2.enter().append("div").attr("class", "rapid-features-container");
      features2.merge(featuresEnter).call(renderFeatures);
      var buttonsEnter = selection2.selectAll(".modal-section.buttons").data([0]).enter().append("div").attr("class", "modal-section buttons");
      buttonsEnter.append("button").attr("class", "button ok-button action").on("click", function() {
        return _modalSelection.remove();
      }).text(_t("confirm.okay"));
    }
    function renderFeatures(selection2) {
      var rows = selection2.selectAll(".rapid-checkbox-feature").data(featureFlags.filter(function(x2) {
        return x2 === "previewDatasets";
      }), function(d) {
        return d;
      });
      var rowsEnter = rows.enter().append("div").attr("class", "modal-section rapid-checkbox rapid-checkbox-feature");
      rowsEnter.append("div").attr("class", "rapid-feature").each(function(d, i2, nodes) {
        var selection3 = select_default2(nodes[i2]);
        selection3.append("div").attr("class", "rapid-feature-label").text(function(d2) {
          return _t("rapid_poweruser_features.".concat(d2, ".label"));
        });
        selection3.append("div").attr("class", "rapid-feature-description").text(function(d2) {
          return _t("rapid_poweruser_features.".concat(d2, ".description"));
        });
      });
      var inputsEnter = rowsEnter.append("div").attr("class", "rapid-checkbox-inputs");
      var checkboxEnter = inputsEnter.append("label").attr("class", "rapid-checkbox-label");
      checkboxEnter.append("input").attr("type", "checkbox").attr("class", "rapid-feature-checkbox").on("click", toggleFeature);
      checkboxEnter.append("div").attr("class", "rapid-checkbox-custom");
      rows = rows.merge(rowsEnter);
      rows.selectAll(".rapid-feature-checkbox").property("checked", isEnabled);
    }
  }

  // modules/ui/rapid_service_license.js
  function uiRapidServiceLicense() {
    return function(selection2) {
      selection2.append("a").attr("href", "https://mapwith.ai/doc/license/MapWithAILicense.pdf").attr("target", "_blank").text(_t("rapid_feature_license"));
    };
  }

  // modules/ui/rapid_whatsnew.js
  var import_marked6 = __toModule(require_marked());
  function uiRapidWhatsNew(context) {
    var _dontShowAgain = false;
    return function(selection2) {
      if (corePreferences("sawWhatsNew") === "true")
        return;
      var modalSelection = uiModal(selection2);
      modalSelection.select(".modal").attr("class", "modal rapid-modal modal-splash modal-whatsnew");
      var whatsNewModal = modalSelection.select(".content");
      whatsNewModal.append("div").attr("class", "modal-section").append("h3").html(_t("rapid_whats_new.welcome", {
        rapidicon: icon("#iD-logo-rapid", "logo-rapid")
      }));
      var body = whatsNewModal.append("div").attr("class", "modal-section body").html((0, import_marked6.default)(_t("rapid_whats_new.text", {
        rapidicon: icon("#iD-logo-rapid", "logo-rapid")
      })));
      body.append("img").attr("class", "whatsnew-image").attr("src", context.asset("img/rapid-esri-splash.jpg"));
      body.select("p a").attr("target", "_blank");
      var checkboxContainer = whatsNewModal.append("div").attr("class", "modal-section rapid-checkbox dontshow").attr("id", "dontshowagain");
      var checkbox = checkboxContainer.append("label").attr("class", "rapid-checkbox-label dontshow");
      checkbox.append("span").attr("class", "rapid-checkbox-text").text(_t("rapid_whats_new.dontshowagain"));
      checkbox.append("input").attr("type", "checkbox").attr("class", "rapid-feature-checkbox").property("checked", false).on("click", function() {
        _dontShowAgain = !_dontShowAgain;
      });
      checkbox.append("div").attr("class", "rapid-checkbox-custom");
      var buttonWrap = whatsNewModal.append("div").attr("class", "modal-actions");
      var nothanks = buttonWrap.append("button").attr("class", "whats-new-nothanks").on("click", function() {
        corePreferences("sawWhatsNew", _dontShowAgain);
        modalSelection.close();
      });
      nothanks.append("div").text(_t("rapid_whats_new.nope"));
      var okayButton = buttonWrap.append("button").attr("class", "whats-new-okay");
      okayButton.append("div").text(_t("rapid_whats_new.ok")).on("click", function() {
        corePreferences("sawWhatsNew", _dontShowAgain);
        modalSelection.close();
        window.open("https://mapwith.ai/rapid-esri", "_blank");
      });
      modalSelection.select("button.close").attr("class", "hide");
    };
  }

  // modules/modes/rapid_select_features.js
  function modeRapidSelectFeatures(context, selectedDatum) {
    var mode = {
      id: "select-ai-features",
      button: "browse"
    };
    var keybinding = utilKeybinding("select-ai-features");
    var rapidInspector = uiRapidFeatureInspector(context, keybinding);
    var service = selectedDatum.__service__ === "esri" ? services.esriData : services.fbMLRoads;
    var rapidGraph = service.graph(selectedDatum.__datasetid__);
    var behaviors = [behaviorBreathe(context), behaviorHover(context), behaviorSelect(context), behaviorLasso(context), modeDragNode(context).behavior, modeDragNote(context).behavior];
    function selectData(d3_event, drawn) {
      var selection2 = context.surface().selectAll(".layer-ai-features .data" + window.toBase64(selectedDatum.__fbid__).replace(/\=/g, ""));
      if (selection2.empty()) {
        var source = d3_event && d3_event.type === "zoom" && d3_event.sourceEvent;
        if (drawn && source && (source.type === "mousemove" || source.type === "touchmove")) {
          context.enter(modeBrowse(context));
        }
      } else {
        selection2.classed("selected", true);
      }
    }
    function esc2() {
      if (select_default2(".combobox").size())
        return;
      context.enter(modeBrowse(context));
    }
    mode.selectedIDs = function() {
      return [selectedDatum.id];
    };
    mode.selectedDatum = function() {
      return selectedDatum;
    };
    mode.zoomToSelected = function() {
      var extent6 = selectedDatum.extent(rapidGraph);
      context.map().centerZoomEase(extent6.center(), context.map().trimmedExtentZoom(extent6));
    };
    mode.enter = function() {
      behaviors.forEach(context.install);
      keybinding.on(_t("inspector.zoom_to.key"), mode.zoomToSelected).on("\u238B", esc2, true);
      select_default2(document).call(keybinding);
      selectData();
      var sidebar = context.ui().sidebar;
      sidebar.show(rapidInspector.datum(selectedDatum));
      var extent6 = selectedDatum.extent(rapidGraph);
      sidebar.expand(sidebar.intersects(extent6));
      context.map().on("drawn.select-ai-features", selectData);
    };
    mode.exit = function() {
      behaviors.forEach(context.uninstall);
      select_default2(document).call(keybinding.unbind);
      context.surface().selectAll(".layer-ai-features .selected").classed("selected hover", false);
      context.map().on("drawn.select-ai-features", null);
      context.ui().sidebar.hide();
    };
    return mode;
  }

  // modules/ui/panels/progress.js
  function _createForOfIteratorHelper6(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray7(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return { s: F, n: function n2() {
          if (i2 >= o2.length)
            return { done: true };
          return { done: false, value: o2[i2++] };
        }, e: function e3(_e) {
          throw _e;
        }, f: F };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o2);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e3(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray7(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray7(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray7(o2, minLen);
  }
  function _arrayLikeToArray7(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  var sin2 = Math.sin;
  var cos2 = Math.cos;
  var sqrt2 = Math.sqrt;
  var \u03C0 = Math.PI;
  var atan22 = Math.atan2;
  var R = 6371;
  var K = \u03C0 / 180;
  var deg2rad = function deg2rad2(deg) {
    return deg * K;
  };
  function distanceBetween(lat1, lng1, lat2, lng2) {
    var dLat = deg2rad(lat2 - lat1);
    var dLon = deg2rad(lng2 - lng1);
    var a = sin2(dLat / 2) * sin2(dLat / 2) + cos2(deg2rad(lat1)) * cos2(deg2rad(lat2)) * sin2(dLon / 2) * sin2(dLon / 2);
    var c2 = 2 * atan22(sqrt2(a), sqrt2(1 - a));
    return 1e3 * R * c2;
  }
  var findNearest = function findNearest2(list, ourLat, ourLng) {
    var closest;
    var closestDistance;
    var _iterator = _createForOfIteratorHelper6(list), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var item = _step.value;
        var _item$geo = _slicedToArray(item.geo, 2), thisLng = _item$geo[0], thisLat = _item$geo[1];
        var distance = distanceBetween(thisLat, thisLng, ourLat, ourLng);
        if (!closest || distance < closestDistance) {
          closest = item;
          closestDistance = distance;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return closest;
  };
  function uiPanelProgress(context) {
    function getNext() {
      var _URLSearchParams$get$ = new URLSearchParams(location.hash).get("map").split("/").map(Number), _URLSearchParams$get$2 = _slicedToArray(_URLSearchParams$get$, 3), zoom = _URLSearchParams$get$2[0], lat = _URLSearchParams$get$2[1], lng = _URLSearchParams$get$2[2];
      var data2 = window._dsState[window._mostRecentDsId] || {};
      var list = Object.values(data2).filter(function(x2) {
        return x2 !== "done";
      });
      var next = findNearest(list, lat, lng);
      return {
        next: next,
        length: list.length,
        zoom: zoom
      };
    }
    function toNext() {
      var _getNext = getNext(), next = _getNext.next, zoom = _getNext.zoom;
      if (!next)
        return;
      context.map().centerZoomEase(next.geo, Math.max(zoom, 16), 0);
      context.selectedNoteID(null).selectedErrorID(null).enter(modeRapidSelectFeatures(context, next.feat));
    }
    function redraw(selection2) {
      selection2.html("");
      if (!window._mostRecentDsId) {
        selection2.append("span").html("No active dataset.");
        return;
      }
      var _getNext2 = getNext(), length = _getNext2.length;
      if (length) {
        selection2.append("span").html(length + " addresses remaining");
        selection2.append("button").html("Zoom to next (G)").on("click", toNext);
      } else {
        selection2.append("span").html("\uD83E\uDD70 Done! You've imported/updated all features in " + window._mostRecentDsId);
      }
    }
    var panel = function panel2(selection2) {
      selection2.call(redraw);
      context.map().on("drawn.info-history", function() {
        selection2.call(redraw);
      });
      context.on("enter.info-history", function() {
        selection2.call(redraw);
      });
    };
    panel.off = function() {
      context.map().on("drawn.info-history", null);
      context.on("enter.info-history", null);
    };
    panel.id = "progress";
    panel.label = "Import Status";
    panel.key = _t("info_panels.progress.key");
    var keybinding = utilKeybinding("statusPanel");
    keybinding().on("G", toNext);
    return panel;
  }

  // modules/ui/panels/index.js
  var uiInfoPanels = {
    background: uiPanelBackground,
    history: uiPanelHistory,
    progress: uiPanelProgress,
    location: uiPanelLocation,
    measurement: uiPanelMeasurement
  };

  // modules/ui/info.js
  function uiInfo(context) {
    var ids = Object.keys(uiInfoPanels);
    var wasActive = ["measurement"];
    var panels = {};
    var active = {};
    ids.forEach(function(k) {
      if (!panels[k]) {
        panels[k] = uiInfoPanels[k](context);
        active[k] = k === "progress";
      }
    });
    function info(selection2) {
      function redraw() {
        var activeids = ids.filter(function(k) {
          return active[k];
        }).sort();
        var containers = infoPanels.selectAll(".panel-container").data(activeids, function(k) {
          return k;
        });
        containers.exit().style("opacity", 1).transition().duration(200).style("opacity", 0).on("end", function(d) {
          select_default2(this).call(panels[d].off).remove();
        });
        var enter = containers.enter().append("div").attr("class", function(d) {
          return "fillD2 panel-container panel-container-" + d;
        });
        enter.style("opacity", 0).transition().duration(200).style("opacity", 1);
        var title = enter.append("div").attr("class", "panel-title fillD2");
        title.append("h3").html(function(d) {
          return panels[d].label;
        });
        title.append("button").attr("class", "close").on("click", function(d3_event, d) {
          d3_event.stopImmediatePropagation();
          d3_event.preventDefault();
          info.toggle(d);
        }).call(svgIcon("#iD-icon-close"));
        enter.append("div").attr("class", function(d) {
          return "panel-content panel-content-" + d;
        });
        infoPanels.selectAll(".panel-content").each(function(d) {
          select_default2(this).call(panels[d]);
        });
      }
      info.toggle = function(which) {
        var activeids = ids.filter(function(k) {
          return active[k];
        });
        if (which) {
          active[which] = !active[which];
          if (activeids.length === 1 && activeids[0] === which) {
            wasActive = [which];
          }
          context.container().select("." + which + "-panel-toggle-item").classed("active", active[which]).select("input").property("checked", active[which]);
        } else {
          if (activeids.length) {
            wasActive = activeids;
            activeids.forEach(function(k) {
              active[k] = false;
            });
          } else {
            wasActive.forEach(function(k) {
              active[k] = true;
            });
          }
        }
        redraw();
      };
      var infoPanels = selection2.selectAll(".info-panels").data([0]);
      infoPanels = infoPanels.enter().append("div").attr("class", "info-panels").merge(infoPanels);
      redraw();
      context.keybinding().on(uiCmd("\u2318" + _t("info_panels.key")), function(d3_event) {
        d3_event.stopImmediatePropagation();
        d3_event.preventDefault();
        info.toggle();
      });
      ids.forEach(function(k) {
        var key = _t("info_panels." + k + ".key", {
          default: null
        });
        if (!key)
          return;
        context.keybinding().on(uiCmd("\u2318\u21E7" + key), function(d3_event) {
          d3_event.stopImmediatePropagation();
          d3_event.preventDefault();
          info.toggle(k);
        });
      });
    }
    return info;
  }

  // modules/ui/photoviewer.js
  function uiPhotoviewer(context) {
    var dispatch12 = dispatch_default("resize");
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function photoviewer(selection2) {
      selection2.append("button").attr("class", "thumb-hide").on("click", function() {
        if (services.streetside) {
          services.streetside.hideViewer(context);
        }
        if (services.mapillary) {
          services.mapillary.hideViewer(context);
        }
        if (services.openstreetcam) {
          services.openstreetcam.hideViewer(context);
        }
      }).append("div").call(svgIcon("#iD-icon-close"));
      function preventDefault(d3_event) {
        d3_event.preventDefault();
      }
      selection2.append("button").attr("class", "resize-handle-xy").on("touchstart touchdown touchend", preventDefault).on(_pointerPrefix + "down", buildResizeListener(selection2, "resize", dispatch12, {
        resizeOnX: true,
        resizeOnY: true
      }));
      selection2.append("button").attr("class", "resize-handle-x").on("touchstart touchdown touchend", preventDefault).on(_pointerPrefix + "down", buildResizeListener(selection2, "resize", dispatch12, {
        resizeOnX: true
      }));
      selection2.append("button").attr("class", "resize-handle-y").on("touchstart touchdown touchend", preventDefault).on(_pointerPrefix + "down", buildResizeListener(selection2, "resize", dispatch12, {
        resizeOnY: true
      }));
      function buildResizeListener(target, eventName, dispatch13, options) {
        var resizeOnX = !!options.resizeOnX;
        var resizeOnY = !!options.resizeOnY;
        var minHeight = options.minHeight || 240;
        var minWidth = options.minWidth || 320;
        var pointerId;
        var startX;
        var startY;
        var startWidth;
        var startHeight;
        function startResize(d3_event) {
          if (pointerId !== (d3_event.pointerId || "mouse"))
            return;
          d3_event.preventDefault();
          d3_event.stopPropagation();
          var mapSize = context.map().dimensions();
          if (resizeOnX) {
            var maxWidth = mapSize[0];
            var newWidth = clamp4(startWidth + d3_event.clientX - startX, minWidth, maxWidth);
            target.style("width", newWidth + "px");
          }
          if (resizeOnY) {
            var maxHeight = mapSize[1] - 90;
            var newHeight = clamp4(startHeight + startY - d3_event.clientY, minHeight, maxHeight);
            target.style("height", newHeight + "px");
          }
          dispatch13.call(eventName, target, utilGetDimensions(target, true));
        }
        function clamp4(num, min2, max2) {
          return Math.max(min2, Math.min(num, max2));
        }
        function stopResize(d3_event) {
          if (pointerId !== (d3_event.pointerId || "mouse"))
            return;
          d3_event.preventDefault();
          d3_event.stopPropagation();
          select_default2(window).on("." + eventName, null);
        }
        return function initResize(d3_event) {
          d3_event.preventDefault();
          d3_event.stopPropagation();
          pointerId = d3_event.pointerId || "mouse";
          startX = d3_event.clientX;
          startY = d3_event.clientY;
          var targetRect = target.node().getBoundingClientRect();
          startWidth = targetRect.width;
          startHeight = targetRect.height;
          select_default2(window).on(_pointerPrefix + "move." + eventName, startResize, false).on(_pointerPrefix + "up." + eventName, stopResize, false);
          if (_pointerPrefix === "pointer") {
            select_default2(window).on("pointercancel." + eventName, stopResize, false);
          }
        };
      }
    }
    photoviewer.onMapResize = function() {
      var photoviewer2 = context.container().select(".photoviewer");
      var content = context.container().select(".main-content");
      var mapDimensions = utilGetDimensions(content, true);
      var photoDimensions = utilGetDimensions(photoviewer2, true);
      if (photoDimensions[0] > mapDimensions[0] || photoDimensions[1] > mapDimensions[1] - 90) {
        var setPhotoDimensions = [Math.min(photoDimensions[0], mapDimensions[0]), Math.min(photoDimensions[1], mapDimensions[1] - 90)];
        photoviewer2.style("width", setPhotoDimensions[0] + "px").style("height", setPhotoDimensions[1] + "px");
        dispatch12.call("resize", photoviewer2, setPhotoDimensions);
      }
    };
    return utilRebind(photoviewer, dispatch12, "on");
  }

  // modules/ui/shortcuts.js
  function uiShortcuts(context) {
    var detected = utilDetect();
    var _activeTab = 0;
    var _modalSelection;
    var _selection = select_default2(null);
    var _dataShortcuts;
    function shortcutsModal(_modalSelection2) {
      _modalSelection2.select(".modal").classed("modal-shortcuts", true);
      var content = _modalSelection2.select(".content");
      content.append("div").attr("class", "modal-section").append("h3").html(_t.html("shortcuts.title"));
      _mainFileFetcher.get("shortcuts").then(function(data2) {
        _dataShortcuts = data2;
        content.call(render);
      }).catch(function() {
      });
    }
    function render(selection2) {
      if (!_dataShortcuts)
        return;
      var wrapper = selection2.selectAll(".wrapper").data([0]);
      var wrapperEnter = wrapper.enter().append("div").attr("class", "wrapper modal-section");
      var tabsBar = wrapperEnter.append("div").attr("class", "tabs-bar");
      var shortcutsList = wrapperEnter.append("div").attr("class", "shortcuts-list");
      wrapper = wrapper.merge(wrapperEnter);
      var tabs = tabsBar.selectAll(".tab").data(_dataShortcuts);
      var tabsEnter = tabs.enter().append("a").attr("class", "tab").attr("href", "#").on("click", function(d3_event, d) {
        d3_event.preventDefault();
        var i2 = _dataShortcuts.indexOf(d);
        _activeTab = i2;
        render(selection2);
      });
      tabsEnter.append("span").html(function(d) {
        return _t.html(d.text);
      });
      wrapper.selectAll(".tab").classed("active", function(d, i2) {
        return i2 === _activeTab;
      });
      var shortcuts = shortcutsList.selectAll(".shortcut-tab").data(_dataShortcuts);
      var shortcutsEnter = shortcuts.enter().append("div").attr("class", function(d) {
        return "shortcut-tab shortcut-tab-" + d.tab;
      });
      var columnsEnter = shortcutsEnter.selectAll(".shortcut-column").data(function(d) {
        return d.columns;
      }).enter().append("table").attr("class", "shortcut-column");
      var rowsEnter = columnsEnter.selectAll(".shortcut-row").data(function(d) {
        return d.rows;
      }).enter().append("tr").attr("class", "shortcut-row");
      var sectionRows = rowsEnter.filter(function(d) {
        return !d.shortcuts;
      });
      sectionRows.append("td");
      sectionRows.append("td").attr("class", "shortcut-section").append("h3").html(function(d) {
        return _t.html(d.text);
      });
      var shortcutRows = rowsEnter.filter(function(d) {
        return d.shortcuts;
      });
      var shortcutKeys = shortcutRows.append("td").attr("class", "shortcut-keys");
      var modifierKeys = shortcutKeys.filter(function(d) {
        return d.modifiers;
      });
      modifierKeys.selectAll("kbd.modifier").data(function(d) {
        if (detected.os === "win" && d.text === "shortcuts.editing.commands.redo") {
          return ["\u2318"];
        } else if (detected.os !== "mac" && d.text === "shortcuts.browsing.display_options.fullscreen") {
          return [];
        } else {
          return d.modifiers;
        }
      }).enter().each(function() {
        var selection3 = select_default2(this);
        selection3.append("kbd").attr("class", "modifier").html(function(d) {
          return uiCmd.display(d);
        });
        selection3.append("span").html("+");
      });
      shortcutKeys.selectAll("kbd.shortcut").data(function(d) {
        var arr = d.shortcuts;
        if (detected.os === "win" && d.text === "shortcuts.editing.commands.redo") {
          arr = ["Y"];
        } else if (detected.os !== "mac" && d.text === "shortcuts.browsing.display_options.fullscreen") {
          arr = ["F11"];
        }
        arr = arr.map(function(s) {
          return uiCmd.display(s.indexOf(".") !== -1 ? _t(s) : s);
        });
        return utilArrayUniq(arr).map(function(s) {
          return {
            shortcut: s,
            separator: d.separator,
            suffix: d.suffix,
            rapid: d.rapid
          };
        });
      }).enter().each(function(d, i2, nodes) {
        var selection3 = select_default2(this);
        var click = d.shortcut.toLowerCase().match(/(.*).click/);
        if (click && click[1]) {
          selection3.call(svgIcon("#iD-walkthrough-mouse-" + click[1], "operation"));
        } else if (d.shortcut.toLowerCase() === "long-press") {
          selection3.call(svgIcon("#iD-walkthrough-longpress", "longpress operation"));
        } else if (d.shortcut.toLowerCase() === "tap") {
          selection3.call(svgIcon("#iD-walkthrough-tap", "tap operation"));
        } else {
          selection3.append("kbd").attr("class", "shortcut").html(function(d2) {
            return d2.shortcut;
          });
        }
        if (i2 < nodes.length - 1) {
          selection3.append("span").html(d.separator || "\xA0" + _t.html("shortcuts.or") + "\xA0");
        } else if (i2 === nodes.length - 1 && d.suffix) {
          selection3.append("span").html(d.suffix);
        }
        if (d.rapid) {
          selection3.append("svg").lower().attr("class", "icon logo-rapid").append("use").attr("xlink:href", "#iD-logo-rapid").attr("class", "#iD-logo-rapid");
        }
      });
      shortcutKeys.filter(function(d) {
        return d.gesture;
      }).each(function() {
        var selection3 = select_default2(this);
        selection3.append("span").html("+");
        selection3.append("span").attr("class", "gesture").html(function(d) {
          return _t.html(d.gesture);
        });
      });
      shortcutRows.append("td").attr("class", "shortcut-desc").html(function(d) {
        return d.text ? _t.html(d.text) : "\xA0";
      });
      wrapper.selectAll(".shortcut-tab").style("display", function(d, i2) {
        return i2 === _activeTab ? "flex" : "none";
      });
    }
    return function(selection2, show) {
      _selection = selection2;
      if (show) {
        _modalSelection = uiModal(selection2);
        _modalSelection.call(shortcutsModal);
      } else {
        context.keybinding().on([_t("shortcuts.toggle.key"), "?"], function() {
          if (context.container().selectAll(".modal-shortcuts").size()) {
            if (_modalSelection) {
              _modalSelection.close();
              _modalSelection = null;
            }
          } else {
            _modalSelection = uiModal(_selection);
            _modalSelection.call(shortcutsModal);
          }
        });
      }
    };
  }

  // modules/ui/tools/download_osc.js
  function uiToolDownloadOsc(context) {
    var tool = {
      id: "download_osc",
      label: _t("download_osc.title")
    };
    var button = null;
    var tooltipBehavior = null;
    var history = context.history();
    var _numChanges = 0;
    function isDisabled() {
      return _numChanges === 0;
    }
    function downloadOsc(d3_event) {
      d3_event.preventDefault();
      if (!context.inIntro() && history.hasChanges()) {
        var _changeset2 = new osmChangeset();
        var changes = history.changes(actionDiscardTags(history.difference()));
        var osc = JXON.stringify(_changeset2.osmChangeJXON(changes));
        downloadFile(osc, "change.osc");
      }
    }
    function updateCount() {
      var val = history.difference().summary().length;
      if (val === _numChanges)
        return;
      _numChanges = val;
      if (tooltipBehavior) {
        tooltipBehavior.title(_t(_numChanges > 0 ? "download_osc.help" : "download_osc.no_changes"));
      }
      if (button) {
        button.classed("disabled", isDisabled());
      }
    }
    function downloadFile(data2, fileName) {
      var a = document.createElement("a");
      a.style.display = "none";
      document.body.appendChild(a);
      a.href = window.URL.createObjectURL(new Blob([data2]));
      a.setAttribute("download", fileName);
      a.click();
      window.URL.revokeObjectURL(a.href);
      document.body.removeChild(a);
    }
    tool.render = function(selection2) {
      tooltipBehavior = uiTooltip().placement("bottom").title(_t("download_osc.no_changes"));
      button = selection2.append("button").attr("class", "downloadOsc disabled bar-button").on("click", downloadOsc).call(tooltipBehavior);
      button.call(svgIcon("#iD-icon-download-osc"));
      updateCount();
      context.history().on("change.download_osc", updateCount);
      context.on("enter.download_osc", function() {
        if (button) {
          button.classed("disabled", isDisabled());
        }
      });
    };
    tool.uninstall = function() {
      context.history().on("change.download", null);
      context.on("enter.download", null);
      button = null;
      tooltipBehavior = null;
    };
    return tool;
  }

  // modules/ui/tools/modes.js
  function uiToolOldDrawModes(context) {
    var tool = {
      id: "old_modes",
      label: _t.html("toolbar.add_feature")
    };
    var modes = [modeAddPoint(context, {
      title: _t.html("modes.add_point.title"),
      button: "point",
      description: _t.html("modes.add_point.description"),
      preset: _mainPresetIndex.item("point"),
      key: "1"
    }), modeAddLine(context, {
      title: _t.html("modes.add_line.title"),
      button: "line",
      description: _t.html("modes.add_line.description"),
      preset: _mainPresetIndex.item("line"),
      key: "2"
    }), modeAddArea(context, {
      title: _t.html("modes.add_area.title"),
      button: "area",
      description: _t.html("modes.add_area.description"),
      preset: _mainPresetIndex.item("area"),
      key: "3"
    })];
    function enabled() {
      return osmEditable();
    }
    function osmEditable() {
      return context.editable();
    }
    modes.forEach(function(mode) {
      context.keybinding().on(mode.key, function() {
        if (!enabled(mode))
          return;
        if (mode.id === context.mode().id) {
          context.enter(modeBrowse(context));
        } else {
          context.enter(mode);
        }
      });
    });
    tool.render = function(selection2) {
      var wrap2 = selection2.append("div").attr("class", "joined").style("display", "flex");
      var debouncedUpdate = debounce_default(update4, 500, {
        leading: true,
        trailing: true
      });
      context.map().on("move.modes", debouncedUpdate).on("drawn.modes", debouncedUpdate);
      context.on("enter.modes", update4);
      update4();
      function update4() {
        var buttons = wrap2.selectAll("button.add-button").data(modes, function(d) {
          return d.id;
        });
        buttons.exit().remove();
        var buttonsEnter = buttons.enter().append("button").attr("class", function(d) {
          return d.id + " add-button bar-button";
        }).on("click.mode-buttons", function(d3_event, d) {
          if (!enabled(d))
            return;
          var currMode = context.mode().id;
          if (/^draw/.test(currMode))
            return;
          if (d.id === currMode) {
            context.enter(modeBrowse(context));
          } else {
            context.enter(d);
          }
        }).call(uiTooltip().placement("bottom").title(function(d) {
          return d.description;
        }).keys(function(d) {
          return [d.key];
        }).scrollContainer(context.container().select(".top-toolbar")));
        buttonsEnter.each(function(d) {
          select_default2(this).call(svgIcon("#iD-icon-" + d.button));
        });
        buttonsEnter.append("span").attr("class", "label").html(function(mode) {
          return mode.title;
        });
        if (buttons.enter().size() || buttons.exit().size()) {
          context.ui().checkOverflow(".top-toolbar", true);
        }
        buttons = buttons.merge(buttonsEnter).classed("disabled", function(d) {
          return !enabled(d);
        }).classed("active", function(d) {
          return context.mode() && context.mode().button === d.button;
        });
      }
    };
    return tool;
  }

  // modules/ui/tools/notes.js
  function uiToolNotes(context) {
    var tool = {
      id: "notes",
      label: _t.html("modes.add_note.label")
    };
    var mode = modeAddNote(context);
    function enabled() {
      return notesEnabled() && notesEditable();
    }
    function notesEnabled() {
      var noteLayer = context.layers().layer("notes");
      return noteLayer && noteLayer.enabled();
    }
    function notesEditable() {
      var mode2 = context.mode();
      return context.map().notesEditable() && mode2 && mode2.id !== "save";
    }
    context.keybinding().on(mode.key, function() {
      if (!enabled(mode))
        return;
      if (mode.id === context.mode().id) {
        context.enter(modeBrowse(context));
      } else {
        context.enter(mode);
      }
    });
    tool.render = function(selection2) {
      var debouncedUpdate = debounce_default(update4, 500, {
        leading: true,
        trailing: true
      });
      context.map().on("move.notes", debouncedUpdate).on("drawn.notes", debouncedUpdate);
      context.on("enter.notes", update4);
      update4();
      function update4() {
        var showNotes = notesEnabled();
        var data2 = showNotes ? [mode] : [];
        var buttons = selection2.selectAll("button.add-button").data(data2, function(d) {
          return d.id;
        });
        buttons.exit().remove();
        var buttonsEnter = buttons.enter().append("button").attr("class", function(d) {
          return d.id + " add-button bar-button";
        }).on("click.notes", function(d3_event, d) {
          if (!enabled(d))
            return;
          var currMode = context.mode().id;
          if (/^draw/.test(currMode))
            return;
          if (d.id === currMode) {
            context.enter(modeBrowse(context));
          } else {
            context.enter(d);
          }
        }).call(uiTooltip().placement("bottom").title(function(d) {
          return d.description;
        }).keys(function(d) {
          return [d.key];
        }).scrollContainer(context.container().select(".top-toolbar")));
        buttonsEnter.each(function(d) {
          select_default2(this).call(svgIcon(d.icon || "#iD-icon-" + d.button));
        });
        if (buttons.enter().size() || buttons.exit().size()) {
          context.ui().checkOverflow(".top-toolbar", true);
        }
        buttons = buttons.merge(buttonsEnter).classed("disabled", function(d) {
          return !enabled(d);
        }).classed("active", function(d) {
          return context.mode() && context.mode().button === d.button;
        });
      }
    };
    tool.uninstall = function() {
      context.on("enter.editor.notes", null).on("exit.editor.notes", null).on("enter.notes", null);
      context.map().on("move.notes", null).on("drawn.notes", null);
    };
    return tool;
  }

  // modules/ui/tools/save.js
  function uiToolSave(context) {
    var tool = {
      id: "save",
      label: _t.html("save.title")
    };
    var button = null;
    var tooltipBehavior = null;
    var history = context.history();
    var key = uiCmd("\u2318S");
    var _numChanges = 0;
    function isSaving() {
      var mode = context.mode();
      return mode && mode.id === "save";
    }
    function isDisabled() {
      return _numChanges === 0 || isSaving();
    }
    function save(d3_event) {
      d3_event.preventDefault();
      if (!context.inIntro() && !isSaving() && history.hasChanges()) {
        context.enter(modeSave(context));
      }
    }
    function bgColor() {
      var step;
      if (_numChanges === 0) {
        return null;
      } else if (_numChanges <= 50) {
        step = _numChanges / 50;
        return rgb_default("#fff", "#ff8")(step);
      } else {
        step = Math.min((_numChanges - 50) / 50, 1);
        return rgb_default("#ff8", "#f88")(step);
      }
    }
    function updateCount() {
      var val = history.difference().summary().length;
      if (val === _numChanges)
        return;
      _numChanges = val;
      if (tooltipBehavior) {
        tooltipBehavior.title(_t.html(_numChanges > 0 ? "save.help" : "save.no_changes")).keys([key]);
      }
      if (button) {
        button.classed("disabled", isDisabled()).style("background", bgColor(_numChanges));
        button.select("span.count").html(_numChanges);
      }
    }
    tool.render = function(selection2) {
      tooltipBehavior = uiTooltip().placement("bottom").title(_t.html("save.no_changes")).keys([key]).scrollContainer(context.container().select(".top-toolbar"));
      var lastPointerUpType;
      button = selection2.append("button").attr("class", "save disabled bar-button").on("pointerup", function(d3_event) {
        lastPointerUpType = d3_event.pointerType;
      }).on("click", function(d3_event) {
        save(d3_event);
        if (_numChanges === 0 && (lastPointerUpType === "touch" || lastPointerUpType === "pen")) {
          context.ui().flash.duration(2e3).iconName("#iD-icon-save").iconClass("disabled").label(_t.html("save.no_changes"))();
        }
        lastPointerUpType = null;
      }).call(tooltipBehavior);
      button.call(svgIcon("#iD-icon-save"));
      button.append("span").attr("class", "count").attr("aria-hidden", "true").html("0");
      updateCount();
      context.keybinding().on(key, save, true);
      context.history().on("change.save", updateCount);
      context.on("enter.save", function() {
        if (button) {
          button.classed("disabled", isDisabled());
          if (isSaving()) {
            button.call(tooltipBehavior.hide);
          }
        }
      });
    };
    tool.uninstall = function() {
      context.keybinding().off(key, true);
      context.history().on("change.save", null);
      context.on("enter.save", null);
      button = null;
      tooltipBehavior = null;
    };
    return tool;
  }

  // modules/ui/tools/sidebar_toggle.js
  function uiToolSidebarToggle(context) {
    var tool = {
      id: "sidebar_toggle",
      label: _t.html("toolbar.inspect")
    };
    tool.render = function(selection2) {
      selection2.append("button").attr("class", "bar-button").on("click", function() {
        context.ui().sidebar.toggle();
      }).call(uiTooltip().placement("bottom").title(_t.html("sidebar.tooltip")).keys([_t("sidebar.key")]).scrollContainer(context.container().select(".top-toolbar"))).call(svgIcon("#iD-icon-sidebar-" + (_mainLocalizer.textDirection() === "rtl" ? "right" : "left")));
    };
    return tool;
  }

  // modules/ui/tools/undo_redo.js
  function uiToolUndoRedo(context) {
    var tool = {
      id: "undo_redo",
      label: _t.html("toolbar.undo_redo")
    };
    var commands = [{
      id: "undo",
      cmd: uiCmd("\u2318Z"),
      action: function action() {
        context.undo();
      },
      annotation: function annotation() {
        return context.history().undoAnnotation();
      },
      icon: "iD-icon-" + (_mainLocalizer.textDirection() === "rtl" ? "redo" : "undo")
    }, {
      id: "redo",
      cmd: uiCmd("\u2318\u21E7Z"),
      action: function action() {
        context.redo();
      },
      annotation: function annotation() {
        return context.history().redoAnnotation();
      },
      icon: "iD-icon-" + (_mainLocalizer.textDirection() === "rtl" ? "undo" : "redo")
    }];
    function editable() {
      return context.mode() && context.mode().id !== "save" && context.map().editableDataEnabled(true);
    }
    tool.render = function(selection2) {
      var tooltipBehavior = uiTooltip().placement("bottom").title(function(d) {
        return d.annotation() ? _t(d.id + ".tooltip", {
          action: d.annotation().description ? d.annotation().description : d.annotation()
        }) : _t(d.id + ".nothing"), d.cmd;
      }).keys(function(d) {
        return [d.cmd];
      }).scrollContainer(context.container().select(".top-toolbar"));
      var lastPointerUpType;
      var buttons = selection2.selectAll("button").data(commands).enter().append("button").attr("class", function(d) {
        return "disabled " + d.id + "-button bar-button";
      }).on("pointerup", function(d3_event) {
        lastPointerUpType = d3_event.pointerType;
      }).on("click", function(d3_event, d) {
        d3_event.preventDefault();
        var annotation = d.annotation();
        if (editable() && annotation) {
          d.action();
        }
        if (editable() && (lastPointerUpType === "touch" || lastPointerUpType === "pen")) {
          var text = annotation ? _t(d.id + ".tooltip", {
            action: annotation
          }) : _t(d.id + ".nothing");
          context.ui().flash.duration(2e3).iconName("#" + d.icon).iconClass(annotation ? "" : "disabled").label(text)();
        }
        lastPointerUpType = null;
      }).call(tooltipBehavior);
      buttons.each(function(d) {
        select_default2(this).call(svgIcon("#" + d.icon));
      });
      context.keybinding().on(commands[0].cmd, function(d3_event) {
        d3_event.preventDefault();
        if (editable())
          commands[0].action();
      }).on(commands[1].cmd, function(d3_event) {
        d3_event.preventDefault();
        if (editable())
          commands[1].action();
      });
      var debouncedUpdate = debounce_default(update4, 500, {
        leading: true,
        trailing: true
      });
      context.map().on("move.undo_redo", debouncedUpdate).on("drawn.undo_redo", debouncedUpdate);
      context.history().on("change.undo_redo", function(difference) {
        if (difference)
          update4();
      });
      context.on("enter.undo_redo", update4);
      function update4() {
        buttons.classed("disabled", function(d) {
          return !editable() || !d.annotation();
        }).each(function() {
          var selection3 = select_default2(this);
          if (!selection3.select(".tooltip.in").empty()) {
            selection3.call(tooltipBehavior.updateContent);
          }
        });
      }
    };
    tool.uninstall = function() {
      context.keybinding().off(commands[0].cmd).off(commands[1].cmd);
      context.map().on("move.undo_redo", null).on("drawn.undo_redo", null);
      context.history().on("change.undo_redo", null);
      context.on("enter.undo_redo", null);
    };
    return tool;
  }

  // modules/ui/tools/rapid_features.js
  function uiToolRapidFeatures(context) {
    var toggleKeyDispatcher = dispatch_default("ai_feature_toggle");
    var rapidFeaturesToggleKey = "\u21E7" + _t("map_data.layers.ai-features.key");
    var datasetDialog = uiRapidFeatureToggleDialog(context, uiCmd(rapidFeaturesToggleKey), toggleKeyDispatcher);
    var powerUserDialog = uiRapidPowerUserFeaturesDialog(context);
    var showPowerUser = context.rapidContext().showPowerUser;
    var tool = {
      id: "rapid_features",
      label: _t("toolbar.rapid_features")
    };
    context.keybinding().on(uiCmd(rapidFeaturesToggleKey), function(d3_event) {
      d3_event.preventDefault();
      d3_event.stopPropagation();
      toggleFeatures();
    });
    function layerEnabled() {
      return context.layers().layer("ai-features").enabled();
    }
    function toggleFeatures() {
      var layer2 = context.layers().layer("ai-features");
      layer2.enabled(!layer2.enabled());
      toggleKeyDispatcher.call("ai_feature_toggle");
    }
    function showFeatureToggleDialog() {
      context.container().call(datasetDialog);
    }
    function showPowerUserFeaturesDialog() {
      context.container().call(powerUserDialog);
    }
    tool.render = function(selection2) {
      var debouncedUpdate = debounce_default(update4, 100, {
        leading: true,
        trailing: true
      });
      var wrap2 = selection2.append("div").attr("class", showPowerUser ? "joined" : null).style("display", "flex");
      context.map().on("move.rapid_features", debouncedUpdate).on("drawn.rapid_features", debouncedUpdate);
      context.on("enter.rapid_features", update4);
      update4();
      function update4() {
        var rapidButton = wrap2.selectAll(".rapid-features").data([0]);
        var rapidButtonEnter = rapidButton.enter().append("button").attr("class", "bar-button rapid-features").attr("tabindex", -1).on("click", showFeatureToggleDialog).call(uiTooltip().placement("bottom").title(_t("shortcuts.browsing.display_options.rapid_features_data")).keys(rapidFeaturesToggleKey));
        rapidButtonEnter.append("svg").attr("class", "logo-rapid").append("use").attr("xlink:href", "#iD-logo-rapid");
        rapidButton.merge(rapidButtonEnter).classed("layer-off", !layerEnabled());
        var powerUserButton = wrap2.selectAll(".rapid-poweruser-features").data(showPowerUser ? [0] : []);
        powerUserButton.enter().append("button").attr("class", "bar-button rapid-poweruser-features").attr("tabindex", -1).on("click", showPowerUserFeaturesDialog).call(uiTooltip().placement("bottom").title(_t("rapid_poweruser_features.heading.label"))).append("div").attr("class", "beta");
      }
    };
    return tool;
  }

  // modules/ui/top_toolbar.js
  function uiTopToolbar(context) {
    var sidebarToggle = uiToolSidebarToggle(context), rapidFeatures = uiToolRapidFeatures(context), modes = uiToolOldDrawModes(context), notes2 = uiToolNotes(context), undoRedo = uiToolUndoRedo(context), save = uiToolSave(context), downloadOsc = uiToolDownloadOsc(context);
    function notesEnabled() {
      var noteLayer = context.layers().layer("notes");
      return noteLayer && noteLayer.enabled();
    }
    function topToolbar(bar) {
      bar.on("wheel.topToolbar", function(d3_event) {
        if (!d3_event.deltaX) {
          bar.node().scrollLeft += d3_event.deltaY;
        }
      });
      var debouncedUpdate = debounce_default(update4, 500, {
        leading: true,
        trailing: true
      });
      context.layers().on("change.topToolbar", debouncedUpdate);
      update4();
      function update4() {
        var tools = [
          sidebarToggle,
          "spacer",
          modes,
          rapidFeatures
        ];
        tools.push("spacer");
        if (notesEnabled()) {
          tools = tools.concat([notes2, "spacer"]);
        }
        var q2 = utilStringQs(window.location.hash);
        if (q2.support_download_osc === "true") {
          tools.push(downloadOsc);
        }
        tools = tools.concat([undoRedo, save]);
        var toolbarItems = bar.selectAll(".toolbar-item").data(tools, function(d) {
          return d.id || d;
        });
        toolbarItems.exit().each(function(d) {
          if (d.uninstall) {
            d.uninstall();
          }
        }).remove();
        var itemsEnter = toolbarItems.enter().append("div").attr("class", function(d) {
          var classes = "toolbar-item " + (d.id || d).replace("_", "-");
          if (d.klass)
            classes += " " + d.klass;
          return classes;
        });
        var actionableItems = itemsEnter.filter(function(d) {
          return d !== "spacer";
        });
        actionableItems.append("div").attr("class", "item-content").each(function(d) {
          select_default2(this).call(d.render, bar);
        });
        actionableItems.append("div").attr("class", "item-label").html(function(d) {
          return d.label;
        });
      }
    }
    return topToolbar;
  }

  // modules/ui/zoom_to_selection.js
  function uiZoomToSelection(context) {
    function isDisabled() {
      var mode = context.mode();
      return !mode || !mode.zoomToSelected;
    }
    var _lastPointerUpType;
    function pointerup(d3_event) {
      _lastPointerUpType = d3_event.pointerType;
    }
    function click(d3_event) {
      d3_event.preventDefault();
      if (isDisabled()) {
        if (_lastPointerUpType === "touch" || _lastPointerUpType === "pen") {
          context.ui().flash.duration(2e3).iconName("#iD-icon-framed-dot").iconClass("disabled").label(_t.html("inspector.zoom_to.no_selection"))();
        }
      } else {
        var mode = context.mode();
        if (mode && mode.zoomToSelected) {
          mode.zoomToSelected();
        }
      }
      _lastPointerUpType = null;
    }
    return function(selection2) {
      var tooltipBehavior = uiTooltip().placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left").title(function() {
        if (isDisabled()) {
          return _t.html("inspector.zoom_to.no_selection");
        }
        return _t.html("inspector.zoom_to.title");
      }).keys([_t("inspector.zoom_to.key")]);
      var button = selection2.append("button").on("pointerup", pointerup).on("click", click).call(svgIcon("#iD-icon-framed-dot", "light")).call(tooltipBehavior);
      function setEnabledState() {
        button.classed("disabled", isDisabled());
        if (!button.select(".tooltip.in").empty()) {
          button.call(tooltipBehavior.updateContent);
        }
      }
      context.on("enter.uiZoomToSelection", setEnabledState);
      setEnabledState();
    };
  }

  // modules/ui/pane.js
  function uiPane(id2, context) {
    var _key;
    var _label = "";
    var _description = "";
    var _iconName = "";
    var _sections;
    var _paneSelection = select_default2(null);
    var _paneTooltip;
    var pane = {
      id: id2
    };
    pane.label = function(val) {
      if (!arguments.length)
        return _label;
      _label = val;
      return pane;
    };
    pane.key = function(val) {
      if (!arguments.length)
        return _key;
      _key = val;
      return pane;
    };
    pane.description = function(val) {
      if (!arguments.length)
        return _description;
      _description = val;
      return pane;
    };
    pane.iconName = function(val) {
      if (!arguments.length)
        return _iconName;
      _iconName = val;
      return pane;
    };
    pane.sections = function(val) {
      if (!arguments.length)
        return _sections;
      _sections = val;
      return pane;
    };
    pane.selection = function() {
      return _paneSelection;
    };
    function hidePane() {
      context.ui().togglePanes();
    }
    pane.togglePane = function(d3_event) {
      if (d3_event)
        d3_event.preventDefault();
      _paneTooltip.hide();
      context.ui().togglePanes(!_paneSelection.classed("shown") ? _paneSelection : void 0);
    };
    pane.renderToggleButton = function(selection2) {
      if (!_paneTooltip) {
        _paneTooltip = uiTooltip().placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left").title(_description).keys([_key]);
      }
      selection2.append("button").on("click", pane.togglePane).call(svgIcon("#" + _iconName, "light")).call(_paneTooltip);
    };
    pane.renderContent = function(selection2) {
      if (_sections) {
        _sections.forEach(function(section) {
          selection2.call(section.render);
        });
      }
    };
    pane.renderPane = function(selection2) {
      _paneSelection = selection2.append("div").attr("class", "fillL map-pane hide " + id2 + "-pane").attr("pane", id2);
      var heading = _paneSelection.append("div").attr("class", "pane-heading");
      heading.append("h2").html(_label);
      heading.append("button").on("click", hidePane).call(svgIcon("#iD-icon-close"));
      _paneSelection.append("div").attr("class", "pane-content").call(pane.renderContent);
      if (_key) {
        context.keybinding().on(_key, pane.togglePane);
      }
    };
    return pane;
  }

  // modules/ui/sections/background_display_options.js
  function uiSectionBackgroundDisplayOptions(context) {
    var section = uiSection("background-display-options", context).label(_t.html("background.display_options")).disclosureContent(renderDisclosureContent);
    var _detected2 = utilDetect();
    var _storedOpacity = corePreferences("background-opacity");
    var _minVal = 0;
    var _maxVal = _detected2.cssfilters ? 3 : 1;
    var _sliders = _detected2.cssfilters ? ["brightness", "contrast", "saturation", "sharpness"] : ["brightness"];
    var _options = {
      brightness: _storedOpacity !== null ? +_storedOpacity : 1,
      contrast: 1,
      saturation: 1,
      sharpness: 1
    };
    function clamp4(x2, min2, max2) {
      return Math.max(min2, Math.min(x2, max2));
    }
    function updateValue(d, val) {
      val = clamp4(val, _minVal, _maxVal);
      _options[d] = val;
      context.background()[d](val);
      if (d === "brightness") {
        corePreferences("background-opacity", val);
      }
      section.reRender();
    }
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".display-options-container").data([0]);
      var containerEnter = container.enter().append("div").attr("class", "display-options-container controls-list");
      var slidersEnter = containerEnter.selectAll(".display-control").data(_sliders).enter().append("div").attr("class", function(d) {
        return "display-control display-control-" + d;
      });
      slidersEnter.append("h5").html(function(d) {
        return _t.html("background." + d);
      }).append("span").attr("class", function(d) {
        return "display-option-value display-option-value-" + d;
      });
      var sildersControlEnter = slidersEnter.append("div").attr("class", "control-wrap");
      sildersControlEnter.append("input").attr("class", function(d) {
        return "display-option-input display-option-input-" + d;
      }).attr("type", "range").attr("min", _minVal).attr("max", _maxVal).attr("step", "0.05").on("input", function(d3_event, d) {
        var val = select_default2(this).property("value");
        if (!val && d3_event && d3_event.target) {
          val = d3_event.target.value;
        }
        updateValue(d, val);
      });
      sildersControlEnter.append("button").attr("title", _t("background.reset")).attr("class", function(d) {
        return "display-option-reset display-option-reset-" + d;
      }).on("click", function(d3_event, d) {
        if (d3_event.button !== 0)
          return;
        updateValue(d, 1);
      }).call(svgIcon("#iD-icon-" + (_mainLocalizer.textDirection() === "rtl" ? "redo" : "undo")));
      containerEnter.append("a").attr("class", "display-option-resetlink").attr("href", "#").html(_t.html("background.reset_all")).on("click", function(d3_event) {
        d3_event.preventDefault();
        for (var i2 = 0; i2 < _sliders.length; i2++) {
          updateValue(_sliders[i2], 1);
        }
      });
      container = containerEnter.merge(container);
      container.selectAll(".display-option-input").property("value", function(d) {
        return _options[d];
      });
      container.selectAll(".display-option-value").html(function(d) {
        return Math.floor(_options[d] * 100) + "%";
      });
      container.selectAll(".display-option-reset").classed("disabled", function(d) {
        return _options[d] === 1;
      });
      if (containerEnter.size() && _options.brightness !== 1) {
        context.background().brightness(_options.brightness);
      }
    }
    return section;
  }

  // modules/ui/settings/custom_background.js
  var import_marked7 = __toModule(require_marked());
  function uiSettingsCustomBackground() {
    var dispatch12 = dispatch_default("change");
    function render(selection2) {
      var _origSettings = {
        template: corePreferences("background-custom-template")
      };
      var _currSettings = {
        template: corePreferences("background-custom-template")
      };
      var example = "https://{switch:a,b,c}.tile.openstreetmap.org/{zoom}/{x}/{y}.png";
      var modal = uiConfirm(selection2).okButton();
      modal.classed("settings-modal settings-custom-background", true);
      modal.select(".modal-section.header").append("h3").html(_t.html("settings.custom_background.header"));
      var textSection = modal.select(".modal-section.message-text");
      var instructions = "".concat(_t.html("settings.custom_background.instructions.info"), "\n") + "\n" + "#### ".concat(_t.html("settings.custom_background.instructions.wms.tokens_label"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.wms.tokens.proj"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.wms.tokens.wkid"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.wms.tokens.dimensions"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.wms.tokens.bbox"), "\n") + "\n" + "#### ".concat(_t.html("settings.custom_background.instructions.tms.tokens_label"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.tms.tokens.xyz"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.tms.tokens.flipped_y"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.tms.tokens.switch"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.tms.tokens.quadtile"), "\n") + "* ".concat(_t.html("settings.custom_background.instructions.tms.tokens.scale_factor"), "\n") + "\n" + "#### ".concat(_t.html("settings.custom_background.instructions.example"), "\n") + "`".concat(example, "`");
      textSection.append("div").attr("class", "instructions-template").html((0, import_marked7.default)(instructions));
      textSection.append("textarea").attr("class", "field-template").attr("placeholder", _t("settings.custom_background.template.placeholder")).call(utilNoAuto).property("value", _currSettings.template);
      var buttonSection = modal.select(".modal-section.buttons");
      buttonSection.insert("button", ".ok-button").attr("class", "button cancel-button secondary-action").html(_t.html("confirm.cancel"));
      buttonSection.select(".cancel-button").on("click.cancel", clickCancel);
      buttonSection.select(".ok-button").attr("disabled", isSaveDisabled).on("click.save", clickSave);
      function isSaveDisabled() {
        return null;
      }
      function clickCancel() {
        textSection.select(".field-template").property("value", _origSettings.template);
        corePreferences("background-custom-template", _origSettings.template);
        this.blur();
        modal.close();
      }
      function clickSave() {
        _currSettings.template = textSection.select(".field-template").property("value");
        corePreferences("background-custom-template", _currSettings.template);
        this.blur();
        modal.close();
        dispatch12.call("change", this, _currSettings);
      }
    }
    return utilRebind(render, dispatch12, "on");
  }

  // modules/ui/sections/background_list.js
  function uiSectionBackgroundList(context) {
    var _backgroundList = select_default2(null);
    var _customSource = context.background().findSource("custom");
    var _settingsCustomBackground = uiSettingsCustomBackground(context).on("change", customChanged);
    var section = uiSection("background-list", context).label(_t("background.backgrounds")).disclosureContent(renderDisclosureContent);
    var favoriteBackgroundsJSON = corePreferences("background-favorites");
    var _favoriteBackgrounds = favoriteBackgroundsJSON ? JSON.parse(favoriteBackgroundsJSON) : {};
    function previousBackgroundID() {
      return corePreferences("background-last-used-toggle");
    }
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".layer-background-list").data([0]);
      _backgroundList = container.enter().append("ul").attr("class", "layer-list layer-background-list").attr("dir", "auto").merge(container);
      var bgExtrasListEnter = selection2.selectAll(".bg-extras-list").data([0]).enter().append("ul").attr("class", "layer-list bg-extras-list");
      var minimapLabelEnter = bgExtrasListEnter.append("li").attr("class", "minimap-toggle-item").append("label").call(uiTooltip().title(_t("background.minimap.tooltip")).keys([_t("background.minimap.key")]).placement("top"));
      minimapLabelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        uiMapInMap.toggle();
      });
      minimapLabelEnter.append("span").text(_t("background.minimap.description"));
      var panelLabelEnter = bgExtrasListEnter.append("li").attr("class", "background-panel-toggle-item").append("label").call(uiTooltip().title(_t("background.panel.tooltip")).keys([uiCmd("\u2318\u21E7" + _t("info_panels.background.key"))]).placement("top"));
      panelLabelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        context.ui().info.toggle("background");
      });
      panelLabelEnter.append("span").text(_t("background.panel.description"));
      var locPanelLabelEnter = bgExtrasListEnter.append("li").attr("class", "location-panel-toggle-item").append("label").call(uiTooltip().title(_t("background.location_panel.tooltip")).keys([uiCmd("\u2318\u21E7" + _t("info_panels.location.key"))]).placement("top"));
      locPanelLabelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        context.ui().info.toggle("location");
      });
      locPanelLabelEnter.append("span").text(_t("background.location_panel.description"));
      selection2.selectAll(".imagery-faq").data([0]).enter().append("div").attr("class", "imagery-faq").append("a").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).attr("href", "https://github.com/openstreetmap/iD/blob/develop/FAQ.md#how-can-i-report-an-issue-with-background-imagery").append("span").text(_t("background.imagery_problem_faq"));
      _backgroundList.call(drawListItems, "radio", chooseBackground, function(d) {
        return !d.isHidden() && !d.overlay;
      });
    }
    function setTooltips(selection2) {
      selection2.each(function(d, i2, nodes) {
        var item = select_default2(nodes[i2]).select("label");
        var span = item.select("span");
        var placement = i2 < nodes.length / 2 ? "bottom" : "top";
        var description = d.description();
        var isOverflowing = span.property("clientWidth") !== span.property("scrollWidth");
        item.call(uiTooltip().destroyAny);
        if (d.id === previousBackgroundID()) {
          item.call(uiTooltip().placement(placement).title("<div>" + _t("background.switch") + "</div>").keys([uiCmd("\u2318" + _t("background.key"))]));
        } else if (description || isOverflowing) {
          item.call(uiTooltip().placement(placement).title(description || d.name()));
        }
      });
    }
    function sortSources(a, b2) {
      return _favoriteBackgrounds[a.id] && !_favoriteBackgrounds[b2.id] ? -1 : _favoriteBackgrounds[b2.id] && !_favoriteBackgrounds[a.id] ? 1 : a.best() && !b2.best() ? -1 : b2.best() && !a.best() ? 1 : descending(a.area(), b2.area()) || ascending(a.name(), b2.name()) || 0;
    }
    function drawListItems(layerList, type3, change, filter2) {
      var sources = context.background().sources(context.map().extent(), context.map().zoom(), true).filter(filter2);
      var layerLinks = layerList.selectAll("li").data(sources, function(d) {
        return d.id;
      });
      layerLinks.exit().remove();
      var layerLinksEnter = layerLinks.enter().append("li").classed("layer-custom", function(d) {
        return d.id === "custom";
      }).classed("best", function(d) {
        return d.best();
      });
      var label = layerLinksEnter.append("label");
      label.append("input").attr("type", type3).attr("name", "layers").on("change", change);
      label.append("span").attr("class", "background-name").text(function(d) {
        return d.name();
      });
      layerLinksEnter.append("button").attr("class", "background-favorite-button").classed("active", function(d) {
        return !!_favoriteBackgrounds[d.id];
      }).attr("tabindex", -1).call(svgIcon("#iD-icon-favorite")).on("click", function(d3_event, d) {
        if (_favoriteBackgrounds[d.id]) {
          select_default2(d3_event.currentTarget).classed("active", false);
          delete _favoriteBackgrounds[d.id];
        } else {
          select_default2(d3_event.currentTarget).classed("active", true);
          _favoriteBackgrounds[d.id] = true;
        }
        corePreferences("background-favorites", JSON.stringify(_favoriteBackgrounds));
        select_default2(d3_event.currentTarget.parentElement).transition().duration(300).ease(cubicInOut).style("background-color", "orange").transition().duration(300).ease(cubicInOut).style("background-color", null);
        layerList.selectAll("li").sort(sortSources);
        layerList.call(updateLayerSelections);
      });
      layerLinksEnter.filter(function(d) {
        return d.id === "custom";
      }).append("button").attr("class", "layer-browse").call(uiTooltip().title(_t("settings.custom_background.tooltip")).placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left")).on("click", editCustom).call(svgIcon("#iD-icon-more"));
      layerLinksEnter.filter(function(d) {
        return d.best();
      }).selectAll("label").append("span").attr("class", "best").call(uiTooltip().title(_t("background.best_imagery")).placement("bottom")).call(svgIcon("#iD-icon-best-background"));
      layerList.selectAll("li").sort(sortSources);
      layerList.call(updateLayerSelections);
    }
    function updateLayerSelections(selection2) {
      function active(d) {
        return context.background().showsLayer(d);
      }
      selection2.selectAll("li").classed("active", active).classed("switch", function(d) {
        return d.id === previousBackgroundID();
      }).call(setTooltips).selectAll("input").property("checked", active);
    }
    function chooseBackground(d3_event, d) {
      if (d.id === "custom" && !d.template()) {
        return editCustom();
      }
      var previousBackground2 = context.background().baseLayerSource();
      corePreferences("background-last-used-toggle", previousBackground2.id);
      corePreferences("background-last-used", d.id);
      context.background().baseLayerSource(d);
      document.activeElement.blur();
    }
    function customChanged(d) {
      if (d && d.template) {
        _customSource.template(d.template);
        chooseBackground(void 0, _customSource);
      } else {
        _customSource.template("");
        chooseBackground(void 0, context.background().findSource("none"));
      }
    }
    function editCustom(d3_event) {
      d3_event.preventDefault();
      context.container().call(_settingsCustomBackground);
    }
    context.background().on("change.background_list", function() {
      _backgroundList.call(updateLayerSelections);
    });
    context.map().on("move.background_list", debounce_default(function() {
      window.requestIdleCallback(section.reRender);
    }, 1e3));
    function getBackgrounds(filter2) {
      return context.background().sources(context.map().extent(), context.map().zoom(), true).filter(filter2);
    }
    function chooseBackgroundAtOffset(offset) {
      var backgrounds = getBackgrounds(function(d) {
        return !d.isHidden() && !d.overlay;
      });
      backgrounds.sort(sortSources);
      var currentBackground = context.background().baseLayerSource();
      var foundIndex = backgrounds.indexOf(currentBackground);
      if (foundIndex === -1) {
        return;
      }
      var nextBackgroundIndex = (foundIndex + offset + backgrounds.length) % backgrounds.length;
      var nextBackground2 = backgrounds[nextBackgroundIndex];
      if (nextBackground2.id === "custom" && !nextBackground2.template()) {
        nextBackgroundIndex = (nextBackgroundIndex + offset + backgrounds.length) % backgrounds.length;
        nextBackground2 = backgrounds[nextBackgroundIndex];
      }
      chooseBackground(void 0, nextBackground2);
    }
    function nextBackground() {
      chooseBackgroundAtOffset(1);
    }
    function previousBackground() {
      chooseBackgroundAtOffset(-1);
    }
    context.keybinding().on(_t("background.next_background.key"), nextBackground).on(_t("background.previous_background.key"), previousBackground);
    return section;
  }

  // modules/ui/sections/background_offset.js
  function uiSectionBackgroundOffset(context) {
    var section = uiSection("background-offset", context).label(_t.html("background.fix_misalignment")).disclosureContent(renderDisclosureContent).expandedByDefault(false);
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    var _directions = [["top", [0, -0.5]], ["left", [-0.5, 0]], ["right", [0.5, 0]], ["bottom", [0, 0.5]]];
    function updateValue() {
      var meters = geoOffsetToMeters(context.background().offset());
      var x2 = +meters[0].toFixed(2);
      var y = +meters[1].toFixed(2);
      context.container().selectAll(".nudge-inner-rect").select("input").classed("error", false).property("value", x2 + ", " + y);
      context.container().selectAll(".nudge-reset").classed("disabled", function() {
        return x2 === 0 && y === 0;
      });
    }
    function resetOffset() {
      context.background().offset([0, 0]);
      updateValue();
    }
    function nudge(d) {
      context.background().nudge(d, context.map().zoom());
      updateValue();
    }
    function inputOffset() {
      var input4 = select_default2(this);
      var d = input4.node().value;
      if (d === "")
        return resetOffset();
      d = d.replace(/;/g, ",").split(",").map(function(n2) {
        return !isNaN(n2) && n2;
      });
      if (d.length !== 2 || !d[0] || !d[1]) {
        input4.classed("error", true);
        return;
      }
      context.background().offset(geoMetersToOffset(d));
      updateValue();
    }
    function dragOffset(d3_event) {
      if (d3_event.button !== 0)
        return;
      var origin = [d3_event.clientX, d3_event.clientY];
      var pointerId = d3_event.pointerId || "mouse";
      context.container().append("div").attr("class", "nudge-surface");
      select_default2(window).on(_pointerPrefix + "move.drag-bg-offset", pointermove).on(_pointerPrefix + "up.drag-bg-offset", pointerup);
      if (_pointerPrefix === "pointer") {
        select_default2(window).on("pointercancel.drag-bg-offset", pointerup);
      }
      function pointermove(d3_event2) {
        if (pointerId !== (d3_event2.pointerId || "mouse"))
          return;
        var latest = [d3_event2.clientX, d3_event2.clientY];
        var d = [-(origin[0] - latest[0]) / 4, -(origin[1] - latest[1]) / 4];
        origin = latest;
        nudge(d);
      }
      function pointerup(d3_event2) {
        if (pointerId !== (d3_event2.pointerId || "mouse"))
          return;
        if (d3_event2.button !== 0)
          return;
        context.container().selectAll(".nudge-surface").remove();
        select_default2(window).on(".drag-bg-offset", null);
      }
    }
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".nudge-container").data([0]);
      var containerEnter = container.enter().append("div").attr("class", "nudge-container");
      containerEnter.append("div").attr("class", "nudge-instructions").html(_t.html("background.offset"));
      var nudgeWrapEnter = containerEnter.append("div").attr("class", "nudge-controls-wrap");
      var nudgeEnter = nudgeWrapEnter.append("div").attr("class", "nudge-outer-rect").on(_pointerPrefix + "down", dragOffset);
      nudgeEnter.append("div").attr("class", "nudge-inner-rect").append("input").attr("type", "text").on("change", inputOffset);
      nudgeWrapEnter.append("div").selectAll("button").data(_directions).enter().append("button").attr("class", function(d) {
        return d[0] + " nudge";
      }).on("click", function(d3_event, d) {
        nudge(d[1]);
      });
      nudgeWrapEnter.append("button").attr("title", _t("background.reset")).attr("class", "nudge-reset disabled").on("click", function(d3_event) {
        d3_event.preventDefault();
        resetOffset();
      }).call(svgIcon("#iD-icon-" + (_mainLocalizer.textDirection() === "rtl" ? "redo" : "undo")));
      updateValue();
    }
    context.background().on("change.backgroundOffset-update", updateValue);
    return section;
  }

  // modules/ui/sections/grid_display_options.js
  function uiSectionGridDisplayOptions(context) {
    var section = uiSection("grid-display-options", context).label(_t("background.grid.grids")).disclosureContent(gridDisplayOptions);
    function chooseGrid(d3_event, d) {
      d3_event.preventDefault();
      context.background().numGridSplits(d.numSplit);
    }
    function render(selection2) {
      var container = selection2.selectAll(".layer-grid-list").data([0]);
      var gridList = container.enter().append("ul").attr("class", "layer-list layer-grid-list").attr("dir", "auto").merge(container);
      var gridItems = gridList.selectAll("li").data([{
        numSplit: 0,
        name: _t("background.grid.no_grid")
      }, {
        numSplit: 2,
        name: _t("background.grid.n_by_n", {
          num: 2
        })
      }, {
        numSplit: 3,
        name: _t("background.grid.n_by_n", {
          num: 3
        })
      }, {
        numSplit: 4,
        name: _t("background.grid.n_by_n", {
          num: 4
        })
      }, {
        numSplit: 5,
        name: _t("background.grid.n_by_n", {
          num: 5
        })
      }, {
        numSplit: 6,
        name: _t("background.grid.n_by_n", {
          num: 6
        })
      }], function(d) {
        return d.name;
      });
      var enter = gridItems.enter().insert("li", ".custom-gridsopt").attr("class", "gridsopt");
      var label = enter.append("label");
      label.append("input").attr("type", "radio").attr("name", "grids").property("checked", function(d) {
        return d.numSplit === context.background().numGridSplits();
      }).on("change", chooseGrid);
      label.append("span").text(function(d) {
        return d.name;
      });
      gridItems.exit().remove();
    }
    function gridDisplayOptions(selection2) {
      var gridOptionsSection = select_default2(".section-grid-display-options");
      context.rapidContext().on("task_extent_set.grid_display_options", function() {
        if (context.rapidContext().isTaskRectangular()) {
          gridOptionsSection.classed("hide", false);
          selection2.call(render);
        }
      });
      if (!context.rapidContext().isTaskRectangular()) {
        gridOptionsSection.classed("hide", true);
        return;
      }
    }
    return section;
  }

  // modules/ui/sections/overlay_list.js
  function uiSectionOverlayList(context) {
    var section = uiSection("overlay-list", context).label(_t.html("background.overlays")).disclosureContent(renderDisclosureContent);
    var _overlayList = select_default2(null);
    function setTooltips(selection2) {
      selection2.each(function(d, i2, nodes) {
        var item = select_default2(this).select("label");
        var span = item.select("span");
        var placement = i2 < nodes.length / 2 ? "bottom" : "top";
        var description = d.description();
        var isOverflowing = span.property("clientWidth") !== span.property("scrollWidth");
        item.call(uiTooltip().destroyAny);
        if (description || isOverflowing) {
          item.call(uiTooltip().placement(placement).title(description || d.name()));
        }
      });
    }
    function updateLayerSelections(selection2) {
      function active(d) {
        return context.background().showsLayer(d);
      }
      selection2.selectAll("li").classed("active", active).call(setTooltips).selectAll("input").property("checked", active);
    }
    function chooseOverlay(d3_event, d) {
      d3_event.preventDefault();
      context.background().toggleOverlayLayer(d);
      _overlayList.call(updateLayerSelections);
      document.activeElement.blur();
    }
    function drawListItems(layerList, type3, change, filter2) {
      var sources = context.background().sources(context.map().extent(), context.map().zoom(), true).filter(filter2);
      var layerLinks = layerList.selectAll("li").data(sources, function(d) {
        return d.name();
      });
      layerLinks.exit().remove();
      var enter = layerLinks.enter().append("li");
      var label = enter.append("label");
      label.append("input").attr("type", type3).attr("name", "layers").on("change", change);
      label.append("span").html(function(d) {
        return d.label();
      });
      layerList.selectAll("li").sort(sortSources);
      layerList.call(updateLayerSelections);
      function sortSources(a, b2) {
        return a.best() && !b2.best() ? -1 : b2.best() && !a.best() ? 1 : descending(a.area(), b2.area()) || ascending(a.name(), b2.name()) || 0;
      }
    }
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".layer-overlay-list").data([0]);
      _overlayList = container.enter().append("ul").attr("class", "layer-list layer-overlay-list").attr("dir", "auto").merge(container);
      _overlayList.call(drawListItems, "checkbox", chooseOverlay, function(d) {
        return !d.isHidden() && d.overlay;
      });
    }
    context.map().on("move.overlay_list", debounce_default(function() {
      window.requestIdleCallback(section.reRender);
    }, 1e3));
    return section;
  }

  // modules/ui/panes/background.js
  function uiPaneBackground(context) {
    var backgroundPane = uiPane("background", context).key(_t("background.key")).label(_t.html("background.title")).description(_t.html("background.description")).iconName("iD-icon-layers").sections([
      uiSectionBackgroundList(context),
      uiSectionOverlayList(context),
      uiSectionGridDisplayOptions(context),
      uiSectionBackgroundDisplayOptions(context),
      uiSectionBackgroundOffset(context)
    ]);
    return backgroundPane;
  }

  // modules/ui/panes/help.js
  var import_marked8 = __toModule(require_marked());
  function uiPaneHelp(context) {
    var docKeys = [["help", ["welcome", "open_data_h", "open_data", "before_start_h", "before_start", "open_source_h", "open_source", "open_source_help"]], ["overview", ["navigation_h", "navigation_drag", "navigation_zoom", "features_h", "features", "nodes_ways"]], ["editing", ["select_h", "select_left_click", "select_right_click", "select_space", "multiselect_h", "multiselect", "multiselect_shift_click", "multiselect_lasso", "undo_redo_h", "undo_redo", "save_h", "save", "save_validation", "upload_h", "upload", "backups_h", "backups", "keyboard_h", "keyboard"]], ["feature_editor", ["intro", "definitions", "type_h", "type", "type_picker", "fields_h", "fields_all_fields", "fields_example", "fields_add_field", "tags_h", "tags_all_tags", "tags_resources"]], ["points", ["intro", "add_point_h", "add_point", "add_point_finish", "move_point_h", "move_point", "delete_point_h", "delete_point", "delete_point_command"]], ["lines", ["intro", "add_line_h", "add_line", "add_line_draw", "add_line_continue", "add_line_finish", "modify_line_h", "modify_line_dragnode", "modify_line_addnode", "connect_line_h", "connect_line", "connect_line_display", "connect_line_drag", "connect_line_tag", "disconnect_line_h", "disconnect_line_command", "move_line_h", "move_line_command", "move_line_connected", "delete_line_h", "delete_line", "delete_line_command"]], ["areas", ["intro", "point_or_area_h", "point_or_area", "add_area_h", "add_area_command", "add_area_draw", "add_area_continue", "add_area_finish", "square_area_h", "square_area_command", "modify_area_h", "modify_area_dragnode", "modify_area_addnode", "delete_area_h", "delete_area", "delete_area_command"]], ["relations", ["intro", "edit_relation_h", "edit_relation", "edit_relation_add", "edit_relation_delete", "maintain_relation_h", "maintain_relation", "relation_types_h", "multipolygon_h", "multipolygon", "multipolygon_create", "multipolygon_merge", "turn_restriction_h", "turn_restriction", "turn_restriction_field", "turn_restriction_editing", "route_h", "route", "route_add", "boundary_h", "boundary", "boundary_add"]], ["operations", ["intro", "intro_2", "straighten", "orthogonalize", "circularize", "move", "rotate", "reflect", "continue", "reverse", "disconnect", "split", "extract", "merge", "delete", "downgrade", "copy_paste"]], ["notes", ["intro", "add_note_h", "add_note", "place_note", "move_note", "update_note_h", "update_note", "save_note_h", "save_note"]], ["imagery", ["intro", "sources_h", "choosing", "sources", "offsets_h", "offset", "offset_change"]], ["streetlevel", ["intro", "using_h", "using", "photos", "viewer"]], ["gps", ["intro", "survey", "using_h", "using", "tracing", "upload"]], ["qa", ["intro", "tools_h", "tools", "issues_h", "issues"]]];
    var headings = {
      "help.help.open_data_h": 3,
      "help.help.before_start_h": 3,
      "help.help.open_source_h": 3,
      "help.overview.navigation_h": 3,
      "help.overview.features_h": 3,
      "help.editing.select_h": 3,
      "help.editing.multiselect_h": 3,
      "help.editing.undo_redo_h": 3,
      "help.editing.save_h": 3,
      "help.editing.upload_h": 3,
      "help.editing.backups_h": 3,
      "help.editing.keyboard_h": 3,
      "help.feature_editor.type_h": 3,
      "help.feature_editor.fields_h": 3,
      "help.feature_editor.tags_h": 3,
      "help.points.add_point_h": 3,
      "help.points.move_point_h": 3,
      "help.points.delete_point_h": 3,
      "help.lines.add_line_h": 3,
      "help.lines.modify_line_h": 3,
      "help.lines.connect_line_h": 3,
      "help.lines.disconnect_line_h": 3,
      "help.lines.move_line_h": 3,
      "help.lines.delete_line_h": 3,
      "help.areas.point_or_area_h": 3,
      "help.areas.add_area_h": 3,
      "help.areas.square_area_h": 3,
      "help.areas.modify_area_h": 3,
      "help.areas.delete_area_h": 3,
      "help.relations.edit_relation_h": 3,
      "help.relations.maintain_relation_h": 3,
      "help.relations.relation_types_h": 2,
      "help.relations.multipolygon_h": 3,
      "help.relations.turn_restriction_h": 3,
      "help.relations.route_h": 3,
      "help.relations.boundary_h": 3,
      "help.notes.add_note_h": 3,
      "help.notes.update_note_h": 3,
      "help.notes.save_note_h": 3,
      "help.imagery.sources_h": 3,
      "help.imagery.offsets_h": 3,
      "help.streetlevel.using_h": 3,
      "help.gps.using_h": 3,
      "help.qa.tools_h": 3,
      "help.qa.issues_h": 3
    };
    var docs2 = docKeys.map(function(key) {
      var helpkey = "help." + key[0];
      var helpPaneReplacements = {
        version: context.rapidContext().version
      };
      var text = key[1].reduce(function(all, part) {
        var subkey = helpkey + "." + part;
        var depth = headings[subkey];
        var hhh = depth ? Array(depth + 1).join("#") + " " : "";
        return all + hhh + helpHtml(subkey, helpPaneReplacements) + "\n\n";
      }, "");
      return {
        title: _t.html(helpkey + ".title"),
        content: (0, import_marked8.default)(text.trim()).replace(/<code>/g, "<kbd>").replace(/<\/code>/g, "</kbd>")
      };
    });
    var helpPane = uiPane("help", context).key(_t("help.key")).label(_t.html("help.title")).description(_t.html("help.title")).iconName("iD-icon-help");
    helpPane.renderContent = function(content) {
      function clickHelp(d, i2) {
        var rtl = _mainLocalizer.textDirection() === "rtl";
        content.property("scrollTop", 0);
        helpPane.selection().select(".pane-heading h2").html(d.title);
        body.html(d.content);
        body.selectAll("a").attr("target", "_blank");
        menuItems.classed("selected", function(m) {
          return m.title === d.title;
        });
        nav.html("");
        if (rtl) {
          nav.call(drawNext).call(drawPrevious);
        } else {
          nav.call(drawPrevious).call(drawNext);
        }
        function drawNext(selection2) {
          if (i2 < docs2.length - 1) {
            var nextLink = selection2.append("a").attr("href", "#").attr("class", "next").on("click", function(d3_event) {
              d3_event.preventDefault();
              clickHelp(docs2[i2 + 1], i2 + 1);
            });
            nextLink.append("span").html(docs2[i2 + 1].title).call(svgIcon(rtl ? "#iD-icon-backward" : "#iD-icon-forward", "inline"));
          }
        }
        function drawPrevious(selection2) {
          if (i2 > 0) {
            var prevLink = selection2.append("a").attr("href", "#").attr("class", "previous").on("click", function(d3_event) {
              d3_event.preventDefault();
              clickHelp(docs2[i2 - 1], i2 - 1);
            });
            prevLink.call(svgIcon(rtl ? "#iD-icon-forward" : "#iD-icon-backward", "inline")).append("span").html(docs2[i2 - 1].title);
          }
        }
      }
      function clickWalkthrough(d3_event) {
        d3_event.preventDefault();
        if (context.inIntro())
          return;
        context.container().call(uiIntro(context));
        context.ui().togglePanes();
      }
      function clickShortcuts(d3_event) {
        d3_event.preventDefault();
        context.container().call(context.ui().shortcuts, true);
      }
      var toc = content.append("ul").attr("class", "toc");
      var menuItems = toc.selectAll("li").data(docs2).enter().append("li").append("a").attr("href", "#").html(function(d) {
        return d.title;
      }).on("click", function(d3_event, d) {
        d3_event.preventDefault();
        clickHelp(d, docs2.indexOf(d));
      });
      var shortcuts = toc.append("li").attr("class", "shortcuts").call(uiTooltip().title(_t.html("shortcuts.tooltip")).keys(["?"]).placement("top")).append("a").attr("href", "#").on("click", clickShortcuts);
      shortcuts.append("div").html(_t.html("shortcuts.title"));
      var walkthrough = toc.append("li").attr("class", "walkthrough").append("a").attr("href", "#").on("click", clickWalkthrough);
      walkthrough.append("svg").attr("class", "logo logo-walkthrough").append("use").attr("xlink:href", "#iD-logo-walkthrough");
      walkthrough.append("div").html(_t.html("splash.walkthrough"));
      var helpContent = content.append("div").attr("class", "left-content");
      var body = helpContent.append("div").attr("class", "body");
      var nav = helpContent.append("div").attr("class", "nav");
      clickHelp(docs2[0], 0);
    };
    return helpPane;
  }

  // modules/ui/sections/validation_issues.js
  function uiSectionValidationIssues(id2, severity, context) {
    var _issues = [];
    var section = uiSection(id2, context).label(function() {
      if (!_issues)
        return "";
      var issueCountText = _issues.length > 1e3 ? "1000+" : String(_issues.length);
      return _t("inspector.title_count", {
        title: _t.html("issues." + severity + "s.list_title"),
        count: issueCountText
      });
    }).disclosureContent(renderDisclosureContent).shouldDisplay(function() {
      return _issues && _issues.length;
    });
    function getOptions() {
      return {
        what: corePreferences("validate-what") || "edited",
        where: corePreferences("validate-where") || "all"
      };
    }
    function reloadIssues() {
      _issues = context.validator().getIssuesBySeverity(getOptions())[severity];
    }
    function renderDisclosureContent(selection2) {
      var center = context.map().center();
      var graph3 = context.graph();
      var issues = _issues.map(function withDistance(issue) {
        var extent6 = issue.extent(graph3);
        var dist = extent6 ? geoSphericalDistance(center, extent6.center()) : 0;
        return Object.assign(issue, {
          dist: dist
        });
      }).sort(function byDistance(a, b2) {
        return a.dist - b2.dist;
      });
      issues = issues.slice(0, 1e3);
      selection2.call(drawIssuesList, issues);
    }
    function drawIssuesList(selection2, issues) {
      var showAutoFix = corePreferences("rapid-internal-feature.showAutoFix") === "true";
      var list = selection2.selectAll(".issues-list").data([0]);
      list = list.enter().append("ul").attr("class", "layer-list issues-list " + severity + "s-list").merge(list);
      var items = list.selectAll("li").data(issues, function(d) {
        return d.key;
      });
      items.exit().remove();
      var itemsEnter = items.enter().append("li").attr("class", function(d) {
        return "issue severity-" + d.severity;
      });
      var labelsEnter = itemsEnter.append("button").attr("class", "issue-label").on("click", function(d3_event, d) {
        context.validator().focusIssue(d);
      }).on("mouseover", function(d3_event, d) {
        utilHighlightEntities(d.entityIds, true, context);
      }).on("mouseout", function(d3_event, d) {
        utilHighlightEntities(d.entityIds, false, context);
      });
      var textEnter = labelsEnter.append("span").attr("class", "issue-text");
      textEnter.append("span").attr("class", "issue-icon").each(function(d) {
        var iconName = "#iD-icon-" + (d.severity === "warning" ? "alert" : "error");
        select_default2(this).call(svgIcon(iconName));
      });
      textEnter.append("span").attr("class", "issue-message");
      if (showAutoFix) {
        labelsEnter.append("span").attr("class", "issue-autofix").each(function(d) {
          if (!d.autoArgs)
            return;
          select_default2(this).append("button").attr("title", _t("issues.fix_one.title")).datum(d).attr("class", "autofix action").on("click", function(d3_event, d2) {
            d3_event.preventDefault();
            d3_event.stopPropagation();
            utilHighlightEntities(d2.entityIds, false, context);
            context.perform.apply(context, d2.autoArgs);
            context.validator().validate();
          }).call(svgIcon("#iD-icon-wrench"));
        });
      }
      items = items.merge(itemsEnter).order();
      items.selectAll(".issue-message").html(function(d) {
        return d.message(context);
      });
      var canAutoFix = issues.filter(function(issue) {
        return issue.autoArgs;
      });
      var autoFixAll = selection2.selectAll(".autofix-all").data(showAutoFix && canAutoFix.length ? [0] : []);
      autoFixAll.exit().remove();
      var autoFixAllEnter = autoFixAll.enter().insert("div", ".issues-list").attr("class", "autofix-all");
      var linkEnter = autoFixAllEnter.append("a").attr("class", "autofix-all-link").attr("href", "#");
      linkEnter.append("span").attr("class", "autofix-all-link-text").html(_t.html("issues.fix_all.title"));
      linkEnter.append("span").attr("class", "autofix-all-link-icon").call(svgIcon("#iD-icon-wrench"));
      autoFixAll = autoFixAll.merge(autoFixAllEnter);
      autoFixAll.selectAll(".autofix-all-link").on("click", function() {
        context.pauseChangeDispatch();
        context.perform(actionNoop());
        canAutoFix.forEach(function(issue) {
          var args = issue.autoArgs.slice();
          if (typeof args[args.length - 1] !== "function") {
            args.pop();
          }
          args.push(_t("issues.fix_all.annotation"));
          context.replace.apply(context, args);
        });
        context.resumeChangeDispatch();
        context.validator().validate();
      });
    }
    context.validator().on("validated.uiSectionValidationIssues" + id2, function() {
      window.requestIdleCallback(function() {
        reloadIssues();
        section.reRender();
      });
    });
    context.map().on("move.uiSectionValidationIssues" + id2, debounce_default(function() {
      window.requestIdleCallback(function() {
        if (getOptions().where === "visible") {
          reloadIssues();
        }
        section.reRender();
      });
    }, 1e3));
    return section;
  }

  // modules/ui/sections/validation_options.js
  function uiSectionValidationOptions(context) {
    var section = uiSection("issues-options", context).content(renderContent);
    function renderContent(selection2) {
      var container = selection2.selectAll(".issues-options-container").data([0]);
      container = container.enter().append("div").attr("class", "issues-options-container").merge(container);
      var data2 = [{
        key: "what",
        values: ["edited", "all"]
      }, {
        key: "where",
        values: ["visible", "all"]
      }];
      var options = container.selectAll(".issues-option").data(data2, function(d) {
        return d.key;
      });
      var optionsEnter = options.enter().append("div").attr("class", function(d) {
        return "issues-option issues-option-" + d.key;
      });
      optionsEnter.append("div").attr("class", "issues-option-title").html(function(d) {
        return _t.html("issues.options." + d.key + ".title");
      });
      var valuesEnter = optionsEnter.selectAll("label").data(function(d) {
        return d.values.map(function(val) {
          return {
            value: val,
            key: d.key
          };
        });
      }).enter().append("label");
      valuesEnter.append("input").attr("type", "radio").attr("name", function(d) {
        return "issues-option-" + d.key;
      }).attr("value", function(d) {
        return d.value;
      }).property("checked", function(d) {
        return getOptions()[d.key] === d.value;
      }).on("change", function(d3_event, d) {
        updateOptionValue(d3_event, d.key, d.value);
      });
      valuesEnter.append("span").html(function(d) {
        return _t.html("issues.options." + d.key + "." + d.value);
      });
    }
    function getOptions() {
      return {
        what: corePreferences("validate-what") || "edited",
        where: corePreferences("validate-where") || "all"
      };
    }
    function updateOptionValue(d3_event, d, val) {
      if (!val && d3_event && d3_event.target) {
        val = d3_event.target.value;
      }
      corePreferences("validate-" + d, val);
      context.validator().validate();
    }
    return section;
  }

  // modules/ui/sections/validation_rules.js
  function uiSectionValidationRules(context) {
    var MINSQUARE = 0;
    var MAXSQUARE = 20;
    var DEFAULTSQUARE = 5;
    var section = uiSection("issues-rules", context).disclosureContent(renderDisclosureContent).label(_t.html("issues.rules.title"));
    var _ruleKeys = context.validator().getRuleKeys().filter(function(key) {
      return key !== "maprules";
    }).sort(function(key1, key2) {
      return _t("issues." + key1 + ".title") < _t("issues." + key2 + ".title") ? -1 : 1;
    });
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".issues-rulelist-container").data([0]);
      var containerEnter = container.enter().append("div").attr("class", "issues-rulelist-container");
      containerEnter.append("ul").attr("class", "layer-list issue-rules-list");
      var ruleLinks = containerEnter.append("div").attr("class", "issue-rules-links section-footer");
      ruleLinks.append("a").attr("class", "issue-rules-link").attr("href", "#").html(_t.html("issues.disable_all")).on("click", function(d3_event) {
        d3_event.preventDefault();
        context.validator().disableRules(_ruleKeys);
      });
      ruleLinks.append("a").attr("class", "issue-rules-link").attr("href", "#").html(_t.html("issues.enable_all")).on("click", function(d3_event) {
        d3_event.preventDefault();
        context.validator().disableRules([]);
      });
      container = container.merge(containerEnter);
      container.selectAll(".issue-rules-list").call(drawListItems, _ruleKeys, "checkbox", "rule", toggleRule, isRuleEnabled);
    }
    function drawListItems(selection2, data2, type3, name, change, active) {
      var items = selection2.selectAll("li").data(data2);
      items.exit().remove();
      var enter = items.enter().append("li");
      if (name === "rule") {
        enter.call(uiTooltip().title(function(d) {
          return _t.html("issues." + d + ".tip");
        }).placement("top"));
      }
      var label = enter.append("label");
      label.append("input").attr("type", type3).attr("name", name).on("change", change);
      label.append("span").html(function(d) {
        var params = {};
        if (d === "unsquare_way") {
          params.val = '<span class="square-degrees"></span>';
        }
        return _t.html("issues." + d + ".title", params);
      });
      items = items.merge(enter);
      items.classed("active", active).selectAll("input").property("checked", active).property("indeterminate", false);
      var degStr = corePreferences("validate-square-degrees");
      if (degStr === null) {
        degStr = DEFAULTSQUARE.toString();
      }
      var span = items.selectAll(".square-degrees");
      var input4 = span.selectAll(".square-degrees-input").data([0]);
      input4.enter().append("input").attr("type", "number").attr("min", MINSQUARE.toString()).attr("max", MAXSQUARE.toString()).attr("step", "0.5").attr("class", "square-degrees-input").call(utilNoAuto).on("click", function(d3_event) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        this.select();
      }).on("keyup", function(d3_event) {
        if (d3_event.keyCode === 13) {
          this.blur();
          this.select();
        }
      }).on("blur", changeSquare).merge(input4).property("value", degStr);
    }
    function changeSquare() {
      var input4 = select_default2(this);
      var degStr = utilGetSetValue(input4).trim();
      var degNum = parseFloat(degStr, 10);
      if (!isFinite(degNum)) {
        degNum = DEFAULTSQUARE;
      } else if (degNum > MAXSQUARE) {
        degNum = MAXSQUARE;
      } else if (degNum < MINSQUARE) {
        degNum = MINSQUARE;
      }
      degNum = Math.round(degNum * 10) / 10;
      degStr = degNum.toString();
      input4.property("value", degStr);
      corePreferences("validate-square-degrees", degStr);
      context.validator().revalidateUnsquare();
    }
    function isRuleEnabled(d) {
      return context.validator().isRuleEnabled(d);
    }
    function toggleRule(d3_event, d) {
      context.validator().toggleRule(d);
    }
    context.validator().on("validated.uiSectionValidationRules", function() {
      window.requestIdleCallback(section.reRender);
    });
    return section;
  }

  // modules/ui/sections/validation_status.js
  function uiSectionValidationStatus(context) {
    var section = uiSection("issues-status", context).content(renderContent).shouldDisplay(function() {
      var issues = context.validator().getIssues(getOptions());
      return issues.length === 0;
    });
    function getOptions() {
      return {
        what: corePreferences("validate-what") || "edited",
        where: corePreferences("validate-where") || "all"
      };
    }
    function renderContent(selection2) {
      var box = selection2.selectAll(".box").data([0]);
      var boxEnter = box.enter().append("div").attr("class", "box");
      boxEnter.append("div").call(svgIcon("#iD-icon-apply", "pre-text"));
      var noIssuesMessage = boxEnter.append("span");
      noIssuesMessage.append("strong").attr("class", "message");
      noIssuesMessage.append("br");
      noIssuesMessage.append("span").attr("class", "details");
      renderIgnoredIssuesReset(selection2);
      setNoIssuesText(selection2);
    }
    function renderIgnoredIssuesReset(selection2) {
      var ignoredIssues = context.validator().getIssues({
        what: "all",
        where: "all",
        includeDisabledRules: true,
        includeIgnored: "only"
      });
      var resetIgnored = selection2.selectAll(".reset-ignored").data(ignoredIssues.length ? [0] : []);
      resetIgnored.exit().remove();
      var resetIgnoredEnter = resetIgnored.enter().append("div").attr("class", "reset-ignored section-footer");
      resetIgnoredEnter.append("a").attr("href", "#");
      resetIgnored = resetIgnored.merge(resetIgnoredEnter);
      resetIgnored.select("a").html(_t("inspector.title_count", {
        title: _t.html("issues.reset_ignored"),
        count: ignoredIssues.length
      }));
      resetIgnored.on("click", function(d3_event) {
        d3_event.preventDefault();
        context.validator().resetIgnoredIssues();
      });
    }
    function setNoIssuesText(selection2) {
      var opts = getOptions();
      function checkForHiddenIssues(cases) {
        for (var type3 in cases) {
          var hiddenOpts = cases[type3];
          var hiddenIssues = context.validator().getIssues(hiddenOpts);
          if (hiddenIssues.length) {
            selection2.select(".box .details").html(_t.html("issues.no_issues.hidden_issues." + type3, {
              count: hiddenIssues.length.toString()
            }));
            return;
          }
        }
        selection2.select(".box .details").html(_t.html("issues.no_issues.hidden_issues.none"));
      }
      var messageType;
      if (opts.what === "edited" && opts.where === "visible") {
        messageType = "edits_in_view";
        checkForHiddenIssues({
          elsewhere: {
            what: "edited",
            where: "all"
          },
          everything_else: {
            what: "all",
            where: "visible"
          },
          disabled_rules: {
            what: "edited",
            where: "visible",
            includeDisabledRules: "only"
          },
          everything_else_elsewhere: {
            what: "all",
            where: "all"
          },
          disabled_rules_elsewhere: {
            what: "edited",
            where: "all",
            includeDisabledRules: "only"
          },
          ignored_issues: {
            what: "edited",
            where: "visible",
            includeIgnored: "only"
          },
          ignored_issues_elsewhere: {
            what: "edited",
            where: "all",
            includeIgnored: "only"
          }
        });
      } else if (opts.what === "edited" && opts.where === "all") {
        messageType = "edits";
        checkForHiddenIssues({
          everything_else: {
            what: "all",
            where: "all"
          },
          disabled_rules: {
            what: "edited",
            where: "all",
            includeDisabledRules: "only"
          },
          ignored_issues: {
            what: "edited",
            where: "all",
            includeIgnored: "only"
          }
        });
      } else if (opts.what === "all" && opts.where === "visible") {
        messageType = "everything_in_view";
        checkForHiddenIssues({
          elsewhere: {
            what: "all",
            where: "all"
          },
          disabled_rules: {
            what: "all",
            where: "visible",
            includeDisabledRules: "only"
          },
          disabled_rules_elsewhere: {
            what: "all",
            where: "all",
            includeDisabledRules: "only"
          },
          ignored_issues: {
            what: "all",
            where: "visible",
            includeIgnored: "only"
          },
          ignored_issues_elsewhere: {
            what: "all",
            where: "all",
            includeIgnored: "only"
          }
        });
      } else if (opts.what === "all" && opts.where === "all") {
        messageType = "everything";
        checkForHiddenIssues({
          disabled_rules: {
            what: "all",
            where: "all",
            includeDisabledRules: "only"
          },
          ignored_issues: {
            what: "all",
            where: "all",
            includeIgnored: "only"
          }
        });
      }
      if (opts.what === "edited" && context.history().difference().summary().length === 0) {
        messageType = "no_edits";
      }
      selection2.select(".box .message").html(_t.html("issues.no_issues.message." + messageType));
    }
    context.validator().on("validated.uiSectionValidationStatus", function() {
      window.requestIdleCallback(section.reRender);
    });
    context.map().on("move.uiSectionValidationStatus", debounce_default(function() {
      window.requestIdleCallback(section.reRender);
    }, 1e3));
    return section;
  }

  // modules/ui/panes/issues.js
  function uiPaneIssues(context) {
    var issuesPane = uiPane("issues", context).key(_t("issues.key")).label(_t.html("issues.title")).description(_t.html("issues.title")).iconName("iD-icon-alert").sections([uiSectionValidationOptions(context), uiSectionValidationStatus(context), uiSectionValidationIssues("issues-errors", "error", context), uiSectionValidationIssues("issues-warnings", "warning", context), uiSectionValidationRules(context)]);
    return issuesPane;
  }

  // modules/ui/settings/custom_data.js
  function uiSettingsCustomData(context) {
    var dispatch12 = dispatch_default("change");
    function render(selection2) {
      var dataLayer = context.layers().layer("data");
      var _origSettings = {
        fileList: dataLayer && dataLayer.fileList() || null,
        url: corePreferences("settings-custom-data-url")
      };
      var _currSettings = {
        fileList: dataLayer && dataLayer.fileList() || null,
        url: corePreferences("settings-custom-data-url")
      };
      var modal = uiConfirm(selection2).okButton();
      modal.classed("settings-modal settings-custom-data", true);
      modal.select(".modal-section.header").append("h3").html(_t.html("settings.custom_data.header"));
      var textSection = modal.select(".modal-section.message-text");
      textSection.append("pre").attr("class", "instructions-file").html(_t.html("settings.custom_data.file.instructions"));
      textSection.append("input").attr("class", "field-file").attr("type", "file").property("files", _currSettings.fileList).on("change", function(d3_event) {
        var files = d3_event.target.files;
        if (files && files.length) {
          _currSettings.url = "";
          textSection.select(".field-url").property("value", "");
          _currSettings.fileList = files;
        } else {
          _currSettings.fileList = null;
        }
      });
      textSection.append("h4").html(_t.html("settings.custom_data.or"));
      textSection.append("pre").attr("class", "instructions-url").html(_t.html("settings.custom_data.url.instructions"));
      textSection.append("textarea").attr("class", "field-url").attr("placeholder", _t("settings.custom_data.url.placeholder")).call(utilNoAuto).property("value", _currSettings.url);
      var buttonSection = modal.select(".modal-section.buttons");
      buttonSection.insert("button", ".ok-button").attr("class", "button cancel-button secondary-action").html(_t.html("confirm.cancel"));
      buttonSection.select(".cancel-button").on("click.cancel", clickCancel);
      buttonSection.select(".ok-button").attr("disabled", isSaveDisabled).on("click.save", clickSave);
      function isSaveDisabled() {
        return null;
      }
      function clickCancel() {
        textSection.select(".field-url").property("value", _origSettings.url);
        corePreferences("settings-custom-data-url", _origSettings.url);
        this.blur();
        modal.close();
      }
      function clickSave() {
        _currSettings.url = textSection.select(".field-url").property("value").trim();
        if (_currSettings.url) {
          _currSettings.fileList = null;
        }
        if (_currSettings.fileList) {
          _currSettings.url = "";
        }
        corePreferences("settings-custom-data-url", _currSettings.url);
        this.blur();
        modal.close();
        dispatch12.call("change", this, _currSettings);
      }
    }
    return utilRebind(render, dispatch12, "on");
  }

  // modules/ui/sections/data_layers.js
  function uiSectionDataLayers(context) {
    var settingsCustomData = uiSettingsCustomData(context).on("change", customChanged);
    var layers = context.layers();
    var section = uiSection("data-layers", context).label(_t.html("map_data.data_layers")).disclosureContent(renderDisclosureContent);
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".data-layer-container").data([0]);
      container.enter().append("div").attr("class", "data-layer-container").merge(container).call(drawOsmItems).call(drawQAItems).call(drawCustomDataItems).call(drawVectorItems).call(drawPanelItems);
    }
    function showsLayer(which) {
      var layer2 = layers.layer(which);
      if (layer2) {
        return layer2.enabled();
      }
      return false;
    }
    function setLayer(which, enabled) {
      var mode = context.mode();
      if (mode && /^draw/.test(mode.id))
        return;
      var layer2 = layers.layer(which);
      if (layer2) {
        layer2.enabled(enabled);
        if (!enabled && (which === "osm" || which === "notes")) {
          context.enter(modeBrowse(context));
        }
      }
    }
    function toggleLayer(which) {
      setLayer(which, !showsLayer(which));
    }
    function drawOsmItems(selection2) {
      var osmKeys = ["osm", "notes"];
      var osmLayers = layers.all().filter(function(obj) {
        return osmKeys.indexOf(obj.id) !== -1;
      });
      var ul = selection2.selectAll(".layer-list-osm").data([0]);
      ul = ul.enter().append("ul").attr("class", "layer-list layer-list-osm").merge(ul);
      var li = ul.selectAll(".list-item").data(osmLayers);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", function(d) {
        return "list-item list-item-" + d.id;
      });
      var labelEnter = liEnter.append("label").each(function(d) {
        if (d.id === "osm") {
          select_default2(this).call(uiTooltip().title(_t.html("map_data.layers." + d.id + ".tooltip")).keys([uiCmd("\u2325" + _t("area_fill.wireframe.key"))]).placement("bottom"));
        } else {
          select_default2(this).call(uiTooltip().title(_t.html("map_data.layers." + d.id + ".tooltip")).placement("bottom"));
        }
      });
      labelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event, d) {
        toggleLayer(d.id);
      });
      labelEnter.append("span").html(function(d) {
        return _t.html("map_data.layers." + d.id + ".title");
      });
      li.merge(liEnter).classed("active", function(d) {
        return d.layer.enabled();
      }).selectAll("input").property("checked", function(d) {
        return d.layer.enabled();
      });
    }
    function drawQAItems(selection2) {
      var qaKeys = ["keepRight", "improveOSM", "osmose"];
      var qaLayers = layers.all().filter(function(obj) {
        return qaKeys.indexOf(obj.id) !== -1;
      });
      var ul = selection2.selectAll(".layer-list-qa").data([0]);
      ul = ul.enter().append("ul").attr("class", "layer-list layer-list-qa").merge(ul);
      var li = ul.selectAll(".list-item").data(qaLayers);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", function(d) {
        return "list-item list-item-" + d.id;
      });
      var labelEnter = liEnter.append("label").each(function(d) {
        select_default2(this).call(uiTooltip().title(_t.html("map_data.layers." + d.id + ".tooltip")).placement("bottom"));
      });
      labelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event, d) {
        toggleLayer(d.id);
      });
      labelEnter.append("span").html(function(d) {
        return _t.html("map_data.layers." + d.id + ".title");
      });
      li.merge(liEnter).classed("active", function(d) {
        return d.layer.enabled();
      }).selectAll("input").property("checked", function(d) {
        return d.layer.enabled();
      });
    }
    function drawVectorItems(selection2) {
      var dataLayer = layers.layer("data");
      var vtData = [{
        name: "Detroit Neighborhoods/Parks",
        src: "neighborhoods-parks",
        tooltip: "Neighborhood boundaries and parks as compiled by City of Detroit in concert with community groups.",
        template: "https://{switch:a,b,c,d}.tiles.mapbox.com/v4/jonahadkins.cjksmur6x34562qp9iv1u3ksf-54hev,jonahadkins.cjksmqxdx33jj2wp90xd9x2md-4e5y2/{z}/{x}/{y}.vector.pbf?access_token=pk.eyJ1Ijoiam9uYWhhZGtpbnMiLCJhIjoiRlVVVkx3VSJ9.9sdVEK_B_VkEXPjssU5MqA"
      }, {
        name: "Detroit Composite POIs",
        src: "composite-poi",
        tooltip: "Fire Inspections, Business Licenses, and other public location data collated from the City of Detroit.",
        template: "https://{switch:a,b,c,d}.tiles.mapbox.com/v4/jonahadkins.cjksmm6a02sli31myxhsr7zf3-2sw8h/{z}/{x}/{y}.vector.pbf?access_token=pk.eyJ1Ijoiam9uYWhhZGtpbnMiLCJhIjoiRlVVVkx3VSJ9.9sdVEK_B_VkEXPjssU5MqA"
      }, {
        name: "Detroit All-The-Places POIs",
        src: "alltheplaces-poi",
        tooltip: "Public domain business location data created by web scrapers.",
        template: "https://{switch:a,b,c,d}.tiles.mapbox.com/v4/jonahadkins.cjksmswgk340g2vo06p1w9w0j-8fjjc/{z}/{x}/{y}.vector.pbf?access_token=pk.eyJ1Ijoiam9uYWhhZGtpbnMiLCJhIjoiRlVVVkx3VSJ9.9sdVEK_B_VkEXPjssU5MqA"
      }];
      var detroit = new Extent([-83.5, 42.1], [-82.8, 42.5]);
      var mapCenter = new Extent(context.map().center());
      var showVectorItems = context.map().zoom() > 9 && detroit.contains(mapCenter);
      var container = selection2.selectAll(".vectortile-container").data(showVectorItems ? [0] : []);
      container.exit().remove();
      var containerEnter = container.enter().append("div").attr("class", "vectortile-container");
      containerEnter.append("h4").attr("class", "vectortile-header").html("Detroit Vector Tiles (Beta)");
      containerEnter.append("ul").attr("class", "layer-list layer-list-vectortile");
      containerEnter.append("div").attr("class", "vectortile-footer").append("a").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).attr("href", "https://github.com/osmus/detroit-mapping-challenge").append("span").html("About these layers");
      container = container.merge(containerEnter);
      var ul = container.selectAll(".layer-list-vectortile");
      var li = ul.selectAll(".list-item").data(vtData);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", function(d) {
        return "list-item list-item-" + d.src;
      });
      var labelEnter = liEnter.append("label").each(function(d) {
        select_default2(this).call(uiTooltip().title(d.tooltip).placement("top"));
      });
      labelEnter.append("input").attr("type", "radio").attr("name", "vectortile").on("change", selectVTLayer);
      labelEnter.append("span").html(function(d) {
        return d.name;
      });
      li.merge(liEnter).classed("active", isVTLayerSelected).selectAll("input").property("checked", isVTLayerSelected);
      function isVTLayerSelected(d) {
        return dataLayer && dataLayer.template() === d.template;
      }
      function selectVTLayer(d3_event, d) {
        corePreferences("settings-custom-data-url", d.template);
        if (dataLayer) {
          dataLayer.template(d.template, d.src);
          dataLayer.enabled(true);
        }
      }
    }
    function drawCustomDataItems(selection2) {
      var dataLayer = layers.layer("data");
      var hasData = dataLayer && dataLayer.hasData();
      var showsData = hasData && dataLayer.enabled();
      var ul = selection2.selectAll(".layer-list-data").data(dataLayer ? [0] : []);
      ul.exit().remove();
      var ulEnter = ul.enter().append("ul").attr("class", "layer-list layer-list-data");
      var liEnter = ulEnter.append("li").attr("class", "list-item-data");
      var labelEnter = liEnter.append("label").call(uiTooltip().title(_t.html("map_data.layers.custom.tooltip")).placement("top"));
      labelEnter.append("input").attr("type", "checkbox").on("change", function() {
        toggleLayer("data");
      });
      labelEnter.append("span").html(_t.html("map_data.layers.custom.title"));
      liEnter.append("button").attr("class", "open-data-options").call(uiTooltip().title(_t.html("settings.custom_data.tooltip")).placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left")).on("click", function(d3_event) {
        d3_event.preventDefault();
        editCustom();
      }).call(svgIcon("#iD-icon-more"));
      liEnter.append("button").attr("class", "zoom-to-data").call(uiTooltip().title(_t.html("map_data.layers.custom.zoom")).placement(_mainLocalizer.textDirection() === "rtl" ? "right" : "left")).on("click", function(d3_event) {
        if (select_default2(this).classed("disabled"))
          return;
        d3_event.preventDefault();
        d3_event.stopPropagation();
        dataLayer.fitZoom();
      }).call(svgIcon("#iD-icon-framed-dot", "monochrome"));
      ul = ul.merge(ulEnter);
      ul.selectAll(".list-item-data").classed("active", showsData).selectAll("label").classed("deemphasize", !hasData).selectAll("input").property("disabled", !hasData).property("checked", showsData);
      ul.selectAll("button.zoom-to-data").classed("disabled", !hasData);
    }
    function editCustom() {
      context.container().call(settingsCustomData);
    }
    function customChanged(d) {
      var dataLayer = layers.layer("data");
      if (d && d.url) {
        dataLayer.url(d.url);
      } else if (d && d.fileList) {
        dataLayer.fileList(d.fileList);
      }
    }
    function drawPanelItems(selection2) {
      var panelsListEnter = selection2.selectAll(".md-extras-list").data([0]).enter().append("ul").attr("class", "layer-list md-extras-list");
      var historyPanelLabelEnter = panelsListEnter.append("li").attr("class", "history-panel-toggle-item").append("label").call(uiTooltip().title(_t.html("map_data.history_panel.tooltip")).keys([uiCmd("\u2318\u21E7" + _t("info_panels.history.key"))]).placement("top"));
      historyPanelLabelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        context.ui().info.toggle("history");
      });
      historyPanelLabelEnter.append("span").html(_t.html("map_data.history_panel.title"));
      var progressPanelLabelEnter = panelsListEnter.append("li").attr("class", "progress-panel-toggle-item").append("label").call(uiTooltip().title("Shows the import status panel").keys([uiCmd("\u2318\u21E7" + _t("info_panels.progress.key"))]).placement("top"));
      progressPanelLabelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        context.ui().info.toggle("progress");
      });
      progressPanelLabelEnter.append("span").html("Show Import Progress Panel");
      var measurementPanelLabelEnter = panelsListEnter.append("li").attr("class", "measurement-panel-toggle-item").append("label").call(uiTooltip().title(_t.html("map_data.measurement_panel.tooltip")).keys([uiCmd("\u2318\u21E7" + _t("info_panels.measurement.key"))]).placement("top"));
      measurementPanelLabelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        context.ui().info.toggle("measurement");
      });
      measurementPanelLabelEnter.append("span").html(_t.html("map_data.measurement_panel.title"));
    }
    context.layers().on("change.uiSectionDataLayers", section.reRender);
    context.map().on("move.uiSectionDataLayers", debounce_default(function() {
      window.requestIdleCallback(section.reRender);
    }, 1e3));
    return section;
  }

  // modules/ui/sections/map_features.js
  function uiSectionMapFeatures(context) {
    var _features = context.features().keys();
    var section = uiSection("map-features", context).label(_t.html("map_data.map_features")).disclosureContent(renderDisclosureContent).expandedByDefault(false);
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".layer-feature-list-container").data([0]);
      var containerEnter = container.enter().append("div").attr("class", "layer-feature-list-container");
      containerEnter.append("ul").attr("class", "layer-list layer-feature-list");
      var footer = containerEnter.append("div").attr("class", "feature-list-links section-footer");
      footer.append("a").attr("class", "feature-list-link").attr("href", "#").html(_t.html("issues.disable_all")).on("click", function(d3_event) {
        d3_event.preventDefault();
        context.features().disableAll();
      });
      footer.append("a").attr("class", "feature-list-link").attr("href", "#").html(_t.html("issues.enable_all")).on("click", function(d3_event) {
        d3_event.preventDefault();
        context.features().enableAll();
      });
      container = container.merge(containerEnter);
      container.selectAll(".layer-feature-list").call(drawListItems, _features, "checkbox", "feature", clickFeature, showsFeature);
    }
    function drawListItems(selection2, data2, type3, name, change, active) {
      var items = selection2.selectAll("li").data(data2);
      items.exit().remove();
      var enter = items.enter().append("li").call(uiTooltip().title(function(d) {
        var tip = _t.html(name + "." + d + ".tooltip");
        if (autoHiddenFeature(d)) {
          var msg = showsLayer("osm") ? _t.html("map_data.autohidden") : _t.html("map_data.osmhidden");
          tip += "<div>" + msg + "</div>";
        }
        return tip;
      }).placement("top"));
      var label = enter.append("label");
      label.append("input").attr("type", type3).attr("name", name).on("change", change);
      label.append("span").html(function(d) {
        return _t.html(name + "." + d + ".description");
      });
      items = items.merge(enter);
      items.classed("active", active).selectAll("input").property("checked", active).property("indeterminate", autoHiddenFeature);
    }
    function autoHiddenFeature(d) {
      return context.features().autoHidden(d);
    }
    function showsFeature(d) {
      return context.features().enabled(d);
    }
    function clickFeature(d3_event, d) {
      context.features().toggle(d);
    }
    function showsLayer(id2) {
      var layer2 = context.layers().layer(id2);
      return layer2 && layer2.enabled();
    }
    context.features().on("change.map_features", section.reRender);
    return section;
  }

  // modules/ui/sections/map_style_options.js
  function uiSectionMapStyleOptions(context) {
    var section = uiSection("fill-area", context).label(_t.html("map_data.style_options")).disclosureContent(renderDisclosureContent).expandedByDefault(false);
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".layer-fill-list").data([0]);
      container.enter().append("ul").attr("class", "layer-list layer-fill-list").merge(container).call(drawListItems, context.map().areaFillOptions, "radio", "area_fill", setFill, isActiveFill);
      var container2 = selection2.selectAll(".layer-visual-diff-list").data([0]);
      container2.enter().append("ul").attr("class", "layer-list layer-visual-diff-list").merge(container2).call(drawListItems, ["highlight_edits"], "checkbox", "visual_diff", toggleHighlightEdited, function() {
        return context.surface().classed("highlight-edited");
      });
    }
    function drawListItems(selection2, data2, type3, name, change, active) {
      var items = selection2.selectAll("li").data(data2);
      items.exit().remove();
      var enter = items.enter().append("li").call(uiTooltip().title(function(d) {
        return _t.html(name + "." + d + ".tooltip");
      }).keys(function(d) {
        var key = d === "wireframe" ? _t("area_fill.wireframe.key") : null;
        if (d === "highlight_edits")
          key = _t("map_data.highlight_edits.key");
        return key ? [key] : null;
      }).placement("top"));
      var label = enter.append("label");
      label.append("input").attr("type", type3).attr("name", name).on("change", change);
      label.append("span").html(function(d) {
        return _t.html(name + "." + d + ".description");
      });
      items = items.merge(enter);
      items.classed("active", active).selectAll("input").property("checked", active).property("indeterminate", false);
    }
    function isActiveFill(d) {
      return context.map().activeAreaFill() === d;
    }
    function toggleHighlightEdited(d3_event) {
      d3_event.preventDefault();
      context.map().toggleHighlightEdited();
    }
    function setFill(d3_event, d) {
      context.map().activeAreaFill(d);
    }
    context.map().on("changeHighlighting.ui_style, changeAreaFill.ui_style", section.reRender);
    return section;
  }

  // modules/ui/sections/photo_overlays.js
  function uiSectionPhotoOverlays(context) {
    var layers = context.layers();
    var section = uiSection("photo-overlays", context).label(_t.html("photo_overlays.title")).disclosureContent(renderDisclosureContent).expandedByDefault(false);
    function renderDisclosureContent(selection2) {
      var container = selection2.selectAll(".photo-overlay-container").data([0]);
      container.enter().append("div").attr("class", "photo-overlay-container").merge(container).call(drawPhotoItems).call(drawPhotoTypeItems).call(drawDateFilter).call(drawUsernameFilter);
    }
    function drawPhotoItems(selection2) {
      var photoKeys = context.photos().overlayLayerIDs();
      var photoLayers = layers.all().filter(function(obj) {
        return photoKeys.indexOf(obj.id) !== -1;
      });
      var data2 = photoLayers.filter(function(obj) {
        return obj.layer.supported();
      });
      function layerSupported(d) {
        return d.layer && d.layer.supported();
      }
      function layerEnabled(d) {
        return layerSupported(d) && d.layer.enabled();
      }
      var ul = selection2.selectAll(".layer-list-photos").data([0]);
      ul = ul.enter().append("ul").attr("class", "layer-list layer-list-photos").merge(ul);
      var li = ul.selectAll(".list-item-photos").data(data2);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", function(d) {
        var classes = "list-item-photos list-item-" + d.id;
        if (d.id === "mapillary-signs" || d.id === "mapillary-map-features") {
          classes += " indented";
        }
        return classes;
      });
      var labelEnter = liEnter.append("label").each(function(d) {
        var titleID;
        if (d.id === "mapillary-signs")
          titleID = "mapillary.signs.tooltip";
        else if (d.id === "mapillary")
          titleID = "mapillary_images.tooltip";
        else if (d.id === "openstreetcam")
          titleID = "openstreetcam_images.tooltip";
        else
          titleID = d.id.replace(/-/g, "_") + ".tooltip";
        select_default2(this).call(uiTooltip().title(_t.html(titleID)).placement("top"));
      });
      labelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event, d) {
        toggleLayer(d.id);
      });
      labelEnter.append("span").html(function(d) {
        var id2 = d.id;
        if (id2 === "mapillary-signs")
          id2 = "photo_overlays.traffic_signs";
        return _t.html(id2.replace(/-/g, "_") + ".title");
      });
      li.merge(liEnter).classed("active", layerEnabled).selectAll("input").property("checked", layerEnabled);
    }
    function drawPhotoTypeItems(selection2) {
      var data2 = context.photos().allPhotoTypes();
      function typeEnabled(d) {
        return context.photos().showsPhotoType(d);
      }
      var ul = selection2.selectAll(".layer-list-photo-types").data([0]);
      ul.exit().remove();
      ul = ul.enter().append("ul").attr("class", "layer-list layer-list-photo-types").merge(ul);
      var li = ul.selectAll(".list-item-photo-types").data(context.photos().shouldFilterByPhotoType() ? data2 : []);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", function(d) {
        return "list-item-photo-types list-item-" + d;
      });
      var labelEnter = liEnter.append("label").each(function(d) {
        select_default2(this).call(uiTooltip().title(_t.html("photo_overlays.photo_type." + d + ".tooltip")).placement("top"));
      });
      labelEnter.append("input").attr("type", "checkbox").on("change", function(d3_event, d) {
        context.photos().togglePhotoType(d);
      });
      labelEnter.append("span").html(function(d) {
        return _t.html("photo_overlays.photo_type." + d + ".title");
      });
      li.merge(liEnter).classed("active", typeEnabled).selectAll("input").property("checked", typeEnabled);
    }
    function drawDateFilter(selection2) {
      var data2 = context.photos().dateFilters();
      function filterEnabled(d) {
        return context.photos().dateFilterValue(d);
      }
      var ul = selection2.selectAll(".layer-list-date-filter").data([0]);
      ul.exit().remove();
      ul = ul.enter().append("ul").attr("class", "layer-list layer-list-date-filter").merge(ul);
      var li = ul.selectAll(".list-item-date-filter").data(context.photos().shouldFilterByDate() ? data2 : []);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", "list-item-date-filter");
      var labelEnter = liEnter.append("label").each(function(d) {
        select_default2(this).call(uiTooltip().title(_t.html("photo_overlays.date_filter." + d + ".tooltip")).placement("top"));
      });
      labelEnter.append("span").html(function(d) {
        return _t.html("photo_overlays.date_filter." + d + ".title");
      });
      labelEnter.append("input").attr("type", "date").attr("class", "list-item-input").attr("placeholder", _t("units.year_month_day")).call(utilNoAuto).each(function(d) {
        utilGetSetValue(select_default2(this), context.photos().dateFilterValue(d) || "");
      }).on("change", function(d3_event, d) {
        var value2 = utilGetSetValue(select_default2(this)).trim();
        context.photos().setDateFilter(d, value2, true);
        li.selectAll("input").each(function(d2) {
          utilGetSetValue(select_default2(this), context.photos().dateFilterValue(d2) || "");
        });
      });
      li = li.merge(liEnter).classed("active", filterEnabled);
    }
    function drawUsernameFilter(selection2) {
      function filterEnabled() {
        return context.photos().usernames();
      }
      var ul = selection2.selectAll(".layer-list-username-filter").data([0]);
      ul.exit().remove();
      ul = ul.enter().append("ul").attr("class", "layer-list layer-list-username-filter").merge(ul);
      var li = ul.selectAll(".list-item-username-filter").data(context.photos().shouldFilterByUsername() ? ["username-filter"] : []);
      li.exit().remove();
      var liEnter = li.enter().append("li").attr("class", "list-item-username-filter");
      var labelEnter = liEnter.append("label").each(function() {
        select_default2(this).call(uiTooltip().title(_t.html("photo_overlays.username_filter.tooltip")).placement("top"));
      });
      labelEnter.append("span").html(_t.html("photo_overlays.username_filter.title"));
      labelEnter.append("input").attr("type", "text").attr("class", "list-item-input").call(utilNoAuto).property("value", usernameValue).on("change", function() {
        var value2 = select_default2(this).property("value");
        context.photos().setUsernameFilter(value2, true);
        select_default2(this).property("value", usernameValue);
      });
      li.merge(liEnter).classed("active", filterEnabled);
      function usernameValue() {
        var usernames = context.photos().usernames();
        if (usernames)
          return usernames.join("; ");
        return usernames;
      }
    }
    function toggleLayer(which) {
      setLayer(which, !showsLayer(which));
    }
    function showsLayer(which) {
      var layer2 = layers.layer(which);
      if (layer2) {
        return layer2.enabled();
      }
      return false;
    }
    function setLayer(which, enabled) {
      var layer2 = layers.layer(which);
      if (layer2) {
        layer2.enabled(enabled);
      }
    }
    context.layers().on("change.uiSectionPhotoOverlays", section.reRender);
    context.photos().on("change.uiSectionPhotoOverlays", section.reRender);
    return section;
  }

  // modules/ui/panes/map_data.js
  function uiPaneMapData(context) {
    var mapDataPane = uiPane("map-data", context).key(_t("map_data.key")).label(_t.html("map_data.title")).description(_t.html("map_data.description")).iconName("iD-icon-data").sections([uiSectionDataLayers(context), uiSectionPhotoOverlays(context), uiSectionMapStyleOptions(context), uiSectionMapFeatures(context)]);
    return mapDataPane;
  }

  // modules/ui/sections/privacy.js
  function uiSectionPrivacy(context) {
    var section = uiSection("preferences-third-party", context).label(_t.html("preferences.privacy.title")).disclosureContent(renderDisclosureContent);
    var _showThirdPartyIcons = corePreferences("preferences.privacy.thirdpartyicons") || "true";
    function renderDisclosureContent(selection2) {
      var privacyOptionsListEnter = selection2.selectAll(".privacy-options-list").data([0]).enter().append("ul").attr("class", "layer-list privacy-options-list");
      var thirdPartyIconsEnter = privacyOptionsListEnter.append("li").attr("class", "privacy-third-party-icons-item").append("label").call(uiTooltip().title(_t.html("preferences.privacy.third_party_icons.tooltip")).placement("bottom"));
      thirdPartyIconsEnter.append("input").attr("type", "checkbox").on("change", function(d3_event) {
        d3_event.preventDefault();
        _showThirdPartyIcons = _showThirdPartyIcons === "true" ? "false" : "true";
        corePreferences("preferences.privacy.thirdpartyicons", _showThirdPartyIcons);
        update4();
      });
      thirdPartyIconsEnter.append("span").html(_t.html("preferences.privacy.third_party_icons.description"));
      selection2.selectAll(".privacy-link").data([0]).enter().append("div").attr("class", "privacy-link").append("a").attr("target", "_blank").call(svgIcon("#iD-icon-out-link", "inline")).attr("href", "https://github.com/openstreetmap/iD/blob/release/PRIVACY.md").append("span").html(_t.html("preferences.privacy.privacy_link"));
      update4();
      function update4() {
        selection2.selectAll(".privacy-third-party-icons-item").classed("active", _showThirdPartyIcons === "true").select("input").property("checked", _showThirdPartyIcons === "true");
      }
    }
    return section;
  }

  // modules/ui/panes/preferences.js
  function uiPanePreferences(context) {
    var preferencesPane = uiPane("preferences", context).key(_t("preferences.key")).label(_t.html("preferences.title")).description(_t.html("preferences.description")).iconName("fas-user-cog").sections([uiSectionPrivacy(context)]);
    return preferencesPane;
  }

  // modules/ui/init.js
  function uiInit(context) {
    var _initCounter = 0;
    var _needWidth = {};
    var _lastPointerType;
    function render(container) {
      container.on("click.ui", function(d3_event) {
        if (d3_event.button !== 0)
          return;
        if (!d3_event.composedPath)
          return;
        var isOkayTarget = d3_event.composedPath().some(function(node) {
          return node.nodeType === 1 && (node.nodeName === "INPUT" || node.nodeName === "LABEL" || node.nodeName === "A");
        });
        if (isOkayTarget)
          return;
        d3_event.preventDefault();
      });
      var detected = utilDetect();
      if ("GestureEvent" in window && !detected.isMobileWebKit) {
        container.on("gesturestart.ui gesturechange.ui gestureend.ui", function(d3_event) {
          d3_event.preventDefault();
        });
      }
      if ("PointerEvent" in window) {
        select_default2(window).on("pointerdown.ui pointerup.ui", function(d3_event) {
          var pointerType = d3_event.pointerType || "mouse";
          if (_lastPointerType !== pointerType) {
            _lastPointerType = pointerType;
            container.attr("pointer", pointerType);
          }
        }, true);
      } else {
        _lastPointerType = "mouse";
        container.attr("pointer", "mouse");
      }
      container.attr("lang", _mainLocalizer.localeCode()).attr("dir", _mainLocalizer.textDirection());
      container.call(uiFullScreen(context));
      var map2 = context.map();
      map2.redrawEnable(false);
      map2.on("hitMinZoom.ui", function() {
        ui.flash.iconName("#iD-icon-no").label(_t.html("cannot_zoom"))();
      });
      container.append("svg").attr("id", "ideditor-defs").call(ui.svgDefs);
      container.append("div").attr("class", "sidebar").call(ui.sidebar);
      var content = container.append("div").attr("class", "main-content active");
      content.append("div").attr("class", "top-toolbar-wrap").append("div").attr("class", "top-toolbar fillD").call(uiTopToolbar(context));
      content.append("div").attr("class", "main-map").attr("dir", "ltr").call(map2);
      var overMap = content.append("div").attr("class", "over-map");
      overMap.append("div").attr("class", "select-trap").text("t");
      overMap.call(uiMapInMap(context)).call(uiNotice(context));
      overMap.append("div").attr("class", "spinner").call(uiSpinner(context));
      var controls = overMap.append("div").attr("class", "map-controls");
      controls.append("div").attr("class", "map-control zoombuttons").call(uiZoom(context));
      controls.append("div").attr("class", "map-control zoom-to-selection-control").call(uiZoomToSelection(context));
      controls.append("div").attr("class", "map-control geolocate-control").call(uiGeolocate(context));
      controls.on("wheel.mapControls", function(d3_event) {
        if (!d3_event.deltaX) {
          controls.node().scrollTop += d3_event.deltaY;
        }
      });
      var panes = overMap.append("div").attr("class", "map-panes");
      var uiPanes = [uiPaneBackground(context), uiPaneMapData(context), uiPaneIssues(context), uiPanePreferences(context), uiPaneHelp(context)];
      uiPanes.forEach(function(pane) {
        controls.append("div").attr("class", "map-control map-pane-control " + pane.id + "-control").call(pane.renderToggleButton);
        panes.call(pane.renderPane);
      });
      ui.info = uiInfo(context);
      overMap.call(ui.info);
      overMap.append("div").attr("class", "photoviewer").classed("al", true).classed("hide", true).call(ui.photoviewer);
      overMap.append("div").attr("class", "attribution-wrap").attr("dir", "ltr").call(uiAttribution(context));
      var about = content.append("div").attr("class", "map-footer");
      about.append("div").attr("class", "api-status").call(uiStatus(context));
      var footer = about.append("div").attr("class", "map-footer-bar fillD");
      footer.append("div").attr("class", "flash-wrap footer-hide");
      var footerWrap = footer.append("div").attr("class", "main-footer-wrap footer-show");
      footerWrap.append("div").attr("class", "scale-block").call(uiScale(context));
      var aboutList = footerWrap.append("div").attr("class", "info-block").append("ul").attr("class", "map-footer-list");
      aboutList.append("li").attr("class", "user-list").call(uiContributors(context));
      aboutList.append("li").attr("class", "fb-road-license").attr("tabindex", -1).call(uiRapidServiceLicense());
      var apiConnections = context.apiConnections();
      if (apiConnections && apiConnections.length > 1) {
        aboutList.append("li").attr("class", "source-switch").call(uiSourceSwitch(context).keys(apiConnections));
      }
      aboutList.append("li").attr("class", "issues-info").call(uiIssuesInfo(context));
      aboutList.append("li").attr("class", "feature-warning").call(uiFeatureInfo(context));
      var issueLinks = aboutList.append("li");
      issueLinks.append("a").attr("target", "_blank").attr("tabindex", -1).attr("href", "https://github.com/facebookincubator/RapiD/issues").call(svgIcon("#iD-icon-bug", "light")).call(uiTooltip().title(_t.html("report_a_bug")).placement("top"));
      issueLinks.append("a").attr("target", "_blank").attr("href", "https://github.com/openstreetmap/iD/blob/develop/CONTRIBUTING.md#translating").call(svgIcon("#iD-icon-translate", "light")).call(uiTooltip().title(_t.html("help_translate")).placement("top"));
      aboutList.append("li").attr("class", "version").call(uiVersion(context));
      if (!context.embed()) {
        aboutList.call(uiAccount(context));
      }
      ui.onResize();
      map2.redrawEnable(true);
      ui.hash = behaviorHash(context);
      ui.hash();
      if (!ui.hash.hadHash) {
        map2.centerZoom([0, 0], 2);
      }
      window.onbeforeunload = function() {
        return context.save();
      };
      window.onunload = function() {
        context.history().unlock();
      };
      select_default2(window).on("resize.editor", function() {
        ui.onResize();
      });
      var panPixels = 80;
      context.keybinding().on("\u232B", function(d3_event) {
        d3_event.preventDefault();
      }).on([_t("sidebar.key"), "`", "\xB2", "@"], ui.sidebar.toggle).on("\u2190", pan([panPixels, 0])).on("\u2191", pan([0, panPixels])).on("\u2192", pan([-panPixels, 0])).on("\u2193", pan([0, -panPixels])).on(uiCmd("\u2325\u2190"), pan([map2.dimensions()[0], 0])).on(uiCmd("\u2325\u2191"), pan([0, map2.dimensions()[1]])).on(uiCmd("\u2325\u2192"), pan([-map2.dimensions()[0], 0])).on(uiCmd("\u2325\u2193"), pan([0, -map2.dimensions()[1]])).on(uiCmd("\u2318" + _t("background.key")), function quickSwitch(d3_event) {
        if (d3_event) {
          d3_event.stopImmediatePropagation();
          d3_event.preventDefault();
        }
        var previousBackground = context.background().findSource(corePreferences("background-last-used-toggle"));
        if (previousBackground) {
          var currentBackground = context.background().baseLayerSource();
          corePreferences("background-last-used-toggle", currentBackground.id);
          corePreferences("background-last-used", previousBackground.id);
          context.background().baseLayerSource(previousBackground);
        }
      }).on(_t("area_fill.wireframe.key"), function toggleWireframe(d3_event) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        context.map().toggleWireframe();
      }).on(uiCmd("\u2325" + _t("area_fill.wireframe.key")), function toggleOsmData(d3_event) {
        d3_event.preventDefault();
        d3_event.stopPropagation();
        var mode = context.mode();
        if (mode && /^draw/.test(mode.id))
          return;
        var layer2 = context.layers().layer("osm");
        if (layer2) {
          layer2.enabled(!layer2.enabled());
          if (!layer2.enabled()) {
            context.enter(modeBrowse(context));
          }
        }
      }).on(_t("map_data.highlight_edits.key"), function toggleHighlightEdited(d3_event) {
        d3_event.preventDefault();
        context.map().toggleHighlightEdited();
      });
      context.on("enter.editor", function(entered) {
        container.classed("mode-" + entered.id, true);
      }).on("exit.editor", function(exited) {
        container.classed("mode-" + exited.id, false);
      });
      context.enter(modeBrowse(context));
      var osm = context.connection();
      if (!_initCounter++) {
        if (!ui.hash.startWalkthrough) {
          if (context.history().lock() && context.history().hasRestorableChanges()) {
            context.container().call(uiRestore(context));
          } else {
            context.container().call(uiRapidSplash(context));
          }
        }
        context.container().call(ui.shortcuts);
      }
      var auth = uiLoading(context).message(_t.html("loading_auth")).blocking(true);
      if (osm && auth) {
        osm.on("authLoading.ui", function() {
          context.container().call(auth);
        }).on("authDone.ui", function() {
          auth.close();
        });
      }
      _initCounter++;
      if (ui.hash.startWalkthrough) {
        ui.hash.startWalkthrough = false;
        context.container().call(uiIntro(context));
      }
      function pan(d) {
        return function(d3_event) {
          if (d3_event.shiftKey)
            return;
          if (context.container().select(".combobox").size())
            return;
          d3_event.preventDefault();
          context.map().pan(d, 100);
        };
      }
    }
    var ui = {};
    var _loadPromise;
    ui.ensureLoaded = function() {
      if (_loadPromise)
        return _loadPromise;
      return _loadPromise = Promise.all([
        _mainLocalizer.ensureLoaded(),
        _mainPresetIndex.ensureLoaded()
      ]).then(function() {
        if (!context.container().empty())
          render(context.container());
      }).catch(function(err) {
        return console.error(err);
      });
    };
    ui.restart = function() {
      context.keybinding().clear();
      _loadPromise = null;
      context.container().selectAll("*").remove();
      ui.ensureLoaded();
    };
    ui.lastPointerType = function() {
      return _lastPointerType;
    };
    ui.svgDefs = svgDefs(context);
    ui.flash = uiFlash(context);
    ui.sidebar = uiSidebar(context);
    ui.photoviewer = uiPhotoviewer(context);
    ui.shortcuts = uiShortcuts(context);
    ui.onResize = function(withPan) {
      var map2 = context.map();
      var mapDimensions = utilGetDimensions(context.container().select(".main-content"), true);
      utilGetDimensions(context.container().select(".sidebar"), true);
      if (withPan !== void 0) {
        map2.redrawEnable(false);
        map2.pan(withPan);
        map2.redrawEnable(true);
      }
      map2.dimensions(mapDimensions);
      ui.photoviewer.onMapResize();
      ui.checkOverflow(".top-toolbar");
      ui.checkOverflow(".map-footer-bar");
      var resizeWindowEvent = document.createEvent("Event");
      resizeWindowEvent.initEvent("resizeWindow", true, true);
      document.dispatchEvent(resizeWindowEvent);
    };
    ui.checkOverflow = function(selector, reset17) {
      if (reset17) {
        delete _needWidth[selector];
      }
      var selection2 = context.container().select(selector);
      if (selection2.empty())
        return;
      var scrollWidth = selection2.property("scrollWidth");
      var clientWidth = selection2.property("clientWidth");
      var needed = _needWidth[selector] || scrollWidth;
      if (scrollWidth > clientWidth) {
        selection2.classed("narrow", true);
        if (!_needWidth[selector]) {
          _needWidth[selector] = scrollWidth;
        }
      } else if (scrollWidth >= needed) {
        selection2.classed("narrow", false);
      }
    };
    ui.togglePanes = function(showPane) {
      var hidePanes = context.container().selectAll(".map-pane.shown");
      var side = _mainLocalizer.textDirection() === "ltr" ? "right" : "left";
      hidePanes.classed("shown", false).classed("hide", true);
      context.container().selectAll(".map-pane-control button").classed("active", false);
      if (showPane) {
        hidePanes.classed("shown", false).classed("hide", true).style(side, "-500px");
        context.container().selectAll("." + showPane.attr("pane") + "-control button").classed("active", true);
        showPane.classed("shown", true).classed("hide", false);
        if (hidePanes.empty()) {
          showPane.style(side, "-500px").transition().duration(200).style(side, "0px");
        } else {
          showPane.style(side, "0px");
        }
      } else {
        hidePanes.classed("shown", true).classed("hide", false).style(side, "0px").transition().duration(200).style(side, "-500px").on("end", function() {
          select_default2(this).classed("shown", false).classed("hide", true);
        });
      }
    };
    var _editMenu = uiEditMenu(context);
    ui.editMenu = function() {
      return _editMenu;
    };
    ui.showEditMenu = function(anchorPoint, triggerType, operations) {
      ui.closeEditMenu();
      if (!operations && context.mode().operations)
        operations = context.mode().operations();
      if (!operations || !operations.length)
        return;
      if (!context.map().editableDataEnabled())
        return;
      var surfaceNode = context.surface().node();
      if (surfaceNode.focus) {
        surfaceNode.focus();
      }
      operations.forEach(function(operation) {
        if (operation.point)
          operation.point(anchorPoint);
      });
      _editMenu.anchorLoc(anchorPoint).triggerType(triggerType).operations(operations);
      context.map().supersurface.call(_editMenu);
    };
    ui.closeEditMenu = function() {
      context.map().supersurface.select(".edit-menu").remove();
    };
    var _saveLoading = select_default2(null);
    context.uploader().on("saveStarted.ui", function() {
      _saveLoading = uiLoading(context).message(_t.html("save.uploading")).blocking(true);
      context.container().call(_saveLoading);
    }).on("saveEnded.ui", function() {
      _saveLoading.close();
      _saveLoading = select_default2(null);
    });
    return ui;
  }

  // modules/core/context.js
  function coreContext() {
    var _this = this;
    var dispatch12 = dispatch_default("enter", "exit", "change");
    var context = utilRebind({}, dispatch12, "on");
    var _deferred2 = new Set();
    context.version = "2.20.2-dev";
    context.privacyVersion = "20201202";
    context.initialHashParams = window.location.hash ? utilStringQs(window.location.hash) : {};
    context.isFirstSession = !corePreferences("sawSplash") && !corePreferences("sawPrivacyVersion");
    context.changeset = null;
    var _defaultChangesetComment = context.initialHashParams.comment;
    var _defaultChangesetSource = context.initialHashParams.source;
    var _defaultChangesetHashtags = context.initialHashParams.hashtags;
    context.defaultChangesetComment = function(val) {
      if (!arguments.length)
        return _defaultChangesetComment;
      _defaultChangesetComment = val;
      return context;
    };
    context.defaultChangesetSource = function(val) {
      if (!arguments.length)
        return _defaultChangesetSource;
      _defaultChangesetSource = val;
      return context;
    };
    context.defaultChangesetHashtags = function(val) {
      if (!arguments.length)
        return _defaultChangesetHashtags;
      _defaultChangesetHashtags = val;
      return context;
    };
    var _setsDocumentTitle = true;
    context.setsDocumentTitle = function(val) {
      if (!arguments.length)
        return _setsDocumentTitle;
      _setsDocumentTitle = val;
      return context;
    };
    var _documentTitleBase = document.title;
    context.documentTitleBase = function(val) {
      if (!arguments.length)
        return _documentTitleBase;
      _documentTitleBase = val;
      return context;
    };
    var _ui;
    context.ui = function() {
      return _ui;
    };
    context.lastPointerType = function() {
      return _ui.lastPointerType();
    };
    var _keybinding = utilKeybinding("context");
    context.keybinding = function() {
      return _keybinding;
    };
    select_default2(document).call(_keybinding);
    var _connection = services.osm;
    var _history;
    var _validator;
    var _uploader;
    context.connection = function() {
      return _connection;
    };
    context.history = function() {
      return _history;
    };
    context.validator = function() {
      return _validator;
    };
    context.uploader = function() {
      return _uploader;
    };
    context.preauth = function(options) {
      if (_connection) {
        _connection.switch(options);
      }
      return context;
    };
    var _apiConnections;
    context.apiConnections = function(val) {
      if (!arguments.length)
        return _apiConnections;
      _apiConnections = val;
      return context;
    };
    context.locale = function(locale2) {
      if (!arguments.length)
        return _mainLocalizer.localeCode();
      _mainLocalizer.preferredLocaleCodes(locale2);
      return context;
    };
    function afterLoad(cid, callback) {
      return function(err, result6) {
        if (err) {
          if (err.status === 400 || err.status === 401 || err.status === 403) {
            if (_connection) {
              _connection.logout();
            }
          }
          if (typeof callback === "function") {
            callback(err);
          }
          return;
        } else if (_connection && _connection.getConnectionId() !== cid) {
          if (typeof callback === "function") {
            callback({
              message: "Connection Switched",
              status: -1
            });
          }
          return;
        } else {
          _history.merge(result6.data, result6.extent);
          if (typeof callback === "function") {
            callback(err, result6);
          }
          return;
        }
      };
    }
    context.loadTiles = function(projection2, callback) {
      var handle = window.requestIdleCallback(function() {
        _deferred2.delete(handle);
        if (_connection && context.editableDataEnabled()) {
          var cid = _connection.getConnectionId();
          _connection.loadTiles(projection2, afterLoad(cid, callback));
        }
      });
      _deferred2.add(handle);
    };
    context.loadTileAtLoc = function(loc, callback) {
      var handle = window.requestIdleCallback(function() {
        _deferred2.delete(handle);
        if (_connection && context.editableDataEnabled()) {
          var cid = _connection.getConnectionId();
          _connection.loadTileAtLoc(loc, afterLoad(cid, callback));
        }
      });
      _deferred2.add(handle);
    };
    context.loadEntity = function(entityID, callback) {
      if (_connection) {
        var cid = _connection.getConnectionId();
        _connection.loadEntity(entityID, afterLoad(cid, callback));
        _connection.loadEntityRelations(entityID, afterLoad(cid, callback));
      }
    };
    context.zoomToEntity = function(entityID, zoomTo) {
      context.loadEntity(entityID, function(err, result6) {
        if (err)
          return;
        if (zoomTo !== false) {
          var entity2 = result6.data.find(function(e3) {
            return e3.id === entityID;
          });
          if (entity2) {
            _map.zoomTo(entity2);
          }
        }
      });
      _map.on("drawn.zoomToEntity", function() {
        if (!context.hasEntity(entityID))
          return;
        _map.on("drawn.zoomToEntity", null);
        context.on("enter.zoomToEntity", null);
        context.enter(modeSelect(context, [entityID]));
      });
      context.on("enter.zoomToEntity", function() {
        if (_mode.id !== "browse") {
          _map.on("drawn.zoomToEntity", null);
          context.on("enter.zoomToEntity", null);
        }
      });
    };
    var _minEditableZoom = 16;
    context.minEditableZoom = function(val) {
      if (!arguments.length)
        return _minEditableZoom;
      _minEditableZoom = val;
      if (_connection) {
        _connection.tileZoom(val);
      }
      return context;
    };
    context.maxCharsForTagKey = function() {
      return 255;
    };
    context.maxCharsForTagValue = function() {
      return 255;
    };
    context.maxCharsForRelationRole = function() {
      return 255;
    };
    function cleanOsmString(val, maxChars) {
      if (val === void 0 || val === null) {
        val = "";
      } else {
        val = val.toString();
      }
      val = val.trim();
      if (val.normalize)
        val = val.normalize("NFC");
      return utilUnicodeCharsTruncated(val, maxChars);
    }
    context.cleanTagKey = function(val) {
      return cleanOsmString(val, context.maxCharsForTagKey());
    };
    context.cleanTagValue = function(val) {
      return cleanOsmString(val, context.maxCharsForTagValue());
    };
    context.cleanRelationRole = function(val) {
      return cleanOsmString(val, context.maxCharsForRelationRole());
    };
    var _inIntro = false;
    context.inIntro = function(val) {
      if (!arguments.length)
        return _inIntro;
      _inIntro = val;
      return context;
    };
    context.save = function() {
      if (_inIntro || context.container().select(".modal").size())
        return;
      var canSave;
      if (_mode && _mode.id === "save") {
        canSave = false;
        if (services.osm && services.osm.isChangesetInflight()) {
          _history.clearSaved();
          return;
        }
      } else {
        canSave = context.selectedIDs().every(function(id2) {
          var entity2 = context.hasEntity(id2);
          return entity2 && !entity2.isDegenerate();
        });
      }
      if (canSave) {
        _history.save();
      }
      if (_history.hasChanges()) {
        return _t("save.unsaved_changes");
      }
    };
    context.debouncedSave = debounce_default(context.save, 350);
    function withDebouncedSave(fn) {
      return function() {
        var result6 = fn.apply(_history, arguments);
        context.debouncedSave();
        return result6;
      };
    }
    context.hasEntity = function(id2) {
      return _history.graph().hasEntity(id2);
    };
    context.entity = function(id2) {
      return _history.graph().entity(id2);
    };
    var _mode;
    context.mode = function() {
      return _mode;
    };
    context.enter = function(newMode) {
      if (_mode) {
        _mode.exit();
        dispatch12.call("exit", _this, _mode);
      }
      _mode = newMode;
      _mode.enter();
      dispatch12.call("enter", _this, _mode);
    };
    context.selectedIDs = function() {
      return _mode && _mode.selectedIDs && _mode.selectedIDs() || [];
    };
    context.activeID = function() {
      return _mode && _mode.activeID && _mode.activeID();
    };
    var _selectedNoteID;
    context.selectedNoteID = function(noteID) {
      if (!arguments.length)
        return _selectedNoteID;
      _selectedNoteID = noteID;
      return context;
    };
    var _selectedErrorID;
    context.selectedErrorID = function(errorID) {
      if (!arguments.length)
        return _selectedErrorID;
      _selectedErrorID = errorID;
      return context;
    };
    context.install = function(behavior) {
      return context.surface().call(behavior);
    };
    context.uninstall = function(behavior) {
      return context.surface().call(behavior.off);
    };
    var _copyGraph;
    context.copyGraph = function() {
      return _copyGraph;
    };
    var _copyIDs = [];
    context.copyIDs = function(val) {
      if (!arguments.length)
        return _copyIDs;
      _copyIDs = val;
      _copyGraph = _history.graph();
      return context;
    };
    var _copyLonLat;
    context.copyLonLat = function(val) {
      if (!arguments.length)
        return _copyLonLat;
      _copyLonLat = val;
      return context;
    };
    var _background;
    context.background = function() {
      return _background;
    };
    var _features;
    context.features = function() {
      return _features;
    };
    context.hasHiddenConnections = function(id2) {
      var graph3 = _history.graph();
      var entity2 = graph3.entity(id2);
      return _features.hasHiddenConnections(entity2, graph3);
    };
    var _photos;
    context.photos = function() {
      return _photos;
    };
    var _map;
    context.map = function() {
      return _map;
    };
    context.layers = function() {
      return _map.layers();
    };
    context.surface = function() {
      return _map.surface;
    };
    context.editableDataEnabled = function() {
      return _map.editableDataEnabled();
    };
    context.surfaceRect = function() {
      return _map.surface.node().getBoundingClientRect();
    };
    context.editable = function() {
      var mode = context.mode();
      if (!mode || mode.id === "save")
        return false;
      return _map.editableDataEnabled();
    };
    var _debugFlags = {
      tile: false,
      collision: false,
      imagery: false,
      target: false,
      downloaded: false
    };
    context.debugFlags = function() {
      return _debugFlags;
    };
    context.getDebug = function(flag) {
      return flag && _debugFlags[flag];
    };
    context.setDebug = function(flag, val) {
      if (arguments.length === 1)
        val = true;
      _debugFlags[flag] = val;
      dispatch12.call("change");
      return context;
    };
    var _container = select_default2(null);
    context.container = function(val) {
      if (!arguments.length)
        return _container;
      _container = val;
      _container.classed("ideditor", true);
      return context;
    };
    context.containerNode = function(val) {
      if (!arguments.length)
        return context.container().node();
      context.container(select_default2(val));
      return context;
    };
    var _embed;
    context.embed = function(val) {
      if (!arguments.length)
        return _embed;
      _embed = val;
      return context;
    };
    var _assetPath = "";
    context.assetPath = function(val) {
      if (!arguments.length)
        return _assetPath;
      _assetPath = val;
      _mainFileFetcher.assetPath(val);
      return context;
    };
    var _assetMap = {};
    context.assetMap = function(val) {
      if (!arguments.length)
        return _assetMap;
      _assetMap = val;
      _mainFileFetcher.assetMap(val);
      return context;
    };
    context.asset = function(val) {
      if (/^http(s)?:\/\//i.test(val))
        return val;
      var filename = _assetPath + val;
      return _assetMap[filename] || filename;
    };
    context.imagePath = function(val) {
      return context.asset("img/".concat(val));
    };
    context.reset = context.flush = function() {
      context.debouncedSave.cancel();
      Array.from(_deferred2).forEach(function(handle) {
        window.cancelIdleCallback(handle);
        _deferred2.delete(handle);
      });
      Object.values(services).forEach(function(service) {
        if (service && typeof service.reset === "function") {
          service.reset(context);
        }
      });
      context.changeset = null;
      _validator.reset();
      _features.reset();
      _history.reset();
      _uploader.reset();
      context.container().select(".inspector-wrap *").remove();
      return context;
    };
    context.projection = geoRawMercator();
    context.curtainProjection = geoRawMercator();
    var _rapidContext;
    context.rapidContext = function() {
      return _rapidContext;
    };
    context.init = function() {
      instantiateInternal();
      initializeDependents();
      return context;
      function instantiateInternal() {
        _history = coreHistory(context);
        context.graph = _history.graph;
        context.pauseChangeDispatch = _history.pauseChangeDispatch;
        context.resumeChangeDispatch = _history.resumeChangeDispatch;
        context.perform = withDebouncedSave(_history.perform);
        context.replace = withDebouncedSave(_history.replace);
        context.pop = withDebouncedSave(_history.pop);
        context.overwrite = withDebouncedSave(_history.overwrite);
        context.undo = withDebouncedSave(_history.undo);
        context.redo = withDebouncedSave(_history.redo);
        _rapidContext = coreRapidContext(context);
        _validator = coreValidator(context);
        _uploader = coreUploader(context);
        _background = rendererBackground(context);
        _features = rendererFeatures(context);
        _map = rendererMap(context);
        _photos = rendererPhotos(context);
        _ui = uiInit(context);
      }
      function initializeDependents() {
        if (context.initialHashParams.presets) {
          _mainPresetIndex.addablePresetIDs(new Set(context.initialHashParams.presets.split(",")));
        }
        if (context.initialHashParams.locale) {
          _mainLocalizer.preferredLocaleCodes(context.initialHashParams.locale);
        }
        _mainLocalizer.ensureLoaded();
        _background.ensureLoaded();
        _mainPresetIndex.ensureLoaded();
        Object.values(services).forEach(function(service) {
          if (service && typeof service.init === "function") {
            service.init();
          }
        });
        _map.init();
        _validator.init();
        _features.init();
        _rapidContext.init();
        if (services.maprules && context.initialHashParams.maprules) {
          json_default(context.initialHashParams.maprules).then(function(mapcss) {
            services.maprules.init();
            mapcss.forEach(function(mapcssSelector) {
              return services.maprules.addRule(mapcssSelector);
            });
          }).catch(function() {
          });
        }
        if (!context.container().empty()) {
          _ui.ensureLoaded().then(function() {
            _photos.init();
          });
        }
      }
    };
    return context;
  }

  // modules/services/esri_data.js
  var DEV = new URLSearchParams(location.hash).get("dev");
  var DEV_CDN = "http://localhost:5000";
  var PROD_CDN = "https://linz-addr-cdn.kyle.kiwi";
  var APIROOT = DEV ? DEV_CDN : PROD_CDN;
  window.APIROOT = APIROOT;
  var TILEZOOM = 14;
  var tiler = new Tiler().zoomRange(TILEZOOM);
  var dispatch2 = dispatch_default("loadedData");
  var _datasets = {};
  var _off;
  var _loaded = {};
  window._dsState = {};
  window._mostRecentDsId = null;
  window.__locked = {};
  fetch(APIROOT + "/__locked").then(function(r) {
    return r.json();
  }).then(function(obj) {
    return window.__locked = obj;
  }).catch(console.error);
  function esc(str) {
    return str.replace(/ā/ig, "aa").replace(/ē/ig, "ee").replace(/ī/ig, "ii").replace(/ō/ig, "oo").replace(/ū/ig, "uu");
  }
  function abortRequest(controller) {
    controller.abort();
  }
  function searchURL() {
    return "".concat(APIROOT, "/index.json?noCache=").concat(Math.random());
  }
  function tileURL(dataset, extent6) {
    var url = dataset.url;
    if (DEV)
      url = url.replace(PROD_CDN, DEV_CDN);
    var bbox = extent6.toParam();
    return "".concat(url, "?geometry=").concat(bbox, "&u=").concat((window.__user || {}).display_name);
  }
  function parseTile(dataset, tile, geojson, context, callback) {
    if (!geojson)
      return callback({
        message: "No GeoJSON",
        status: -1
      });
    if (!window._dsState[dataset.id])
      window._dsState[dataset.id] = {};
    var results = [];
    (geojson.features || []).forEach(function(f2) {
      var entities = parseFeature(f2, dataset);
      if (entities)
        results.push.apply(results, entities);
    });
    callback(null, results);
  }
  function parseFeature(feature3, dataset) {
    var geom = feature3.geometry;
    var props = feature3.properties;
    if (!geom || !props)
      return null;
    var featureID = "".concat(props.__action || "create", "-").concat(feature3.id);
    if (!featureID)
      return null;
    if (dataset.cache.seen[featureID])
      return null;
    dataset.cache.seen[featureID] = true;
    var id2 = "".concat(dataset.id, "-").concat(featureID);
    var meta = {
      __fbid__: id2,
      __origid__: id2,
      __service__: "esri",
      __datasetid__: dataset.id,
      __featureid__: featureID
    };
    var entities = [];
    var nodemap = new Map();
    if (geom.type === "Point") {
      var node = new osmNode({
        loc: geom.coordinates,
        tags: parseTags(props)
      }, meta);
      if (window._dsState[dataset.id][featureID] !== "done") {
        window._dsState[dataset.id][featureID] = {
          feat: node,
          geo: geom.coordinates
        };
      }
      return [node];
    } else if (geom.type === "LineString") {
      var nodelist = parseCoordinates(geom.coordinates);
      if (nodelist.length < 2)
        return null;
      var w = new osmWay({
        nodes: nodelist,
        tags: parseTags(props)
      }, meta);
      entities.push(w);
      if (window._dsState[dataset.id][featureID] !== "done") {
        window._dsState[dataset.id][featureID] = {
          feat: w,
          geo: geom.coordinates[0]
        };
      }
      return entities;
    } else if (geom.type === "Polygon") {
      var ways = [];
      geom.coordinates.forEach(function(ring) {
        var nodelist2 = parseCoordinates(ring);
        if (nodelist2.length < 3)
          return null;
        var first2 = nodelist2[0];
        var last3 = nodelist2[nodelist2.length - 1];
        if (first2 !== last3)
          nodelist2.push(first2);
        var w2 = new osmWay({
          nodes: nodelist2
        });
        ways.push(w2);
      });
      if (ways.length === 1) {
        var updatedWay = ways[0].update(Object.assign({
          tags: parseTags(props)
        }, meta));
        entities.push(updatedWay);
        if (window._dsState[dataset.id][featureID] !== "done") {
          window._dsState[dataset.id][featureID] = {
            feat: updatedWay,
            geo: geom.coordinates[0][0]
          };
        }
      } else {
        var members = ways.map(function(w2, i2) {
          entities.push(w2);
          return {
            id: w2.id,
            role: i2 === 0 ? "outer" : "inner",
            type: "way"
          };
        });
        var tags = Object.assign(parseTags(props), {
          type: "multipolygon"
        });
        var r = new osmRelation({
          members: members,
          tags: tags
        }, meta);
        entities.push(r);
        if (window._dsState[dataset.id][featureID] !== "done") {
          window._dsState[dataset.id][featureID] = {
            feat: r,
            geo: geom.coordinates[0][0]
          };
        }
      }
      return entities;
    } else if (geom.type === "MultiPolygon") {
      var relationMembers = [];
      geom.coordinates.forEach(function(member, memberNum) {
        relationMembers[memberNum] = [];
        member.forEach(function(ring) {
          var nodelist2 = parseCoordinates(ring);
          if (nodelist2.length < 3)
            return null;
          var first2 = nodelist2[0];
          var last3 = nodelist2[nodelist2.length - 1];
          if (first2 !== last3)
            nodelist2.push(first2);
          var w2 = new osmWay({
            nodes: nodelist2
          });
          relationMembers[memberNum].push(w2);
        });
      });
      var _members = relationMembers.flatMap(function(ways2) {
        return ways2.map(function(w2, i2) {
          entities.push(w2);
          return {
            id: w2.id,
            role: i2 === 0 ? "outer" : "inner",
            type: "way"
          };
        });
      });
      var _tags = Object.assign(parseTags(props), {
        type: "multipolygon"
      });
      var _r = new osmRelation({
        members: _members,
        tags: _tags
      }, meta);
      entities.push(_r);
      if (window._dsState[dataset.id][featureID] !== "done") {
        window._dsState[dataset.id][featureID] = {
          feat: _r,
          geo: geom.coordinates[0][0][0]
        };
      }
      return entities;
    }
    function parseCoordinates(coords) {
      var nodelist2 = [];
      coords.forEach(function(coord) {
        var key = coord.toString();
        var n2 = nodemap.get(key);
        if (!n2) {
          n2 = new osmNode({
            loc: coord
          });
          entities.push(n2);
          nodemap.set(key, n2);
        }
        nodelist2.push(n2.id);
      });
      return nodelist2;
    }
    function parseTags(props2) {
      var tags2 = {};
      Object.keys(props2).forEach(function(prop) {
        var k = clean2(dataset.layer.tagmap[prop] || prop);
        var v = clean2(props2[prop]);
        if (k && v) {
          tags2[k] = v;
        }
      });
      return tags2;
    }
    function clean2(val) {
      return val ? val.toString().trim() : null;
    }
  }
  var esri_data_default = {
    init: function init2() {
      this.event = utilRebind(this, dispatch2, "on");
    },
    reset: function reset() {
      Object.values(_datasets).forEach(function(ds) {
        if (ds.cache.inflight) {
          Object.values(ds.cache.inflight).forEach(abortRequest);
        }
        ds.graph = coreGraph();
        ds.tree = coreTree(ds.graph);
        ds.cache = {
          inflight: {},
          loaded: {},
          seen: {},
          origIdTile: {}
        };
      });
      return this;
    },
    graph: function graph(datasetID) {
      var ds = _datasets[datasetID];
      return ds && ds.graph;
    },
    intersects: function intersects2(datasetID, extent6) {
      var ds = _datasets[datasetID];
      if (!ds || !ds.tree || !ds.graph)
        return [];
      return ds.tree.intersects(extent6, ds.graph);
    },
    toggle: function toggle(val) {
      _off = !val;
      return this;
    },
    loadTiles: function loadTiles(datasetID, projection2, _taskExtent, context) {
      if (_off)
        return;
      window._mostRecentDsId = datasetID;
      var ds = _datasets[datasetID];
      if (!ds || !ds.layer)
        return;
      var cache7 = ds.cache;
      var tree = ds.tree;
      var graph3 = ds.graph;
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler.getTiles(proj).tiles;
      Object.keys(cache7.inflight).forEach(function(k) {
        var wanted = tiles.find(function(tile) {
          return tile.id === k;
        });
        if (!wanted) {
          abortRequest(cache7.inflight[k]);
          delete cache7.inflight[k];
        }
      });
      if (!_loaded[datasetID]) {
        var _ds$extent = _slicedToArray(ds.extent, 2), _ds$extent$ = _slicedToArray(_ds$extent[0], 2), minLng = _ds$extent$[0], minLat = _ds$extent$[1], _ds$extent$2 = _slicedToArray(_ds$extent[1], 2), maxLng = _ds$extent$2[0], maxLat = _ds$extent$2[1];
        var xml = '<gpx xmlns="http://www.topografix.com/GPX/1/1" creator="LINZ Addr" version="1.1">\n      <metadata>\n        <link href="https://github.com/hotosm/tasking-manager">\n          <text>LINZ Addr</text>\n        </link>\n        <time>2021-03-08T22:14:43.088005</time>\n      </metadata>\n      <trk>\n        <name>Extent of the '.concat(esc(ds.name), ' data</name>\n        <trkseg>\n        <trkpt lat="').concat(minLat - 3e-4, '" lon="').concat(minLng - 3e-4, '"/>\n        <trkpt lat="').concat(maxLat + 3e-4, '" lon="').concat(minLng - 3e-4, '"/>\n        <trkpt lat="').concat(maxLat + 3e-4, '" lon="').concat(maxLng + 3e-4, '"/>\n        <trkpt lat="').concat(minLat - 3e-4, '" lon="').concat(maxLng + 3e-4, '"/>\n        <trkpt lat="').concat(minLat - 3e-4, '" lon="').concat(minLng - 3e-4, '"/>\n        </trkseg>\n      </trk>\n      <wpt lat="').concat(minLat - 3e-4, '" lon="').concat(minLng - 3e-4, '"/>\n      <wpt lat="').concat(maxLat + 3e-4, '" lon="').concat(minLng - 3e-4, '"/>\n      <wpt lat="').concat(maxLat + 3e-4, '" lon="').concat(maxLng + 3e-4, '"/>\n      <wpt lat="').concat(minLat - 3e-4, '" lon="').concat(maxLng + 3e-4, '"/>\n      <wpt lat="').concat(minLat - 3e-4, '" lon="').concat(minLng - 3e-4, '"/>\n      </gpx>');
        var url = "data:text/xml;base64,".concat(btoa(xml));
        context.layers().layer("data").url(url);
      }
      tiles.forEach(function(tile) {
        if (cache7.loaded[tile.id] || cache7.inflight[tile.id])
          return;
        var controller = new AbortController();
        var url2 = tileURL(ds, tile.wgs84Extent);
        json_default(url2, {
          signal: controller.signal
        }).then(function(geojson) {
          _loaded[datasetID] = {
            name: ds.name,
            source: ds.source
          };
          delete cache7.inflight[tile.id];
          if (!geojson)
            throw new Error("no geojson");
          parseTile(ds, tile, geojson, context, function(err, results) {
            if (err)
              throw new Error(err);
            graph3.rebase(results, [graph3], true);
            tree.rebase(results, true);
            cache7.loaded[tile.id] = true;
            dispatch2.call("loadedData");
          });
        }).catch(console.error);
        cache7.inflight[tile.id] = controller;
      });
    },
    loadDatasets: function loadDatasets() {
      if (Object.keys(_datasets).length) {
        return Promise.resolve(_datasets);
      }
      var that = this;
      return json_default(searchURL()).then(function(json2) {
        (json2.results || []).forEach(function(ds) {
          if (_datasets[ds.id])
            return;
          _datasets[ds.id] = ds;
          ds.graph = coreGraph();
          ds.tree = coreTree(ds.graph);
          ds.cache = {
            inflight: {},
            loaded: {},
            seen: {},
            origIdTile: {}
          };
          var license = select_default2(document.createElement("div"));
          license.html(ds.licenseInfo);
          license.selectAll("*").attr("style", null).attr("size", null);
          ds.license_html = license.html();
          that.loadLayer(ds.id);
        });
        return _datasets;
      }).catch(function() {
      });
    },
    getLoadedDatasetIDs: function getLoadedDatasetIDs() {
      return Object.keys(_loaded);
    },
    getLoadedDatasetNames: function getLoadedDatasetNames() {
      return Object.values(_loaded).map(function(x2) {
        return x2.name;
      });
    },
    getLoadedDatasetSources: function getLoadedDatasetSources() {
      return _toConsumableArray(new Set(Object.values(_loaded).map(function(x2) {
        return x2.source;
      })));
    },
    resetLoadedDatasets: function resetLoadedDatasets() {
      _loaded = {};
    },
    loadLayer: function loadLayer(datasetID) {
      var ds = _datasets[datasetID];
      ds.layer = {
        tagmap: {}
      };
    }
  };

  // modules/services/fb_ai_features.js
  var APIROOT2 = "https://mapwith.ai/maps/ml_roads";
  var TILEZOOM2 = 16;
  var tiler2 = new Tiler().zoomRange(TILEZOOM2);
  var dispatch3 = dispatch_default("loadedData");
  var _datasets2 = {};
  var _deferredAiFeaturesParsing = new Set();
  var _off2;
  function abortRequest2(i2) {
    i2.abort();
  }
  function tileURL2(dataset, extent6, taskExtent) {
    var isConflated = /-conflated$/.test(dataset.id);
    var datasetID = dataset.id.replace("-conflated", "");
    var qs = {
      conflate_with_osm: isConflated,
      theme: "ml_road_vector",
      collaborator: "fbid",
      token: "ASZUVdYpCkd3M6ZrzjXdQzHulqRMnxdlkeBJWEKOeTUoY_Gwm9fuEd2YObLrClgDB_xfavizBsh0oDfTWTF7Zb4C",
      hash: "ASYM8LPNy8k1XoJiI7A"
    };
    if (datasetID === "fbRoads") {
      qs.result_type = "road_vector_xml";
    } else if (datasetID === "msBuildings") {
      qs.result_type = "road_building_vector_xml";
      qs.building_source = "microsoft";
    } else {
      qs.result_type = "osm_xml";
      qs.sources = "esri_building.".concat(datasetID);
    }
    qs.bbox = extent6.toParam();
    if (taskExtent)
      qs.crop_bbox = taskExtent.toParam();
    var customUrlRoot = utilStringQs(window.location.hash).fb_ml_road_url;
    var customRoadTags = utilStringQs(window.location.hash).fb_ml_road_tags;
    var urlRoot = customUrlRoot || APIROOT2;
    var url = urlRoot + "?" + fbmlQsString(qs, true);
    if (customRoadTags) {
      customRoadTags.split(",").forEach(function(tag) {
        url += "&allow_tags[]=" + tag;
      });
    }
    return url;
    function fbmlQsString(obj, noencode) {
      function softEncode(s) {
        return encodeURIComponent(s).replace(/(%2F|%3A|%2C|%7B|%7D)/g, decodeURIComponent);
      }
      return Object.keys(obj).map(function(key) {
        return encodeURIComponent(key) + "=" + (noencode ? softEncode(obj[key]) : encodeURIComponent(obj[key]));
      }).join("&");
    }
  }
  function getLoc(attrs) {
    var lon = attrs.lon && attrs.lon.value;
    var lat = attrs.lat && attrs.lat.value;
    return [parseFloat(lon), parseFloat(lat)];
  }
  function getNodes(obj) {
    var elems = obj.getElementsByTagName("nd");
    var nodes = new Array(elems.length);
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      nodes[i2] = "n" + elems[i2].attributes.ref.value;
    }
    return nodes;
  }
  function getTags(obj) {
    var elems = obj.getElementsByTagName("tag");
    var tags = {};
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      var attrs = elems[i2].attributes;
      var k = (attrs.k.value || "").trim();
      var v = (attrs.v.value || "").trim();
      if (k && v) {
        tags[k] = v;
      }
    }
    return tags;
  }
  function getVisible(attrs) {
    return !attrs.visible || attrs.visible.value !== "false";
  }
  var parsers = {
    node: function nodeData(obj, uid) {
      var attrs = obj.attributes;
      return new osmNode({
        id: uid,
        visible: getVisible(attrs),
        loc: getLoc(attrs),
        tags: getTags(obj)
      });
    },
    way: function wayData(obj, uid) {
      var attrs = obj.attributes;
      return new osmWay({
        id: uid,
        visible: getVisible(attrs),
        tags: getTags(obj),
        nodes: getNodes(obj)
      });
    }
  };
  function parseXML(dataset, xml, tile, callback, options) {
    options = Object.assign({
      skipSeen: true
    }, options);
    if (!xml || !xml.childNodes) {
      return callback({
        message: "No XML",
        status: -1
      });
    }
    var graph3 = dataset.graph;
    var cache7 = dataset.cache;
    var root3 = xml.childNodes[0];
    var children2 = root3.childNodes;
    var handle = window.requestIdleCallback(function() {
      _deferredAiFeaturesParsing.delete(handle);
      var results = [];
      for (var i2 = 0; i2 < children2.length; i2++) {
        var result6 = parseChild(children2[i2]);
        if (result6)
          results.push(result6);
      }
      callback(null, results);
    });
    _deferredAiFeaturesParsing.add(handle);
    function parseChild(child) {
      var parser2 = parsers[child.nodeName];
      if (!parser2)
        return null;
      var uid = osmEntity.id.fromOSM(child.nodeName, child.attributes.id.value);
      if (options.skipSeen) {
        if (cache7.seen[uid])
          return null;
        if (cache7.origIdTile[uid])
          return null;
        cache7.seen[uid] = true;
      }
      var origUid;
      if (child.attributes.orig_id) {
        origUid = osmEntity.id.fromOSM(child.nodeName, child.attributes.orig_id.value);
        if (graph3.entities[origUid] || cache7.origIdTile[origUid] && cache7.origIdTile[origUid] !== tile.id) {
          return null;
        }
        cache7.origIdTile[origUid] = tile.id;
      }
      var entity2 = parser2(child, uid);
      var meta = {
        __fbid__: child.attributes.id.value,
        __origid__: origUid,
        __service__: "fbml",
        __datasetid__: dataset.id
      };
      return Object.assign(entity2, meta);
    }
  }
  var fb_ai_features_default = {
    init: function init3() {
      this.event = utilRebind(this, dispatch3, "on");
      var datasetID = "rapid_intro_graph";
      var graph3 = coreGraph();
      var tree = coreTree(graph3);
      var cache7 = {
        inflight: {},
        loaded: {},
        seen: {},
        origIdTile: {}
      };
      var ds = {
        id: datasetID,
        graph: graph3,
        tree: tree,
        cache: cache7
      };
      _datasets2[datasetID] = ds;
    },
    reset: function reset2() {
      Array.from(_deferredAiFeaturesParsing).forEach(function(handle) {
        window.cancelIdleCallback(handle);
        _deferredAiFeaturesParsing.delete(handle);
      });
      Object.values(_datasets2).forEach(function(ds) {
        if (ds.cache.inflight) {
          Object.values(ds.cache.inflight).forEach(abortRequest2);
        }
        ds.graph = coreGraph();
        ds.tree = coreTree(ds.graph);
        ds.cache = {
          inflight: {},
          loaded: {},
          seen: {},
          origIdTile: {}
        };
      });
      return this;
    },
    graph: function graph2(datasetID) {
      var ds = _datasets2[datasetID];
      return ds && ds.graph;
    },
    intersects: function intersects3(datasetID, extent6) {
      var ds = _datasets2[datasetID];
      if (!ds || !ds.tree || !ds.graph)
        return [];
      return ds.tree.intersects(extent6, ds.graph);
    },
    merge: function merge2(datasetID, entities) {
      var ds = _datasets2[datasetID];
      if (!ds || !ds.tree || !ds.graph)
        return;
      ds.graph.rebase(entities, [ds.graph], false);
      ds.tree.rebase(entities, false);
    },
    cache: function cache(datasetID, obj) {
      var ds = _datasets2[datasetID];
      if (!ds || !ds.cache)
        return;
      function cloneDeep(source) {
        return JSON.parse(JSON.stringify(source));
      }
      if (!arguments.length) {
        return {
          tile: cloneDeep(ds.cache)
        };
      }
      if (obj === "get") {
        return ds.cache;
      }
      ds.cache = obj;
    },
    toggle: function toggle2(val) {
      _off2 = !val;
      return this;
    },
    loadTiles: function loadTiles2(datasetID, projection2, taskExtent) {
      if (_off2)
        return;
      var ds = _datasets2[datasetID];
      var graph3, tree, cache7;
      if (ds) {
        graph3 = ds.graph;
        tree = ds.tree;
        cache7 = ds.cache;
      } else {
        graph3 = coreGraph();
        tree = coreTree(graph3);
        cache7 = {
          inflight: {},
          loaded: {},
          seen: {},
          origIdTile: {}
        };
        ds = {
          id: datasetID,
          graph: graph3,
          tree: tree,
          cache: cache7
        };
        _datasets2[datasetID] = ds;
      }
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler2.getTiles(proj).tiles;
      Object.keys(cache7.inflight).forEach(function(k) {
        var wanted = tiles.find(function(tile) {
          return k === tile.id;
        });
        if (!wanted) {
          abortRequest2(cache7.inflight[k]);
          delete cache7.inflight[k];
        }
      });
      tiles.forEach(function(tile) {
        if (cache7.loaded[tile.id] || cache7.inflight[tile.id])
          return;
        var controller = new AbortController();
        xml_default(tileURL2(ds, tile.wgs84Extent, taskExtent), {
          signal: controller.signal
        }).then(function(dom) {
          delete cache7.inflight[tile.id];
          if (!dom)
            return;
          parseXML(ds, dom, tile, function(err, results) {
            if (err)
              return;
            graph3.rebase(results, [graph3], true);
            tree.rebase(results, true);
            cache7.loaded[tile.id] = true;
            dispatch3.call("loadedData");
          });
        }).catch(function() {
        });
        cache7.inflight[tile.id] = controller;
      });
    }
  };

  // modules/services/keepRight.js
  init_slicedToArray();
  var import_rbush3 = __toModule(require_rbush_min());
  var TILEZOOM3 = 14;
  var tiler3 = new Tiler().zoomRange(TILEZOOM3);
  var dispatch4 = dispatch_default("loaded");
  var _krUrlRoot = "https://www.keepright.at";
  var _krData = {
    errorTypes: {},
    localizeStrings: {}
  };
  var _cache;
  var _krRuleset = [
    30,
    40,
    50,
    60,
    70,
    90,
    100,
    110,
    120,
    130,
    150,
    160,
    170,
    180,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    210,
    220,
    230,
    231,
    232,
    270,
    280,
    281,
    282,
    283,
    284,
    285,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    300,
    310,
    311,
    312,
    313,
    320,
    350,
    360,
    370,
    380,
    390,
    400,
    401,
    402,
    410,
    411,
    412,
    413
  ];
  function abortRequest3(controller) {
    if (controller) {
      controller.abort();
    }
  }
  function abortUnwantedRequests(cache7, tiles) {
    Object.keys(cache7.inflightTile).forEach(function(k) {
      var wanted = tiles.find(function(tile) {
        return k === tile.id;
      });
      if (!wanted) {
        abortRequest3(cache7.inflightTile[k]);
        delete cache7.inflightTile[k];
      }
    });
  }
  function encodeIssueRtree(d) {
    return {
      minX: d.loc[0],
      minY: d.loc[1],
      maxX: d.loc[0],
      maxY: d.loc[1],
      data: d
    };
  }
  function updateRtree(item, replace2) {
    _cache.rtree.remove(item, function(a, b2) {
      return a.data.id === b2.data.id;
    });
    if (replace2) {
      _cache.rtree.insert(item);
    }
  }
  function tokenReplacements(d) {
    if (!(d instanceof QAItem))
      return;
    var htmlRegex = new RegExp(/<\/[a-z][\s\S]*>/);
    var replacements = {};
    var issueTemplate = _krData.errorTypes[d.whichType];
    if (!issueTemplate) {
      console.log("No Template: ", d.whichType);
      console.log("  ", d.description);
      return;
    }
    if (!issueTemplate.regex)
      return;
    var errorRegex = new RegExp(issueTemplate.regex, "i");
    var errorMatch = errorRegex.exec(d.description);
    if (!errorMatch) {
      console.log("Unmatched: ", d.whichType);
      console.log("  ", d.description);
      console.log("  ", errorRegex);
      return;
    }
    for (var i2 = 1; i2 < errorMatch.length; i2++) {
      var capture = errorMatch[i2];
      var idType = void 0;
      idType = "IDs" in issueTemplate ? issueTemplate.IDs[i2 - 1] : "";
      if (idType && capture) {
        capture = parseError(capture, idType);
      } else if (htmlRegex.test(capture)) {
        capture = "\\" + capture + "\\";
      } else {
        var compare = capture.toLowerCase();
        if (_krData.localizeStrings[compare]) {
          capture = _t("QA.keepRight.error_parts." + _krData.localizeStrings[compare]);
        }
      }
      replacements["var" + i2] = capture;
    }
    return replacements;
  }
  function parseError(capture, idType) {
    var compare = capture.toLowerCase();
    if (_krData.localizeStrings[compare]) {
      capture = _t("QA.keepRight.error_parts." + _krData.localizeStrings[compare]);
    }
    switch (idType) {
      case "this":
        capture = linkErrorObject2(capture);
        break;
      case "url":
        capture = linkURL(capture);
        break;
      case "n":
      case "w":
      case "r":
        capture = linkEntity2(idType + capture);
        break;
      case "20":
        capture = parse20(capture);
        break;
      case "211":
        capture = parse211(capture);
        break;
      case "231":
        capture = parse231(capture);
        break;
      case "294":
        capture = parse294(capture);
        break;
      case "370":
        capture = parse370(capture);
        break;
    }
    return capture;
    function linkErrorObject2(d) {
      return '<a class="error_object_link">'.concat(d, "</a>");
    }
    function linkEntity2(d) {
      return '<a class="error_entity_link">'.concat(d, "</a>");
    }
    function linkURL(d) {
      return '<a class="kr_external_link" target="_blank" href="'.concat(d, '">').concat(d, "</a>");
    }
    function parse211(capture2) {
      var newList = [];
      var items = capture2.split(", ");
      items.forEach(function(item) {
        var id2 = linkEntity2("n" + item.slice(1));
        newList.push(id2);
      });
      return newList.join(", ");
    }
    function parse231(capture2) {
      var newList = [];
      var items = capture2.split("),");
      items.forEach(function(item) {
        var match = item.match(/\#(\d+)\((.+)\)?/);
        if (match !== null && match.length > 2) {
          newList.push(linkEntity2("w" + match[1]) + " " + _t("QA.keepRight.errorTypes.231.layer", {
            layer: match[2]
          }));
        }
      });
      return newList.join(", ");
    }
    function parse294(capture2) {
      var newList = [];
      var items = capture2.split(",");
      items.forEach(function(item) {
        item = item.split(" ");
        var role = '"'.concat(item[0], '"');
        var idType2 = item[1].slice(0, 1);
        var id2 = item[2].slice(1);
        id2 = linkEntity2(idType2 + id2);
        newList.push("".concat(role, " ").concat(item[1], " ").concat(id2));
      });
      return newList.join(", ");
    }
    function parse370(capture2) {
      if (!capture2)
        return "";
      var match = capture2.match(/\(including the name (\'.+\')\)/);
      if (match && match.length) {
        return _t("QA.keepRight.errorTypes.370.including_the_name", {
          name: match[1]
        });
      }
      return "";
    }
    function parse20(capture2) {
      var newList = [];
      var items = capture2.split(",");
      items.forEach(function(item) {
        var id2 = linkEntity2("n" + item.slice(1));
        newList.push(id2);
      });
      return newList.join(", ");
    }
  }
  var keepRight_default = {
    title: "keepRight",
    init: function init4() {
      _mainFileFetcher.get("keepRight").then(function(d) {
        return _krData = d;
      });
      if (!_cache) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch4, "on");
    },
    reset: function reset3() {
      if (_cache) {
        Object.values(_cache.inflightTile).forEach(abortRequest3);
      }
      _cache = {
        data: {},
        loadedTile: {},
        inflightTile: {},
        inflightPost: {},
        closed: {},
        rtree: new import_rbush3.default()
      };
    },
    loadIssues: function loadIssues(projection2) {
      var _this = this;
      var options = {
        format: "geojson",
        ch: _krRuleset
      };
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler3.getTiles(proj).tiles;
      abortUnwantedRequests(_cache, tiles);
      tiles.forEach(function(tile) {
        if (_cache.loadedTile[tile.id] || _cache.inflightTile[tile.id])
          return;
        var _tile$wgs84Extent$rec = tile.wgs84Extent.rectangle(), _tile$wgs84Extent$rec2 = _slicedToArray(_tile$wgs84Extent$rec, 4), left = _tile$wgs84Extent$rec2[0], top = _tile$wgs84Extent$rec2[1], right = _tile$wgs84Extent$rec2[2], bottom = _tile$wgs84Extent$rec2[3];
        var params = Object.assign({}, options, {
          left: left,
          bottom: bottom,
          right: right,
          top: top
        });
        var url = "".concat(_krUrlRoot, "/export.php?") + utilQsString(params);
        var controller = new AbortController();
        _cache.inflightTile[tile.id] = controller;
        json_default(url, {
          signal: controller.signal
        }).then(function(data2) {
          delete _cache.inflightTile[tile.id];
          _cache.loadedTile[tile.id] = true;
          if (!data2 || !data2.features || !data2.features.length) {
            throw new Error("No Data");
          }
          data2.features.forEach(function(feature3) {
            var _feature$properties = feature3.properties, itemType = _feature$properties.error_type, id2 = _feature$properties.error_id, _feature$properties$c = _feature$properties.comment, comment = _feature$properties$c === void 0 ? null : _feature$properties$c, objectId = _feature$properties.object_id, objectType = _feature$properties.object_type, schema = _feature$properties.schema, title = _feature$properties.title;
            var loc = feature3.geometry.coordinates, _feature$properties$d = feature3.properties.description, description = _feature$properties$d === void 0 ? "" : _feature$properties$d;
            var issueTemplate = _krData.errorTypes[itemType];
            var parentIssueType = (Math.floor(itemType / 10) * 10).toString();
            var whichType = issueTemplate ? itemType : parentIssueType;
            var whichTemplate = _krData.errorTypes[whichType];
            switch (whichType) {
              case "170":
                description = "This feature has a FIXME tag: ".concat(description);
                break;
              case "292":
              case "293":
                description = description.replace("A turn-", "This turn-");
                break;
              case "294":
              case "295":
              case "296":
              case "297":
              case "298":
                description = "This turn-restriction~".concat(description);
                break;
              case "300":
                description = "This highway is missing a maxspeed tag";
                break;
              case "411":
              case "412":
              case "413":
                description = "This feature~".concat(description);
                break;
            }
            var coincident = false;
            do {
              var delta = coincident ? [1e-5, 0] : [0, 1e-5];
              loc = vecAdd(loc, delta);
              var bbox = new Extent(loc).bbox();
              coincident = _cache.rtree.search(bbox).length;
            } while (coincident);
            var d = new QAItem(loc, _this, itemType, id2, {
              comment: comment,
              description: description,
              whichType: whichType,
              parentIssueType: parentIssueType,
              severity: whichTemplate.severity || "error",
              objectId: objectId,
              objectType: objectType,
              schema: schema,
              title: title
            });
            d.replacements = tokenReplacements(d);
            _cache.data[id2] = d;
            _cache.rtree.insert(encodeIssueRtree(d));
          });
          dispatch4.call("loaded");
        }).catch(function() {
          delete _cache.inflightTile[tile.id];
          _cache.loadedTile[tile.id] = true;
        });
      });
    },
    postUpdate: function postUpdate(d, callback) {
      var _this2 = this;
      if (_cache.inflightPost[d.id]) {
        return callback({
          message: "Error update already inflight",
          status: -2
        }, d);
      }
      var params = {
        schema: d.schema,
        id: d.id
      };
      if (d.newStatus) {
        params.st = d.newStatus;
      }
      if (d.newComment !== void 0) {
        params.co = d.newComment;
      }
      var url = "".concat(_krUrlRoot, "/comment.php?") + utilQsString(params);
      var controller = new AbortController();
      _cache.inflightPost[d.id] = controller;
      json_default(url, {
        signal: controller.signal
      }).finally(function() {
        delete _cache.inflightPost[d.id];
        if (d.newStatus === "ignore") {
          _this2.removeItem(d);
        } else if (d.newStatus === "ignore_t") {
          _this2.removeItem(d);
          _cache.closed["".concat(d.schema, ":").concat(d.id)] = true;
        } else {
          d = _this2.replaceItem(d.update({
            comment: d.newComment,
            newComment: void 0,
            newState: void 0
          }));
        }
        if (callback)
          callback(null, d);
      });
    },
    getItems: function getItems(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      return _cache.rtree.search(bbox).map(function(d) {
        return d.data;
      });
    },
    getError: function getError(id2) {
      return _cache.data[id2];
    },
    replaceItem: function replaceItem(item) {
      if (!(item instanceof QAItem) || !item.id)
        return;
      _cache.data[item.id] = item;
      updateRtree(encodeIssueRtree(item), true);
      return item;
    },
    removeItem: function removeItem(item) {
      if (!(item instanceof QAItem) || !item.id)
        return;
      delete _cache.data[item.id];
      updateRtree(encodeIssueRtree(item), false);
    },
    issueURL: function issueURL(item) {
      return "".concat(_krUrlRoot, "/report_map.php?schema=").concat(item.schema, "&error=").concat(item.id);
    },
    getClosedIDs: function getClosedIDs() {
      return Object.keys(_cache.closed).sort();
    }
  };

  // modules/services/improveOSM.js
  init_slicedToArray();
  var import_rbush4 = __toModule(require_rbush_min());
  var TILEZOOM4 = 14;
  var tiler4 = new Tiler().zoomRange(TILEZOOM4);
  var dispatch5 = dispatch_default("loaded");
  var _impOsmUrls = {
    ow: "https://grab.community.improve-osm.org/directionOfFlowService",
    mr: "https://grab.community.improve-osm.org/missingGeoService",
    tr: "https://grab.community.improve-osm.org/turnRestrictionService"
  };
  var _impOsmData = {
    icons: {}
  };
  var _cache2;
  function abortRequest4(i2) {
    Object.values(i2).forEach(function(controller) {
      if (controller) {
        controller.abort();
      }
    });
  }
  function abortUnwantedRequests2(cache7, tiles) {
    Object.keys(cache7.inflightTile).forEach(function(k) {
      var wanted = tiles.find(function(tile) {
        return k === tile.id;
      });
      if (!wanted) {
        abortRequest4(cache7.inflightTile[k]);
        delete cache7.inflightTile[k];
      }
    });
  }
  function encodeIssueRtree2(d) {
    return {
      minX: d.loc[0],
      minY: d.loc[1],
      maxX: d.loc[0],
      maxY: d.loc[1],
      data: d
    };
  }
  function updateRtree2(item, replace2) {
    _cache2.rtree.remove(item, function(a, b2) {
      return a.data.id === b2.data.id;
    });
    if (replace2) {
      _cache2.rtree.insert(item);
    }
  }
  function linkErrorObject(d) {
    return '<a class="error_object_link">'.concat(d, "</a>");
  }
  function linkEntity(d) {
    return '<a class="error_entity_link">'.concat(d, "</a>");
  }
  function pointAverage(points) {
    if (points.length) {
      var sum = points.reduce(function(acc, point5) {
        return vecAdd(acc, [point5.lon, point5.lat]);
      }, [0, 0]);
      return vecScale(sum, 1 / points.length);
    } else {
      return [0, 0];
    }
  }
  function relativeBearing(p1, p2) {
    var angle2 = Math.atan2(p2.lon - p1.lon, p2.lat - p1.lat);
    if (angle2 < 0) {
      angle2 += 2 * Math.PI;
    }
    return angle2 * 180 / Math.PI;
  }
  function cardinalDirection(bearing) {
    var dir = 45 * Math.round(bearing / 45);
    var compass = {
      0: "north",
      45: "northeast",
      90: "east",
      135: "southeast",
      180: "south",
      225: "southwest",
      270: "west",
      315: "northwest",
      360: "north"
    };
    return _t("QA.improveOSM.directions.".concat(compass[dir]));
  }
  function preventCoincident(loc, bumpUp) {
    var coincident = false;
    do {
      var delta = coincident ? [1e-5, 0] : bumpUp ? [0, 1e-5] : [0, 0];
      loc = vecAdd(loc, delta);
      var bbox = new Extent(loc).bbox();
      coincident = _cache2.rtree.search(bbox).length;
    } while (coincident);
    return loc;
  }
  var improveOSM_default = {
    title: "improveOSM",
    init: function init5() {
      _mainFileFetcher.get("qa_data").then(function(d) {
        return _impOsmData = d.improveOSM;
      });
      if (!_cache2) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch5, "on");
    },
    reset: function reset4() {
      if (_cache2) {
        Object.values(_cache2.inflightTile).forEach(abortRequest4);
      }
      _cache2 = {
        data: {},
        loadedTile: {},
        inflightTile: {},
        inflightPost: {},
        closed: {},
        rtree: new import_rbush4.default()
      };
    },
    loadIssues: function loadIssues2(projection2) {
      var _this = this;
      var options = {
        client: "iD",
        status: "OPEN",
        zoom: "19"
      };
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler4.getTiles(proj).tiles;
      abortUnwantedRequests2(_cache2, tiles);
      tiles.forEach(function(tile) {
        if (_cache2.loadedTile[tile.id] || _cache2.inflightTile[tile.id])
          return;
        var _tile$wgs84Extent$rec = tile.wgs84Extent.rectangle(), _tile$wgs84Extent$rec2 = _slicedToArray(_tile$wgs84Extent$rec, 4), east = _tile$wgs84Extent$rec2[0], north = _tile$wgs84Extent$rec2[1], west = _tile$wgs84Extent$rec2[2], south = _tile$wgs84Extent$rec2[3];
        var params = Object.assign({}, options, {
          east: east,
          south: south,
          west: west,
          north: north
        });
        var requests = {};
        Object.keys(_impOsmUrls).forEach(function(k) {
          var kParams = Object.assign({}, params, k === "mr" ? {
            type: "PARKING,ROAD,BOTH,PATH"
          } : {
            confidenceLevel: "C1"
          });
          var url = "".concat(_impOsmUrls[k], "/search?") + utilQsString(kParams);
          var controller = new AbortController();
          requests[k] = controller;
          json_default(url, {
            signal: controller.signal
          }).then(function(data2) {
            delete _cache2.inflightTile[tile.id][k];
            if (!Object.keys(_cache2.inflightTile[tile.id]).length) {
              delete _cache2.inflightTile[tile.id];
              _cache2.loadedTile[tile.id] = true;
            }
            if (data2.roadSegments) {
              data2.roadSegments.forEach(function(feature3) {
                var points = feature3.points, wayId = feature3.wayId, fromNodeId = feature3.fromNodeId, toNodeId = feature3.toNodeId;
                var itemId = "".concat(wayId).concat(fromNodeId).concat(toNodeId);
                var mid = points.length / 2;
                var loc;
                if (mid % 1 === 0) {
                  loc = pointAverage([points[mid - 1], points[mid]]);
                } else {
                  mid = points[Math.floor(mid)];
                  loc = [mid.lon, mid.lat];
                }
                loc = preventCoincident(loc, false);
                var d = new QAItem(loc, _this, k, itemId, {
                  issueKey: k,
                  identifier: {
                    wayId: wayId,
                    fromNodeId: fromNodeId,
                    toNodeId: toNodeId
                  },
                  objectId: wayId,
                  objectType: "way"
                });
                d.replacements = {
                  percentage: feature3.percentOfTrips,
                  num_trips: feature3.numberOfTrips,
                  highway: linkErrorObject(_t("QA.keepRight.error_parts.highway")),
                  from_node: linkEntity("n" + feature3.fromNodeId),
                  to_node: linkEntity("n" + feature3.toNodeId)
                };
                _cache2.data[d.id] = d;
                _cache2.rtree.insert(encodeIssueRtree2(d));
              });
            }
            if (data2.tiles) {
              data2.tiles.forEach(function(feature3) {
                var type3 = feature3.type, x2 = feature3.x, y = feature3.y, numberOfTrips = feature3.numberOfTrips;
                var geoType = type3.toLowerCase();
                var itemId = "".concat(geoType).concat(x2).concat(y).concat(numberOfTrips);
                var loc = pointAverage(feature3.points);
                loc = preventCoincident(loc, false);
                var d = new QAItem(loc, _this, "".concat(k, "-").concat(geoType), itemId, {
                  issueKey: k,
                  identifier: {
                    x: x2,
                    y: y
                  }
                });
                d.replacements = {
                  num_trips: numberOfTrips,
                  geometry_type: _t("QA.improveOSM.geometry_types.".concat(geoType))
                };
                if (numberOfTrips === -1) {
                  d.desc = _t("QA.improveOSM.error_types.mr.description_alt", d.replacements);
                }
                _cache2.data[d.id] = d;
                _cache2.rtree.insert(encodeIssueRtree2(d));
              });
            }
            if (data2.entities) {
              data2.entities.forEach(function(feature3) {
                var point5 = feature3.point, id2 = feature3.id, segments2 = feature3.segments, numberOfPasses = feature3.numberOfPasses, turnType = feature3.turnType;
                var itemId = "".concat(id2.replace(/[,:+#]/g, "_"));
                var loc = preventCoincident([point5.lon, point5.lat], true);
                var ids = id2.split(",");
                var from_way = ids[0];
                var via_node = ids[3];
                var to_way = ids[2].split(":")[1];
                var d = new QAItem(loc, _this, k, itemId, {
                  issueKey: k,
                  identifier: id2,
                  objectId: via_node,
                  objectType: "node"
                });
                var _segments$0$points = _slicedToArray(segments2[0].points, 2), p1 = _segments$0$points[0], p2 = _segments$0$points[1];
                var dir_of_travel = cardinalDirection(relativeBearing(p1, p2));
                d.replacements = {
                  num_passed: numberOfPasses,
                  num_trips: segments2[0].numberOfTrips,
                  turn_restriction: turnType.toLowerCase(),
                  from_way: linkEntity("w" + from_way),
                  to_way: linkEntity("w" + to_way),
                  travel_direction: dir_of_travel,
                  junction: linkErrorObject(_t("QA.keepRight.error_parts.this_node"))
                };
                _cache2.data[d.id] = d;
                _cache2.rtree.insert(encodeIssueRtree2(d));
                dispatch5.call("loaded");
              });
            }
          }).catch(function() {
            delete _cache2.inflightTile[tile.id][k];
            if (!Object.keys(_cache2.inflightTile[tile.id]).length) {
              delete _cache2.inflightTile[tile.id];
              _cache2.loadedTile[tile.id] = true;
            }
          });
        });
        _cache2.inflightTile[tile.id] = requests;
      });
    },
    getComments: function getComments(item) {
      var _this2 = this;
      if (item.comments) {
        return Promise.resolve(item);
      }
      var key = item.issueKey;
      var qParams = {};
      if (key === "ow") {
        qParams = item.identifier;
      } else if (key === "mr") {
        qParams.tileX = item.identifier.x;
        qParams.tileY = item.identifier.y;
      } else if (key === "tr") {
        qParams.targetId = item.identifier;
      }
      var url = "".concat(_impOsmUrls[key], "/retrieveComments?") + utilQsString(qParams);
      var cacheComments = function cacheComments2(data2) {
        item.comments = data2.comments ? data2.comments.reverse() : [];
        _this2.replaceItem(item);
      };
      return json_default(url).then(cacheComments).then(function() {
        return item;
      });
    },
    postUpdate: function postUpdate2(d, callback) {
      if (!osm_default.authenticated()) {
        return callback({
          message: "Not Authenticated",
          status: -3
        }, d);
      }
      if (_cache2.inflightPost[d.id]) {
        return callback({
          message: "Error update already inflight",
          status: -2
        }, d);
      }
      osm_default.userDetails(sendPayload.bind(this));
      function sendPayload(err, user) {
        var _this3 = this;
        if (err) {
          return callback(err, d);
        }
        var key = d.issueKey;
        var url = "".concat(_impOsmUrls[key], "/comment");
        var payload = {
          username: user.display_name,
          targetIds: [d.identifier]
        };
        if (d.newStatus) {
          payload.status = d.newStatus;
          payload.text = "status changed";
        }
        if (d.newComment) {
          payload.text = d.newComment;
        }
        var controller = new AbortController();
        _cache2.inflightPost[d.id] = controller;
        var options = {
          method: "POST",
          signal: controller.signal,
          body: JSON.stringify(payload)
        };
        json_default(url, options).then(function() {
          delete _cache2.inflightPost[d.id];
          if (!d.newStatus) {
            var now4 = new Date();
            var comments = d.comments ? d.comments : [];
            comments.push({
              username: payload.username,
              text: payload.text,
              timestamp: now4.getTime() / 1e3
            });
            _this3.replaceItem(d.update({
              comments: comments,
              newComment: void 0
            }));
          } else {
            _this3.removeItem(d);
            if (d.newStatus === "SOLVED") {
              if (!(d.issueKey in _cache2.closed)) {
                _cache2.closed[d.issueKey] = 0;
              }
              _cache2.closed[d.issueKey] += 1;
            }
          }
          if (callback)
            callback(null, d);
        }).catch(function(err2) {
          delete _cache2.inflightPost[d.id];
          if (callback)
            callback(err2.message);
        });
      }
    },
    getItems: function getItems2(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      return _cache2.rtree.search(bbox).map(function(d) {
        return d.data;
      });
    },
    getError: function getError2(id2) {
      return _cache2.data[id2];
    },
    getIcon: function getIcon(itemType) {
      return _impOsmData.icons[itemType];
    },
    replaceItem: function replaceItem2(issue) {
      if (!(issue instanceof QAItem) || !issue.id)
        return;
      _cache2.data[issue.id] = issue;
      updateRtree2(encodeIssueRtree2(issue), true);
      return issue;
    },
    removeItem: function removeItem2(issue) {
      if (!(issue instanceof QAItem) || !issue.id)
        return;
      delete _cache2.data[issue.id];
      updateRtree2(encodeIssueRtree2(issue), false);
    },
    getClosedCounts: function getClosedCounts() {
      return _cache2.closed;
    }
  };

  // modules/services/osmose.js
  init_slicedToArray();
  var import_marked9 = __toModule(require_marked());
  var import_rbush5 = __toModule(require_rbush_min());
  var TILEZOOM5 = 14;
  var tiler5 = new Tiler().zoomRange(TILEZOOM5);
  var dispatch6 = dispatch_default("loaded");
  var _osmoseUrlRoot = "https://osmose.openstreetmap.fr/api/0.3";
  var _osmoseData = {
    icons: {},
    items: []
  };
  var _cache3;
  function abortRequest5(controller) {
    if (controller) {
      controller.abort();
    }
  }
  function abortUnwantedRequests3(cache7, tiles) {
    Object.keys(cache7.inflightTile).forEach(function(k) {
      var wanted = tiles.find(function(tile) {
        return k === tile.id;
      });
      if (!wanted) {
        abortRequest5(cache7.inflightTile[k]);
        delete cache7.inflightTile[k];
      }
    });
  }
  function encodeIssueRtree3(d) {
    return {
      minX: d.loc[0],
      minY: d.loc[1],
      maxX: d.loc[0],
      maxY: d.loc[1],
      data: d
    };
  }
  function updateRtree3(item, replace2) {
    _cache3.rtree.remove(item, function(a, b2) {
      return a.data.id === b2.data.id;
    });
    if (replace2) {
      _cache3.rtree.insert(item);
    }
  }
  function preventCoincident2(loc) {
    var coincident = false;
    do {
      var delta = coincident ? [1e-5, 0] : [0, 1e-5];
      loc = vecAdd(loc, delta);
      var bbox = new Extent(loc).bbox();
      coincident = _cache3.rtree.search(bbox).length;
    } while (coincident);
    return loc;
  }
  var osmose_default = {
    title: "osmose",
    init: function init6() {
      _mainFileFetcher.get("qa_data").then(function(d) {
        _osmoseData = d.osmose;
        _osmoseData.items = Object.keys(d.osmose.icons).map(function(s) {
          return s.split("-")[0];
        }).reduce(function(unique, item) {
          return unique.indexOf(item) !== -1 ? unique : [].concat(_toConsumableArray(unique), [item]);
        }, []);
      });
      if (!_cache3) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch6, "on");
    },
    reset: function reset5() {
      var _strings = {};
      var _colors = {};
      if (_cache3) {
        Object.values(_cache3.inflightTile).forEach(abortRequest5);
        _strings = _cache3.strings;
        _colors = _cache3.colors;
      }
      _cache3 = {
        data: {},
        loadedTile: {},
        inflightTile: {},
        inflightPost: {},
        closed: {},
        rtree: new import_rbush5.default(),
        strings: _strings,
        colors: _colors
      };
    },
    loadIssues: function loadIssues3(projection2) {
      var _this = this;
      var params = {
        item: _osmoseData.items
      };
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler5.getTiles(proj).tiles;
      abortUnwantedRequests3(_cache3, tiles);
      tiles.forEach(function(tile) {
        if (_cache3.loadedTile[tile.id] || _cache3.inflightTile[tile.id])
          return;
        var _tile$xyz = _slicedToArray(tile.xyz, 3), x2 = _tile$xyz[0], y = _tile$xyz[1], z = _tile$xyz[2];
        var url = "".concat(_osmoseUrlRoot, "/issues/").concat(z, "/").concat(x2, "/").concat(y, ".json?") + utilQsString(params);
        var controller = new AbortController();
        _cache3.inflightTile[tile.id] = controller;
        json_default(url, {
          signal: controller.signal
        }).then(function(data2) {
          delete _cache3.inflightTile[tile.id];
          _cache3.loadedTile[tile.id] = true;
          if (data2.features) {
            data2.features.forEach(function(issue) {
              var _issue$properties = issue.properties, item = _issue$properties.item, cl = _issue$properties.class, id2 = _issue$properties.uuid;
              var itemType = "".concat(item, "-").concat(cl);
              if (itemType in _osmoseData.icons) {
                var loc = issue.geometry.coordinates;
                loc = preventCoincident2(loc);
                var d = new QAItem(loc, _this, itemType, id2, {
                  item: item
                });
                if (item === 8300 || item === 8360) {
                  d.elems = [];
                }
                _cache3.data[d.id] = d;
                _cache3.rtree.insert(encodeIssueRtree3(d));
              }
            });
          }
          dispatch6.call("loaded");
        }).catch(function() {
          delete _cache3.inflightTile[tile.id];
          _cache3.loadedTile[tile.id] = true;
        });
      });
    },
    loadIssueDetail: function loadIssueDetail(issue) {
      var _this2 = this;
      if (issue.elems !== void 0) {
        return Promise.resolve(issue);
      }
      var url = "".concat(_osmoseUrlRoot, "/issue/").concat(issue.id, "?langs=").concat(_mainLocalizer.localeCode());
      var cacheDetails = function cacheDetails2(data2) {
        issue.elems = data2.elems.map(function(e3) {
          return e3.type.substring(0, 1) + e3.id;
        });
        issue.detail = data2.subtitle ? (0, import_marked9.default)(data2.subtitle.auto) : "";
        _this2.replaceItem(issue);
      };
      return json_default(url).then(cacheDetails).then(function() {
        return issue;
      });
    },
    loadStrings: function loadStrings() {
      var locale2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _mainLocalizer.localeCode();
      var items = Object.keys(_osmoseData.icons);
      if (locale2 in _cache3.strings && Object.keys(_cache3.strings[locale2]).length === items.length) {
        return Promise.resolve(_cache3.strings[locale2]);
      }
      if (!(locale2 in _cache3.strings)) {
        _cache3.strings[locale2] = {};
      }
      var allRequests = items.map(function(itemType) {
        if (itemType in _cache3.strings[locale2])
          return null;
        var cacheData = function cacheData2(data2) {
          var _data$categories = _slicedToArray(data2.categories, 1), _data$categories$ = _data$categories[0], cat = _data$categories$ === void 0 ? {
            items: []
          } : _data$categories$;
          var _cat$items = _slicedToArray(cat.items, 1), _cat$items$ = _cat$items[0], item2 = _cat$items$ === void 0 ? {
            class: []
          } : _cat$items$;
          var _item$class = _slicedToArray(item2.class, 1), _item$class$ = _item$class[0], cl2 = _item$class$ === void 0 ? null : _item$class$;
          if (!cl2) {
            console.log("Osmose strings request (".concat(itemType, ") had unexpected data"));
            return;
          }
          var itemInt = item2.item, color2 = item2.color;
          if (/^#[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}/.test(color2)) {
            _cache3.colors[itemInt] = color2;
          }
          var title = cl2.title, detail = cl2.detail, fix = cl2.fix, trap = cl2.trap;
          var issueStrings = {};
          if (title)
            issueStrings.title = title.auto;
          if (detail)
            issueStrings.detail = (0, import_marked9.default)(detail.auto);
          if (trap)
            issueStrings.trap = (0, import_marked9.default)(trap.auto);
          if (fix)
            issueStrings.fix = (0, import_marked9.default)(fix.auto);
          _cache3.strings[locale2][itemType] = issueStrings;
        };
        var _itemType$split = itemType.split("-"), _itemType$split2 = _slicedToArray(_itemType$split, 2), item = _itemType$split2[0], cl = _itemType$split2[1];
        var url = "".concat(_osmoseUrlRoot, "/items/").concat(item, "/class/").concat(cl, "?langs=").concat(locale2);
        return json_default(url).then(cacheData);
      }).filter(Boolean);
      return Promise.all(allRequests).then(function() {
        return _cache3.strings[locale2];
      });
    },
    getStrings: function getStrings(itemType) {
      var locale2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _mainLocalizer.localeCode();
      return locale2 in _cache3.strings ? _cache3.strings[locale2][itemType] : {};
    },
    getColor: function getColor(itemType) {
      return itemType in _cache3.colors ? _cache3.colors[itemType] : "#FFFFFF";
    },
    postUpdate: function postUpdate3(issue, callback) {
      var _this3 = this;
      if (_cache3.inflightPost[issue.id]) {
        return callback({
          message: "Issue update already inflight",
          status: -2
        }, issue);
      }
      var url = "".concat(_osmoseUrlRoot, "/issue/").concat(issue.id, "/").concat(issue.newStatus);
      var controller = new AbortController();
      var after = function after2() {
        delete _cache3.inflightPost[issue.id];
        _this3.removeItem(issue);
        if (issue.newStatus === "done") {
          if (!(issue.item in _cache3.closed)) {
            _cache3.closed[issue.item] = 0;
          }
          _cache3.closed[issue.item] += 1;
        }
        if (callback)
          callback(null, issue);
      };
      _cache3.inflightPost[issue.id] = controller;
      fetch(url, {
        signal: controller.signal
      }).then(after).catch(function(err) {
        delete _cache3.inflightPost[issue.id];
        if (callback)
          callback(err.message);
      });
    },
    getItems: function getItems3(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      return _cache3.rtree.search(bbox).map(function(d) {
        return d.data;
      });
    },
    getError: function getError3(id2) {
      return _cache3.data[id2];
    },
    getIcon: function getIcon2(itemType) {
      return _osmoseData.icons[itemType];
    },
    replaceItem: function replaceItem3(item) {
      if (!(item instanceof QAItem) || !item.id)
        return;
      _cache3.data[item.id] = item;
      updateRtree3(encodeIssueRtree3(item), true);
      return item;
    },
    removeItem: function removeItem3(item) {
      if (!(item instanceof QAItem) || !item.id)
        return;
      delete _cache3.data[item.id];
      updateRtree3(encodeIssueRtree3(item), false);
    },
    getClosedCounts: function getClosedCounts2() {
      return _cache3.closed;
    },
    itemURL: function itemURL(item) {
      return "https://osmose.openstreetmap.fr/en/error/".concat(item.id);
    }
  };

  // modules/services/mapillary.js
  var import_vector_tile = __toModule(require_vector_tile());
  var import_pbf = __toModule(require_pbf());
  var import_rbush6 = __toModule(require_rbush_min());
  var accessToken = "MLY|3376030635833192|f13ab0bdf6b2f7b99e0d8bd5868e1d88";
  var apiUrl = "https://graph.mapillary.com/";
  var baseTileUrl = "https://tiles.mapillary.com/maps/vtp";
  var mapFeatureTileUrl = "".concat(baseTileUrl, "/mly_map_feature_point/2/{z}/{x}/{y}?access_token=").concat(accessToken);
  var tileUrl = "".concat(baseTileUrl, "/mly1_public/2/{z}/{x}/{y}?access_token=").concat(accessToken);
  var trafficSignTileUrl = "".concat(baseTileUrl, "/mly_map_feature_traffic_sign/2/{z}/{x}/{y}?access_token=").concat(accessToken);
  var viewercss = "mapillary-js/mapillary.css";
  var viewerjs = "mapillary-js/mapillary.js";
  var minZoom2 = 14;
  var dispatch7 = dispatch_default("change", "loadedImages", "loadedSigns", "loadedMapFeatures", "bearingChanged", "imageChanged");
  var tiler6 = new Tiler().skipNullIsland(true);
  var _loadViewerPromise;
  var _mlyActiveImage;
  var _mlyCache;
  var _mlyFallback = false;
  var _mlyHighlightedDetection;
  var _mlyShowFeatureDetections = false;
  var _mlyShowSignDetections = false;
  var _mlyViewer;
  var _mlyViewerFilter = ["all"];
  function loadTiles3(which, url, maxZoom2, projection2) {
    var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
    var tiles = tiler6.zoomRange(minZoom2, maxZoom2).getTiles(proj).tiles;
    tiles.forEach(function(tile) {
      loadTile(which, url, tile);
    });
  }
  function loadTile(which, url, tile) {
    var cache7 = _mlyCache.requests;
    var tileId = "".concat(tile.id, "-").concat(which);
    if (cache7.loaded[tileId] || cache7.inflight[tileId])
      return;
    var controller = new AbortController();
    cache7.inflight[tileId] = controller;
    var requestUrl = url.replace("{x}", tile.xyz[0]).replace("{y}", tile.xyz[1]).replace("{z}", tile.xyz[2]);
    fetch(requestUrl, {
      signal: controller.signal
    }).then(function(response) {
      if (!response.ok) {
        throw new Error(response.status + " " + response.statusText);
      }
      cache7.loaded[tileId] = true;
      delete cache7.inflight[tileId];
      return response.arrayBuffer();
    }).then(function(data2) {
      if (!data2) {
        throw new Error("No Data");
      }
      loadTileDataToCache(data2, tile, which);
      if (which === "images") {
        dispatch7.call("loadedImages");
      } else if (which === "signs") {
        dispatch7.call("loadedSigns");
      } else if (which === "points") {
        dispatch7.call("loadedMapFeatures");
      }
    }).catch(function() {
      cache7.loaded[tileId] = true;
      delete cache7.inflight[tileId];
    });
  }
  function loadTileDataToCache(data2, tile, which) {
    var vectorTile = new import_vector_tile.VectorTile(new import_pbf.default(data2));
    var features2, cache7, layer2, i2, feature3, loc, d;
    if (vectorTile.layers.hasOwnProperty("image")) {
      features2 = [];
      cache7 = _mlyCache.images;
      layer2 = vectorTile.layers.image;
      for (i2 = 0; i2 < layer2.length; i2++) {
        feature3 = layer2.feature(i2).toGeoJSON(tile.xyz[0], tile.xyz[1], tile.xyz[2]);
        loc = feature3.geometry.coordinates;
        d = {
          loc: loc,
          captured_at: feature3.properties.captured_at,
          ca: feature3.properties.compass_angle,
          id: feature3.properties.id,
          is_pano: feature3.properties.is_pano,
          sequence_id: feature3.properties.sequence_id
        };
        cache7.forImageId[d.id] = d;
        features2.push({
          minX: loc[0],
          minY: loc[1],
          maxX: loc[0],
          maxY: loc[1],
          data: d
        });
      }
      if (cache7.rtree) {
        cache7.rtree.load(features2);
      }
    }
    if (vectorTile.layers.hasOwnProperty("sequence")) {
      features2 = [];
      cache7 = _mlyCache.sequences;
      layer2 = vectorTile.layers.sequence;
      for (i2 = 0; i2 < layer2.length; i2++) {
        feature3 = layer2.feature(i2).toGeoJSON(tile.xyz[0], tile.xyz[1], tile.xyz[2]);
        if (cache7.lineString[feature3.properties.id]) {
          cache7.lineString[feature3.properties.id].push(feature3);
        } else {
          cache7.lineString[feature3.properties.id] = [feature3];
        }
      }
    }
    if (vectorTile.layers.hasOwnProperty("point")) {
      features2 = [];
      cache7 = _mlyCache[which];
      layer2 = vectorTile.layers.point;
      for (i2 = 0; i2 < layer2.length; i2++) {
        feature3 = layer2.feature(i2).toGeoJSON(tile.xyz[0], tile.xyz[1], tile.xyz[2]);
        loc = feature3.geometry.coordinates;
        d = {
          loc: loc,
          id: feature3.properties.id,
          first_seen_at: feature3.properties.first_seen_at,
          last_seen_at: feature3.properties.last_seen_at,
          value: feature3.properties.value
        };
        features2.push({
          minX: loc[0],
          minY: loc[1],
          maxX: loc[0],
          maxY: loc[1],
          data: d
        });
      }
      if (cache7.rtree) {
        cache7.rtree.load(features2);
      }
    }
    if (vectorTile.layers.hasOwnProperty("traffic_sign")) {
      features2 = [];
      cache7 = _mlyCache[which];
      layer2 = vectorTile.layers.traffic_sign;
      for (i2 = 0; i2 < layer2.length; i2++) {
        feature3 = layer2.feature(i2).toGeoJSON(tile.xyz[0], tile.xyz[1], tile.xyz[2]);
        loc = feature3.geometry.coordinates;
        d = {
          loc: loc,
          id: feature3.properties.id,
          first_seen_at: feature3.properties.first_seen_at,
          last_seen_at: feature3.properties.last_seen_at,
          value: feature3.properties.value
        };
        features2.push({
          minX: loc[0],
          minY: loc[1],
          maxX: loc[0],
          maxY: loc[1],
          data: d
        });
      }
      if (cache7.rtree) {
        cache7.rtree.load(features2);
      }
    }
  }
  function loadData(url) {
    return fetch(url).then(function(response) {
      if (!response.ok) {
        throw new Error(response.status + " " + response.statusText);
      }
      return response.json();
    }).then(function(result6) {
      if (!result6) {
        return [];
      }
      return result6.data || [];
    });
  }
  function partitionViewport(projection2) {
    var z = geoScaleToZoom(projection2.scale());
    var z2 = Math.ceil(z * 2) / 2 + 2.5;
    var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
    var tiles = tiler6.zoomRange(z2).getTiles(proj).tiles;
    return tiles.map(function(tile) {
      return tile.wgs84Extent;
    });
  }
  function searchLimited(limit, projection2, rtree) {
    limit = limit || 5;
    return partitionViewport(projection2).reduce(function(result6, extent6) {
      var found = rtree.search(extent6.bbox()).slice(0, limit).map(function(d) {
        return d.data;
      });
      return found.length ? result6.concat(found) : result6;
    }, []);
  }
  var mapillary_default = {
    init: function init7() {
      if (!_mlyCache) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch7, "on");
    },
    reset: function reset6() {
      if (_mlyCache) {
        Object.values(_mlyCache.requests.inflight).forEach(function(request3) {
          request3.abort();
        });
      }
      _mlyCache = {
        images: {
          rtree: new import_rbush6.default(),
          forImageId: {}
        },
        image_detections: {
          forImageId: {}
        },
        signs: {
          rtree: new import_rbush6.default()
        },
        points: {
          rtree: new import_rbush6.default()
        },
        sequences: {
          rtree: new import_rbush6.default(),
          lineString: {}
        },
        requests: {
          loaded: {},
          inflight: {}
        }
      };
      _mlyActiveImage = null;
    },
    images: function images(projection2) {
      var limit = 5;
      return searchLimited(limit, projection2, _mlyCache.images.rtree);
    },
    signs: function signs(projection2) {
      var limit = 5;
      return searchLimited(limit, projection2, _mlyCache.signs.rtree);
    },
    mapFeatures: function mapFeatures(projection2) {
      var limit = 5;
      return searchLimited(limit, projection2, _mlyCache.points.rtree);
    },
    cachedImage: function cachedImage(imageId) {
      return _mlyCache.images.forImageId[imageId];
    },
    sequences: function sequences(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      var sequenceIds = {};
      var lineStrings = [];
      _mlyCache.images.rtree.search(bbox).forEach(function(d) {
        if (d.data.sequence_id) {
          sequenceIds[d.data.sequence_id] = true;
        }
      });
      Object.keys(sequenceIds).forEach(function(sequenceId) {
        if (_mlyCache.sequences.lineString[sequenceId]) {
          lineStrings = lineStrings.concat(_mlyCache.sequences.lineString[sequenceId]);
        }
      });
      return lineStrings;
    },
    loadImages: function loadImages(projection2) {
      loadTiles3("images", tileUrl, 14, projection2);
    },
    loadSigns: function loadSigns(projection2) {
      loadTiles3("signs", trafficSignTileUrl, 14, projection2);
    },
    loadMapFeatures: function loadMapFeatures(projection2) {
      loadTiles3("points", mapFeatureTileUrl, 14, projection2);
    },
    ensureViewerLoaded: function ensureViewerLoaded(context) {
      if (_loadViewerPromise)
        return _loadViewerPromise;
      var wrap2 = context.container().select(".photoviewer").selectAll(".mly-wrapper").data([0]);
      wrap2.enter().append("div").attr("id", "ideditor-mly").attr("class", "photo-wrapper mly-wrapper").classed("hide", true);
      var that = this;
      _loadViewerPromise = new Promise(function(resolve, reject) {
        var loadedCount = 0;
        function loaded() {
          loadedCount += 1;
          if (loadedCount === 2)
            resolve();
        }
        var head = select_default2("head");
        head.selectAll("#ideditor-mapillary-viewercss").data([0]).enter().append("link").attr("id", "ideditor-mapillary-viewercss").attr("rel", "stylesheet").attr("crossorigin", "anonymous").attr("href", context.asset(viewercss)).on("load.serviceMapillary", loaded).on("error.serviceMapillary", function() {
          reject();
        });
        head.selectAll("#ideditor-mapillary-viewerjs").data([0]).enter().append("script").attr("id", "ideditor-mapillary-viewerjs").attr("crossorigin", "anonymous").attr("src", context.asset(viewerjs)).on("load.serviceMapillary", loaded).on("error.serviceMapillary", function() {
          reject();
        });
      }).catch(function() {
        _loadViewerPromise = null;
      }).then(function() {
        that.initViewer(context);
      });
      return _loadViewerPromise;
    },
    loadSignResources: function loadSignResources(context) {
      context.ui().svgDefs.addSprites(["mapillary-sprite"], false);
      return this;
    },
    loadObjectResources: function loadObjectResources(context) {
      context.ui().svgDefs.addSprites(["mapillary-object-sprite"], false);
      return this;
    },
    resetTags: function resetTags() {
      if (_mlyViewer && !_mlyFallback) {
        _mlyViewer.getComponent("tag").removeAll();
      }
    },
    showFeatureDetections: function showFeatureDetections(value2) {
      _mlyShowFeatureDetections = value2;
      if (!_mlyShowFeatureDetections && !_mlyShowSignDetections) {
        this.resetTags();
      }
    },
    showSignDetections: function showSignDetections(value2) {
      _mlyShowSignDetections = value2;
      if (!_mlyShowFeatureDetections && !_mlyShowSignDetections) {
        this.resetTags();
      }
    },
    filterViewer: function filterViewer(context) {
      var showsPano = context.photos().showsPanoramic();
      var showsFlat = context.photos().showsFlat();
      var fromDate = context.photos().fromDate();
      var toDate = context.photos().toDate();
      var filter2 = ["all"];
      if (!showsPano)
        filter2.push(["!=", "cameraType", "spherical"]);
      if (!showsFlat && showsPano)
        filter2.push(["==", "pano", true]);
      if (fromDate) {
        filter2.push([">=", "capturedAt", new Date(fromDate).getTime()]);
      }
      if (toDate) {
        filter2.push([">=", "capturedAt", new Date(toDate).getTime()]);
      }
      if (_mlyViewer) {
        _mlyViewer.setFilter(filter2);
      }
      _mlyViewerFilter = filter2;
      return filter2;
    },
    showViewer: function showViewer(context) {
      var wrap2 = context.container().select(".photoviewer").classed("hide", false);
      var isHidden = wrap2.selectAll(".photo-wrapper.mly-wrapper.hide").size();
      if (isHidden && _mlyViewer) {
        wrap2.selectAll(".photo-wrapper:not(.mly-wrapper)").classed("hide", true);
        wrap2.selectAll(".photo-wrapper.mly-wrapper").classed("hide", false);
        _mlyViewer.resize();
      }
      return this;
    },
    hideViewer: function hideViewer(context) {
      _mlyActiveImage = null;
      if (!_mlyFallback && _mlyViewer) {
        _mlyViewer.getComponent("sequence").stop();
      }
      var viewer2 = context.container().select(".photoviewer");
      if (!viewer2.empty())
        viewer2.datum(null);
      viewer2.classed("hide", true).selectAll(".photo-wrapper").classed("hide", true);
      this.updateUrlImage(null);
      dispatch7.call("imageChanged");
      dispatch7.call("loadedMapFeatures");
      dispatch7.call("loadedSigns");
      return this.setStyles(context, null);
    },
    updateUrlImage: function updateUrlImage(imageId) {
      if (!window.mocha) {
        var hash = utilStringQs(window.location.hash);
        if (imageId) {
          hash.photo = "mapillary/" + imageId;
        } else {
          delete hash.photo;
        }
        window.location.replace("#" + utilQsString(hash, true));
      }
    },
    highlightDetection: function highlightDetection(detection) {
      if (detection) {
        _mlyHighlightedDetection = detection.id;
      }
      return this;
    },
    initViewer: function initViewer(context) {
      var that = this;
      if (!window.mapillary)
        return;
      var opts = {
        accessToken: accessToken,
        component: {
          cover: false,
          keyboard: false,
          tag: true
        },
        container: "ideditor-mly"
      };
      if (!mapillary.isSupported() && mapillary.isFallbackSupported()) {
        _mlyFallback = true;
        opts.component = {
          cover: false,
          direction: false,
          imagePlane: false,
          keyboard: false,
          mouse: false,
          sequence: false,
          tag: false,
          image: true,
          navigation: true
        };
      }
      _mlyViewer = new mapillary.Viewer(opts);
      _mlyViewer.on("image", imageChanged);
      _mlyViewer.on("bearing", bearingChanged);
      if (_mlyViewerFilter) {
        _mlyViewer.setFilter(_mlyViewerFilter);
      }
      context.ui().photoviewer.on("resize.mapillary", function() {
        if (_mlyViewer)
          _mlyViewer.resize();
      });
      function imageChanged(node) {
        that.resetTags();
        var image = node.image;
        that.setActiveImage(image);
        that.setStyles(context, null);
        var loc = [image.originalLngLat.lng, image.originalLngLat.lat];
        context.map().centerEase(loc);
        that.updateUrlImage(image.id);
        if (_mlyShowFeatureDetections || _mlyShowSignDetections) {
          that.updateDetections(image.id, "".concat(apiUrl, "/").concat(image.id, "/detections?access_token=").concat(accessToken, "&fields=id,image,geometry,value"));
        }
        dispatch7.call("imageChanged");
      }
      function bearingChanged(e3) {
        dispatch7.call("bearingChanged", void 0, e3);
      }
    },
    selectImage: function selectImage(context, imageId) {
      if (_mlyViewer && imageId) {
        _mlyViewer.moveTo(imageId).catch(function(e3) {
          console.error("mly3", e3);
        });
      }
      return this;
    },
    getActiveImage: function getActiveImage() {
      return _mlyActiveImage;
    },
    getDetections: function getDetections(id2) {
      return loadData("".concat(apiUrl, "/").concat(id2, "/detections?access_token=").concat(accessToken, "&fields=id,value,image"));
    },
    setActiveImage: function setActiveImage(image) {
      if (image) {
        _mlyActiveImage = {
          ca: image.originalCompassAngle,
          id: image.id,
          loc: [image.originalLngLat.lng, image.originalLngLat.lat],
          is_pano: image.cameraType === "spherical",
          sequence_id: image.sequenceId
        };
      } else {
        _mlyActiveImage = null;
      }
    },
    setStyles: function setStyles(context, hovered) {
      var hoveredImageId = hovered && hovered.id;
      var hoveredSequenceId = hovered && hovered.sequence_id;
      var selectedSequenceId = _mlyActiveImage && _mlyActiveImage.sequence_id;
      context.container().selectAll(".layer-mapillary .viewfield-group").classed("highlighted", function(d) {
        return d.sequence_id === selectedSequenceId || d.id === hoveredImageId;
      }).classed("hovered", function(d) {
        return d.id === hoveredImageId;
      });
      context.container().selectAll(".layer-mapillary .sequence").classed("highlighted", function(d) {
        return d.properties.id === hoveredSequenceId;
      }).classed("currentView", function(d) {
        return d.properties.id === selectedSequenceId;
      });
      return this;
    },
    updateDetections: function updateDetections(imageId, url) {
      if (!_mlyViewer || _mlyFallback)
        return;
      if (!imageId)
        return;
      var cache7 = _mlyCache.image_detections;
      if (cache7.forImageId[imageId]) {
        showDetections(_mlyCache.image_detections.forImageId[imageId]);
      } else {
        loadData(url).then(function(detections) {
          detections.forEach(function(detection) {
            if (!cache7.forImageId[imageId]) {
              cache7.forImageId[imageId] = [];
            }
            cache7.forImageId[imageId].push({
              geometry: detection.geometry,
              id: detection.id,
              image_id: imageId,
              value: detection.value
            });
          });
          showDetections(_mlyCache.image_detections.forImageId[imageId] || []);
        });
      }
      function showDetections(detections) {
        var tagComponent = _mlyViewer.getComponent("tag");
        detections.forEach(function(data2) {
          var tag = makeTag(data2);
          if (tag) {
            tagComponent.add([tag]);
          }
        });
      }
      function makeTag(data2) {
        var valueParts = data2.value.split("--");
        if (!valueParts.length)
          return;
        var tag;
        var text;
        var color2 = 16777215;
        if (_mlyHighlightedDetection === data2.id) {
          color2 = 16776960;
          text = valueParts[1];
          if (text === "flat" || text === "discrete" || text === "sign") {
            text = valueParts[2];
          }
          text = text.replace(/-/g, " ");
          text = text.charAt(0).toUpperCase() + text.slice(1);
          _mlyHighlightedDetection = null;
        }
        var decodedGeometry = window.atob(data2.geometry);
        var uintArray = new Uint8Array(decodedGeometry.length);
        for (var i2 = 0; i2 < decodedGeometry.length; i2++) {
          uintArray[i2] = decodedGeometry.charCodeAt(i2);
        }
        var tile = new import_vector_tile.VectorTile(new import_pbf.default(uintArray.buffer));
        var layer2 = tile.layers["mpy-or"];
        var geometries = layer2.feature(0).loadGeometry();
        var polygon2 = geometries.map(function(ring) {
          return ring.map(function(point5) {
            return [point5.x / layer2.extent, point5.y / layer2.extent];
          });
        });
        tag = new mapillary.OutlineTag(data2.id, new mapillary.PolygonGeometry(polygon2[0]), {
          text: text,
          textColor: color2,
          lineColor: color2,
          lineWidth: 2,
          fillColor: color2,
          fillOpacity: 0.3
        });
        return tag;
      }
    },
    cache: function cache2() {
      return _mlyCache;
    }
  };

  // modules/services/maprules.js
  var buildRuleChecks = function buildRuleChecks2() {
    return {
      equals: function equals(_equals) {
        return function(tags) {
          return Object.keys(_equals).every(function(k) {
            return _equals[k] === tags[k];
          });
        };
      },
      notEquals: function notEquals(_notEquals) {
        return function(tags) {
          return Object.keys(_notEquals).some(function(k) {
            return _notEquals[k] !== tags[k];
          });
        };
      },
      absence: function absence(_absence) {
        return function(tags) {
          return Object.keys(tags).indexOf(_absence) === -1;
        };
      },
      presence: function presence(_presence) {
        return function(tags) {
          return Object.keys(tags).indexOf(_presence) > -1;
        };
      },
      greaterThan: function greaterThan(_greaterThan) {
        var key = Object.keys(_greaterThan)[0];
        var value2 = _greaterThan[key];
        return function(tags) {
          return tags[key] > value2;
        };
      },
      greaterThanEqual: function greaterThanEqual(_greaterThanEqual) {
        var key = Object.keys(_greaterThanEqual)[0];
        var value2 = _greaterThanEqual[key];
        return function(tags) {
          return tags[key] >= value2;
        };
      },
      lessThan: function lessThan(_lessThan) {
        var key = Object.keys(_lessThan)[0];
        var value2 = _lessThan[key];
        return function(tags) {
          return tags[key] < value2;
        };
      },
      lessThanEqual: function lessThanEqual(_lessThanEqual) {
        var key = Object.keys(_lessThanEqual)[0];
        var value2 = _lessThanEqual[key];
        return function(tags) {
          return tags[key] <= value2;
        };
      },
      positiveRegex: function positiveRegex(_positiveRegex) {
        var tagKey = Object.keys(_positiveRegex)[0];
        var expression = _positiveRegex[tagKey].join("|");
        var regex = new RegExp(expression);
        return function(tags) {
          return regex.test(tags[tagKey]);
        };
      },
      negativeRegex: function negativeRegex(_negativeRegex) {
        var tagKey = Object.keys(_negativeRegex)[0];
        var expression = _negativeRegex[tagKey].join("|");
        var regex = new RegExp(expression);
        return function(tags) {
          return !regex.test(tags[tagKey]);
        };
      }
    };
  };
  var buildLineKeys = function buildLineKeys2() {
    return {
      highway: {
        rest_area: true,
        services: true
      },
      railway: {
        roundhouse: true,
        station: true,
        traverser: true,
        turntable: true,
        wash: true
      }
    };
  };
  var maprules_default = {
    init: function init8() {
      this._ruleChecks = buildRuleChecks();
      this._validationRules = [];
      this._areaKeys = osmAreaKeys;
      this._lineKeys = buildLineKeys();
    },
    filterRuleChecks: function filterRuleChecks(selector) {
      var _ruleChecks = this._ruleChecks;
      return Object.keys(selector).reduce(function(rules, key) {
        if (["geometry", "error", "warning"].indexOf(key) === -1) {
          rules.push(_ruleChecks[key](selector[key]));
        }
        return rules;
      }, []);
    },
    buildTagMap: function buildTagMap(selector) {
      var getRegexValues = function getRegexValues2(regexes) {
        return regexes.map(function(regex) {
          return regex.replace(/\$|\^/g, "");
        });
      };
      var tagMap = Object.keys(selector).reduce(function(expectedTags, key) {
        var values2;
        var isRegex = /regex/gi.test(key);
        var isEqual2 = /equals/gi.test(key);
        if (isRegex || isEqual2) {
          Object.keys(selector[key]).forEach(function(selectorKey) {
            values2 = isEqual2 ? [selector[key][selectorKey]] : getRegexValues(selector[key][selectorKey]);
            if (expectedTags.hasOwnProperty(selectorKey)) {
              values2 = values2.concat(expectedTags[selectorKey]);
            }
            expectedTags[selectorKey] = values2;
          });
        } else if (/(greater|less)Than(Equal)?|presence/g.test(key)) {
          var tagKey = /presence/.test(key) ? selector[key] : Object.keys(selector[key])[0];
          values2 = [selector[key][tagKey]];
          if (expectedTags.hasOwnProperty(tagKey)) {
            values2 = values2.concat(expectedTags[tagKey]);
          }
          expectedTags[tagKey] = values2;
        }
        return expectedTags;
      }, {});
      return tagMap;
    },
    inferGeometry: function inferGeometry(tagMap) {
      var _lineKeys = this._lineKeys;
      var _areaKeys = this._areaKeys;
      var keyValueDoesNotImplyArea = function keyValueDoesNotImplyArea2(key2) {
        return utilArrayIntersection(tagMap[key2], Object.keys(_areaKeys[key2])).length > 0;
      };
      var keyValueImpliesLine = function keyValueImpliesLine2(key2) {
        return utilArrayIntersection(tagMap[key2], Object.keys(_lineKeys[key2])).length > 0;
      };
      if (tagMap.hasOwnProperty("area")) {
        if (tagMap.area.indexOf("yes") > -1) {
          return "area";
        }
        if (tagMap.area.indexOf("no") > -1) {
          return "line";
        }
      }
      for (var key in tagMap) {
        if (key in _areaKeys && !keyValueDoesNotImplyArea(key)) {
          return "area";
        }
        if (key in _lineKeys && keyValueImpliesLine(key)) {
          return "area";
        }
      }
      return "line";
    },
    addRule: function addRule(selector) {
      var rule = {
        checks: this.filterRuleChecks(selector),
        matches: function matches(entity2) {
          return this.checks.every(function(check) {
            return check(entity2.tags);
          });
        },
        inferredGeometry: this.inferGeometry(this.buildTagMap(selector), this._areaKeys),
        geometryMatches: function geometryMatches(entity2, graph3) {
          if (entity2.type === "node" || entity2.type === "relation") {
            return selector.geometry === entity2.type;
          } else if (entity2.type === "way") {
            return this.inferredGeometry === entity2.geometry(graph3);
          }
        },
        findIssues: function findIssues(entity2, graph3, issues) {
          if (this.geometryMatches(entity2, graph3) && this.matches(entity2)) {
            var severity = Object.keys(selector).indexOf("error") > -1 ? "error" : "warning";
            var _message = selector[severity];
            issues.push(new validationIssue({
              type: "maprules",
              severity: severity,
              message: function message() {
                return _message;
              },
              entityIds: [entity2.id]
            }));
          }
        }
      };
      this._validationRules.push(rule);
    },
    clearRules: function clearRules() {
      this._validationRules = [];
    },
    validationRules: function validationRules() {
      return this._validationRules;
    },
    ruleChecks: function ruleChecks() {
      return this._ruleChecks;
    }
  };

  // modules/services/nominatim.js
  var import_rbush7 = __toModule(require_rbush_min());
  var apibase = "https://nominatim.openstreetmap.org/";
  var _inflight = {};
  var _nominatimCache;
  var nominatim_default = {
    init: function init9() {
      _inflight = {};
      _nominatimCache = new import_rbush7.default();
    },
    reset: function reset7() {
      Object.values(_inflight).forEach(function(controller) {
        controller.abort();
      });
      _inflight = {};
      _nominatimCache = new import_rbush7.default();
    },
    countryCode: function countryCode(location2, callback) {
      this.reverse(location2, function(err, result6) {
        if (err) {
          return callback(err);
        } else if (result6.address) {
          return callback(null, result6.address.country_code);
        } else {
          return callback("Unable to geocode", null);
        }
      });
    },
    reverse: function reverse(loc, callback) {
      var cached = _nominatimCache.search({
        minX: loc[0],
        minY: loc[1],
        maxX: loc[0],
        maxY: loc[1]
      });
      if (cached.length > 0) {
        if (callback)
          callback(null, cached[0].data);
        return;
      }
      var params = {
        zoom: 13,
        format: "json",
        addressdetails: 1,
        lat: loc[1],
        lon: loc[0]
      };
      var url = apibase + "reverse?" + utilQsString(params);
      if (_inflight[url])
        return;
      var controller = new AbortController();
      _inflight[url] = controller;
      json_default(url, {
        signal: controller.signal
      }).then(function(result6) {
        delete _inflight[url];
        if (result6 && result6.error) {
          throw new Error(result6.error);
        }
        var extent6 = new Extent(loc).padByMeters(200);
        _nominatimCache.insert(Object.assign(extent6.bbox(), {
          data: result6
        }));
        if (callback)
          callback(null, result6);
      }).catch(function(err) {
        delete _inflight[url];
        if (err.name === "AbortError")
          return;
        if (callback)
          callback(err.message);
      });
    },
    search: function search(val, callback) {
      var searchVal = encodeURIComponent(val);
      var url = apibase + "search/" + searchVal + "?limit=10&format=json";
      if (_inflight[url])
        return;
      var controller = new AbortController();
      _inflight[url] = controller;
      json_default(url, {
        signal: controller.signal
      }).then(function(result6) {
        delete _inflight[url];
        if (result6 && result6.error) {
          throw new Error(result6.error);
        }
        if (callback)
          callback(null, result6);
      }).catch(function(err) {
        delete _inflight[url];
        if (err.name === "AbortError")
          return;
        if (callback)
          callback(err.message);
      });
    }
  };

  // modules/services/nsi.js
  init_typeof();

  // node_modules/name-suggestion-index/lib/matcher.js
  var import_which_polygon4 = __toModule(require_which_polygon());

  // node_modules/name-suggestion-index/lib/simplify.js
  var import_diacritics3 = __toModule(require_diacritics());
  function simplify2(str) {
    if (typeof str !== "string")
      return "";
    return import_diacritics3.default.remove(str.replace(/&/g, "and").replace(/İ/ig, "i").replace(/[\s\-=_!"#%'*{},.\/:;?\(\)\[\]@\\$\^*+<>«»~`’\u00a1\u00a7\u00b6\u00b7\u00bf\u037e\u0387\u055a-\u055f\u0589\u05c0\u05c3\u05c6\u05f3\u05f4\u0609\u060a\u060c\u060d\u061b\u061e\u061f\u066a-\u066d\u06d4\u0700-\u070d\u07f7-\u07f9\u0830-\u083e\u085e\u0964\u0965\u0970\u0af0\u0df4\u0e4f\u0e5a\u0e5b\u0f04-\u0f12\u0f14\u0f85\u0fd0-\u0fd4\u0fd9\u0fda\u104a-\u104f\u10fb\u1360-\u1368\u166d\u166e\u16eb-\u16ed\u1735\u1736\u17d4-\u17d6\u17d8-\u17da\u1800-\u1805\u1807-\u180a\u1944\u1945\u1a1e\u1a1f\u1aa0-\u1aa6\u1aa8-\u1aad\u1b5a-\u1b60\u1bfc-\u1bff\u1c3b-\u1c3f\u1c7e\u1c7f\u1cc0-\u1cc7\u1cd3\u2000-\u206f\u2cf9-\u2cfc\u2cfe\u2cff\u2d70\u2e00-\u2e7f\u3001-\u3003\u303d\u30fb\ua4fe\ua4ff\ua60d-\ua60f\ua673\ua67e\ua6f2-\ua6f7\ua874-\ua877\ua8ce\ua8cf\ua8f8-\ua8fa\ua92e\ua92f\ua95f\ua9c1-\ua9cd\ua9de\ua9df\uaa5c-\uaa5f\uaade\uaadf\uaaf0\uaaf1\uabeb\ufe10-\ufe16\ufe19\ufe30\ufe45\ufe46\ufe49-\ufe4c\ufe50-\ufe52\ufe54-\ufe57\ufe5f-\ufe61\ufe68\ufe6a\ufe6b\ufeff\uff01-\uff03\uff05-\uff07\uff0a\uff0c\uff0e\uff0f\uff1a\uff1b\uff1f\uff20\uff3c\uff61\uff64\uff65]+/g, "").toLowerCase());
  }

  // node_modules/name-suggestion-index/lib/matcher.js
  var matchGroupsJSON = {
    matchGroups: {
      adult_gaming_centre: ["amenity/casino", "amenity/gambling", "leisure/adult_gaming_centre"],
      beauty: ["shop/beauty", "shop/hairdresser_supply"],
      bed: ["shop/bed", "shop/furniture"],
      beverages: ["shop/alcohol", "shop/beer", "shop/beverages", "shop/wine"],
      camping: ["leisure/park", "tourism/camp_site", "tourism/caravan_site"],
      car_parts: ["shop/car_parts", "shop/car_repair", "shop/tires", "shop/tyres"],
      clinic: ["amenity/clinic", "amenity/doctors", "healthcare/clinic", "healthcare/dialysis"],
      confectionery: ["shop/candy", "shop/chocolate", "shop/confectionery"],
      convenience: ["shop/beauty", "shop/chemist", "shop/convenience", "shop/cosmetics", "shop/grocery", "shop/newsagent", "shop/perfumery"],
      coworking: ["amenity/coworking_space", "office/coworking", "office/coworking_space"],
      dentist: ["amenity/dentist", "amenity/doctors", "healthcare/dentist"],
      electronics: ["office/telecommunication", "shop/computer", "shop/electronics", "shop/hifi", "shop/mobile", "shop/mobile_phone", "shop/telecommunication"],
      fabric: ["shop/fabric", "shop/haberdashery", "shop/sewing"],
      fashion: ["shop/accessories", "shop/bag", "shop/boutique", "shop/clothes", "shop/department_store", "shop/fashion", "shop/fashion_accessories", "shop/sports", "shop/shoes"],
      financial: ["amenity/bank", "office/accountant", "office/financial", "office/financial_advisor", "office/tax_advisor", "shop/tax"],
      fitness: ["leisure/fitness_centre", "leisure/fitness_center", "leisure/sports_centre", "leisure/sports_center"],
      food: ["amenity/pub", "amenity/bar", "amenity/cafe", "amenity/fast_food", "amenity/ice_cream", "amenity/restaurant", "shop/bakery", "shop/ice_cream", "shop/pastry", "shop/tea", "shop/coffee"],
      fuel: ["amenity/fuel", "shop/gas", "shop/convenience;gas", "shop/gas;convenience"],
      gift: ["shop/gift", "shop/card", "shop/cards", "shop/stationery"],
      hardware: ["shop/bathroom_furnishing", "shop/carpet", "shop/diy", "shop/doityourself", "shop/doors", "shop/electrical", "shop/flooring", "shop/hardware", "shop/hardware_store", "shop/power_tools", "shop/tool_hire", "shop/tools", "shop/trade"],
      health_food: ["shop/health", "shop/health_food", "shop/herbalist", "shop/nutrition_supplements"],
      hobby: ["shop/electronics", "shop/hobby", "shop/books", "shop/games", "shop/collector", "shop/toys", "shop/model", "shop/video_games", "shop/anime"],
      hospital: ["amenity/doctors", "amenity/hospital", "healthcare/hospital"],
      houseware: ["shop/houseware", "shop/interior_decoration"],
      lifeboat_station: ["amenity/lifeboat_station", "emergency/lifeboat_station", "emergency/marine_rescue"],
      lodging: ["tourism/hotel", "tourism/motel"],
      money_transfer: ["amenity/money_transfer", "shop/money_transfer"],
      office_supplies: ["shop/office_supplies", "shop/stationary", "shop/stationery"],
      outdoor: ["shop/outdoor", "shop/sports"],
      pharmacy: ["amenity/doctors", "amenity/pharmacy", "healthcare/pharmacy"],
      playground: ["amenity/theme_park", "leisure/amusement_arcade", "leisure/playground"],
      rental: ["amenity/bicycle_rental", "amenity/boat_rental", "amenity/car_rental", "amenity/truck_rental", "amenity/vehicle_rental", "shop/rental"],
      school: ["amenity/childcare", "amenity/college", "amenity/kindergarten", "amenity/language_school", "amenity/prep_school", "amenity/school", "amenity/university"],
      storage: ["shop/storage_units", "shop/storage_rental"],
      substation: ["power/station", "power/substation", "power/sub_station"],
      supermarket: ["shop/food", "shop/frozen_food", "shop/greengrocer", "shop/grocery", "shop/supermarket", "shop/wholesale"],
      variety_store: ["shop/variety_store", "shop/discount", "shop/convenience"],
      vending: ["amenity/vending_machine", "shop/vending_machine"],
      weight_loss: ["amenity/doctors", "amenity/weight_clinic", "healthcare/counselling", "leisure/fitness_centre", "office/therapist", "shop/beauty", "shop/diet", "shop/food", "shop/health_food", "shop/herbalist", "shop/nutrition", "shop/nutrition_supplements", "shop/weight_loss"],
      wholesale: ["shop/wholesale", "shop/supermarket", "shop/department_store"]
    }
  };
  var genericWordsJSON = {
    genericWords: ["^(barn|bazaa?r|bench|bou?tique|building|casa|church)$", "^(baseball|basketball|football|soccer|softball|tennis(halle)?)\\s?(field|court)?$", "^(club|green|out|ware)\\s?house$", "^(driveway|el \xE1rbol|fountain|golf|government|graveyard)$", "^(fixme|n\\s?\\/?\\s?a|name|no\\s?name|none|null|temporary|test|unknown)$", "^(hofladen|librairie|magazine?|maison)$", "^(mobile home|skate)?\\s?park$", "^(obuwie|pond|pool|sale|shops?|sklep|stores?)$", "^\\?+$", "^private$", "^tattoo( studio)?$", "^windmill$", "^\u0446\u0435\u0440\u043A\u043E\u0432\u043D\u0430\u044F( \u043B\u0430\u0432\u043A\u0430)?$"]
  };
  var treesJSON = {
    trees: {
      brands: {
        emoji: "\uD83C\uDF54",
        mainTag: "brand:wikidata",
        sourceTags: ["brand", "name"],
        nameTags: {
          primary: "^(name|name:\\w+)$",
          alternate: "^(brand|brand:\\w+|operator|operator:\\w+|\\w+_name|\\w+_name:\\w+)$"
        }
      },
      flags: {
        emoji: "\uD83D\uDEA9",
        mainTag: "flag:wikidata",
        nameTags: {
          primary: "^(flag:name|flag:name:\\w+)$",
          alternate: "^(country|country:\\w+|flag|flag:\\w+|subject|subject:\\w+)$"
        }
      },
      operators: {
        emoji: "\uD83D\uDCBC",
        mainTag: "operator:wikidata",
        sourceTags: ["operator"],
        nameTags: {
          primary: "^(name|name:\\w+|operator|operator:\\w+)$",
          alternate: "^(brand|brand:\\w+|\\w+_name|\\w+_name:\\w+)$"
        }
      },
      transit: {
        emoji: "\uD83D\uDE87",
        mainTag: "network:wikidata",
        sourceTags: ["network"],
        nameTags: {
          primary: "^network$",
          alternate: "^(operator|operator:\\w+|network:\\w+|\\w+_name|\\w+_name:\\w+)$"
        }
      }
    }
  };
  var matchGroups = matchGroupsJSON.matchGroups;
  var trees = treesJSON.trees;
  var Matcher = /* @__PURE__ */ function() {
    function Matcher2() {
      var _this = this;
      _classCallCheck(this, Matcher2);
      this.matchIndex = void 0;
      this.genericWords = new Map();
      (genericWordsJSON.genericWords || []).forEach(function(s) {
        return _this.genericWords.set(s, new RegExp(s, "i"));
      });
      this.itemLocation = void 0;
      this.locationSets = void 0;
      this.locationIndex = void 0;
      this.warnings = [];
    }
    _createClass(Matcher2, [{
      key: "buildMatchIndex",
      value: function buildMatchIndex(data2) {
        var that = this;
        if (that.matchIndex)
          return;
        that.matchIndex = new Map();
        var seenTree = new Map();
        Object.keys(data2).forEach(function(tkv) {
          var category = data2[tkv];
          var parts = tkv.split("/", 3);
          var t = parts[0];
          var k = parts[1];
          var v = parts[2];
          var thiskv = "".concat(k, "/").concat(v);
          var tree = trees[t];
          var branch = that.matchIndex.get(thiskv);
          if (!branch) {
            branch = {
              primary: new Map(),
              alternate: new Map(),
              excludeGeneric: new Map(),
              excludeNamed: new Map()
            };
            that.matchIndex.set(thiskv, branch);
          }
          var properties = category.properties || {};
          var exclude = properties.exclude || {};
          (exclude.generic || []).forEach(function(s) {
            return branch.excludeGeneric.set(s, new RegExp(s, "i"));
          });
          (exclude.named || []).forEach(function(s) {
            return branch.excludeNamed.set(s, new RegExp(s, "i"));
          });
          var excludeRegexes = [].concat(_toConsumableArray(branch.excludeGeneric.values()), _toConsumableArray(branch.excludeNamed.values()));
          var items = category.items;
          if (!Array.isArray(items) || !items.length)
            return;
          var primaryName = new RegExp(tree.nameTags.primary, "i");
          var alternateName = new RegExp(tree.nameTags.alternate, "i");
          var notName = /:(colou?r|type|forward|backward|left|right|etymology|pronunciation|wikipedia)$/i;
          var skipGenericKV = skipGenericKVMatches(t, k, v);
          var genericKV = new Set(["".concat(k, "/yes"), "building/yes"]);
          var matchGroupKV = new Set();
          Object.values(matchGroups).forEach(function(matchGroup) {
            var inGroup = matchGroup.some(function(otherkv) {
              return otherkv === thiskv;
            });
            if (!inGroup)
              return;
            matchGroup.forEach(function(otherkv) {
              if (otherkv === thiskv)
                return;
              matchGroupKV.add(otherkv);
              var otherk = otherkv.split("/", 2)[0];
              genericKV.add("".concat(otherk, "/yes"));
            });
          });
          items.forEach(function(item) {
            if (!item.id)
              return;
            if (Array.isArray(item.matchTags) && item.matchTags.length) {
              item.matchTags = item.matchTags.filter(function(matchTag) {
                return !matchGroupKV.has(matchTag) && !genericKV.has(matchTag);
              });
              if (!item.matchTags.length)
                delete item.matchTags;
            }
            var kvTags = ["".concat(thiskv)].concat(item.matchTags || []);
            if (!skipGenericKV) {
              kvTags = kvTags.concat(Array.from(genericKV));
            }
            Object.keys(item.tags).forEach(function(osmkey) {
              if (notName.test(osmkey))
                return;
              var osmvalue = item.tags[osmkey];
              if (!osmvalue || excludeRegexes.some(function(regex) {
                return regex.test(osmvalue);
              }))
                return;
              if (primaryName.test(osmkey)) {
                kvTags.forEach(function(kv) {
                  return insertName("primary", t, kv, simplify2(osmvalue), item.id);
                });
              } else if (alternateName.test(osmkey)) {
                kvTags.forEach(function(kv) {
                  return insertName("alternate", t, kv, simplify2(osmvalue), item.id);
                });
              }
            });
            var keepMatchNames = new Set();
            (item.matchNames || []).forEach(function(matchName) {
              var nsimple = simplify2(matchName);
              kvTags.forEach(function(kv) {
                var branch2 = that.matchIndex.get(kv);
                var primaryLeaf = branch2 && branch2.primary.get(nsimple);
                var alternateLeaf = branch2 && branch2.alternate.get(nsimple);
                var inPrimary = primaryLeaf && primaryLeaf.has(item.id);
                var inAlternate = alternateLeaf && alternateLeaf.has(item.id);
                if (!inPrimary && !inAlternate) {
                  insertName("alternate", t, kv, nsimple, item.id);
                  keepMatchNames.add(matchName);
                }
              });
            });
            if (keepMatchNames.size) {
              item.matchNames = Array.from(keepMatchNames);
            } else {
              delete item.matchNames;
            }
          });
        });
        function insertName(which, t, kv, nsimple, itemID) {
          if (!nsimple) {
            that.warnings.push("Warning: skipping empty ".concat(which, " name for item ").concat(t, "/").concat(kv, ": ").concat(itemID));
            return;
          }
          var branch = that.matchIndex.get(kv);
          if (!branch) {
            branch = {
              primary: new Map(),
              alternate: new Map(),
              excludeGeneric: new Map(),
              excludeNamed: new Map()
            };
            that.matchIndex.set(kv, branch);
          }
          var leaf = branch[which].get(nsimple);
          if (!leaf) {
            leaf = new Set();
            branch[which].set(nsimple, leaf);
          }
          leaf.add(itemID);
          if (!/yes$/.test(kv)) {
            var kvnsimple = "".concat(kv, "/").concat(nsimple);
            var existing = seenTree.get(kvnsimple);
            if (existing && existing !== t) {
              var items = Array.from(leaf);
              that.warnings.push('Duplicate cache key "'.concat(kvnsimple, '" in trees "').concat(t, '" and "').concat(existing, '", check items: ').concat(items));
              return;
            }
            seenTree.set(kvnsimple, t);
          }
        }
        function skipGenericKVMatches(t, k, v) {
          return t === "flags" || t === "transit" || k === "landuse" || v === "atm" || v === "bicycle_parking" || v === "car_sharing" || v === "caravan_site" || v === "charging_station" || v === "dog_park" || v === "parking" || v === "phone" || v === "playground" || v === "post_box" || v === "public_bookcase" || v === "recycling" || v === "vending_machine";
        }
      }
    }, {
      key: "buildLocationIndex",
      value: function buildLocationIndex(data2, loco) {
        var that = this;
        if (that.locationIndex)
          return;
        that.itemLocation = new Map();
        that.locationSets = new Map();
        Object.keys(data2).forEach(function(tkv) {
          var items = data2[tkv].items;
          if (!Array.isArray(items) || !items.length)
            return;
          items.forEach(function(item) {
            if (that.itemLocation.has(item.id))
              return;
            var resolved;
            try {
              resolved = loco.resolveLocationSet(item.locationSet);
            } catch (err) {
              console.warn("buildLocationIndex: ".concat(err.message));
            }
            if (!resolved || !resolved.id)
              return;
            that.itemLocation.set(item.id, resolved.id);
            if (that.locationSets.has(resolved.id))
              return;
            var feature3 = _cloneDeep2(resolved.feature);
            feature3.id = resolved.id;
            feature3.properties.id = resolved.id;
            if (!feature3.geometry.coordinates.length || !feature3.properties.area) {
              console.warn("buildLocationIndex: locationSet ".concat(resolved.id, " for ").concat(item.id, " resolves to an empty feature:"));
              console.warn(JSON.stringify(feature3));
              return;
            }
            that.locationSets.set(resolved.id, feature3);
          });
        });
        that.locationIndex = (0, import_which_polygon4.default)({
          type: "FeatureCollection",
          features: _toConsumableArray(that.locationSets.values())
        });
        function _cloneDeep2(obj) {
          return JSON.parse(JSON.stringify(obj));
        }
      }
    }, {
      key: "match",
      value: function match(k, v, n2, loc) {
        var that = this;
        if (!that.matchIndex) {
          throw new Error("match:  matchIndex not built.");
        }
        var matchLocations;
        if (Array.isArray(loc) && that.locationIndex) {
          matchLocations = that.locationIndex([loc[0], loc[1], loc[0], loc[1]], true);
        }
        var nsimple = simplify2(n2);
        var seen = new Set();
        var results = [];
        gatherResults("primary");
        gatherResults("alternate");
        if (results.length)
          return results;
        gatherResults("exclude");
        return results.length ? results : null;
        function gatherResults(which) {
          var kv = "".concat(k, "/").concat(v);
          var didMatch = tryMatch(which, kv);
          if (didMatch)
            return;
          for (var mg in matchGroups) {
            var matchGroup = matchGroups[mg];
            var inGroup = matchGroup.some(function(otherkv2) {
              return otherkv2 === kv;
            });
            if (!inGroup)
              continue;
            for (var i2 = 0; i2 < matchGroup.length; i2++) {
              var otherkv = matchGroup[i2];
              if (otherkv === kv)
                continue;
              didMatch = tryMatch(which, otherkv);
              if (didMatch)
                return;
            }
          }
          if (which === "exclude") {
            var regex = _toConsumableArray(that.genericWords.values()).find(function(regex2) {
              return regex2.test(n2);
            });
            if (regex) {
              results.push({
                match: "excludeGeneric",
                pattern: String(regex)
              });
              return;
            }
          }
        }
        function tryMatch(which, kv) {
          var branch = that.matchIndex.get(kv);
          if (!branch)
            return;
          if (which === "exclude") {
            var regex = _toConsumableArray(branch.excludeNamed.values()).find(function(regex2) {
              return regex2.test(n2);
            });
            if (regex) {
              results.push({
                match: "excludeNamed",
                pattern: String(regex),
                kv: kv
              });
              return;
            }
            regex = _toConsumableArray(branch.excludeGeneric.values()).find(function(regex2) {
              return regex2.test(n2);
            });
            if (regex) {
              results.push({
                match: "excludeGeneric",
                pattern: String(regex),
                kv: kv
              });
              return;
            }
            return;
          }
          var leaf = branch[which].get(nsimple);
          if (!leaf || !leaf.size)
            return;
          var hits = Array.from(leaf).map(function(itemID) {
            var area3 = Infinity;
            if (that.itemLocation && that.locationSets) {
              var location2 = that.locationSets.get(that.itemLocation.get(itemID));
              area3 = location2 && location2.properties.area || Infinity;
            }
            return {
              match: which,
              itemID: itemID,
              area: area3,
              kv: kv,
              nsimple: nsimple
            };
          });
          var sortFn = byAreaDescending;
          if (matchLocations) {
            hits = hits.filter(isValidLocation);
            sortFn = byAreaAscending;
          }
          if (!hits.length)
            return;
          hits.sort(sortFn).forEach(function(hit) {
            if (seen.has(hit.itemID))
              return;
            seen.add(hit.itemID);
            results.push(hit);
          });
          return true;
          function isValidLocation(hit) {
            if (!that.itemLocation)
              return true;
            return matchLocations.find(function(props) {
              return props.id === that.itemLocation.get(hit.itemID);
            });
          }
          function byAreaAscending(hitA, hitB) {
            return hitA.area - hitB.area;
          }
          function byAreaDescending(hitA, hitB) {
            return hitB.area - hitA.area;
          }
        }
      }
    }, {
      key: "getWarnings",
      value: function getWarnings() {
        return this.warnings;
      }
    }]);
    return Matcher2;
  }();

  // modules/services/nsi.js
  var _nsiStatus = "loading";
  var _nsi = {};
  var buildingPreset = {
    "building/commercial": true,
    "building/government": true,
    "building/hotel": true,
    "building/retail": true,
    "building/office": true,
    "building/supermarket": true,
    "building/yes": true
  };
  var notNames = /:(colou?r|type|forward|backward|left|right|etymology|pronunciation|wikipedia)$/i;
  var notBranches = /(coop|express|wireless|factory|outlet)/i;
  function setNsiSources() {
    var sources = {
      "nsi_data": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/nsi.min.json",
      "nsi_dissolved": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/dissolved.min.json",
      "nsi_features": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/featureCollection.min.json",
      "nsi_generics": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/genericWords.min.json",
      "nsi_presets": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/presets/nsi-id-presets.min.json",
      "nsi_replacements": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/replacements.min.json",
      "nsi_trees": "https://cdn.jsdelivr.net/npm/name-suggestion-index@6.0/dist/trees.min.json"
    };
    var fileMap = _mainFileFetcher.fileMap();
    for (var k in sources) {
      if (!fileMap[k])
        fileMap[k] = sources[k];
    }
  }
  function loadNsiPresets() {
    return Promise.all([_mainFileFetcher.get("nsi_presets"), _mainFileFetcher.get("nsi_features")]).then(function(vals) {
      Object.values(vals[0].presets).forEach(function(preset) {
        return preset.suggestion = true;
      });
      _mainPresetIndex.merge({
        presets: vals[0].presets,
        featureCollection: vals[1]
      });
    });
  }
  function loadNsiData() {
    return Promise.all([_mainFileFetcher.get("nsi_data"), _mainFileFetcher.get("nsi_dissolved"), _mainFileFetcher.get("nsi_replacements"), _mainFileFetcher.get("nsi_trees")]).then(function(vals) {
      _nsi = {
        data: vals[0].nsi,
        dissolved: vals[1].dissolved,
        replacements: vals[2].replacements,
        trees: vals[3].trees,
        kvt: new Map(),
        qids: new Map(),
        ids: new Map()
      };
      _nsi.matcher = new Matcher();
      _nsi.matcher.buildMatchIndex(_nsi.data);
      _nsi.matcher.buildLocationIndex(_nsi.data, _mainLocations.loco());
      Object.keys(_nsi.data).forEach(function(tkv) {
        var category = _nsi.data[tkv];
        var parts = tkv.split("/", 3);
        var t = parts[0];
        var k = parts[1];
        var v = parts[2];
        var vmap = _nsi.kvt.get(k);
        if (!vmap) {
          vmap = new Map();
          _nsi.kvt.set(k, vmap);
        }
        vmap.set(v, t);
        var tree = _nsi.trees[t];
        var mainTag = tree.mainTag;
        var items = category.items || [];
        items.forEach(function(item) {
          item.tkv = tkv;
          item.mainTag = mainTag;
          _nsi.ids.set(item.id, item);
          var wd = item.tags[mainTag];
          var wp = item.tags[mainTag.replace("wikidata", "wikipedia")];
          if (wd)
            _nsi.qids.set(wd, wd);
          if (wp && wd)
            _nsi.qids.set(wp, wd);
        });
      });
    });
  }
  function gatherKVs(tags) {
    var primary = new Set();
    var alternate = new Set();
    Object.keys(tags).forEach(function(osmkey) {
      var osmvalue = tags[osmkey];
      if (!osmvalue)
        return;
      if (osmkey === "route_master")
        osmkey = "route";
      var vmap = _nsi.kvt.get(osmkey);
      if (!vmap)
        return;
      if (vmap.get(osmvalue)) {
        primary.add("".concat(osmkey, "/").concat(osmvalue));
      } else if (osmvalue === "yes") {
        alternate.add("".concat(osmkey, "/").concat(osmvalue));
      }
    });
    var preset = _mainPresetIndex.matchTags(tags, "area");
    if (buildingPreset[preset.id]) {
      alternate.add("building/yes");
    }
    return {
      primary: primary,
      alternate: alternate
    };
  }
  function identifyTree(tags) {
    var unknown;
    var t;
    Object.keys(tags).forEach(function(osmkey) {
      if (t)
        return;
      var osmvalue = tags[osmkey];
      if (!osmvalue)
        return;
      if (osmkey === "route_master")
        osmkey = "route";
      var vmap = _nsi.kvt.get(osmkey);
      if (!vmap)
        return;
      if (osmvalue === "yes") {
        unknown = "unknown";
      } else {
        t = vmap.get(osmvalue);
      }
    });
    return t || unknown || null;
  }
  function gatherNames(tags) {
    var empty2 = {
      primary: new Set(),
      alternate: new Set()
    };
    var primary = new Set();
    var alternate = new Set();
    var foundSemi = false;
    var testNameFragments = false;
    var patterns2;
    var t = identifyTree(tags);
    if (!t)
      return empty2;
    if (t === "transit") {
      patterns2 = {
        primary: /^network$/i,
        alternate: /^(operator|operator:\w+|network:\w+|\w+_name|\w+_name:\w+)$/i
      };
    } else if (t === "flags") {
      patterns2 = {
        primary: /^(flag:name|flag:name:\w+)$/i,
        alternate: /^(flag|flag:\w+|subject|subject:\w+)$/i
      };
    } else if (t === "brands") {
      testNameFragments = true;
      patterns2 = {
        primary: /^(name|name:\w+)$/i,
        alternate: /^(brand|brand:\w+|operator|operator:\w+|\w+_name|\w+_name:\w+)/i
      };
    } else if (t === "operators") {
      testNameFragments = true;
      patterns2 = {
        primary: /^(name|name:\w+|operator|operator:\w+)$/i,
        alternate: /^(brand|brand:\w+|\w+_name|\w+_name:\w+)/i
      };
    } else {
      testNameFragments = true;
      patterns2 = {
        primary: /^(name|name:\w+)$/i,
        alternate: /^(brand|brand:\w+|network|network:\w+|operator|operator:\w+|\w+_name|\w+_name:\w+)/i
      };
    }
    if (tags.name && testNameFragments) {
      var nameParts = tags.name.split(/[\s\-\/,.]/);
      for (var split = nameParts.length; split > 0; split--) {
        var name = nameParts.slice(0, split).join(" ");
        primary.add(name);
      }
    }
    Object.keys(tags).forEach(function(osmkey) {
      var osmvalue2 = tags[osmkey];
      if (!osmvalue2)
        return;
      if (isNamelike(osmkey, "primary")) {
        if (/;/.test(osmvalue2)) {
          foundSemi = true;
        } else {
          primary.add(osmvalue2);
          alternate.delete(osmvalue2);
        }
      } else if (!primary.has(osmvalue2) && isNamelike(osmkey, "alternate")) {
        if (/;/.test(osmvalue2)) {
          foundSemi = true;
        } else {
          alternate.add(osmvalue2);
        }
      }
    });
    if (tags.man_made === "flagpole" && !primary.size && !alternate.size && !!tags.country) {
      var osmvalue = tags.country;
      if (/;/.test(osmvalue)) {
        foundSemi = true;
      } else {
        alternate.add(osmvalue);
      }
    }
    if (foundSemi) {
      return empty2;
    } else {
      return {
        primary: primary,
        alternate: alternate
      };
    }
    function isNamelike(osmkey, which) {
      if (osmkey === "old_name")
        return false;
      return patterns2[which].test(osmkey) && !notNames.test(osmkey);
    }
  }
  function gatherTuples(tryKVs, tryNames) {
    var tuples = [];
    ["primary", "alternate"].forEach(function(whichName) {
      var arr = Array.from(tryNames[whichName]).sort(function(a, b2) {
        return b2.length - a.length;
      });
      arr.forEach(function(n2) {
        ["primary", "alternate"].forEach(function(whichKV) {
          tryKVs[whichKV].forEach(function(kv) {
            var parts = kv.split("/", 2);
            var k = parts[0];
            var v = parts[1];
            tuples.push({
              k: k,
              v: v,
              n: n2
            });
          });
        });
      });
    });
    return tuples;
  }
  function _upgradeTags(tags, loc) {
    var newTags = Object.assign({}, tags);
    var changed = false;
    Object.keys(newTags).forEach(function(osmkey) {
      var matchTag = osmkey.match(/^(\w+:)?wikidata$/);
      if (matchTag) {
        var prefix = matchTag[1] || "";
        var wd = newTags[osmkey];
        var replace2 = _nsi.replacements[wd];
        if (replace2 && replace2.wikidata !== void 0) {
          changed = true;
          if (replace2.wikidata) {
            newTags[osmkey] = replace2.wikidata;
          } else {
            delete newTags[osmkey];
          }
        }
        if (replace2 && replace2.wikipedia !== void 0) {
          changed = true;
          var wpkey = "".concat(prefix, "wikipedia");
          if (replace2.wikipedia) {
            newTags[wpkey] = replace2.wikipedia;
          } else {
            delete newTags[wpkey];
          }
        }
      }
    });
    var isRouteMaster = tags.type === "route_master";
    var tryKVs = gatherKVs(tags);
    if (!tryKVs.primary.size && !tryKVs.alternate.size) {
      return changed ? {
        newTags: newTags,
        matched: null
      } : null;
    }
    var tryNames = gatherNames(tags);
    var foundQID = _nsi.qids.get(tags.wikidata) || _nsi.qids.get(tags.wikipedia);
    if (foundQID)
      tryNames.primary.add(foundQID);
    if (!tryNames.primary.size && !tryNames.alternate.size) {
      return changed ? {
        newTags: newTags,
        matched: null
      } : null;
    }
    var tuples = gatherTuples(tryKVs, tryNames);
    var _loop = function _loop2(i3) {
      var tuple = tuples[i3];
      var hits = _nsi.matcher.match(tuple.k, tuple.v, tuple.n, loc);
      if (!hits || !hits.length)
        return "continue";
      if (hits[0].match !== "primary" && hits[0].match !== "alternate")
        return "break";
      var itemID = void 0, item = void 0;
      for (var j = 0; j < hits.length; j++) {
        var hit = hits[j];
        itemID = hit.itemID;
        if (_nsi.dissolved[itemID])
          continue;
        item = _nsi.ids.get(itemID);
        if (!item)
          continue;
        var mainTag = item.mainTag;
        var itemQID = item.tags[mainTag];
        var notQID = newTags["not:".concat(mainTag)];
        if (!itemQID || itemQID === notQID || newTags.office && !item.tags.office) {
          item = null;
          continue;
        } else {
          break;
        }
      }
      if (!item)
        return "continue";
      item = JSON.parse(JSON.stringify(item));
      var tkv = item.tkv;
      var parts = tkv.split("/", 3);
      var k = parts[1];
      var v = parts[2];
      var category = _nsi.data[tkv];
      var properties = category.properties || {};
      var preserveTags = item.preserveTags || properties.preserveTags || [];
      ["building", "emergency", "internet_access", "takeaway"].forEach(function(osmkey) {
        if (k !== osmkey)
          preserveTags.push("^".concat(osmkey, "$"));
      });
      var regexes = preserveTags.map(function(s) {
        return new RegExp(s, "i");
      });
      var keepTags = {};
      Object.keys(newTags).forEach(function(osmkey) {
        if (regexes.some(function(regex) {
          return regex.test(osmkey);
        })) {
          keepTags[osmkey] = newTags[osmkey];
        }
      });
      _nsi.kvt.forEach(function(vmap, k2) {
        if (newTags[k2] === "yes")
          delete newTags[k2];
      });
      if (foundQID) {
        delete newTags.wikipedia;
        delete newTags.wikidata;
      }
      Object.assign(newTags, item.tags, keepTags);
      if (isRouteMaster) {
        newTags.route_master = newTags.route;
        delete newTags.route;
      }
      var origName = tags.name;
      var newName = newTags.name;
      if (newName && origName && newName !== origName && !newTags.branch) {
        var newNames = gatherNames(newTags);
        var newSet = new Set([].concat(_toConsumableArray(newNames.primary), _toConsumableArray(newNames.alternate)));
        var isMoved = newSet.has(origName);
        if (!isMoved) {
          var nameParts = origName.split(/[\s\-\/,.]/);
          for (var split = nameParts.length; split > 0; split--) {
            var name = nameParts.slice(0, split).join(" ");
            var branch = nameParts.slice(split).join(" ");
            var nameHits = _nsi.matcher.match(k, v, name, loc);
            if (!nameHits || !nameHits.length)
              continue;
            if (nameHits.some(function(hit2) {
              return hit2.itemID === itemID;
            })) {
              if (branch) {
                if (notBranches.test(branch)) {
                  newTags.name = origName;
                } else {
                  var branchHits = _nsi.matcher.match(k, v, branch, loc);
                  if (branchHits && branchHits.length) {
                    if (branchHits[0].match === "primary" || branchHits[0].match === "alternate") {
                      return {
                        v: null
                      };
                    }
                  } else {
                    newTags.branch = branch;
                  }
                }
              }
              break;
            }
          }
        }
      }
      return {
        v: {
          newTags: newTags,
          matched: item
        }
      };
    };
    for (var i2 = 0; i2 < tuples.length; i2++) {
      var _ret = _loop(i2);
      if (_ret === "continue")
        continue;
      if (_ret === "break")
        break;
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
    return changed ? {
      newTags: newTags,
      matched: null
    } : null;
  }
  function _isGenericName(tags) {
    var n2 = tags.name;
    if (!n2)
      return false;
    var tryNames = {
      primary: new Set([n2]),
      alternate: new Set()
    };
    var tryKVs = gatherKVs(tags);
    if (!tryKVs.primary.size && !tryKVs.alternate.size)
      return false;
    var tuples = gatherTuples(tryKVs, tryNames);
    for (var i2 = 0; i2 < tuples.length; i2++) {
      var tuple = tuples[i2];
      var hits = _nsi.matcher.match(tuple.k, tuple.v, tuple.n);
      if (hits && hits.length && hits[0].match === "excludeGeneric")
        return true;
    }
    return false;
  }
  var nsi_default = {
    init: function init10() {
      setNsiSources();
      _mainPresetIndex.ensureLoaded().then(function() {
        return loadNsiPresets();
      }).then(function() {
        return delay(100);
      }).then(function() {
        return _mainLocations.mergeLocationSets([]);
      }).then(function() {
        return loadNsiData();
      }).then(function() {
        return _nsiStatus = "ok";
      }).catch(function() {
        return _nsiStatus = "failed";
      });
      function delay(msec) {
        return new Promise(function(resolve) {
          window.setTimeout(resolve, msec);
        });
      }
    },
    reset: function reset8() {
    },
    status: function status() {
      return _nsiStatus;
    },
    isGenericName: function isGenericName(tags) {
      return _isGenericName(tags);
    },
    upgradeTags: function upgradeTags(tags, loc) {
      return _upgradeTags(tags, loc);
    },
    cache: function cache3() {
      return _nsi;
    }
  };

  // modules/services/openstreetcam.js
  var import_rbush8 = __toModule(require_rbush_min());
  var apibase2 = "https://openstreetcam.org";
  var maxResults = 1e3;
  var tileZoom = 14;
  var tiler7 = new Tiler().skipNullIsland(true);
  var dispatch8 = dispatch_default("loadedImages");
  var imgZoom = zoom_default2().extent([[0, 0], [320, 240]]).translateExtent([[0, 0], [320, 240]]).scaleExtent([1, 15]);
  var _oscCache;
  var _oscSelectedImage;
  var _loadViewerPromise2;
  function abortRequest6(controller) {
    controller.abort();
  }
  function maxPageAtZoom(z) {
    if (z < 15)
      return 2;
    if (z === 15)
      return 5;
    if (z === 16)
      return 10;
    if (z === 17)
      return 20;
    if (z === 18)
      return 40;
    if (z > 18)
      return 80;
  }
  function loadTiles4(which, url, projection2) {
    var currZoom = Math.floor(geoScaleToZoom(projection2.scale()));
    var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
    var tiles = tiler7.zoomRange(tileZoom).getTiles(proj).tiles;
    var cache7 = _oscCache[which];
    Object.keys(cache7.inflight).forEach(function(k) {
      var wanted = tiles.find(function(tile) {
        return k.indexOf(tile.id + ",") === 0;
      });
      if (!wanted) {
        abortRequest6(cache7.inflight[k]);
        delete cache7.inflight[k];
      }
    });
    tiles.forEach(function(tile) {
      loadNextTilePage(which, currZoom, url, tile);
    });
  }
  function loadNextTilePage(which, currZoom, url, tile) {
    var cache7 = _oscCache[which];
    var bbox = tile.wgs84Extent.bbox();
    var maxPages = maxPageAtZoom(currZoom);
    var nextPage = cache7.nextPage[tile.id] || 1;
    var params = utilQsString({
      ipp: maxResults,
      page: nextPage,
      bbTopLeft: [bbox.maxY, bbox.minX].join(","),
      bbBottomRight: [bbox.minY, bbox.maxX].join(",")
    }, true);
    if (nextPage > maxPages)
      return;
    var id2 = tile.id + "," + String(nextPage);
    if (cache7.loaded[id2] || cache7.inflight[id2])
      return;
    var controller = new AbortController();
    cache7.inflight[id2] = controller;
    var options = {
      method: "POST",
      signal: controller.signal,
      body: params,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    };
    json_default(url, options).then(function(data2) {
      cache7.loaded[id2] = true;
      delete cache7.inflight[id2];
      if (!data2 || !data2.currentPageItems || !data2.currentPageItems.length) {
        throw new Error("No Data");
      }
      var features2 = data2.currentPageItems.map(function(item) {
        var loc = [+item.lng, +item.lat];
        var d;
        if (which === "images") {
          d = {
            loc: loc,
            key: item.id,
            ca: +item.heading,
            captured_at: item.shot_date || item.date_added,
            captured_by: item.username,
            imagePath: item.lth_name,
            sequence_id: item.sequence_id,
            sequence_index: +item.sequence_index
          };
          var seq = _oscCache.sequences[d.sequence_id];
          if (!seq) {
            seq = {
              rotation: 0,
              images: []
            };
            _oscCache.sequences[d.sequence_id] = seq;
          }
          seq.images[d.sequence_index] = d;
          _oscCache.images.forImageKey[d.key] = d;
        }
        return {
          minX: loc[0],
          minY: loc[1],
          maxX: loc[0],
          maxY: loc[1],
          data: d
        };
      });
      cache7.rtree.load(features2);
      if (data2.currentPageItems.length === maxResults) {
        cache7.nextPage[tile.id] = nextPage + 1;
        loadNextTilePage(which, currZoom, url, tile);
      } else {
        cache7.nextPage[tile.id] = Infinity;
      }
      if (which === "images") {
        dispatch8.call("loadedImages");
      }
    }).catch(function() {
      cache7.loaded[id2] = true;
      delete cache7.inflight[id2];
    });
  }
  function partitionViewport2(projection2) {
    var z = geoScaleToZoom(projection2.scale());
    var z2 = Math.ceil(z * 2) / 2 + 2.5;
    var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
    var tiles = tiler7.zoomRange(z2).getTiles(proj).tiles;
    return tiles.map(function(tile) {
      return tile.wgs84Extent;
    });
  }
  function searchLimited2(limit, projection2, rtree) {
    limit = limit || 5;
    return partitionViewport2(projection2).reduce(function(result6, extent6) {
      var found = rtree.search(extent6.bbox()).slice(0, limit).map(function(d) {
        return d.data;
      });
      return found.length ? result6.concat(found) : result6;
    }, []);
  }
  var openstreetcam_default = {
    init: function init11() {
      if (!_oscCache) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch8, "on");
    },
    reset: function reset9() {
      if (_oscCache) {
        Object.values(_oscCache.images.inflight).forEach(abortRequest6);
      }
      _oscCache = {
        images: {
          inflight: {},
          loaded: {},
          nextPage: {},
          rtree: new import_rbush8.default(),
          forImageKey: {}
        },
        sequences: {}
      };
      _oscSelectedImage = null;
    },
    images: function images2(projection2) {
      var limit = 5;
      return searchLimited2(limit, projection2, _oscCache.images.rtree);
    },
    sequences: function sequences2(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      var sequenceKeys = {};
      _oscCache.images.rtree.search(bbox).forEach(function(d) {
        sequenceKeys[d.data.sequence_id] = true;
      });
      var lineStrings = [];
      Object.keys(sequenceKeys).forEach(function(sequenceKey) {
        var seq = _oscCache.sequences[sequenceKey];
        var images3 = seq && seq.images;
        if (images3) {
          lineStrings.push({
            type: "LineString",
            coordinates: images3.map(function(d) {
              return d.loc;
            }).filter(Boolean),
            properties: {
              captured_at: images3[0] ? images3[0].captured_at : null,
              captured_by: images3[0] ? images3[0].captured_by : null,
              key: sequenceKey
            }
          });
        }
      });
      return lineStrings;
    },
    cachedImage: function cachedImage2(imageKey) {
      return _oscCache.images.forImageKey[imageKey];
    },
    loadImages: function loadImages2(projection2) {
      var url = apibase2 + "/1.0/list/nearby-photos/";
      loadTiles4("images", url, projection2);
    },
    ensureViewerLoaded: function ensureViewerLoaded2(context) {
      if (_loadViewerPromise2)
        return _loadViewerPromise2;
      var wrap2 = context.container().select(".photoviewer").selectAll(".osc-wrapper").data([0]);
      var that = this;
      var wrapEnter = wrap2.enter().append("div").attr("class", "photo-wrapper osc-wrapper").classed("hide", true).call(imgZoom.on("zoom", zoomPan)).on("dblclick.zoom", null);
      wrapEnter.append("div").attr("class", "photo-attribution fillD");
      var controlsEnter = wrapEnter.append("div").attr("class", "photo-controls-wrap").append("div").attr("class", "photo-controls");
      controlsEnter.append("button").on("click.back", step(-1)).html("\u25C4");
      controlsEnter.append("button").on("click.rotate-ccw", rotate(-90)).html("\u293F");
      controlsEnter.append("button").on("click.rotate-cw", rotate(90)).html("\u293E");
      controlsEnter.append("button").on("click.forward", step(1)).html("\u25BA");
      wrapEnter.append("div").attr("class", "osc-image-wrap");
      context.ui().photoviewer.on("resize.openstreetcam", function(dimensions) {
        imgZoom = zoom_default2().extent([[0, 0], dimensions]).translateExtent([[0, 0], dimensions]).scaleExtent([1, 15]).on("zoom", zoomPan);
      });
      function zoomPan(d3_event) {
        var t = d3_event.transform;
        context.container().select(".photoviewer .osc-image-wrap").call(utilSetTransform, t.x, t.y, t.k);
      }
      function rotate(deg) {
        return function() {
          if (!_oscSelectedImage)
            return;
          var sequenceKey = _oscSelectedImage.sequence_id;
          var sequence = _oscCache.sequences[sequenceKey];
          if (!sequence)
            return;
          var r = sequence.rotation || 0;
          r += deg;
          if (r > 180)
            r -= 360;
          if (r < -180)
            r += 360;
          sequence.rotation = r;
          var wrap3 = context.container().select(".photoviewer .osc-wrapper");
          wrap3.transition().duration(100).call(imgZoom.transform, identity2);
          wrap3.selectAll(".osc-image").transition().duration(100).style("transform", "rotate(" + r + "deg)");
        };
      }
      function step(stepBy) {
        return function() {
          if (!_oscSelectedImage)
            return;
          var sequenceKey = _oscSelectedImage.sequence_id;
          var sequence = _oscCache.sequences[sequenceKey];
          if (!sequence)
            return;
          var nextIndex = _oscSelectedImage.sequence_index + stepBy;
          var nextImage = sequence.images[nextIndex];
          if (!nextImage)
            return;
          context.map().centerEase(nextImage.loc);
          that.selectImage(context, nextImage.key);
        };
      }
      _loadViewerPromise2 = Promise.resolve();
      return _loadViewerPromise2;
    },
    showViewer: function showViewer2(context) {
      var viewer2 = context.container().select(".photoviewer").classed("hide", false);
      var isHidden = viewer2.selectAll(".photo-wrapper.osc-wrapper.hide").size();
      if (isHidden) {
        viewer2.selectAll(".photo-wrapper:not(.osc-wrapper)").classed("hide", true);
        viewer2.selectAll(".photo-wrapper.osc-wrapper").classed("hide", false);
      }
      return this;
    },
    hideViewer: function hideViewer2(context) {
      _oscSelectedImage = null;
      this.updateUrlImage(null);
      var viewer2 = context.container().select(".photoviewer");
      if (!viewer2.empty())
        viewer2.datum(null);
      viewer2.classed("hide", true).selectAll(".photo-wrapper").classed("hide", true);
      context.container().selectAll(".viewfield-group, .sequence, .icon-sign").classed("currentView", false);
      return this.setStyles(context, null, true);
    },
    selectImage: function selectImage2(context, imageKey) {
      var d = this.cachedImage(imageKey);
      _oscSelectedImage = d;
      this.updateUrlImage(imageKey);
      var viewer2 = context.container().select(".photoviewer");
      if (!viewer2.empty())
        viewer2.datum(d);
      this.setStyles(context, null, true);
      context.container().selectAll(".icon-sign").classed("currentView", false);
      if (!d)
        return this;
      var wrap2 = context.container().select(".photoviewer .osc-wrapper");
      var imageWrap = wrap2.selectAll(".osc-image-wrap");
      var attribution = wrap2.selectAll(".photo-attribution").html("");
      wrap2.transition().duration(100).call(imgZoom.transform, identity2);
      imageWrap.selectAll(".osc-image").remove();
      if (d) {
        var sequence = _oscCache.sequences[d.sequence_id];
        var r = sequence && sequence.rotation || 0;
        imageWrap.append("img").attr("class", "osc-image").attr("src", apibase2 + "/" + d.imagePath).style("transform", "rotate(" + r + "deg)");
        if (d.captured_by) {
          attribution.append("a").attr("class", "captured_by").attr("target", "_blank").attr("href", "https://openstreetcam.org/user/" + encodeURIComponent(d.captured_by)).html("@" + d.captured_by);
          attribution.append("span").html("|");
        }
        if (d.captured_at) {
          attribution.append("span").attr("class", "captured_at").html(localeDateString2(d.captured_at));
          attribution.append("span").html("|");
        }
        attribution.append("a").attr("class", "image-link").attr("target", "_blank").attr("href", "https://openstreetcam.org/details/" + d.sequence_id + "/" + d.sequence_index).html("openstreetcam.org");
      }
      return this;
      function localeDateString2(s) {
        if (!s)
          return null;
        var options = {
          day: "numeric",
          month: "short",
          year: "numeric"
        };
        var d2 = new Date(s);
        if (isNaN(d2.getTime()))
          return null;
        return d2.toLocaleDateString(_mainLocalizer.localeCode(), options);
      }
    },
    getSelectedImage: function getSelectedImage() {
      return _oscSelectedImage;
    },
    getSequenceKeyForImage: function getSequenceKeyForImage(d) {
      return d && d.sequence_id;
    },
    setStyles: function setStyles2(context, hovered, reset17) {
      if (reset17) {
        context.container().selectAll(".viewfield-group").classed("highlighted", false).classed("hovered", false).classed("currentView", false);
        context.container().selectAll(".sequence").classed("highlighted", false).classed("currentView", false);
      }
      var hoveredImageKey = hovered && hovered.key;
      var hoveredSequenceKey = this.getSequenceKeyForImage(hovered);
      var hoveredSequence = hoveredSequenceKey && _oscCache.sequences[hoveredSequenceKey];
      var hoveredImageKeys = hoveredSequence && hoveredSequence.images.map(function(d) {
        return d.key;
      }) || [];
      var viewer2 = context.container().select(".photoviewer");
      var selected = viewer2.empty() ? void 0 : viewer2.datum();
      var selectedImageKey = selected && selected.key;
      var selectedSequenceKey = this.getSequenceKeyForImage(selected);
      var selectedSequence = selectedSequenceKey && _oscCache.sequences[selectedSequenceKey];
      var selectedImageKeys = selectedSequence && selectedSequence.images.map(function(d) {
        return d.key;
      }) || [];
      var highlightedImageKeys = utilArrayUnion(hoveredImageKeys, selectedImageKeys);
      context.container().selectAll(".layer-openstreetcam .viewfield-group").classed("highlighted", function(d) {
        return highlightedImageKeys.indexOf(d.key) !== -1;
      }).classed("hovered", function(d) {
        return d.key === hoveredImageKey;
      }).classed("currentView", function(d) {
        return d.key === selectedImageKey;
      });
      context.container().selectAll(".layer-openstreetcam .sequence").classed("highlighted", function(d) {
        return d.properties.key === hoveredSequenceKey;
      }).classed("currentView", function(d) {
        return d.properties.key === selectedSequenceKey;
      });
      context.container().selectAll(".layer-openstreetcam .viewfield-group .viewfield").attr("d", viewfieldPath);
      function viewfieldPath() {
        var d = this.parentNode.__data__;
        if (d.pano && d.key !== selectedImageKey) {
          return "M 8,13 m -10,0 a 10,10 0 1,0 20,0 a 10,10 0 1,0 -20,0";
        } else {
          return "M 6,9 C 8,8.4 8,8.4 10,9 L 16,-2 C 12,-5 4,-5 0,-2 z";
        }
      }
      return this;
    },
    updateUrlImage: function updateUrlImage2(imageKey) {
      if (!window.mocha) {
        var hash = utilStringQs(window.location.hash);
        if (imageKey) {
          hash.photo = "openstreetcam/" + imageKey;
        } else {
          delete hash.photo;
        }
        window.location.replace("#" + utilQsString(hash, true));
      }
    },
    cache: function cache4() {
      return _oscCache;
    }
  };

  // modules/services/osm.js
  init_typeof();

  // node_modules/osm-auth/src/osm-auth.mjs
  function osmAuth(o2) {
    var oauth2 = {};
    var _store = null;
    try {
      _store = window.localStorage;
    } catch (e3) {
      var _mock = new Map();
      _store = {
        isMocked: true,
        hasItem: function hasItem(k) {
          return _mock.has(k);
        },
        getItem: function getItem(k) {
          return _mock.get(k);
        },
        setItem: function setItem(k, v) {
          return _mock.set(k, v);
        },
        removeItem: function removeItem4(k) {
          return _mock.delete(k);
        },
        clear: function clear() {
          return _mock.clear();
        }
      };
    }
    function token(k, v) {
      var key = o2.url + k;
      if (arguments.length === 1) {
        var val = _store.getItem(key) || "";
        return val.replace(/"/g, "");
      } else if (arguments.length === 2) {
        if (v) {
          return _store.setItem(key, v);
        } else {
          return _store.removeItem(key);
        }
      }
    }
    oauth2.authenticated = function() {
      return !!token("oauth2_access_token");
    };
    oauth2.logout = function() {
      token("oauth2_access_token", "");
      token("oauth_token", "");
      token("oauth_token_secret", "");
      token("oauth_request_token_secret", "");
      return oauth2;
    };
    oauth2.authenticate = function(callback) {
      if (oauth2.authenticated()) {
        callback(null, oauth2);
        return;
      }
      oauth2.logout();
      _preopenPopup(function(error, popup) {
        if (error) {
          callback(error);
        } else {
          _generatePkceChallenge(function(pkce) {
            _authenticate(pkce, popup, callback);
          });
        }
      });
    };
    oauth2.authenticateAsync = function() {
      if (oauth2.authenticated()) {
        return Promise.resolve(oauth2);
      }
      oauth2.logout();
      return new Promise(function(resolve, reject) {
        var errback = function errback2(err, result6) {
          if (err) {
            reject(err);
          } else {
            resolve(result6);
          }
        };
        _preopenPopup(function(error, popup) {
          if (error) {
            errback(error);
          } else {
            _generatePkceChallenge(function(pkce) {
              return _authenticate(pkce, popup, errback);
            });
          }
        });
      });
    };
    function _preopenPopup(callback) {
      if (o2.singlepage) {
        callback(null, void 0);
        return;
      }
      var w = 550;
      var h = 610;
      var settings = [["width", w], ["height", h], ["left", window.screen.width / 2 - w / 2], ["top", window.screen.height / 2 - h / 2]].map(function(x2) {
        return x2.join("=");
      }).join(",");
      var popup = window.open("about:blank", "oauth_window", settings);
      if (popup) {
        callback(null, popup);
      } else {
        var error = new Error("Popup was blocked");
        error.status = "popup-blocked";
        callback(error);
      }
    }
    function _authenticate(pkce, popup, callback) {
      var state = generateState();
      var url = o2.url + "/oauth2/authorize?" + utilQsString2({
        client_id: o2.client_id,
        redirect_uri: o2.redirect_uri,
        response_type: "code",
        scope: o2.scope,
        state: state,
        code_challenge: pkce.code_challenge,
        code_challenge_method: pkce.code_challenge_method,
        locale: o2.locale || ""
      });
      if (o2.singlepage) {
        if (_store.isMocked) {
          var error = new Error("localStorage unavailable, but required in singlepage mode");
          error.status = "pkce-localstorage-unavailable";
          callback(error);
          return;
        }
        var params = utilStringQs2(window.location.search.slice(1));
        if (params.code) {
          oauth2.bootstrapToken(params.code, callback);
        } else {
          token("oauth2_state", state);
          token("oauth2_pkce_code_verifier", pkce.code_verifier);
          window.location = url;
        }
      } else {
        oauth2.popupWindow = popup;
        popup.location = url;
      }
      window.authComplete = function(url2) {
        var params2 = utilStringQs2(url2.split("?")[1]);
        if (params2.state !== state) {
          var error2 = new Error("Invalid state");
          error2.status = "invalid-state";
          callback(error2);
          return;
        }
        _getAccessToken(params2.code, pkce.code_verifier, accessTokenDone);
        delete window.authComplete;
      };
      function accessTokenDone(err, xhr) {
        o2.done();
        if (err) {
          callback(err);
          return;
        }
        var access_token = JSON.parse(xhr.response);
        token("oauth2_access_token", access_token.access_token);
        callback(null, oauth2);
      }
    }
    function _getAccessToken(auth_code, code_verifier, accessTokenDone) {
      var url = o2.url + "/oauth2/token?" + utilQsString2({
        client_id: o2.client_id,
        redirect_uri: o2.redirect_uri,
        grant_type: "authorization_code",
        code: auth_code,
        code_verifier: code_verifier
      });
      oauth2.rawxhr("POST", url, null, null, null, accessTokenDone);
      o2.loading();
    }
    oauth2.bringPopupWindowToFront = function() {
      var broughtPopupToFront = false;
      try {
        if (oauth2.popupWindow && !oauth2.popupWindow.closed) {
          oauth2.popupWindow.focus();
          broughtPopupToFront = true;
        }
      } catch (err) {
      }
      return broughtPopupToFront;
    };
    oauth2.bootstrapToken = function(auth_code, callback) {
      var state = token("oauth2_state");
      token("oauth2_state", "");
      var params = utilStringQs2(window.location.search.slice(1));
      if (params.state !== state) {
        var error = new Error("Invalid state");
        error.status = "invalid-state";
        callback(error);
        return;
      }
      var code_verifier = token("oauth2_pkce_code_verifier");
      token("oauth2_pkce_code_verifier", "");
      _getAccessToken(auth_code, code_verifier, accessTokenDone);
      function accessTokenDone(err, xhr) {
        o2.done();
        if (err) {
          callback(err);
          return;
        }
        var access_token = JSON.parse(xhr.response);
        token("oauth2_access_token", access_token.access_token);
        callback(null, oauth2);
      }
    };
    oauth2.fetch = function(resource, options) {
      if (oauth2.authenticated()) {
        return _doFetch();
      } else {
        if (o2.auto) {
          return oauth2.authenticateAsync().then(_doFetch);
        } else {
          return Promise.reject(new Error("not authenticated"));
        }
      }
      function _doFetch() {
        options = options || {};
        if (!options.headers) {
          options.headers = {
            "Content-Type": "application/x-www-form-urlencoded"
          };
        }
        options.headers.Authorization = "Bearer " + token("oauth2_access_token");
        return fetch(resource, options);
      }
    };
    oauth2.xhr = function(options, callback) {
      if (oauth2.authenticated()) {
        return _doXHR();
      } else {
        if (o2.auto) {
          oauth2.authenticate(_doXHR);
          return;
        } else {
          callback("not authenticated", null);
          return;
        }
      }
      function _doXHR() {
        var url = options.prefix !== false ? o2.apiUrl + options.path : options.path;
        return oauth2.rawxhr(options.method, url, token("oauth2_access_token"), options.content, options.headers, done);
      }
      function done(err, xhr) {
        if (err) {
          callback(err);
        } else if (xhr.responseXML) {
          callback(err, xhr.responseXML);
        } else {
          callback(err, xhr.response);
        }
      }
    };
    oauth2.rawxhr = function(method, url, access_token, data2, headers, callback) {
      headers = headers || {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      if (access_token) {
        headers.Authorization = "Bearer " + access_token;
      }
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status !== 0) {
          if (/^20\d$/.test(xhr.status)) {
            callback(null, xhr);
          } else {
            callback(xhr, null);
          }
        }
      };
      xhr.onerror = function(e3) {
        callback(e3, null);
      };
      xhr.open(method, url, true);
      for (var h in headers) {
        xhr.setRequestHeader(h, headers[h]);
      }
      xhr.send(data2);
      return xhr;
    };
    oauth2.preauth = function(val) {
      if (val && val.access_token) {
        token("oauth2_access_token", val.access_token);
      }
      return oauth2;
    };
    oauth2.options = function(val) {
      if (!arguments.length)
        return o2;
      o2 = val;
      o2.apiUrl = o2.apiUrl || "https://api.openstreetmap.org";
      o2.url = o2.url || "https://www.openstreetmap.org";
      o2.auto = o2.auto || false;
      o2.singlepage = o2.singlepage || false;
      o2.loading = o2.loading || function() {
      };
      o2.done = o2.done || function() {
      };
      return oauth2.preauth(o2);
    };
    oauth2.options(o2);
    return oauth2;
  }
  function utilQsString2(obj) {
    return Object.keys(obj).filter(function(key) {
      return obj[key] !== void 0;
    }).sort().map(function(key) {
      return encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]);
    }).join("&");
  }
  function utilStringQs2(str) {
    var i2 = 0;
    while (i2 < str.length && (str[i2] === "?" || str[i2] === "#")) {
      i2++;
    }
    str = str.slice(i2);
    return str.split("&").reduce(function(obj, pair2) {
      var parts = pair2.split("=");
      if (parts.length === 2) {
        obj[parts[0]] = decodeURIComponent(parts[1]);
      }
      return obj;
    }, {});
  }
  function supportsWebCryptoAPI() {
    return window && window.crypto && window.crypto.getRandomValues && window.crypto.subtle && window.crypto.subtle.digest;
  }
  function _generatePkceChallenge(callback) {
    var code_verifier;
    if (supportsWebCryptoAPI()) {
      var random = window.crypto.getRandomValues(new Uint8Array(32));
      code_verifier = base64(random.buffer);
      var verifier = Uint8Array.from(Array.from(code_verifier).map(function(char) {
        return char.charCodeAt(0);
      }));
      window.crypto.subtle.digest("SHA-256", verifier).then(function(hash) {
        var code_challenge = base64(hash);
        callback({
          code_challenge: code_challenge,
          code_verifier: code_verifier,
          code_challenge_method: "S256"
        });
      });
    } else {
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
      code_verifier = "";
      for (var i2 = 0; i2 < 64; i2++) {
        code_verifier += chars[Math.floor(Math.random() * chars.length)];
      }
      callback({
        code_verifier: code_verifier,
        code_challenge: code_verifier,
        code_challenge_method: "plain"
      });
    }
  }
  function generateState() {
    var state;
    if (supportsWebCryptoAPI()) {
      var random = window.crypto.getRandomValues(new Uint8Array(32));
      state = base64(random.buffer);
    } else {
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
      state = "";
      for (var i2 = 0; i2 < 64; i2++) {
        state += chars[Math.floor(Math.random() * chars.length)];
      }
    }
    return state;
  }
  function base64(buffer) {
    return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer))).replace(/\//g, "_").replace(/\+/g, "-").replace(/[=]/g, "");
  }

  // modules/services/osm.js
  var import_rbush9 = __toModule(require_rbush_min());
  var tiler8 = new Tiler();
  var dispatch9 = dispatch_default("apiStatusChange", "authLoading", "authDone", "change", "loading", "loaded", "loadedNotes");
  var urlroot = "https://www.openstreetmap.org";
  var redirectPath = window.location.origin + window.location.pathname;
  var q = utilStringQs(window.location.hash);
  var credentialsMode = "omit";
  if (q.hasOwnProperty("osm_api_url")) {
    urlroot = q.osm_api_url;
    credentialsMode = "include";
  }
  var oauth = osmAuth({
    url: urlroot,
    client_id: window.location.hostname === "127.0.0.1" ? "oPbyNuXQIEh8ZI3zbjVWVmVyIaNB2guU6uLP2gQ3sfs" : "ZkRBVnOoBeMgwSajgG7E2bhgP5bR61knGYxsh9KKaHc",
    scope: "read_prefs write_prefs write_api read_gpx write_notes",
    redirect_uri: redirectPath + "land.html",
    loading: authLoading,
    done: authDone
  });
  var _imageryBlocklists = [/.*\.google(apis)?\..*\/(vt|kh)[\?\/].*([xyz]=.*){3}.*/];
  var _tileCache = {
    toLoad: {},
    loaded: {},
    inflight: {},
    seen: {},
    rtree: new import_rbush9.default()
  };
  var _noteCache = {
    toLoad: {},
    loaded: {},
    inflight: {},
    inflightPost: {},
    note: {},
    closed: {},
    rtree: new import_rbush9.default()
  };
  var _userCache = {
    toLoad: {},
    user: {}
  };
  var _cachedApiStatus;
  var _changeset = {};
  var _deferred = new Set();
  var _connectionID = 1;
  var _tileZoom = 16;
  var _noteZoom = 12;
  var _rateLimitError;
  var _userChangesets;
  var _userDetails;
  var _off3;
  var _maxWayNodes = 2e3;
  function authLoading() {
    dispatch9.call("authLoading");
  }
  function authDone() {
    dispatch9.call("authDone");
  }
  function abortRequest7(controllerOrXHR) {
    if (controllerOrXHR) {
      controllerOrXHR.abort();
    }
  }
  function hasInflightRequests(cache7) {
    return Object.keys(cache7.inflight).length;
  }
  function abortUnwantedRequests4(cache7, visibleTiles) {
    Object.keys(cache7.inflight).forEach(function(k) {
      if (cache7.toLoad[k])
        return;
      if (visibleTiles.find(function(tile) {
        return k === tile.id;
      }))
        return;
      abortRequest7(cache7.inflight[k]);
      delete cache7.inflight[k];
    });
  }
  function getLoc2(attrs) {
    var lon = attrs.lon && attrs.lon.value;
    var lat = attrs.lat && attrs.lat.value;
    return [parseFloat(lon), parseFloat(lat)];
  }
  function getNodes2(obj) {
    var elems = obj.getElementsByTagName("nd");
    var nodes = new Array(elems.length);
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      nodes[i2] = "n" + elems[i2].attributes.ref.value;
    }
    return nodes;
  }
  function getNodesJSON(obj) {
    var elems = obj.nodes;
    var nodes = new Array(elems.length);
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      nodes[i2] = "n" + elems[i2];
    }
    return nodes;
  }
  function getTags2(obj) {
    var elems = obj.getElementsByTagName("tag");
    var tags = {};
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      var attrs = elems[i2].attributes;
      tags[attrs.k.value] = attrs.v.value;
    }
    return tags;
  }
  function getMembers(obj) {
    var elems = obj.getElementsByTagName("member");
    var members = new Array(elems.length);
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      var attrs = elems[i2].attributes;
      members[i2] = {
        id: attrs.type.value[0] + attrs.ref.value,
        type: attrs.type.value,
        role: attrs.role.value
      };
    }
    return members;
  }
  function getMembersJSON(obj) {
    var elems = obj.members;
    var members = new Array(elems.length);
    for (var i2 = 0, l = elems.length; i2 < l; i2++) {
      var attrs = elems[i2];
      members[i2] = {
        id: attrs.type[0] + attrs.ref,
        type: attrs.type,
        role: attrs.role
      };
    }
    return members;
  }
  function getVisible2(attrs) {
    return !attrs.visible || attrs.visible.value !== "false";
  }
  function parseComments(comments) {
    var parsedComments = [];
    for (var i2 = 0; i2 < comments.length; i2++) {
      var comment = comments[i2];
      if (comment.nodeName === "comment") {
        var childNodes2 = comment.childNodes;
        var parsedComment = {};
        for (var j = 0; j < childNodes2.length; j++) {
          var node = childNodes2[j];
          var nodeName = node.nodeName;
          if (nodeName === "#text")
            continue;
          parsedComment[nodeName] = node.textContent;
          if (nodeName === "uid") {
            var uid = node.textContent;
            if (uid && !_userCache.user[uid]) {
              _userCache.toLoad[uid] = true;
            }
          }
        }
        if (parsedComment) {
          parsedComments.push(parsedComment);
        }
      }
    }
    return parsedComments;
  }
  function encodeNoteRtree(note) {
    return {
      minX: note.loc[0],
      minY: note.loc[1],
      maxX: note.loc[0],
      maxY: note.loc[1],
      data: note
    };
  }
  var jsonparsers = {
    node: function nodeData2(obj, uid) {
      return new osmNode({
        id: uid,
        visible: typeof obj.visible === "boolean" ? obj.visible : true,
        version: obj.version && obj.version.toString(),
        changeset: obj.changeset && obj.changeset.toString(),
        timestamp: obj.timestamp,
        user: obj.user,
        uid: obj.uid && obj.uid.toString(),
        loc: [parseFloat(obj.lon), parseFloat(obj.lat)],
        tags: obj.tags
      });
    },
    way: function wayData2(obj, uid) {
      return new osmWay({
        id: uid,
        visible: typeof obj.visible === "boolean" ? obj.visible : true,
        version: obj.version && obj.version.toString(),
        changeset: obj.changeset && obj.changeset.toString(),
        timestamp: obj.timestamp,
        user: obj.user,
        uid: obj.uid && obj.uid.toString(),
        tags: obj.tags,
        nodes: getNodesJSON(obj)
      });
    },
    relation: function relationData(obj, uid) {
      return new osmRelation({
        id: uid,
        visible: typeof obj.visible === "boolean" ? obj.visible : true,
        version: obj.version && obj.version.toString(),
        changeset: obj.changeset && obj.changeset.toString(),
        timestamp: obj.timestamp,
        user: obj.user,
        uid: obj.uid && obj.uid.toString(),
        tags: obj.tags,
        members: getMembersJSON(obj)
      });
    },
    user: function parseUser(obj, uid) {
      return {
        id: uid,
        display_name: obj.display_name,
        account_created: obj.account_created,
        image_url: obj.img && obj.img.href,
        changesets_count: obj.changesets && obj.changesets.count && obj.changesets.count.toString() || "0",
        active_blocks: obj.blocks && obj.blocks.received && obj.blocks.received.active && obj.blocks.received.active.toString() || "0"
      };
    }
  };
  function parseJSON(payload, callback, options) {
    options = Object.assign({
      skipSeen: true
    }, options);
    if (!payload) {
      return callback({
        message: "No JSON",
        status: -1
      });
    }
    var json2 = payload;
    if (_typeof(json2) !== "object")
      json2 = JSON.parse(payload);
    if (!json2.elements)
      return callback({
        message: "No JSON",
        status: -1
      });
    var children2 = json2.elements;
    var handle = window.requestIdleCallback(function() {
      _deferred.delete(handle);
      var results = [];
      var result6;
      for (var i2 = 0; i2 < children2.length; i2++) {
        result6 = parseChild(children2[i2]);
        if (result6)
          results.push(result6);
      }
      callback(null, results);
    });
    _deferred.add(handle);
    function parseChild(child) {
      var parser2 = jsonparsers[child.type];
      if (!parser2)
        return null;
      var uid;
      uid = osmEntity.id.fromOSM(child.type, child.id);
      if (options.skipSeen) {
        if (_tileCache.seen[uid])
          return null;
        _tileCache.seen[uid] = true;
      }
      return parser2(child, uid);
    }
  }
  function parseUserJSON(payload, callback, options) {
    options = Object.assign({
      skipSeen: true
    }, options);
    if (!payload) {
      return callback({
        message: "No JSON",
        status: -1
      });
    }
    var json2 = payload;
    if (_typeof(json2) !== "object")
      json2 = JSON.parse(payload);
    if (!json2.users && !json2.user)
      return callback({
        message: "No JSON",
        status: -1
      });
    var objs = json2.users || [json2];
    var handle = window.requestIdleCallback(function() {
      _deferred.delete(handle);
      var results = [];
      var result6;
      for (var i2 = 0; i2 < objs.length; i2++) {
        result6 = parseObj(objs[i2]);
        if (result6)
          results.push(result6);
      }
      callback(null, results);
    });
    _deferred.add(handle);
    function parseObj(obj) {
      var uid = obj.user.id && obj.user.id.toString();
      if (options.skipSeen && _userCache.user[uid]) {
        delete _userCache.toLoad[uid];
        return null;
      }
      var user = jsonparsers.user(obj.user, uid);
      _userCache.user[uid] = user;
      delete _userCache.toLoad[uid];
      return user;
    }
  }
  var parsers2 = {
    node: function nodeData3(obj, uid) {
      var attrs = obj.attributes;
      return new osmNode({
        id: uid,
        visible: getVisible2(attrs),
        version: attrs.version.value,
        changeset: attrs.changeset && attrs.changeset.value,
        timestamp: attrs.timestamp && attrs.timestamp.value,
        user: attrs.user && attrs.user.value,
        uid: attrs.uid && attrs.uid.value,
        loc: getLoc2(attrs),
        tags: getTags2(obj)
      });
    },
    way: function wayData3(obj, uid) {
      var attrs = obj.attributes;
      return new osmWay({
        id: uid,
        visible: getVisible2(attrs),
        version: attrs.version.value,
        changeset: attrs.changeset && attrs.changeset.value,
        timestamp: attrs.timestamp && attrs.timestamp.value,
        user: attrs.user && attrs.user.value,
        uid: attrs.uid && attrs.uid.value,
        tags: getTags2(obj),
        nodes: getNodes2(obj)
      });
    },
    relation: function relationData2(obj, uid) {
      var attrs = obj.attributes;
      return new osmRelation({
        id: uid,
        visible: getVisible2(attrs),
        version: attrs.version.value,
        changeset: attrs.changeset && attrs.changeset.value,
        timestamp: attrs.timestamp && attrs.timestamp.value,
        user: attrs.user && attrs.user.value,
        uid: attrs.uid && attrs.uid.value,
        tags: getTags2(obj),
        members: getMembers(obj)
      });
    },
    note: function parseNote(obj, uid) {
      var attrs = obj.attributes;
      var childNodes2 = obj.childNodes;
      var props = {};
      props.id = uid;
      props.loc = getLoc2(attrs);
      var coincident = false;
      var epsilon3 = 1e-5;
      do {
        if (coincident) {
          props.loc = vecAdd(props.loc, [epsilon3, epsilon3]);
        }
        var bbox = new Extent(props.loc).bbox();
        coincident = _noteCache.rtree.search(bbox).length;
      } while (coincident);
      for (var i2 = 0; i2 < childNodes2.length; i2++) {
        var node = childNodes2[i2];
        var nodeName = node.nodeName;
        if (nodeName === "#text")
          continue;
        if (nodeName === "comments") {
          props[nodeName] = parseComments(node.childNodes);
        } else {
          props[nodeName] = node.textContent;
        }
      }
      var note = new osmNote(props);
      var item = encodeNoteRtree(note);
      _noteCache.note[note.id] = note;
      _noteCache.rtree.insert(item);
      return note;
    },
    user: function parseUser2(obj, uid) {
      var attrs = obj.attributes;
      var user = {
        id: uid,
        display_name: attrs.display_name && attrs.display_name.value,
        account_created: attrs.account_created && attrs.account_created.value,
        changesets_count: "0",
        active_blocks: "0"
      };
      var img = obj.getElementsByTagName("img");
      if (img && img[0] && img[0].getAttribute("href")) {
        user.image_url = img[0].getAttribute("href");
      }
      var changesets = obj.getElementsByTagName("changesets");
      if (changesets && changesets[0] && changesets[0].getAttribute("count")) {
        user.changesets_count = changesets[0].getAttribute("count");
      }
      var blocks = obj.getElementsByTagName("blocks");
      if (blocks && blocks[0]) {
        var received = blocks[0].getElementsByTagName("received");
        if (received && received[0] && received[0].getAttribute("active")) {
          user.active_blocks = received[0].getAttribute("active");
        }
      }
      _userCache.user[uid] = user;
      delete _userCache.toLoad[uid];
      return user;
    }
  };
  function parseXML2(xml, callback, options) {
    options = Object.assign({
      skipSeen: true
    }, options);
    if (!xml || !xml.childNodes) {
      return callback({
        message: "No XML",
        status: -1
      });
    }
    var root3 = xml.childNodes[0];
    var children2 = root3.childNodes;
    var handle = window.requestIdleCallback(function() {
      _deferred.delete(handle);
      var results = [];
      var result6;
      for (var i2 = 0; i2 < children2.length; i2++) {
        result6 = parseChild(children2[i2]);
        if (result6)
          results.push(result6);
      }
      callback(null, results);
    });
    _deferred.add(handle);
    function parseChild(child) {
      var parser2 = parsers2[child.nodeName];
      if (!parser2)
        return null;
      var uid;
      if (child.nodeName === "user") {
        uid = child.attributes.id.value;
        if (options.skipSeen && _userCache.user[uid]) {
          delete _userCache.toLoad[uid];
          return null;
        }
      } else if (child.nodeName === "note") {
        uid = child.getElementsByTagName("id")[0].textContent;
      } else {
        uid = osmEntity.id.fromOSM(child.nodeName, child.attributes.id.value);
        if (options.skipSeen) {
          if (_tileCache.seen[uid])
            return null;
          _tileCache.seen[uid] = true;
        }
      }
      return parser2(child, uid);
    }
  }
  function updateRtree4(item, replace2) {
    _noteCache.rtree.remove(item, function isEql(a, b2) {
      return a.data.id === b2.data.id;
    });
    if (replace2) {
      _noteCache.rtree.insert(item);
    }
  }
  function wrapcb(thisArg, callback, cid) {
    return function(err, result6) {
      if (err) {
        if (err.status === 400 || err.status === 401 || err.status === 403) {
          thisArg.logout();
        }
        return callback.call(thisArg, err);
      } else if (thisArg.getConnectionId() !== cid) {
        return callback.call(thisArg, {
          message: "Connection Switched",
          status: -1
        });
      } else {
        return callback.call(thisArg, err, result6);
      }
    };
  }
  var osm_default = {
    init: function init12() {
      utilRebind(this, dispatch9, "on");
      this.userDetails(function(_err, data2) {
        return window.__user = data2;
      });
    },
    reset: function reset10() {
      Array.from(_deferred).forEach(function(handle) {
        window.cancelIdleCallback(handle);
        _deferred.delete(handle);
      });
      _connectionID++;
      _userChangesets = void 0;
      _userDetails = void 0;
      _rateLimitError = void 0;
      Object.values(_tileCache.inflight).forEach(abortRequest7);
      Object.values(_noteCache.inflight).forEach(abortRequest7);
      Object.values(_noteCache.inflightPost).forEach(abortRequest7);
      if (_changeset.inflight)
        abortRequest7(_changeset.inflight);
      _tileCache = {
        toLoad: {},
        loaded: {},
        inflight: {},
        seen: {},
        rtree: new import_rbush9.default()
      };
      _noteCache = {
        toLoad: {},
        loaded: {},
        inflight: {},
        inflightPost: {},
        note: {},
        closed: {},
        rtree: new import_rbush9.default()
      };
      _userCache = {
        toLoad: {},
        user: {}
      };
      _cachedApiStatus = void 0;
      _changeset = {};
      return this;
    },
    getConnectionId: function getConnectionId() {
      return _connectionID;
    },
    changesetURL: function changesetURL(changesetID) {
      return urlroot + "/changeset/" + changesetID;
    },
    changesetsURL: function changesetsURL(center, zoom) {
      var precision2 = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));
      return urlroot + "/history#map=" + Math.floor(zoom) + "/" + center[1].toFixed(precision2) + "/" + center[0].toFixed(precision2);
    },
    entityURL: function entityURL(entity2) {
      return urlroot + "/" + entity2.type + "/" + entity2.osmId();
    },
    historyURL: function historyURL(entity2) {
      return urlroot + "/" + entity2.type + "/" + entity2.osmId() + "/history";
    },
    userURL: function userURL(username) {
      return urlroot + "/user/" + username;
    },
    noteURL: function noteURL(note) {
      return urlroot + "/note/" + note.id;
    },
    noteReportURL: function noteReportURL(note) {
      return urlroot + "/reports/new?reportable_type=Note&reportable_id=" + note.id;
    },
    loadFromAPI: function loadFromAPI(path, callback, options) {
      options = Object.assign({
        skipSeen: true
      }, options);
      var that = this;
      var cid = _connectionID;
      function done(err, payload) {
        if (that.getConnectionId() !== cid) {
          if (callback)
            callback({
              message: "Connection Switched",
              status: -1
            });
          return;
        }
        var isAuthenticated = that.authenticated();
        if (isAuthenticated && err && err.status && (err.status === 400 || err.status === 401 || err.status === 403)) {
          that.logout();
          that.loadFromAPI(path, callback, options);
        } else {
          if (!isAuthenticated && !_rateLimitError && err && err.status && (err.status === 509 || err.status === 429)) {
            _rateLimitError = err;
            dispatch9.call("change");
            that.reloadApiStatus();
          } else if (err && _cachedApiStatus === "online" || !err && _cachedApiStatus !== "online") {
            that.reloadApiStatus();
          }
          if (callback) {
            if (err) {
              return callback(err);
            } else {
              if (path.indexOf(".json") !== -1) {
                return parseJSON(payload, callback, options);
              } else {
                return parseXML2(payload, callback, options);
              }
            }
          }
        }
      }
      if (this.authenticated()) {
        return oauth.xhr({
          method: "GET",
          path: path
        }, done);
      } else {
        var url = urlroot + path;
        var controller = new AbortController();
        var fn;
        if (path.indexOf(".json") !== -1) {
          fn = json_default;
        } else {
          fn = xml_default;
        }
        fn(url, {
          signal: controller.signal
        }).then(function(data2) {
          done(null, data2);
        }).catch(function(err) {
          if (err.name === "AbortError")
            return;
          var match = err.message.match(/^\d{3}/);
          if (match) {
            done({
              status: +match[0],
              statusText: err.message
            });
          } else {
            done(err.message);
          }
        });
        return controller;
      }
    },
    loadEntity: function loadEntity(id2, callback) {
      var type3 = osmEntity.id.type(id2);
      var osmID = osmEntity.id.toOSM(id2);
      var options = {
        skipSeen: false
      };
      this.loadFromAPI("/api/0.6/" + type3 + "/" + osmID + (type3 !== "node" ? "/full" : "") + ".json", function(err, entities) {
        if (callback)
          callback(err, {
            data: entities
          });
      }, options);
    },
    loadEntityVersion: function loadEntityVersion(id2, version, callback) {
      var type3 = osmEntity.id.type(id2);
      var osmID = osmEntity.id.toOSM(id2);
      var options = {
        skipSeen: false
      };
      this.loadFromAPI("/api/0.6/" + type3 + "/" + osmID + "/" + version + ".json", function(err, entities) {
        if (callback)
          callback(err, {
            data: entities
          });
      }, options);
    },
    loadEntityRelations: function loadEntityRelations(id2, callback) {
      var type3 = osmEntity.id.type(id2);
      var osmID = osmEntity.id.toOSM(id2);
      var options = {
        skipSeen: false
      };
      this.loadFromAPI("/api/0.6/" + type3 + "/" + osmID + "/relations.json", function(err, entities) {
        if (callback)
          callback(err, {
            data: entities
          });
      }, options);
    },
    loadMultiple: function loadMultiple(ids, callback) {
      var that = this;
      var groups = utilArrayGroupBy(utilArrayUniq(ids), osmEntity.id.type);
      Object.keys(groups).forEach(function(k) {
        var type3 = k + "s";
        var osmIDs = groups[k].map(function(id2) {
          return osmEntity.id.toOSM(id2);
        });
        var options = {
          skipSeen: false
        };
        utilArrayChunk(osmIDs, 150).forEach(function(arr) {
          that.loadFromAPI("/api/0.6/" + type3 + ".json?" + type3 + "=" + arr.join(), function(err, entities) {
            if (callback)
              callback(err, {
                data: entities
              });
          }, options);
        });
      });
    },
    putChangeset: function putChangeset(changeset, changes, callback) {
      var cid = _connectionID;
      if (_changeset.inflight) {
        return callback({
          message: "Changeset already inflight",
          status: -2
        }, changeset);
      } else if (_changeset.open) {
        return createdChangeset.call(this, null, _changeset.open);
      } else {
        var options = {
          method: "PUT",
          path: "/api/0.6/changeset/create",
          headers: {
            "Content-Type": "text/xml"
          },
          content: JXON.stringify(changeset.asJXON())
        };
        _changeset.inflight = oauth.xhr(options, wrapcb(this, createdChangeset, cid));
      }
      function createdChangeset(err, changesetID) {
        _changeset.inflight = null;
        if (err) {
          return callback(err, changeset);
        }
        _changeset.open = changesetID;
        changeset = changeset.update({
          id: changesetID
        });
        var options2 = {
          method: "POST",
          path: "/api/0.6/changeset/" + changesetID + "/upload",
          headers: {
            "Content-Type": "text/xml"
          },
          content: JXON.stringify(changeset.osmChangeJXON(changes))
        };
        _changeset.inflight = oauth.xhr(options2, wrapcb(this, uploadedChangeset, cid));
      }
      function uploadedChangeset(err) {
        _changeset.inflight = null;
        if (err)
          return callback(err, changeset);
        window.setTimeout(function() {
          callback(null, changeset);
        }, 2500);
        _changeset.open = null;
        if (this.getConnectionId() === cid) {
          oauth.xhr({
            method: "PUT",
            path: "/api/0.6/changeset/" + changeset.id + "/close",
            headers: {
              "Content-Type": "text/xml"
            }
          }, function() {
            return true;
          });
        }
      }
    },
    loadUsers: function loadUsers(uids, callback) {
      var toLoad = [];
      var cached = [];
      utilArrayUniq(uids).forEach(function(uid) {
        if (_userCache.user[uid]) {
          delete _userCache.toLoad[uid];
          cached.push(_userCache.user[uid]);
        } else {
          toLoad.push(uid);
        }
      });
      if (cached.length || !this.authenticated()) {
        callback(void 0, cached);
        if (!this.authenticated())
          return;
      }
      utilArrayChunk(toLoad, 150).forEach(function(arr) {
        oauth.xhr({
          method: "GET",
          path: "/api/0.6/users.json?users=" + arr.join()
        }, wrapcb(this, done, _connectionID));
      }.bind(this));
      function done(err, payload) {
        if (err)
          return callback(err);
        var options = {
          skipSeen: true
        };
        return parseUserJSON(payload, function(err2, results) {
          if (err2)
            return callback(err2);
          return callback(void 0, results);
        }, options);
      }
    },
    loadUser: function loadUser(uid, callback) {
      if (_userCache.user[uid] || !this.authenticated()) {
        delete _userCache.toLoad[uid];
        return callback(void 0, _userCache.user[uid]);
      }
      oauth.xhr({
        method: "GET",
        path: "/api/0.6/user/" + uid + ".json"
      }, wrapcb(this, done, _connectionID));
      function done(err, payload) {
        if (err)
          return callback(err);
        var options = {
          skipSeen: true
        };
        return parseUserJSON(payload, function(err2, results) {
          if (err2)
            return callback(err2);
          return callback(void 0, results[0]);
        }, options);
      }
    },
    userDetails: function userDetails(callback) {
      if (_userDetails) {
        return callback(void 0, _userDetails);
      }
      oauth.xhr({
        method: "GET",
        path: "/api/0.6/user/details.json"
      }, wrapcb(this, done, _connectionID));
      function done(err, payload) {
        if (err)
          return callback(err);
        var options = {
          skipSeen: false
        };
        return parseUserJSON(payload, function(err2, results) {
          if (err2)
            return callback(err2);
          _userDetails = results[0];
          return callback(void 0, _userDetails);
        }, options);
      }
    },
    userChangesets: function userChangesets(callback) {
      if (_userChangesets) {
        return callback(void 0, _userChangesets);
      }
      this.userDetails(wrapcb(this, gotDetails, _connectionID));
      function gotDetails(err, user) {
        if (err) {
          return callback(err);
        }
        oauth.xhr({
          method: "GET",
          path: "/api/0.6/changesets?user=" + user.id
        }, wrapcb(this, done, _connectionID));
      }
      function done(err, xml) {
        if (err) {
          return callback(err);
        }
        _userChangesets = Array.prototype.map.call(xml.getElementsByTagName("changeset"), function(changeset) {
          return {
            tags: getTags2(changeset)
          };
        }).filter(function(changeset) {
          var comment = changeset.tags.comment;
          return comment && comment !== "";
        });
        return callback(void 0, _userChangesets);
      }
    },
    status: function status2(callback) {
      var url = urlroot + "/api/capabilities";
      var errback = wrapcb(this, done, _connectionID);
      xml_default(url, {
        credentials: credentialsMode
      }).then(function(data2) {
        errback(null, data2);
      }).catch(function(err) {
        errback(err.message);
      });
      function done(err, xml) {
        if (err) {
          return callback(err, null);
        }
        var elements = xml.getElementsByTagName("blacklist");
        var regexes = [];
        for (var i2 = 0; i2 < elements.length; i2++) {
          var regexString = elements[i2].getAttribute("regex");
          if (regexString) {
            try {
              var regex = new RegExp(regexString);
              regexes.push(regex);
            } catch (e3) {
            }
          }
        }
        if (regexes.length) {
          _imageryBlocklists = regexes;
        }
        if (_rateLimitError) {
          return callback(_rateLimitError, "rateLimited");
        } else {
          var waynodes = xml.getElementsByTagName("waynodes");
          var maxWayNodes2 = waynodes.length && parseInt(waynodes[0].getAttribute("maximum"), 10);
          if (maxWayNodes2 && isFinite(maxWayNodes2))
            _maxWayNodes = maxWayNodes2;
          var apiStatus = xml.getElementsByTagName("status");
          var val = apiStatus[0].getAttribute("api");
          return callback(void 0, val);
        }
      }
    },
    reloadApiStatus: function reloadApiStatus() {
      if (!this.throttledReloadApiStatus) {
        var that = this;
        this.throttledReloadApiStatus = throttle_default(function() {
          that.status(function(err, status3) {
            if (status3 !== _cachedApiStatus) {
              _cachedApiStatus = status3;
              dispatch9.call("apiStatusChange", that, err, status3);
            }
          });
        }, 500);
      }
      this.throttledReloadApiStatus();
    },
    maxWayNodes: function maxWayNodes() {
      return _maxWayNodes;
    },
    loadTiles: function loadTiles5(projection2, callback) {
      if (_off3)
        return;
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler8.zoomRange(_tileZoom).getTiles(proj).tiles;
      var hadRequests = hasInflightRequests(_tileCache);
      abortUnwantedRequests4(_tileCache, tiles);
      if (hadRequests && !hasInflightRequests(_tileCache)) {
        dispatch9.call("loaded");
      }
      tiles.forEach(function(tile) {
        this.loadTile(tile, callback);
      }, this);
    },
    loadTile: function loadTile2(tile, callback) {
      if (_off3)
        return;
      if (_tileCache.loaded[tile.id] || _tileCache.inflight[tile.id])
        return;
      if (!hasInflightRequests(_tileCache)) {
        dispatch9.call("loading");
      }
      var path = "/api/0.6/map.json?bbox=";
      var options = {
        skipSeen: true
      };
      _tileCache.inflight[tile.id] = this.loadFromAPI(path + tile.wgs84Extent.toParam(), tileCallback, options);
      function tileCallback(err, parsed) {
        delete _tileCache.inflight[tile.id];
        if (!err) {
          delete _tileCache.toLoad[tile.id];
          _tileCache.loaded[tile.id] = true;
          var bbox = tile.wgs84Extent.bbox();
          bbox.id = tile.id;
          _tileCache.rtree.insert(bbox);
        }
        if (callback) {
          callback(err, Object.assign({
            data: parsed
          }, tile));
        }
        if (!hasInflightRequests(_tileCache)) {
          dispatch9.call("loaded");
        }
      }
    },
    isDataLoaded: function isDataLoaded(loc) {
      var bbox = {
        minX: loc[0],
        minY: loc[1],
        maxX: loc[0],
        maxY: loc[1]
      };
      return _tileCache.rtree.collides(bbox);
    },
    loadTileAtLoc: function loadTileAtLoc(loc, callback) {
      if (Object.keys(_tileCache.toLoad).length > 50)
        return;
      var k = geoZoomToScale(_tileZoom + 1);
      var offset = new Projection().scale(k).project(loc);
      var proj = new Projection().transform({
        k: k,
        x: -offset[0],
        y: -offset[1]
      });
      var tiles = tiler8.zoomRange(_tileZoom).getTiles(proj).tiles;
      tiles.forEach(function(tile) {
        if (_tileCache.toLoad[tile.id] || _tileCache.loaded[tile.id] || _tileCache.inflight[tile.id])
          return;
        _tileCache.toLoad[tile.id] = true;
        this.loadTile(tile, callback);
      }, this);
    },
    loadNotes: function loadNotes(projection2, noteOptions) {
      noteOptions = Object.assign({
        limit: 1e4,
        closed: 7
      }, noteOptions);
      if (_off3)
        return;
      var that = this;
      var path = "/api/0.6/notes?limit=" + noteOptions.limit + "&closed=" + noteOptions.closed + "&bbox=";
      var throttleLoadUsers = throttle_default(function() {
        var uids = Object.keys(_userCache.toLoad);
        if (!uids.length)
          return;
        that.loadUsers(uids, function() {
        });
      }, 750);
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler8.zoomRange(_noteZoom).getTiles(proj).tiles;
      abortUnwantedRequests4(_noteCache, tiles);
      tiles.forEach(function(tile) {
        if (_noteCache.loaded[tile.id] || _noteCache.inflight[tile.id])
          return;
        var options = {
          skipSeen: false
        };
        _noteCache.inflight[tile.id] = that.loadFromAPI(path + tile.wgs84Extent.toParam(), function(err) {
          delete _noteCache.inflight[tile.id];
          if (!err) {
            _noteCache.loaded[tile.id] = true;
          }
          throttleLoadUsers();
          dispatch9.call("loadedNotes");
        }, options);
      });
    },
    postNoteCreate: function postNoteCreate(note, callback) {
      if (!this.authenticated()) {
        return callback({
          message: "Not Authenticated",
          status: -3
        }, note);
      }
      if (_noteCache.inflightPost[note.id]) {
        return callback({
          message: "Note update already inflight",
          status: -2
        }, note);
      }
      if (!note.loc[0] || !note.loc[1] || !note.newComment)
        return;
      var comment = note.newComment;
      if (note.newCategory && note.newCategory !== "None") {
        comment += " #" + note.newCategory;
      }
      var path = "/api/0.6/notes?" + utilQsString({
        lon: note.loc[0],
        lat: note.loc[1],
        text: comment
      });
      _noteCache.inflightPost[note.id] = oauth.xhr({
        method: "POST",
        path: path
      }, wrapcb(this, done, _connectionID));
      function done(err, xml) {
        delete _noteCache.inflightPost[note.id];
        if (err) {
          return callback(err);
        }
        this.removeNote(note);
        var options = {
          skipSeen: false
        };
        return parseXML2(xml, function(err2, results) {
          if (err2) {
            return callback(err2);
          } else {
            return callback(void 0, results[0]);
          }
        }, options);
      }
    },
    postNoteUpdate: function postNoteUpdate(note, newStatus, callback) {
      if (!this.authenticated()) {
        return callback({
          message: "Not Authenticated",
          status: -3
        }, note);
      }
      if (_noteCache.inflightPost[note.id]) {
        return callback({
          message: "Note update already inflight",
          status: -2
        }, note);
      }
      var action;
      if (note.status !== "closed" && newStatus === "closed") {
        action = "close";
      } else if (note.status !== "open" && newStatus === "open") {
        action = "reopen";
      } else {
        action = "comment";
        if (!note.newComment)
          return;
      }
      var path = "/api/0.6/notes/" + note.id + "/" + action;
      if (note.newComment) {
        path += "?" + utilQsString({
          text: note.newComment
        });
      }
      _noteCache.inflightPost[note.id] = oauth.xhr({
        method: "POST",
        path: path
      }, wrapcb(this, done, _connectionID));
      function done(err, xml) {
        delete _noteCache.inflightPost[note.id];
        if (err) {
          return callback(err);
        }
        this.removeNote(note);
        if (action === "close") {
          _noteCache.closed[note.id] = true;
        } else if (action === "reopen") {
          delete _noteCache.closed[note.id];
        }
        var options = {
          skipSeen: false
        };
        return parseXML2(xml, function(err2, results) {
          if (err2) {
            return callback(err2);
          } else {
            return callback(void 0, results[0]);
          }
        }, options);
      }
    },
    getUrlRoot: function getUrlRoot() {
      return urlroot;
    },
    switch: function _switch(newOptions) {
      urlroot = newOptions.url;
      var oldOptions = utilObjectOmit(oauth.options(), "access_token");
      oauth.options(Object.assign(oldOptions, newOptions));
      this.reset();
      this.userChangesets(function() {
      });
      dispatch9.call("change");
      return this;
    },
    toggle: function toggle3(val) {
      _off3 = !val;
      return this;
    },
    isChangesetInflight: function isChangesetInflight() {
      return !!_changeset.inflight;
    },
    caches: function caches(obj) {
      function cloneCache(source) {
        var target = {};
        Object.keys(source).forEach(function(k) {
          if (k === "rtree") {
            target.rtree = new import_rbush9.default().fromJSON(source.rtree.toJSON());
          } else if (k === "note") {
            target.note = {};
            Object.keys(source.note).forEach(function(id2) {
              target.note[id2] = osmNote(source.note[id2]);
            });
          } else {
            target[k] = JSON.parse(JSON.stringify(source[k]));
          }
        });
        return target;
      }
      if (!arguments.length) {
        return {
          tile: cloneCache(_tileCache),
          note: cloneCache(_noteCache),
          user: cloneCache(_userCache)
        };
      }
      if (obj === "get") {
        return {
          tile: _tileCache,
          note: _noteCache,
          user: _userCache
        };
      }
      if (obj.tile) {
        _tileCache = obj.tile;
        _tileCache.inflight = {};
      }
      if (obj.note) {
        _noteCache = obj.note;
        _noteCache.inflight = {};
        _noteCache.inflightPost = {};
      }
      if (obj.user) {
        _userCache = obj.user;
      }
      return this;
    },
    logout: function logout() {
      _userChangesets = void 0;
      _userDetails = void 0;
      oauth.logout();
      dispatch9.call("change");
      return this;
    },
    authenticated: function authenticated() {
      return oauth.authenticated();
    },
    authenticate: function authenticate(callback) {
      var that = this;
      var cid = _connectionID;
      _userChangesets = void 0;
      _userDetails = void 0;
      function done(err, res) {
        if (err) {
          if (callback)
            callback(err);
          return;
        }
        if (that.getConnectionId() !== cid) {
          if (callback)
            callback({
              message: "Connection Switched",
              status: -1
            });
          return;
        }
        _rateLimitError = void 0;
        dispatch9.call("change");
        if (callback)
          callback(err, res);
        that.userChangesets(function() {
        });
      }
      oauth.authenticate(done);
    },
    imageryBlocklists: function imageryBlocklists() {
      return _imageryBlocklists;
    },
    tileZoom: function tileZoom2(val) {
      if (!arguments.length)
        return _tileZoom;
      _tileZoom = val;
      return this;
    },
    notes: function notes(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      return _noteCache.rtree.search(bbox).map(function(d) {
        return d.data;
      });
    },
    getNote: function getNote(id2) {
      return _noteCache.note[id2];
    },
    removeNote: function removeNote(note) {
      if (!(note instanceof osmNote) || !note.id)
        return;
      delete _noteCache.note[note.id];
      updateRtree4(encodeNoteRtree(note), false);
    },
    replaceNote: function replaceNote(note) {
      if (!(note instanceof osmNote) || !note.id)
        return;
      _noteCache.note[note.id] = note;
      updateRtree4(encodeNoteRtree(note), true);
      return note;
    },
    getClosedIDs: function getClosedIDs2() {
      return Object.keys(_noteCache.closed).sort();
    }
  };

  // modules/services/osm_wikibase.js
  var _apibase = "https://wiki.openstreetmap.org/w/api.php";
  var _inflight2 = {};
  var _wikibaseCache = {};
  var _localeIDs = {
    en: false
  };
  var debouncedRequest = debounce_default(request, 500, {
    leading: false
  });
  function request(url, callback) {
    if (_inflight2[url])
      return;
    var controller = new AbortController();
    _inflight2[url] = controller;
    json_default(url, {
      signal: controller.signal
    }).then(function(result6) {
      delete _inflight2[url];
      if (callback)
        callback(null, result6);
    }).catch(function(err) {
      delete _inflight2[url];
      if (err.name === "AbortError")
        return;
      if (callback)
        callback(err.message);
    });
  }
  var osm_wikibase_default = {
    init: function init13() {
      _inflight2 = {};
      _wikibaseCache = {};
      _localeIDs = {};
    },
    reset: function reset11() {
      Object.values(_inflight2).forEach(function(controller) {
        controller.abort();
      });
      _inflight2 = {};
    },
    claimToValue: function claimToValue(entity2, property, langCode) {
      if (!entity2.claims[property])
        return void 0;
      var locale2 = _localeIDs[langCode];
      var preferredPick, localePick;
      entity2.claims[property].forEach(function(stmt) {
        if (!preferredPick && stmt.rank === "preferred") {
          preferredPick = stmt;
        }
        if (locale2 && stmt.qualifiers && stmt.qualifiers.P26 && stmt.qualifiers.P26[0].datavalue.value.id === locale2) {
          localePick = stmt;
        }
      });
      var result6 = localePick || preferredPick;
      if (result6) {
        var datavalue = result6.mainsnak.datavalue;
        return datavalue.type === "wikibase-entityid" ? datavalue.value.id : datavalue.value;
      } else {
        return void 0;
      }
    },
    monolingualClaimToValueObj: function monolingualClaimToValueObj(entity2, property) {
      if (!entity2 || !entity2.claims[property])
        return void 0;
      return entity2.claims[property].reduce(function(acc, obj) {
        var value2 = obj.mainsnak.datavalue.value;
        acc[value2.language] = value2.text;
        return acc;
      }, {});
    },
    toSitelink: function toSitelink(key, value2) {
      var result6 = value2 ? "Tag:" + key + "=" + value2 : "Key:" + key;
      return result6.replace(/_/g, " ").trim();
    },
    getEntity: function getEntity(params, callback) {
      var doRequest = params.debounce ? debouncedRequest : request;
      var that = this;
      var titles = [];
      var result6 = {};
      var rtypeSitelink = params.key === "type" && params.value ? ("Relation:" + params.value).replace(/_/g, " ").trim() : false;
      var keySitelink = params.key ? this.toSitelink(params.key) : false;
      var tagSitelink = params.key && params.value ? this.toSitelink(params.key, params.value) : false;
      var localeSitelink;
      if (params.langCodes) {
        params.langCodes.forEach(function(langCode) {
          if (_localeIDs[langCode] === void 0) {
            localeSitelink = ("Locale:" + langCode).replace(/_/g, " ").trim();
            titles.push(localeSitelink);
          }
        });
      }
      if (rtypeSitelink) {
        if (_wikibaseCache[rtypeSitelink]) {
          result6.rtype = _wikibaseCache[rtypeSitelink];
        } else {
          titles.push(rtypeSitelink);
        }
      }
      if (keySitelink) {
        if (_wikibaseCache[keySitelink]) {
          result6.key = _wikibaseCache[keySitelink];
        } else {
          titles.push(keySitelink);
        }
      }
      if (tagSitelink) {
        if (_wikibaseCache[tagSitelink]) {
          result6.tag = _wikibaseCache[tagSitelink];
        } else {
          titles.push(tagSitelink);
        }
      }
      if (!titles.length) {
        return callback(null, result6);
      }
      var obj = {
        action: "wbgetentities",
        sites: "wiki",
        titles: titles.join("|"),
        languages: params.langCodes.join("|"),
        languagefallback: 1,
        origin: "*",
        format: "json"
      };
      var url = _apibase + "?" + utilQsString(obj);
      doRequest(url, function(err, d) {
        if (err) {
          callback(err);
        } else if (!d.success || d.error) {
          callback(d.error.messages.map(function(v) {
            return v.html["*"];
          }).join("<br>"));
        } else {
          var localeID = false;
          Object.values(d.entities).forEach(function(res) {
            if (res.missing !== "") {
              var title = res.sitelinks.wiki.title;
              if (title === rtypeSitelink) {
                _wikibaseCache[rtypeSitelink] = res;
                result6.rtype = res;
              } else if (title === keySitelink) {
                _wikibaseCache[keySitelink] = res;
                result6.key = res;
              } else if (title === tagSitelink) {
                _wikibaseCache[tagSitelink] = res;
                result6.tag = res;
              } else if (title === localeSitelink) {
                localeID = res.id;
              } else {
                console.log("Unexpected title " + title);
              }
            }
          });
          if (localeSitelink) {
            that.addLocale(params.langCodes[0], localeID);
          }
          callback(null, result6);
        }
      });
    },
    getDocs: function getDocs(params, callback) {
      var that = this;
      var langCodes = _mainLocalizer.localeCodes().map(function(code) {
        return code.toLowerCase();
      });
      params.langCodes = langCodes;
      this.getEntity(params, function(err, data2) {
        if (err) {
          callback(err);
          return;
        }
        var entity2 = data2.rtype || data2.tag || data2.key;
        if (!entity2) {
          callback("No entity");
          return;
        }
        var i2;
        var description;
        for (i2 in langCodes) {
          var _code = langCodes[i2];
          if (entity2.descriptions[_code] && entity2.descriptions[_code].language === _code) {
            description = entity2.descriptions[_code];
            break;
          }
        }
        if (!description && Object.values(entity2.descriptions).length)
          description = Object.values(entity2.descriptions)[0];
        var result6 = {
          title: entity2.title,
          description: description ? description.value : "",
          descriptionLocaleCode: description ? description.language : "",
          editURL: "https://wiki.openstreetmap.org/wiki/" + entity2.title
        };
        if (entity2.claims) {
          var imageroot;
          var image = that.claimToValue(entity2, "P4", langCodes[0]);
          if (image) {
            imageroot = "https://commons.wikimedia.org/w/index.php";
          } else {
            image = that.claimToValue(entity2, "P28", langCodes[0]);
            if (image) {
              imageroot = "https://wiki.openstreetmap.org/w/index.php";
            }
          }
          if (imageroot && image) {
            result6.imageURL = imageroot + "?" + utilQsString({
              title: "Special:Redirect/file/" + image,
              width: 400
            });
          }
        }
        var rtypeWiki = that.monolingualClaimToValueObj(data2.rtype, "P31");
        var tagWiki = that.monolingualClaimToValueObj(data2.tag, "P31");
        var keyWiki = that.monolingualClaimToValueObj(data2.key, "P31");
        var wikis = [rtypeWiki, tagWiki, keyWiki];
        for (i2 in wikis) {
          var wiki = wikis[i2];
          for (var j in langCodes) {
            var code = langCodes[j];
            var referenceId = langCodes[0].split("-")[0] !== "en" && code.split("-")[0] === "en" ? "inspector.wiki_en_reference" : "inspector.wiki_reference";
            var info = getWikiInfo(wiki, code, referenceId);
            if (info) {
              result6.wiki = info;
              break;
            }
          }
          if (result6.wiki)
            break;
        }
        callback(null, result6);
        function getWikiInfo(wiki2, langCode, tKey) {
          if (wiki2 && wiki2[langCode]) {
            return {
              title: wiki2[langCode],
              text: tKey,
              url: "https://wiki.openstreetmap.org/wiki/" + wiki2[langCode]
            };
          }
        }
      });
    },
    addLocale: function addLocale(langCode, qid) {
      _localeIDs[langCode] = qid;
    },
    apibase: function apibase3(val) {
      if (!arguments.length)
        return _apibase;
      _apibase = val;
      return this;
    }
  };

  // modules/services/streetside.js
  var import_rbush10 = __toModule(require_rbush_min());

  // modules/util/jsonp_request.js
  var jsonpCache = {};
  window.jsonpCache = jsonpCache;
  function jsonpRequest(url, callback) {
    var request3 = {
      abort: function abort() {
      }
    };
    if (window.JSONP_FIX) {
      if (window.JSONP_DELAY === 0) {
        callback(window.JSONP_FIX);
      } else {
        var t = window.setTimeout(function() {
          callback(window.JSONP_FIX);
        }, window.JSONP_DELAY || 0);
        request3.abort = function() {
          window.clearTimeout(t);
        };
      }
      return request3;
    }
    function rand() {
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      var c2 = "";
      var i2 = -1;
      while (++i2 < 15) {
        c2 += chars.charAt(Math.floor(Math.random() * 52));
      }
      return c2;
    }
    function create2(url2) {
      var e3 = url2.match(/callback=(\w+)/);
      var c2 = e3 ? e3[1] : rand();
      jsonpCache[c2] = function(data2) {
        if (jsonpCache[c2]) {
          callback(data2);
        }
        finalize();
      };
      function finalize() {
        delete jsonpCache[c2];
        script.remove();
      }
      request3.abort = finalize;
      return "jsonpCache." + c2;
    }
    var cb = create2(url);
    var script = select_default2("head").append("script").attr("type", "text/javascript").attr("src", url.replace(/(\{|%7B)callback(\}|%7D)/, cb));
    return request3;
  }

  // modules/services/streetside.js
  var bubbleApi = "https://dev.virtualearth.net/mapcontrol/HumanScaleServices/GetBubbles.ashx?";
  var streetsideImagesApi = "https://t.ssl.ak.tiles.virtualearth.net/tiles/";
  var bubbleAppKey = "AuftgJsO0Xs8Ts4M1xZUQJQXJNsvmh3IV8DkNieCiy3tCwCUMq76-WpkrBtNAuEm";
  var pannellumViewerCSS = "pannellum-streetside/pannellum.css";
  var pannellumViewerJS = "pannellum-streetside/pannellum.js";
  var maxResults2 = 2e3;
  var TILEZOOM6 = 16.5;
  var tiler9 = new Tiler().zoomRange(TILEZOOM6).skipNullIsland(true);
  var dispatch10 = dispatch_default("loadedImages", "viewerChanged");
  var minHfov = 10;
  var maxHfov = 90;
  var defaultHfov = 45;
  var _hires = false;
  var _resolution = 512;
  var _currScene = 0;
  var _ssCache;
  var _pannellumViewer;
  var _sceneOptions = {
    showFullscreenCtrl: false,
    autoLoad: true,
    compass: true,
    yaw: 0,
    minHfov: minHfov,
    maxHfov: maxHfov,
    hfov: defaultHfov,
    type: "cubemap",
    cubeMap: []
  };
  var _loadViewerPromise3;
  function abortRequest8(i2) {
    i2.abort();
  }
  function localeTimestamp(s) {
    if (!s)
      return null;
    var options = {
      day: "numeric",
      month: "short",
      year: "numeric"
    };
    var d = new Date(s);
    if (isNaN(d.getTime()))
      return null;
    return d.toLocaleString(_mainLocalizer.localeCode(), options);
  }
  function loadTiles6(which, url, projection2, margin) {
    var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
    var tiles = tiler9.zoomRange(TILEZOOM6).margin(margin).getTiles(proj).tiles;
    var cache7 = _ssCache[which];
    Object.keys(cache7.inflight).forEach(function(k) {
      var wanted = tiles.find(function(tile) {
        return k.indexOf(tile.id + ",") === 0;
      });
      if (!wanted) {
        abortRequest8(cache7.inflight[k]);
        delete cache7.inflight[k];
      }
    });
    tiles.forEach(function(tile) {
      return loadNextTilePage2(which, url, tile);
    });
  }
  function loadNextTilePage2(which, url, tile) {
    var cache7 = _ssCache[which];
    var nextPage = cache7.nextPage[tile.id] || 0;
    var id2 = tile.id + "," + String(nextPage);
    if (cache7.loaded[id2] || cache7.inflight[id2])
      return;
    cache7.inflight[id2] = getBubbles(url, tile, function(bubbles2) {
      cache7.loaded[id2] = true;
      delete cache7.inflight[id2];
      if (!bubbles2)
        return;
      bubbles2.shift();
      var features2 = bubbles2.map(function(bubble) {
        if (cache7.points[bubble.id])
          return null;
        var loc = [bubble.lo, bubble.la];
        var d = {
          loc: loc,
          key: bubble.id,
          ca: bubble.he,
          captured_at: bubble.cd,
          captured_by: "microsoft",
          pr: bubble.pr,
          ne: bubble.ne,
          pano: true,
          sequenceKey: null
        };
        cache7.points[bubble.id] = d;
        if (bubble.pr === void 0) {
          cache7.leaders.push(bubble.id);
        }
        return {
          minX: loc[0],
          minY: loc[1],
          maxX: loc[0],
          maxY: loc[1],
          data: d
        };
      }).filter(Boolean);
      cache7.rtree.load(features2);
      connectSequences();
      if (which === "bubbles") {
        dispatch10.call("loadedImages");
      }
    });
  }
  function connectSequences() {
    var cache7 = _ssCache.bubbles;
    var keepLeaders = [];
    for (var i2 = 0; i2 < cache7.leaders.length; i2++) {
      var bubble = cache7.points[cache7.leaders[i2]];
      var seen = {};
      var sequence = {
        key: bubble.key,
        bubbles: []
      };
      var complete = false;
      do {
        sequence.bubbles.push(bubble);
        seen[bubble.key] = true;
        if (bubble.ne === void 0) {
          complete = true;
        } else {
          bubble = cache7.points[bubble.ne];
        }
      } while (bubble && !seen[bubble.key] && !complete);
      if (complete) {
        _ssCache.sequences[sequence.key] = sequence;
        for (var j = 0; j < sequence.bubbles.length; j++) {
          sequence.bubbles[j].sequenceKey = sequence.key;
        }
        sequence.geojson = {
          type: "LineString",
          properties: {
            captured_at: sequence.bubbles[0] ? sequence.bubbles[0].captured_at : null,
            captured_by: sequence.bubbles[0] ? sequence.bubbles[0].captured_by : null,
            key: sequence.key
          },
          coordinates: sequence.bubbles.map(function(d) {
            return d.loc;
          })
        };
      } else {
        keepLeaders.push(cache7.leaders[i2]);
      }
    }
    cache7.leaders = keepLeaders;
  }
  function getBubbles(url, tile, callback) {
    var rect = tile.wgs84Extent.rectangle();
    var urlForRequest = url + utilQsString({
      n: rect[3],
      s: rect[1],
      e: rect[2],
      w: rect[0],
      c: maxResults2,
      appkey: bubbleAppKey,
      jsCallback: "{callback}"
    });
    return jsonpRequest(urlForRequest, function(data2) {
      if (!data2 || data2.error) {
        callback(null);
      } else {
        callback(data2);
      }
    });
  }
  function partitionViewport3(projection2) {
    var z = geoScaleToZoom(projection2.scale());
    var z2 = Math.ceil(z * 2) / 2 + 2.5;
    var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
    var tiles = tiler9.zoomRange(z2).margin(0).getTiles(proj).tiles;
    return tiles.map(function(tile) {
      return tile.wgs84Extent;
    });
  }
  function searchLimited3(limit, projection2, rtree) {
    limit = limit || 5;
    return partitionViewport3(projection2).reduce(function(result6, extent6) {
      var found = rtree.search(extent6.bbox()).slice(0, limit).map(function(d) {
        return d.data;
      });
      return found.length ? result6.concat(found) : result6;
    }, []);
  }
  function loadImage(imgInfo) {
    return new Promise(function(resolve) {
      var img = new Image();
      img.onload = function() {
        var canvas = document.getElementById("ideditor-canvas" + imgInfo.face);
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, imgInfo.x, imgInfo.y);
        resolve({
          imgInfo: imgInfo,
          status: "ok"
        });
      };
      img.onerror = function() {
        resolve({
          data: imgInfo,
          status: "error"
        });
      };
      img.setAttribute("crossorigin", "");
      img.src = imgInfo.url;
    });
  }
  function loadCanvas(imageGroup) {
    return Promise.all(imageGroup.map(loadImage)).then(function(data2) {
      var canvas = document.getElementById("ideditor-canvas" + data2[0].imgInfo.face);
      var which = {
        "01": 0,
        "02": 1,
        "03": 2,
        "10": 3,
        "11": 4,
        "12": 5
      };
      var face = data2[0].imgInfo.face;
      _sceneOptions.cubeMap[which[face]] = canvas.toDataURL("image/jpeg", 1);
      return {
        status: "loadCanvas for face " + data2[0].imgInfo.face + "ok"
      };
    });
  }
  function loadFaces(faceGroup) {
    return Promise.all(faceGroup.map(loadCanvas)).then(function() {
      return {
        status: "loadFaces done"
      };
    });
  }
  function setupCanvas(selection2, reset17) {
    if (reset17) {
      selection2.selectAll("#ideditor-stitcher-canvases").remove();
    }
    selection2.selectAll("#ideditor-stitcher-canvases").data([0]).enter().append("div").attr("id", "ideditor-stitcher-canvases").attr("display", "none").selectAll("canvas").data(["canvas01", "canvas02", "canvas03", "canvas10", "canvas11", "canvas12"]).enter().append("canvas").attr("id", function(d) {
      return "ideditor-" + d;
    }).attr("width", _resolution).attr("height", _resolution);
  }
  function qkToXY(qk) {
    var x2 = 0;
    var y = 0;
    var scale2 = 256;
    for (var i2 = qk.length; i2 > 0; i2--) {
      var key = qk[i2 - 1];
      x2 += +(key === "1" || key === "3") * scale2;
      y += +(key === "2" || key === "3") * scale2;
      scale2 *= 2;
    }
    return [x2, y];
  }
  function getQuadKeys() {
    var dim = _resolution / 256;
    var quadKeys;
    if (dim === 16) {
      quadKeys = ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111", "0002", "0003", "0012", "0013", "0102", "0103", "0112", "0113", "1002", "1003", "1012", "1013", "1102", "1103", "1112", "1113", "0020", "0021", "0030", "0031", "0120", "0121", "0130", "0131", "1020", "1021", "1030", "1031", "1120", "1121", "1130", "1131", "0022", "0023", "0032", "0033", "0122", "0123", "0132", "0133", "1022", "1023", "1032", "1033", "1122", "1123", "1132", "1133", "0200", "0201", "0210", "0211", "0300", "0301", "0310", "0311", "1200", "1201", "1210", "1211", "1300", "1301", "1310", "1311", "0202", "0203", "0212", "0213", "0302", "0303", "0312", "0313", "1202", "1203", "1212", "1213", "1302", "1303", "1312", "1313", "0220", "0221", "0230", "0231", "0320", "0321", "0330", "0331", "1220", "1221", "1230", "1231", "1320", "1321", "1330", "1331", "0222", "0223", "0232", "0233", "0322", "0323", "0332", "0333", "1222", "1223", "1232", "1233", "1322", "1323", "1332", "1333", "2000", "2001", "2010", "2011", "2100", "2101", "2110", "2111", "3000", "3001", "3010", "3011", "3100", "3101", "3110", "3111", "2002", "2003", "2012", "2013", "2102", "2103", "2112", "2113", "3002", "3003", "3012", "3013", "3102", "3103", "3112", "3113", "2020", "2021", "2030", "2031", "2120", "2121", "2130", "2131", "3020", "3021", "3030", "3031", "3120", "3121", "3130", "3131", "2022", "2023", "2032", "2033", "2122", "2123", "2132", "2133", "3022", "3023", "3032", "3033", "3122", "3123", "3132", "3133", "2200", "2201", "2210", "2211", "2300", "2301", "2310", "2311", "3200", "3201", "3210", "3211", "3300", "3301", "3310", "3311", "2202", "2203", "2212", "2213", "2302", "2303", "2312", "2313", "3202", "3203", "3212", "3213", "3302", "3303", "3312", "3313", "2220", "2221", "2230", "2231", "2320", "2321", "2330", "2331", "3220", "3221", "3230", "3231", "3320", "3321", "3330", "3331", "2222", "2223", "2232", "2233", "2322", "2323", "2332", "2333", "3222", "3223", "3232", "3233", "3322", "3323", "3332", "3333"];
    } else if (dim === 8) {
      quadKeys = ["000", "001", "010", "011", "100", "101", "110", "111", "002", "003", "012", "013", "102", "103", "112", "113", "020", "021", "030", "031", "120", "121", "130", "131", "022", "023", "032", "033", "122", "123", "132", "133", "200", "201", "210", "211", "300", "301", "310", "311", "202", "203", "212", "213", "302", "303", "312", "313", "220", "221", "230", "231", "320", "321", "330", "331", "222", "223", "232", "233", "322", "323", "332", "333"];
    } else if (dim === 4) {
      quadKeys = ["00", "01", "10", "11", "02", "03", "12", "13", "20", "21", "30", "31", "22", "23", "32", "33"];
    } else {
      quadKeys = ["0", "1", "2", "3"];
    }
    return quadKeys;
  }
  var streetside_default = {
    init: function init14() {
      if (!_ssCache) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch10, "on");
    },
    reset: function reset12() {
      if (_ssCache) {
        Object.values(_ssCache.bubbles.inflight).forEach(abortRequest8);
      }
      _ssCache = {
        bubbles: {
          inflight: {},
          loaded: {},
          nextPage: {},
          rtree: new import_rbush10.default(),
          points: {},
          leaders: []
        },
        sequences: {}
      };
    },
    bubbles: function bubbles(projection2) {
      var limit = 5;
      return searchLimited3(limit, projection2, _ssCache.bubbles.rtree);
    },
    cachedImage: function cachedImage3(imageKey) {
      return _ssCache.bubbles.points[imageKey];
    },
    sequences: function sequences3(projection2) {
      var viewport = projection2.clipExtent();
      var min2 = [viewport[0][0], viewport[1][1]];
      var max2 = [viewport[1][0], viewport[0][1]];
      var bbox = new Extent(projection2.invert(min2), projection2.invert(max2)).bbox();
      var seen = {};
      var results = [];
      _ssCache.bubbles.rtree.search(bbox).forEach(function(d) {
        var key = d.data.sequenceKey;
        if (key && !seen[key]) {
          seen[key] = true;
          results.push(_ssCache.sequences[key].geojson);
        }
      });
      return results;
    },
    loadBubbles: function loadBubbles(projection2, margin) {
      if (margin === void 0)
        margin = 2;
      loadTiles6("bubbles", bubbleApi, projection2, margin);
    },
    viewer: function viewer() {
      return _pannellumViewer;
    },
    initViewer: function initViewer2() {
      if (!window.pannellum)
        return;
      if (_pannellumViewer)
        return;
      _currScene += 1;
      var sceneID = _currScene.toString();
      var options = {
        "default": {
          firstScene: sceneID
        },
        scenes: {}
      };
      options.scenes[sceneID] = _sceneOptions;
      _pannellumViewer = window.pannellum.viewer("ideditor-viewer-streetside", options);
    },
    ensureViewerLoaded: function ensureViewerLoaded3(context) {
      if (_loadViewerPromise3)
        return _loadViewerPromise3;
      var wrap2 = context.container().select(".photoviewer").selectAll(".ms-wrapper").data([0]);
      var wrapEnter = wrap2.enter().append("div").attr("class", "photo-wrapper ms-wrapper").classed("hide", true);
      var that = this;
      var pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
      wrapEnter.append("div").attr("id", "ideditor-viewer-streetside").on(pointerPrefix + "down.streetside", function() {
        select_default2(window).on(pointerPrefix + "move.streetside", function() {
          dispatch10.call("viewerChanged");
        }, true);
      }).on(pointerPrefix + "up.streetside pointercancel.streetside", function() {
        select_default2(window).on(pointerPrefix + "move.streetside", null);
        var t = timer(function(elapsed) {
          dispatch10.call("viewerChanged");
          if (elapsed > 2e3) {
            t.stop();
          }
        });
      }).append("div").attr("class", "photo-attribution fillD");
      var controlsEnter = wrapEnter.append("div").attr("class", "photo-controls-wrap").append("div").attr("class", "photo-controls");
      controlsEnter.append("button").on("click.back", step(-1)).html("\u25C4");
      controlsEnter.append("button").on("click.forward", step(1)).html("\u25BA");
      wrap2 = wrap2.merge(wrapEnter).call(setupCanvas, true);
      context.ui().photoviewer.on("resize.streetside", function() {
        if (_pannellumViewer) {
          _pannellumViewer.resize();
        }
      });
      _loadViewerPromise3 = new Promise(function(resolve, reject) {
        var loadedCount = 0;
        function loaded() {
          loadedCount += 1;
          if (loadedCount === 2)
            resolve();
        }
        var head = select_default2("head");
        head.selectAll("#ideditor-streetside-viewercss").data([0]).enter().append("link").attr("id", "ideditor-streetside-viewercss").attr("rel", "stylesheet").attr("crossorigin", "anonymous").attr("href", context.asset(pannellumViewerCSS)).on("load.serviceStreetside", loaded).on("error.serviceStreetside", function() {
          reject();
        });
        head.selectAll("#ideditor-streetside-viewerjs").data([0]).enter().append("script").attr("id", "ideditor-streetside-viewerjs").attr("crossorigin", "anonymous").attr("src", context.asset(pannellumViewerJS)).on("load.serviceStreetside", loaded).on("error.serviceStreetside", function() {
          reject();
        });
      }).catch(function() {
        _loadViewerPromise3 = null;
      });
      return _loadViewerPromise3;
      function step(stepBy) {
        return function() {
          var viewer2 = context.container().select(".photoviewer");
          var selected = viewer2.empty() ? void 0 : viewer2.datum();
          if (!selected)
            return;
          var nextID = stepBy === 1 ? selected.ne : selected.pr;
          var yaw2 = _pannellumViewer.getYaw();
          var ca = selected.ca + yaw2;
          var origin = selected.loc;
          var meters = 35;
          var p1 = [origin[0] + geoMetersToLon(meters / 5, origin[1]), origin[1]];
          var p2 = [origin[0] + geoMetersToLon(meters / 2, origin[1]), origin[1] + geoMetersToLat(meters)];
          var p3 = [origin[0] - geoMetersToLon(meters / 2, origin[1]), origin[1] + geoMetersToLat(meters)];
          var p4 = [origin[0] - geoMetersToLon(meters / 5, origin[1]), origin[1]];
          var poly = [p1, p2, p3, p4, p1];
          var angle2 = (stepBy === 1 ? ca : ca + 180) * (Math.PI / 180);
          poly = geomRotatePoints(poly, -angle2, origin);
          var extent6 = poly.reduce(function(extent7, point5) {
            extent7.min = [Math.min(extent7.min[0], point5[0]), Math.min(extent7.min[1], point5[1])];
            extent7.max = [Math.max(extent7.max[0], point5[0]), Math.max(extent7.max[1], point5[1])];
            return extent7;
          }, new Extent());
          var minDist = Infinity;
          _ssCache.bubbles.rtree.search(extent6.bbox()).forEach(function(d) {
            if (d.data.key === selected.key)
              return;
            if (!geomPointInPolygon(d.data.loc, poly))
              return;
            var dist = vecLength(d.data.loc, selected.loc);
            var theta = selected.ca - d.data.ca;
            var minTheta = Math.min(Math.abs(theta), 360 - Math.abs(theta));
            if (minTheta > 20) {
              dist += 5;
            }
            if (dist < minDist) {
              nextID = d.data.key;
              minDist = dist;
            }
          });
          var nextBubble = nextID && that.cachedImage(nextID);
          if (!nextBubble)
            return;
          context.map().centerEase(nextBubble.loc);
          that.selectImage(context, nextBubble.key).yaw(yaw2).showViewer(context);
        };
      }
    },
    yaw: function yaw(_yaw) {
      if (typeof _yaw !== "number")
        return _yaw;
      _sceneOptions.yaw = _yaw;
      return this;
    },
    showViewer: function showViewer3(context) {
      var wrap2 = context.container().select(".photoviewer").classed("hide", false);
      var isHidden = wrap2.selectAll(".photo-wrapper.ms-wrapper.hide").size();
      if (isHidden) {
        wrap2.selectAll(".photo-wrapper:not(.ms-wrapper)").classed("hide", true);
        wrap2.selectAll(".photo-wrapper.ms-wrapper").classed("hide", false);
      }
      return this;
    },
    hideViewer: function hideViewer3(context) {
      var viewer2 = context.container().select(".photoviewer");
      if (!viewer2.empty())
        viewer2.datum(null);
      viewer2.classed("hide", true).selectAll(".photo-wrapper").classed("hide", true);
      context.container().selectAll(".viewfield-group, .sequence, .icon-sign").classed("currentView", false);
      this.updateUrlImage(null);
      return this.setStyles(context, null, true);
    },
    selectImage: function selectImage3(context, key) {
      var that = this;
      var d = this.cachedImage(key);
      var viewer2 = context.container().select(".photoviewer");
      if (!viewer2.empty())
        viewer2.datum(d);
      this.setStyles(context, null, true);
      var wrap2 = context.container().select(".photoviewer .ms-wrapper");
      var attribution = wrap2.selectAll(".photo-attribution").html("");
      wrap2.selectAll(".pnlm-load-box").style("display", "block");
      if (!d)
        return this;
      this.updateUrlImage(key);
      _sceneOptions.northOffset = d.ca;
      var line1 = attribution.append("div").attr("class", "attribution-row");
      var hiresDomId = utilUniqueString("streetside-hires");
      var label = line1.append("label").attr("for", hiresDomId).attr("class", "streetside-hires");
      label.append("input").attr("type", "checkbox").attr("id", hiresDomId).property("checked", _hires).on("click", function(d3_event) {
        d3_event.stopPropagation();
        _hires = !_hires;
        _resolution = _hires ? 1024 : 512;
        wrap2.call(setupCanvas, true);
        var viewstate = {
          yaw: _pannellumViewer.getYaw(),
          pitch: _pannellumViewer.getPitch(),
          hfov: _pannellumViewer.getHfov()
        };
        _sceneOptions = Object.assign(_sceneOptions, viewstate);
        that.selectImage(context, d.key).showViewer(context);
      });
      label.append("span").html(_t.html("streetside.hires"));
      var captureInfo = line1.append("div").attr("class", "attribution-capture-info");
      if (d.captured_by) {
        var yyyy = new Date().getFullYear();
        captureInfo.append("a").attr("class", "captured_by").attr("target", "_blank").attr("href", "https://www.microsoft.com/en-us/maps/streetside").html("\xA9" + yyyy + " Microsoft");
        captureInfo.append("span").html("|");
      }
      if (d.captured_at) {
        captureInfo.append("span").attr("class", "captured_at").html(localeTimestamp(d.captured_at));
      }
      var line2 = attribution.append("div").attr("class", "attribution-row");
      line2.append("a").attr("class", "image-view-link").attr("target", "_blank").attr("href", "https://www.bing.com/maps?cp=" + d.loc[1] + "~" + d.loc[0] + "&lvl=17&dir=" + d.ca + "&style=x&v=2&sV=1").html(_t.html("streetside.view_on_bing"));
      line2.append("a").attr("class", "image-report-link").attr("target", "_blank").attr("href", "https://www.bing.com/maps/privacyreport/streetsideprivacyreport?bubbleid=" + encodeURIComponent(d.key) + "&focus=photo&lat=" + d.loc[1] + "&lng=" + d.loc[0] + "&z=17").html(_t.html("streetside.report"));
      var bubbleIdQuadKey = d.key.toString(4);
      var paddingNeeded = 16 - bubbleIdQuadKey.length;
      for (var i2 = 0; i2 < paddingNeeded; i2++) {
        bubbleIdQuadKey = "0" + bubbleIdQuadKey;
      }
      var imgUrlPrefix = streetsideImagesApi + "hs" + bubbleIdQuadKey;
      var imgUrlSuffix = ".jpg?g=6338&n=z";
      var faceKeys = ["01", "02", "03", "10", "11", "12"];
      var quadKeys = getQuadKeys();
      var faces = faceKeys.map(function(faceKey) {
        return quadKeys.map(function(quadKey) {
          var xy = qkToXY(quadKey);
          return {
            face: faceKey,
            url: imgUrlPrefix + faceKey + quadKey + imgUrlSuffix,
            x: xy[0],
            y: xy[1]
          };
        });
      });
      loadFaces(faces).then(function() {
        if (!_pannellumViewer) {
          that.initViewer();
        } else {
          _currScene += 1;
          var sceneID = _currScene.toString();
          _pannellumViewer.addScene(sceneID, _sceneOptions).loadScene(sceneID);
          if (_currScene > 2) {
            sceneID = (_currScene - 1).toString();
            _pannellumViewer.removeScene(sceneID);
          }
        }
      });
      return this;
    },
    getSequenceKeyForBubble: function getSequenceKeyForBubble(d) {
      return d && d.sequenceKey;
    },
    setStyles: function setStyles3(context, hovered, reset17) {
      if (reset17) {
        context.container().selectAll(".viewfield-group").classed("highlighted", false).classed("hovered", false).classed("currentView", false);
        context.container().selectAll(".sequence").classed("highlighted", false).classed("currentView", false);
      }
      var hoveredBubbleKey = hovered && hovered.key;
      var hoveredSequenceKey = this.getSequenceKeyForBubble(hovered);
      var hoveredSequence = hoveredSequenceKey && _ssCache.sequences[hoveredSequenceKey];
      var hoveredBubbleKeys = hoveredSequence && hoveredSequence.bubbles.map(function(d) {
        return d.key;
      }) || [];
      var viewer2 = context.container().select(".photoviewer");
      var selected = viewer2.empty() ? void 0 : viewer2.datum();
      var selectedBubbleKey = selected && selected.key;
      var selectedSequenceKey = this.getSequenceKeyForBubble(selected);
      var selectedSequence = selectedSequenceKey && _ssCache.sequences[selectedSequenceKey];
      var selectedBubbleKeys = selectedSequence && selectedSequence.bubbles.map(function(d) {
        return d.key;
      }) || [];
      var highlightedBubbleKeys = utilArrayUnion(hoveredBubbleKeys, selectedBubbleKeys);
      context.container().selectAll(".layer-streetside-images .viewfield-group").classed("highlighted", function(d) {
        return highlightedBubbleKeys.indexOf(d.key) !== -1;
      }).classed("hovered", function(d) {
        return d.key === hoveredBubbleKey;
      }).classed("currentView", function(d) {
        return d.key === selectedBubbleKey;
      });
      context.container().selectAll(".layer-streetside-images .sequence").classed("highlighted", function(d) {
        return d.properties.key === hoveredSequenceKey;
      }).classed("currentView", function(d) {
        return d.properties.key === selectedSequenceKey;
      });
      context.container().selectAll(".layer-streetside-images .viewfield-group .viewfield").attr("d", viewfieldPath);
      function viewfieldPath() {
        var d = this.parentNode.__data__;
        if (d.pano && d.key !== selectedBubbleKey) {
          return "M 8,13 m -10,0 a 10,10 0 1,0 20,0 a 10,10 0 1,0 -20,0";
        } else {
          return "M 6,9 C 8,8.4 8,8.4 10,9 L 16,-2 C 12,-5 4,-5 0,-2 z";
        }
      }
      return this;
    },
    updateUrlImage: function updateUrlImage3(imageKey) {
      if (!window.mocha) {
        var hash = utilStringQs(window.location.hash);
        if (imageKey) {
          hash.photo = "streetside/" + imageKey;
        } else {
          delete hash.photo;
        }
        window.location.replace("#" + utilQsString(hash, true));
      }
    },
    cache: function cache5() {
      return _ssCache;
    }
  };

  // modules/services/taginfo.js
  var _apibase2 = "https://taginfo.openstreetmap.org/api/4/";
  var _inflight3 = {};
  var _popularKeys = {};
  var _taginfoCache = {};
  var tag_sorts = {
    point: "count_nodes",
    vertex: "count_nodes",
    area: "count_ways",
    line: "count_ways"
  };
  var tag_sort_members = {
    point: "count_node_members",
    vertex: "count_node_members",
    area: "count_way_members",
    line: "count_way_members",
    relation: "count_relation_members"
  };
  var tag_filters = {
    point: "nodes",
    vertex: "nodes",
    area: "ways",
    line: "ways"
  };
  var tag_members_fractions = {
    point: "count_node_members_fraction",
    vertex: "count_node_members_fraction",
    area: "count_way_members_fraction",
    line: "count_way_members_fraction",
    relation: "count_relation_members_fraction"
  };
  function sets(params, n2, o2) {
    if (params.geometry && o2[params.geometry]) {
      params[n2] = o2[params.geometry];
    }
    return params;
  }
  function setFilter(params) {
    return sets(params, "filter", tag_filters);
  }
  function setSort(params) {
    return sets(params, "sortname", tag_sorts);
  }
  function setSortMembers(params) {
    return sets(params, "sortname", tag_sort_members);
  }
  function clean(params) {
    return utilObjectOmit(params, ["geometry", "debounce"]);
  }
  function filterKeys(type3) {
    var count_type = type3 ? "count_" + type3 : "count_all";
    return function(d) {
      return parseFloat(d[count_type]) > 2500 || d.in_wiki;
    };
  }
  function filterMultikeys(prefix) {
    return function(d) {
      var re2 = new RegExp("^" + prefix + "(.*)$");
      var matches = d.key.match(re2) || [];
      return matches.length === 2 && matches[1].indexOf(":") === -1;
    };
  }
  function filterValues(allowUpperCase) {
    return function(d) {
      if (d.value.match(/[;,]/) !== null)
        return false;
      if (!allowUpperCase && d.value.match(/[A-Z*]/) !== null)
        return false;
      return parseFloat(d.fraction) > 0;
    };
  }
  function filterRoles(geometry6) {
    return function(d) {
      if (d.role === "")
        return false;
      if (d.role.match(/[A-Z*;,]/) !== null)
        return false;
      return parseFloat(d[tag_members_fractions[geometry6]]) > 0;
    };
  }
  function valKey(d) {
    return {
      value: d.key,
      title: d.key
    };
  }
  function valKeyDescription(d) {
    var obj = {
      value: d.value,
      title: d.description || d.value
    };
    if (d.count) {
      obj.count = d.count;
    }
    return obj;
  }
  function roleKey(d) {
    return {
      value: d.role,
      title: d.role
    };
  }
  function sortKeys(a, b2) {
    return a.key.indexOf(":") === -1 && b2.key.indexOf(":") !== -1 ? -1 : a.key.indexOf(":") !== -1 && b2.key.indexOf(":") === -1 ? 1 : 0;
  }
  var debouncedRequest2 = debounce_default(request2, 300, {
    leading: false
  });
  function request2(url, params, exactMatch, callback, loaded) {
    if (_inflight3[url])
      return;
    if (checkCache(url, params, exactMatch, callback))
      return;
    var controller = new AbortController();
    _inflight3[url] = controller;
    json_default(url, {
      signal: controller.signal
    }).then(function(result6) {
      delete _inflight3[url];
      if (loaded)
        loaded(null, result6);
    }).catch(function(err) {
      delete _inflight3[url];
      if (err.name === "AbortError")
        return;
      if (loaded)
        loaded(err.message);
    });
  }
  function checkCache(url, params, exactMatch, callback) {
    var rp = params.rp || 25;
    var testQuery = params.query || "";
    var testUrl = url;
    do {
      var hit = _taginfoCache[testUrl];
      if (hit && (url === testUrl || hit.length < rp)) {
        callback(null, hit);
        return true;
      }
      if (exactMatch || !testQuery.length)
        return false;
      testQuery = testQuery.slice(0, -1);
      testUrl = url.replace(/&query=(.*?)&/, "&query=" + testQuery + "&");
    } while (testQuery.length >= 0);
    return false;
  }
  var taginfo_default = {
    init: function init15() {
      _inflight3 = {};
      _taginfoCache = {};
      _popularKeys = {
        postal_code: true,
        full_name: true,
        loc_name: true,
        reg_name: true,
        short_name: true,
        sorting_name: true,
        artist_name: true,
        nat_name: true,
        long_name: true,
        "bridge:name": true
      };
      var params = {
        rp: 100,
        sortname: "values_all",
        sortorder: "desc",
        page: 1,
        debounce: false,
        lang: _mainLocalizer.languageCode()
      };
      this.keys(params, function(err, data2) {
        if (err)
          return;
        data2.forEach(function(d) {
          if (d.value === "opening_hours")
            return;
          _popularKeys[d.value] = true;
        });
      });
    },
    reset: function reset13() {
      Object.values(_inflight3).forEach(function(controller) {
        controller.abort();
      });
      _inflight3 = {};
    },
    keys: function keys2(params, callback) {
      var doRequest = params.debounce ? debouncedRequest2 : request2;
      params = clean(setSort(params));
      params = Object.assign({
        rp: 10,
        sortname: "count_all",
        sortorder: "desc",
        page: 1,
        lang: _mainLocalizer.languageCode()
      }, params);
      var url = _apibase2 + "keys/all?" + utilQsString(params);
      doRequest(url, params, false, callback, function(err, d) {
        if (err) {
          callback(err);
        } else {
          var f2 = filterKeys(params.filter);
          var result6 = d.data.filter(f2).sort(sortKeys).map(valKey);
          _taginfoCache[url] = result6;
          callback(null, result6);
        }
      });
    },
    multikeys: function multikeys(params, callback) {
      var doRequest = params.debounce ? debouncedRequest2 : request2;
      params = clean(setSort(params));
      params = Object.assign({
        rp: 25,
        sortname: "count_all",
        sortorder: "desc",
        page: 1,
        lang: _mainLocalizer.languageCode()
      }, params);
      var prefix = params.query;
      var url = _apibase2 + "keys/all?" + utilQsString(params);
      doRequest(url, params, true, callback, function(err, d) {
        if (err) {
          callback(err);
        } else {
          var f2 = filterMultikeys(prefix);
          var result6 = d.data.filter(f2).map(valKey);
          _taginfoCache[url] = result6;
          callback(null, result6);
        }
      });
    },
    values: function values(params, callback) {
      var key = params.key;
      if (key && _popularKeys[key]) {
        callback(null, []);
        return;
      }
      var doRequest = params.debounce ? debouncedRequest2 : request2;
      params = clean(setSort(setFilter(params)));
      params = Object.assign({
        rp: 25,
        sortname: "count_all",
        sortorder: "desc",
        page: 1,
        lang: _mainLocalizer.languageCode()
      }, params);
      var url = _apibase2 + "key/values?" + utilQsString(params);
      doRequest(url, params, false, callback, function(err, d) {
        if (err) {
          callback(err);
        } else {
          var re2 = /network|taxon|genus|species|brand|grape_variety|royal_cypher|listed_status|booth|rating|stars|:output|_hours|_times|_ref|manufacturer|country|target|brewery/;
          var allowUpperCase = re2.test(params.key);
          var f2 = filterValues(allowUpperCase);
          var result6 = d.data.filter(f2).map(valKeyDescription);
          _taginfoCache[url] = result6;
          callback(null, result6);
        }
      });
    },
    roles: function roles(params, callback) {
      var doRequest = params.debounce ? debouncedRequest2 : request2;
      var geometry6 = params.geometry;
      params = clean(setSortMembers(params));
      params = Object.assign({
        rp: 25,
        sortname: "count_all_members",
        sortorder: "desc",
        page: 1,
        lang: _mainLocalizer.languageCode()
      }, params);
      var url = _apibase2 + "relation/roles?" + utilQsString(params);
      doRequest(url, params, true, callback, function(err, d) {
        if (err) {
          callback(err);
        } else {
          var f2 = filterRoles(geometry6);
          var result6 = d.data.filter(f2).map(roleKey);
          _taginfoCache[url] = result6;
          callback(null, result6);
        }
      });
    },
    docs: function docs(params, callback) {
      var doRequest = params.debounce ? debouncedRequest2 : request2;
      params = clean(setSort(params));
      var path = "key/wiki_pages?";
      if (params.value) {
        path = "tag/wiki_pages?";
      } else if (params.rtype) {
        path = "relation/wiki_pages?";
      }
      var url = _apibase2 + path + utilQsString(params);
      doRequest(url, params, true, callback, function(err, d) {
        if (err) {
          callback(err);
        } else {
          _taginfoCache[url] = d.data;
          callback(null, d.data);
        }
      });
    },
    apibase: function apibase4(_2) {
      if (!arguments.length)
        return _apibase2;
      _apibase2 = _2;
      return this;
    }
  };

  // modules/services/vector_tile.js
  var import_fast_deep_equal11 = __toModule(require_fast_deep_equal());

  // node_modules/@turf/helpers/dist/es/index.js
  init_typeof();
  var earthRadius = 63710088e-1;
  var factors = {
    centimeters: earthRadius * 100,
    centimetres: earthRadius * 100,
    degrees: earthRadius / 111325,
    feet: earthRadius * 3.28084,
    inches: earthRadius * 39.37,
    kilometers: earthRadius / 1e3,
    kilometres: earthRadius / 1e3,
    meters: earthRadius,
    metres: earthRadius,
    miles: earthRadius / 1609.344,
    millimeters: earthRadius * 1e3,
    millimetres: earthRadius * 1e3,
    nauticalmiles: earthRadius / 1852,
    radians: 1,
    yards: earthRadius * 1.0936
  };
  var unitsFactors = {
    centimeters: 100,
    centimetres: 100,
    degrees: 1 / 111325,
    feet: 3.28084,
    inches: 39.37,
    kilometers: 1 / 1e3,
    kilometres: 1 / 1e3,
    meters: 1,
    metres: 1,
    miles: 1 / 1609.344,
    millimeters: 1e3,
    millimetres: 1e3,
    nauticalmiles: 1 / 1852,
    radians: 1 / earthRadius,
    yards: 1.0936133
  };
  function feature2(geom, properties, options) {
    if (options === void 0) {
      options = {};
    }
    var feat = {
      type: "Feature"
    };
    if (options.id === 0 || options.id) {
      feat.id = options.id;
    }
    if (options.bbox) {
      feat.bbox = options.bbox;
    }
    feat.properties = properties || {};
    feat.geometry = geom;
    return feat;
  }
  function polygon(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }
    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
      var ring = coordinates_1[_i];
      if (ring.length < 4) {
        throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
      }
      for (var j = 0; j < ring[ring.length - 1].length; j++) {
        if (ring[ring.length - 1][j] !== ring[0][j]) {
          throw new Error("First and last Position are not equivalent.");
        }
      }
    }
    var geom = {
      type: "Polygon",
      coordinates: coordinates
    };
    return feature2(geom, properties, options);
  }
  function lineString(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }
    if (coordinates.length < 2) {
      throw new Error("coordinates must be an array of two or more positions");
    }
    var geom = {
      type: "LineString",
      coordinates: coordinates
    };
    return feature2(geom, properties, options);
  }
  function multiLineString(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }
    var geom = {
      type: "MultiLineString",
      coordinates: coordinates
    };
    return feature2(geom, properties, options);
  }
  function multiPolygon(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }
    var geom = {
      type: "MultiPolygon",
      coordinates: coordinates
    };
    return feature2(geom, properties, options);
  }

  // node_modules/@turf/invariant/dist/es/index.js
  function getGeom(geojson) {
    if (geojson.type === "Feature") {
      return geojson.geometry;
    }
    return geojson;
  }

  // node_modules/@turf/bbox-clip/dist/es/lib/lineclip.js
  function lineclip(points, bbox, result6) {
    var len = points.length, codeA = bitCode(points[0], bbox), part = [], i2, codeB, lastCode;
    var a;
    var b2;
    if (!result6)
      result6 = [];
    for (i2 = 1; i2 < len; i2++) {
      a = points[i2 - 1];
      b2 = points[i2];
      codeB = lastCode = bitCode(b2, bbox);
      while (true) {
        if (!(codeA | codeB)) {
          part.push(a);
          if (codeB !== lastCode) {
            part.push(b2);
            if (i2 < len - 1) {
              result6.push(part);
              part = [];
            }
          } else if (i2 === len - 1) {
            part.push(b2);
          }
          break;
        } else if (codeA & codeB) {
          break;
        } else if (codeA) {
          a = intersect(a, b2, codeA, bbox);
          codeA = bitCode(a, bbox);
        } else {
          b2 = intersect(a, b2, codeB, bbox);
          codeB = bitCode(b2, bbox);
        }
      }
      codeA = lastCode;
    }
    if (part.length)
      result6.push(part);
    return result6;
  }
  function polygonclip(points, bbox) {
    var result6, edge, prev, prevInside, i2, p2, inside;
    for (edge = 1; edge <= 8; edge *= 2) {
      result6 = [];
      prev = points[points.length - 1];
      prevInside = !(bitCode(prev, bbox) & edge);
      for (i2 = 0; i2 < points.length; i2++) {
        p2 = points[i2];
        inside = !(bitCode(p2, bbox) & edge);
        if (inside !== prevInside)
          result6.push(intersect(prev, p2, edge, bbox));
        if (inside)
          result6.push(p2);
        prev = p2;
        prevInside = inside;
      }
      points = result6;
      if (!points.length)
        break;
    }
    return result6;
  }
  function intersect(a, b2, edge, bbox) {
    return edge & 8 ? [a[0] + (b2[0] - a[0]) * (bbox[3] - a[1]) / (b2[1] - a[1]), bbox[3]] : edge & 4 ? [a[0] + (b2[0] - a[0]) * (bbox[1] - a[1]) / (b2[1] - a[1]), bbox[1]] : edge & 2 ? [bbox[2], a[1] + (b2[1] - a[1]) * (bbox[2] - a[0]) / (b2[0] - a[0])] : edge & 1 ? [bbox[0], a[1] + (b2[1] - a[1]) * (bbox[0] - a[0]) / (b2[0] - a[0])] : null;
  }
  function bitCode(p2, bbox) {
    var code = 0;
    if (p2[0] < bbox[0])
      code |= 1;
    else if (p2[0] > bbox[2])
      code |= 2;
    if (p2[1] < bbox[1])
      code |= 4;
    else if (p2[1] > bbox[3])
      code |= 8;
    return code;
  }

  // node_modules/@turf/bbox-clip/dist/es/index.js
  function bboxClip(feature3, bbox) {
    var geom = getGeom(feature3);
    var type3 = geom.type;
    var properties = feature3.type === "Feature" ? feature3.properties : {};
    var coords = geom.coordinates;
    switch (type3) {
      case "LineString":
      case "MultiLineString": {
        var lines_1 = [];
        if (type3 === "LineString") {
          coords = [coords];
        }
        coords.forEach(function(line) {
          lineclip(line, bbox, lines_1);
        });
        if (lines_1.length === 1) {
          return lineString(lines_1[0], properties);
        }
        return multiLineString(lines_1, properties);
      }
      case "Polygon":
        return polygon(clipPolygon(coords, bbox), properties);
      case "MultiPolygon":
        return multiPolygon(coords.map(function(poly) {
          return clipPolygon(poly, bbox);
        }), properties);
      default:
        throw new Error("geometry " + type3 + " not supported");
    }
  }
  function clipPolygon(rings, bbox) {
    var outRings = [];
    for (var _i = 0, rings_1 = rings; _i < rings_1.length; _i++) {
      var ring = rings_1[_i];
      var clipped = polygonclip(ring, bbox);
      if (clipped.length > 0) {
        if (clipped[0][0] !== clipped[clipped.length - 1][0] || clipped[0][1] !== clipped[clipped.length - 1][1]) {
          clipped.push(clipped[0]);
        }
        if (clipped.length >= 4) {
          outRings.push(clipped);
        }
      }
    }
    return outRings;
  }

  // modules/services/vector_tile.js
  var import_fast_json_stable_stringify2 = __toModule(require_fast_json_stable_stringify());
  var import_polygon_clipping2 = __toModule(require_polygon_clipping_umd());
  var import_pbf2 = __toModule(require_pbf());
  var import_vector_tile2 = __toModule(require_vector_tile());
  var tiler10 = new Tiler().tileSize(512).margin(1);
  var dispatch11 = dispatch_default("loadedData");
  var _vtCache;
  function abortRequest9(controller) {
    controller.abort();
  }
  function vtToGeoJSON(data2, tile, mergeCache) {
    var vectorTile = new import_vector_tile2.default.VectorTile(new import_pbf2.default(data2));
    var layers = Object.keys(vectorTile.layers);
    if (!Array.isArray(layers)) {
      layers = [layers];
    }
    var features2 = [];
    layers.forEach(function(layerID) {
      var layer2 = vectorTile.layers[layerID];
      if (layer2) {
        for (var i2 = 0; i2 < layer2.length; i2++) {
          var feature3 = layer2.feature(i2).toGeoJSON(tile.xyz[0], tile.xyz[1], tile.xyz[2]);
          var geometry6 = feature3.geometry;
          if (geometry6.type === "Polygon") {
            geometry6.type = "MultiPolygon";
            geometry6.coordinates = [geometry6.coordinates];
          }
          var isClipped = false;
          if (geometry6.type === "MultiPolygon") {
            var featureClip = bboxClip(feature3, tile.wgs84Extent.rectangle());
            if (!(0, import_fast_deep_equal11.default)(feature3.geometry, featureClip.geometry)) {
              isClipped = true;
            }
            if (!feature3.geometry.coordinates.length)
              continue;
            if (!feature3.geometry.coordinates[0].length)
              continue;
          }
          var featurehash = utilHashcode((0, import_fast_json_stable_stringify2.default)(feature3));
          var propertyhash = utilHashcode((0, import_fast_json_stable_stringify2.default)(feature3.properties || {}));
          feature3.__layerID__ = layerID.replace(/[^_a-zA-Z0-9\-]/g, "_");
          feature3.__featurehash__ = featurehash;
          feature3.__propertyhash__ = propertyhash;
          features2.push(feature3);
          if (isClipped && geometry6.type === "MultiPolygon") {
            var merged = mergeCache[propertyhash];
            if (merged && merged.length) {
              var other = merged[0];
              var coords = import_polygon_clipping2.default.union(feature3.geometry.coordinates, other.geometry.coordinates);
              if (!coords || !coords.length) {
                continue;
              }
              merged.push(feature3);
              for (var j = 0; j < merged.length; j++) {
                merged[j].geometry.coordinates = coords;
                merged[j].__featurehash__ = featurehash;
              }
            } else {
              mergeCache[propertyhash] = [feature3];
            }
          }
        }
      }
    });
    return features2;
  }
  function loadTile3(source, tile) {
    if (source.loaded[tile.id] || source.inflight[tile.id])
      return;
    var url = source.template.replace("{x}", tile.xyz[0]).replace("{y}", tile.xyz[1]).replace(/\{[t-]y\}/, Math.pow(2, tile.xyz[2]) - tile.xyz[1] - 1).replace(/\{z(oom)?\}/, tile.xyz[2]).replace(/\{switch:([^}]+)\}/, function(s, r) {
      var subdomains = r.split(",");
      return subdomains[(tile.xyz[0] + tile.xyz[1]) % subdomains.length];
    });
    var controller = new AbortController();
    source.inflight[tile.id] = controller;
    fetch(url, {
      signal: controller.signal
    }).then(function(response) {
      if (!response.ok) {
        throw new Error(response.status + " " + response.statusText);
      }
      source.loaded[tile.id] = [];
      delete source.inflight[tile.id];
      return response.arrayBuffer();
    }).then(function(data2) {
      if (!data2) {
        throw new Error("No Data");
      }
      var z = tile.xyz[2];
      if (!source.canMerge[z]) {
        source.canMerge[z] = {};
      }
      source.loaded[tile.id] = vtToGeoJSON(data2, tile, source.canMerge[z]);
      dispatch11.call("loadedData");
    }).catch(function() {
      source.loaded[tile.id] = [];
      delete source.inflight[tile.id];
    });
  }
  var vector_tile_default = {
    init: function init16() {
      if (!_vtCache) {
        this.reset();
      }
      this.event = utilRebind(this, dispatch11, "on");
    },
    reset: function reset14() {
      for (var sourceID in _vtCache) {
        var source = _vtCache[sourceID];
        if (source && source.inflight) {
          Object.values(source.inflight).forEach(abortRequest9);
        }
      }
      _vtCache = {};
    },
    addSource: function addSource(sourceID, template) {
      _vtCache[sourceID] = {
        template: template,
        inflight: {},
        loaded: {},
        canMerge: {}
      };
      return _vtCache[sourceID];
    },
    data: function data(sourceID, projection2) {
      var source = _vtCache[sourceID];
      if (!source)
        return [];
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler10.getTiles(proj).tiles;
      var seen = {};
      var results = [];
      for (var i2 = 0; i2 < tiles.length; i2++) {
        var features2 = source.loaded[tiles[i2].id];
        if (!features2 || !features2.length)
          continue;
        for (var j = 0; j < features2.length; j++) {
          var feature3 = features2[j];
          var hash = feature3.__featurehash__;
          if (seen[hash])
            continue;
          seen[hash] = true;
          results.push(Object.assign({}, feature3));
        }
      }
      return results;
    },
    loadTiles: function loadTiles7(sourceID, template, projection2) {
      var source = _vtCache[sourceID];
      if (!source) {
        source = this.addSource(sourceID, template);
      }
      var proj = new Projection().transform(projection2.transform()).dimensions(projection2.clipExtent());
      var tiles = tiler10.getTiles(proj).tiles;
      Object.keys(source.inflight).forEach(function(k) {
        var wanted = tiles.find(function(tile) {
          return k === tile.id;
        });
        if (!wanted) {
          abortRequest9(source.inflight[k]);
          delete source.inflight[k];
        }
      });
      tiles.forEach(function(tile) {
        loadTile3(source, tile);
      });
    },
    cache: function cache6() {
      return _vtCache;
    }
  };

  // modules/services/wikidata.js
  var apibase5 = "https://www.wikidata.org/w/api.php?";
  var _wikidataCache = {};
  var wikidata_default = {
    init: function init17() {
    },
    reset: function reset15() {
      _wikidataCache = {};
    },
    itemsForSearchQuery: function itemsForSearchQuery(query, callback) {
      if (!query) {
        if (callback)
          callback("No query", {});
        return;
      }
      var lang = this.languagesToQuery()[0];
      var url = apibase5 + utilQsString({
        action: "wbsearchentities",
        format: "json",
        formatversion: 2,
        search: query,
        type: "item",
        language: lang,
        uselang: lang,
        limit: 10,
        origin: "*"
      });
      json_default(url).then(function(result6) {
        if (result6 && result6.error) {
          throw new Error(result6.error);
        }
        if (callback)
          callback(null, result6.search || {});
      }).catch(function(err) {
        if (callback)
          callback(err.message, {});
      });
    },
    itemsByTitle: function itemsByTitle(lang, title, callback) {
      if (!title) {
        if (callback)
          callback("No title", {});
        return;
      }
      lang = lang || "en";
      var url = apibase5 + utilQsString({
        action: "wbgetentities",
        format: "json",
        formatversion: 2,
        sites: lang.replace(/-/g, "_") + "wiki",
        titles: title,
        languages: "en",
        origin: "*"
      });
      json_default(url).then(function(result6) {
        if (result6 && result6.error) {
          throw new Error(result6.error);
        }
        if (callback)
          callback(null, result6.entities || {});
      }).catch(function(err) {
        if (callback)
          callback(err.message, {});
      });
    },
    languagesToQuery: function languagesToQuery() {
      return _mainLocalizer.localeCodes().map(function(code) {
        return code.toLowerCase();
      }).filter(function(code) {
        return code !== "en-us";
      });
    },
    entityByQID: function entityByQID(qid, callback) {
      if (!qid) {
        callback("No qid", {});
        return;
      }
      if (_wikidataCache[qid]) {
        if (callback)
          callback(null, _wikidataCache[qid]);
        return;
      }
      var langs = this.languagesToQuery();
      var url = apibase5 + utilQsString({
        action: "wbgetentities",
        format: "json",
        formatversion: 2,
        ids: qid,
        props: "labels|descriptions|claims|sitelinks",
        sitefilter: langs.map(function(d) {
          return d + "wiki";
        }).join("|"),
        languages: langs.join("|"),
        languagefallback: 1,
        origin: "*"
      });
      json_default(url).then(function(result6) {
        if (result6 && result6.error) {
          throw new Error(result6.error);
        }
        if (callback)
          callback(null, result6.entities[qid] || {});
      }).catch(function(err) {
        if (callback)
          callback(err.message, {});
      });
    },
    getDocs: function getDocs2(params, callback) {
      var langs = this.languagesToQuery();
      this.entityByQID(params.qid, function(err, entity2) {
        if (err || !entity2) {
          callback(err || "No entity");
          return;
        }
        var i2;
        var description;
        for (i2 in langs) {
          var code = langs[i2];
          if (entity2.descriptions[code] && entity2.descriptions[code].language === code) {
            description = entity2.descriptions[code];
            break;
          }
        }
        if (!description && Object.values(entity2.descriptions).length)
          description = Object.values(entity2.descriptions)[0];
        var result6 = {
          title: entity2.id,
          description: description ? description.value : "",
          descriptionLocaleCode: description ? description.language : "",
          editURL: "https://www.wikidata.org/wiki/" + entity2.id
        };
        if (entity2.claims) {
          var imageroot = "https://commons.wikimedia.org/w/index.php";
          var props = ["P154", "P18"];
          var prop, image;
          for (i2 = 0; i2 < props.length; i2++) {
            prop = entity2.claims[props[i2]];
            if (prop && Object.keys(prop).length > 0) {
              image = prop[Object.keys(prop)[0]].mainsnak.datavalue.value;
              if (image) {
                result6.imageURL = imageroot + "?" + utilQsString({
                  title: "Special:Redirect/file/" + image,
                  width: 400
                });
                break;
              }
            }
          }
        }
        if (entity2.sitelinks) {
          var englishLocale = _mainLocalizer.languageCode().toLowerCase() === "en";
          for (i2 = 0; i2 < langs.length; i2++) {
            var w = langs[i2] + "wiki";
            if (entity2.sitelinks[w]) {
              var title = entity2.sitelinks[w].title;
              var tKey = "inspector.wiki_reference";
              if (!englishLocale && langs[i2] === "en") {
                tKey = "inspector.wiki_en_reference";
              }
              result6.wiki = {
                title: title,
                text: tKey,
                url: "https://" + langs[i2] + ".wikipedia.org/wiki/" + title.replace(/ /g, "_")
              };
              break;
            }
          }
        }
        callback(null, result6);
      });
    }
  };

  // modules/services/wikipedia.js
  var endpoint = "https://en.wikipedia.org/w/api.php?";
  var wikipedia_default = {
    init: function init18() {
    },
    reset: function reset16() {
    },
    search: function search2(lang, query, callback) {
      if (!query) {
        if (callback)
          callback("No Query", []);
        return;
      }
      lang = lang || "en";
      var url = endpoint.replace("en", lang) + utilQsString({
        action: "query",
        list: "search",
        srlimit: "10",
        srinfo: "suggestion",
        format: "json",
        origin: "*",
        srsearch: query
      });
      json_default(url).then(function(result6) {
        if (result6 && result6.error) {
          throw new Error(result6.error);
        } else if (!result6 || !result6.query || !result6.query.search) {
          throw new Error("No Results");
        }
        if (callback) {
          var titles = result6.query.search.map(function(d) {
            return d.title;
          });
          callback(null, titles);
        }
      }).catch(function(err) {
        if (callback)
          callback(err, []);
      });
    },
    suggestions: function suggestions(lang, query, callback) {
      if (!query) {
        if (callback)
          callback("", []);
        return;
      }
      lang = lang || "en";
      var url = endpoint.replace("en", lang) + utilQsString({
        action: "opensearch",
        namespace: 0,
        suggest: "",
        format: "json",
        origin: "*",
        search: query
      });
      json_default(url).then(function(result6) {
        if (result6 && result6.error) {
          throw new Error(result6.error);
        } else if (!result6 || result6.length < 2) {
          throw new Error("No Results");
        }
        if (callback)
          callback(null, result6[1] || []);
      }).catch(function(err) {
        if (callback)
          callback(err.message, []);
      });
    },
    translations: function translations(lang, title, callback) {
      if (!title) {
        if (callback)
          callback("No Title");
        return;
      }
      var url = endpoint.replace("en", lang) + utilQsString({
        action: "query",
        prop: "langlinks",
        format: "json",
        origin: "*",
        lllimit: 500,
        titles: title
      });
      json_default(url).then(function(result6) {
        if (result6 && result6.error) {
          throw new Error(result6.error);
        } else if (!result6 || !result6.query || !result6.query.pages) {
          throw new Error("No Results");
        }
        if (callback) {
          var list = result6.query.pages[Object.keys(result6.query.pages)[0]];
          var translations2 = {};
          if (list && list.langlinks) {
            list.langlinks.forEach(function(d) {
              translations2[d.lang] = d["*"];
            });
          }
          callback(null, translations2);
        }
      }).catch(function(err) {
        if (callback)
          callback(err.message);
      });
    }
  };

  // modules/services/index.js
  var services = {
    esriData: esri_data_default,
    fbMLRoads: fb_ai_features_default,
    geocoder: nominatim_default,
    keepRight: keepRight_default,
    improveOSM: improveOSM_default,
    osmose: osmose_default,
    mapillary: mapillary_default,
    nsi: nsi_default,
    openstreetcam: openstreetcam_default,
    osm: osm_default,
    osmWikibase: osm_wikibase_default,
    maprules: maprules_default,
    streetside: streetside_default,
    taginfo: taginfo_default,
    vectorTile: vector_tile_default,
    wikidata: wikidata_default,
    wikipedia: wikipedia_default
  };

  // modules/modes/drag_note.js
  function modeDragNote(context) {
    var mode = {
      id: "drag-note",
      button: "browse"
    };
    var edit = behaviorEdit(context);
    var _nudgeInterval;
    var _lastLoc;
    var _note;
    function startNudge(d3_event, nudge) {
      if (_nudgeInterval)
        window.clearInterval(_nudgeInterval);
      _nudgeInterval = window.setInterval(function() {
        context.map().pan(nudge);
        doMove(d3_event, nudge);
      }, 50);
    }
    function stopNudge() {
      if (_nudgeInterval) {
        window.clearInterval(_nudgeInterval);
        _nudgeInterval = null;
      }
    }
    function origin(note) {
      return context.projection(note.loc);
    }
    function start2(d3_event, note) {
      _note = note;
      var osm = services.osm;
      if (osm) {
        _note = osm.getNote(_note.id);
      }
      context.surface().selectAll(".note-" + _note.id).classed("active", true);
      context.perform(actionNoop());
      context.enter(mode);
      context.selectedNoteID(_note.id);
    }
    function move3(d3_event, entity2, point5) {
      d3_event.stopPropagation();
      _lastLoc = context.projection.invert(point5);
      doMove(d3_event);
      var nudge = geomViewportNudge(point5, context.map().dimensions());
      if (nudge) {
        startNudge(d3_event, nudge);
      } else {
        stopNudge();
      }
    }
    function doMove(d3_event, nudge) {
      nudge = nudge || [0, 0];
      var currPoint = d3_event && d3_event.point || context.projection(_lastLoc);
      var currMouse = vecSubtract(currPoint, nudge);
      var loc = context.projection.invert(currMouse);
      _note = _note.move(loc);
      var osm = services.osm;
      if (osm) {
        osm.replaceNote(_note);
      }
      context.replace(actionNoop());
    }
    function end() {
      context.replace(actionNoop());
      context.selectedNoteID(_note.id).enter(modeSelectNote(context, _note.id));
    }
    var drag = behaviorDrag().selector(".layer-touch.markers .target.note.new").surface(context.container().select(".main-map").node()).origin(origin).on("start", start2).on("move", move3).on("end", end);
    mode.enter = function() {
      context.install(edit);
    };
    mode.exit = function() {
      context.ui().sidebar.hover.cancel();
      context.uninstall(edit);
      context.surface().selectAll(".active").classed("active", false);
      stopNudge();
    };
    mode.behavior = drag;
    return mode;
  }

  // modules/modes/select_data.js
  function modeSelectData(context, selectedDatum) {
    var mode = {
      id: "select-data",
      button: "browse"
    };
    var keybinding = utilKeybinding("select-data");
    var dataEditor = uiDataEditor(context);
    var behaviors = [behaviorBreathe(context), behaviorHover(context), behaviorSelect(context), behaviorLasso(context), modeDragNode(context).behavior, modeDragNote(context).behavior];
    function selectData(d3_event, drawn) {
      var selection2 = context.surface().selectAll(".layer-mapdata .data" + window.toBase64(selectedDatum.__featurehash__).replace(/\=/g, ""));
      if (selection2.empty()) {
        var source = d3_event && d3_event.type === "zoom" && d3_event.sourceEvent;
        if (drawn && source && (source.type === "pointermove" || source.type === "mousemove" || source.type === "touchmove")) {
          context.enter(modeBrowse(context));
        }
      } else {
        selection2.classed("selected", true);
      }
    }
    function esc2() {
      if (context.container().select(".combobox").size())
        return;
      context.enter(modeBrowse(context));
    }
    mode.zoomToSelected = function() {
      var bounds = bounds_default(selectedDatum);
      var extent6 = new Extent(bounds[0], bounds[1]);
      context.map().centerZoomEase(extent6.center(), context.map().trimmedExtentZoom(extent6));
    };
    mode.enter = function() {
      behaviors.forEach(context.install);
      keybinding.on(_t("inspector.zoom_to.key"), mode.zoomToSelected).on("\u238B", esc2, true);
      select_default2(document).call(keybinding);
      selectData();
      var sidebar = context.ui().sidebar;
      sidebar.show(dataEditor.datum(selectedDatum));
      var bounds = bounds_default(selectedDatum);
      var extent6 = new Extent(bounds[0], bounds[1]);
      sidebar.expand(sidebar.intersects(extent6));
      context.map().on("drawn.select-data", selectData);
    };
    mode.exit = function() {
      behaviors.forEach(context.uninstall);
      select_default2(document).call(keybinding.unbind);
      context.surface().selectAll(".layer-mapdata .selected").classed("selected hover", false);
      context.map().on("drawn.select-data", null);
      context.ui().sidebar.hide();
    };
    return mode;
  }

  // modules/behavior/select.js
  function behaviorSelect(context) {
    var _tolerancePx = 4;
    var _lastMouseEvent = null;
    var _showMenu = false;
    var _downPointers = {};
    var _longPressTimeout = null;
    var _lastInteractionType = null;
    var _multiselectionPointerId = null;
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    function keydown(d3_event) {
      if (d3_event.keyCode === 32) {
        var activeNode = document.activeElement;
        if (activeNode && new Set(["INPUT", "TEXTAREA"]).has(activeNode.nodeName))
          return;
      }
      if (d3_event.keyCode === 93 || d3_event.keyCode === 32) {
        d3_event.preventDefault();
      }
      if (d3_event.repeat)
        return;
      cancelLongPress();
      if (d3_event.shiftKey) {
        context.surface().classed("behavior-multiselect", true);
      }
      if (d3_event.keyCode === 32) {
        if (!_downPointers.spacebar && _lastMouseEvent) {
          cancelLongPress();
          _longPressTimeout = window.setTimeout(didLongPress, 500, "spacebar", "spacebar");
          _downPointers.spacebar = {
            firstEvent: _lastMouseEvent,
            lastEvent: _lastMouseEvent
          };
        }
      }
    }
    function keyup(d3_event) {
      cancelLongPress();
      if (!d3_event.shiftKey) {
        context.surface().classed("behavior-multiselect", false);
      }
      if (d3_event.keyCode === 93) {
        d3_event.preventDefault();
        _lastInteractionType = "menukey";
        contextmenu(d3_event);
      } else if (d3_event.keyCode === 32) {
        var pointer = _downPointers.spacebar;
        if (pointer) {
          delete _downPointers.spacebar;
          if (pointer.done)
            return;
          d3_event.preventDefault();
          _lastInteractionType = "spacebar";
          click(pointer.firstEvent, pointer.lastEvent, "spacebar");
        }
      }
    }
    function pointerdown(d3_event) {
      var id2 = (d3_event.pointerId || "mouse").toString();
      cancelLongPress();
      if (d3_event.buttons && d3_event.buttons !== 1)
        return;
      context.ui().closeEditMenu();
      _longPressTimeout = window.setTimeout(didLongPress, 500, id2, "longdown-" + (d3_event.pointerType || "mouse"));
      _downPointers[id2] = {
        firstEvent: d3_event,
        lastEvent: d3_event
      };
    }
    function didLongPress(id2, interactionType) {
      var pointer = _downPointers[id2];
      if (!pointer)
        return;
      for (var i2 in _downPointers) {
        _downPointers[i2].done = true;
      }
      _longPressTimeout = null;
      _lastInteractionType = interactionType;
      _showMenu = true;
      click(pointer.firstEvent, pointer.lastEvent, id2);
    }
    function pointermove(d3_event) {
      var id2 = (d3_event.pointerId || "mouse").toString();
      if (_downPointers[id2]) {
        _downPointers[id2].lastEvent = d3_event;
      }
      if (!d3_event.pointerType || d3_event.pointerType === "mouse") {
        _lastMouseEvent = d3_event;
        if (_downPointers.spacebar) {
          _downPointers.spacebar.lastEvent = d3_event;
        }
      }
    }
    function pointerup(d3_event) {
      var id2 = (d3_event.pointerId || "mouse").toString();
      var pointer = _downPointers[id2];
      if (!pointer)
        return;
      delete _downPointers[id2];
      if (_multiselectionPointerId === id2) {
        _multiselectionPointerId = null;
      }
      if (pointer.done)
        return;
      click(pointer.firstEvent, d3_event, id2);
    }
    function pointercancel(d3_event) {
      var id2 = (d3_event.pointerId || "mouse").toString();
      if (!_downPointers[id2])
        return;
      delete _downPointers[id2];
      if (_multiselectionPointerId === id2) {
        _multiselectionPointerId = null;
      }
    }
    function contextmenu(d3_event) {
      d3_event.preventDefault();
      if (!+d3_event.clientX && !+d3_event.clientY) {
        if (_lastMouseEvent) {
          d3_event.sourceEvent = _lastMouseEvent;
        } else {
          return;
        }
      } else {
        _lastMouseEvent = d3_event;
        _lastInteractionType = "rightclick";
      }
      _showMenu = true;
      click(d3_event, d3_event);
    }
    function click(firstEvent, lastEvent, pointerId) {
      cancelLongPress();
      var mapNode = context.container().select(".main-map").node();
      var pointGetter = utilFastMouse(mapNode);
      var p1 = pointGetter(firstEvent);
      var p2 = pointGetter(lastEvent);
      var dist = vecLength(p1, p2);
      if (dist > _tolerancePx || !mapContains(lastEvent)) {
        resetProperties();
        return;
      }
      var targetDatum = lastEvent.target.__data__;
      var multiselectEntityId;
      if (!_multiselectionPointerId) {
        var selectPointerInfo = pointerDownOnSelection(pointerId);
        if (selectPointerInfo) {
          _multiselectionPointerId = selectPointerInfo.pointerId;
          multiselectEntityId = !selectPointerInfo.selected && selectPointerInfo.entityId;
          _downPointers[selectPointerInfo.pointerId].done = true;
        }
      }
      var isMultiselect = context.mode().id === "select" && (lastEvent && lastEvent.shiftKey || context.surface().select(".lasso").node() || _multiselectionPointerId && !multiselectEntityId);
      processClick(targetDatum, isMultiselect, p2, multiselectEntityId);
      function mapContains(event) {
        var rect = mapNode.getBoundingClientRect();
        return event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom;
      }
      function pointerDownOnSelection(skipPointerId) {
        var mode = context.mode();
        var selectedIDs = mode.id === "select" ? mode.selectedIDs() : [];
        for (var pointerId2 in _downPointers) {
          if (pointerId2 === "spacebar" || pointerId2 === skipPointerId)
            continue;
          var pointerInfo = _downPointers[pointerId2];
          var p12 = pointGetter(pointerInfo.firstEvent);
          var p22 = pointGetter(pointerInfo.lastEvent);
          if (vecLength(p12, p22) > _tolerancePx)
            continue;
          var datum2 = pointerInfo.firstEvent.target.__data__;
          var entity2 = datum2 && datum2.properties && datum2.properties.entity || datum2;
          if (context.graph().hasEntity(entity2.id)) {
            return {
              pointerId: pointerId2,
              entityId: entity2.id,
              selected: selectedIDs.indexOf(entity2.id) !== -1
            };
          }
        }
        return null;
      }
    }
    function processClick(datum2, isMultiselect, point5, alsoSelectId) {
      var mode = context.mode();
      var showMenu = _showMenu;
      var interactionType = _lastInteractionType;
      var entity2 = datum2 && datum2.properties && datum2.properties.entity;
      if (entity2)
        datum2 = entity2;
      if (datum2 && datum2.type === "midpoint") {
        datum2 = datum2.parents[0];
      }
      var newMode;
      if (datum2 && datum2.__fbid__) {
        context.selectedNoteID(null).selectedErrorID(null).enter(modeRapidSelectFeatures(context, datum2));
      } else if (datum2 instanceof osmEntity) {
        var selectedIDs = context.selectedIDs();
        context.selectedNoteID(null);
        context.selectedErrorID(null);
        if (!isMultiselect) {
          if (!showMenu || selectedIDs.length <= 1 || selectedIDs.indexOf(datum2.id) === -1) {
            if (alsoSelectId === datum2.id)
              alsoSelectId = null;
            selectedIDs = (alsoSelectId ? [alsoSelectId] : []).concat([datum2.id]);
            newMode = mode.id === "select" ? mode.selectedIDs(selectedIDs) : modeSelect(context, selectedIDs).selectBehavior(behavior);
            context.enter(newMode);
          }
        } else {
          if (selectedIDs.indexOf(datum2.id) !== -1) {
            if (!showMenu) {
              selectedIDs = selectedIDs.filter(function(id2) {
                return id2 !== datum2.id;
              });
              newMode = selectedIDs.length ? mode.selectedIDs(selectedIDs) : modeBrowse(context).selectBehavior(behavior);
              context.enter(newMode);
            }
          } else {
            selectedIDs = selectedIDs.concat([datum2.id]);
            newMode = mode.selectedIDs(selectedIDs);
            context.enter(newMode);
          }
        }
      } else if (datum2 && datum2.__featurehash__ && !isMultiselect) {
        context.selectedNoteID(null).enter(modeSelectData(context, datum2));
      } else if (datum2 instanceof osmNote && !isMultiselect) {
        context.selectedNoteID(datum2.id).enter(modeSelectNote(context, datum2.id));
      } else if (datum2 instanceof QAItem & !isMultiselect) {
        context.selectedErrorID(datum2.id).enter(modeSelectError(context, datum2.id, datum2.service));
      } else {
        context.selectedNoteID(null);
        context.selectedErrorID(null);
        if (!isMultiselect && mode.id !== "browse") {
          context.enter(modeBrowse(context));
        }
      }
      context.ui().closeEditMenu();
      if (showMenu)
        context.ui().showEditMenu(point5, interactionType);
      resetProperties();
    }
    function cancelLongPress() {
      if (_longPressTimeout)
        window.clearTimeout(_longPressTimeout);
      _longPressTimeout = null;
    }
    function resetProperties() {
      cancelLongPress();
      _showMenu = false;
      _lastInteractionType = null;
    }
    function behavior(selection2) {
      resetProperties();
      _lastMouseEvent = context.map().lastPointerEvent();
      select_default2(window).on("keydown.select", keydown).on("keyup.select", keyup).on(_pointerPrefix + "move.select", pointermove, true).on(_pointerPrefix + "up.select", pointerup, true).on("pointercancel.select", pointercancel, true).on("contextmenu.select-window", function(d3_event) {
        var e3 = d3_event;
        if (+e3.clientX === 0 && +e3.clientY === 0) {
          d3_event.preventDefault();
        }
      });
      selection2.on(_pointerPrefix + "down.select", pointerdown).on("contextmenu.select", contextmenu);
    }
    behavior.off = function(selection2) {
      cancelLongPress();
      select_default2(window).on("keydown.select", null).on("keyup.select", null).on("contextmenu.select-window", null).on(_pointerPrefix + "move.select", null, true).on(_pointerPrefix + "up.select", null, true).on("pointercancel.select", null, true);
      selection2.on(_pointerPrefix + "down.select", null).on("contextmenu.select", null);
      context.surface().classed("behavior-multiselect", false);
    };
    return behavior;
  }

  // modules/modes/select.js
  function modeSelect(context, selectedIDs) {
    var mode = {
      id: "select",
      button: "browse"
    };
    var keybinding = utilKeybinding("select");
    var _breatheBehavior = behaviorBreathe(context);
    var _modeDragNode = modeDragNode(context);
    var _selectBehavior;
    var _behaviors = [];
    var _operations = [];
    var _newFeature = false;
    var _follow = false;
    var _focusedParentWayId;
    var _focusedVertexIds;
    function singular() {
      if (selectedIDs && selectedIDs.length === 1) {
        return context.hasEntity(selectedIDs[0]);
      }
    }
    function selectedEntities() {
      return selectedIDs.map(function(id2) {
        return context.hasEntity(id2);
      }).filter(Boolean);
    }
    function checkSelectedIDs() {
      var ids = [];
      if (Array.isArray(selectedIDs)) {
        ids = selectedIDs.filter(function(id2) {
          return context.hasEntity(id2);
        });
      }
      if (!ids.length) {
        context.enter(modeBrowse(context));
        return false;
      } else if (selectedIDs.length > 1 && ids.length === 1 || selectedIDs.length === 1 && ids.length > 1) {
        context.enter(modeSelect(context, ids));
        return false;
      }
      selectedIDs = ids;
      return true;
    }
    function parentWaysIdsOfSelection(onlyCommonParents) {
      var graph3 = context.graph();
      var parents = [];
      for (var i2 = 0; i2 < selectedIDs.length; i2++) {
        var entity2 = context.hasEntity(selectedIDs[i2]);
        if (!entity2 || entity2.geometry(graph3) !== "vertex") {
          return [];
        }
        var currParents = graph3.parentWays(entity2).map(function(w) {
          return w.id;
        });
        if (!parents.length) {
          parents = currParents;
          continue;
        }
        parents = (onlyCommonParents ? utilArrayIntersection : utilArrayUnion)(parents, currParents);
        if (!parents.length) {
          return [];
        }
      }
      return parents;
    }
    function childNodeIdsOfSelection(onlyCommon) {
      var graph3 = context.graph();
      var childs = [];
      for (var i2 = 0; i2 < selectedIDs.length; i2++) {
        var entity2 = context.hasEntity(selectedIDs[i2]);
        if (!entity2 || !["area", "line"].includes(entity2.geometry(graph3))) {
          return [];
        }
        var currChilds = graph3.childNodes(entity2).map(function(node) {
          return node.id;
        });
        if (!childs.length) {
          childs = currChilds;
          continue;
        }
        childs = (onlyCommon ? utilArrayIntersection : utilArrayUnion)(childs, currChilds);
        if (!childs.length) {
          return [];
        }
      }
      return childs;
    }
    function checkFocusedParent() {
      if (_focusedParentWayId) {
        var parents = parentWaysIdsOfSelection(true);
        if (parents.indexOf(_focusedParentWayId) === -1)
          _focusedParentWayId = null;
      }
    }
    function parentWayIdForVertexNavigation() {
      var parentIds = parentWaysIdsOfSelection(true);
      if (_focusedParentWayId && parentIds.indexOf(_focusedParentWayId) !== -1) {
        return _focusedParentWayId;
      }
      return parentIds.length ? parentIds[0] : null;
    }
    mode.selectedIDs = function(val) {
      if (!arguments.length)
        return selectedIDs;
      selectedIDs = val;
      return mode;
    };
    mode.zoomToSelected = function() {
      context.map().zoomToEase(selectedEntities());
    };
    mode.newFeature = function(val) {
      if (!arguments.length)
        return _newFeature;
      _newFeature = val;
      return mode;
    };
    mode.selectBehavior = function(val) {
      if (!arguments.length)
        return _selectBehavior;
      _selectBehavior = val;
      return mode;
    };
    mode.follow = function(val) {
      if (!arguments.length)
        return _follow;
      _follow = val;
      return mode;
    };
    function loadOperations() {
      _operations.forEach(function(operation) {
        if (operation.behavior) {
          context.uninstall(operation.behavior);
        }
      });
      _operations = Object.values(operations_exports).map(function(o2) {
        return o2(context, selectedIDs);
      }).filter(function(o2) {
        return o2.id !== "delete" && o2.id !== "downgrade" && o2.id !== "copy";
      }).concat([
        operationCopy(context, selectedIDs),
        operationDowngrade(context, selectedIDs),
        operationDelete(context, selectedIDs)
      ]).filter(function(operation) {
        return operation.available();
      });
      _operations.forEach(function(operation) {
        if (operation.behavior) {
          context.install(operation.behavior);
        }
      });
      context.ui().closeEditMenu();
    }
    mode.operations = function() {
      return _operations;
    };
    mode.enter = function() {
      if (!checkSelectedIDs())
        return;
      context.features().forceVisible(selectedIDs);
      _modeDragNode.restoreSelectedIDs(selectedIDs);
      loadOperations();
      if (!_behaviors.length) {
        if (!_selectBehavior)
          _selectBehavior = behaviorSelect(context);
        _behaviors = [behaviorPaste(context), _breatheBehavior, behaviorHover(context).on("hover", context.ui().sidebar.hoverModeSelect), _selectBehavior, behaviorLasso(context), _modeDragNode.behavior, modeDragNote(context).behavior];
      }
      _behaviors.forEach(context.install);
      keybinding.on(_t("inspector.zoom_to.key"), mode.zoomToSelected).on(["[", "pgup"], previousVertex).on(["]", "pgdown"], nextVertex).on(["{", uiCmd("\u2318["), "home"], firstVertex).on(["}", uiCmd("\u2318]"), "end"], lastVertex).on(uiCmd("\u21E7\u2190"), nudgeSelection([-10, 0])).on(uiCmd("\u21E7\u2191"), nudgeSelection([0, -10])).on(uiCmd("\u21E7\u2192"), nudgeSelection([10, 0])).on(uiCmd("\u21E7\u2193"), nudgeSelection([0, 10])).on(uiCmd("\u21E7\u2325\u2190"), nudgeSelection([-100, 0])).on(uiCmd("\u21E7\u2325\u2191"), nudgeSelection([0, -100])).on(uiCmd("\u21E7\u2325\u2192"), nudgeSelection([100, 0])).on(uiCmd("\u21E7\u2325\u2193"), nudgeSelection([0, 100])).on(utilKeybinding.plusKeys.map(function(key) {
        return uiCmd("\u21E7" + key);
      }), scaleSelection(1.05)).on(utilKeybinding.plusKeys.map(function(key) {
        return uiCmd("\u21E7\u2325" + key);
      }), scaleSelection(Math.pow(1.05, 5))).on(utilKeybinding.minusKeys.map(function(key) {
        return uiCmd("\u21E7" + key);
      }), scaleSelection(1 / 1.05)).on(utilKeybinding.minusKeys.map(function(key) {
        return uiCmd("\u21E7\u2325" + key);
      }), scaleSelection(1 / Math.pow(1.05, 5))).on(["\\", "pause"], focusNextParent).on(uiCmd("\u2318\u2191"), selectParent).on(uiCmd("\u2318\u2193"), selectChild).on("\u238B", esc2, true);
      select_default2(document).call(keybinding);
      context.ui().sidebar.select(selectedIDs, _newFeature);
      context.history().on("change.select", function() {
        loadOperations();
        selectElements();
      }).on("undone.select", checkSelectedIDs).on("redone.select", checkSelectedIDs);
      context.map().on("drawn.select", selectElements).on("crossEditableZoom.select", function() {
        selectElements();
        _breatheBehavior.restartIfNeeded(context.surface());
      });
      context.map().doubleUpHandler().on("doubleUp.modeSelect", didDoubleUp);
      selectElements();
      if (_follow) {
        var extent6 = utilTotalExtent(selectedIDs, context.graph());
        var loc = extent6.center();
        context.map().centerEase(loc);
        _follow = false;
      }
      function nudgeSelection(delta) {
        return function() {
          if (!context.map().withinEditableZoom())
            return;
          var moveOp = operationMove(context, selectedIDs);
          if (moveOp.disabled()) {
            context.ui().flash.duration(4e3).iconName("#iD-operation-" + moveOp.id).iconClass("operation disabled").label(moveOp.tooltip)();
          } else {
            context.perform(actionMove(selectedIDs, delta, context.projection), moveOp.annotation());
            context.validator().validate();
          }
        };
      }
      function scaleSelection(factor) {
        return function() {
          if (!context.map().withinEditableZoom())
            return;
          var nodes = utilGetAllNodes(selectedIDs, context.graph());
          var isUp = factor > 1;
          if (nodes.length <= 1)
            return;
          var extent7 = utilTotalExtent(selectedIDs, context.graph());
          function scalingDisabled() {
            var allowLargeEdits = corePreferences("rapid-internal-feature.allowLargeEdits") === "true";
            if (tooSmall()) {
              return "too_small";
            } else if (!allowLargeEdits && extent7.percentContainedIn(context.map().extent()) < 0.8) {
              return "too_large";
            } else if (someMissing() || selectedIDs.some(incompleteRelation)) {
              return "not_downloaded";
            } else if (selectedIDs.some(context.hasHiddenConnections)) {
              return "connected_to_hidden";
            }
            return false;
            function tooSmall() {
              if (isUp)
                return false;
              var dLon = Math.abs(extent7.max[0] - extent7.min[0]);
              var dLat = Math.abs(extent7.max[1] - extent7.min[1]);
              return dLon < geoMetersToLon(1, extent7.max[1]) && dLat < geoMetersToLat(1);
            }
            function someMissing() {
              if (context.inIntro())
                return false;
              var osm = context.connection();
              if (osm) {
                var missing = nodes.filter(function(n2) {
                  return !osm.isDataLoaded(n2.loc);
                });
                if (missing.length) {
                  missing.forEach(function(loc2) {
                    context.loadTileAtLoc(loc2);
                  });
                  return true;
                }
              }
              return false;
            }
            function incompleteRelation(id2) {
              var entity2 = context.entity(id2);
              return entity2.type === "relation" && !entity2.isComplete(context.graph());
            }
          }
          var disabled = scalingDisabled();
          if (disabled) {
            var multi = selectedIDs.length === 1 ? "single" : "multiple";
            context.ui().flash.duration(4e3).iconName("#iD-icon-no").iconClass("operation disabled").label(_t("operations.scale." + disabled + "." + multi))();
          } else {
            var pivot = context.projection(extent7.center());
            var annotation = _t("operations.scale.annotation." + (isUp ? "up" : "down") + ".feature", {
              n: selectedIDs.length
            });
            context.perform(actionScale(selectedIDs, pivot, factor, context.projection), annotation);
            context.validator().validate();
          }
        };
      }
      function didDoubleUp(d3_event, loc2) {
        if (!context.map().withinEditableZoom())
          return;
        var target = select_default2(d3_event.target);
        var datum2 = target.datum();
        var entity2 = datum2 && datum2.properties && datum2.properties.entity;
        if (!entity2)
          return;
        if (entity2 instanceof osmWay && target.classed("target")) {
          var choice = geoChooseEdge(context.graph().childNodes(entity2), loc2, context.projection);
          var prev = entity2.nodes[choice.index - 1];
          var next = entity2.nodes[choice.index];
          context.perform(actionAddMidpoint({
            loc: choice.loc,
            edge: [prev, next]
          }, osmNode()), _t("operations.add.annotation.vertex"));
          context.validator().validate();
        } else if (entity2.type === "midpoint") {
          context.perform(actionAddMidpoint({
            loc: entity2.loc,
            edge: entity2.edge
          }, osmNode()), _t("operations.add.annotation.vertex"));
          context.validator().validate();
        }
      }
      function selectElements() {
        if (!checkSelectedIDs())
          return;
        var surface = context.surface();
        surface.selectAll(".selected-member").classed("selected-member", false);
        surface.selectAll(".selected").classed("selected", false);
        surface.selectAll(".related").classed("related", false);
        checkFocusedParent();
        if (_focusedParentWayId) {
          surface.selectAll(utilEntitySelector([_focusedParentWayId])).classed("related", true);
        }
        if (context.map().withinEditableZoom()) {
          surface.selectAll(utilDeepMemberSelector(selectedIDs, context.graph(), true)).classed("selected-member", true);
          surface.selectAll(utilEntityOrDeepMemberSelector(selectedIDs, context.graph())).classed("selected", true);
        }
      }
      function esc2() {
        if (context.container().select(".combobox").size())
          return;
        context.enter(modeBrowse(context));
      }
      function firstVertex(d3_event) {
        d3_event.preventDefault();
        var entity2 = singular();
        var parentId = parentWayIdForVertexNavigation();
        var way;
        if (entity2 && entity2.type === "way") {
          way = entity2;
        } else if (parentId) {
          way = context.entity(parentId);
        }
        _focusedParentWayId = way && way.id;
        if (way) {
          context.enter(mode.selectedIDs([way.first()]).follow(true));
        }
      }
      function lastVertex(d3_event) {
        d3_event.preventDefault();
        var entity2 = singular();
        var parentId = parentWayIdForVertexNavigation();
        var way;
        if (entity2 && entity2.type === "way") {
          way = entity2;
        } else if (parentId) {
          way = context.entity(parentId);
        }
        _focusedParentWayId = way && way.id;
        if (way) {
          context.enter(mode.selectedIDs([way.last()]).follow(true));
        }
      }
      function previousVertex(d3_event) {
        d3_event.preventDefault();
        var parentId = parentWayIdForVertexNavigation();
        _focusedParentWayId = parentId;
        if (!parentId)
          return;
        var way = context.entity(parentId);
        var length = way.nodes.length;
        var curr = way.nodes.indexOf(selectedIDs[0]);
        var index = -1;
        if (curr > 0) {
          index = curr - 1;
        } else if (way.isClosed()) {
          index = length - 2;
        }
        if (index !== -1) {
          context.enter(mode.selectedIDs([way.nodes[index]]).follow(true));
        }
      }
      function nextVertex(d3_event) {
        d3_event.preventDefault();
        var parentId = parentWayIdForVertexNavigation();
        _focusedParentWayId = parentId;
        if (!parentId)
          return;
        var way = context.entity(parentId);
        var length = way.nodes.length;
        var curr = way.nodes.indexOf(selectedIDs[0]);
        var index = -1;
        if (curr < length - 1) {
          index = curr + 1;
        } else if (way.isClosed()) {
          index = 0;
        }
        if (index !== -1) {
          context.enter(mode.selectedIDs([way.nodes[index]]).follow(true));
        }
      }
      function focusNextParent(d3_event) {
        d3_event.preventDefault();
        var parents = parentWaysIdsOfSelection(true);
        if (!parents || parents.length < 2)
          return;
        var index = parents.indexOf(_focusedParentWayId);
        if (index < 0 || index > parents.length - 2) {
          _focusedParentWayId = parents[0];
        } else {
          _focusedParentWayId = parents[index + 1];
        }
        var surface = context.surface();
        surface.selectAll(".related").classed("related", false);
        if (_focusedParentWayId) {
          surface.selectAll(utilEntitySelector([_focusedParentWayId])).classed("related", true);
        }
      }
      function selectParent(d3_event) {
        d3_event.preventDefault();
        var currentSelectedIds = mode.selectedIDs();
        var parentIds = _focusedParentWayId ? [_focusedParentWayId] : parentWaysIdsOfSelection(false);
        if (!parentIds.length)
          return;
        context.enter(mode.selectedIDs(parentIds));
        _focusedVertexIds = currentSelectedIds;
      }
      function selectChild(d3_event) {
        d3_event.preventDefault();
        var currentSelectedIds = mode.selectedIDs();
        var childIds = _focusedVertexIds ? _focusedVertexIds.filter(function(id2) {
          return context.hasEntity(id2);
        }) : childNodeIdsOfSelection(true);
        if (!childIds || !childIds.length)
          return;
        if (currentSelectedIds.length === 1)
          _focusedParentWayId = currentSelectedIds[0];
        context.enter(mode.selectedIDs(childIds));
      }
    };
    mode.exit = function() {
      _newFeature = false;
      _focusedVertexIds = null;
      _operations.forEach(function(operation) {
        if (operation.behavior) {
          context.uninstall(operation.behavior);
        }
      });
      _operations = [];
      _behaviors.forEach(context.uninstall);
      select_default2(document).call(keybinding.unbind);
      context.ui().closeEditMenu();
      context.history().on("change.select", null).on("undone.select", null).on("redone.select", null);
      var surface = context.surface();
      surface.selectAll(".selected-member").classed("selected-member", false);
      surface.selectAll(".selected").classed("selected", false);
      surface.selectAll(".highlighted").classed("highlighted", false);
      surface.selectAll(".related").classed("related", false);
      context.map().on("drawn.select", null);
      context.ui().sidebar.hide();
      context.features().forceVisible([]);
      var entity2 = singular();
      if (_newFeature && entity2 && entity2.type === "relation" && Object.keys(entity2.tags).length === 0 && context.graph().parentRelations(entity2).length === 0 && (entity2.members.length === 0 || entity2.members.length === 1 && !entity2.members[0].role)) {
        var deleteAction = actionDeleteRelation(entity2.id, true);
        context.perform(deleteAction, _t("operations.delete.annotation.relation"));
        context.validator().validate();
      }
    };
    return mode;
  }

  // modules/behavior/lasso.js
  function behaviorLasso(context) {
    var _pointerPrefix = "PointerEvent" in window ? "pointer" : "mouse";
    var behavior = function behavior2(selection2) {
      var lasso;
      function pointerdown(d3_event) {
        var button = 0;
        if (d3_event.button === button && d3_event.shiftKey === true) {
          lasso = null;
          select_default2(window).on(_pointerPrefix + "move.lasso", pointermove).on(_pointerPrefix + "up.lasso", pointerup);
          d3_event.stopPropagation();
        }
      }
      function pointermove() {
        if (!lasso) {
          lasso = uiLasso(context);
          context.surface().call(lasso);
        }
        lasso.p(context.map().mouse());
      }
      function normalize2(a, b2) {
        return [[Math.min(a[0], b2[0]), Math.min(a[1], b2[1])], [Math.max(a[0], b2[0]), Math.max(a[1], b2[1])]];
      }
      function lassoed() {
        if (!lasso)
          return [];
        var graph3 = context.graph();
        var limitToNodes;
        if (context.map().editableDataEnabled(true) && context.map().isInWideSelection()) {
          limitToNodes = new Set(utilGetAllNodes(context.selectedIDs(), graph3));
        } else if (!context.map().editableDataEnabled()) {
          return [];
        }
        var extent6 = lasso.extent();
        var bounds = normalize2(context.projection.invert(extent6.min), context.projection.invert(extent6.max));
        var wgs84Extent = new Extent(bounds[0], bounds[1]);
        var intersects4 = context.history().intersects(wgs84Extent).filter(function(entity2) {
          return entity2.type === "node" && (!limitToNodes || limitToNodes.has(entity2)) && geomPointInPolygon(context.projection(entity2.loc), lasso.coordinates) && !context.features().isHidden(entity2, graph3, entity2.geometry(graph3));
        });
        intersects4.sort(function(node1, node2) {
          var parents1 = graph3.parentWays(node1);
          var parents2 = graph3.parentWays(node2);
          if (parents1.length && parents2.length) {
            var sharedParents = utilArrayIntersection(parents1, parents2);
            if (sharedParents.length) {
              var sharedParentNodes = sharedParents[0].nodes;
              return sharedParentNodes.indexOf(node1.id) - sharedParentNodes.indexOf(node2.id);
            } else {
              return parseFloat(parents1[0].id.slice(1)) - parseFloat(parents2[0].id.slice(1));
            }
          } else if (parents1.length || parents2.length) {
            return parents1.length - parents2.length;
          }
          return node1.loc[0] - node2.loc[0];
        });
        return intersects4.map(function(entity2) {
          return entity2.id;
        });
      }
      function pointerup() {
        select_default2(window).on(_pointerPrefix + "move.lasso", null).on(_pointerPrefix + "up.lasso", null);
        if (!lasso)
          return;
        var ids = lassoed();
        lasso.close();
        if (ids.length) {
          context.enter(modeSelect(context, ids));
        }
      }
      selection2.on(_pointerPrefix + "down.lasso", pointerdown);
    };
    behavior.off = function(selection2) {
      selection2.on(_pointerPrefix + "down.lasso", null);
    };
    return behavior;
  }

  // modules/modes/browse.js
  function modeBrowse(context) {
    var mode = {
      button: "browse",
      id: "browse",
      title: _t("modes.browse.title"),
      description: _t("modes.browse.description")
    };
    var sidebar;
    var _selectBehavior;
    var _behaviors = [];
    mode.selectBehavior = function(val) {
      if (!arguments.length)
        return _selectBehavior;
      _selectBehavior = val;
      return mode;
    };
    mode.enter = function() {
      if (!_behaviors.length) {
        if (!_selectBehavior)
          _selectBehavior = behaviorSelect(context);
        _behaviors = [behaviorPaste(context), behaviorHover(context).on("hover", context.ui().sidebar.hover), _selectBehavior, behaviorLasso(context), modeDragNode(context).behavior, modeDragNote(context).behavior];
      }
      _behaviors.forEach(context.install);
      if (document.activeElement && document.activeElement.blur) {
        document.activeElement.blur();
      }
      if (sidebar) {
        context.ui().sidebar.show(sidebar);
      } else {
        context.ui().sidebar.select(null);
      }
    };
    mode.exit = function() {
      context.ui().sidebar.hover.cancel();
      _behaviors.forEach(context.uninstall);
      if (sidebar) {
        context.ui().sidebar.hide();
      }
    };
    mode.sidebar = function(_2) {
      if (!arguments.length)
        return sidebar;
      sidebar = _2;
      return mode;
    };
    mode.operations = function() {
      return [operationPaste(context)];
    };
    return mode;
  }

  // modules/behavior/add_way.js
  function behaviorAddWay(context) {
    var dispatch12 = dispatch_default("start", "startFromWay", "startFromNode");
    var draw = behaviorDraw(context);
    function behavior(surface) {
      draw.on("click", function() {
        dispatch12.apply("start", this, arguments);
      }).on("clickWay", function() {
        dispatch12.apply("startFromWay", this, arguments);
      }).on("clickNode", function() {
        dispatch12.apply("startFromNode", this, arguments);
      }).on("cancel", behavior.cancel).on("finish", behavior.cancel);
      context.map().dblclickZoomEnable(false);
      surface.call(draw);
    }
    behavior.off = function(surface) {
      surface.call(draw.off);
    };
    behavior.cancel = function() {
      window.setTimeout(function() {
        context.map().dblclickZoomEnable(true);
      }, 1e3);
      context.enter(modeBrowse(context));
    };
    return utilRebind(behavior, dispatch12, "on");
  }

  // modules/behavior/hash.js
  function behaviorHash(context) {
    var _cachedHash = null;
    var _latitudeLimit = 90 - 1e-8;
    function computedHashParameters() {
      var map2 = context.map();
      var center = map2.center();
      var zoom = map2.zoom();
      var precision2 = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));
      var oldParams = utilObjectOmit(utilStringQs(window.location.hash), ["comment", "source", "hashtags", "walkthrough"]);
      var newParams = {};
      delete oldParams.id;
      var selected = context.selectedIDs().filter(function(id2) {
        return context.hasEntity(id2);
      });
      if (selected.length) {
        newParams.id = selected.join(",");
      }
      newParams.map = zoom.toFixed(2) + "/" + center[1].toFixed(precision2) + "/" + center[0].toFixed(precision2);
      return Object.assign(oldParams, newParams);
    }
    function computedHash() {
      return "#" + utilQsString(computedHashParameters(), true);
    }
    function computedTitle(includeChangeCount) {
      var baseTitle = context.documentTitleBase() || "iD";
      var contextual;
      var changeCount;
      var titleID;
      var selected = context.selectedIDs().filter(function(id2) {
        return context.hasEntity(id2);
      });
      if (selected.length) {
        var firstLabel = utilDisplayLabel(context.entity(selected[0]), context.graph());
        if (selected.length > 1) {
          contextual = _t("title.labeled_and_more", {
            labeled: firstLabel,
            count: selected.length - 1
          });
        } else {
          contextual = firstLabel;
        }
        titleID = "context";
      }
      if (includeChangeCount) {
        changeCount = context.history().difference().summary().length;
        if (changeCount > 0) {
          titleID = contextual ? "changes_context" : "changes";
        }
      }
      if (titleID) {
        return _t("title.format." + titleID, {
          changes: changeCount,
          base: baseTitle,
          context: contextual
        });
      }
      return baseTitle;
    }
    function updateTitle(includeChangeCount) {
      if (!context.setsDocumentTitle())
        return;
      var newTitle = computedTitle(includeChangeCount);
      if (document.title !== newTitle) {
        document.title = newTitle;
      }
    }
    function updateHashIfNeeded() {
      if (context.inIntro())
        return;
      var latestHash = computedHash();
      if (_cachedHash !== latestHash) {
        _cachedHash = latestHash;
        window.history.replaceState(null, computedTitle(false), latestHash);
        updateTitle(true);
      }
    }
    var _throttledUpdate = throttle_default(updateHashIfNeeded, 500);
    var _throttledUpdateTitle = throttle_default(function() {
      updateTitle(true);
    }, 500);
    function hashchange() {
      if (window.location.hash === _cachedHash)
        return;
      _cachedHash = window.location.hash;
      var q2 = utilStringQs(_cachedHash);
      var mapArgs = (q2.map || "").split("/").map(Number);
      if (mapArgs.length < 3 || mapArgs.some(isNaN)) {
        updateHashIfNeeded();
      } else {
        if (_cachedHash === computedHash())
          return;
        var mode = context.mode();
        context.map().centerZoom([mapArgs[2], Math.min(_latitudeLimit, Math.max(-_latitudeLimit, mapArgs[1]))], mapArgs[0]);
        if (q2.id && mode) {
          var ids = q2.id.split(",").filter(function(id2) {
            return context.hasEntity(id2);
          });
          if (ids.length && (mode.id === "browse" || mode.id === "select" && !utilArrayIdentical(mode.selectedIDs(), ids))) {
            context.enter(modeSelect(context, ids));
            return;
          }
        }
        var center = context.map().center();
        var dist = geoSphericalDistance(center, [mapArgs[2], mapArgs[1]]);
        var maxdist = 500;
        if (mode && mode.id.match(/^draw/) !== null && dist > maxdist) {
          context.enter(modeBrowse(context));
          return;
        }
      }
    }
    function behavior() {
      context.map().on("move.behaviorHash", _throttledUpdate);
      context.history().on("change.behaviorHash", _throttledUpdateTitle);
      context.on("enter.behaviorHash", _throttledUpdate);
      select_default2(window).on("hashchange.behaviorHash", hashchange);
      if (window.location.hash) {
        var q2 = utilStringQs(window.location.hash);
        if (q2.id) {
          context.zoomToEntity(q2.id.split(",")[0], !q2.map);
        }
        if (q2.walkthrough === "true") {
          behavior.startWalkthrough = true;
        }
        if (q2.map) {
          behavior.hadHash = true;
        }
        hashchange();
        updateTitle(false);
      }
    }
    behavior.off = function() {
      _throttledUpdate.cancel();
      _throttledUpdateTitle.cancel();
      context.map().on("move.behaviorHash", null);
      context.on("enter.behaviorHash", null);
      select_default2(window).on("hashchange.behaviorHash", null);
      window.location.hash = "";
    };
    return behavior;
  }

  // node_modules/d3-brush/src/brush.js
  function number1(e3) {
    return [+e3[0], +e3[1]];
  }
  function number22(e3) {
    return [number1(e3[0]), number1(e3[1])];
  }
  var X3 = {
    name: "x",
    handles: ["w", "e"].map(type2),
    input: function input(x2, e3) {
      return x2 == null ? null : [[+x2[0], e3[0][1]], [+x2[1], e3[1][1]]];
    },
    output: function output(xy) {
      return xy && [xy[0][0], xy[1][0]];
    }
  };
  var Y = {
    name: "y",
    handles: ["n", "s"].map(type2),
    input: function input2(y, e3) {
      return y == null ? null : [[e3[0][0], +y[0]], [e3[1][0], +y[1]]];
    },
    output: function output2(xy) {
      return xy && [xy[0][1], xy[1][1]];
    }
  };
  var XY = {
    name: "xy",
    handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type2),
    input: function input3(xy) {
      return xy == null ? null : number22(xy);
    },
    output: function output3(xy) {
      return xy;
    }
  };
  function type2(t) {
    return {
      type: t
    };
  }

  // modules/index.js
  window.toBase64 = function(text) {
    return btoa(encodeURIComponent(text).replace(/%([0-9A-F]{2})/g, function(_2, g1) {
      return String.fromCharCode(+"0x".concat(g1));
    })).replace(/[=]/g, "").replace(/\+/g, "-").replace(/\//g, "_");
  };
  window.fromBase64 = function(b64) {
    return decodeURIComponent(atob(b64.replace(/_/g, "/").replace(/-/g, "+")).split("").map(function(c2) {
      return "%".concat("00".concat(c2.charCodeAt(0).toString(16)).slice(-2));
    }).join(""));
  };
  var debug = false;
  var d3 = {
    dispatch: dispatch_default,
    geoMercator: mercator_default,
    geoProjection: projection,
    polygonArea: area_default3,
    polygonCentroid: centroid_default2,
    select: select_default2,
    selectAll: selectAll_default2,
    timerFlush: timerFlush
  };
  var sdk = {
    Extent: Extent,
    geoSphericalDistance: geoSphericalDistance,
    geoZoomToScale: geoZoomToScale,
    vecLength: vecLength,
    utilQsString: utilQsString,
    utilStringQs: utilStringQs
  };

  // modules/id.js
  window.requestIdleCallback = window.requestIdleCallback || function(cb) {
    var start2 = Date.now();
    return window.requestAnimationFrame(function() {
      cb({
        didTimeout: false,
        timeRemaining: function timeRemaining() {
          return Math.max(0, 50 - (Date.now() - start2));
        }
      });
    });
  };
  window.cancelIdleCallback = window.cancelIdleCallback || function(id2) {
    window.cancelAnimationFrame(id2);
  };
  window.iD = modules_exports;
})();
//# sourceMappingURL=iD.legacy.js.map
